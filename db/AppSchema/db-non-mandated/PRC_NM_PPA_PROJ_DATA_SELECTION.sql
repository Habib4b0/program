IF EXISTS (SELECT 'X'
           FROM   INFORMATION_SCHEMA.ROUTINES
           WHERE  ROUTINE_NAME = 'PRC_NM_PPA_PROJ_DATA_SELECTION'
                  AND ROUTINE_SCHEMA = 'DBO')
  BEGIN
      DROP PROCEDURE [DBO].[PRC_NM_PPA_PROJ_DATA_SELECTION]
  END

GO

CREATE  PROCEDURE [dbo].[PRC_NM_PPA_PROJ_DATA_SELECTION] (
	@PROJECTION_MASTER_SID INT
	,@USER_ID VARCHAR(100)
	,@SESSION_ID VARCHAR(100)
	,@NETTING BIT
	,@VIOLATION_DATE BIT
	,@SALES_FREQUENCY CHAR(1)
	)
AS
/**********************************************************************************************************
** FILE NAME		:	PRC_NM_PPA_PROJ_DATA_SELECTION.SQL
** PROCEDURE NAME	:	PRC_NM_PPA_PROJ_DATA_SELECTION
** DESCRIPTION		:	this procedure will calculate the ppa discount for the ccp's having no netting logic 
** INPUT PARAMETERS	:	@PROJECTION_SID	  - passing input as PROJECTION_MASTER_SID
						@USER_ID          - user id for the particular projection 
						@SESSION_ID       - session id for the particular projection 
						@NETTING		  - is there any netting logic ccps available , generally this will be 0
						@VIOLATION_DATE   - is there any ccps having reset type violation date available, genrally this will be 0/1
						@SALES_FREQUENCY  - it will be the used in calculation of the wac price and this will determine the start date of wac calculation
                        
** OUTPUT PARAMETERS:	na
** AUTHOR NAME		:	@SandeepKumar.A
** CREATION DATE	:	 
** CALLED BY		:   This procedure will be called from UI in the data selection screen.
**********************************************************************************************************
** CHANGE HISTORY
**********************************************************************************************************
** VER   DATE       LOCAL ALMTICKET NO      SUBTICKET NO        ONLINE ALM TICKET      AUTHOR                              DESCRIPTION 
** ---   --------      ---------             -------------        -------------     ----------------                       ------------------
** 1                                                                                   @pradeepthanga and @SandeepKumar.A  inorder to improve the performance the existing procedure was splitted into two one was this one and other was prc_nm_ppa_projeciton.
*****************************************************************************************************/

BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		--------------------------- VARIABLES DECLARATION SATRTS HERE-------------------
		DECLARE @PROJ_START_DATE DATETIME
		DECLARE @SQL NVARCHAR(MAX)
			,@ITEM_UOM VARCHAR(50) = 'EACH'
			,@REBATE_FREQUENCY VARCHAR(100)
			,@FROM_DATE DATETIME
			,@TO_DATE DATETIME
			,@ACTUAL_START_DATE DATE
			,@CURRENT_DATE DATE
			,@CURRENT_PERIOD INT
			,@ACTUAL_PERIOD_SID INT
			,@PROJ_START_PERIOD_SID INT
			,@PROJ_END_PERIOD_SID INT
			,@ITEMID [DBO].[UDT_ITEM]
			,@PRODUCT_TABLE VARCHAR(200) = CONCAT (
				'ST_PRODUCT_FILE_'
				,@USER_ID
				,'_'
				,@SESSION_ID
				,'_'
				,REPLACE(CONVERT(VARCHAR(50), GETDATE(), 2), '.', '')
				)
		DECLARE @PROJECTION_TABLE VARCHAR(200) = CONCAT (
				'ST_NM_PPA_PROJECTION_'
				,@USER_ID
				,'_'
				,@SESSION_ID
				,'_'
				,REPLACE(CONVERT(VARCHAR(50), GETDATE(), 2), '.', '')
				)
			,@MASTER_TABLE VARCHAR(200) = CONCAT (
				'ST_NM_PPA_PROJECTION_MASTER_'
				,@USER_ID
				,'_'
				,@SESSION_ID
				,'_'
				,REPLACE(CONVERT(VARCHAR(50), GETDATE(), 2), '.', '')
				)
			

		BEGIN
			SELECT @FROM_DATE = CASE 
					WHEN @SALES_FREQUENCY = 'M'
						OR @SALES_FREQUENCY IS NULL
						THEN DATEADD(MM, DATEDIFF(MM, 0, FROM_DATE), 0)
					WHEN @SALES_FREQUENCY = 'Q'
						THEN DATEADD(QQ, DATEDIFF(QQ, 0, FROM_DATE), 0)
					WHEN @SALES_FREQUENCY = 'S'
						THEN CASE 
								WHEN DATEPART(QQ, FROM_DATE) IN (
										2
										,4
										)
									THEN DATEADD(QQ, DATEDIFF(QQ, 0, FROM_DATE) - 1, 0)
								ELSE DATEADD(QQ, DATEDIFF(QQ, 0, FROM_DATE), 0)
								END
					ELSE DATEADD(YYYY, DATEDIFF(YYYY, 0, FROM_DATE), 0)
					END
				,@TO_DATE = CASE 
					WHEN @SALES_FREQUENCY = 'M'
						THEN DATEADD(MM, DATEDIFF(MM, 0, TO_DATE) + 1, 0) - 1
					WHEN @SALES_FREQUENCY = 'Q'
						THEN DATEADD(QQ, DATEDIFF(QQ, 0, TO_DATE) + 1, 0) - 1
					WHEN @SALES_FREQUENCY = 'S'
						THEN CASE 
								WHEN DATEPART(QQ, TO_DATE) IN (
										2
										,4
										)
									THEN DATEADD(QQ, DATEDIFF(QQ, 0, TO_DATE) + 1, 0) - 1
								ELSE DATEADD(QQ, DATEDIFF(QQ, 0, TO_DATE) + 2, 0) - 1
								END
					ELSE DATEADD(YYYY, DATEDIFF(YYYY, 0, TO_DATE) + 1, 0) - 1
					END
			FROM PROJECTION_MASTER
			WHERE PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
		END

		----------------------- VARIABLES DECLARATION  DATE ENDS HERE--------------------
		IF OBJECT_ID('TEMPDB.DBO.#PERIOD', 'U') IS NOT NULL
			DROP TABLE #PERIOD;

		SELECT PERIOD_SID
			,PERIOD_DATE
			,MONTH AS PERIOD_MONTH
			,QUARTER As PERIOD_QUARTER
			,SEMI_ANNUAL AS PERIOD_SEMI
			,YEAR AS PERIOD_YEAR
			,CONCAT (
				'M'
				,MONTH
				,' '
				,YEAR
				) AS MPERIOD
			,CONCAT (
				'Q'
				,QUARTER
				,' '
				,YEAR
				) AS QPERIOD
			,CONCAT (
				'S'
				,SEMI_ANNUAL
				,' '
				,YEAR
				) AS SPERIOD
			,CAST(YEAR AS CHAR(4)) AS YPERIOD
		INTO #PERIOD
		FROM PERIOD

		SET @ACTUAL_START_DATE = DATEADD(YY, DATEDIFF(YY, 0, GETDATE()) - 3, 0) -- FIRST DAY OF -3 YEARS
		SET @CURRENT_DATE = DATEADD(MM, DATEDIFF(MM, 0, GETDATE()), 0)
		---------------------taking the ccp and oprjection information form respective tables--------------------------
		IF OBJECT_ID('TEMPDB.DBO.#PROJECTION_DATES', 'U') IS NOT NULL
			DROP TABLE #PROJECTION_DATES;

		CREATE TABLE #PROJECTION_DATES (
			CCP_DETAILS_SID INT
			,CONTRACT_MASTER_SID INT
			,COMPANY_MASTER_SID INT
			,ITEM_MASTER_SID INT
			,PROJ_START_DATE DATETIME
			,PROJ_END_DATE DATETIME
			)

		BEGIN
			SET @SQL = CONCAT (
					'  INSERT INTO #PROJECTION_DATES
		  (
		  
		  CCP_DETAILS_SID        ,
		  CONTRACT_MASTER_SID    ,
		  COMPANY_MASTER_SID     ,
		  ITEM_MASTER_SID        ,
		  PROJ_START_DATE        ,
		  PROJ_END_DATE          
		  )

          SELECT DISTINCT 
                 CD.CCP_DETAILS_SID, 
                 CD.CONTRACT_MASTER_SID, 
                 CD.COMPANY_MASTER_SID, 
                 CD.ITEM_MASTER_SID, 
                 DATEADD(MM, DATEDIFF(MM, 0,  @FROM_DATE ), 0) PROJ_START_DATE, 
                 DATEADD(MM, DATEDIFF(MM, 0,  @TO_DATE ) + 1, 0) - 1 PROJ_END_DATE 
        
          FROM  CCP_DETAILS CD 
                     WHERE EXISTS (
				   SELECT 1 FROM '
					,@MASTER_TABLE
					,' S WHERE CD.CCP_DETAILS_SID = S.CCP_DETAILS_SID)
				
				   '
					,'AND EXISTS (
				  SELECT 1 FROM '
					,@PROJECTION_TABLE
					,' S
				  LEFT JOIN HELPER_TABLE HT4 ON HT4.HELPER_TABLE_SID=S.RESET_ELIGIBLE 
				  LEFT JOIN HELPER_TABLE HT5 ON HT5.HELPER_TABLE_SID=S.RESET_TYPE
				   WHERE CD.CCP_DETAILS_SID = S.CCP_DETAILS_SID '
					,CASE 
						WHEN @VIOLATION_DATE = 1
							THEN ' 
				  AND (HT4.DESCRIPTION=''YES'' AND HT5.DESCRIPTION=''VIOLATION DATE'') '
						END
					,')'
					,'AND not EXISTS (
				  SELECT 1 FROM '
					,@PROJECTION_TABLE
					,' S
				  LEFT JOIN HELPER_TABLE HT ON HT.HELPER_TABLE_SID=S.NET_BASE_PRICE
				  LEFT JOIN HELPER_TABLE HT1 ON HT1.HELPER_TABLE_SID=S.NET_SUBSEQUENT_PERIOD_PRICE
				  LEFT JOIN HELPER_TABLE HT2 ON HT2.HELPER_TABLE_SID=S.NET_RESET_PRICE_TYPE
				  LEFT JOIN HELPER_TABLE HT3 ON HT3.HELPER_TABLE_SID=S.NET_PRICE_TYPE
				   WHERE CD.CCP_DETAILS_SID = S.CCP_DETAILS_SID 
				   AND (HT.DESCRIPTION=''YES'' OR HT1.DESCRIPTION=''YES'' OR HT2.DESCRIPTION=''YES'' OR HT3.DESCRIPTION=''YES'') '
					,')'
					)
		END

		EXEC SP_EXECUTESQL @SQL
			,N'@FROM_DATE DATETIME,@TO_DATE DATETIME'
			,@FROM_DATE = @FROM_DATE
			,@TO_DATE = @TO_DATE

		-------------------------FETCH DATA FROM ST_NM_PPA_PROJECTION_MASTER FOR A GIVEN PROJECTION_ID STARTS HERE-----------------
		IF OBJECT_ID('TEMPDB..#TEMP_NM_PPA_PROJECTION_MASTER') IS NOT NULL
			DROP TABLE #TEMP_NM_PPA_PROJECTION_MASTER

		CREATE TABLE #TEMP_NM_PPA_PROJECTION_MASTER (
			ID INT IDENTITY(1, 1) PRIMARY KEY
			,RN INT
			--,PROJECTION_DETAILS_SID INT
			,CCP_DETAILS_SID INT
			,RS_CONTRACT_SID INT
			,CONTRACT_MASTER_SID INT
			,COMPANY_MASTER_SID INT
			,ITEM_MASTER_SID INT
			,USER_GROUP VARCHAR(50)
			,PRICE_PROTECTION_START_DATE DATETIME
			,PRICE_PROTECTION_END_DATE DATETIME
			,PRICE_PROTECTION_STATUS INT
			,CAL_START_DATE DATE
			,CAL_END_DATE DATE
			,REBATE_FREQUENCY VARCHAR(100)
			);

		SET @SQL = CONCAT (
				'  INSERT INTO #TEMP_NM_PPA_PROJECTION_MASTER 
                      (RN,
					  CCP_DETAILS_SID, 
                       CONTRACT_MASTER_SID, 
                       COMPANY_MASTER_SID, 
                       ITEM_MASTER_SID, 
                       USER_GROUP, 
                       PRICE_PROTECTION_START_DATE, 
                       PRICE_PROTECTION_END_DATE, 
                       PRICE_PROTECTION_STATUS, 
                       CAL_START_DATE, 
                       CAL_END_DATE, 
                       REBATE_FREQUENCY, 
                       RS_CONTRACT_SID) 
          SELECT ROW_NUMBER () OVER (ORDER BY A.CCP_DETAILS_SID, A.RS_CONTRACT_SID), 
                 A.CCP_DETAILS_SID, 
                 C.CONTRACT_MASTER_SID, 
                 C.COMPANY_MASTER_SID, 
                 C.ITEM_MASTER_SID, 
                 A.USER_GROUP, 
                 A.PRICE_PROTECTION_START_DATE, 
                 A.PRICE_PROTECTION_END_DATE, 
                 A.PRICE_PROTECTION_STATUS, 
                 IIF(PROJ_START_DATE > PRICE_PROTECTION_START_DATE, PROJ_START_DATE, PRICE_PROTECTION_START_DATE) AS CAL_START_DATE 
                 , 
                 IIF(PROJ_END_DATE < PRICE_PROTECTION_END_DATE, PROJ_END_DATE, PRICE_PROTECTION_END_DATE) AS CAL_END_DATE 
                 , 
                 HT.DESCRIPTION, 
                 A.RS_CONTRACT_SID 
          FROM   '
				,@MASTER_TABLE
				,' A 
                 JOIN CCP_DETAILS C 
                   ON C.CCP_DETAILS_SID = A.CCP_DETAILS_SID 
                 LEFT JOIN HELPER_TABLE HT 
                        ON HT.HELPER_TABLE_SID = A.REBATE_FREQUENCY 
                 JOIN #PROJECTION_DATES P_DATES 
                        ON P_DATES.CCP_DETAILS_SID = A.CCP_DETAILS_SID 
          '
				)

		EXEC sp_executesql @SQL

		-----------------------fetching prices from the different tables like history from item master and future periods from product tables----------------------
		

		SELECT @ACTUAL_PERIOD_SID = MAX(CASE 
					WHEN @ACTUAL_START_DATE = PERIOD_DATE
						THEN PERIOD_SID
					END)
			,@CURRENT_PERIOD = MAX(CASE 
					WHEN @CURRENT_DATE = PERIOD_DATE
						THEN PERIOD_SID
					END)
		FROM #PERIOD
		WHERE PERIOD_DATE IN (
				@ACTUAL_START_DATE
				,@PROJ_START_DATE
				,@CURRENT_DATE
				)

		SELECT @PROJ_START_PERIOD_SID = (
				SELECT PERIOD_SID
				FROM #PERIOD
				WHERE PERIOD_DATE = MIN(DATEADD(MM, DATEDIFF(MM, 0, PRICE_PROTECTION_START_DATE), 0))
				)
			,@PROJ_END_PERIOD_SID = (
				SELECT PERIOD_SID
				FROM #PERIOD
				WHERE PERIOD_DATE = MAX(DATEADD(MM, DATEDIFF(MM, 0, PRICE_PROTECTION_END_DATE), 0))
				)
		FROM #TEMP_NM_PPA_PROJECTION_MASTER T

		

		INSERT INTO @ITEMID
		SELECT DISTINCT ITEM_MASTER_SID
		FROM #TEMP_NM_PPA_PROJECTION_MASTER

		IF OBJECT_ID('TEMPDB.DBO.#UDF_ITEM_PRICING', 'U') IS NOT NULL
			DROP TABLE #UDF_ITEM_PRICING;

		SELECT ITEM_MASTER_SID,
				PERIOD_SID,
				PRICING_QUALIFIER,ITEM_PRICE
		INTO #UDF_ITEM_PRICING
		FROM DBO.UDF_ITEM_PRICING(@ITEMID, 'BQWAC,AVGQWAC,MQWAC,EQWAC,WAC', IIF(@ACTUAL_PERIOD_SID > @PROJ_START_PERIOD_SID, @PROJ_START_PERIOD_SID, @ACTUAL_PERIOD_SID), @CURRENT_PERIOD, @ITEM_UOM)

		IF OBJECT_ID('TEMPDB.DBO.#GTS_WAC', 'U') IS NOT NULL
			DROP TABLE #GTS_WAC;

		CREATE TABLE #GTS_WAC (
			ITEM_MASTER_SID INT
			,PERIOD_SID INT
			,ACTUAL_GTS_SALES NUMERIC(38, 15)
			,ACTUAL_GTS_UNITS NUMERIC(38, 15)
			,FORECAST_GTS_SALES NUMERIC(38, 15)
			,FORECAST_GTS_UNITS NUMERIC(38, 15)
			,ACTUAL_PRICE NUMERIC(38, 15)
			,FORECAST_PRICE NUMERIC(38, 15)
			,ITEM_PRICE NUMERIC(38, 15)
			,WAC_PRICE NUMERIC(38, 15)
			--,F_DAY_WEIGHTED_WAC_PRICE NUMERIC(38, 15)
			--,A_DAY_WEIGHTED_WAC_PRICE NUMERIC(38, 15)
			--,NO_OF_DAYS INT
			,MONTH INT
			,QUARTER INT
			,SEMI_ANNUAL INT
			,YEAR INT
			,PRIMARY KEY (
				ITEM_MASTER_SID
				,PERIOD_SID
				)
			)

		SET @SQL = CONCAT (
				'INSERT INTO #GTS_WAC (
			ITEM_MASTER_SID
			,PERIOD_SID
			,ACTUAL_GTS_SALES
			,ACTUAL_GTS_UNITS
			,FORECAST_GTS_SALES
			,FORECAST_GTS_UNITS
			,ACTUAL_PRICE
			,FORECAST_PRICE
			,ITEM_PRICE
			,WAC_PRICE
			--,F_DAY_WEIGHTED_WAC_PRICE
			--,A_DAY_WEIGHTED_WAC_PRICE
			--,NO_OF_DAYS
			,MONTH
			,QUARTER
			,SEMI_ANNUAL
			,YEAR
			)
		SELECT GTS.ITEM_MASTER_SID
			,GTS.PERIOD_SID
			,EXFACTORY_ACTUAL_SALES
			,EXFACTORY_ACTUAL_UNITS
			,EXFACTORY_FORECAST_SALES
			,EXFACTORY_FORECAST_UNITS			
			,EXFACTORY_ACTUAL_SALES/NULLIF(EXFACTORY_ACTUAL_UNITS,0) AS ACTUAL_PRICE
			,EXFACTORY_FORECAST_SALES/NULLIF(EXFACTORY_FORECAST_UNITS,0) AS FORECAST_PRICE
			,IP.ITEM_PRICE
			,COALESCE(EXFACTORY_FORECAST_SALES/NULLIF(EXFACTORY_FORECAST_UNITS,0) , IP.ITEM_PRICE) WAC_PRICE
			--,FORECAST_PRICE * DAY(DATEADD(DAY, - DAY(DATEADD(MONTH, 1, PERIOD_DATE)), DATEADD(MONTH, 1, PERIOD_DATE))) F_DAY_WEIGHTED_WAC_PRICE
			--,IP.ITEM_PRICE * DAY(DATEADD(DAY, - DAY(DATEADD(MONTH, 1, PERIOD_DATE)), DATEADD(MONTH, 1, PERIOD_DATE))) A_DAY_WEIGHTED_WAC_PRICE
			--,DAY(DATEADD(DAY, - DAY(DATEADD(MONTH, 1, PERIOD_DATE)), DATEADD(MONTH, 1, PERIOD_DATE))) NO_OF_DAYS
			,P.PERIOD_MONTH
			,P.PERIOD_QUARTER
			,P.PERIOD_SEMI
			,P.PERIOD_YEAR
		FROM '
				,@PRODUCT_TABLE
				,' GTS
		LEFT OUTER JOIN #UDF_ITEM_PRICING IP ON GTS.ITEM_MASTER_SID = IP.ITEM_MASTER_SID
			AND GTS.PERIOD_SID = IP.PERIOD_SID
			AND IP.PRICING_QUALIFIER = ''WAC''
		JOIN #PERIOD P ON P.PERIOD_SID = GTS.PERIOD_SID'
				)

		EXEC SP_EXECUTESQL @SQL
			,N'@REBATE_FREQUENCY CHAR(1)'
			,@REBATE_FREQUENCY = @REBATE_FREQUENCY
-------------identification of BQWAC,EQWAC,MQWAC,AVQWAC AND WAC from the above tables for all the periods-----------------------------------------------------------------

		IF OBJECT_ID('TEMPDB.DBO.#ITEM_WAC_PRICES', 'U') IS NOT NULL
			DROP TABLE #ITEM_WAC_PRICES;;

		WITH FORECAST_PRICE
		AS (
			SELECT ITEM_MASTER_SID
				,MAX(CASE 
						WHEN MONTH IN (
								1
								,4
								,7
								,10
								)
							THEN FORECAST_GTS_SALES
						END) / NULLIF(MAX(CASE 
							WHEN MONTH IN (
									1
									,4
									,7
									,10
									)
								THEN FORECAST_GTS_UNITS
							END), 0) 'F_BQWAC'
				,MAX(CASE 
						WHEN MONTH IN (
								3
								,6
								,9
								,12
								)
							THEN FORECAST_GTS_SALES
						END) / NULLIF(MAX(CASE 
							WHEN MONTH IN (
									3
									,6
									,9
									,12
									)
								THEN FORECAST_GTS_UNITS
							END), 0) 'F_EQWAC'
				,MAX(CASE 
						WHEN MONTH IN (
								2
								,5
								,8
								,11
								)
							THEN FORECAST_GTS_SALES
						END) / NULLIF(MAX(CASE 
							WHEN MONTH IN (
									2
									,5
									,8
									,11
									)
								THEN FORECAST_GTS_UNITS
							END), 0) 'F_MQWAC'
				-- AVG(COALESCE(ITEM_PRICE,FORECAST_PRICE)) AS 'F_AVGQWAC',
				--AVG(ACTUAL_GTS_SALES / NULLIF(ACTUAL_GTS_UNITS, 0)) AS 'A_SALES_WEIGHTED_AVERAGE_WAC'
				--,AVG(FORECAST_GTS_SALES / NULLIF(FORECAST_GTS_UNITS, 0)) AS 'F_SALES_WEIGHTED_AVERAGE_WAC'
				--,SUM(F_DAY_WEIGHTED_WAC_PRICE) / SUM(NO_OF_DAYS) AS 'F_DAY_WEIGHTED_WAC_PRICE'
				--,SUM(A_DAY_WEIGHTED_WAC_PRICE) / SUM(NO_OF_DAYS) AS 'A_DAY_WEIGHTED_WAC_PRICE'
				,MIN(PERIOD_SID) AS PERIOD_SID
				,MIN(QUARTER) AS QUARTER
				,MIN(SEMI_ANNUAL) AS SEMI_ANNUAL
				,MIN(YEAR) AS YEAR
			FROM #GTS_WAC C
			GROUP BY ITEM_MASTER_SID
				,YEAR
				,QUARTER
			)
			,BQWAC
		AS (
			SELECT ITEM_MASTER_SID
				,ITEM_PRICE 'A_BQWAC'
				,IP.PERIOD_SID
			FROM #UDF_ITEM_PRICING IP
			WHERE IP.PRICING_QUALIFIER = 'BQWAC'
			)
			,EQWAC
		AS (
			SELECT ITEM_MASTER_SID
				,ITEM_PRICE 'A_EQWAC'
				,IP.PERIOD_SID
			FROM #UDF_ITEM_PRICING IP
			WHERE IP.PRICING_QUALIFIER = 'EQWAC'
				AND IP.PERIOD_SID < @CURRENT_PERIOD
			)
			,MQWAC
		AS (
			SELECT ITEM_MASTER_SID
				,ITEM_PRICE 'A_MQWAC'
				,IP.PERIOD_SID
			FROM #UDF_ITEM_PRICING IP
			WHERE IP.PRICING_QUALIFIER = 'MQWAC'
			)
			,AVGWAC
		AS (
			SELECT ITEM_MASTER_SID
				,ITEM_PRICE 'A_AVGQWAC'
				,IP.PERIOD_SID
			FROM #UDF_ITEM_PRICING IP
			WHERE IP.PRICING_QUALIFIER = 'AVGQWAC'
				AND IP.PERIOD_SID < @CURRENT_PERIOD
			)
			,WAC
		AS (
			SELECT ITEM_MASTER_SID
				,ITEM_PRICE 'A_WAC'
				,IP.PERIOD_SID
			FROM #UDF_ITEM_PRICING IP
			WHERE IP.PRICING_QUALIFIER = 'WAC'
				AND IP.PERIOD_SID < @CURRENT_PERIOD
			)
			,ACTUAL_PRICE
		AS (
			SELECT P.PERIOD_SID
				,P.PERIOD_QUARTER QUARTER
				,P.PERIOD_SEMI SEMI_ANNUAL
				,P.PERIOD_YEAR YEAR
				,DATEADD(QQ, DATEDIFF(QQ, 0, P.PERIOD_DATE), 0) QUART_DATE
				,P.ITEM_MASTER_SID
				,B.A_BQWAC
				,A.A_AVGQWAC
				,E.A_EQWAC
				,M.A_MQWAC
				,W.A_WAC
			FROM (
				SELECT *
				FROM #PERIOD P
				CROSS JOIN @ITEMID I
				WHERE P.PERIOD_SID BETWEEN IIF(@ACTUAL_PERIOD_SID > @PROJ_START_PERIOD_SID, @PROJ_START_PERIOD_SID, @ACTUAL_PERIOD_SID) --@ACTUAL_PERIOD_SID
						AND @PROJ_END_PERIOD_SID
				) P
			LEFT JOIN BQWAC B ON B.PERIOD_SID = P.PERIOD_SID
				AND B.ITEM_MASTER_SID = P.ITEM_MASTER_SID
			LEFT JOIN EQWAC E ON E.PERIOD_SID = P.PERIOD_SID
				AND E.ITEM_MASTER_SID = P.ITEM_MASTER_SID
			LEFT JOIN MQWAC M ON M.PERIOD_SID = P.PERIOD_SID
				AND M.ITEM_MASTER_SID = P.ITEM_MASTER_SID
			LEFT JOIN AVGWAC A ON A.PERIOD_SID = P.PERIOD_SID
				AND A.ITEM_MASTER_SID = P.ITEM_MASTER_SID
			LEFT JOIN WAC W ON W.PERIOD_SID = P.PERIOD_SID
				AND W.ITEM_MASTER_SID = P.ITEM_MASTER_SID
			)
		SELECT COALESCE(AP.ITEM_MASTER_SID, FP.ITEM_MASTER_SID) ITEM_MASTER_SID
			,AP.PERIOD_SID
			,CASE 
				WHEN AP.QUART_DATE <= DATEADD(QQ, DATEDIFF(QQ, 0, @CURRENT_DATE), 0)
					THEN COALESCE(AP.A_BQWAC, LAG(AP.A_BQWAC) OVER (
								PARTITION BY AP.QUARTER
								,AP.YEAR ORDER BY AP.QUARTER
									,AP.YEAR
								))
				ELSE FP.F_BQWAC
				END F_BQWAC
			,AVG(CASE 
					WHEN AP.PERIOD_SID < @CURRENT_PERIOD
						THEN AP.A_WAC
					ELSE G.FORECAST_PRICE
					END) OVER (
				PARTITION BY AP.ITEM_MASTER_SID
				,G.YEAR
				,G.QUARTER ORDER BY AP.ITEM_MASTER_SID
					,G.YEAR
					,G.QUARTER
				) F_AVGQWAC
			,CASE 
				WHEN AP.QUART_DATE < DATEADD(QQ, DATEDIFF(QQ, 0, @CURRENT_DATE), 0)
					THEN AP.A_EQWAC
				ELSE FP.F_EQWAC
				END F_EQWAC
			,CASE 
				WHEN AP.QUART_DATE < DATEADD(QQ, DATEDIFF(QQ, 0, @CURRENT_DATE), 0)
					AND DATEADD(QQ, DATEDIFF(QQ, 0, @CURRENT_DATE), 0) <> @CURRENT_DATE
					THEN COALESCE(AP.A_MQWAC, LAG(AP.A_MQWAC) OVER (
								PARTITION BY AP.QUARTER
								,AP.YEAR ORDER BY AP.QUARTER
									,AP.YEAR
								))
				WHEN AP.QUART_DATE <= DATEADD(QQ, DATEDIFF(QQ, 0, @CURRENT_DATE), 0)
					AND DATEADD(QQ, DATEDIFF(QQ, 0, @CURRENT_DATE), 0) = @CURRENT_DATE
					THEN COALESCE(AP.A_MQWAC, LAG(AP.A_MQWAC) OVER (
								PARTITION BY AP.QUARTER
								,AP.YEAR ORDER BY AP.QUARTER
									,AP.YEAR
								))
				ELSE FP.F_MQWAC
				END F_MQWAC
			,G.FORECAST_PRICE FRCT_PRICE
			,CASE 
				WHEN AP.PERIOD_SID >= @CURRENT_PERIOD
					THEN G.FORECAST_PRICE
				ELSE G.ITEM_PRICE
				END  AS F_WAC--AP.A_MQWAC
		INTO #ITEM_WAC_PRICES
		FROM ACTUAL_PRICE AP
		LEFT JOIN FORECAST_PRICE FP ON AP.QUARTER = FP.QUARTER
			AND AP.YEAR = FP.YEAR
			AND FP.ITEM_MASTER_SID = AP.ITEM_MASTER_SID
		LEFT JOIN #GTS_WAC G ON AP.PERIOD_SID = G.PERIOD_SID
			AND G.ITEM_MASTER_SID = AP.ITEM_MASTER_SID

		IF DATEADD(QQ, DATEDIFF(QQ, 0, @CURRENT_DATE), 0) = @CURRENT_DATE
		BEGIN
			--SELECT 'ITS HERE'
				;

			WITH CTE
			AS (
				SELECT ITEM_MASTER_SID
					,MAX(CASE 
							WHEN MONTH IN (
									1
									,4
									,7
									,10
									)
								THEN FORECAST_GTS_SALES
							END) / NULLIF(MAX(CASE 
								WHEN MONTH IN (
										1
										,4
										,7
										,10
										)
									THEN FORECAST_GTS_UNITS
								END), 0) 'F_BQWAC'
					,MAX(CASE 
							WHEN MONTH IN (
									3
									,6
									,9
									,12
									)
								THEN FORECAST_GTS_SALES
							END) / NULLIF(MAX(CASE 
								WHEN MONTH IN (
										3
										,6
										,9
										,12
										)
									THEN FORECAST_GTS_UNITS
								END), 0) 'F_EQWAC'
					,MAX(CASE 
							WHEN MONTH IN (
									2
									,5
									,8
									,11
									)
								THEN FORECAST_GTS_SALES
							END) / NULLIF(MAX(CASE 
								WHEN MONTH IN (
										2
										,5
										,8
										,11
										)
									THEN FORECAST_GTS_UNITS
								END), 0) 'F_MQWAC'
					,MIN(PERIOD_SID) AS PERIOD_SID
					,MIN(QUARTER) AS QUARTER
					,MIN(SEMI_ANNUAL) AS SEMI_ANNUAL
					,MIN(YEAR) AS YEAR
				FROM #GTS_WAC C
				WHERE C.QUARTER = DATEPART(QQ, @CURRENT_DATE)
					AND C.YEAR = DATEPART(YYYY, @CURRENT_DATE)
				GROUP BY ITEM_MASTER_SID
					,YEAR
					,QUARTER
				)
			UPDATE I
			SET I.F_BQWAC = C.F_BQWAC
				,I.F_EQWAC = C.F_EQWAC
				,I.F_MQWAC = C.F_MQWAC
			FROM CTE C
			JOIN #ITEM_WAC_PRICES I ON I.ITEM_MASTER_SID = C.ITEM_MASTER_SID
			JOIN #PERIOD P ON P.PERIOD_SID = I.PERIOD_SID
				AND C.YEAR = P.PERIOD_YEAR
				AND C.QUARTER = P.PERIOD_QUARTER
		END

		CREATE NONCLUSTERED INDEX IDX_ITEM_WAC_PRICES ON #ITEM_WAC_PRICES (
			ITEM_MASTER_SID
			,PERIOD_SID
			)
-------------taking the period level information of the ccp+d from the projection tables-------------------------------
		
		IF OBJECT_ID('TEMPDB..#TEMP_NM_PPA_PROJECTION') IS NOT NULL
			DROP TABLE #TEMP_NM_PPA_PROJECTION

		CREATE TABLE #TEMP_NM_PPA_PROJECTION (
			TEMP_NM_PPA_PROJECTION_SID INT IDENTITY(1, 1)
			,DENSE_RNK INT
			--,PROJECTION_DETAILS_SID INT
			,CCP_DETAILS_SID INT
			,RS_CONTRACT_SID INT
			,ITEM_PRICING_QUALIFIER_SID VARCHAR(100)
			,NEP NUMERIC(22, 6)
			,BASE_PRICE_TYPE NUMERIC(22, 6)
			,NET_BASE_PRICE VARCHAR(100)
			,NET_BASE_PRICE_FORMULA INT
			,SUBSEQUENT_PERIOD_PRICE_TYPE VARCHAR(100)
			,NET_SUBSEQUENT_PERIOD_PRICE VARCHAR(100)
			,NET_SUBSEQUENT_PERIOD_PRICE_FORMULA INT
			,PRICE_TOLERANCE_INTERVAL INT
			,PRICE_TOLERANCE_FREQUENCY VARCHAR(100)
			,PRICE_TOLERANCE_TYPE VARCHAR(100)
			,PRICE_TOLERANCE NUMERIC(22, 6)
			,MAX_INCREMENTAL_CHANGE NUMERIC(22, 6)
			,NET_PRICE_TYPE VARCHAR(100)
			,NET_PRICE_TYPE_FORMULA INT
			,RESET_PRICE_CAP BIT
			,RESET BIT
			,PERIOD_SID INT
			,WAC NUMERIC(22, 6)
			,MAP NUMERIC(38, 15)
			,QUARTER INT
			,YEAR INT
			,RESET_ELIGIBLE VARCHAR(100)
			,RESET_TYPE VARCHAR(100)
			,RESET_DATE DATE
			,RESET_INTERVAL INT
			,RESET_FREQUENCY VARCHAR(100)
			,NET_WAC NUMERIC(22, 6)
			,NET_MAP NUMERIC(22, 6)
			,PRICE NUMERIC(22, 6)
			,PRICE_CHANGE NUMERIC(22, 6)
			,RN INT
			,NET_RESET_PRICE_TYPE VARCHAR(100)
			,NET_RESET_PRICE_FORMULA INT
			,RESET_PRICE_TYPE VARCHAR(100)
			,PPA NUMERIC(22, 6)
			)

		CREATE NONCLUSTERED INDEX IDX_1 ON #TEMP_NM_PPA_PROJECTION (
			RN
			,DENSE_RNK
			--,PROJECTION_DETAILS_SID
			,CCP_DETAILS_SID
			,RS_CONTRACT_SID
			,ITEM_PRICING_QUALIFIER_SID
			,PRICE_TOLERANCE_INTERVAL
			,PRICE_TOLERANCE_FREQUENCY
			,PRICE_TOLERANCE_TYPE
			,PERIOD_SID
			,SUBSEQUENT_PERIOD_PRICE_TYPE
			,RESET_ELIGIBLE
			,RESET_TYPE
			,RESET_DATE
			,RESET_INTERVAL
			,RESET_FREQUENCY
			,RESET_PRICE_TYPE
			);

		SET @SQL = CONCAT (
				';WITH RPU_CAL
		AS (
			SELECT SNP.CCP_DETAILS_SID
				,IPQ3.PRICING_QUALIFIER ITEM_PRICING_QUALIFIER_SID --SNP.ITEM_PRICING_QUALIFIER_SID
				,NULLIF(SNP.NEP, 0) NEP
				,SNP.NEP_FORMULA
				,SNP.BASE_PRICE_MANUAL
				,SNP.BASE_PRICE_DATE
				,SNP.BASE_PRICE_PRICE_TYPE
				,SNP.BASE_PRICE_TYPE
				,HT10.DESCRIPTION NET_BASE_PRICE --SNP.NET_BASE_PRICE
				,SNP.NET_BASE_PRICE_FORMULA
				,IPQ4.PRICING_QUALIFIER SUBSEQUENT_PERIOD_PRICE_TYPE --SNP.SUBSEQUENT_PERIOD_PRICE_TYPE
				,HT9.DESCRIPTION NET_SUBSEQUENT_PERIOD_PRICE --SNP.NET_SUBSEQUENT_PERIOD_PRICE
				,SNP.NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
				,HT1.DESCRIPTION PRICE_TOLERANCE_INTERVAL --SNP.PRICE_TOLERANCE_INTERVAL
				,HT.DESCRIPTION PRICE_TOLERANCE_FREQUENCY --	SNP.PRICE_TOLERANCE_FREQUENCY
				,HT2.DESCRIPTION PRICE_TOLERANCE_TYPE --SNP.PRICE_TOLERANCE_TYPE
				,SNP.PRICE_TOLERANCE
				,SNP.MAX_INCREMENTAL_CHANGE
				,HT8.DESCRIPTION NET_PRICE_TYPE --SNP.NET_PRICE_TYPE
				,SNP.NET_PRICE_TYPE_FORMULA
				,RESET_PRICE_CAP
				,HT3.DESCRIPTION RESET_ELIGIBLE
				,HT4.DESCRIPTION RESET_TYPE
				,DATEADD(MM, DATEDIFF(MM, 0, RESET_DATE), 0) RESET_DATE
				,HT5.DESCRIPTION RESET_INTERVAL
				,HT6.DESCRIPTION RESET_FREQUENCY
				,IPQ2.PRICING_QUALIFIER RESET_PRICE_TYPE
				,HT7.DESCRIPTION NET_RESET_PRICE_TYPE
				,NET_RESET_PRICE_FORMULA
				,P.PERIOD_SID
				,P.PERIOD_YEAR YEAR
				,P.PERIOD_QUARTER QUARTER
				,CASE 
					WHEN HEL.DESCRIPTION = ''MANUAL''
						THEN ISNULL(SNP.BASE_PRICE_MANUAL, 0)
					WHEN HEL.DESCRIPTION = ''DATE''
						THEN IWB.F_WAC
					WHEN HEL.DESCRIPTION = ''PRICE TYPE''
						THEN CASE 
								WHEN IPQ1.PRICING_QUALIFIER = ''BQWAC''
									THEN IWR.F_BQWAC
								WHEN IPQ1.PRICING_QUALIFIER = ''EQWAC''
									THEN IWR.F_EQWAC
								WHEN IPQ1.PRICING_QUALIFIER = ''AVGQWAC''
									THEN IWR.F_AVGQWAC
								WHEN IPQ1.PRICING_QUALIFIER = ''MQWAC''
									THEN IWR.F_MQWAC
								WHEN IPQ1.PRICING_QUALIFIER = ''WAC''
									THEN IWR.F_WAC
										--WHEN IPQ1.PRICING_QUALIFIER = ''DAY WEIGHTED WAC''
										--	THEN COALESCE(IWR.F_DAY_WEIGHTED_WAC_PRICE / NULLIF(IWR.NO_OF_DAYS, 0), 0)
										--WHEN IPQ1.PRICING_QUALIFIER = ''SALES WEIGHTED WAC''
										--	THEN IWR.F_SALES_WEIGHTED_AVERAGE_WAC
								END
							--ELSE COALESCE(IW.WAC, 0)
					END AS BASE_PRICE
				,T_MAS.RN
				,SNP.RS_CONTRACT_SID
			FROM  '
				,@PROJECTION_TABLE
				,
				'  SNP
			JOIN #TEMP_NM_PPA_PROJECTION_MASTER T_MAS ON T_MAS.CCP_DETAILS_SID = SNP.CCP_DETAILS_SID
				AND T_MAS.RS_CONTRACT_SID = SNP.RS_CONTRACT_SID
			LEFT JOIN ITEM_PRICING_QUALIFIER IPQ ON IPQ.ITEM_PRICING_QUALIFIER_SID = SNP.ITEM_PRICING_QUALIFIER_SID
			JOIN #PERIOD P ON P.PERIOD_SID = SNP.PERIOD_SID
			LEFT JOIN ITEM_PRICING_QUALIFIER IPQ1 ON IPQ1.ITEM_PRICING_QUALIFIER_SID = SNP.BASE_PRICE_PRICE_TYPE
			LEFT JOIN #ITEM_WAC_PRICES IWR ON IWR.PERIOD_SID = SNP.PERIOD_SID
				AND IWR.ITEM_MASTER_SID = T_MAS.ITEM_MASTER_SID
			LEFT JOIN PERIOD PE ON PE.PERIOD_DATE = DATEADD(MM, DATEDIFF(MM, 0, SNP.BASE_PRICE_DATE), 0)			
			LEFT JOIN #ITEM_WAC_PRICES IWB ON IWB.PERIOD_SID = PE.PERIOD_SID--SNP.PERIOD_SID
				AND IWB.ITEM_MASTER_SID = T_MAS.ITEM_MASTER_SID --AND IW.PERIOD_SID BETWEEN @START_DATE_SID AND @END_DATE_SID
			LEFT JOIN #ITEM_WAC_PRICES IWE ON IWE.PERIOD_SID = PE.PERIOD_SID
				AND IWE.ITEM_MASTER_SID = T_MAS.ITEM_MASTER_SID
			LEFT JOIN HELPER_TABLE HEL ON HEL.HELPER_TABLE_SID = SNP.BASE_PRICE_TYPE
			LEFT JOIN HELPER_TABLE HT ON HT.HELPER_TABLE_SID = SNP.PRICE_TOLERANCE_FREQUENCY
				AND HT.LIST_NAME = ''PRICE_TOLERANCE_FREQUENCY''
			LEFT JOIN HELPER_TABLE HT1 ON HT1.HELPER_TABLE_SID = SNP.PRICE_TOLERANCE_INTERVAL
				AND HT1.LIST_NAME = ''PRICE_TOLERANCE_INTERVAL''
			LEFT JOIN HELPER_TABLE HT2 ON HT2.HELPER_TABLE_SID = SNP.PRICE_TOLERANCE_TYPE
				AND HT2.LIST_NAME = ''PRICE_TOLERANCE_TYPE''
			LEFT JOIN HELPER_TABLE HT3 ON HT3.HELPER_TABLE_SID = SNP.RESET_ELIGIBLE
			LEFT JOIN HELPER_TABLE HT4 ON HT4.HELPER_TABLE_SID = SNP.RESET_TYPE
				AND HT4.LIST_NAME = ''RESET_TYPE''
			LEFT JOIN HELPER_TABLE HT5 ON HT5.HELPER_TABLE_SID = SNP.RESET_INTERVAL
				AND HT5.LIST_NAME = ''PRICE_TOLERANCE_INTERVAL''
			LEFT JOIN HELPER_TABLE HT6 ON HT6.HELPER_TABLE_SID = SNP.RESET_FREQUENCY
				AND HT6.LIST_NAME = ''PRICE_TOLERANCE_FREQUENCY''
			LEFT JOIN ITEM_PRICING_QUALIFIER IPQ2 ON IPQ2.ITEM_PRICING_QUALIFIER_SID = SNP.RESET_PRICE_TYPE
			LEFT JOIN HELPER_TABLE HT7 ON HT7.HELPER_TABLE_SID = SNP.NET_RESET_PRICE_TYPE
			LEFT JOIN HELPER_TABLE HT8 ON HT8.HELPER_TABLE_SID = SNP.NET_PRICE_TYPE
			LEFT JOIN HELPER_TABLE HT9 ON HT9.HELPER_TABLE_SID = SNP.NET_SUBSEQUENT_PERIOD_PRICE
			LEFT JOIN HELPER_TABLE HT10 ON HT10.HELPER_TABLE_SID = SNP.NET_BASE_PRICE
			LEFT JOIN ITEM_PRICING_QUALIFIER IPQ3 ON IPQ3.ITEM_PRICING_QUALIFIER_SID = SNP.ITEM_PRICING_QUALIFIER_SID
			LEFT JOIN ITEM_PRICING_QUALIFIER IPQ4 ON IPQ4.ITEM_PRICING_QUALIFIER_SID = SNP.SUBSEQUENT_PERIOD_PRICE_TYPE
			)
		INSERT INTO #TEMP_NM_PPA_PROJECTION (
			DENSE_RNK
			,CCP_DETAILS_SID
			,RS_CONTRACT_SID
			,ITEM_PRICING_QUALIFIER_SID
			,NEP
			,BASE_PRICE_TYPE
			,NET_BASE_PRICE
			,PRICE_TOLERANCE_INTERVAL
			,PRICE_TOLERANCE_FREQUENCY
			,PRICE_TOLERANCE_TYPE
			,PRICE_TOLERANCE
			,PERIOD_SID
			,RN
			,YEAR
			,QUARTER
			,SUBSEQUENT_PERIOD_PRICE_TYPE
			,NET_SUBSEQUENT_PERIOD_PRICE
			,RESET_ELIGIBLE
			,RESET_TYPE
			,RESET_DATE
			,RESET_INTERVAL
			,RESET_FREQUENCY
			,RESET_PRICE_TYPE
			,MAX_INCREMENTAL_CHANGE
			,NET_RESET_PRICE_TYPE
			,NET_RESET_PRICE_FORMULA
			,NET_PRICE_TYPE
			,NET_PRICE_TYPE_FORMULA
			,NET_BASE_PRICE_FORMULA
			,NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
			)
		SELECT 	DENSE_RANK() OVER (
				PARTITION BY CCP_DETAILS_SID
				,RS_CONTRACT_SID ORDER BY CCP_DETAILS_SID
					,RS_CONTRACT_SID
					,PERIOD_SID
				)
			,CCP_DETAILS_SID
			,RS_CONTRACT_SID
			,ITEM_PRICING_QUALIFIER_SID
			,NEP
			,BASE_PRICE
			,NET_BASE_PRICE
			,PRICE_TOLERANCE_INTERVAL
			,PRICE_TOLERANCE_FREQUENCY
			,PRICE_TOLERANCE_TYPE
			,PRICE_TOLERANCE
			,PERIOD_SID
			,RN
			,YEAR
			,QUARTER
			,SUBSEQUENT_PERIOD_PRICE_TYPE
			,NET_SUBSEQUENT_PERIOD_PRICE
			,RESET_ELIGIBLE
			,RESET_TYPE
			,RESET_DATE
			,RESET_INTERVAL
			,RESET_FREQUENCY
			,RESET_PRICE_TYPE
			,MAX_INCREMENTAL_CHANGE
			,NET_RESET_PRICE_TYPE
			,NET_RESET_PRICE_FORMULA
			,NET_PRICE_TYPE
			,NET_PRICE_TYPE_FORMULA
			,NET_BASE_PRICE_FORMULA
			,NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
		FROM RPU_CAL'
				);

		EXEC sp_executesql @SQL;
		--------------netting information was availble or not and these tables does not effect calculation----------------------
		
		IF OBJECT_ID('TEMPDB..#TEMP_REBATE_RPU') IS NOT NULL
			DROP TABLE #TEMP_REBATE_RPU

		CREATE TABLE #TEMP_REBATE_RPU (
			--PROJECTION_DETAILS_SID INT
			CCP_DETAILS_SID INT
			,REBATE_TYPE INT
			,PERIOD_SID INT
			,DEDUCTION_PER_UNIT NUMERIC(22, 6)
			)

		IF OBJECT_ID('TEMPDB..#TEMP_REBATES') IS NOT NULL
			DROP TABLE #TEMP_REBATES

		CREATE TABLE #TEMP_REBATES (
			CCP_DETAILS_SID INT
			,RS_CONTRACT_SID INT
			,PERIOD_SID INT
			,NET_BASE_PRICE NUMERIC(22, 6)
			,NET_SUBSEQUENT_PERIOD_PRICE NUMERIC(22, 6)
			,NET_RESET_PRICE NUMERIC(22, 6)
			,NET_PRICE NUMERIC(22, 6)
			);

		WITH NET_BASE_PRICE
		AS (
			SELECT DISTINCT TN.CCP_DETAILS_SID
				,TN.RS_CONTRACT_SID
				,TN.PERIOD_SID
				,ISNULL(TRR.DEDUCTION_PER_UNIT * J.INDICATOR, 0) PRODUCT
				,TRR.REBATE_TYPE
				,J.INDICATOR
			FROM #TEMP_NM_PPA_PROJECTION TN
			LEFT JOIN (
				SELECT DEDUCTION_TYPE DEDUCTION_SUB_TYPE
					,NS.NET_SALES_FORMULA_MASTER_SID
					,CASE 
						WHEN INDICATOR = '+'
							THEN (- 1)
						WHEN INDICATOR = '-'
							THEN 1
						END INDICATOR
				FROM DEDUCTION_DETAILS DD
				JOIN NET_SALES_FORMULA_MASTER NS ON NS.NET_SALES_FORMULA_MASTER_SID = DD.NET_SALES_FORMULA_MASTER_SID
				WHERE DD.INBOUND_STATUS <> 'D'
					AND NS.INBOUND_STATUS <> 'D'
				) J ON J.NET_SALES_FORMULA_MASTER_SID = TN.NET_BASE_PRICE_FORMULA
			LEFT JOIN #TEMP_REBATE_RPU TRR ON TRR.PERIOD_SID = TN.PERIOD_SID
				AND J.DEDUCTION_SUB_TYPE = TRR.REBATE_TYPE
				AND TRR.CCP_DETAILS_SID = TN.CCP_DETAILS_SID
			)
		INSERT INTO #TEMP_REBATES (
			CCP_DETAILS_SID
			,RS_CONTRACT_SID
			,PERIOD_SID
			,NET_BASE_PRICE
			)
		SELECT CCP_DETAILS_SID
			,RS_CONTRACT_SID
			,PERIOD_SID
			,SUM(PRODUCT)
		FROM NET_BASE_PRICE
		GROUP BY CCP_DETAILS_SID
			,RS_CONTRACT_SID
			,PERIOD_SID;

		WITH NET_SUBSEQUENT_PERIOD_PRICE
		AS (
			SELECT DISTINCT TN.CCP_DETAILS_SID
				,TN.RS_CONTRACT_SID
				,TN.PERIOD_SID
				,ISNULL(TRR.DEDUCTION_PER_UNIT * J.INDICATOR, 0) PRODUCT
				,TRR.REBATE_TYPE
				,J.INDICATOR
			FROM #TEMP_NM_PPA_PROJECTION TN
			LEFT JOIN (
				SELECT DEDUCTION_TYPE DEDUCTION_SUB_TYPE
					,NS.NET_SALES_FORMULA_MASTER_SID
					,CASE 
						WHEN INDICATOR = '+'
							THEN (- 1)
						WHEN INDICATOR = '-'
							THEN 1
						END INDICATOR
				FROM DEDUCTION_DETAILS DD
				JOIN NET_SALES_FORMULA_MASTER NS ON NS.NET_SALES_FORMULA_MASTER_SID = DD.NET_SALES_FORMULA_MASTER_SID
				WHERE DD.INBOUND_STATUS <> 'D'
					AND NS.INBOUND_STATUS <> 'D'
				) J ON J.NET_SALES_FORMULA_MASTER_SID = NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
			LEFT JOIN #TEMP_REBATE_RPU TRR ON TRR.PERIOD_SID = TN.PERIOD_SID
				AND J.DEDUCTION_SUB_TYPE = TRR.REBATE_TYPE
				AND TRR.CCP_DETAILS_SID = TN.CCP_DETAILS_SID
			)
		UPDATE T
		SET T.NET_SUBSEQUENT_PERIOD_PRICE = A.NET_SUBSEQUENT_PERIOD_PRICE
		FROM (
			SELECT CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,SUM(PRODUCT) NET_SUBSEQUENT_PERIOD_PRICE
			FROM NET_SUBSEQUENT_PERIOD_PRICE
			GROUP BY CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
			) A
		JOIN #TEMP_REBATES T ON T.PERIOD_SID = A.PERIOD_SID
			AND T.CCP_DETAILS_SID = A.CCP_DETAILS_SID
			AND T.RS_CONTRACT_SID = A.RS_CONTRACT_SID;

		WITH NET_RESET_PRICE
		AS (
			SELECT DISTINCT TN.CCP_DETAILS_SID
				,TN.RS_CONTRACT_SID
				,TN.PERIOD_SID
				,ISNULL(TRR.DEDUCTION_PER_UNIT * J.INDICATOR, 0) PRODUCT
				,TRR.REBATE_TYPE
				,J.INDICATOR
			FROM #TEMP_NM_PPA_PROJECTION TN
			LEFT JOIN (
				SELECT DEDUCTION_TYPE DEDUCTION_SUB_TYPE
					,NS.NET_SALES_FORMULA_MASTER_SID
					,CASE 
						WHEN INDICATOR = '+'
							THEN (- 1)
						WHEN INDICATOR = '-'
							THEN 1
						END INDICATOR
				FROM DEDUCTION_DETAILS DD
				JOIN NET_SALES_FORMULA_MASTER NS ON NS.NET_SALES_FORMULA_MASTER_SID = DD.NET_SALES_FORMULA_MASTER_SID
				WHERE DD.INBOUND_STATUS <> 'D'
					AND NS.INBOUND_STATUS <> 'D'
				) J ON J.NET_SALES_FORMULA_MASTER_SID = NET_RESET_PRICE_FORMULA
			LEFT JOIN #TEMP_REBATE_RPU TRR ON TRR.PERIOD_SID = TN.PERIOD_SID
				AND J.DEDUCTION_SUB_TYPE = TRR.REBATE_TYPE
				AND TRR.CCP_DETAILS_SID = TN.CCP_DETAILS_SID
			)
		UPDATE T
		SET T.NET_RESET_PRICE = A.NET_RESET_PRICE
		FROM (
			SELECT CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,SUM(PRODUCT) NET_RESET_PRICE
			FROM NET_RESET_PRICE
			GROUP BY CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
			) A
		JOIN #TEMP_REBATES T ON T.PERIOD_SID = A.PERIOD_SID
			AND T.CCP_DETAILS_SID = A.CCP_DETAILS_SID
			AND T.RS_CONTRACT_SID = A.RS_CONTRACT_SID;

		WITH NET_PRICE_TYPE
		AS (
			SELECT DISTINCT TN.CCP_DETAILS_SID
				,TN.RS_CONTRACT_SID
				,TN.PERIOD_SID
				,ISNULL(TRR.DEDUCTION_PER_UNIT * J.INDICATOR, 0) PRODUCT
				,TRR.REBATE_TYPE
				,J.INDICATOR
			FROM #TEMP_NM_PPA_PROJECTION TN
			LEFT JOIN (
				SELECT DEDUCTION_TYPE DEDUCTION_SUB_TYPE
					,NS.NET_SALES_FORMULA_MASTER_SID
					,CASE 
						WHEN INDICATOR = '+'
							THEN (- 1)
						WHEN INDICATOR = '-'
							THEN 1
						END INDICATOR
				FROM DEDUCTION_DETAILS DD
				JOIN NET_SALES_FORMULA_MASTER NS ON NS.NET_SALES_FORMULA_MASTER_SID = DD.NET_SALES_FORMULA_MASTER_SID
				WHERE DD.INBOUND_STATUS <> 'D'
					AND NS.INBOUND_STATUS <> 'D'
				) J ON J.NET_SALES_FORMULA_MASTER_SID = NET_PRICE_TYPE_FORMULA
			LEFT JOIN #TEMP_REBATE_RPU TRR ON TRR.PERIOD_SID = TN.PERIOD_SID
				AND J.DEDUCTION_SUB_TYPE = TRR.REBATE_TYPE
				AND TRR.CCP_DETAILS_SID = TN.CCP_DETAILS_SID
			)
		UPDATE T
		SET T.NET_PRICE = A.NET_PRICE_TYPE
		FROM (
			SELECT CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,SUM(PRODUCT) NET_PRICE_TYPE
			FROM NET_PRICE_TYPE
			GROUP BY CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
			) A
		JOIN #TEMP_REBATES T ON T.PERIOD_SID = A.PERIOD_SID
			AND A.CCP_DETAILS_SID = T.CCP_DETAILS_SID
			AND T.RS_CONTRACT_SID = A.RS_CONTRACT_SID;

		DECLARE @INCR INT = 1
			

		IF OBJECT_ID('TEMPDB..#TEMP2') IS NOT NULL
			DROP TABLE #TEMP2

		SELECT DISTINCT CONTRACT_MASTER_SID
			,ITEM_MASTER_SID
			,TN.RS_CONTRACT_SID
			,P.PERIOD_SID CAL_START_DATE
			,P2.PERIOD_SID CAL_END_DATE
			,P3.PERIOD_SID PRICE_PROTECTION_START_DATE
			,P4.PERIOD_SID PRICE_PROTECTION_END_DATE
			,TN.RESET_FREQUENCY AS RESET_TOL_FREQ
			,TN.RESET_INTERVAL AS RESET_TOL_INT
			,TN.RESET_ELIGIBLE AS RESET_ELIGIBLE
			,TN.RESET_TYPE AS RESET_TYPE
			,TN.PERIOD_SID AS RESET_PERIOD
			,TN.RESET_DATE AS RESET_DATE
			,TN.PRICE_TOLERANCE_FREQUENCY AS PRICE_TOL_FRQ
			,TN.PRICE_TOLERANCE_INTERVAL AS PRICE_TOL_INT
			,TN.PRICE_TOLERANCE_TYPE AS PRICE_TOL_TYPE
			,TM.REBATE_FREQUENCY
		INTO #TEMP2
		FROM #TEMP_NM_PPA_PROJECTION TN
		JOIN #TEMP_NM_PPA_PROJECTION_MASTER TM ON TM.CCP_DETAILS_SID = TN.CCP_DETAILS_SID
			AND TM.RS_CONTRACT_SID = TN.RS_CONTRACT_SID
			AND TM.RN = TN.RN
		JOIN #PERIOD P ON P.PERIOD_DATE = DATEADD(MM, DATEDIFF(MM, 0, TM.CAL_START_DATE), 0)
		JOIN #PERIOD P2 ON P2.PERIOD_DATE = DATEADD(MM, DATEDIFF(MM, 0, TM.CAL_END_DATE), 0)
		JOIN #PERIOD P3 ON P3.PERIOD_DATE = DATEADD(MM, DATEDIFF(MM, 0, TM.PRICE_PROTECTION_START_DATE), 0)
		JOIN #PERIOD P4 ON P4.PERIOD_DATE = DATEADD(MM, DATEDIFF(MM, 0, TM.PRICE_PROTECTION_END_DATE), 0)
		WHERE TN.DENSE_RNK = 1
--------------taking the price infor based on the rebate frequency----------------------

		IF OBJECT_ID('TEMPDB..#TEMP_WAC_PRICES') IS NOT NULL
			DROP TABLE #TEMP_WAC_PRICES

		CREATE TABLE #TEMP_WAC_PRICES (
			WAC_ID INT IDENTITY(1, 1)
			,CONTRACT_MASTER_SID INT
			,RS_CONTRACT_SID INT
			,ITEM_MASTER_SID INT
			,PERIOD_SID INT
			,PERIOD_QUARTER INT
			,PERIOD_YEAR INT
			,PERIOD_SEMI INT
			,F_BQWAC NUMERIC(22, 6)
			,F_AVGQWAC NUMERIC(22, 6)
			,F_EQWAC NUMERIC(22, 6)
			,F_MQWAC NUMERIC(22, 6)
			,F_WAC NUMERIC(22, 6)
			--,F_SALES_WEIGHTED_AVERAGE_WAC NUMERIC(22, 6)
			--,F_DAY_WEIGHTED_WAC_PRICE NUMERIC(22, 6)
			);

		CREATE NONCLUSTERED INDEX IDX_TEMP_WAC_PRICES ON #TEMP_WAC_PRICES (
			ITEM_MASTER_SID
			,PERIOD_SID
			);;

		WITH CTE
		AS (
			SELECT T2.CONTRACT_MASTER_SID
				,T2.RS_CONTRACT_SID
				,I.PERIOD_SID
				,I.ITEM_MASTER_SID
				,I.F_BQWAC
				,I.F_AVGQWAC
				,I.F_EQWAC
				,I.F_MQWAC
				,I.F_WAC
				,T2.REBATE_FREQUENCY
				,ROW_NUMBER() OVER (
					PARTITION BY T2.CONTRACT_MASTER_SID
					,T2.ITEM_MASTER_SID
					,T2.RS_CONTRACT_SID ORDER BY T2.CONTRACT_MASTER_SID
						,T2.ITEM_MASTER_SID
						,T2.RS_CONTRACT_SID
						,I.PERIOD_SID
					) RN
			FROM #ITEM_WAC_PRICES I
			JOIN #TEMP2 T2 ON I.ITEM_MASTER_SID = T2.ITEM_MASTER_SID
			WHERE I.PERIOD_SID BETWEEN T2.CAL_START_DATE
					AND T2.CAL_END_DATE
			)
			,CTE3
		AS (
			SELECT *
				,(
					(RN - 1) % CASE 
						WHEN LEFT(REBATE_FREQUENCY, 1) = 'Q'
							THEN 3
						WHEN LEFT(REBATE_FREQUENCY, 1) = 'M'
							THEN 1
						WHEN LEFT(REBATE_FREQUENCY, 1) = 'S'
							THEN 6
						WHEN LEFT(REBATE_FREQUENCY, 1) = 'A'
							THEN 12
						END
					) + 1 REBATE_FREQ
			FROM CTE
			)
		INSERT INTO #TEMP_WAC_PRICES (
			PERIOD_SID
			,ITEM_MASTER_SID
			,CONTRACT_MASTER_SID
			,RS_CONTRACT_SID
			,F_BQWAC
			,F_AVGQWAC
			,F_EQWAC
			,F_MQWAC
			,F_WAC
			,PERIOD_QUARTER
			,PERIOD_YEAR
			,PERIOD_SEMI
			)
		SELECT C.PERIOD_SID
			,ITEM_MASTER_SID
			,CONTRACT_MASTER_SID
			,RS_CONTRACT_SID
			,F_BQWAC
			,F_AVGQWAC
			,F_EQWAC
			,F_MQWAC
			,F_WAC
			,PERIOD_QUARTER
			,PERIOD_YEAR
			,PERIOD_SEMI
		FROM CTE3 C
		JOIN #PERIOD P ON P.PERIOD_SID = C.PERIOD_SID
		WHERE REBATE_FREQ = 1;
----------------------------pre calcuating the reset periods for all resets except violation date and ccp's having no reset-----------------------------------------

		IF EXISTS (
				SELECT 1
				FROM #TEMP_NM_PPA_PROJECTION B
				WHERE RESET_ELIGIBLE = 'YES'
					AND RESET_TYPE = 'INTERVAL FREQUENCY'
					AND RESET_FREQUENCY IS NOT NULL
					AND RESET_INTERVAL IS NOT NULL
					AND DENSE_RNK = 1
				)
		BEGIN
			/*UPDATE A
			SET A.RESET = CASE 
					WHEN RESET_ELIGIBLE = 'YES'
						THEN 1
					ELSE 0
					END
			FROM #TEMP_NM_PPA_PROJECTION A
			JOIN (
				SELECT CASE 
						WHEN LEFT(RESET_FREQUENCY, 1) = 'A'
							THEN RESET_INTERVAL * 12
						WHEN LEFT(RESET_FREQUENCY, 1) = 'S'
							THEN RESET_INTERVAL * 6
						WHEN LEFT(RESET_FREQUENCY, 1) = 'Q'
							THEN RESET_INTERVAL * 3
						ELSE RESET_INTERVAL
						END RESET_PERIOD
					,CCP_DETAILS_SID
					,RS_CONTRACT_SID
					,RN
					,PERIOD_SID
				FROM #TEMP_NM_PPA_PROJECTION B
				WHERE RESET_ELIGIBLE = 'YES'
					AND RESET_TYPE = 'INTERVAL FREQUENCY'
					AND RESET_FREQUENCY IS NOT NULL
					AND RESET_INTERVAL IS NOT NULL
					AND DENSE_RNK = 1
				) X ON X.CCP_DETAILS_SID = A.CCP_DETAILS_SID
				AND X.RS_CONTRACT_SID = A.RS_CONTRACT_SID
				AND X.RN = A.RN
				AND A.PERIOD_SID = (X.PERIOD_SID + X.RESET_PERIOD)*/
				;

			WITH CTE
			AS (
				SELECT CASE 
						WHEN LEFT(RESET_FREQUENCY, 1) = 'A'
							THEN RESET_INTERVAL * 12
						WHEN LEFT(RESET_FREQUENCY, 1) = 'S'
							THEN RESET_INTERVAL * 6
						WHEN LEFT(RESET_FREQUENCY, 1) = 'Q'
							THEN RESET_INTERVAL * 3
						ELSE RESET_INTERVAL
						END RESET_PERIOD
					,B.CCP_DETAILS_SID
					,B.RS_CONTRACT_SID
					,RN
					,PERIOD_SID
					,X.MAX_PERIOD
				--(SELECT FROM #TEMP_NM_PPA_PROJECTION A WHERE A.CCP_DETAILS_SID=B.CCP_DETAILS_SID AND A.RS_CONTRACT_SID=B.RS_CONTRACT_SID AND A.RN=B.RN) MAX_PERIOD
				FROM #TEMP_NM_PPA_PROJECTION B
				JOIN (
					SELECT MAX(PERIOD_SID) MAX_PERIOD
						,A.CCP_DETAILS_SID
						,A.RS_CONTRACT_SID
					FROM #TEMP_NM_PPA_PROJECTION A
					WHERE RESET_ELIGIBLE = 'YES'
						AND RESET_TYPE = 'INTERVAL FREQUENCY'
						AND RESET_FREQUENCY IS NOT NULL
						AND RESET_INTERVAL IS NOT NULL
					GROUP BY A.CCP_DETAILS_SID
						,A.RS_CONTRACT_SID
					) X ON B.CCP_DETAILS_SID = X.CCP_DETAILS_SID
					AND B.RS_CONTRACT_SID = X.RS_CONTRACT_SID
				WHERE RESET_ELIGIBLE = 'YES'
					AND RESET_TYPE = 'INTERVAL FREQUENCY'
					AND RESET_FREQUENCY IS NOT NULL
					AND RESET_INTERVAL IS NOT NULL
					AND DENSE_RNK = 1
				)
				,RECURR_CTE
			AS (
				SELECT RESET_PERIOD
					,CCP_DETAILS_SID
					,RS_CONTRACT_SID
					,RN
					,MAX_PERIOD
					,PERIOD_SID
					,PERIOD_SID AS REC_PERIOD
				FROM CTE
				
				UNION ALL
				
				SELECT C.RESET_PERIOD
					,C.CCP_DETAILS_SID
					,C.RS_CONTRACT_SID
					,C.RN
					,C.MAX_PERIOD
					,C.PERIOD_SID
					,(RC.REC_PERIOD + C.RESET_PERIOD)
				FROM RECURR_CTE RC
				JOIN CTE C ON RC.CCP_DETAILS_SID = C.CCP_DETAILS_SID
					AND RC.RS_CONTRACT_SID = C.RS_CONTRACT_SID
				WHERE (RC.REC_PERIOD + C.RESET_PERIOD) < C.MAX_PERIOD
				)
			UPDATE T
			SET RESET = CASE 
					WHEN RESET_ELIGIBLE = 'YES'
						THEN 1
					ELSE 0
					END
			FROM #TEMP_NM_PPA_PROJECTION T
			JOIN RECURR_CTE RC ON RC.CCP_DETAILS_SID = T.CCP_DETAILS_SID
				AND RC.RS_CONTRACT_SID = T.RS_CONTRACT_SID
				AND RC.RN = T.RN
				AND T.PERIOD_SID = RC.REC_PERIOD
		END

		IF EXISTS (
				SELECT 1
				FROM #TEMP_NM_PPA_PROJECTION B
				WHERE RESET_ELIGIBLE = 'YES'
					AND RESET_TYPE = 'EFFECTIVE DATE'
					AND RESET_DATE IS NOT NULL
					AND DENSE_RNK = 1
				)
		BEGIN
			UPDATE A
			SET A.RESET = CASE 
					WHEN RESET_ELIGIBLE = 'YES'
						THEN 1
					ELSE 0
					END
			FROM #TEMP_NM_PPA_PROJECTION A
			JOIN (
				SELECT P.PERIOD_SID RESET_PERIOD
					,CCP_DETAILS_SID
					,RS_CONTRACT_SID
					,RN
					,B.PERIOD_SID
				FROM #TEMP_NM_PPA_PROJECTION B
				JOIN #PERIOD P ON P.PERIOD_DATE = B.RESET_DATE
				WHERE RESET_ELIGIBLE = 'YES'
					AND RESET_TYPE = 'EFFECTIVE DATE'
					AND RESET_DATE IS NOT NULL
					AND DENSE_RNK = 1
				) X ON X.CCP_DETAILS_SID = A.CCP_DETAILS_SID
				AND X.RS_CONTRACT_SID = A.RS_CONTRACT_SID
				AND X.RN = A.RN
				AND A.PERIOD_SID = X.RESET_PERIOD
		END
-------------------------calcuating the wac,net,netwac for the first period of each ccp and rs--------------------------------------------

		UPDATE T
		SET BASE_PRICE_TYPE = CASE 
				WHEN T.NET_BASE_PRICE = 'YES'
					THEN (BASE_PRICE_TYPE - TR.NET_BASE_PRICE)
				ELSE BASE_PRICE_TYPE
				END
			,WAC = CASE 
				WHEN T.ITEM_PRICING_QUALIFIER_SID = 'BQWAC'
					THEN ISNULL(WP.F_BQWAC, 0)
				WHEN T.ITEM_PRICING_QUALIFIER_SID = 'EQWAC'
					THEN ISNULL(WP.F_EQWAC, 0)
				WHEN T.ITEM_PRICING_QUALIFIER_SID = 'AVGQWAC'
					THEN ISNULL(WP.F_AVGQWAC, 0)
				WHEN T.ITEM_PRICING_QUALIFIER_SID = 'MQWAC'
					THEN ISNULL(WP.F_MQWAC, 0)
						--WHEN IPQ.PRICING_QUALIFIER = 'DAY WEIGHTED WAC'
						--	THEN WP.F_DAY_WEIGHTED_WAC_PRICE
						--WHEN IPQ.PRICING_QUALIFIER = 'SALES WEIGHTED WAC'
						--	THEN WP.F_SALES_WEIGHTED_AVERAGE_WAC
				WHEN T.ITEM_PRICING_QUALIFIER_SID = 'WAC'
					THEN ISNULL(WP.F_WAC, 0)
				END
			,NET_WAC = (
				CASE 
					WHEN T.ITEM_PRICING_QUALIFIER_SID = 'BQWAC'
						THEN ISNULL(WP.F_BQWAC, 0)
					WHEN T.ITEM_PRICING_QUALIFIER_SID = 'EQWAC'
						THEN ISNULL(WP.F_EQWAC, 0)
					WHEN T.ITEM_PRICING_QUALIFIER_SID = 'AVGQWAC'
						THEN ISNULL(WP.F_AVGQWAC, 0)
					WHEN T.ITEM_PRICING_QUALIFIER_SID = 'MQWAC'
						THEN ISNULL(WP.F_MQWAC, 0)
							--WHEN IPQ.PRICING_QUALIFIER = 'DAY WEIGHTED WAC'
							--	THEN WP.F_DAY_WEIGHTED_WAC_PRICE
							--WHEN IPQ.PRICING_QUALIFIER = 'SALES WEIGHTED WAC'
							--	THEN WP.F_SALES_WEIGHTED_AVERAGE_WAC
					WHEN T.ITEM_PRICING_QUALIFIER_SID = 'WAC'
						THEN ISNULL(WP.F_WAC, 0)
					END
				) - CASE 
				WHEN T.NET_PRICE_TYPE = 'YES'
					THEN (TR.NET_PRICE)
				ELSE 0
				END
			,MAP = CASE 
				WHEN NEP IS NOT NULL
					THEN NEP
				ELSE CASE 
						WHEN LEFT(T.PRICE_TOLERANCE_TYPE, 1) = 'P'
							THEN (
									CASE 
										WHEN T.NET_BASE_PRICE = 'YES'
											THEN (BASE_PRICE_TYPE - TR.NET_BASE_PRICE)
										ELSE BASE_PRICE_TYPE
										END
									) * (1 + PRICE_TOLERANCE / 100.0)
						WHEN LEFT(T.PRICE_TOLERANCE_TYPE, 1) = 'D'
							THEN (
									CASE 
										WHEN T.NET_BASE_PRICE = 'YES'
											THEN (BASE_PRICE_TYPE - TR.NET_BASE_PRICE)
										ELSE BASE_PRICE_TYPE
										END
									) + PRICE_TOLERANCE
						END
				END
		FROM #TEMP_NM_PPA_PROJECTION T
		LEFT JOIN #TEMP_REBATES TR ON TR.PERIOD_SID = T.PERIOD_SID
			AND TR.CCP_DETAILS_SID = T.CCP_DETAILS_SID
			AND TR.RS_CONTRACT_SID = T.RS_CONTRACT_SID
		JOIN #TEMP_NM_PPA_PROJECTION_MASTER MAS ON MAS.CCP_DETAILS_SID = T.CCP_DETAILS_SID
			AND MAS.RS_CONTRACT_SID = T.RS_CONTRACT_SID
		JOIN #PERIOD P ON P.PERIOD_SID = T.PERIOD_SID
		LEFT JOIN #TEMP_WAC_PRICES WP ON WP.PERIOD_SID = T.PERIOD_SID
			AND WP.ITEM_MASTER_SID = MAS.ITEM_MASTER_SID
		WHERE T.DENSE_RNK = @INCR

		UPDATE #TEMP_NM_PPA_PROJECTION
		SET PRICE = WAC
			,NET_MAP = MAP
		WHERE DENSE_RNK = @INCR

		IF OBJECT_ID('TEMPDB..#RESET_PERIOD') IS NOT NULL
			DROP TABLE #RESET_PERIOD

		CREATE TABLE #RESET_PERIOD (
			CCP_DETAILS_SID INT
			,RS_CONTRACT_SID INT
			,PERIOD_SID INT
			,RESET_PER INT
			,WAC_RESET INT
			,RESET INT
			,WAC NUMERIC(22, 6)
			,NET_WAC NUMERIC(22, 6)
			,MAP NUMERIC(22, 6)
			,NET_MAP NUMERIC(22, 6)
			);;

		WITH RESET_TER
		AS (
			SELECT *
				,ROW_NUMBER() OVER (
					PARTITION BY CCP_DETAILS_SID
					,RS_CONTRACT_SID
					,RN ORDER BY CCP_DETAILS_SID
						,RS_CONTRACT_SID
						,RN
						,DENSE_RNK
					) RESERT_RN
			FROM #TEMP_NM_PPA_PROJECTION
			WHERE RESET = 1
			)
			,RESET_PERIOD
		AS (
			SELECT TP.CCP_DETAILS_SID
				,TP.RS_CONTRACT_SID
				,TP.RN
				,TP.PERIOD_SID
			--      INTO #RESET_PERIOD
			FROM RESET_TER TP
			WHERE TP.RESERT_RN = 1
				--WHERE TP.RESET = 1 
			)
			,FIRST_PERIOD
		AS (
			SELECT CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,RN
				,MIN(PERIOD_SID) PERIOD_SID
			FROM #TEMP_NM_PPA_PROJECTION TP
			GROUP BY CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,RN
			) --SELECT * FROM FIRST_PERIOD
			,CTE
		AS (
			SELECT C.*
				,(
					(
						ROW_NUMBER() OVER (
							PARTITION BY C.CCP_DETAILS_SID
							,C.RS_CONTRACT_SID ORDER BY C.PERIOD_SID
							) - 1
						) / (
						C.PRICE_TOLERANCE_INTERVAL * (
							CASE 
								WHEN LEFT(C.PRICE_TOLERANCE_FREQUENCY, 1) = 'Q'
									THEN 3
								WHEN LEFT(C.PRICE_TOLERANCE_FREQUENCY, 1) = 'M'
									THEN 1
								WHEN LEFT(C.PRICE_TOLERANCE_FREQUENCY, 1) = 'S'
									THEN 6
								WHEN LEFT(C.PRICE_TOLERANCE_FREQUENCY, 1) = 'A'
									THEN 12
								END
							)
						)
					) + 1 AS NEP_RN
				,ISNULL(RP.PERIOD_SID, RP1.PERIOD_SID) RESET_P
				,(
					(
						ROW_NUMBER() OVER (
							PARTITION BY C.CCP_DETAILS_SID
							,C.RS_CONTRACT_SID ORDER BY C.PERIOD_SID
							) - 1
						) / (
						CASE 
							WHEN LEFT(MAS.REBATE_FREQUENCY, 1) = 'Q'
								THEN 3
							WHEN LEFT(MAS.REBATE_FREQUENCY, 1) = 'M'
								THEN 1
							WHEN LEFT(MAS.REBATE_FREQUENCY, 1) = 'S'
								THEN 6
							WHEN LEFT(MAS.REBATE_FREQUENCY, 1) = 'A'
								THEN 12
							END
						)
					) + 1 WAC_RN
				,MAS.REBATE_FREQUENCY
			FROM #TEMP_NM_PPA_PROJECTION C
			LEFT JOIN RESET_PERIOD RP ON RP.CCP_DETAILS_SID = C.CCP_DETAILS_SID
				AND RP.RS_CONTRACT_SID = C.RS_CONTRACT_SID
				AND RP.RN = C.RN
			JOIN #TEMP_NM_PPA_PROJECTION_MASTER MAS ON MAS.CCP_DETAILS_SID = C.CCP_DETAILS_SID
				AND MAS.RS_CONTRACT_SID = C.RS_CONTRACT_SID
				AND MAS.RN = C.RN
			LEFT JOIN FIRST_PERIOD RP1 ON RP1.CCP_DETAILS_SID = C.CCP_DETAILS_SID
				AND RP1.RS_CONTRACT_SID = C.RS_CONTRACT_SID
				AND RP1.RN = C.RN
			)
			--SELECT * FROM CTE
			,CTE2
		AS (
			SELECT CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,MAX(NEP_RN) MAX_NEP_R
				,MAX(WAC_RN) MAX_WAC_RN
			FROM CTE
			WHERE PERIOD_SID < RESET_P
			GROUP BY CCP_DETAILS_SID
				,RS_CONTRACT_SID
			)
			,CTE3
		AS (
			SELECT *
			FROM CTE
			WHERE PERIOD_SID >= RESET_P
			) --SELECT * FROM CTE3
		INSERT INTO #RESET_PERIOD (
			CCP_DETAILS_SID
			,RS_CONTRACT_SID
			,PERIOD_SID
			,RESET_PER
			,RESET
			,WAC_RESET
			)
		SELECT CCP_DETAILS_SID
			,RS_CONTRACT_SID
			,PERIOD_SID
			,COALESCE(NEW_NEP_RN, NEP_RN) RESET_PER
			,RESET
			,COALESCE(NEW_WAC_RN, WAC_RN) WAC_RESET_PER
		--INTO #RESET_PERIOD
		FROM (
			SELECT *
				,NULL AS NEW_NEP_RN
				,NULL AS NEW_WAC_RN
			FROM CTE
			WHERE PERIOD_SID < RESET_P
			
			UNION ALL
			
			SELECT C.*
				,--CASE WHEN  C.PERIOD_SID >= C.RESET_P THEN 
				(
					(
						(
							(
								ROW_NUMBER() OVER (
									PARTITION BY C.CCP_DETAILS_SID
									,C.RS_CONTRACT_SID ORDER BY PERIOD_SID
									) - 1
								) / (
								C.PRICE_TOLERANCE_INTERVAL * (
									CASE 
										WHEN LEFT(C.PRICE_TOLERANCE_FREQUENCY, 1) = 'Q'
											THEN 3
										WHEN LEFT(C.PRICE_TOLERANCE_FREQUENCY, 1) = 'M'
											THEN 1
										WHEN LEFT(C.PRICE_TOLERANCE_FREQUENCY, 1) = 'S'
											THEN 6
										WHEN LEFT(C.PRICE_TOLERANCE_FREQUENCY, 1) = 'A'
											THEN 12
										END
									)
								)
							) + 1
						) + ISNULL(MAX_NEP_R, 0)
					)
				,--ELSE NULL END,
				--CASE WHEN  C.PERIOD_SID >= C.RESET_P THEN 
				(
					(
						(
							(
								ROW_NUMBER() OVER (
									PARTITION BY C.CCP_DETAILS_SID
									,C.RS_CONTRACT_SID ORDER BY PERIOD_SID
									) - 1
								) / (
								CASE 
									WHEN LEFT(C.REBATE_FREQUENCY, 1) = 'Q'
										THEN 3
									WHEN LEFT(C.REBATE_FREQUENCY, 1) = 'M'
										THEN 1
									WHEN LEFT(C.REBATE_FREQUENCY, 1) = 'S'
										THEN 6
									WHEN LEFT(C.REBATE_FREQUENCY, 1) = 'A'
										THEN 12
									END
								)
							) + 1
						) + ISNULL(MAX_WAC_RN, 0)
					)
			---	ELSE NULL END
			FROM CTE3 C
			LEFT JOIN CTE2 B ON B.CCP_DETAILS_SID = C.CCP_DETAILS_SID
				AND C.RS_CONTRACT_SID = B.RS_CONTRACT_SID
				AND C.PERIOD_SID >= C.RESET_P
			) B

		UPDATE RP
		SET MAP = TP.MAP
			,NET_MAP = TP.NET_MAP
			,WAC = TP.WAC
			,NET_WAC = TP.NET_WAC
		FROM #RESET_PERIOD RP
		JOIN #TEMP_NM_PPA_PROJECTION TP ON TP.CCP_DETAILS_SID = RP.CCP_DETAILS_SID
			AND TP.RS_CONTRACT_SID = RP.RS_CONTRACT_SID
			AND TP.DENSE_RNK = RP.RESET_PER
			AND RP.RESET_PER = 1
			AND WAC_RESET = 1
-------------------------combining the reset information, ccp +rs period wise information and price infor in single temp table so for the future this will be used in calculated-------------------------------------------

		IF OBJECT_ID('TEMPDB..#REC_USED_TABLE') IS NOT NULL
			DROP TABLE #REC_USED_TABLE

		SELECT T.CCP_DETAILS_SID
			,T.PERIOD_SID
			,T.RS_CONTRACT_SID
			,RP.RESET
			,RP.WAC
			,RP.NET_WAC
			,RP.MAP
			,RP.NET_MAP
			,RP.RESET_PER
			,RP.WAC_RESET
			,LAG(RP.RESET_PER) OVER (
				PARTITION BY RP.CCP_DETAILS_SID
				,RP.RS_CONTRACT_SID ORDER BY RP.CCP_DETAILS_SID
					,RP.RS_CONTRACT_SID
					,RP.PERIOD_SID
				) AS LAG_MAP_PER
			, LAG(RP.WAC_RESET) OVER (
				PARTITION BY RP.CCP_DETAILS_SID
				,RP.RS_CONTRACT_SID ORDER BY RP.CCP_DETAILS_SID
					,RP.RS_CONTRACT_SID
					,RP.PERIOD_SID
				) AS LAG_PRICE_RESET
			,T.ITEM_PRICING_QUALIFIER_SID
			,T.NET_SUBSEQUENT_PERIOD_PRICE
			,T.NET_PRICE_TYPE
			,T.NET_RESET_PRICE_TYPE
			,T.RESET_ELIGIBLE
			,T.RESET_TYPE
			,T.RESET_PRICE_TYPE
			,T.SUBSEQUENT_PERIOD_PRICE_TYPE
			,T.PRICE_TOLERANCE
			,T.PRICE_TOLERANCE_TYPE
			,TWP.F_BQWAC TEMP_F_BQWAC
			,TWP.F_AVGQWAC TEMP_F_AVGQWAC
			,TWP.F_EQWAC TEMP_F_EQWAC
			,TWP.F_MQWAC TEMP_F_MQWAC
			,TWP.F_WAC TEMP_F_WAC
			,IWP.F_BQWAC ITEM_F_BQWAC
			,IWP.F_AVGQWAC ITEM_F_AVGQWAC
			,IWP.F_EQWAC ITEM_F_EQWAC
			,IWP.F_MQWAC ITEM_F_MQWAC
			,IWP.F_WAC ITEM_F_WAC
			,T.RN
			,T.DENSE_RNK
			,t.RESET_INTERVAL
			,t.RESET_FREQUENCY
			,P.PERIOD_SID AS WAC_START_SID
			,P2.PERIOD_SID AS WAC_END_SID
			,TR.NET_PRICE
			,TR.NET_RESET_PRICE
			,TR.NET_SUBSEQUENT_PERIOD_PRICE NET_SUBSEQUENT_PRICE
			,MAS.REBATE_FREQUENCY
			, CASE 
				WHEN LEFT(MAS.REBATE_FREQUENCY, 1) = 'Q'
					THEN 3
				WHEN LEFT(MAS.REBATE_FREQUENCY, 1) = 'A'
					THEN 12
				WHEN LEFT(MAS.REBATE_FREQUENCY, 1) = 'S'
					THEN 6
				WHEN LEFT(MAS.REBATE_FREQUENCY, 1) = 'M'
					THEN 1
				END AS WAC_RESET_PERIOD
			, T.PRICE_TOLERANCE_INTERVAL * (
				CASE 
					WHEN LEFT(T.PRICE_TOLERANCE_FREQUENCY, 1) = 'Q'
						THEN 3
					WHEN LEFT(T.PRICE_TOLERANCE_FREQUENCY, 1) = 'A'
						THEN 12
					WHEN LEFT(T.PRICE_TOLERANCE_FREQUENCY, 1) = 'S'
						THEN 6
					WHEN LEFT(T.PRICE_TOLERANCE_FREQUENCY, 1) = 'M'
						THEN 1
					END
				) AS NEP_RESET_PERIOD
		INTO #REC_USED_TABLE
		FROM #TEMP_NM_PPA_PROJECTION T
		JOIN #RESET_PERIOD RP ON T.CCP_DETAILS_SID = RP.CCP_DETAILS_SID
			AND RP.PERIOD_SID = T.PERIOD_SID
			AND RP.RS_CONTRACT_SID = T.RS_CONTRACT_SID
		JOIN #TEMP_NM_PPA_PROJECTION_MASTER MAS ON T.CCP_DETAILS_SID = MAS.CCP_DETAILS_SID
			AND MAS.RS_CONTRACT_SID = T.RS_CONTRACT_SID
		LEFT JOIN #TEMP_WAC_PRICES TWP ON MAS.CONTRACT_MASTER_SID = TWP.CONTRACT_MASTER_SID
			AND TWP.ITEM_MASTER_SID = MAS.ITEM_MASTER_SID
			AND TWP.PERIOD_SID = T.PERIOD_SID
			AND TWP.RS_CONTRACT_SID = T.RS_CONTRACT_SID
		JOIN #ITEM_WAC_PRICES IWP ON IWP.ITEM_MASTER_SID = MAS.ITEM_MASTER_SID
			AND IWP.PERIOD_SID = T.PERIOD_SID
		JOIN #PERIOD P ON P.PERIOD_DATE = DATEADD(MM, DATEDIFF(MM, 0, MAS.CAL_START_DATE), 0)
		JOIN #PERIOD P2 ON P2.PERIOD_DATE = DATEADD(MM, DATEDIFF(MM, 0, MAS.CAL_END_DATE), 0)
		JOIN #TEMP_REBATES TR ON T.CCP_DETAILS_SID = TR.CCP_DETAILS_SID
			AND TR.PERIOD_SID = T.PERIOD_SID
			AND TR.RS_CONTRACT_SID = T.RS_CONTRACT_SID

	-------------------------after calcuating the nep for the ccp and rs they will be stored in the temp_map_data table-------------------------------------------
	

		IF OBJECT_ID('TEMPDB..#TEMP_MAP_DATA') IS NOT NULL
			DROP TABLE #TEMP_MAP_DATA

		CREATE TABLE #TEMP_MAP_DATA (
			ID INT IDENTITY(1, 1)
			,CCP_DETAILS_SID INT NOT NULL
			,RS_CONTRACT_SID INT NOT NULL
			,PERIOD_SID INT NOT NULL
			,REBATE_FREQUENCY VARCHAR(50)
			,REBATE_PERIOD VARCHAR(50)
			,WAC NUMERIC(38, 15)
			,NET_WAC NUMERIC(38, 15)
			,NET_MAP NUMERIC(22, 6)
			,PPA NUMERIC(22, 6)
			,PRICE_CHANGE NUMERIC(22, 6)
			,RESET INT
			,WAC_RESET BIT
			,PRIMARY KEY (
				CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				)
			)
------------------------------------in the following if block all ccps nep and wac will be calcuated except for the ccp having teset type violation date and interval frequency-----------------------------------------------

		IF EXISTS (
				SELECT 1
				FROM #REC_USED_TABLE w
				WHERE w.DENSE_RNK = 1
					AND NOT EXISTS (
						SELECT 1
						FROM #REC_USED_TABLE R
						WHERE R.CCP_DETAILS_SID = W.CCP_DETAILS_SID
							AND R.DENSE_RNK = W.DENSE_RNK
							AND R.RESET_ELIGIBLE = 'YES'
							AND R.RESET_TYPE = 'VIOLATION DATE'
						)
					AND NOT EXISTS (
						SELECT 1
						FROM #REC_USED_TABLE R1
						WHERE R1.CCP_DETAILS_SID = W.CCP_DETAILS_SID
							AND R1.DENSE_RNK = W.DENSE_RNK
							AND R1.RESET_ELIGIBLE = 'YES'
							AND R1.RESET_TYPE = 'INTERVAL FREQUENCY'
							AND RESET_INTERVAL IS NOT NULL
							AND RESET_FREQUENCY IS NOT NULL
						)
				)
			--WHERE (
			--		RESET_TYPE <> 'VIOLATION DATE'
			--		AND RESET_ELIGIBLE = 'YES'
			--		)
			--	OR (
			--		RESET_TYPE IS NULL
			--		OR (
			--			RESET_TYPE IS NULL
			--			AND RESET_ELIGIBLE IS NULL
			--			)
			--		)
			--	OR (
			--		RESET_TYPE IS NULL
			--		AND RESET_ELIGIBLE = 'YES'
			--		)
			--	OR (RESET_ELIGIBLE <> 'YES')
			--	OR (RESET_ELIGIBLE IS NULL)
			--)
		BEGIN
				;

			WITH REC_CTE
			AS (
				SELECT CCP_DETAILS_SID
					,PERIOD_SID
					,RS_CONTRACT_SID
					,RESET
					,WAC
					,NET_WAC
					,MAP
					,NET_MAP
					,RESET_PER
					,WAC_RESET
					,LAG_MAP_PER
					,LAG_PRICE_RESET
					,ITEM_PRICING_QUALIFIER_SID
					,NET_SUBSEQUENT_PERIOD_PRICE
					,NET_PRICE_TYPE
					,NET_RESET_PRICE_TYPE
					,RESET_ELIGIBLE
					,RESET_TYPE
					,RESET_PRICE_TYPE
					,SUBSEQUENT_PERIOD_PRICE_TYPE
					,PRICE_TOLERANCE
					,PRICE_TOLERANCE_TYPE
					,TEMP_F_BQWAC
					,TEMP_F_AVGQWAC
					,TEMP_F_EQWAC
					,TEMP_F_MQWAC
					,TEMP_F_WAC
					,ITEM_F_BQWAC
					,ITEM_F_AVGQWAC
					,ITEM_F_EQWAC
					,ITEM_F_MQWAC
					,ITEM_F_WAC
					,RN
					,DENSE_RNK
					,WAC_START_SID
					,WAC_END_SID
					,NET_PRICE
					,NET_RESET_PRICE
					,NET_SUBSEQUENT_PRICE
					,1 AS DUPLICATE_DENSE_RNK
					,WAC AS LATEST_WAC
					,NET_WAC AS LATEST_NET_WAC
					,MAP AS LATEST_MAP
					,REBATE_FREQUENCY
					, 0 AS WAC_PRICE_RESET
				FROM #REC_USED_TABLE w
				WHERE DENSE_RNK = 1
					AND NOT EXISTS (
						SELECT 1
						FROM #REC_USED_TABLE R
						WHERE R.CCP_DETAILS_SID = W.CCP_DETAILS_SID
							AND R.DENSE_RNK = W.DENSE_RNK
							AND R.RESET_ELIGIBLE = 'YES'
							AND R.RESET_TYPE = 'VIOLATION DATE'
						)
					AND NOT EXISTS (
						SELECT 1
						FROM #REC_USED_TABLE R1
						WHERE R1.CCP_DETAILS_SID = W.CCP_DETAILS_SID
							AND R1.DENSE_RNK = W.DENSE_RNK
							AND R1.RESET_ELIGIBLE = 'YES'
							AND R1.RESET_TYPE = 'INTERVAL FREQUENCY'
							AND RESET_INTERVAL IS NOT NULL
							AND RESET_FREQUENCY IS NOT NULL
						)
				--AND (
				--	(
				--		RESET_TYPE <> 'VIOLATION DATE'
				--		AND RESET_ELIGIBLE = 'YES'
				--		)
				--	OR (
				--		RESET_TYPE IS NULL
				--		OR (
				--			RESET_TYPE IS NULL
				--			AND RESET_ELIGIBLE IS NULL
				--			)
				--		)
				--	OR (
				--		RESET_TYPE IS NULL
				--		AND RESET_ELIGIBLE = 'YES'
				--		)
				--	OR (RESET_ELIGIBLE <> 'YES')
				--	OR (RESET_ELIGIBLE IS NULL)
				--	)
				
				UNION ALL
				
				SELECT C.CCP_DETAILS_SID
					,T.PERIOD_SID
					,C.RS_CONTRACT_SID
					,T.RESET
					,COALESCE(T.WAC, C.LATEST_WAC) WAC
					,COALESCE(T.NET_WAC, C.LATEST_NET_WAC) NET_WAC
					,COALESCE(T.MAP, C.LATEST_MAP) MAP
					,T.NET_MAP
					,T.RESET_PER
					,T.WAC_RESET
					,T.LAG_MAP_PER
					,T.LAG_PRICE_RESET
					,T.ITEM_PRICING_QUALIFIER_SID
					,T.NET_SUBSEQUENT_PERIOD_PRICE
					,T.NET_PRICE_TYPE
					,T.NET_RESET_PRICE_TYPE
					,T.RESET_ELIGIBLE
					,T.RESET_TYPE
					,T.RESET_PRICE_TYPE
					,T.SUBSEQUENT_PERIOD_PRICE_TYPE
					,T.PRICE_TOLERANCE
					,T.PRICE_TOLERANCE_TYPE
					,T.TEMP_F_BQWAC
					,T.TEMP_F_AVGQWAC
					,T.TEMP_F_EQWAC
					,T.TEMP_F_MQWAC
					,T.TEMP_F_WAC
					,T.ITEM_F_BQWAC
					,T.ITEM_F_AVGQWAC
					,T.ITEM_F_EQWAC
					,T.ITEM_F_MQWAC
					,T.ITEM_F_WAC
					,T.RN
					,T.DENSE_RNK
					,T.WAC_START_SID
					,T.WAC_END_SID
					,T.NET_PRICE
					,T.NET_RESET_PRICE
					,T.NET_SUBSEQUENT_PRICE
					,1 + DUPLICATE_DENSE_RNK AS DUPLICATE_DENSE_RNK
					,CAST(CASE 
							WHEN ISNULL(T.RESET, 0) = 1
								OR T.LAG_PRICE_RESET <> T.[WAC_RESET]
								OR T.LAG_MAP_PER <> T.RESET_PER
								THEN (
										CASE 
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'BQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_BQWAC, T.ITEM_F_BQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'EQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_EQWAC, T.ITEM_F_EQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'AVGQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_AVGQWAC, T.ITEM_F_AVGQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'MQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_MQWAC, T.ITEM_F_MQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'WAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_WAC, T.ITEM_F_WAC)
											ELSE 0
											END
										)
							ELSE COALESCE(C.LATEST_WAC, T.WAC)
							END AS NUMERIC(22, 6)) LATEST_WAC
					,CAST(CASE 
							WHEN ISNULL(T.RESET, 0) = 1
								OR T.LAG_PRICE_RESET <> T.[WAC_RESET]
								OR T.LAG_MAP_PER <> T.RESET_PER
								THEN (
										CASE 
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'BQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_BQWAC, T.ITEM_F_BQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'EQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_EQWAC, T.ITEM_F_EQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'AVGQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_AVGQWAC, T.ITEM_F_AVGQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'MQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_MQWAC, T.ITEM_F_MQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'WAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_WAC, T.ITEM_F_WAC)
											ELSE 0
											END
										)
							ELSE COALESCE(C.LATEST_WAC, T.WAC)
							END AS NUMERIC(22, 6)) LATEST_NET_WAC
					,CAST(CASE 
							WHEN ISNULL(T.RESET, 0) = 1
								AND LEFT(T.PRICE_TOLERANCE_TYPE, 1) = 'D'
								AND T.RESET_PER <> 1
								AND T.LAG_MAP_PER <> T.RESET_PER
								THEN (
										(
											CASE 
												WHEN T.RESET_PRICE_TYPE = 'BQWAC'
													THEN COALESCE(T.TEMP_F_BQWAC, T.ITEM_F_BQWAC)
												WHEN T.RESET_PRICE_TYPE = 'EQWAC'
													THEN COALESCE(T.TEMP_F_EQWAC, T.ITEM_F_EQWAC)
												WHEN T.RESET_PRICE_TYPE = 'AVGQWAC'
													THEN COALESCE(T.TEMP_F_AVGQWAC, T.ITEM_F_AVGQWAC)
												WHEN T.RESET_PRICE_TYPE = 'MQWAC'
													THEN COALESCE(T.TEMP_F_MQWAC, T.ITEM_F_MQWAC)
												WHEN T.RESET_PRICE_TYPE = 'WAC'
													THEN COALESCE(T.TEMP_F_WAC, T.ITEM_F_WAC)
												ELSE 0
												END
											) + (T.PRICE_TOLERANCE)
										)
							WHEN ISNULL(T.RESET, 0) = 1
								AND LEFT(T.PRICE_TOLERANCE_TYPE, 1) = 'P'
								AND T.RESET_PER <> 1
								AND T.LAG_MAP_PER <> T.RESET_PER
								THEN (
										(
											CASE 
												WHEN T.RESET_PRICE_TYPE = 'BQWAC'
													THEN COALESCE(T.TEMP_F_BQWAC, T.ITEM_F_BQWAC)
												WHEN T.RESET_PRICE_TYPE = 'EQWAC'
													THEN COALESCE(T.TEMP_F_EQWAC, T.ITEM_F_EQWAC)
												WHEN T.RESET_PRICE_TYPE = 'AVGQWAC'
													THEN COALESCE(T.TEMP_F_AVGQWAC, T.ITEM_F_AVGQWAC)
												WHEN T.RESET_PRICE_TYPE = 'MQWAC'
													THEN COALESCE(T.TEMP_F_MQWAC, T.ITEM_F_MQWAC)
												WHEN T.RESET_PRICE_TYPE = 'WAC'
													THEN COALESCE(T.TEMP_F_WAC, T.ITEM_F_WAC)
												WHEN T.RESET_PRICE_TYPE = 'PRIOR PERIOD NEP'
													THEN C.LATEST_MAP
												WHEN T.RESET_PRICE_TYPE = 'PRIOR PERIOD WAC'
													THEN C.LATEST_WAC
												WHEN T.RESET_PRICE_TYPE = 'PRIOR PERIOD NET WAC'
													THEN C.LATEST_NET_WAC
												ELSE 0
												END
											) * (1 + (T.PRICE_TOLERANCE / 100))
										)
							WHEN T.LAG_MAP_PER <> T.RESET_PER
								AND LEFT(T.PRICE_TOLERANCE_TYPE, 1) = 'D'
								AND T.RESET_PER <> 1
								THEN (COALESCE(C.LATEST_MAP, T.MAP) + (T.PRICE_TOLERANCE))
							WHEN T.LAG_MAP_PER <> T.RESET_PER
								AND LEFT(T.PRICE_TOLERANCE_TYPE, 1) = 'P'
								AND T.RESET_PER <> 1
								THEN (COALESCE(C.LATEST_MAP, T.MAP) * (1 + (T.PRICE_TOLERANCE / 100)))
							ELSE COALESCE(T.MAP, C.LATEST_MAP)
							END AS NUMERIC(22, 6)) LATEST_MAP
					,T.REBATE_FREQUENCY
					,CASE 
						WHEN ISNULL(T.RESET, 0) = 1
							OR T.LAG_PRICE_RESET <> T.[WAC_RESET]
							OR T.LAG_MAP_PER <> T.RESET_PER
							THEN 1
						ELSE 0
						END WAC_PRICE_RESET
				FROM REC_CTE C
				JOIN #REC_USED_TABLE T ON T.CCP_DETAILS_SID = C.CCP_DETAILS_SID
					AND T.RS_CONTRACT_SID = C.RS_CONTRACT_SID
					AND T.DENSE_RNK = (1 + C.DUPLICATE_DENSE_RNK)
					--WHERE DUPLICATE_DENSE_RNK < @MAX_RN
				)
			INSERT INTO #TEMP_MAP_DATA (
				CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,NET_MAP
				,WAC
				,NET_WAC
				,RESET
				,REBATE_FREQUENCY
				,WAC_RESET
				)
			SELECT CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,LATEST_MAP
				,LATEST_WAC
				,LATEST_NET_WAC
				,RESET
				,REBATE_FREQUENCY
				,WAC_PRICE_RESET
			FROM REC_CTE
			OPTION (MAXRECURSION 0)
		END
------------------------------------in the following if block all ccps nep and wac will be calcuated for the ccp having reset type violation date only-----------------------------------------------
		
		IF EXISTS (
				SELECT 1
				FROM #REC_USED_TABLE
				WHERE RESET_ELIGIBLE = 'YES'
					AND RESET_TYPE = 'VIOLATION DATE'
				)
		BEGIN
			-----------violation date will have an impact from projection startdate and projection end date only, hence the follwing temp table will calate the nep from price protection start date to the projection start date ------------
		IF OBJECT_ID('TEMPDB.DBO.#TEST4', 'U') IS NOT NULL
				DROP TABLE #TEST4;

			CREATE TABLE #TEST4 (
				CCP_DETAILS_SID [INT] NOT NULL
				,[RS_CONTRACT_SID] [INT] NOT NULL
				,[PERIOD_SID] [INT] NOT NULL
				,[LATEST_MAP] [NUMERIC](22, 6) NULL
				,[LATEST_WAC] [NUMERIC](22, 6) NULL
				,[LATEST_NET_WAC] [NUMERIC](22, 6) NULL
				,[RESET] [INT] NULL
				,[RESET_PER] [INT] NULL
				,[WAC_RESET] [INT] NULL
				,[LAG_MAP_PER] [INT] NULL
				,[LAG_PRICE_RESET] [INT] NULL
				,[ITEM_PRICING_QUALIFIER_SID] [VARCHAR](100) NULL
				,[NET_SUBSEQUENT_PERIOD_PRICE] [VARCHAR](100) NULL
				,[NET_PRICE_TYPE] [VARCHAR](100) NULL
				,[NET_RESET_PRICE_TYPE] [VARCHAR](100) NULL
				,[RESET_ELIGIBLE] [VARCHAR](100) NULL
				,[RESET_TYPE] [VARCHAR](100) NULL
				,[SUBSEQUENT_PERIOD_PRICE_TYPE] [VARCHAR](100) NULL
				,[PRICE_TOLERANCE] [NUMERIC](22, 6) NULL
				,[PRICE_TOLERANCE_TYPE] [VARCHAR](100) NULL
				,[TEMP_F_BQWAC] [NUMERIC](22, 6) NULL
				,[TEMP_F_AVGQWAC] [NUMERIC](22, 6) NULL
				,[TEMP_F_EQWAC] [NUMERIC](22, 6) NULL
				,[TEMP_F_MQWAC] [NUMERIC](22, 6) NULL
				,[TEMP_F_WAC] [NUMERIC](22, 6) NULL
				,[ITEM_F_BQWAC] [NUMERIC](22, 6) NULL
				,[ITEM_F_AVGQWAC] [NUMERIC](22, 6) NULL
				,[ITEM_F_EQWAC] [NUMERIC](22, 6) NULL
				,[ITEM_F_MQWAC] [NUMERIC](22, 6) NULL
				,[ITEM_F_WAC] [NUMERIC](22, 6) NULL
				,[RN] [INT] NULL
				,[DENSE_RNK] [INT] NULL
				,[WAC_START_SID] [INT] NULL
				,[WAC_END_SID] [INT] NULL
				,[NET_PRICE] [NUMERIC](22, 6) NULL
				,[NET_RESET_PRICE] [NUMERIC](22, 6) NULL
				,[NET_SUBSEQUENT_PRICE] [NUMERIC](22, 6) NULL
				,[DUPLICATE_DENSE_RNK] [INT] NULL
				,[WAC_PRICE_RESET] [INT] NULL
				,[REBATE_FREQUENCY] [VARCHAR](100) NULL
				,[WAC_RESET_PERIOD] [INT] NULL
				,[NEP_RESET_PERIOD] [INT] NULL
				,[DUPLICATE_WAC_RESET_PERIOD] [INT] NULL
				,[DUPLICATE_NEP_RESET_PERIOD] [INT] NULL
				,PRIMARY KEY (
					CCP_DETAILS_SID
					,RS_CONTRACT_SID
					,PERIOD_SID
					)
				);

			WITH REC_CTE
			AS (
				SELECT CCP_DETAILS_SID
					,PERIOD_SID
					,RS_CONTRACT_SID
					,RESET
					,WAC
					,NET_WAC
					,MAP
					,NET_MAP
					,RESET_PER
					,WAC_RESET
					,LAG_MAP_PER
					,LAG_PRICE_RESET
					,ITEM_PRICING_QUALIFIER_SID
					,NET_SUBSEQUENT_PERIOD_PRICE
					,NET_PRICE_TYPE
					,NET_RESET_PRICE_TYPE
					,RESET_ELIGIBLE
					,RESET_TYPE
					,RESET_PRICE_TYPE
					,SUBSEQUENT_PERIOD_PRICE_TYPE
					,PRICE_TOLERANCE
					,PRICE_TOLERANCE_TYPE
					,TEMP_F_BQWAC
					,TEMP_F_AVGQWAC
					,TEMP_F_EQWAC
					,TEMP_F_MQWAC
					,TEMP_F_WAC
					,ITEM_F_BQWAC
					,ITEM_F_AVGQWAC
					,ITEM_F_EQWAC
					,ITEM_F_MQWAC
					,ITEM_F_WAC
					,RN
					,DENSE_RNK
					,WAC_START_SID
					,WAC_END_SID
					,NET_PRICE
					,NET_RESET_PRICE
					,NET_SUBSEQUENT_PRICE
					,1 AS DUPLICATE_DENSE_RNK
					, WAC AS LATEST_WAC
					,NET_WAC AS LATEST_NET_WAC
					,MAP AS LATEST_MAP
					,REBATE_FREQUENCY
					,0 AS WAC_PRICE_RESET
					,WAC_RESET_PERIOD
					,NEP_RESET_PERIOD
					,1 AS DUPLICATE_WAC_RESET_PERIOD
					,1 AS DUPLICATE_NEP_RESET_PERIOD
				FROM #REC_USED_TABLE
				WHERE DENSE_RNK = 1
					AND RESET_ELIGIBLE = 'YES'
					AND RESET_TYPE = 'VIOLATION DATE'
					AND PERIOD_SID < WAC_START_SID
				
				UNION ALL
				
				SELECT C.CCP_DETAILS_SID
					,T.PERIOD_SID
					,C.RS_CONTRACT_SID
					,T.RESET
					,COALESCE(T.WAC, C.LATEST_WAC) WAC
					,COALESCE(T.NET_WAC, C.LATEST_NET_WAC) NET_WAC
					,COALESCE(T.MAP, C.LATEST_MAP) MAP
					,T.NET_MAP
					,T.RESET_PER
					,T.WAC_RESET
					,T.LAG_MAP_PER
					,T.LAG_PRICE_RESET
					,T.ITEM_PRICING_QUALIFIER_SID
					,T.NET_SUBSEQUENT_PERIOD_PRICE
					,T.NET_PRICE_TYPE
					,T.NET_RESET_PRICE_TYPE
					,T.RESET_ELIGIBLE
					,T.RESET_TYPE
					,T.RESET_PRICE_TYPE
					,T.SUBSEQUENT_PERIOD_PRICE_TYPE
					,T.PRICE_TOLERANCE
					,T.PRICE_TOLERANCE_TYPE
					,T.TEMP_F_BQWAC
					,T.TEMP_F_AVGQWAC
					,T.TEMP_F_EQWAC
					,T.TEMP_F_MQWAC
					,T.TEMP_F_WAC
					,T.ITEM_F_BQWAC
					,T.ITEM_F_AVGQWAC
					,T.ITEM_F_EQWAC
					,T.ITEM_F_MQWAC
					,T.ITEM_F_WAC
					,T.RN
					,T.DENSE_RNK
					,T.WAC_START_SID
					,T.WAC_END_SID
					,T.NET_PRICE
					,T.NET_RESET_PRICE
					,T.NET_SUBSEQUENT_PRICE
					, 1 + DUPLICATE_DENSE_RNK AS DUPLICATE_DENSE_RNK
					,CAST(CASE 
							WHEN ISNULL(T.RESET, 0) = 1
								OR T.LAG_PRICE_RESET <> T.[WAC_RESET]
								OR T.LAG_MAP_PER <> T.RESET_PER
								THEN (
										CASE 
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'BQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_BQWAC, T.ITEM_F_BQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'EQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_EQWAC, T.ITEM_F_EQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'AVGQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_AVGQWAC, T.ITEM_F_AVGQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'MQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_MQWAC, T.ITEM_F_MQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'WAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_WAC, T.ITEM_F_WAC)
											ELSE 0
											END
										)
							ELSE COALESCE(C.LATEST_WAC, T.WAC)
							END AS NUMERIC(22, 6)) LATEST_WAC
					,CAST(CASE 
							WHEN ISNULL(T.RESET, 0) = 1
								OR T.LAG_PRICE_RESET <> T.[WAC_RESET]
								OR T.LAG_MAP_PER <> T.RESET_PER
								THEN (
										CASE 
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'BQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_BQWAC, T.ITEM_F_BQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'EQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_EQWAC, T.ITEM_F_EQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'AVGQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_AVGQWAC, T.ITEM_F_AVGQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'MQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_MQWAC, T.ITEM_F_MQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'WAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_WAC, T.ITEM_F_WAC)
											ELSE 0
											END
										)
							ELSE COALESCE(C.LATEST_WAC, T.WAC)
							END AS NUMERIC(22, 6)) LATEST_NET_WAC
					,CAST(CASE 
							WHEN ISNULL(T.RESET, 0) = 1
								AND LEFT(T.PRICE_TOLERANCE_TYPE, 1) = 'D'
								AND T.RESET_PER <> 1
								AND T.LAG_MAP_PER <> T.RESET_PER
								THEN (
										(
											CASE 
												WHEN T.RESET_PRICE_TYPE = 'BQWAC'
													THEN COALESCE(T.TEMP_F_BQWAC, T.ITEM_F_BQWAC)
												WHEN T.RESET_PRICE_TYPE = 'EQWAC'
													THEN COALESCE(T.TEMP_F_EQWAC, T.ITEM_F_EQWAC)
												WHEN T.RESET_PRICE_TYPE = 'AVGQWAC'
													THEN COALESCE(T.TEMP_F_AVGQWAC, T.ITEM_F_AVGQWAC)
												WHEN T.RESET_PRICE_TYPE = 'MQWAC'
													THEN COALESCE(T.TEMP_F_MQWAC, T.ITEM_F_MQWAC)
												WHEN T.RESET_PRICE_TYPE = 'WAC'
													THEN COALESCE(T.TEMP_F_WAC, T.ITEM_F_WAC)
												ELSE 0
												END
											) + (T.PRICE_TOLERANCE)
										)
							WHEN ISNULL(T.RESET, 0) = 1
								AND LEFT(T.PRICE_TOLERANCE_TYPE, 1) = 'P'
								AND T.RESET_PER <> 1
								AND T.LAG_MAP_PER <> T.RESET_PER
								THEN (
										(
											CASE 
												WHEN T.RESET_PRICE_TYPE = 'BQWAC'
													THEN COALESCE(T.TEMP_F_BQWAC, T.ITEM_F_BQWAC)
												WHEN T.RESET_PRICE_TYPE = 'EQWAC'
													THEN COALESCE(T.TEMP_F_EQWAC, T.ITEM_F_EQWAC)
												WHEN T.RESET_PRICE_TYPE = 'AVGQWAC'
													THEN COALESCE(T.TEMP_F_AVGQWAC, T.ITEM_F_AVGQWAC)
												WHEN T.RESET_PRICE_TYPE = 'MQWAC'
													THEN COALESCE(T.TEMP_F_MQWAC, T.ITEM_F_MQWAC)
												WHEN T.RESET_PRICE_TYPE = 'WAC'
													THEN COALESCE(T.TEMP_F_WAC, T.ITEM_F_WAC)
												WHEN T.RESET_PRICE_TYPE = 'PRIOR PERIOD NEP'
													THEN C.LATEST_MAP
												WHEN T.RESET_PRICE_TYPE = 'PRIOR PERIOD WAC'
													THEN C.LATEST_WAC
												WHEN T.RESET_PRICE_TYPE = 'PRIOR PERIOD NET WAC'
													THEN C.LATEST_NET_WAC
												ELSE 0
												END
											) * (1 + (T.PRICE_TOLERANCE / 100))
										)
							WHEN T.LAG_MAP_PER <> T.RESET_PER
								AND LEFT(T.PRICE_TOLERANCE_TYPE, 1) = 'D'
								AND T.RESET_PER <> 1
								THEN (COALESCE(C.LATEST_MAP, T.MAP) + (T.PRICE_TOLERANCE))
							WHEN T.LAG_MAP_PER <> T.RESET_PER
								AND LEFT(T.PRICE_TOLERANCE_TYPE, 1) = 'P'
								AND T.RESET_PER <> 1
								THEN (COALESCE(C.LATEST_MAP, T.MAP) * (1 + (T.PRICE_TOLERANCE / 100)))
							ELSE COALESCE(T.MAP, C.LATEST_MAP)
							END AS NUMERIC(22, 6)) LATEST_MAP
					,T.REBATE_FREQUENCY
					,CASE 
						WHEN ISNULL(T.RESET, 0) = 1
							OR T.LAG_PRICE_RESET <> T.[WAC_RESET]
							OR T.LAG_MAP_PER <> T.RESET_PER
							THEN 1
						ELSE 0
						END WAC_PRICE_RESET
					,T.WAC_RESET_PERIOD
					,T.NEP_RESET_PERIOD
					,CASE 
						WHEN DUPLICATE_WAC_RESET_PERIOD >= T.WAC_RESET_PERIOD
							THEN 1
						ELSE DUPLICATE_WAC_RESET_PERIOD + 1
						END DUPLICATE_WAC_RESET_PERIOD
					,CASE 
						WHEN DUPLICATE_NEP_RESET_PERIOD >= T.NEP_RESET_PERIOD
							THEN 1
						ELSE DUPLICATE_NEP_RESET_PERIOD + 1
						END DUPLICATE_NEP_RESET_PERIOD
				FROM REC_CTE C
				JOIN #REC_USED_TABLE T ON T.CCP_DETAILS_SID = C.CCP_DETAILS_SID
					AND T.RS_CONTRACT_SID = C.RS_CONTRACT_SID
					--AND T.PERIOD_SID=(1+C.PERIOD_SID)
					AND T.DENSE_RNK = (1 + C.DUPLICATE_DENSE_RNK)
				WHERE --DUPLICATE_DENSE_RNK < @MAX_RN
					T.PERIOD_SID < T.WAC_START_SID
				)
			INSERT INTO #TEST4 (
				CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,LATEST_MAP
				,LATEST_WAC
				,LATEST_NET_WAC
				,RESET
				,RESET_PER
				,WAC_RESET
				,LAG_MAP_PER
				,LAG_PRICE_RESET
				,ITEM_PRICING_QUALIFIER_SID
				,NET_SUBSEQUENT_PERIOD_PRICE
				,NET_PRICE_TYPE
				,NET_RESET_PRICE_TYPE
				,RESET_ELIGIBLE
				,RESET_TYPE
				,SUBSEQUENT_PERIOD_PRICE_TYPE
				,PRICE_TOLERANCE
				,PRICE_TOLERANCE_TYPE
				,TEMP_F_BQWAC
				,TEMP_F_AVGQWAC
				,TEMP_F_EQWAC
				,TEMP_F_MQWAC
				,TEMP_F_WAC
				,ITEM_F_BQWAC
				,ITEM_F_AVGQWAC
				,ITEM_F_EQWAC
				,ITEM_F_MQWAC
				,ITEM_F_WAC
				,RN
				,DENSE_RNK
				,WAC_START_SID
				,WAC_END_SID
				,NET_PRICE
				,NET_RESET_PRICE
				,NET_SUBSEQUENT_PRICE
				,DUPLICATE_DENSE_RNK
				,WAC_PRICE_RESET
				,REBATE_FREQUENCY
				,WAC_RESET_PERIOD
				,NEP_RESET_PERIOD
				,DUPLICATE_WAC_RESET_PERIOD
				,DUPLICATE_NEP_RESET_PERIOD
				)
			SELECT CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,LATEST_MAP
				,LATEST_WAC
				,LATEST_NET_WAC
				,RESET
				,RESET_PER
				,WAC_RESET
				,LAG_MAP_PER
				,LAG_PRICE_RESET
				,ITEM_PRICING_QUALIFIER_SID
				,NET_SUBSEQUENT_PERIOD_PRICE
				,NET_PRICE_TYPE
				,NET_RESET_PRICE_TYPE
				,RESET_ELIGIBLE
				,RESET_TYPE
				,SUBSEQUENT_PERIOD_PRICE_TYPE
				,PRICE_TOLERANCE
				,PRICE_TOLERANCE_TYPE
				,TEMP_F_BQWAC
				,TEMP_F_AVGQWAC
				,TEMP_F_EQWAC
				,TEMP_F_MQWAC
				,TEMP_F_WAC
				,ITEM_F_BQWAC
				,ITEM_F_AVGQWAC
				,ITEM_F_EQWAC
				,ITEM_F_MQWAC
				,ITEM_F_WAC
				,RN
				,DENSE_RNK
				,WAC_START_SID
				,WAC_END_SID
				,NET_PRICE
				,NET_RESET_PRICE
				,NET_SUBSEQUENT_PRICE
				,DUPLICATE_DENSE_RNK
				,WAC_PRICE_RESET
				,REBATE_FREQUENCY
				,WAC_RESET_PERIOD
				,NEP_RESET_PERIOD
				,DUPLICATE_WAC_RESET_PERIOD
				,DUPLICATE_NEP_RESET_PERIOD
			FROM REC_CTE
			OPTION (MAXRECURSION 0);
-----------violation date will have an impact from projection startdate and projection end date only, hence the follwing cte will calculate the nep from projection start date to price protection end date------------
		
			;WITH MAX_CTE
			AS (
				SELECT CCP_DETAILS_SID
					,RS_CONTRACT_SID
					,MAX(PERIOD_SID) PERIOD_SID
				FROM #TEST4
				GROUP BY CCP_DETAILS_SID
					,RS_CONTRACT_SID
				)
				,SECOND_REC_CTE
			AS (
				SELECT T4.CCP_DETAILS_SID
					,T4.RS_CONTRACT_SID
					,T4.PERIOD_SID
					,T4.LATEST_MAP MAP
					,T4.LATEST_WAC WAC
					,T4.LATEST_NET_WAC NET_WAC
					,T4.RESET
					,T4.RESET_PER
					,T4.WAC_RESET
					,T4.LAG_MAP_PER
					,T4.LAG_PRICE_RESET
					,T4.ITEM_PRICING_QUALIFIER_SID
					,T4.NET_SUBSEQUENT_PERIOD_PRICE
					,T4.NET_PRICE_TYPE
					,T4.NET_RESET_PRICE_TYPE
					,T4.RESET_ELIGIBLE
					,T4.RESET_TYPE
					,T4.SUBSEQUENT_PERIOD_PRICE_TYPE
					,T4.PRICE_TOLERANCE
					,T4.PRICE_TOLERANCE_TYPE
					,CAST(T4.TEMP_F_BQWAC AS NUMERIC(22, 6)) TEMP_F_BQWAC
					,CAST(T4.TEMP_F_AVGQWAC AS NUMERIC(22, 6)) TEMP_F_AVGQWAC
					,CAST(T4.TEMP_F_EQWAC AS NUMERIC(22, 6)) TEMP_F_EQWAC
					,CAST(T4.TEMP_F_MQWAC AS NUMERIC(22, 6)) TEMP_F_MQWAC
					,CAST(T4.TEMP_F_WAC AS NUMERIC(22, 6)) TEMP_F_WAC
					,CAST(T4.ITEM_F_BQWAC AS NUMERIC(22, 6)) ITEM_F_BQWAC
					,CAST(T4.ITEM_F_AVGQWAC AS NUMERIC(22, 6)) ITEM_F_AVGQWAC
					,CAST(T4.ITEM_F_EQWAC AS NUMERIC(22, 6)) ITEM_F_EQWAC
					,CAST(T4.ITEM_F_MQWAC AS NUMERIC(22, 6)) ITEM_F_MQWAC
					,CAST(T4.ITEM_F_WAC AS NUMERIC(22, 6)) ITEM_F_WAC
					,T4.RN
					,T4.DENSE_RNK
					,T4.WAC_START_SID
					,T4.WAC_END_SID
					,T4.NET_PRICE
					,T4.NET_RESET_PRICE
					,T4.NET_SUBSEQUENT_PRICE
					,DUPLICATE_DENSE_RNK
					--,T4.WAC_PRICE_RESET
					,T4.REBATE_FREQUENCY
					,T4.WAC_RESET_PERIOD
					,T4.NEP_RESET_PERIOD
					,T4.DUPLICATE_WAC_RESET_PERIOD AS DWRP
					,T4.DUPLICATE_NEP_RESET_PERIOD AS DNRP
					,CAST(0.000 AS NUMERIC(22, 6)) AS LAG_WAC_PRICE
					,CAST(0.000 AS NUMERIC(22, 6)) AS LAG_NET_WAC_PRICE
					,CAST(T4.LATEST_MAP AS NUMERIC(22, 6)) AS LAG_MAP
					,0 AS TEST_LAG
				FROM #TEST4 T4
				JOIN MAX_CTE M ON M.CCP_DETAILS_SID = T4.CCP_DETAILS_SID
					AND M.RS_CONTRACT_SID = T4.RS_CONTRACT_SID
					AND M.PERIOD_SID = T4.PERIOD_SID
				
				UNION ALL
				
				SELECT T4.CCP_DETAILS_SID
					,T4.RS_CONTRACT_SID
					,T4.PERIOD_SID
					,COALESCE(T4.MAP, SCT.LAG_MAP) MAP
					,COALESCE(T4.WAC, SCT.LAG_WAC_PRICE) WAC
					,COALESCE(T4.NET_WAC, SCT.LAG_NET_WAC_PRICE) NET_WAC
					,CASE 
						WHEN /*DWRP >= T4.WAC_RESET_PERIOD
							OR */
							DNRP >= T4.NEP_RESET_PERIOD
							OR ISNULL(T4.RESET, 0) = 1
							OR (
								CASE 
									WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
											AND T4.WAC_END_SID
										THEN SCT.LAG_MAP
									ELSE 1
									END > CASE 
									WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
											AND T4.WAC_END_SID
										THEN SCT.LAG_NET_WAC_PRICE
									ELSE 1
									END
								)
							THEN 1
						ELSE 0
						END RESET
					,T4.RESET_PER
					,T4.WAC_RESET
					,T4.LAG_MAP_PER
					,T4.LAG_PRICE_RESET
					,T4.ITEM_PRICING_QUALIFIER_SID
					,T4.NET_SUBSEQUENT_PERIOD_PRICE
					,T4.NET_PRICE_TYPE
					,T4.NET_RESET_PRICE_TYPE
					,T4.RESET_ELIGIBLE
					,T4.RESET_TYPE
					,T4.SUBSEQUENT_PERIOD_PRICE_TYPE
					,T4.PRICE_TOLERANCE
					,T4.PRICE_TOLERANCE_TYPE
					,CAST(T4.TEMP_F_BQWAC AS NUMERIC(22, 6)) TEMP_F_BQWAC
					,CAST(T4.TEMP_F_AVGQWAC AS NUMERIC(22, 6)) TEMP_F_AVGQWAC
					,CAST(T4.TEMP_F_EQWAC AS NUMERIC(22, 6)) TEMP_F_EQWAC
					,CAST(T4.TEMP_F_MQWAC AS NUMERIC(22, 6)) TEMP_F_MQWAC
					,CAST(T4.TEMP_F_WAC AS NUMERIC(22, 6)) TEMP_F_WAC
					,CAST(T4.ITEM_F_BQWAC AS NUMERIC(22, 6)) ITEM_F_BQWAC
					,CAST(T4.ITEM_F_AVGQWAC AS NUMERIC(22, 6)) ITEM_F_AVGQWAC
					,CAST(T4.ITEM_F_EQWAC AS NUMERIC(22, 6)) ITEM_F_EQWAC
					,CAST(T4.ITEM_F_MQWAC AS NUMERIC(22, 6)) ITEM_F_MQWAC
					,CAST(T4.ITEM_F_WAC AS NUMERIC(22, 6)) ITEM_F_WAC
					,T4.RN
					,T4.DENSE_RNK
					,T4.WAC_START_SID
					,T4.WAC_END_SID
					,T4.NET_PRICE
					,T4.NET_RESET_PRICE
					,T4.NET_SUBSEQUENT_PRICE
					,DUPLICATE_DENSE_RNK + 1 AS DUPLICATE_DENSE_RNK
					--,WAC_PRICE_RESET=CASE WHEN DWRP>=T4.WAC_RESET_PERIOD THEN 1 ELSE 0 END
					,T4.REBATE_FREQUENCY
					,T4.WAC_RESET_PERIOD
					,T4.NEP_RESET_PERIOD
					, CASE 
						WHEN (DNRP >= T4.NEP_RESET_PERIOD)
							OR (DWRP >= T4.WAC_RESET_PERIOD)
							OR (
								CASE 
									WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
											AND T4.WAC_END_SID
										THEN SCT.LAG_MAP
									ELSE 1
									END > CASE 
									WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
											AND T4.WAC_END_SID
										THEN SCT.LAG_NET_WAC_PRICE
									ELSE 1
									END
								)
							THEN 1
						ELSE DWRP + 1
						END AS DWRP
					,CASE 
						WHEN (DNRP >= T4.NEP_RESET_PERIOD)
							OR (
								CASE 
									WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
											AND T4.WAC_END_SID
										THEN SCT.LAG_MAP
									ELSE 1
									END > CASE 
									WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
											AND T4.WAC_END_SID
										THEN SCT.LAG_NET_WAC_PRICE
									ELSE 1
									END
								)
							THEN 1
						ELSE DNRP + 1
						END AS DNRP
					,CAST(CASE 
							WHEN DWRP >= T4.WAC_RESET_PERIOD
								OR DNRP >= T4.NEP_RESET_PERIOD
								OR ISNULL(T4.RESET, 0) = 1
								OR (
									CASE 
										WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
												AND T4.WAC_END_SID
											THEN SCT.LAG_MAP
										ELSE 1
										END > CASE 
										WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
												AND T4.WAC_END_SID
											THEN SCT.LAG_NET_WAC_PRICE
										ELSE 1
										END
									)
								THEN (
										CASE 
											WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'BQWAC'
												AND (
													T4.PERIOD_SID BETWEEN T4.WAC_START_SID
														AND T4.WAC_END_SID
													)
												THEN COALESCE(T4.TEMP_F_BQWAC, T4.ITEM_F_BQWAC)
											WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'EQWAC'
												AND (
													T4.PERIOD_SID BETWEEN T4.WAC_START_SID
														AND T4.WAC_END_SID
													)
												THEN COALESCE(T4.TEMP_F_EQWAC, T4.ITEM_F_EQWAC)
											WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'AVGQWAC'
												AND (
													T4.PERIOD_SID BETWEEN T4.WAC_START_SID
														AND T4.WAC_END_SID
													)
												THEN COALESCE(T4.TEMP_F_AVGQWAC, T4.ITEM_F_AVGQWAC)
											WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'MQWAC'
												AND (
													T4.PERIOD_SID BETWEEN T4.WAC_START_SID
														AND T4.WAC_END_SID
													)
												THEN COALESCE(T4.TEMP_F_MQWAC, T4.ITEM_F_MQWAC)
											WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'WAC'
												AND (
													T4.PERIOD_SID BETWEEN T4.WAC_START_SID
														AND T4.WAC_END_SID
													)
												THEN COALESCE(T4.TEMP_F_WAC, T4.ITEM_F_WAC)
											ELSE 0
											END
										)
							ELSE SCT.LAG_WAC_PRICE
							END AS NUMERIC(22, 6)) AS LAG_WAC_PRICE
					,CAST((
							(
								CASE 
									WHEN DWRP >= T4.WAC_RESET_PERIOD
										OR DNRP >= T4.NEP_RESET_PERIOD
										OR ISNULL(T4.RESET, 0) = 1
										OR (
											CASE 
												WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
														AND T4.WAC_END_SID
													THEN SCT.LAG_MAP
												ELSE 1
												END > CASE 
												WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
														AND T4.WAC_END_SID
													THEN SCT.LAG_NET_WAC_PRICE
												ELSE 1
												END
											)
										THEN (
												CASE 
													WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'BQWAC'
														AND (
															T4.PERIOD_SID BETWEEN T4.WAC_START_SID
																AND T4.WAC_END_SID
															)
														THEN COALESCE(T4.TEMP_F_BQWAC, T4.ITEM_F_BQWAC)
													WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'EQWAC'
														AND (
															T4.PERIOD_SID BETWEEN T4.WAC_START_SID
																AND T4.WAC_END_SID
															)
														THEN COALESCE(T4.TEMP_F_EQWAC, T4.ITEM_F_EQWAC)
													WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'AVGQWAC'
														AND (
															T4.PERIOD_SID BETWEEN T4.WAC_START_SID
																AND T4.WAC_END_SID
															)
														THEN COALESCE(T4.TEMP_F_AVGQWAC, T4.ITEM_F_AVGQWAC)
													WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'MQWAC'
														AND (
															T4.PERIOD_SID BETWEEN T4.WAC_START_SID
																AND T4.WAC_END_SID
															)
														THEN COALESCE(T4.TEMP_F_MQWAC, T4.ITEM_F_MQWAC)
													WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'WAC'
														AND (
															T4.PERIOD_SID BETWEEN T4.WAC_START_SID
																AND T4.WAC_END_SID
															)
														THEN COALESCE(T4.TEMP_F_WAC, T4.ITEM_F_WAC)
													ELSE 0
													END
												)
									ELSE SCT.LAG_WAC_PRICE
									END
								)
							) AS NUMERIC(22, 6)) AS LAG_NET_WAC_PRICE
					,CAST(CASE 
							WHEN (
									ISNULL(T4.RESET, 0) = 1
									OR (
										CASE 
											WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
													AND T4.WAC_END_SID
												THEN SCT.LAG_MAP
											ELSE 1
											END > CASE 
											WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
													AND T4.WAC_END_SID
												THEN SCT.LAG_NET_WAC_PRICE
											ELSE 1
											END
										)
									)
								AND LEFT(T4.PRICE_TOLERANCE_TYPE, 1) = 'D'
								AND T4.RESET_PER <> 1
								--AND --T4.LAG_MAP_PER <> T4.RESET_PER
								--DNRP >= T4.NEP_RESET_PERIOD
								THEN (
										(
											CASE 
												WHEN T4.RESET_PRICE_TYPE = 'BQWAC'
													THEN COALESCE(T4.TEMP_F_BQWAC, T4.ITEM_F_BQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'EQWAC'
													THEN COALESCE(T4.TEMP_F_EQWAC, T4.ITEM_F_EQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'AVGQWAC'
													THEN COALESCE(T4.TEMP_F_AVGQWAC, T4.ITEM_F_AVGQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'MQWAC'
													THEN COALESCE(T4.TEMP_F_MQWAC, T4.ITEM_F_MQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'WAC'
													THEN COALESCE(T4.TEMP_F_WAC, T4.ITEM_F_WAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'PRIOR PERIOD NEP'
													THEN ISNULL(SCT.LAG_MAP, 0)
												WHEN T4.RESET_PRICE_TYPE = 'PRIOR PERIOD WAC'
													THEN ISNULL(SCT.LAG_WAC_PRICE, 0)
												WHEN T4.RESET_PRICE_TYPE = 'PRIOR PERIOD NET WAC'
													THEN ISNULL(SCT.LAG_NET_WAC_PRICE, 0)
												ELSE 0
												END
											) + (T4.PRICE_TOLERANCE)
										)
							WHEN (
									ISNULL(T4.RESET, 0) = 1
									OR (
										CASE 
											WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
													AND T4.WAC_END_SID
												THEN SCT.LAG_MAP
											ELSE 1
											END > CASE 
											WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
													AND T4.WAC_END_SID
												THEN SCT.LAG_NET_WAC_PRICE
											ELSE 1
											END
										)
									)
								AND LEFT(T4.PRICE_TOLERANCE_TYPE, 1) = 'P'
								AND T4.RESET_PER <> 1
								--AND DNRP >= T4.NEP_RESET_PERIOD--T4.LAG_MAP_PER <> T4.RESET_PER
								THEN (
										(
											CASE 
												WHEN T4.RESET_PRICE_TYPE = 'BQWAC'
													THEN COALESCE(T4.TEMP_F_BQWAC, T4.ITEM_F_BQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'EQWAC'
													THEN COALESCE(T4.TEMP_F_EQWAC, T4.ITEM_F_EQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'AVGQWAC'
													THEN COALESCE(T4.TEMP_F_AVGQWAC, T4.ITEM_F_AVGQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'MQWAC'
													THEN COALESCE(T4.TEMP_F_MQWAC, T4.ITEM_F_MQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'WAC'
													THEN COALESCE(T4.TEMP_F_WAC, T4.ITEM_F_WAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'PRIOR PERIOD NEP'
													THEN ISNULL(SCT.LAG_MAP, 0)
												WHEN T4.RESET_PRICE_TYPE = 'PRIOR PERIOD WAC'
													THEN ISNULL(SCT.LAG_WAC_PRICE, 0)
												WHEN T4.RESET_PRICE_TYPE = 'PRIOR PERIOD NET WAC'
													THEN ISNULL(SCT.LAG_NET_WAC_PRICE, 0)
												ELSE 0
												END
											) * (1 + (T4.PRICE_TOLERANCE / 100))
										)
							WHEN DNRP >= T4.NEP_RESET_PERIOD --T4.LAG_MAP_PER <> T4.RESET_PER
								AND LEFT(T4.PRICE_TOLERANCE_TYPE, 1) = 'D'
								AND T4.RESET_PER <> 1
								THEN (COALESCE(SCT.LAG_MAP, T4.MAP) + (T4.PRICE_TOLERANCE))
							WHEN (DNRP >= T4.NEP_RESET_PERIOD) --T4.LAG_MAP_PER <> T4.RESET_PER
								AND LEFT(T4.PRICE_TOLERANCE_TYPE, 1) = 'P'
								AND T4.RESET_PER <> 1
								THEN (COALESCE(SCT.LAG_MAP, T4.MAP) * (1 + (T4.PRICE_TOLERANCE / 100)))
							ELSE COALESCE(T4.MAP, SCT.LAG_MAP)
							END AS NUMERIC(22, 6)) LAG_MAP
					,CASE 
						WHEN (
								ISNULL(T4.RESET, 0) = 1
								OR (
									CASE 
										WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
												AND T4.WAC_END_SID
											THEN SCT.LAG_MAP
										ELSE 1
										END > CASE 
										WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
												AND T4.WAC_END_SID
											THEN SCT.LAG_NET_WAC_PRICE
										ELSE 1
										END
									)
								)
							--AND LEFT(T4.PRICE_TOLERANCE_TYPE, 1) = 'D'
							--AND T4.RESET_PER <> 1
							THEN 1
						ELSE 0
						END
				FROM SECOND_REC_CTE SCT
				JOIN #REC_USED_TABLE T4 ON SCT.CCP_DETAILS_SID = T4.CCP_DETAILS_SID
					AND SCT.RS_CONTRACT_SID = T4.RS_CONTRACT_SID
					AND SCT.RN = T4.RN
					AND (SCT.DUPLICATE_DENSE_RNK + 1) = T4.DENSE_RNK
				)
			INSERT INTO #TEST4 (
				CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,LATEST_MAP
				,LATEST_WAC
				,LATEST_NET_WAC
				,RESET
				,RESET_PER
				,WAC_RESET
				,LAG_MAP_PER
				,LAG_PRICE_RESET
				,ITEM_PRICING_QUALIFIER_SID
				,NET_SUBSEQUENT_PERIOD_PRICE
				,NET_PRICE_TYPE
				,NET_RESET_PRICE_TYPE
				,RESET_ELIGIBLE
				,RESET_TYPE
				,SUBSEQUENT_PERIOD_PRICE_TYPE
				,PRICE_TOLERANCE
				,PRICE_TOLERANCE_TYPE
				,TEMP_F_BQWAC
				,TEMP_F_AVGQWAC
				,TEMP_F_EQWAC
				,TEMP_F_MQWAC
				,TEMP_F_WAC
				,ITEM_F_BQWAC
				,ITEM_F_AVGQWAC
				,ITEM_F_EQWAC
				,ITEM_F_MQWAC
				,ITEM_F_WAC
				,RN
				,DENSE_RNK
				,WAC_START_SID
				,WAC_END_SID
				,NET_PRICE
				,NET_RESET_PRICE
				,NET_SUBSEQUENT_PRICE
				,DUPLICATE_DENSE_RNK
				,WAC_PRICE_RESET
				,REBATE_FREQUENCY
				,WAC_RESET_PERIOD
				,NEP_RESET_PERIOD
				,DUPLICATE_WAC_RESET_PERIOD
				,DUPLICATE_NEP_RESET_PERIOD
				)
			SELECT CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,LAG_MAP
				,LAG_WAC_PRICE
				,LAG_NET_WAC_PRICE
				,RESET
				,RESET_PER
				,WAC_RESET
				,LAG_MAP_PER
				,LAG_PRICE_RESET
				,ITEM_PRICING_QUALIFIER_SID
				,NET_SUBSEQUENT_PERIOD_PRICE
				,NET_PRICE_TYPE
				,NET_RESET_PRICE_TYPE
				,RESET_ELIGIBLE
				,RESET_TYPE
				,SUBSEQUENT_PERIOD_PRICE_TYPE
				,PRICE_TOLERANCE
				,PRICE_TOLERANCE_TYPE
				,TEMP_F_BQWAC
				,TEMP_F_AVGQWAC
				,TEMP_F_EQWAC
				,TEMP_F_MQWAC
				,TEMP_F_WAC
				,ITEM_F_BQWAC
				,ITEM_F_AVGQWAC
				,ITEM_F_EQWAC
				,ITEM_F_MQWAC
				,ITEM_F_WAC
				,RN
				,DENSE_RNK
				,WAC_START_SID
				,WAC_END_SID
				,NET_PRICE
				,NET_RESET_PRICE
				,NET_SUBSEQUENT_PRICE
				,DUPLICATE_DENSE_RNK
				,TEST_LAG
				,REBATE_FREQUENCY
				,WAC_RESET_PERIOD
				,NEP_RESET_PERIOD
				,DWRP
				,DNRP
			FROM SECOND_REC_CTE
			WHERE PERIOD_SID >= WAC_START_SID
				-------------THIRD CTE
				-----------violation date will have an impact from projection startdate and projection end date only, hence the follwing cte will calculate the nep from price protection start date to price protection end date, when projection start date was less than price protection start date ------------
				;
				;

			WITH THIRD_REC_CTE
			AS (
				SELECT CCP_DETAILS_SID
					,RS_CONTRACT_SID
					,PERIOD_SID
					,NET_MAP AS MAP
					,WAC
					,NET_WAC
					,RESET
					,RESET_PER
					,WAC_RESET
					,LAG_MAP_PER
					,LAG_PRICE_RESET
					,ITEM_PRICING_QUALIFIER_SID
					,NET_SUBSEQUENT_PERIOD_PRICE
					,NET_PRICE_TYPE
					,NET_RESET_PRICE_TYPE
					,RESET_ELIGIBLE
					,RESET_TYPE
					,SUBSEQUENT_PERIOD_PRICE_TYPE
					,PRICE_TOLERANCE
					,PRICE_TOLERANCE_TYPE
					,CAST(TEMP_F_BQWAC AS NUMERIC(22, 6)) TEMP_F_BQWAC
					,CAST(TEMP_F_AVGQWAC AS NUMERIC(22, 6)) TEMP_F_AVGQWAC
					,CAST(TEMP_F_EQWAC AS NUMERIC(22, 6)) TEMP_F_EQWAC
					,CAST(TEMP_F_MQWAC AS NUMERIC(22, 6)) TEMP_F_MQWAC
					,CAST(TEMP_F_WAC AS NUMERIC(22, 6)) TEMP_F_WAC
					,CAST(ITEM_F_BQWAC AS NUMERIC(22, 6)) ITEM_F_BQWAC
					,CAST(ITEM_F_AVGQWAC AS NUMERIC(22, 6)) ITEM_F_AVGQWAC
					,CAST(ITEM_F_EQWAC AS NUMERIC(22, 6)) ITEM_F_EQWAC
					,CAST(ITEM_F_MQWAC AS NUMERIC(22, 6)) ITEM_F_MQWAC
					,CAST(ITEM_F_WAC AS NUMERIC(22, 6)) ITEM_F_WAC
					,RN
					,DENSE_RNK
					,WAC_START_SID
					,WAC_END_SID
					,NET_PRICE
					,NET_RESET_PRICE
					,NET_SUBSEQUENT_PRICE
					, 1 AS DUPLICATE_DENSE_RNK
					,REBATE_FREQUENCY
					--,WAC_PRICE_RESET = 0
					,WAC_RESET_PERIOD
					,NEP_RESET_PERIOD
					,1 AS DWRP
					,1 AS DNRP
					,CAST(WAC AS NUMERIC(22, 6)) AS LAG_WAC_PRICE
					,CAST(NET_WAC AS NUMERIC(22, 6)) AS LAG_NET_WAC_PRICE
					,CAST(NET_MAP AS NUMERIC(22, 6)) AS LAG_MAP
					,0 AS WAC_PRICE_RESET
				FROM #REC_USED_TABLE
				WHERE DENSE_RNK = 1
					AND RESET_ELIGIBLE = 'YES'
					AND RESET_TYPE = 'VIOLATION DATE'
					AND PERIOD_SID >= WAC_START_SID
				
				UNION ALL
				
				SELECT T4.CCP_DETAILS_SID
					,T4.RS_CONTRACT_SID
					,T4.PERIOD_SID
					,COALESCE(T4.MAP, SCT.LAG_MAP) MAP
					,COALESCE(T4.WAC, SCT.LAG_WAC_PRICE) WAC
					,COALESCE(T4.NET_WAC, SCT.LAG_NET_WAC_PRICE) NET_WAC
					,CASE 
						WHEN /*DWRP >= T4.WAC_RESET_PERIOD
							OR */
							DNRP >= T4.NEP_RESET_PERIOD
							OR ISNULL(T4.RESET, 0) = 1
							OR (
								CASE 
									WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
											AND T4.WAC_END_SID
										THEN SCT.LAG_MAP
									ELSE 1
									END > CASE 
									WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
											AND T4.WAC_END_SID
										THEN SCT.LAG_NET_WAC_PRICE
									ELSE 1
									END
								)
							THEN 1
						ELSE 0
						END RESET
					,T4.RESET_PER
					,T4.WAC_RESET
					,T4.LAG_MAP_PER
					,T4.LAG_PRICE_RESET
					,T4.ITEM_PRICING_QUALIFIER_SID
					,T4.NET_SUBSEQUENT_PERIOD_PRICE
					,T4.NET_PRICE_TYPE
					,T4.NET_RESET_PRICE_TYPE
					,T4.RESET_ELIGIBLE
					,T4.RESET_TYPE
					,T4.SUBSEQUENT_PERIOD_PRICE_TYPE
					,T4.PRICE_TOLERANCE
					,T4.PRICE_TOLERANCE_TYPE
					,CAST(T4.TEMP_F_BQWAC AS NUMERIC(22, 6)) TEMP_F_BQWAC
					,CAST(T4.TEMP_F_AVGQWAC AS NUMERIC(22, 6)) TEMP_F_AVGQWAC
					,CAST(T4.TEMP_F_EQWAC AS NUMERIC(22, 6)) TEMP_F_EQWAC
					,CAST(T4.TEMP_F_MQWAC AS NUMERIC(22, 6)) TEMP_F_MQWAC
					,CAST(T4.TEMP_F_WAC AS NUMERIC(22, 6)) TEMP_F_WAC
					,CAST(T4.ITEM_F_BQWAC AS NUMERIC(22, 6)) ITEM_F_BQWAC
					,CAST(T4.ITEM_F_AVGQWAC AS NUMERIC(22, 6)) ITEM_F_AVGQWAC
					,CAST(T4.ITEM_F_EQWAC AS NUMERIC(22, 6)) ITEM_F_EQWAC
					,CAST(T4.ITEM_F_MQWAC AS NUMERIC(22, 6)) ITEM_F_MQWAC
					,CAST(T4.ITEM_F_WAC AS NUMERIC(22, 6)) ITEM_F_WAC
					,T4.RN
					,T4.DENSE_RNK
					,T4.WAC_START_SID
					,T4.WAC_END_SID
					,T4.NET_PRICE
					,T4.NET_RESET_PRICE
					,T4.NET_SUBSEQUENT_PRICE
					,DUPLICATE_DENSE_RNK + 1 AS DUPLICATE_DENSE_RNK
					--,WAC_PRICE_RESET=CASE WHEN DWRP>=T4.WAC_RESET_PERIOD THEN 1 ELSE 0 END
					,T4.REBATE_FREQUENCY
					,T4.WAC_RESET_PERIOD
					,T4.NEP_RESET_PERIOD
					,CASE 
						WHEN (DNRP >= T4.NEP_RESET_PERIOD)
							OR (DWRP >= T4.WAC_RESET_PERIOD)
							OR (
								CASE 
									WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
											AND T4.WAC_END_SID
										THEN SCT.LAG_MAP
									ELSE 1
									END > CASE 
									WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
											AND T4.WAC_END_SID
										THEN SCT.LAG_NET_WAC_PRICE
									ELSE 1
									END
								)
							THEN 1
						ELSE DWRP + 1
						END AS DWRP
					,CASE 
						WHEN (DNRP >= T4.NEP_RESET_PERIOD)
							OR (
								CASE 
									WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
											AND T4.WAC_END_SID
										THEN SCT.LAG_MAP
									ELSE 1
									END > CASE 
									WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
											AND T4.WAC_END_SID
										THEN SCT.LAG_NET_WAC_PRICE
									ELSE 1
									END
								)
							THEN 1
						ELSE DNRP + 1
						END AS DNRP
					,CAST(CASE 
							WHEN DWRP >= T4.WAC_RESET_PERIOD
								OR DNRP >= T4.NEP_RESET_PERIOD
								OR ISNULL(T4.RESET, 0) = 1
								OR (
									CASE 
										WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
												AND T4.WAC_END_SID
											THEN SCT.LAG_MAP
										ELSE 1
										END > CASE 
										WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
												AND T4.WAC_END_SID
											THEN SCT.LAG_NET_WAC_PRICE
										ELSE 1
										END
									)
								THEN (
										CASE 
											WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'BQWAC'
												AND (
													T4.PERIOD_SID BETWEEN T4.WAC_START_SID
														AND T4.WAC_END_SID
													)
												THEN COALESCE(T4.TEMP_F_BQWAC, T4.ITEM_F_BQWAC)
											WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'EQWAC'
												AND (
													T4.PERIOD_SID BETWEEN T4.WAC_START_SID
														AND T4.WAC_END_SID
													)
												THEN COALESCE(T4.TEMP_F_EQWAC, T4.ITEM_F_EQWAC)
											WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'AVGQWAC'
												AND (
													T4.PERIOD_SID BETWEEN T4.WAC_START_SID
														AND T4.WAC_END_SID
													)
												THEN COALESCE(T4.TEMP_F_AVGQWAC, T4.ITEM_F_AVGQWAC)
											WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'MQWAC'
												AND (
													T4.PERIOD_SID BETWEEN T4.WAC_START_SID
														AND T4.WAC_END_SID
													)
												THEN COALESCE(T4.TEMP_F_MQWAC, T4.ITEM_F_MQWAC)
											WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'WAC'
												AND (
													T4.PERIOD_SID BETWEEN T4.WAC_START_SID
														AND T4.WAC_END_SID
													)
												THEN COALESCE(T4.TEMP_F_WAC, T4.ITEM_F_WAC)
											ELSE 0
											END
										)
							ELSE SCT.LAG_WAC_PRICE
							END AS NUMERIC(22, 6)) AS LAG_WAC_PRICE
					,CAST((
							(
								CASE 
									WHEN DWRP >= T4.WAC_RESET_PERIOD
										OR DNRP >= T4.NEP_RESET_PERIOD
										OR ISNULL(T4.RESET, 0) = 1
										OR (
											CASE 
												WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
														AND T4.WAC_END_SID
													THEN SCT.LAG_MAP
												ELSE 1
												END > CASE 
												WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
														AND T4.WAC_END_SID
													THEN SCT.LAG_NET_WAC_PRICE
												ELSE 1
												END
											)
										THEN (
												CASE 
													WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'BQWAC'
														AND (
															T4.PERIOD_SID BETWEEN T4.WAC_START_SID
																AND T4.WAC_END_SID
															)
														THEN COALESCE(T4.TEMP_F_BQWAC, T4.ITEM_F_BQWAC)
													WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'EQWAC'
														AND (
															T4.PERIOD_SID BETWEEN T4.WAC_START_SID
																AND T4.WAC_END_SID
															)
														THEN COALESCE(T4.TEMP_F_EQWAC, T4.ITEM_F_EQWAC)
													WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'AVGQWAC'
														AND (
															T4.PERIOD_SID BETWEEN T4.WAC_START_SID
																AND T4.WAC_END_SID
															)
														THEN COALESCE(T4.TEMP_F_AVGQWAC, T4.ITEM_F_AVGQWAC)
													WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'MQWAC'
														AND (
															T4.PERIOD_SID BETWEEN T4.WAC_START_SID
																AND T4.WAC_END_SID
															)
														THEN COALESCE(T4.TEMP_F_MQWAC, T4.ITEM_F_MQWAC)
													WHEN T4.ITEM_PRICING_QUALIFIER_SID = 'WAC'
														AND (
															T4.PERIOD_SID BETWEEN T4.WAC_START_SID
																AND T4.WAC_END_SID
															)
														THEN COALESCE(T4.TEMP_F_WAC, T4.ITEM_F_WAC)
													ELSE 0
													END
												)
									ELSE SCT.LAG_WAC_PRICE
									END
								)
							) AS NUMERIC(22, 6)) AS LAG_NET_WAC_PRICE
					,CAST(CASE 
							WHEN (
									ISNULL(T4.RESET, 0) = 1
									OR (
										CASE 
											WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
													AND T4.WAC_END_SID
												THEN SCT.LAG_MAP
											ELSE 1
											END > CASE 
											WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
													AND T4.WAC_END_SID
												THEN SCT.LAG_NET_WAC_PRICE
											ELSE 1
											END
										)
									)
								AND LEFT(T4.PRICE_TOLERANCE_TYPE, 1) = 'D'
								AND T4.RESET_PER <> 1
								--AND --T4.LAG_MAP_PER <> T4.RESET_PER
								--DNRP >= T4.NEP_RESET_PERIOD
								THEN (
										(
											CASE 
												WHEN T4.RESET_PRICE_TYPE = 'BQWAC'
													THEN COALESCE(T4.TEMP_F_BQWAC, T4.ITEM_F_BQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'EQWAC'
													THEN COALESCE(T4.TEMP_F_EQWAC, T4.ITEM_F_EQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'AVGQWAC'
													THEN COALESCE(T4.TEMP_F_AVGQWAC, T4.ITEM_F_AVGQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'MQWAC'
													THEN COALESCE(T4.TEMP_F_MQWAC, T4.ITEM_F_MQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'WAC'
													THEN COALESCE(T4.TEMP_F_WAC, T4.ITEM_F_WAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'PRIOR PERIOD NEP'
													THEN ISNULL(SCT.LAG_MAP, 0)
												WHEN T4.RESET_PRICE_TYPE = 'PRIOR PERIOD WAC'
													THEN ISNULL(SCT.LAG_WAC_PRICE, 0)
												WHEN T4.RESET_PRICE_TYPE = 'PRIOR PERIOD NET WAC'
													THEN ISNULL(SCT.LAG_NET_WAC_PRICE, 0)
												ELSE 0
												END
											) + (T4.PRICE_TOLERANCE)
										)
							WHEN (
									ISNULL(T4.RESET, 0) = 1
									OR (
										CASE 
											WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
													AND T4.WAC_END_SID
												THEN SCT.LAG_MAP
											ELSE 1
											END > CASE 
											WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
													AND T4.WAC_END_SID
												THEN SCT.LAG_NET_WAC_PRICE
											ELSE 1
											END
										)
									)
								AND LEFT(T4.PRICE_TOLERANCE_TYPE, 1) = 'P'
								AND T4.RESET_PER <> 1
								--AND DNRP >= T4.NEP_RESET_PERIOD--T4.LAG_MAP_PER <> T4.RESET_PER
								THEN (
										(
											CASE 
												WHEN T4.RESET_PRICE_TYPE = 'BQWAC'
													THEN COALESCE(T4.TEMP_F_BQWAC, T4.ITEM_F_BQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'EQWAC'
													THEN COALESCE(T4.TEMP_F_EQWAC, T4.ITEM_F_EQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'AVGQWAC'
													THEN COALESCE(T4.TEMP_F_AVGQWAC, T4.ITEM_F_AVGQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'MQWAC'
													THEN COALESCE(T4.TEMP_F_MQWAC, T4.ITEM_F_MQWAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'WAC'
													THEN COALESCE(T4.TEMP_F_WAC, T4.ITEM_F_WAC, 0)
												WHEN T4.RESET_PRICE_TYPE = 'PRIOR PERIOD NEP'
													THEN ISNULL(SCT.LAG_MAP, 0)
												WHEN T4.RESET_PRICE_TYPE = 'PRIOR PERIOD WAC'
													THEN ISNULL(SCT.LAG_WAC_PRICE, 0)
												WHEN T4.RESET_PRICE_TYPE = 'PRIOR PERIOD NET WAC'
													THEN ISNULL(SCT.LAG_NET_WAC_PRICE, 0)
												ELSE 0
												END
											) * (1 + (T4.PRICE_TOLERANCE / 100))
										)
							WHEN DNRP >= T4.NEP_RESET_PERIOD --T4.LAG_MAP_PER <> T4.RESET_PER
								AND LEFT(T4.PRICE_TOLERANCE_TYPE, 1) = 'D'
								AND T4.RESET_PER <> 1
								THEN (COALESCE(SCT.LAG_MAP, T4.MAP) + (T4.PRICE_TOLERANCE))
							WHEN (DNRP >= T4.NEP_RESET_PERIOD) --T4.LAG_MAP_PER <> T4.RESET_PER
								AND LEFT(T4.PRICE_TOLERANCE_TYPE, 1) = 'P'
								AND T4.RESET_PER <> 1
								THEN (COALESCE(SCT.LAG_MAP, T4.MAP) * (1 + (T4.PRICE_TOLERANCE / 100)))
							ELSE COALESCE(T4.MAP, SCT.LAG_MAP)
							END AS NUMERIC(22, 6)) LAG_MAP
					,CASE 
						WHEN (
								ISNULL(T4.RESET, 0) = 1
								OR (
									CASE 
										WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
												AND T4.WAC_END_SID
											THEN SCT.LAG_MAP
										ELSE 1
										END > CASE 
										WHEN SCT.PERIOD_SID BETWEEN T4.WAC_START_SID
												AND T4.WAC_END_SID
											THEN SCT.LAG_NET_WAC_PRICE
										ELSE 1
										END
									)
								)
							--AND LEFT(T4.PRICE_TOLERANCE_TYPE, 1) = 'D'
							--AND T4.RESET_PER <> 1
							THEN 1
						ELSE 0
						END
				FROM THIRD_REC_CTE SCT
				JOIN #REC_USED_TABLE T4 ON SCT.CCP_DETAILS_SID = T4.CCP_DETAILS_SID
					AND SCT.RS_CONTRACT_SID = T4.RS_CONTRACT_SID
					AND SCT.RN = T4.RN
					AND (SCT.DUPLICATE_DENSE_RNK + 1) = T4.DENSE_RNK
				)
			INSERT INTO #TEST4 (
				CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,LATEST_MAP
				,LATEST_WAC
				,LATEST_NET_WAC
				,RESET
				,RESET_PER
				,WAC_RESET
				,LAG_MAP_PER
				,LAG_PRICE_RESET
				,ITEM_PRICING_QUALIFIER_SID
				,NET_SUBSEQUENT_PERIOD_PRICE
				,NET_PRICE_TYPE
				,NET_RESET_PRICE_TYPE
				,RESET_ELIGIBLE
				,RESET_TYPE
				,SUBSEQUENT_PERIOD_PRICE_TYPE
				,PRICE_TOLERANCE
				,PRICE_TOLERANCE_TYPE
				,TEMP_F_BQWAC
				,TEMP_F_AVGQWAC
				,TEMP_F_EQWAC
				,TEMP_F_MQWAC
				,TEMP_F_WAC
				,ITEM_F_BQWAC
				,ITEM_F_AVGQWAC
				,ITEM_F_EQWAC
				,ITEM_F_MQWAC
				,ITEM_F_WAC
				,RN
				,DENSE_RNK
				,WAC_START_SID
				,WAC_END_SID
				,NET_PRICE
				,NET_RESET_PRICE
				,NET_SUBSEQUENT_PRICE
				,DUPLICATE_DENSE_RNK
				,WAC_PRICE_RESET
				,REBATE_FREQUENCY
				,WAC_RESET_PERIOD
				,NEP_RESET_PERIOD
				,DUPLICATE_WAC_RESET_PERIOD
				,DUPLICATE_NEP_RESET_PERIOD
				)
			SELECT CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,LAG_MAP
				,LAG_WAC_PRICE
				,LAG_NET_WAC_PRICE
				,RESET
				,RESET_PER
				,WAC_RESET
				,LAG_MAP_PER
				,LAG_PRICE_RESET
				,ITEM_PRICING_QUALIFIER_SID
				,NET_SUBSEQUENT_PERIOD_PRICE
				,NET_PRICE_TYPE
				,NET_RESET_PRICE_TYPE
				,RESET_ELIGIBLE
				,RESET_TYPE
				,SUBSEQUENT_PERIOD_PRICE_TYPE
				,PRICE_TOLERANCE
				,PRICE_TOLERANCE_TYPE
				,TEMP_F_BQWAC
				,TEMP_F_AVGQWAC
				,TEMP_F_EQWAC
				,TEMP_F_MQWAC
				,TEMP_F_WAC
				,ITEM_F_BQWAC
				,ITEM_F_AVGQWAC
				,ITEM_F_EQWAC
				,ITEM_F_MQWAC
				,ITEM_F_WAC
				,RN
				,DENSE_RNK
				,WAC_START_SID
				,WAC_END_SID
				,NET_PRICE
				,NET_RESET_PRICE
				,NET_SUBSEQUENT_PRICE
				,DUPLICATE_DENSE_RNK
				,WAC_PRICE_RESET
				,REBATE_FREQUENCY
				,WAC_RESET_PERIOD
				,NEP_RESET_PERIOD
				,DWRP
				,DNRP
			FROM THIRD_REC_CTE

			INSERT INTO #TEMP_MAP_DATA (
				CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,NET_MAP
				,WAC
				,NET_WAC
				,RESET
				,WAC_RESET
				,REBATE_FREQUENCY
				)
			SELECT CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,LATEST_MAP
				,LATEST_WAC
				,LATEST_NET_WAC
				,RESET
				,WAC_PRICE_RESET
				,REBATE_FREQUENCY
			FROM #TEST4
		END
------------------------------------in the following if block all ccps nep and wac will be calcuate for the ccp having teset type interval frequency only -----------------------------------------------
		
		IF EXISTS (
				SELECT 1
				FROM #TEMP_NM_PPA_PROJECTION B
				WHERE RESET_ELIGIBLE = 'YES'
					AND RESET_TYPE = 'INTERVAL FREQUENCY'
					AND RESET_FREQUENCY IS NOT NULL
					AND RESET_INTERVAL IS NOT NULL
					AND DENSE_RNK = 1
				)
		BEGIN
				;

			WITH REC_CTE
			AS (
				SELECT R.CCP_DETAILS_SID
					,R.PERIOD_SID
					,R.RS_CONTRACT_SID
					,R.RESET
					,R.WAC
					,R.NET_WAC
					,R.MAP
					,R.NET_MAP
					,R.RESET_PER
					,R.WAC_RESET
					,R.LAG_MAP_PER
					,R.LAG_PRICE_RESET
					,R.ITEM_PRICING_QUALIFIER_SID
					,R.NET_SUBSEQUENT_PERIOD_PRICE
					,R.NET_PRICE_TYPE
					,R.NET_RESET_PRICE_TYPE
					,R.RESET_ELIGIBLE
					,R.RESET_TYPE
					,R.RESET_PRICE_TYPE
					,R.SUBSEQUENT_PERIOD_PRICE_TYPE
					,R.PRICE_TOLERANCE
					,R.PRICE_TOLERANCE_TYPE
					,R.TEMP_F_BQWAC
					,R.TEMP_F_AVGQWAC
					,R.TEMP_F_EQWAC
					,R.TEMP_F_MQWAC
					,R.TEMP_F_WAC
					,R.ITEM_F_BQWAC
					,R.ITEM_F_AVGQWAC
					,R.ITEM_F_EQWAC
					,R.ITEM_F_MQWAC
					,R.ITEM_F_WAC
					,R.RN
					,R.DENSE_RNK
					,R.WAC_START_SID
					,R.WAC_END_SID
					,R.NET_PRICE
					,R.NET_RESET_PRICE
					,R.NET_SUBSEQUENT_PRICE
					,1 AS DUPLICATE_DENSE_RNK
					,cast(pc.WAC AS NUMERIC(22, 6)) AS LATEST_WAC
					, cast(pc.NET_WAC AS NUMERIC(22, 6)) AS LATEST_NET_WAC
					,cast(pc.MAP AS NUMERIC(22, 6)) AS LATEST_MAP
					,R.REBATE_FREQUENCY
					,0 AS WAC_PRICE_RESET
				FROM #REC_USED_TABLE R
				JOIN (
					SELECT ccp_details_sid
						,rs_contract_sid
						,rn
						,WAC
						,NET_WAC
						,MAP
						,DENSE_RNK
					FROM #TEMP_NM_PPA_PROJECTION
					WHERE DENSE_RNK = 1
					) pc ON pc.CCP_DETAILS_SID = r.CCP_DETAILS_SID
					AND pc.RS_CONTRACT_SID = r.RS_CONTRACT_SID
					AND pc.DENSE_RNK = r.DENSE_RNK
				WHERE R.DENSE_RNK = 1
					AND R.RESET_ELIGIBLE = 'YES'
					AND R.RESET_TYPE = 'INTERVAL FREQUENCY'
					AND R.RESET_FREQUENCY IS NOT NULL
					AND R.RESET_INTERVAL IS NOT NULL
				
				UNION ALL
				
				SELECT C.CCP_DETAILS_SID
					,T.PERIOD_SID
					,C.RS_CONTRACT_SID
					,T.RESET
					,COALESCE(T.WAC, C.LATEST_WAC) WAC
					,COALESCE(T.NET_WAC, C.LATEST_NET_WAC) NET_WAC
					,COALESCE(T.MAP, C.LATEST_MAP) MAP
					,T.NET_MAP
					,T.RESET_PER
					,T.WAC_RESET
					,T.LAG_MAP_PER
					,T.LAG_PRICE_RESET
					,T.ITEM_PRICING_QUALIFIER_SID
					,T.NET_SUBSEQUENT_PERIOD_PRICE
					,T.NET_PRICE_TYPE
					,T.NET_RESET_PRICE_TYPE
					,T.RESET_ELIGIBLE
					,T.RESET_TYPE
					,T.RESET_PRICE_TYPE
					,T.SUBSEQUENT_PERIOD_PRICE_TYPE
					,T.PRICE_TOLERANCE
					,T.PRICE_TOLERANCE_TYPE
					,T.TEMP_F_BQWAC
					,T.TEMP_F_AVGQWAC
					,T.TEMP_F_EQWAC
					,T.TEMP_F_MQWAC
					,T.TEMP_F_WAC
					,T.ITEM_F_BQWAC
					,T.ITEM_F_AVGQWAC
					,T.ITEM_F_EQWAC
					,T.ITEM_F_MQWAC
					,T.ITEM_F_WAC
					,T.RN
					,T.DENSE_RNK
					,T.WAC_START_SID
					,T.WAC_END_SID
					,T.NET_PRICE
					,T.NET_RESET_PRICE
					,T.NET_SUBSEQUENT_PRICE
					, 1 + DUPLICATE_DENSE_RNK AS DUPLICATE_DENSE_RNK
					,CAST(CASE 
							WHEN ISNULL(T.RESET, 0) = 1
								OR T.LAG_PRICE_RESET <> T.[WAC_RESET]
								OR T.LAG_MAP_PER <> T.RESET_PER
								THEN (
										CASE 
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'BQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_BQWAC, T.ITEM_F_BQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'EQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_EQWAC, T.ITEM_F_EQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'AVGQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_AVGQWAC, T.ITEM_F_AVGQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'MQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_MQWAC, T.ITEM_F_MQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'WAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_WAC, T.ITEM_F_WAC)
											ELSE 0
											END
										)
							ELSE COALESCE(C.LATEST_WAC, T.WAC)
							END AS NUMERIC(22, 6)) LATEST_WAC
					,CAST(CASE 
							WHEN ISNULL(T.RESET, 0) = 1
								OR T.LAG_PRICE_RESET <> T.[WAC_RESET]
								OR T.LAG_MAP_PER <> T.RESET_PER
								THEN (
										CASE 
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'BQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_BQWAC, T.ITEM_F_BQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'EQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_EQWAC, T.ITEM_F_EQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'AVGQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_AVGQWAC, T.ITEM_F_AVGQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'MQWAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_MQWAC, T.ITEM_F_MQWAC)
											WHEN T.ITEM_PRICING_QUALIFIER_SID = 'WAC'
												AND (
													T.PERIOD_SID BETWEEN T.WAC_START_SID
														AND T.WAC_END_SID
													)
												THEN COALESCE(T.TEMP_F_WAC, T.ITEM_F_WAC)
											ELSE 0
											END
										)
							ELSE COALESCE(C.LATEST_WAC, T.WAC)
							END AS NUMERIC(22, 6)) LATEST_NET_WAC
					,CAST(CASE 
							WHEN ISNULL(T.RESET, 0) = 1
								AND LEFT(T.PRICE_TOLERANCE_TYPE, 1) = 'D'
								AND T.RESET_PER <> 1
								AND T.LAG_MAP_PER <> T.RESET_PER
								THEN (
										(
											(
												CASE 
													WHEN T.RESET_PRICE_TYPE = 'BQWAC'
														THEN COALESCE(T.TEMP_F_BQWAC, T.ITEM_F_BQWAC)
													WHEN T.RESET_PRICE_TYPE = 'EQWAC'
														THEN COALESCE(T.TEMP_F_EQWAC, T.ITEM_F_EQWAC)
													WHEN T.RESET_PRICE_TYPE = 'AVGQWAC'
														THEN COALESCE(T.TEMP_F_AVGQWAC, T.ITEM_F_AVGQWAC)
													WHEN T.RESET_PRICE_TYPE = 'MQWAC'
														THEN COALESCE(T.TEMP_F_MQWAC, T.ITEM_F_MQWAC)
													WHEN T.RESET_PRICE_TYPE = 'WAC'
														THEN COALESCE(T.TEMP_F_WAC, T.ITEM_F_WAC)
													ELSE 0
													END
												)
											) + (T.PRICE_TOLERANCE)
										)
							WHEN ISNULL(T.RESET, 0) = 1
								AND LEFT(T.PRICE_TOLERANCE_TYPE, 1) = 'P'
								AND T.RESET_PER <> 1
								AND T.LAG_MAP_PER <> T.RESET_PER
								THEN (
										(
											(
												CASE 
													WHEN T.RESET_PRICE_TYPE = 'BQWAC'
														THEN COALESCE(T.TEMP_F_BQWAC, T.ITEM_F_BQWAC)
													WHEN T.RESET_PRICE_TYPE = 'EQWAC'
														THEN COALESCE(T.TEMP_F_EQWAC, T.ITEM_F_EQWAC)
													WHEN T.RESET_PRICE_TYPE = 'AVGQWAC'
														THEN COALESCE(T.TEMP_F_AVGQWAC, T.ITEM_F_AVGQWAC)
													WHEN T.RESET_PRICE_TYPE = 'MQWAC'
														THEN COALESCE(T.TEMP_F_MQWAC, T.ITEM_F_MQWAC)
													WHEN T.RESET_PRICE_TYPE = 'WAC'
														THEN COALESCE(T.TEMP_F_WAC, T.ITEM_F_WAC)
													WHEN T.RESET_PRICE_TYPE = 'PRIOR PERIOD NEP'
														THEN C.LATEST_MAP
													WHEN T.RESET_PRICE_TYPE = 'PRIOR PERIOD WAC'
														THEN C.LATEST_WAC
													WHEN T.RESET_PRICE_TYPE = 'PRIOR PERIOD NET WAC'
														THEN C.LATEST_NET_WAC
													ELSE 0
													END
												)
											) * (1 + (T.PRICE_TOLERANCE / 100))
										)
							WHEN T.LAG_MAP_PER <> T.RESET_PER
								AND LEFT(T.PRICE_TOLERANCE_TYPE, 1) = 'D'
								AND T.RESET_PER <> 1
								THEN ((COALESCE(C.LATEST_MAP, T.MAP)) + (T.PRICE_TOLERANCE))
							WHEN T.LAG_MAP_PER <> T.RESET_PER
								AND LEFT(T.PRICE_TOLERANCE_TYPE, 1) = 'P'
								AND T.RESET_PER <> 1
								THEN ((COALESCE(C.LATEST_MAP, T.MAP)) * (1 + (T.PRICE_TOLERANCE / 100)))
							ELSE COALESCE(T.MAP, C.LATEST_MAP)
							END AS NUMERIC(22, 6)) LATEST_MAP
					,T.REBATE_FREQUENCY
					,CASE 
						WHEN ISNULL(T.RESET, 0) = 1
							OR T.LAG_PRICE_RESET <> T.[WAC_RESET]
							OR T.LAG_MAP_PER <> T.RESET_PER
							THEN 1
						ELSE 0
						END WAC_PRICE_RESET
				FROM REC_CTE C
				JOIN #REC_USED_TABLE T ON T.CCP_DETAILS_SID = C.CCP_DETAILS_SID
					AND T.RS_CONTRACT_SID = C.RS_CONTRACT_SID
					AND T.DENSE_RNK = (1 + C.DUPLICATE_DENSE_RNK)
					--WHERE DUPLICATE_DENSE_RNK < @MAX_RN
				) ---truncate table #TEMP_MAP_DATA
			INSERT INTO #TEMP_MAP_DATA (
				CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,NET_MAP
				,WAC
				,NET_WAC
				,RESET
				,REBATE_FREQUENCY
				,WAC_RESET
				)
			SELECT CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,LATEST_MAP
				,LATEST_WAC
				,LATEST_NET_WAC
				,RESET
				,REBATE_FREQUENCY
				,WAC_PRICE_RESET
			FROM REC_CTE
			ORDER BY CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
			OPTION (MAXRECURSION 0)
		END
---------------------- calcuate the ppa RPU for the ccp and rs period wise---------------------
		
		UPDATE MAP
		SET PPA = CASE 
				WHEN NET_WAC > NET_MAP
					THEN NET_WAC - NET_MAP
				ELSE 0
				END
			,REBATE_PERIOD = CASE 
				WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'Q'
					THEN P.QPERIOD
				WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'A'
					THEN P.YPERIOD
				WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'S'
					THEN P.SPERIOD
				WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'M'
					THEN P.MPERIOD
				END
		FROM #TEMP_MAP_DATA MAP
		JOIN #PERIOD P ON P.PERIOD_SID = MAP.PERIOD_SID;
---------------------- calcuate the price change for the ccp and rs period wise---------------------
		;
		WITH PRICE_CHAGE_CTE1
		AS (
			SELECT MAP.CCP_DETAILS_SID
				,MAP.RS_CONTRACT_SID
				,MAP.PERIOD_SID
				,MAP.NET_MAP
				,MAP.WAC
				,MAP.NET_WAC
				,ISNULL(MAP.RESET, 0) RESET
				,MAP.WAC_RESET
				,MAP.REBATE_FREQUENCY
				,DENSE_RANK() OVER (
					PARTITION BY MAP.CCP_DETAILS_SID
					,MAP.RS_CONTRACT_SID ORDER BY MAP.CCP_DETAILS_SID
						,MAP.RS_CONTRACT_SID
						,P.PERIOD_YEAR
						,CASE 
							WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'Q'
								THEN P.PERIOD_QUARTER
							WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'A'
								THEN P.PERIOD_YEAR
							WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'S'
								THEN P.PERIOD_SEMI
							WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'M'
								THEN P.PERIOD_MONTH
							END
					) AS DENSE_RN
				,ROW_NUMBER() OVER (
					PARTITION BY MAP.CCP_DETAILS_SID
					,MAP.RS_CONTRACT_SID
					,P.PERIOD_YEAR
					,CASE 
						WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'Q'
							THEN P.PERIOD_QUARTER
						WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'A'
							THEN P.PERIOD_YEAR
						WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'S'
							THEN P.PERIOD_SEMI
						WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'M'
							THEN P.PERIOD_MONTH
						END ORDER BY MAP.CCP_DETAILS_SID
						,MAP.RS_CONTRACT_SID
						,P.PERIOD_YEAR
						,CASE 
							WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'Q'
								THEN P.PERIOD_QUARTER
							WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'A'
								THEN P.PERIOD_YEAR
							WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'S'
								THEN P.PERIOD_SEMI
							WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'M'
								THEN P.PERIOD_MONTH
							END
					) AS ROW_RN
				,MAP.REBATE_PERIOD
				,SUM(RESET) OVER (
					PARTITION BY MAP.CCP_DETAILS_SID
					,MAP.RS_CONTRACT_SID
					,P.PERIOD_YEAR
					,CASE 
						WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'Q'
							THEN P.PERIOD_QUARTER
						WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'A'
							THEN P.PERIOD_YEAR
						WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'S'
							THEN P.PERIOD_SEMI
						WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'M'
							THEN P.PERIOD_MONTH
						END ORDER BY MAP.CCP_DETAILS_SID
						,MAP.RS_CONTRACT_SID
						,P.PERIOD_YEAR
						,CASE 
							WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'Q'
								THEN P.PERIOD_QUARTER
							WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'A'
								THEN P.PERIOD_YEAR
							WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'S'
								THEN P.PERIOD_SEMI
							WHEN LEFT(MAP.REBATE_FREQUENCY, 1) = 'M'
								THEN P.PERIOD_MONTH
							END
					) AS RESET_CNT
			FROM #TEMP_MAP_DATA MAP
			JOIN #PERIOD P ON P.PERIOD_SID = MAP.PERIOD_SID
			)
			,PRICE_CHANGE_CTE2
		AS (
			SELECT *
				,LAG(WAC) OVER (
					PARTITION BY CCP_DETAILS_SID
					,RS_CONTRACT_SID ORDER BY CCP_DETAILS_SID
						,RS_CONTRACT_SID
						,DENSE_RN
					) AS LAG_WAC
			FROM PRICE_CHAGE_CTE1
			WHERE ROW_RN = 1
			)
		UPDATE MAP
		SET PRICE_CHANGE = CASE 
				WHEN PCC.DENSE_RN = 1
					OR PCC.RESET_CNT >= 1
					THEN 0
				ELSE ((PCC.WAC - PCC.LAG_WAC) / NULLIF(PCC.LAG_WAC, 0)) * 100
				END
		FROM #TEMP_MAP_DATA MAP
		JOIN #PERIOD P ON P.PERIOD_SID = MAP.PERIOD_SID
		LEFT JOIN PRICE_CHANGE_CTE2 PCC ON PCC.CCP_DETAILS_SID = MAP.CCP_DETAILS_SID
			AND PCC.RS_CONTRACT_SID = MAP.RS_CONTRACT_SID
			AND PCC.REBATE_PERIOD = MAP.REBATE_PERIOD
-------------updaing the result in one temp table----------------
		
		DECLARE @TABLE_NAME VARCHAR(100) = CONCAT (
				'ST_PPA_MAP_WO_NETTING_'
				,CASE 
					WHEN @VIOLATION_DATE = 1
						THEN 'VD_'
					END
				,@SALES_FREQUENCY
				,'_'
				,@USER_ID
				,'_'
				,@SESSION_ID
				,'_'
				,REPLACE(CONVERT(VARCHAR(50), GETDATE(), 2), '.', '')
				)

		SET @SQL= CONCAT (
				'TRUNCATE TABLE '
				,@TABLE_NAME
				)

		EXEC sp_executesql @SQL

		SET @SQL = CONCAT (
				'INSERT INTO '
				,@TABLE_NAME
				,' (
				CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,WAC
				,NET_WAC
				,NET_MAP
				,PPA
				,PRICE_CHANGE
				,RESET
				,WAC_RESET)
			SELECT CCP_DETAILS_SID
				,RS_CONTRACT_SID
				,PERIOD_SID
				,WAC
				,NET_WAC
				,NET_MAP
				,PPA
				,PRICE_CHANGE
				,RESET
				,WAC_RESET
			FROM #TEMP_MAP_DATA'
				)

		EXEC sp_executesql @SQL
	END TRY

	BEGIN CATCH
		DECLARE @ERRORMESSAGE NVARCHAR(4000);
		DECLARE @ERRORSEVERITY INT;
		DECLARE @ERRORSTATE INT;
		DECLARE @ERRORNUMBER INT;
		DECLARE @ERRORPROCEDURE VARCHAR(200);
		DECLARE @ERRORLINE INT;

		EXEC USPERRORCOLLECTOR

		SELECT @ERRORMESSAGE = ERROR_MESSAGE()
			,@ERRORSEVERITY = ERROR_SEVERITY()
			,@ERRORSTATE = ERROR_STATE()
			,@ERRORPROCEDURE = ERROR_PROCEDURE()
			,@ERRORLINE = ERROR_LINE()
			,@ERRORNUMBER = ERROR_NUMBER()

		RAISERROR (
				@ERRORMESSAGE
				,-- MESSAGE TEXT. 
				@ERRORSEVERITY
				,-- SEVERITY. 
				@ERRORSTATE
				,-- STATE. 
				@ERRORPROCEDURE
				,-- PROCEDURE_NAME. 
				@ERRORNUMBER
				,-- ERRORNUMBER 
				@ERRORLINE -- ERRORLINE 
				)
	END CATCH
END --PROC ENDGO 



GO


