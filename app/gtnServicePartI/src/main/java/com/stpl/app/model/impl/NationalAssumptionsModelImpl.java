package com.stpl.app.model.impl;

import com.stpl.app.model.NationalAssumptions;
import com.stpl.app.model.NationalAssumptionsModel;
import com.stpl.app.service.persistence.NationalAssumptionsPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NationalAssumptions service. Represents a row in the &quot;NATIONAL_ASSUMPTIONS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.NationalAssumptionsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NationalAssumptionsImpl}.
 * </p>
 *
 * @author
 * @see NationalAssumptionsImpl
 * @see com.stpl.app.model.NationalAssumptions
 * @see com.stpl.app.model.NationalAssumptionsModel
 * @generated
 */
public class NationalAssumptionsModelImpl extends BaseModelImpl<NationalAssumptions>
    implements NationalAssumptionsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a national assumptions model instance should use the {@link com.stpl.app.model.NationalAssumptions} interface instead.
     */
    public static final String TABLE_NAME = "NATIONAL_ASSUMPTIONS";
    public static final Object[][] TABLE_COLUMNS = {
            { "BASELINE_PERIOD", Types.VARCHAR },
            { "FREQUENCY", Types.VARCHAR },
            { "START_PERIOD", Types.VARCHAR },
            { "FORECAST_METHODOLOGY", Types.VARCHAR },
            { "PRICE_TYPE", Types.VARCHAR },
            { "END_PERIOD", Types.VARCHAR },
            { "PRICE_BASIS", Types.VARCHAR },
            { "NA_PROJ_MASTER_SID", Types.INTEGER },
            { "ROLLING_PERIOD", Types.VARCHAR },
            { "BASELINE_METHODOLOGY", Types.VARCHAR },
            { "GROWTH_RATE", Types.DOUBLE }
        };
    public static final String TABLE_SQL_CREATE = "create table NATIONAL_ASSUMPTIONS (BASELINE_PERIOD VARCHAR(75) null,FREQUENCY VARCHAR(75) null,START_PERIOD VARCHAR(75) not null IDENTITY,FORECAST_METHODOLOGY VARCHAR(75) null,PRICE_TYPE VARCHAR(75) not null IDENTITY,END_PERIOD VARCHAR(75) not null IDENTITY,PRICE_BASIS VARCHAR(75) null,NA_PROJ_MASTER_SID INTEGER not null IDENTITY,ROLLING_PERIOD VARCHAR(75) null,BASELINE_METHODOLOGY VARCHAR(75) null,GROWTH_RATE DOUBLE,primary key (START_PERIOD, PRICE_TYPE, END_PERIOD, NA_PROJ_MASTER_SID))";
    public static final String TABLE_SQL_DROP = "drop table NATIONAL_ASSUMPTIONS";
    public static final String ORDER_BY_JPQL = " ORDER BY nationalAssumptions.id.startPeriod ASC, nationalAssumptions.id.priceType ASC, nationalAssumptions.id.endPeriod ASC, nationalAssumptions.id.naProjMasterSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY NATIONAL_ASSUMPTIONS.START_PERIOD ASC, NATIONAL_ASSUMPTIONS.PRICE_TYPE ASC, NATIONAL_ASSUMPTIONS.END_PERIOD ASC, NATIONAL_ASSUMPTIONS.NA_PROJ_MASTER_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.NationalAssumptions"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.NationalAssumptions"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.NationalAssumptions"));
    private static ClassLoader _classLoader = NationalAssumptions.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            NationalAssumptions.class
        };
    private String _baselinePeriod;
    private String _frequency;
    private String _startPeriod;
    private String _forecastMethodology;
    private String _priceType;
    private String _endPeriod;
    private String _priceBasis;
    private int _naProjMasterSid;
    private String _rollingPeriod;
    private String _baselineMethodology;
    private double _growthRate;
    private NationalAssumptions _escapedModel;

    public NationalAssumptionsModelImpl() {
    }

    @Override
    public NationalAssumptionsPK getPrimaryKey() {
        return new NationalAssumptionsPK(_startPeriod, _priceType, _endPeriod,
            _naProjMasterSid);
    }

    @Override
    public void setPrimaryKey(NationalAssumptionsPK primaryKey) {
        setStartPeriod(primaryKey.startPeriod);
        setPriceType(primaryKey.priceType);
        setEndPeriod(primaryKey.endPeriod);
        setNaProjMasterSid(primaryKey.naProjMasterSid);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new NationalAssumptionsPK(_startPeriod, _priceType, _endPeriod,
            _naProjMasterSid);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((NationalAssumptionsPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return NationalAssumptions.class;
    }

    @Override
    public String getModelClassName() {
        return NationalAssumptions.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("baselinePeriod", getBaselinePeriod());
        attributes.put("frequency", getFrequency());
        attributes.put("startPeriod", getStartPeriod());
        attributes.put("forecastMethodology", getForecastMethodology());
        attributes.put("priceType", getPriceType());
        attributes.put("endPeriod", getEndPeriod());
        attributes.put("priceBasis", getPriceBasis());
        attributes.put("naProjMasterSid", getNaProjMasterSid());
        attributes.put("rollingPeriod", getRollingPeriod());
        attributes.put("baselineMethodology", getBaselineMethodology());
        attributes.put("growthRate", getGrowthRate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String baselinePeriod = (String) attributes.get("baselinePeriod");

        if (baselinePeriod != null) {
            setBaselinePeriod(baselinePeriod);
        }

        String frequency = (String) attributes.get("frequency");

        if (frequency != null) {
            setFrequency(frequency);
        }

        String startPeriod = (String) attributes.get("startPeriod");

        if (startPeriod != null) {
            setStartPeriod(startPeriod);
        }

        String forecastMethodology = (String) attributes.get(
                "forecastMethodology");

        if (forecastMethodology != null) {
            setForecastMethodology(forecastMethodology);
        }

        String priceType = (String) attributes.get("priceType");

        if (priceType != null) {
            setPriceType(priceType);
        }

        String endPeriod = (String) attributes.get("endPeriod");

        if (endPeriod != null) {
            setEndPeriod(endPeriod);
        }

        String priceBasis = (String) attributes.get("priceBasis");

        if (priceBasis != null) {
            setPriceBasis(priceBasis);
        }

        Integer naProjMasterSid = (Integer) attributes.get("naProjMasterSid");

        if (naProjMasterSid != null) {
            setNaProjMasterSid(naProjMasterSid);
        }

        String rollingPeriod = (String) attributes.get("rollingPeriod");

        if (rollingPeriod != null) {
            setRollingPeriod(rollingPeriod);
        }

        String baselineMethodology = (String) attributes.get(
                "baselineMethodology");

        if (baselineMethodology != null) {
            setBaselineMethodology(baselineMethodology);
        }

        Double growthRate = (Double) attributes.get("growthRate");

        if (growthRate != null) {
            setGrowthRate(growthRate);
        }
    }

    @Override
    public String getBaselinePeriod() {
        if (_baselinePeriod == null) {
            return StringPool.BLANK;
        } else {
            return _baselinePeriod;
        }
    }

    @Override
    public void setBaselinePeriod(String baselinePeriod) {
        _baselinePeriod = baselinePeriod;
    }

    @Override
    public String getFrequency() {
        if (_frequency == null) {
            return StringPool.BLANK;
        } else {
            return _frequency;
        }
    }

    @Override
    public void setFrequency(String frequency) {
        _frequency = frequency;
    }

    @Override
    public String getStartPeriod() {
        if (_startPeriod == null) {
            return StringPool.BLANK;
        } else {
            return _startPeriod;
        }
    }

    @Override
    public void setStartPeriod(String startPeriod) {
        _startPeriod = startPeriod;
    }

    @Override
    public String getForecastMethodology() {
        if (_forecastMethodology == null) {
            return StringPool.BLANK;
        } else {
            return _forecastMethodology;
        }
    }

    @Override
    public void setForecastMethodology(String forecastMethodology) {
        _forecastMethodology = forecastMethodology;
    }

    @Override
    public String getPriceType() {
        if (_priceType == null) {
            return StringPool.BLANK;
        } else {
            return _priceType;
        }
    }

    @Override
    public void setPriceType(String priceType) {
        _priceType = priceType;
    }

    @Override
    public String getEndPeriod() {
        if (_endPeriod == null) {
            return StringPool.BLANK;
        } else {
            return _endPeriod;
        }
    }

    @Override
    public void setEndPeriod(String endPeriod) {
        _endPeriod = endPeriod;
    }

    @Override
    public String getPriceBasis() {
        if (_priceBasis == null) {
            return StringPool.BLANK;
        } else {
            return _priceBasis;
        }
    }

    @Override
    public void setPriceBasis(String priceBasis) {
        _priceBasis = priceBasis;
    }

    @Override
    public int getNaProjMasterSid() {
        return _naProjMasterSid;
    }

    @Override
    public void setNaProjMasterSid(int naProjMasterSid) {
        _naProjMasterSid = naProjMasterSid;
    }

    @Override
    public String getRollingPeriod() {
        if (_rollingPeriod == null) {
            return StringPool.BLANK;
        } else {
            return _rollingPeriod;
        }
    }

    @Override
    public void setRollingPeriod(String rollingPeriod) {
        _rollingPeriod = rollingPeriod;
    }

    @Override
    public String getBaselineMethodology() {
        if (_baselineMethodology == null) {
            return StringPool.BLANK;
        } else {
            return _baselineMethodology;
        }
    }

    @Override
    public void setBaselineMethodology(String baselineMethodology) {
        _baselineMethodology = baselineMethodology;
    }

    @Override
    public double getGrowthRate() {
        return _growthRate;
    }

    @Override
    public void setGrowthRate(double growthRate) {
        _growthRate = growthRate;
    }

    @Override
    public NationalAssumptions toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (NationalAssumptions) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NationalAssumptionsImpl nationalAssumptionsImpl = new NationalAssumptionsImpl();

        nationalAssumptionsImpl.setBaselinePeriod(getBaselinePeriod());
        nationalAssumptionsImpl.setFrequency(getFrequency());
        nationalAssumptionsImpl.setStartPeriod(getStartPeriod());
        nationalAssumptionsImpl.setForecastMethodology(getForecastMethodology());
        nationalAssumptionsImpl.setPriceType(getPriceType());
        nationalAssumptionsImpl.setEndPeriod(getEndPeriod());
        nationalAssumptionsImpl.setPriceBasis(getPriceBasis());
        nationalAssumptionsImpl.setNaProjMasterSid(getNaProjMasterSid());
        nationalAssumptionsImpl.setRollingPeriod(getRollingPeriod());
        nationalAssumptionsImpl.setBaselineMethodology(getBaselineMethodology());
        nationalAssumptionsImpl.setGrowthRate(getGrowthRate());

        nationalAssumptionsImpl.resetOriginalValues();

        return nationalAssumptionsImpl;
    }

    @Override
    public int compareTo(NationalAssumptions nationalAssumptions) {
        NationalAssumptionsPK primaryKey = nationalAssumptions.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof NationalAssumptions)) {
            return false;
        }

        NationalAssumptions nationalAssumptions = (NationalAssumptions) obj;

        NationalAssumptionsPK primaryKey = nationalAssumptions.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<NationalAssumptions> toCacheModel() {
        NationalAssumptionsCacheModel nationalAssumptionsCacheModel = new NationalAssumptionsCacheModel();

        nationalAssumptionsCacheModel.baselinePeriod = getBaselinePeriod();

        String baselinePeriod = nationalAssumptionsCacheModel.baselinePeriod;

        if ((baselinePeriod != null) && (baselinePeriod.length() == 0)) {
            nationalAssumptionsCacheModel.baselinePeriod = null;
        }

        nationalAssumptionsCacheModel.frequency = getFrequency();

        String frequency = nationalAssumptionsCacheModel.frequency;

        if ((frequency != null) && (frequency.length() == 0)) {
            nationalAssumptionsCacheModel.frequency = null;
        }

        nationalAssumptionsCacheModel.startPeriod = getStartPeriod();

        String startPeriod = nationalAssumptionsCacheModel.startPeriod;

        if ((startPeriod != null) && (startPeriod.length() == 0)) {
            nationalAssumptionsCacheModel.startPeriod = null;
        }

        nationalAssumptionsCacheModel.forecastMethodology = getForecastMethodology();

        String forecastMethodology = nationalAssumptionsCacheModel.forecastMethodology;

        if ((forecastMethodology != null) &&
                (forecastMethodology.length() == 0)) {
            nationalAssumptionsCacheModel.forecastMethodology = null;
        }

        nationalAssumptionsCacheModel.priceType = getPriceType();

        String priceType = nationalAssumptionsCacheModel.priceType;

        if ((priceType != null) && (priceType.length() == 0)) {
            nationalAssumptionsCacheModel.priceType = null;
        }

        nationalAssumptionsCacheModel.endPeriod = getEndPeriod();

        String endPeriod = nationalAssumptionsCacheModel.endPeriod;

        if ((endPeriod != null) && (endPeriod.length() == 0)) {
            nationalAssumptionsCacheModel.endPeriod = null;
        }

        nationalAssumptionsCacheModel.priceBasis = getPriceBasis();

        String priceBasis = nationalAssumptionsCacheModel.priceBasis;

        if ((priceBasis != null) && (priceBasis.length() == 0)) {
            nationalAssumptionsCacheModel.priceBasis = null;
        }

        nationalAssumptionsCacheModel.naProjMasterSid = getNaProjMasterSid();

        nationalAssumptionsCacheModel.rollingPeriod = getRollingPeriod();

        String rollingPeriod = nationalAssumptionsCacheModel.rollingPeriod;

        if ((rollingPeriod != null) && (rollingPeriod.length() == 0)) {
            nationalAssumptionsCacheModel.rollingPeriod = null;
        }

        nationalAssumptionsCacheModel.baselineMethodology = getBaselineMethodology();

        String baselineMethodology = nationalAssumptionsCacheModel.baselineMethodology;

        if ((baselineMethodology != null) &&
                (baselineMethodology.length() == 0)) {
            nationalAssumptionsCacheModel.baselineMethodology = null;
        }

        nationalAssumptionsCacheModel.growthRate = getGrowthRate();

        return nationalAssumptionsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(23);

        sb.append("{baselinePeriod=");
        sb.append(getBaselinePeriod());
        sb.append(", frequency=");
        sb.append(getFrequency());
        sb.append(", startPeriod=");
        sb.append(getStartPeriod());
        sb.append(", forecastMethodology=");
        sb.append(getForecastMethodology());
        sb.append(", priceType=");
        sb.append(getPriceType());
        sb.append(", endPeriod=");
        sb.append(getEndPeriod());
        sb.append(", priceBasis=");
        sb.append(getPriceBasis());
        sb.append(", naProjMasterSid=");
        sb.append(getNaProjMasterSid());
        sb.append(", rollingPeriod=");
        sb.append(getRollingPeriod());
        sb.append(", baselineMethodology=");
        sb.append(getBaselineMethodology());
        sb.append(", growthRate=");
        sb.append(getGrowthRate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(37);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.NationalAssumptions");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>baselinePeriod</column-name><column-value><![CDATA[");
        sb.append(getBaselinePeriod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>frequency</column-name><column-value><![CDATA[");
        sb.append(getFrequency());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startPeriod</column-name><column-value><![CDATA[");
        sb.append(getStartPeriod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastMethodology</column-name><column-value><![CDATA[");
        sb.append(getForecastMethodology());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceType</column-name><column-value><![CDATA[");
        sb.append(getPriceType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>endPeriod</column-name><column-value><![CDATA[");
        sb.append(getEndPeriod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceBasis</column-name><column-value><![CDATA[");
        sb.append(getPriceBasis());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>naProjMasterSid</column-name><column-value><![CDATA[");
        sb.append(getNaProjMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rollingPeriod</column-name><column-value><![CDATA[");
        sb.append(getRollingPeriod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baselineMethodology</column-name><column-value><![CDATA[");
        sb.append(getBaselineMethodology());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>growthRate</column-name><column-value><![CDATA[");
        sb.append(getGrowthRate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
