package com.stpl.app.parttwo.model.impl;

import com.stpl.app.parttwo.model.VwItemMaster;
import com.stpl.app.parttwo.model.VwItemMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VwItemMaster service. Represents a row in the &quot;VW_ITEM_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.parttwo.model.VwItemMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VwItemMasterImpl}.
 * </p>
 *
 * @author
 * @see VwItemMasterImpl
 * @see com.stpl.app.parttwo.model.VwItemMaster
 * @see com.stpl.app.parttwo.model.VwItemMasterModel
 * @generated
 */
public class VwItemMasterModelImpl extends BaseModelImpl<VwItemMaster>
    implements VwItemMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a vw item master model instance should use the {@link com.stpl.app.parttwo.model.VwItemMaster} interface instead.
     */
    public static final String TABLE_NAME = "VW_ITEM_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "ITEM_STATUS", Types.VARCHAR },
            { "ITEM_DESC", Types.VARCHAR },
            { "ACQUIRED_AMP", Types.VARCHAR },
            { "AUTHORIZED_GENERIC_START_DATE", Types.TIMESTAMP },
            { "NEW_FORMULATION_START_DATE", Types.TIMESTAMP },
            { "MARKET_TERMINATION_DATE", Types.TIMESTAMP },
            { "OBRA_BAMP", Types.VARCHAR },
            { "BRAND", Types.VARCHAR },
            { "MANUFACTURER_NO", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "THERAPEUTIC_CLASS", Types.VARCHAR },
            { "ORGANIZATION_KEY", Types.VARCHAR },
            { "ACQUIRED_BAMP", Types.VARCHAR },
            { "PEDIATRIC_EXCLUSIVE_END_DATE", Types.TIMESTAMP },
            { "SOURCE", Types.VARCHAR },
            { "NEW_FORMULATION", Types.VARCHAR },
            { "ADD_CHG_DEL_INDICATOR", Types.VARCHAR },
            { "DIVESTITURE_DATE", Types.TIMESTAMP },
            { "SHELF_LIFE", Types.VARCHAR },
            { "PRIMARY_UOM", Types.VARCHAR },
            { "NEW_FORMULATION_END_DATE", Types.TIMESTAMP },
            { "MODIFIED_BY", Types.VARCHAR },
            { "PACKAGE_SIZE_CODE", Types.VARCHAR },
            { "SECONDARY_UOM", Types.VARCHAR },
            { "UDC6", Types.VARCHAR },
            { "UDC5", Types.VARCHAR },
            { "DISCONTINUATION_DATE", Types.TIMESTAMP },
            { "UDC4", Types.VARCHAR },
            { "UDC1", Types.VARCHAR },
            { "UDC2", Types.VARCHAR },
            { "PACKAGE_SIZE_INTRO_DATE", Types.TIMESTAMP },
            { "UDC3", Types.VARCHAR },
            { "ITEM_END_DATE", Types.TIMESTAMP },
            { "MANUFACTURER_ID", Types.VARCHAR },
            { "ITEM_FAMILY_ID", Types.VARCHAR },
            { "STRENGTH", Types.VARCHAR },
            { "ITEM_CATEGORY", Types.VARCHAR },
            { "UPPS", Types.DOUBLE },
            { "SHELF_LIFE_TYPE", Types.VARCHAR },
            { "PEDIATRIC_EXCLUSIVE_INDICATOR", Types.VARCHAR },
            { "ITEM_TYPE_INDICATION", Types.VARCHAR },
            { "ACQUISITION_DATE", Types.TIMESTAMP },
            { "CLOTTING_FACTOR_INDICATOR", Types.VARCHAR },
            { "FORM", Types.VARCHAR },
            { "ITEM_NAME", Types.VARCHAR },
            { "MANUFACTURER_NAME", Types.VARCHAR },
            { "PEDIATRIC_EXCLUSIVE_START_DATE", Types.TIMESTAMP },
            { "FIRST_SALE_DATE", Types.TIMESTAMP },
            { "ITEM_MASTER_SID", Types.INTEGER },
            { "ITEM_TYPE", Types.VARCHAR },
            { "ITEM_ID", Types.VARCHAR },
            { "BASELINE_AMP", Types.VARCHAR },
            { "DOSES_PER_UNIT", Types.VARCHAR },
            { "DUAL_PRICING_INDICATOR", Types.VARCHAR },
            { "BASE_CPI", Types.VARCHAR },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "CREATED_BY", Types.VARCHAR },
            { "ITEM_START_DATE", Types.TIMESTAMP },
            { "AUTHORIZED_GENERIC", Types.VARCHAR },
            { "NDC9", Types.VARCHAR },
            { "AUTHORIZED_GENERIC_END_DATE", Types.TIMESTAMP },
            { "ITEM_NO", Types.VARCHAR },
            { "PACKAGE_SIZE", Types.VARCHAR },
            { "NDC8", Types.VARCHAR },
            { "ITEM_CLASS", Types.VARCHAR },
            { "LABELER_CODE", Types.VARCHAR },
            { "DISPLAY_BRAND", Types.VARCHAR },
            { "CLOTTING_FACTOR_END_DATE", Types.TIMESTAMP },
            { "DRA", Types.VARCHAR },
            { "BRAND_ID", Types.VARCHAR },
            { "BASE_CPI_PERIOD", Types.TIMESTAMP },
            { "NEW_FORMULATION_INDICATOR", Types.VARCHAR },
            { "LAST_LOT_EXPIRATION_DATE", Types.TIMESTAMP },
            { "BATCH_ID", Types.VARCHAR },
            { "ITEM_CODE", Types.VARCHAR },
            { "CLOTTING_FACTOR_START_DATE", Types.TIMESTAMP },
            { "NON_FEDERAL_EXPIRATION_DATE", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table VW_ITEM_MASTER (ITEM_STATUS VARCHAR(75) null,ITEM_DESC VARCHAR(75) null,ACQUIRED_AMP VARCHAR(75) null,AUTHORIZED_GENERIC_START_DATE DATE null,NEW_FORMULATION_START_DATE DATE null,MARKET_TERMINATION_DATE DATE null,OBRA_BAMP VARCHAR(75) null,BRAND VARCHAR(75) null,MANUFACTURER_NO VARCHAR(75) null,MODIFIED_DATE DATE null,THERAPEUTIC_CLASS VARCHAR(75) null,ORGANIZATION_KEY VARCHAR(75) null,ACQUIRED_BAMP VARCHAR(75) null,PEDIATRIC_EXCLUSIVE_END_DATE DATE null,SOURCE VARCHAR(75) null,NEW_FORMULATION VARCHAR(75) null,ADD_CHG_DEL_INDICATOR VARCHAR(75) null,DIVESTITURE_DATE DATE null,SHELF_LIFE VARCHAR(75) null,PRIMARY_UOM VARCHAR(75) null,NEW_FORMULATION_END_DATE DATE null,MODIFIED_BY VARCHAR(75) null,PACKAGE_SIZE_CODE VARCHAR(75) null,SECONDARY_UOM VARCHAR(75) null,UDC6 VARCHAR(75) null,UDC5 VARCHAR(75) null,DISCONTINUATION_DATE DATE null,UDC4 VARCHAR(75) null,UDC1 VARCHAR(75) null,UDC2 VARCHAR(75) null,PACKAGE_SIZE_INTRO_DATE DATE null,UDC3 VARCHAR(75) null,ITEM_END_DATE DATE null,MANUFACTURER_ID VARCHAR(75) null,ITEM_FAMILY_ID VARCHAR(75) null,STRENGTH VARCHAR(75) null,ITEM_CATEGORY VARCHAR(75) null,UPPS DOUBLE,SHELF_LIFE_TYPE VARCHAR(75) null,PEDIATRIC_EXCLUSIVE_INDICATOR VARCHAR(75) null,ITEM_TYPE_INDICATION VARCHAR(75) null,ACQUISITION_DATE DATE null,CLOTTING_FACTOR_INDICATOR VARCHAR(75) null,FORM VARCHAR(75) null,ITEM_NAME VARCHAR(75) null,MANUFACTURER_NAME VARCHAR(75) null,PEDIATRIC_EXCLUSIVE_START_DATE DATE null,FIRST_SALE_DATE DATE null,ITEM_MASTER_SID INTEGER not null primary key,ITEM_TYPE VARCHAR(75) null,ITEM_ID VARCHAR(75) null,BASELINE_AMP VARCHAR(75) null,DOSES_PER_UNIT VARCHAR(75) null,DUAL_PRICING_INDICATOR VARCHAR(75) null,BASE_CPI VARCHAR(75) null,CREATED_DATE DATE null,CREATED_BY VARCHAR(75) null,ITEM_START_DATE DATE null,AUTHORIZED_GENERIC VARCHAR(75) null,NDC9 VARCHAR(75) null,AUTHORIZED_GENERIC_END_DATE DATE null,ITEM_NO VARCHAR(75) null,PACKAGE_SIZE VARCHAR(75) null,NDC8 VARCHAR(75) null,ITEM_CLASS VARCHAR(75) null,LABELER_CODE VARCHAR(75) null,DISPLAY_BRAND VARCHAR(75) null,CLOTTING_FACTOR_END_DATE DATE null,DRA VARCHAR(75) null,BRAND_ID VARCHAR(75) null,BASE_CPI_PERIOD DATE null,NEW_FORMULATION_INDICATOR VARCHAR(75) null,LAST_LOT_EXPIRATION_DATE DATE null,BATCH_ID VARCHAR(75) null,ITEM_CODE VARCHAR(75) null,CLOTTING_FACTOR_START_DATE DATE null,NON_FEDERAL_EXPIRATION_DATE DATE null)";
    public static final String TABLE_SQL_DROP = "drop table VW_ITEM_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY vwItemMaster.itemMasterSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY VW_ITEM_MASTER.ITEM_MASTER_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.parttwo.model.VwItemMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.parttwo.model.VwItemMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.parttwo.model.VwItemMaster"));
    private static ClassLoader _classLoader = VwItemMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            VwItemMaster.class
        };
    private String _itemStatus;
    private String _itemDesc;
    private String _acquiredAmp;
    private Date _authorizedGenericStartDate;
    private Date _newFormulationStartDate;
    private Date _marketTerminationDate;
    private String _obraBamp;
    private String _brand;
    private String _manufacturerNo;
    private Date _modifiedDate;
    private String _therapeuticClass;
    private String _organizationKey;
    private String _acquiredBamp;
    private Date _pediatricExclusiveEndDate;
    private String _source;
    private String _newFormulation;
    private String _addChgDelIndicator;
    private Date _divestitureDate;
    private String _shelfLife;
    private String _primaryUom;
    private Date _newFormulationEndDate;
    private String _modifiedBy;
    private String _packageSizeCode;
    private String _secondaryUom;
    private String _udc6;
    private String _udc5;
    private Date _discontinuationDate;
    private String _udc4;
    private String _udc1;
    private String _udc2;
    private Date _packageSizeIntroDate;
    private String _udc3;
    private Date _itemEndDate;
    private String _manufacturerId;
    private String _itemFamilyId;
    private String _strength;
    private String _itemCategory;
    private double _upps;
    private String _shelfLifeType;
    private String _pediatricExclusiveIndicator;
    private String _itemTypeIndication;
    private Date _acquisitionDate;
    private String _clottingFactorIndicator;
    private String _form;
    private String _itemName;
    private String _manufacturerName;
    private Date _pediatricExclusiveStartDate;
    private Date _firstSaleDate;
    private int _itemMasterSid;
    private String _itemType;
    private String _itemId;
    private String _baselineAmp;
    private String _dosesPerUnit;
    private String _dualPricingIndicator;
    private String _baseCpi;
    private Date _createdDate;
    private String _createdBy;
    private Date _itemStartDate;
    private String _authorizedGeneric;
    private String _ndc9;
    private Date _authorizedGenericEndDate;
    private String _itemNo;
    private String _packageSize;
    private String _ndc8;
    private String _itemClass;
    private String _labelerCode;
    private String _displayBrand;
    private Date _clottingFactorEndDate;
    private String _dra;
    private String _brandId;
    private Date _baseCpiPeriod;
    private String _newFormulationIndicator;
    private Date _lastLotExpirationDate;
    private String _batchId;
    private String _itemCode;
    private Date _clottingFactorStartDate;
    private Date _nonFederalExpirationDate;
    private VwItemMaster _escapedModel;

    public VwItemMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _itemMasterSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setItemMasterSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _itemMasterSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return VwItemMaster.class;
    }

    @Override
    public String getModelClassName() {
        return VwItemMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("itemStatus", getItemStatus());
        attributes.put("itemDesc", getItemDesc());
        attributes.put("acquiredAmp", getAcquiredAmp());
        attributes.put("authorizedGenericStartDate",
            getAuthorizedGenericStartDate());
        attributes.put("newFormulationStartDate", getNewFormulationStartDate());
        attributes.put("marketTerminationDate", getMarketTerminationDate());
        attributes.put("obraBamp", getObraBamp());
        attributes.put("brand", getBrand());
        attributes.put("manufacturerNo", getManufacturerNo());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("therapeuticClass", getTherapeuticClass());
        attributes.put("organizationKey", getOrganizationKey());
        attributes.put("acquiredBamp", getAcquiredBamp());
        attributes.put("pediatricExclusiveEndDate",
            getPediatricExclusiveEndDate());
        attributes.put("source", getSource());
        attributes.put("newFormulation", getNewFormulation());
        attributes.put("addChgDelIndicator", getAddChgDelIndicator());
        attributes.put("divestitureDate", getDivestitureDate());
        attributes.put("shelfLife", getShelfLife());
        attributes.put("primaryUom", getPrimaryUom());
        attributes.put("newFormulationEndDate", getNewFormulationEndDate());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("packageSizeCode", getPackageSizeCode());
        attributes.put("secondaryUom", getSecondaryUom());
        attributes.put("udc6", getUdc6());
        attributes.put("udc5", getUdc5());
        attributes.put("discontinuationDate", getDiscontinuationDate());
        attributes.put("udc4", getUdc4());
        attributes.put("udc1", getUdc1());
        attributes.put("udc2", getUdc2());
        attributes.put("packageSizeIntroDate", getPackageSizeIntroDate());
        attributes.put("udc3", getUdc3());
        attributes.put("itemEndDate", getItemEndDate());
        attributes.put("manufacturerId", getManufacturerId());
        attributes.put("itemFamilyId", getItemFamilyId());
        attributes.put("strength", getStrength());
        attributes.put("itemCategory", getItemCategory());
        attributes.put("upps", getUpps());
        attributes.put("shelfLifeType", getShelfLifeType());
        attributes.put("pediatricExclusiveIndicator",
            getPediatricExclusiveIndicator());
        attributes.put("itemTypeIndication", getItemTypeIndication());
        attributes.put("acquisitionDate", getAcquisitionDate());
        attributes.put("clottingFactorIndicator", getClottingFactorIndicator());
        attributes.put("form", getForm());
        attributes.put("itemName", getItemName());
        attributes.put("manufacturerName", getManufacturerName());
        attributes.put("pediatricExclusiveStartDate",
            getPediatricExclusiveStartDate());
        attributes.put("firstSaleDate", getFirstSaleDate());
        attributes.put("itemMasterSid", getItemMasterSid());
        attributes.put("itemType", getItemType());
        attributes.put("itemId", getItemId());
        attributes.put("baselineAmp", getBaselineAmp());
        attributes.put("dosesPerUnit", getDosesPerUnit());
        attributes.put("dualPricingIndicator", getDualPricingIndicator());
        attributes.put("baseCpi", getBaseCpi());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("itemStartDate", getItemStartDate());
        attributes.put("authorizedGeneric", getAuthorizedGeneric());
        attributes.put("ndc9", getNdc9());
        attributes.put("authorizedGenericEndDate", getAuthorizedGenericEndDate());
        attributes.put("itemNo", getItemNo());
        attributes.put("packageSize", getPackageSize());
        attributes.put("ndc8", getNdc8());
        attributes.put("itemClass", getItemClass());
        attributes.put("labelerCode", getLabelerCode());
        attributes.put("displayBrand", getDisplayBrand());
        attributes.put("clottingFactorEndDate", getClottingFactorEndDate());
        attributes.put("dra", getDra());
        attributes.put("brandId", getBrandId());
        attributes.put("baseCpiPeriod", getBaseCpiPeriod());
        attributes.put("newFormulationIndicator", getNewFormulationIndicator());
        attributes.put("lastLotExpirationDate", getLastLotExpirationDate());
        attributes.put("batchId", getBatchId());
        attributes.put("itemCode", getItemCode());
        attributes.put("clottingFactorStartDate", getClottingFactorStartDate());
        attributes.put("nonFederalExpirationDate", getNonFederalExpirationDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String itemStatus = (String) attributes.get("itemStatus");

        if (itemStatus != null) {
            setItemStatus(itemStatus);
        }

        String itemDesc = (String) attributes.get("itemDesc");

        if (itemDesc != null) {
            setItemDesc(itemDesc);
        }

        String acquiredAmp = (String) attributes.get("acquiredAmp");

        if (acquiredAmp != null) {
            setAcquiredAmp(acquiredAmp);
        }

        Date authorizedGenericStartDate = (Date) attributes.get(
                "authorizedGenericStartDate");

        if (authorizedGenericStartDate != null) {
            setAuthorizedGenericStartDate(authorizedGenericStartDate);
        }

        Date newFormulationStartDate = (Date) attributes.get(
                "newFormulationStartDate");

        if (newFormulationStartDate != null) {
            setNewFormulationStartDate(newFormulationStartDate);
        }

        Date marketTerminationDate = (Date) attributes.get(
                "marketTerminationDate");

        if (marketTerminationDate != null) {
            setMarketTerminationDate(marketTerminationDate);
        }

        String obraBamp = (String) attributes.get("obraBamp");

        if (obraBamp != null) {
            setObraBamp(obraBamp);
        }

        String brand = (String) attributes.get("brand");

        if (brand != null) {
            setBrand(brand);
        }

        String manufacturerNo = (String) attributes.get("manufacturerNo");

        if (manufacturerNo != null) {
            setManufacturerNo(manufacturerNo);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String therapeuticClass = (String) attributes.get("therapeuticClass");

        if (therapeuticClass != null) {
            setTherapeuticClass(therapeuticClass);
        }

        String organizationKey = (String) attributes.get("organizationKey");

        if (organizationKey != null) {
            setOrganizationKey(organizationKey);
        }

        String acquiredBamp = (String) attributes.get("acquiredBamp");

        if (acquiredBamp != null) {
            setAcquiredBamp(acquiredBamp);
        }

        Date pediatricExclusiveEndDate = (Date) attributes.get(
                "pediatricExclusiveEndDate");

        if (pediatricExclusiveEndDate != null) {
            setPediatricExclusiveEndDate(pediatricExclusiveEndDate);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String newFormulation = (String) attributes.get("newFormulation");

        if (newFormulation != null) {
            setNewFormulation(newFormulation);
        }

        String addChgDelIndicator = (String) attributes.get(
                "addChgDelIndicator");

        if (addChgDelIndicator != null) {
            setAddChgDelIndicator(addChgDelIndicator);
        }

        Date divestitureDate = (Date) attributes.get("divestitureDate");

        if (divestitureDate != null) {
            setDivestitureDate(divestitureDate);
        }

        String shelfLife = (String) attributes.get("shelfLife");

        if (shelfLife != null) {
            setShelfLife(shelfLife);
        }

        String primaryUom = (String) attributes.get("primaryUom");

        if (primaryUom != null) {
            setPrimaryUom(primaryUom);
        }

        Date newFormulationEndDate = (Date) attributes.get(
                "newFormulationEndDate");

        if (newFormulationEndDate != null) {
            setNewFormulationEndDate(newFormulationEndDate);
        }

        String modifiedBy = (String) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String packageSizeCode = (String) attributes.get("packageSizeCode");

        if (packageSizeCode != null) {
            setPackageSizeCode(packageSizeCode);
        }

        String secondaryUom = (String) attributes.get("secondaryUom");

        if (secondaryUom != null) {
            setSecondaryUom(secondaryUom);
        }

        String udc6 = (String) attributes.get("udc6");

        if (udc6 != null) {
            setUdc6(udc6);
        }

        String udc5 = (String) attributes.get("udc5");

        if (udc5 != null) {
            setUdc5(udc5);
        }

        Date discontinuationDate = (Date) attributes.get("discontinuationDate");

        if (discontinuationDate != null) {
            setDiscontinuationDate(discontinuationDate);
        }

        String udc4 = (String) attributes.get("udc4");

        if (udc4 != null) {
            setUdc4(udc4);
        }

        String udc1 = (String) attributes.get("udc1");

        if (udc1 != null) {
            setUdc1(udc1);
        }

        String udc2 = (String) attributes.get("udc2");

        if (udc2 != null) {
            setUdc2(udc2);
        }

        Date packageSizeIntroDate = (Date) attributes.get(
                "packageSizeIntroDate");

        if (packageSizeIntroDate != null) {
            setPackageSizeIntroDate(packageSizeIntroDate);
        }

        String udc3 = (String) attributes.get("udc3");

        if (udc3 != null) {
            setUdc3(udc3);
        }

        Date itemEndDate = (Date) attributes.get("itemEndDate");

        if (itemEndDate != null) {
            setItemEndDate(itemEndDate);
        }

        String manufacturerId = (String) attributes.get("manufacturerId");

        if (manufacturerId != null) {
            setManufacturerId(manufacturerId);
        }

        String itemFamilyId = (String) attributes.get("itemFamilyId");

        if (itemFamilyId != null) {
            setItemFamilyId(itemFamilyId);
        }

        String strength = (String) attributes.get("strength");

        if (strength != null) {
            setStrength(strength);
        }

        String itemCategory = (String) attributes.get("itemCategory");

        if (itemCategory != null) {
            setItemCategory(itemCategory);
        }

        Double upps = (Double) attributes.get("upps");

        if (upps != null) {
            setUpps(upps);
        }

        String shelfLifeType = (String) attributes.get("shelfLifeType");

        if (shelfLifeType != null) {
            setShelfLifeType(shelfLifeType);
        }

        String pediatricExclusiveIndicator = (String) attributes.get(
                "pediatricExclusiveIndicator");

        if (pediatricExclusiveIndicator != null) {
            setPediatricExclusiveIndicator(pediatricExclusiveIndicator);
        }

        String itemTypeIndication = (String) attributes.get(
                "itemTypeIndication");

        if (itemTypeIndication != null) {
            setItemTypeIndication(itemTypeIndication);
        }

        Date acquisitionDate = (Date) attributes.get("acquisitionDate");

        if (acquisitionDate != null) {
            setAcquisitionDate(acquisitionDate);
        }

        String clottingFactorIndicator = (String) attributes.get(
                "clottingFactorIndicator");

        if (clottingFactorIndicator != null) {
            setClottingFactorIndicator(clottingFactorIndicator);
        }

        String form = (String) attributes.get("form");

        if (form != null) {
            setForm(form);
        }

        String itemName = (String) attributes.get("itemName");

        if (itemName != null) {
            setItemName(itemName);
        }

        String manufacturerName = (String) attributes.get("manufacturerName");

        if (manufacturerName != null) {
            setManufacturerName(manufacturerName);
        }

        Date pediatricExclusiveStartDate = (Date) attributes.get(
                "pediatricExclusiveStartDate");

        if (pediatricExclusiveStartDate != null) {
            setPediatricExclusiveStartDate(pediatricExclusiveStartDate);
        }

        Date firstSaleDate = (Date) attributes.get("firstSaleDate");

        if (firstSaleDate != null) {
            setFirstSaleDate(firstSaleDate);
        }

        Integer itemMasterSid = (Integer) attributes.get("itemMasterSid");

        if (itemMasterSid != null) {
            setItemMasterSid(itemMasterSid);
        }

        String itemType = (String) attributes.get("itemType");

        if (itemType != null) {
            setItemType(itemType);
        }

        String itemId = (String) attributes.get("itemId");

        if (itemId != null) {
            setItemId(itemId);
        }

        String baselineAmp = (String) attributes.get("baselineAmp");

        if (baselineAmp != null) {
            setBaselineAmp(baselineAmp);
        }

        String dosesPerUnit = (String) attributes.get("dosesPerUnit");

        if (dosesPerUnit != null) {
            setDosesPerUnit(dosesPerUnit);
        }

        String dualPricingIndicator = (String) attributes.get(
                "dualPricingIndicator");

        if (dualPricingIndicator != null) {
            setDualPricingIndicator(dualPricingIndicator);
        }

        String baseCpi = (String) attributes.get("baseCpi");

        if (baseCpi != null) {
            setBaseCpi(baseCpi);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String createdBy = (String) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Date itemStartDate = (Date) attributes.get("itemStartDate");

        if (itemStartDate != null) {
            setItemStartDate(itemStartDate);
        }

        String authorizedGeneric = (String) attributes.get("authorizedGeneric");

        if (authorizedGeneric != null) {
            setAuthorizedGeneric(authorizedGeneric);
        }

        String ndc9 = (String) attributes.get("ndc9");

        if (ndc9 != null) {
            setNdc9(ndc9);
        }

        Date authorizedGenericEndDate = (Date) attributes.get(
                "authorizedGenericEndDate");

        if (authorizedGenericEndDate != null) {
            setAuthorizedGenericEndDate(authorizedGenericEndDate);
        }

        String itemNo = (String) attributes.get("itemNo");

        if (itemNo != null) {
            setItemNo(itemNo);
        }

        String packageSize = (String) attributes.get("packageSize");

        if (packageSize != null) {
            setPackageSize(packageSize);
        }

        String ndc8 = (String) attributes.get("ndc8");

        if (ndc8 != null) {
            setNdc8(ndc8);
        }

        String itemClass = (String) attributes.get("itemClass");

        if (itemClass != null) {
            setItemClass(itemClass);
        }

        String labelerCode = (String) attributes.get("labelerCode");

        if (labelerCode != null) {
            setLabelerCode(labelerCode);
        }

        String displayBrand = (String) attributes.get("displayBrand");

        if (displayBrand != null) {
            setDisplayBrand(displayBrand);
        }

        Date clottingFactorEndDate = (Date) attributes.get(
                "clottingFactorEndDate");

        if (clottingFactorEndDate != null) {
            setClottingFactorEndDate(clottingFactorEndDate);
        }

        String dra = (String) attributes.get("dra");

        if (dra != null) {
            setDra(dra);
        }

        String brandId = (String) attributes.get("brandId");

        if (brandId != null) {
            setBrandId(brandId);
        }

        Date baseCpiPeriod = (Date) attributes.get("baseCpiPeriod");

        if (baseCpiPeriod != null) {
            setBaseCpiPeriod(baseCpiPeriod);
        }

        String newFormulationIndicator = (String) attributes.get(
                "newFormulationIndicator");

        if (newFormulationIndicator != null) {
            setNewFormulationIndicator(newFormulationIndicator);
        }

        Date lastLotExpirationDate = (Date) attributes.get(
                "lastLotExpirationDate");

        if (lastLotExpirationDate != null) {
            setLastLotExpirationDate(lastLotExpirationDate);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        String itemCode = (String) attributes.get("itemCode");

        if (itemCode != null) {
            setItemCode(itemCode);
        }

        Date clottingFactorStartDate = (Date) attributes.get(
                "clottingFactorStartDate");

        if (clottingFactorStartDate != null) {
            setClottingFactorStartDate(clottingFactorStartDate);
        }

        Date nonFederalExpirationDate = (Date) attributes.get(
                "nonFederalExpirationDate");

        if (nonFederalExpirationDate != null) {
            setNonFederalExpirationDate(nonFederalExpirationDate);
        }
    }

    @Override
    public String getItemStatus() {
        if (_itemStatus == null) {
            return StringPool.BLANK;
        } else {
            return _itemStatus;
        }
    }

    @Override
    public void setItemStatus(String itemStatus) {
        _itemStatus = itemStatus;
    }

    @Override
    public String getItemDesc() {
        if (_itemDesc == null) {
            return StringPool.BLANK;
        } else {
            return _itemDesc;
        }
    }

    @Override
    public void setItemDesc(String itemDesc) {
        _itemDesc = itemDesc;
    }

    @Override
    public String getAcquiredAmp() {
        if (_acquiredAmp == null) {
            return StringPool.BLANK;
        } else {
            return _acquiredAmp;
        }
    }

    @Override
    public void setAcquiredAmp(String acquiredAmp) {
        _acquiredAmp = acquiredAmp;
    }

    @Override
    public Date getAuthorizedGenericStartDate() {
        return _authorizedGenericStartDate;
    }

    @Override
    public void setAuthorizedGenericStartDate(Date authorizedGenericStartDate) {
        _authorizedGenericStartDate = authorizedGenericStartDate;
    }

    @Override
    public Date getNewFormulationStartDate() {
        return _newFormulationStartDate;
    }

    @Override
    public void setNewFormulationStartDate(Date newFormulationStartDate) {
        _newFormulationStartDate = newFormulationStartDate;
    }

    @Override
    public Date getMarketTerminationDate() {
        return _marketTerminationDate;
    }

    @Override
    public void setMarketTerminationDate(Date marketTerminationDate) {
        _marketTerminationDate = marketTerminationDate;
    }

    @Override
    public String getObraBamp() {
        if (_obraBamp == null) {
            return StringPool.BLANK;
        } else {
            return _obraBamp;
        }
    }

    @Override
    public void setObraBamp(String obraBamp) {
        _obraBamp = obraBamp;
    }

    @Override
    public String getBrand() {
        if (_brand == null) {
            return StringPool.BLANK;
        } else {
            return _brand;
        }
    }

    @Override
    public void setBrand(String brand) {
        _brand = brand;
    }

    @Override
    public String getManufacturerNo() {
        if (_manufacturerNo == null) {
            return StringPool.BLANK;
        } else {
            return _manufacturerNo;
        }
    }

    @Override
    public void setManufacturerNo(String manufacturerNo) {
        _manufacturerNo = manufacturerNo;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getTherapeuticClass() {
        if (_therapeuticClass == null) {
            return StringPool.BLANK;
        } else {
            return _therapeuticClass;
        }
    }

    @Override
    public void setTherapeuticClass(String therapeuticClass) {
        _therapeuticClass = therapeuticClass;
    }

    @Override
    public String getOrganizationKey() {
        if (_organizationKey == null) {
            return StringPool.BLANK;
        } else {
            return _organizationKey;
        }
    }

    @Override
    public void setOrganizationKey(String organizationKey) {
        _organizationKey = organizationKey;
    }

    @Override
    public String getAcquiredBamp() {
        if (_acquiredBamp == null) {
            return StringPool.BLANK;
        } else {
            return _acquiredBamp;
        }
    }

    @Override
    public void setAcquiredBamp(String acquiredBamp) {
        _acquiredBamp = acquiredBamp;
    }

    @Override
    public Date getPediatricExclusiveEndDate() {
        return _pediatricExclusiveEndDate;
    }

    @Override
    public void setPediatricExclusiveEndDate(Date pediatricExclusiveEndDate) {
        _pediatricExclusiveEndDate = pediatricExclusiveEndDate;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getNewFormulation() {
        if (_newFormulation == null) {
            return StringPool.BLANK;
        } else {
            return _newFormulation;
        }
    }

    @Override
    public void setNewFormulation(String newFormulation) {
        _newFormulation = newFormulation;
    }

    @Override
    public String getAddChgDelIndicator() {
        if (_addChgDelIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _addChgDelIndicator;
        }
    }

    @Override
    public void setAddChgDelIndicator(String addChgDelIndicator) {
        _addChgDelIndicator = addChgDelIndicator;
    }

    @Override
    public Date getDivestitureDate() {
        return _divestitureDate;
    }

    @Override
    public void setDivestitureDate(Date divestitureDate) {
        _divestitureDate = divestitureDate;
    }

    @Override
    public String getShelfLife() {
        if (_shelfLife == null) {
            return StringPool.BLANK;
        } else {
            return _shelfLife;
        }
    }

    @Override
    public void setShelfLife(String shelfLife) {
        _shelfLife = shelfLife;
    }

    @Override
    public String getPrimaryUom() {
        if (_primaryUom == null) {
            return StringPool.BLANK;
        } else {
            return _primaryUom;
        }
    }

    @Override
    public void setPrimaryUom(String primaryUom) {
        _primaryUom = primaryUom;
    }

    @Override
    public Date getNewFormulationEndDate() {
        return _newFormulationEndDate;
    }

    @Override
    public void setNewFormulationEndDate(Date newFormulationEndDate) {
        _newFormulationEndDate = newFormulationEndDate;
    }

    @Override
    public String getModifiedBy() {
        if (_modifiedBy == null) {
            return StringPool.BLANK;
        } else {
            return _modifiedBy;
        }
    }

    @Override
    public void setModifiedBy(String modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getPackageSizeCode() {
        if (_packageSizeCode == null) {
            return StringPool.BLANK;
        } else {
            return _packageSizeCode;
        }
    }

    @Override
    public void setPackageSizeCode(String packageSizeCode) {
        _packageSizeCode = packageSizeCode;
    }

    @Override
    public String getSecondaryUom() {
        if (_secondaryUom == null) {
            return StringPool.BLANK;
        } else {
            return _secondaryUom;
        }
    }

    @Override
    public void setSecondaryUom(String secondaryUom) {
        _secondaryUom = secondaryUom;
    }

    @Override
    public String getUdc6() {
        if (_udc6 == null) {
            return StringPool.BLANK;
        } else {
            return _udc6;
        }
    }

    @Override
    public void setUdc6(String udc6) {
        _udc6 = udc6;
    }

    @Override
    public String getUdc5() {
        if (_udc5 == null) {
            return StringPool.BLANK;
        } else {
            return _udc5;
        }
    }

    @Override
    public void setUdc5(String udc5) {
        _udc5 = udc5;
    }

    @Override
    public Date getDiscontinuationDate() {
        return _discontinuationDate;
    }

    @Override
    public void setDiscontinuationDate(Date discontinuationDate) {
        _discontinuationDate = discontinuationDate;
    }

    @Override
    public String getUdc4() {
        if (_udc4 == null) {
            return StringPool.BLANK;
        } else {
            return _udc4;
        }
    }

    @Override
    public void setUdc4(String udc4) {
        _udc4 = udc4;
    }

    @Override
    public String getUdc1() {
        if (_udc1 == null) {
            return StringPool.BLANK;
        } else {
            return _udc1;
        }
    }

    @Override
    public void setUdc1(String udc1) {
        _udc1 = udc1;
    }

    @Override
    public String getUdc2() {
        if (_udc2 == null) {
            return StringPool.BLANK;
        } else {
            return _udc2;
        }
    }

    @Override
    public void setUdc2(String udc2) {
        _udc2 = udc2;
    }

    @Override
    public Date getPackageSizeIntroDate() {
        return _packageSizeIntroDate;
    }

    @Override
    public void setPackageSizeIntroDate(Date packageSizeIntroDate) {
        _packageSizeIntroDate = packageSizeIntroDate;
    }

    @Override
    public String getUdc3() {
        if (_udc3 == null) {
            return StringPool.BLANK;
        } else {
            return _udc3;
        }
    }

    @Override
    public void setUdc3(String udc3) {
        _udc3 = udc3;
    }

    @Override
    public Date getItemEndDate() {
        return _itemEndDate;
    }

    @Override
    public void setItemEndDate(Date itemEndDate) {
        _itemEndDate = itemEndDate;
    }

    @Override
    public String getManufacturerId() {
        if (_manufacturerId == null) {
            return StringPool.BLANK;
        } else {
            return _manufacturerId;
        }
    }

    @Override
    public void setManufacturerId(String manufacturerId) {
        _manufacturerId = manufacturerId;
    }

    @Override
    public String getItemFamilyId() {
        if (_itemFamilyId == null) {
            return StringPool.BLANK;
        } else {
            return _itemFamilyId;
        }
    }

    @Override
    public void setItemFamilyId(String itemFamilyId) {
        _itemFamilyId = itemFamilyId;
    }

    @Override
    public String getStrength() {
        if (_strength == null) {
            return StringPool.BLANK;
        } else {
            return _strength;
        }
    }

    @Override
    public void setStrength(String strength) {
        _strength = strength;
    }

    @Override
    public String getItemCategory() {
        if (_itemCategory == null) {
            return StringPool.BLANK;
        } else {
            return _itemCategory;
        }
    }

    @Override
    public void setItemCategory(String itemCategory) {
        _itemCategory = itemCategory;
    }

    @Override
    public double getUpps() {
        return _upps;
    }

    @Override
    public void setUpps(double upps) {
        _upps = upps;
    }

    @Override
    public String getShelfLifeType() {
        if (_shelfLifeType == null) {
            return StringPool.BLANK;
        } else {
            return _shelfLifeType;
        }
    }

    @Override
    public void setShelfLifeType(String shelfLifeType) {
        _shelfLifeType = shelfLifeType;
    }

    @Override
    public String getPediatricExclusiveIndicator() {
        if (_pediatricExclusiveIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _pediatricExclusiveIndicator;
        }
    }

    @Override
    public void setPediatricExclusiveIndicator(
        String pediatricExclusiveIndicator) {
        _pediatricExclusiveIndicator = pediatricExclusiveIndicator;
    }

    @Override
    public String getItemTypeIndication() {
        if (_itemTypeIndication == null) {
            return StringPool.BLANK;
        } else {
            return _itemTypeIndication;
        }
    }

    @Override
    public void setItemTypeIndication(String itemTypeIndication) {
        _itemTypeIndication = itemTypeIndication;
    }

    @Override
    public Date getAcquisitionDate() {
        return _acquisitionDate;
    }

    @Override
    public void setAcquisitionDate(Date acquisitionDate) {
        _acquisitionDate = acquisitionDate;
    }

    @Override
    public String getClottingFactorIndicator() {
        if (_clottingFactorIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _clottingFactorIndicator;
        }
    }

    @Override
    public void setClottingFactorIndicator(String clottingFactorIndicator) {
        _clottingFactorIndicator = clottingFactorIndicator;
    }

    @Override
    public String getForm() {
        if (_form == null) {
            return StringPool.BLANK;
        } else {
            return _form;
        }
    }

    @Override
    public void setForm(String form) {
        _form = form;
    }

    @Override
    public String getItemName() {
        if (_itemName == null) {
            return StringPool.BLANK;
        } else {
            return _itemName;
        }
    }

    @Override
    public void setItemName(String itemName) {
        _itemName = itemName;
    }

    @Override
    public String getManufacturerName() {
        if (_manufacturerName == null) {
            return StringPool.BLANK;
        } else {
            return _manufacturerName;
        }
    }

    @Override
    public void setManufacturerName(String manufacturerName) {
        _manufacturerName = manufacturerName;
    }

    @Override
    public Date getPediatricExclusiveStartDate() {
        return _pediatricExclusiveStartDate;
    }

    @Override
    public void setPediatricExclusiveStartDate(Date pediatricExclusiveStartDate) {
        _pediatricExclusiveStartDate = pediatricExclusiveStartDate;
    }

    @Override
    public Date getFirstSaleDate() {
        return _firstSaleDate;
    }

    @Override
    public void setFirstSaleDate(Date firstSaleDate) {
        _firstSaleDate = firstSaleDate;
    }

    @Override
    public int getItemMasterSid() {
        return _itemMasterSid;
    }

    @Override
    public void setItemMasterSid(int itemMasterSid) {
        _itemMasterSid = itemMasterSid;
    }

    @Override
    public String getItemType() {
        if (_itemType == null) {
            return StringPool.BLANK;
        } else {
            return _itemType;
        }
    }

    @Override
    public void setItemType(String itemType) {
        _itemType = itemType;
    }

    @Override
    public String getItemId() {
        if (_itemId == null) {
            return StringPool.BLANK;
        } else {
            return _itemId;
        }
    }

    @Override
    public void setItemId(String itemId) {
        _itemId = itemId;
    }

    @Override
    public String getBaselineAmp() {
        if (_baselineAmp == null) {
            return StringPool.BLANK;
        } else {
            return _baselineAmp;
        }
    }

    @Override
    public void setBaselineAmp(String baselineAmp) {
        _baselineAmp = baselineAmp;
    }

    @Override
    public String getDosesPerUnit() {
        if (_dosesPerUnit == null) {
            return StringPool.BLANK;
        } else {
            return _dosesPerUnit;
        }
    }

    @Override
    public void setDosesPerUnit(String dosesPerUnit) {
        _dosesPerUnit = dosesPerUnit;
    }

    @Override
    public String getDualPricingIndicator() {
        if (_dualPricingIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _dualPricingIndicator;
        }
    }

    @Override
    public void setDualPricingIndicator(String dualPricingIndicator) {
        _dualPricingIndicator = dualPricingIndicator;
    }

    @Override
    public String getBaseCpi() {
        if (_baseCpi == null) {
            return StringPool.BLANK;
        } else {
            return _baseCpi;
        }
    }

    @Override
    public void setBaseCpi(String baseCpi) {
        _baseCpi = baseCpi;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getCreatedBy() {
        if (_createdBy == null) {
            return StringPool.BLANK;
        } else {
            return _createdBy;
        }
    }

    @Override
    public void setCreatedBy(String createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public Date getItemStartDate() {
        return _itemStartDate;
    }

    @Override
    public void setItemStartDate(Date itemStartDate) {
        _itemStartDate = itemStartDate;
    }

    @Override
    public String getAuthorizedGeneric() {
        if (_authorizedGeneric == null) {
            return StringPool.BLANK;
        } else {
            return _authorizedGeneric;
        }
    }

    @Override
    public void setAuthorizedGeneric(String authorizedGeneric) {
        _authorizedGeneric = authorizedGeneric;
    }

    @Override
    public String getNdc9() {
        if (_ndc9 == null) {
            return StringPool.BLANK;
        } else {
            return _ndc9;
        }
    }

    @Override
    public void setNdc9(String ndc9) {
        _ndc9 = ndc9;
    }

    @Override
    public Date getAuthorizedGenericEndDate() {
        return _authorizedGenericEndDate;
    }

    @Override
    public void setAuthorizedGenericEndDate(Date authorizedGenericEndDate) {
        _authorizedGenericEndDate = authorizedGenericEndDate;
    }

    @Override
    public String getItemNo() {
        if (_itemNo == null) {
            return StringPool.BLANK;
        } else {
            return _itemNo;
        }
    }

    @Override
    public void setItemNo(String itemNo) {
        _itemNo = itemNo;
    }

    @Override
    public String getPackageSize() {
        if (_packageSize == null) {
            return StringPool.BLANK;
        } else {
            return _packageSize;
        }
    }

    @Override
    public void setPackageSize(String packageSize) {
        _packageSize = packageSize;
    }

    @Override
    public String getNdc8() {
        if (_ndc8 == null) {
            return StringPool.BLANK;
        } else {
            return _ndc8;
        }
    }

    @Override
    public void setNdc8(String ndc8) {
        _ndc8 = ndc8;
    }

    @Override
    public String getItemClass() {
        if (_itemClass == null) {
            return StringPool.BLANK;
        } else {
            return _itemClass;
        }
    }

    @Override
    public void setItemClass(String itemClass) {
        _itemClass = itemClass;
    }

    @Override
    public String getLabelerCode() {
        if (_labelerCode == null) {
            return StringPool.BLANK;
        } else {
            return _labelerCode;
        }
    }

    @Override
    public void setLabelerCode(String labelerCode) {
        _labelerCode = labelerCode;
    }

    @Override
    public String getDisplayBrand() {
        if (_displayBrand == null) {
            return StringPool.BLANK;
        } else {
            return _displayBrand;
        }
    }

    @Override
    public void setDisplayBrand(String displayBrand) {
        _displayBrand = displayBrand;
    }

    @Override
    public Date getClottingFactorEndDate() {
        return _clottingFactorEndDate;
    }

    @Override
    public void setClottingFactorEndDate(Date clottingFactorEndDate) {
        _clottingFactorEndDate = clottingFactorEndDate;
    }

    @Override
    public String getDra() {
        if (_dra == null) {
            return StringPool.BLANK;
        } else {
            return _dra;
        }
    }

    @Override
    public void setDra(String dra) {
        _dra = dra;
    }

    @Override
    public String getBrandId() {
        if (_brandId == null) {
            return StringPool.BLANK;
        } else {
            return _brandId;
        }
    }

    @Override
    public void setBrandId(String brandId) {
        _brandId = brandId;
    }

    @Override
    public Date getBaseCpiPeriod() {
        return _baseCpiPeriod;
    }

    @Override
    public void setBaseCpiPeriod(Date baseCpiPeriod) {
        _baseCpiPeriod = baseCpiPeriod;
    }

    @Override
    public String getNewFormulationIndicator() {
        if (_newFormulationIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _newFormulationIndicator;
        }
    }

    @Override
    public void setNewFormulationIndicator(String newFormulationIndicator) {
        _newFormulationIndicator = newFormulationIndicator;
    }

    @Override
    public Date getLastLotExpirationDate() {
        return _lastLotExpirationDate;
    }

    @Override
    public void setLastLotExpirationDate(Date lastLotExpirationDate) {
        _lastLotExpirationDate = lastLotExpirationDate;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public String getItemCode() {
        if (_itemCode == null) {
            return StringPool.BLANK;
        } else {
            return _itemCode;
        }
    }

    @Override
    public void setItemCode(String itemCode) {
        _itemCode = itemCode;
    }

    @Override
    public Date getClottingFactorStartDate() {
        return _clottingFactorStartDate;
    }

    @Override
    public void setClottingFactorStartDate(Date clottingFactorStartDate) {
        _clottingFactorStartDate = clottingFactorStartDate;
    }

    @Override
    public Date getNonFederalExpirationDate() {
        return _nonFederalExpirationDate;
    }

    @Override
    public void setNonFederalExpirationDate(Date nonFederalExpirationDate) {
        _nonFederalExpirationDate = nonFederalExpirationDate;
    }

    @Override
    public VwItemMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (VwItemMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        VwItemMasterImpl vwItemMasterImpl = new VwItemMasterImpl();

        vwItemMasterImpl.setItemStatus(getItemStatus());
        vwItemMasterImpl.setItemDesc(getItemDesc());
        vwItemMasterImpl.setAcquiredAmp(getAcquiredAmp());
        vwItemMasterImpl.setAuthorizedGenericStartDate(getAuthorizedGenericStartDate());
        vwItemMasterImpl.setNewFormulationStartDate(getNewFormulationStartDate());
        vwItemMasterImpl.setMarketTerminationDate(getMarketTerminationDate());
        vwItemMasterImpl.setObraBamp(getObraBamp());
        vwItemMasterImpl.setBrand(getBrand());
        vwItemMasterImpl.setManufacturerNo(getManufacturerNo());
        vwItemMasterImpl.setModifiedDate(getModifiedDate());
        vwItemMasterImpl.setTherapeuticClass(getTherapeuticClass());
        vwItemMasterImpl.setOrganizationKey(getOrganizationKey());
        vwItemMasterImpl.setAcquiredBamp(getAcquiredBamp());
        vwItemMasterImpl.setPediatricExclusiveEndDate(getPediatricExclusiveEndDate());
        vwItemMasterImpl.setSource(getSource());
        vwItemMasterImpl.setNewFormulation(getNewFormulation());
        vwItemMasterImpl.setAddChgDelIndicator(getAddChgDelIndicator());
        vwItemMasterImpl.setDivestitureDate(getDivestitureDate());
        vwItemMasterImpl.setShelfLife(getShelfLife());
        vwItemMasterImpl.setPrimaryUom(getPrimaryUom());
        vwItemMasterImpl.setNewFormulationEndDate(getNewFormulationEndDate());
        vwItemMasterImpl.setModifiedBy(getModifiedBy());
        vwItemMasterImpl.setPackageSizeCode(getPackageSizeCode());
        vwItemMasterImpl.setSecondaryUom(getSecondaryUom());
        vwItemMasterImpl.setUdc6(getUdc6());
        vwItemMasterImpl.setUdc5(getUdc5());
        vwItemMasterImpl.setDiscontinuationDate(getDiscontinuationDate());
        vwItemMasterImpl.setUdc4(getUdc4());
        vwItemMasterImpl.setUdc1(getUdc1());
        vwItemMasterImpl.setUdc2(getUdc2());
        vwItemMasterImpl.setPackageSizeIntroDate(getPackageSizeIntroDate());
        vwItemMasterImpl.setUdc3(getUdc3());
        vwItemMasterImpl.setItemEndDate(getItemEndDate());
        vwItemMasterImpl.setManufacturerId(getManufacturerId());
        vwItemMasterImpl.setItemFamilyId(getItemFamilyId());
        vwItemMasterImpl.setStrength(getStrength());
        vwItemMasterImpl.setItemCategory(getItemCategory());
        vwItemMasterImpl.setUpps(getUpps());
        vwItemMasterImpl.setShelfLifeType(getShelfLifeType());
        vwItemMasterImpl.setPediatricExclusiveIndicator(getPediatricExclusiveIndicator());
        vwItemMasterImpl.setItemTypeIndication(getItemTypeIndication());
        vwItemMasterImpl.setAcquisitionDate(getAcquisitionDate());
        vwItemMasterImpl.setClottingFactorIndicator(getClottingFactorIndicator());
        vwItemMasterImpl.setForm(getForm());
        vwItemMasterImpl.setItemName(getItemName());
        vwItemMasterImpl.setManufacturerName(getManufacturerName());
        vwItemMasterImpl.setPediatricExclusiveStartDate(getPediatricExclusiveStartDate());
        vwItemMasterImpl.setFirstSaleDate(getFirstSaleDate());
        vwItemMasterImpl.setItemMasterSid(getItemMasterSid());
        vwItemMasterImpl.setItemType(getItemType());
        vwItemMasterImpl.setItemId(getItemId());
        vwItemMasterImpl.setBaselineAmp(getBaselineAmp());
        vwItemMasterImpl.setDosesPerUnit(getDosesPerUnit());
        vwItemMasterImpl.setDualPricingIndicator(getDualPricingIndicator());
        vwItemMasterImpl.setBaseCpi(getBaseCpi());
        vwItemMasterImpl.setCreatedDate(getCreatedDate());
        vwItemMasterImpl.setCreatedBy(getCreatedBy());
        vwItemMasterImpl.setItemStartDate(getItemStartDate());
        vwItemMasterImpl.setAuthorizedGeneric(getAuthorizedGeneric());
        vwItemMasterImpl.setNdc9(getNdc9());
        vwItemMasterImpl.setAuthorizedGenericEndDate(getAuthorizedGenericEndDate());
        vwItemMasterImpl.setItemNo(getItemNo());
        vwItemMasterImpl.setPackageSize(getPackageSize());
        vwItemMasterImpl.setNdc8(getNdc8());
        vwItemMasterImpl.setItemClass(getItemClass());
        vwItemMasterImpl.setLabelerCode(getLabelerCode());
        vwItemMasterImpl.setDisplayBrand(getDisplayBrand());
        vwItemMasterImpl.setClottingFactorEndDate(getClottingFactorEndDate());
        vwItemMasterImpl.setDra(getDra());
        vwItemMasterImpl.setBrandId(getBrandId());
        vwItemMasterImpl.setBaseCpiPeriod(getBaseCpiPeriod());
        vwItemMasterImpl.setNewFormulationIndicator(getNewFormulationIndicator());
        vwItemMasterImpl.setLastLotExpirationDate(getLastLotExpirationDate());
        vwItemMasterImpl.setBatchId(getBatchId());
        vwItemMasterImpl.setItemCode(getItemCode());
        vwItemMasterImpl.setClottingFactorStartDate(getClottingFactorStartDate());
        vwItemMasterImpl.setNonFederalExpirationDate(getNonFederalExpirationDate());

        vwItemMasterImpl.resetOriginalValues();

        return vwItemMasterImpl;
    }

    @Override
    public int compareTo(VwItemMaster vwItemMaster) {
        int primaryKey = vwItemMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof VwItemMaster)) {
            return false;
        }

        VwItemMaster vwItemMaster = (VwItemMaster) obj;

        int primaryKey = vwItemMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<VwItemMaster> toCacheModel() {
        VwItemMasterCacheModel vwItemMasterCacheModel = new VwItemMasterCacheModel();

        vwItemMasterCacheModel.itemStatus = getItemStatus();

        String itemStatus = vwItemMasterCacheModel.itemStatus;

        if ((itemStatus != null) && (itemStatus.length() == 0)) {
            vwItemMasterCacheModel.itemStatus = null;
        }

        vwItemMasterCacheModel.itemDesc = getItemDesc();

        String itemDesc = vwItemMasterCacheModel.itemDesc;

        if ((itemDesc != null) && (itemDesc.length() == 0)) {
            vwItemMasterCacheModel.itemDesc = null;
        }

        vwItemMasterCacheModel.acquiredAmp = getAcquiredAmp();

        String acquiredAmp = vwItemMasterCacheModel.acquiredAmp;

        if ((acquiredAmp != null) && (acquiredAmp.length() == 0)) {
            vwItemMasterCacheModel.acquiredAmp = null;
        }

        Date authorizedGenericStartDate = getAuthorizedGenericStartDate();

        if (authorizedGenericStartDate != null) {
            vwItemMasterCacheModel.authorizedGenericStartDate = authorizedGenericStartDate.getTime();
        } else {
            vwItemMasterCacheModel.authorizedGenericStartDate = Long.MIN_VALUE;
        }

        Date newFormulationStartDate = getNewFormulationStartDate();

        if (newFormulationStartDate != null) {
            vwItemMasterCacheModel.newFormulationStartDate = newFormulationStartDate.getTime();
        } else {
            vwItemMasterCacheModel.newFormulationStartDate = Long.MIN_VALUE;
        }

        Date marketTerminationDate = getMarketTerminationDate();

        if (marketTerminationDate != null) {
            vwItemMasterCacheModel.marketTerminationDate = marketTerminationDate.getTime();
        } else {
            vwItemMasterCacheModel.marketTerminationDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.obraBamp = getObraBamp();

        String obraBamp = vwItemMasterCacheModel.obraBamp;

        if ((obraBamp != null) && (obraBamp.length() == 0)) {
            vwItemMasterCacheModel.obraBamp = null;
        }

        vwItemMasterCacheModel.brand = getBrand();

        String brand = vwItemMasterCacheModel.brand;

        if ((brand != null) && (brand.length() == 0)) {
            vwItemMasterCacheModel.brand = null;
        }

        vwItemMasterCacheModel.manufacturerNo = getManufacturerNo();

        String manufacturerNo = vwItemMasterCacheModel.manufacturerNo;

        if ((manufacturerNo != null) && (manufacturerNo.length() == 0)) {
            vwItemMasterCacheModel.manufacturerNo = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            vwItemMasterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            vwItemMasterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.therapeuticClass = getTherapeuticClass();

        String therapeuticClass = vwItemMasterCacheModel.therapeuticClass;

        if ((therapeuticClass != null) && (therapeuticClass.length() == 0)) {
            vwItemMasterCacheModel.therapeuticClass = null;
        }

        vwItemMasterCacheModel.organizationKey = getOrganizationKey();

        String organizationKey = vwItemMasterCacheModel.organizationKey;

        if ((organizationKey != null) && (organizationKey.length() == 0)) {
            vwItemMasterCacheModel.organizationKey = null;
        }

        vwItemMasterCacheModel.acquiredBamp = getAcquiredBamp();

        String acquiredBamp = vwItemMasterCacheModel.acquiredBamp;

        if ((acquiredBamp != null) && (acquiredBamp.length() == 0)) {
            vwItemMasterCacheModel.acquiredBamp = null;
        }

        Date pediatricExclusiveEndDate = getPediatricExclusiveEndDate();

        if (pediatricExclusiveEndDate != null) {
            vwItemMasterCacheModel.pediatricExclusiveEndDate = pediatricExclusiveEndDate.getTime();
        } else {
            vwItemMasterCacheModel.pediatricExclusiveEndDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.source = getSource();

        String source = vwItemMasterCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            vwItemMasterCacheModel.source = null;
        }

        vwItemMasterCacheModel.newFormulation = getNewFormulation();

        String newFormulation = vwItemMasterCacheModel.newFormulation;

        if ((newFormulation != null) && (newFormulation.length() == 0)) {
            vwItemMasterCacheModel.newFormulation = null;
        }

        vwItemMasterCacheModel.addChgDelIndicator = getAddChgDelIndicator();

        String addChgDelIndicator = vwItemMasterCacheModel.addChgDelIndicator;

        if ((addChgDelIndicator != null) && (addChgDelIndicator.length() == 0)) {
            vwItemMasterCacheModel.addChgDelIndicator = null;
        }

        Date divestitureDate = getDivestitureDate();

        if (divestitureDate != null) {
            vwItemMasterCacheModel.divestitureDate = divestitureDate.getTime();
        } else {
            vwItemMasterCacheModel.divestitureDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.shelfLife = getShelfLife();

        String shelfLife = vwItemMasterCacheModel.shelfLife;

        if ((shelfLife != null) && (shelfLife.length() == 0)) {
            vwItemMasterCacheModel.shelfLife = null;
        }

        vwItemMasterCacheModel.primaryUom = getPrimaryUom();

        String primaryUom = vwItemMasterCacheModel.primaryUom;

        if ((primaryUom != null) && (primaryUom.length() == 0)) {
            vwItemMasterCacheModel.primaryUom = null;
        }

        Date newFormulationEndDate = getNewFormulationEndDate();

        if (newFormulationEndDate != null) {
            vwItemMasterCacheModel.newFormulationEndDate = newFormulationEndDate.getTime();
        } else {
            vwItemMasterCacheModel.newFormulationEndDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.modifiedBy = getModifiedBy();

        String modifiedBy = vwItemMasterCacheModel.modifiedBy;

        if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
            vwItemMasterCacheModel.modifiedBy = null;
        }

        vwItemMasterCacheModel.packageSizeCode = getPackageSizeCode();

        String packageSizeCode = vwItemMasterCacheModel.packageSizeCode;

        if ((packageSizeCode != null) && (packageSizeCode.length() == 0)) {
            vwItemMasterCacheModel.packageSizeCode = null;
        }

        vwItemMasterCacheModel.secondaryUom = getSecondaryUom();

        String secondaryUom = vwItemMasterCacheModel.secondaryUom;

        if ((secondaryUom != null) && (secondaryUom.length() == 0)) {
            vwItemMasterCacheModel.secondaryUom = null;
        }

        vwItemMasterCacheModel.udc6 = getUdc6();

        String udc6 = vwItemMasterCacheModel.udc6;

        if ((udc6 != null) && (udc6.length() == 0)) {
            vwItemMasterCacheModel.udc6 = null;
        }

        vwItemMasterCacheModel.udc5 = getUdc5();

        String udc5 = vwItemMasterCacheModel.udc5;

        if ((udc5 != null) && (udc5.length() == 0)) {
            vwItemMasterCacheModel.udc5 = null;
        }

        Date discontinuationDate = getDiscontinuationDate();

        if (discontinuationDate != null) {
            vwItemMasterCacheModel.discontinuationDate = discontinuationDate.getTime();
        } else {
            vwItemMasterCacheModel.discontinuationDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.udc4 = getUdc4();

        String udc4 = vwItemMasterCacheModel.udc4;

        if ((udc4 != null) && (udc4.length() == 0)) {
            vwItemMasterCacheModel.udc4 = null;
        }

        vwItemMasterCacheModel.udc1 = getUdc1();

        String udc1 = vwItemMasterCacheModel.udc1;

        if ((udc1 != null) && (udc1.length() == 0)) {
            vwItemMasterCacheModel.udc1 = null;
        }

        vwItemMasterCacheModel.udc2 = getUdc2();

        String udc2 = vwItemMasterCacheModel.udc2;

        if ((udc2 != null) && (udc2.length() == 0)) {
            vwItemMasterCacheModel.udc2 = null;
        }

        Date packageSizeIntroDate = getPackageSizeIntroDate();

        if (packageSizeIntroDate != null) {
            vwItemMasterCacheModel.packageSizeIntroDate = packageSizeIntroDate.getTime();
        } else {
            vwItemMasterCacheModel.packageSizeIntroDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.udc3 = getUdc3();

        String udc3 = vwItemMasterCacheModel.udc3;

        if ((udc3 != null) && (udc3.length() == 0)) {
            vwItemMasterCacheModel.udc3 = null;
        }

        Date itemEndDate = getItemEndDate();

        if (itemEndDate != null) {
            vwItemMasterCacheModel.itemEndDate = itemEndDate.getTime();
        } else {
            vwItemMasterCacheModel.itemEndDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.manufacturerId = getManufacturerId();

        String manufacturerId = vwItemMasterCacheModel.manufacturerId;

        if ((manufacturerId != null) && (manufacturerId.length() == 0)) {
            vwItemMasterCacheModel.manufacturerId = null;
        }

        vwItemMasterCacheModel.itemFamilyId = getItemFamilyId();

        String itemFamilyId = vwItemMasterCacheModel.itemFamilyId;

        if ((itemFamilyId != null) && (itemFamilyId.length() == 0)) {
            vwItemMasterCacheModel.itemFamilyId = null;
        }

        vwItemMasterCacheModel.strength = getStrength();

        String strength = vwItemMasterCacheModel.strength;

        if ((strength != null) && (strength.length() == 0)) {
            vwItemMasterCacheModel.strength = null;
        }

        vwItemMasterCacheModel.itemCategory = getItemCategory();

        String itemCategory = vwItemMasterCacheModel.itemCategory;

        if ((itemCategory != null) && (itemCategory.length() == 0)) {
            vwItemMasterCacheModel.itemCategory = null;
        }

        vwItemMasterCacheModel.upps = getUpps();

        vwItemMasterCacheModel.shelfLifeType = getShelfLifeType();

        String shelfLifeType = vwItemMasterCacheModel.shelfLifeType;

        if ((shelfLifeType != null) && (shelfLifeType.length() == 0)) {
            vwItemMasterCacheModel.shelfLifeType = null;
        }

        vwItemMasterCacheModel.pediatricExclusiveIndicator = getPediatricExclusiveIndicator();

        String pediatricExclusiveIndicator = vwItemMasterCacheModel.pediatricExclusiveIndicator;

        if ((pediatricExclusiveIndicator != null) &&
                (pediatricExclusiveIndicator.length() == 0)) {
            vwItemMasterCacheModel.pediatricExclusiveIndicator = null;
        }

        vwItemMasterCacheModel.itemTypeIndication = getItemTypeIndication();

        String itemTypeIndication = vwItemMasterCacheModel.itemTypeIndication;

        if ((itemTypeIndication != null) && (itemTypeIndication.length() == 0)) {
            vwItemMasterCacheModel.itemTypeIndication = null;
        }

        Date acquisitionDate = getAcquisitionDate();

        if (acquisitionDate != null) {
            vwItemMasterCacheModel.acquisitionDate = acquisitionDate.getTime();
        } else {
            vwItemMasterCacheModel.acquisitionDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.clottingFactorIndicator = getClottingFactorIndicator();

        String clottingFactorIndicator = vwItemMasterCacheModel.clottingFactorIndicator;

        if ((clottingFactorIndicator != null) &&
                (clottingFactorIndicator.length() == 0)) {
            vwItemMasterCacheModel.clottingFactorIndicator = null;
        }

        vwItemMasterCacheModel.form = getForm();

        String form = vwItemMasterCacheModel.form;

        if ((form != null) && (form.length() == 0)) {
            vwItemMasterCacheModel.form = null;
        }

        vwItemMasterCacheModel.itemName = getItemName();

        String itemName = vwItemMasterCacheModel.itemName;

        if ((itemName != null) && (itemName.length() == 0)) {
            vwItemMasterCacheModel.itemName = null;
        }

        vwItemMasterCacheModel.manufacturerName = getManufacturerName();

        String manufacturerName = vwItemMasterCacheModel.manufacturerName;

        if ((manufacturerName != null) && (manufacturerName.length() == 0)) {
            vwItemMasterCacheModel.manufacturerName = null;
        }

        Date pediatricExclusiveStartDate = getPediatricExclusiveStartDate();

        if (pediatricExclusiveStartDate != null) {
            vwItemMasterCacheModel.pediatricExclusiveStartDate = pediatricExclusiveStartDate.getTime();
        } else {
            vwItemMasterCacheModel.pediatricExclusiveStartDate = Long.MIN_VALUE;
        }

        Date firstSaleDate = getFirstSaleDate();

        if (firstSaleDate != null) {
            vwItemMasterCacheModel.firstSaleDate = firstSaleDate.getTime();
        } else {
            vwItemMasterCacheModel.firstSaleDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.itemMasterSid = getItemMasterSid();

        vwItemMasterCacheModel.itemType = getItemType();

        String itemType = vwItemMasterCacheModel.itemType;

        if ((itemType != null) && (itemType.length() == 0)) {
            vwItemMasterCacheModel.itemType = null;
        }

        vwItemMasterCacheModel.itemId = getItemId();

        String itemId = vwItemMasterCacheModel.itemId;

        if ((itemId != null) && (itemId.length() == 0)) {
            vwItemMasterCacheModel.itemId = null;
        }

        vwItemMasterCacheModel.baselineAmp = getBaselineAmp();

        String baselineAmp = vwItemMasterCacheModel.baselineAmp;

        if ((baselineAmp != null) && (baselineAmp.length() == 0)) {
            vwItemMasterCacheModel.baselineAmp = null;
        }

        vwItemMasterCacheModel.dosesPerUnit = getDosesPerUnit();

        String dosesPerUnit = vwItemMasterCacheModel.dosesPerUnit;

        if ((dosesPerUnit != null) && (dosesPerUnit.length() == 0)) {
            vwItemMasterCacheModel.dosesPerUnit = null;
        }

        vwItemMasterCacheModel.dualPricingIndicator = getDualPricingIndicator();

        String dualPricingIndicator = vwItemMasterCacheModel.dualPricingIndicator;

        if ((dualPricingIndicator != null) &&
                (dualPricingIndicator.length() == 0)) {
            vwItemMasterCacheModel.dualPricingIndicator = null;
        }

        vwItemMasterCacheModel.baseCpi = getBaseCpi();

        String baseCpi = vwItemMasterCacheModel.baseCpi;

        if ((baseCpi != null) && (baseCpi.length() == 0)) {
            vwItemMasterCacheModel.baseCpi = null;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            vwItemMasterCacheModel.createdDate = createdDate.getTime();
        } else {
            vwItemMasterCacheModel.createdDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.createdBy = getCreatedBy();

        String createdBy = vwItemMasterCacheModel.createdBy;

        if ((createdBy != null) && (createdBy.length() == 0)) {
            vwItemMasterCacheModel.createdBy = null;
        }

        Date itemStartDate = getItemStartDate();

        if (itemStartDate != null) {
            vwItemMasterCacheModel.itemStartDate = itemStartDate.getTime();
        } else {
            vwItemMasterCacheModel.itemStartDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.authorizedGeneric = getAuthorizedGeneric();

        String authorizedGeneric = vwItemMasterCacheModel.authorizedGeneric;

        if ((authorizedGeneric != null) && (authorizedGeneric.length() == 0)) {
            vwItemMasterCacheModel.authorizedGeneric = null;
        }

        vwItemMasterCacheModel.ndc9 = getNdc9();

        String ndc9 = vwItemMasterCacheModel.ndc9;

        if ((ndc9 != null) && (ndc9.length() == 0)) {
            vwItemMasterCacheModel.ndc9 = null;
        }

        Date authorizedGenericEndDate = getAuthorizedGenericEndDate();

        if (authorizedGenericEndDate != null) {
            vwItemMasterCacheModel.authorizedGenericEndDate = authorizedGenericEndDate.getTime();
        } else {
            vwItemMasterCacheModel.authorizedGenericEndDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.itemNo = getItemNo();

        String itemNo = vwItemMasterCacheModel.itemNo;

        if ((itemNo != null) && (itemNo.length() == 0)) {
            vwItemMasterCacheModel.itemNo = null;
        }

        vwItemMasterCacheModel.packageSize = getPackageSize();

        String packageSize = vwItemMasterCacheModel.packageSize;

        if ((packageSize != null) && (packageSize.length() == 0)) {
            vwItemMasterCacheModel.packageSize = null;
        }

        vwItemMasterCacheModel.ndc8 = getNdc8();

        String ndc8 = vwItemMasterCacheModel.ndc8;

        if ((ndc8 != null) && (ndc8.length() == 0)) {
            vwItemMasterCacheModel.ndc8 = null;
        }

        vwItemMasterCacheModel.itemClass = getItemClass();

        String itemClass = vwItemMasterCacheModel.itemClass;

        if ((itemClass != null) && (itemClass.length() == 0)) {
            vwItemMasterCacheModel.itemClass = null;
        }

        vwItemMasterCacheModel.labelerCode = getLabelerCode();

        String labelerCode = vwItemMasterCacheModel.labelerCode;

        if ((labelerCode != null) && (labelerCode.length() == 0)) {
            vwItemMasterCacheModel.labelerCode = null;
        }

        vwItemMasterCacheModel.displayBrand = getDisplayBrand();

        String displayBrand = vwItemMasterCacheModel.displayBrand;

        if ((displayBrand != null) && (displayBrand.length() == 0)) {
            vwItemMasterCacheModel.displayBrand = null;
        }

        Date clottingFactorEndDate = getClottingFactorEndDate();

        if (clottingFactorEndDate != null) {
            vwItemMasterCacheModel.clottingFactorEndDate = clottingFactorEndDate.getTime();
        } else {
            vwItemMasterCacheModel.clottingFactorEndDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.dra = getDra();

        String dra = vwItemMasterCacheModel.dra;

        if ((dra != null) && (dra.length() == 0)) {
            vwItemMasterCacheModel.dra = null;
        }

        vwItemMasterCacheModel.brandId = getBrandId();

        String brandId = vwItemMasterCacheModel.brandId;

        if ((brandId != null) && (brandId.length() == 0)) {
            vwItemMasterCacheModel.brandId = null;
        }

        Date baseCpiPeriod = getBaseCpiPeriod();

        if (baseCpiPeriod != null) {
            vwItemMasterCacheModel.baseCpiPeriod = baseCpiPeriod.getTime();
        } else {
            vwItemMasterCacheModel.baseCpiPeriod = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.newFormulationIndicator = getNewFormulationIndicator();

        String newFormulationIndicator = vwItemMasterCacheModel.newFormulationIndicator;

        if ((newFormulationIndicator != null) &&
                (newFormulationIndicator.length() == 0)) {
            vwItemMasterCacheModel.newFormulationIndicator = null;
        }

        Date lastLotExpirationDate = getLastLotExpirationDate();

        if (lastLotExpirationDate != null) {
            vwItemMasterCacheModel.lastLotExpirationDate = lastLotExpirationDate.getTime();
        } else {
            vwItemMasterCacheModel.lastLotExpirationDate = Long.MIN_VALUE;
        }

        vwItemMasterCacheModel.batchId = getBatchId();

        String batchId = vwItemMasterCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            vwItemMasterCacheModel.batchId = null;
        }

        vwItemMasterCacheModel.itemCode = getItemCode();

        String itemCode = vwItemMasterCacheModel.itemCode;

        if ((itemCode != null) && (itemCode.length() == 0)) {
            vwItemMasterCacheModel.itemCode = null;
        }

        Date clottingFactorStartDate = getClottingFactorStartDate();

        if (clottingFactorStartDate != null) {
            vwItemMasterCacheModel.clottingFactorStartDate = clottingFactorStartDate.getTime();
        } else {
            vwItemMasterCacheModel.clottingFactorStartDate = Long.MIN_VALUE;
        }

        Date nonFederalExpirationDate = getNonFederalExpirationDate();

        if (nonFederalExpirationDate != null) {
            vwItemMasterCacheModel.nonFederalExpirationDate = nonFederalExpirationDate.getTime();
        } else {
            vwItemMasterCacheModel.nonFederalExpirationDate = Long.MIN_VALUE;
        }

        return vwItemMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(155);

        sb.append("{itemStatus=");
        sb.append(getItemStatus());
        sb.append(", itemDesc=");
        sb.append(getItemDesc());
        sb.append(", acquiredAmp=");
        sb.append(getAcquiredAmp());
        sb.append(", authorizedGenericStartDate=");
        sb.append(getAuthorizedGenericStartDate());
        sb.append(", newFormulationStartDate=");
        sb.append(getNewFormulationStartDate());
        sb.append(", marketTerminationDate=");
        sb.append(getMarketTerminationDate());
        sb.append(", obraBamp=");
        sb.append(getObraBamp());
        sb.append(", brand=");
        sb.append(getBrand());
        sb.append(", manufacturerNo=");
        sb.append(getManufacturerNo());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", therapeuticClass=");
        sb.append(getTherapeuticClass());
        sb.append(", organizationKey=");
        sb.append(getOrganizationKey());
        sb.append(", acquiredBamp=");
        sb.append(getAcquiredBamp());
        sb.append(", pediatricExclusiveEndDate=");
        sb.append(getPediatricExclusiveEndDate());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", newFormulation=");
        sb.append(getNewFormulation());
        sb.append(", addChgDelIndicator=");
        sb.append(getAddChgDelIndicator());
        sb.append(", divestitureDate=");
        sb.append(getDivestitureDate());
        sb.append(", shelfLife=");
        sb.append(getShelfLife());
        sb.append(", primaryUom=");
        sb.append(getPrimaryUom());
        sb.append(", newFormulationEndDate=");
        sb.append(getNewFormulationEndDate());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", packageSizeCode=");
        sb.append(getPackageSizeCode());
        sb.append(", secondaryUom=");
        sb.append(getSecondaryUom());
        sb.append(", udc6=");
        sb.append(getUdc6());
        sb.append(", udc5=");
        sb.append(getUdc5());
        sb.append(", discontinuationDate=");
        sb.append(getDiscontinuationDate());
        sb.append(", udc4=");
        sb.append(getUdc4());
        sb.append(", udc1=");
        sb.append(getUdc1());
        sb.append(", udc2=");
        sb.append(getUdc2());
        sb.append(", packageSizeIntroDate=");
        sb.append(getPackageSizeIntroDate());
        sb.append(", udc3=");
        sb.append(getUdc3());
        sb.append(", itemEndDate=");
        sb.append(getItemEndDate());
        sb.append(", manufacturerId=");
        sb.append(getManufacturerId());
        sb.append(", itemFamilyId=");
        sb.append(getItemFamilyId());
        sb.append(", strength=");
        sb.append(getStrength());
        sb.append(", itemCategory=");
        sb.append(getItemCategory());
        sb.append(", upps=");
        sb.append(getUpps());
        sb.append(", shelfLifeType=");
        sb.append(getShelfLifeType());
        sb.append(", pediatricExclusiveIndicator=");
        sb.append(getPediatricExclusiveIndicator());
        sb.append(", itemTypeIndication=");
        sb.append(getItemTypeIndication());
        sb.append(", acquisitionDate=");
        sb.append(getAcquisitionDate());
        sb.append(", clottingFactorIndicator=");
        sb.append(getClottingFactorIndicator());
        sb.append(", form=");
        sb.append(getForm());
        sb.append(", itemName=");
        sb.append(getItemName());
        sb.append(", manufacturerName=");
        sb.append(getManufacturerName());
        sb.append(", pediatricExclusiveStartDate=");
        sb.append(getPediatricExclusiveStartDate());
        sb.append(", firstSaleDate=");
        sb.append(getFirstSaleDate());
        sb.append(", itemMasterSid=");
        sb.append(getItemMasterSid());
        sb.append(", itemType=");
        sb.append(getItemType());
        sb.append(", itemId=");
        sb.append(getItemId());
        sb.append(", baselineAmp=");
        sb.append(getBaselineAmp());
        sb.append(", dosesPerUnit=");
        sb.append(getDosesPerUnit());
        sb.append(", dualPricingIndicator=");
        sb.append(getDualPricingIndicator());
        sb.append(", baseCpi=");
        sb.append(getBaseCpi());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", itemStartDate=");
        sb.append(getItemStartDate());
        sb.append(", authorizedGeneric=");
        sb.append(getAuthorizedGeneric());
        sb.append(", ndc9=");
        sb.append(getNdc9());
        sb.append(", authorizedGenericEndDate=");
        sb.append(getAuthorizedGenericEndDate());
        sb.append(", itemNo=");
        sb.append(getItemNo());
        sb.append(", packageSize=");
        sb.append(getPackageSize());
        sb.append(", ndc8=");
        sb.append(getNdc8());
        sb.append(", itemClass=");
        sb.append(getItemClass());
        sb.append(", labelerCode=");
        sb.append(getLabelerCode());
        sb.append(", displayBrand=");
        sb.append(getDisplayBrand());
        sb.append(", clottingFactorEndDate=");
        sb.append(getClottingFactorEndDate());
        sb.append(", dra=");
        sb.append(getDra());
        sb.append(", brandId=");
        sb.append(getBrandId());
        sb.append(", baseCpiPeriod=");
        sb.append(getBaseCpiPeriod());
        sb.append(", newFormulationIndicator=");
        sb.append(getNewFormulationIndicator());
        sb.append(", lastLotExpirationDate=");
        sb.append(getLastLotExpirationDate());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", itemCode=");
        sb.append(getItemCode());
        sb.append(", clottingFactorStartDate=");
        sb.append(getClottingFactorStartDate());
        sb.append(", nonFederalExpirationDate=");
        sb.append(getNonFederalExpirationDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(235);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.parttwo.model.VwItemMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>itemStatus</column-name><column-value><![CDATA[");
        sb.append(getItemStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemDesc</column-name><column-value><![CDATA[");
        sb.append(getItemDesc());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>acquiredAmp</column-name><column-value><![CDATA[");
        sb.append(getAcquiredAmp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorizedGenericStartDate</column-name><column-value><![CDATA[");
        sb.append(getAuthorizedGenericStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newFormulationStartDate</column-name><column-value><![CDATA[");
        sb.append(getNewFormulationStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketTerminationDate</column-name><column-value><![CDATA[");
        sb.append(getMarketTerminationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>obraBamp</column-name><column-value><![CDATA[");
        sb.append(getObraBamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brand</column-name><column-value><![CDATA[");
        sb.append(getBrand());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>manufacturerNo</column-name><column-value><![CDATA[");
        sb.append(getManufacturerNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>therapeuticClass</column-name><column-value><![CDATA[");
        sb.append(getTherapeuticClass());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationKey</column-name><column-value><![CDATA[");
        sb.append(getOrganizationKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>acquiredBamp</column-name><column-value><![CDATA[");
        sb.append(getAcquiredBamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pediatricExclusiveEndDate</column-name><column-value><![CDATA[");
        sb.append(getPediatricExclusiveEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newFormulation</column-name><column-value><![CDATA[");
        sb.append(getNewFormulation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>addChgDelIndicator</column-name><column-value><![CDATA[");
        sb.append(getAddChgDelIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>divestitureDate</column-name><column-value><![CDATA[");
        sb.append(getDivestitureDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shelfLife</column-name><column-value><![CDATA[");
        sb.append(getShelfLife());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>primaryUom</column-name><column-value><![CDATA[");
        sb.append(getPrimaryUom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newFormulationEndDate</column-name><column-value><![CDATA[");
        sb.append(getNewFormulationEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageSizeCode</column-name><column-value><![CDATA[");
        sb.append(getPackageSizeCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>secondaryUom</column-name><column-value><![CDATA[");
        sb.append(getSecondaryUom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>udc6</column-name><column-value><![CDATA[");
        sb.append(getUdc6());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>udc5</column-name><column-value><![CDATA[");
        sb.append(getUdc5());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discontinuationDate</column-name><column-value><![CDATA[");
        sb.append(getDiscontinuationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>udc4</column-name><column-value><![CDATA[");
        sb.append(getUdc4());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>udc1</column-name><column-value><![CDATA[");
        sb.append(getUdc1());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>udc2</column-name><column-value><![CDATA[");
        sb.append(getUdc2());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageSizeIntroDate</column-name><column-value><![CDATA[");
        sb.append(getPackageSizeIntroDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>udc3</column-name><column-value><![CDATA[");
        sb.append(getUdc3());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemEndDate</column-name><column-value><![CDATA[");
        sb.append(getItemEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>manufacturerId</column-name><column-value><![CDATA[");
        sb.append(getManufacturerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemFamilyId</column-name><column-value><![CDATA[");
        sb.append(getItemFamilyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>strength</column-name><column-value><![CDATA[");
        sb.append(getStrength());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemCategory</column-name><column-value><![CDATA[");
        sb.append(getItemCategory());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>upps</column-name><column-value><![CDATA[");
        sb.append(getUpps());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shelfLifeType</column-name><column-value><![CDATA[");
        sb.append(getShelfLifeType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pediatricExclusiveIndicator</column-name><column-value><![CDATA[");
        sb.append(getPediatricExclusiveIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemTypeIndication</column-name><column-value><![CDATA[");
        sb.append(getItemTypeIndication());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>acquisitionDate</column-name><column-value><![CDATA[");
        sb.append(getAcquisitionDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clottingFactorIndicator</column-name><column-value><![CDATA[");
        sb.append(getClottingFactorIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>form</column-name><column-value><![CDATA[");
        sb.append(getForm());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemName</column-name><column-value><![CDATA[");
        sb.append(getItemName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>manufacturerName</column-name><column-value><![CDATA[");
        sb.append(getManufacturerName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pediatricExclusiveStartDate</column-name><column-value><![CDATA[");
        sb.append(getPediatricExclusiveStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstSaleDate</column-name><column-value><![CDATA[");
        sb.append(getFirstSaleDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
        sb.append(getItemMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemType</column-name><column-value><![CDATA[");
        sb.append(getItemType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemId</column-name><column-value><![CDATA[");
        sb.append(getItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baselineAmp</column-name><column-value><![CDATA[");
        sb.append(getBaselineAmp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dosesPerUnit</column-name><column-value><![CDATA[");
        sb.append(getDosesPerUnit());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dualPricingIndicator</column-name><column-value><![CDATA[");
        sb.append(getDualPricingIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baseCpi</column-name><column-value><![CDATA[");
        sb.append(getBaseCpi());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemStartDate</column-name><column-value><![CDATA[");
        sb.append(getItemStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorizedGeneric</column-name><column-value><![CDATA[");
        sb.append(getAuthorizedGeneric());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ndc9</column-name><column-value><![CDATA[");
        sb.append(getNdc9());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorizedGenericEndDate</column-name><column-value><![CDATA[");
        sb.append(getAuthorizedGenericEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemNo</column-name><column-value><![CDATA[");
        sb.append(getItemNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageSize</column-name><column-value><![CDATA[");
        sb.append(getPackageSize());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ndc8</column-name><column-value><![CDATA[");
        sb.append(getNdc8());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemClass</column-name><column-value><![CDATA[");
        sb.append(getItemClass());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>labelerCode</column-name><column-value><![CDATA[");
        sb.append(getLabelerCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>displayBrand</column-name><column-value><![CDATA[");
        sb.append(getDisplayBrand());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clottingFactorEndDate</column-name><column-value><![CDATA[");
        sb.append(getClottingFactorEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dra</column-name><column-value><![CDATA[");
        sb.append(getDra());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandId</column-name><column-value><![CDATA[");
        sb.append(getBrandId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baseCpiPeriod</column-name><column-value><![CDATA[");
        sb.append(getBaseCpiPeriod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newFormulationIndicator</column-name><column-value><![CDATA[");
        sb.append(getNewFormulationIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastLotExpirationDate</column-name><column-value><![CDATA[");
        sb.append(getLastLotExpirationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemCode</column-name><column-value><![CDATA[");
        sb.append(getItemCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clottingFactorStartDate</column-name><column-value><![CDATA[");
        sb.append(getClottingFactorStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nonFederalExpirationDate</column-name><column-value><![CDATA[");
        sb.append(getNonFederalExpirationDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
