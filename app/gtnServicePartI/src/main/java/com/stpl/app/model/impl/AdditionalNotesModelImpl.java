package com.stpl.app.model.impl;

import com.stpl.app.model.AdditionalNotes;
import com.stpl.app.model.AdditionalNotesModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AdditionalNotes service. Represents a row in the &quot;ADDITIONAL_NOTES&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.AdditionalNotesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AdditionalNotesImpl}.
 * </p>
 *
 * @author
 * @see AdditionalNotesImpl
 * @see com.stpl.app.model.AdditionalNotes
 * @see com.stpl.app.model.AdditionalNotesModel
 * @generated
 */
public class AdditionalNotesModelImpl extends BaseModelImpl<AdditionalNotes>
    implements AdditionalNotesModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a additional notes model instance should use the {@link com.stpl.app.model.AdditionalNotes} interface instead.
     */
    public static final String TABLE_NAME = "ADDITIONAL_NOTES";
    public static final Object[][] TABLE_COLUMNS = {
            { "CREATED_DATE", Types.TIMESTAMP },
            { "CREATED_BY", Types.VARCHAR },
            { "FORECAST_TYPE", Types.VARCHAR },
            { "ADDITIONAL_NOTES_ID", Types.INTEGER },
            { "PROJECTION_ID", Types.INTEGER },
            { "NOTES", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table ADDITIONAL_NOTES (CREATED_DATE DATE null,CREATED_BY VARCHAR(75) null,FORECAST_TYPE VARCHAR(75) null,ADDITIONAL_NOTES_ID INTEGER not null primary key IDENTITY,PROJECTION_ID INTEGER,NOTES VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table ADDITIONAL_NOTES";
    public static final String ORDER_BY_JPQL = " ORDER BY additionalNotes.additionalNotesId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ADDITIONAL_NOTES.ADDITIONAL_NOTES_ID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.AdditionalNotes"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.AdditionalNotes"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.AdditionalNotes"));
    private static ClassLoader _classLoader = AdditionalNotes.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            AdditionalNotes.class
        };
    private Date _createdDate;
    private String _createdBy;
    private String _forecastType;
    private int _additionalNotesId;
    private int _projectionId;
    private String _notes;
    private AdditionalNotes _escapedModel;

    public AdditionalNotesModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _additionalNotesId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setAdditionalNotesId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _additionalNotesId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return AdditionalNotes.class;
    }

    @Override
    public String getModelClassName() {
        return AdditionalNotes.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("createdDate", getCreatedDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("forecastType", getForecastType());
        attributes.put("additionalNotesId", getAdditionalNotesId());
        attributes.put("projectionId", getProjectionId());
        attributes.put("notes", getNotes());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String createdBy = (String) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        String forecastType = (String) attributes.get("forecastType");

        if (forecastType != null) {
            setForecastType(forecastType);
        }

        Integer additionalNotesId = (Integer) attributes.get(
                "additionalNotesId");

        if (additionalNotesId != null) {
            setAdditionalNotesId(additionalNotesId);
        }

        Integer projectionId = (Integer) attributes.get("projectionId");

        if (projectionId != null) {
            setProjectionId(projectionId);
        }

        String notes = (String) attributes.get("notes");

        if (notes != null) {
            setNotes(notes);
        }
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getCreatedBy() {
        if (_createdBy == null) {
            return StringPool.BLANK;
        } else {
            return _createdBy;
        }
    }

    @Override
    public void setCreatedBy(String createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public String getForecastType() {
        if (_forecastType == null) {
            return StringPool.BLANK;
        } else {
            return _forecastType;
        }
    }

    @Override
    public void setForecastType(String forecastType) {
        _forecastType = forecastType;
    }

    @Override
    public int getAdditionalNotesId() {
        return _additionalNotesId;
    }

    @Override
    public void setAdditionalNotesId(int additionalNotesId) {
        _additionalNotesId = additionalNotesId;
    }

    @Override
    public int getProjectionId() {
        return _projectionId;
    }

    @Override
    public void setProjectionId(int projectionId) {
        _projectionId = projectionId;
    }

    @Override
    public String getNotes() {
        if (_notes == null) {
            return StringPool.BLANK;
        } else {
            return _notes;
        }
    }

    @Override
    public void setNotes(String notes) {
        _notes = notes;
    }

    @Override
    public AdditionalNotes toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (AdditionalNotes) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AdditionalNotesImpl additionalNotesImpl = new AdditionalNotesImpl();

        additionalNotesImpl.setCreatedDate(getCreatedDate());
        additionalNotesImpl.setCreatedBy(getCreatedBy());
        additionalNotesImpl.setForecastType(getForecastType());
        additionalNotesImpl.setAdditionalNotesId(getAdditionalNotesId());
        additionalNotesImpl.setProjectionId(getProjectionId());
        additionalNotesImpl.setNotes(getNotes());

        additionalNotesImpl.resetOriginalValues();

        return additionalNotesImpl;
    }

    @Override
    public int compareTo(AdditionalNotes additionalNotes) {
        int primaryKey = additionalNotes.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AdditionalNotes)) {
            return false;
        }

        AdditionalNotes additionalNotes = (AdditionalNotes) obj;

        int primaryKey = additionalNotes.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<AdditionalNotes> toCacheModel() {
        AdditionalNotesCacheModel additionalNotesCacheModel = new AdditionalNotesCacheModel();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            additionalNotesCacheModel.createdDate = createdDate.getTime();
        } else {
            additionalNotesCacheModel.createdDate = Long.MIN_VALUE;
        }

        additionalNotesCacheModel.createdBy = getCreatedBy();

        String createdBy = additionalNotesCacheModel.createdBy;

        if ((createdBy != null) && (createdBy.length() == 0)) {
            additionalNotesCacheModel.createdBy = null;
        }

        additionalNotesCacheModel.forecastType = getForecastType();

        String forecastType = additionalNotesCacheModel.forecastType;

        if ((forecastType != null) && (forecastType.length() == 0)) {
            additionalNotesCacheModel.forecastType = null;
        }

        additionalNotesCacheModel.additionalNotesId = getAdditionalNotesId();

        additionalNotesCacheModel.projectionId = getProjectionId();

        additionalNotesCacheModel.notes = getNotes();

        String notes = additionalNotesCacheModel.notes;

        if ((notes != null) && (notes.length() == 0)) {
            additionalNotesCacheModel.notes = null;
        }

        return additionalNotesCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{createdDate=");
        sb.append(getCreatedDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", forecastType=");
        sb.append(getForecastType());
        sb.append(", additionalNotesId=");
        sb.append(getAdditionalNotesId());
        sb.append(", projectionId=");
        sb.append(getProjectionId());
        sb.append(", notes=");
        sb.append(getNotes());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.AdditionalNotes");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastType</column-name><column-value><![CDATA[");
        sb.append(getForecastType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>additionalNotesId</column-name><column-value><![CDATA[");
        sb.append(getAdditionalNotesId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionId</column-name><column-value><![CDATA[");
        sb.append(getProjectionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>notes</column-name><column-value><![CDATA[");
        sb.append(getNotes());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
