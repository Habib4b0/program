/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.HistRelationshipBuilder;
import com.stpl.app.model.HistRelationshipBuilderModel;
import com.stpl.app.service.persistence.HistRelationshipBuilderPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the HistRelationshipBuilder service. Represents a row in the &quot;HIST_RELATIONSHIP_BUILDER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link HistRelationshipBuilderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HistRelationshipBuilderImpl}.
 * </p>
 *
 * @author
 * @see HistRelationshipBuilderImpl
 * @see HistRelationshipBuilder
 * @see HistRelationshipBuilderModel
 * @generated
 */
@ProviderType
public class HistRelationshipBuilderModelImpl extends BaseModelImpl<HistRelationshipBuilder>
	implements HistRelationshipBuilderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a hist relationship builder model instance should use the {@link HistRelationshipBuilder} interface instead.
	 */
	public static final String TABLE_NAME = "HIST_RELATIONSHIP_BUILDER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "START_DATE", Types.TIMESTAMP },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.INTEGER },
			{ "RELATIONSHIP_DESCRIPTION", Types.VARCHAR },
			{ "ACTION_DATE", Types.TIMESTAMP },
			{ "ACTION_FLAG", Types.VARCHAR },
			{ "HIERARCHY_DEFINITION_SID", Types.INTEGER },
			{ "VERSION_NO", Types.INTEGER },
			{ "RELATIONSHIP_NAME", Types.VARCHAR },
			{ "RELATIONSHIP_BUILDER_SID", Types.INTEGER },
			{ "HIERARCHY_VERSION", Types.INTEGER },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "RELATIONSHIP_TYPE", Types.INTEGER },
			{ "BUILD_TYPE", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RELATIONSHIP_DESCRIPTION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACTION_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ACTION_FLAG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("HIERARCHY_DEFINITION_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("VERSION_NO", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RELATIONSHIP_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RELATIONSHIP_BUILDER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("HIERARCHY_VERSION", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("RELATIONSHIP_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BUILD_TYPE", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table HIST_RELATIONSHIP_BUILDER (START_DATE DATE null,CREATED_DATE DATE null,CREATED_BY INTEGER,RELATIONSHIP_DESCRIPTION VARCHAR(75) null,ACTION_DATE DATE null,ACTION_FLAG VARCHAR(75) not null IDENTITY,HIERARCHY_DEFINITION_SID INTEGER,VERSION_NO INTEGER not null IDENTITY,RELATIONSHIP_NAME VARCHAR(75) null,RELATIONSHIP_BUILDER_SID INTEGER not null IDENTITY,HIERARCHY_VERSION INTEGER,MODIFIED_BY INTEGER,MODIFIED_DATE DATE null,RELATIONSHIP_TYPE INTEGER,BUILD_TYPE VARCHAR(75) null,primary key (ACTION_FLAG, VERSION_NO, RELATIONSHIP_BUILDER_SID))";
	public static final String TABLE_SQL_DROP = "drop table HIST_RELATIONSHIP_BUILDER";
	public static final String ORDER_BY_JPQL = " ORDER BY histRelationshipBuilder.id.actionFlag ASC, histRelationshipBuilder.id.versionNo ASC, histRelationshipBuilder.id.relationshipBuilderSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY HIST_RELATIONSHIP_BUILDER.ACTION_FLAG ASC, HIST_RELATIONSHIP_BUILDER.VERSION_NO ASC, HIST_RELATIONSHIP_BUILDER.RELATIONSHIP_BUILDER_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.HistRelationshipBuilder"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.HistRelationshipBuilder"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.HistRelationshipBuilder"));

	public HistRelationshipBuilderModelImpl() {
	}

	@Override
	public HistRelationshipBuilderPK getPrimaryKey() {
		return new HistRelationshipBuilderPK(_actionFlag, _versionNo,
			_relationshipBuilderSid);
	}

	@Override
	public void setPrimaryKey(HistRelationshipBuilderPK primaryKey) {
		setActionFlag(primaryKey.actionFlag);
		setVersionNo(primaryKey.versionNo);
		setRelationshipBuilderSid(primaryKey.relationshipBuilderSid);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new HistRelationshipBuilderPK(_actionFlag, _versionNo,
			_relationshipBuilderSid);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((HistRelationshipBuilderPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return HistRelationshipBuilder.class;
	}

	@Override
	public String getModelClassName() {
		return HistRelationshipBuilder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("startDate", getStartDate());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("relationshipDescription", getRelationshipDescription());
		attributes.put("actionDate", getActionDate());
		attributes.put("actionFlag", getActionFlag());
		attributes.put("hierarchyDefinitionSid", getHierarchyDefinitionSid());
		attributes.put("versionNo", getVersionNo());
		attributes.put("relationshipName", getRelationshipName());
		attributes.put("relationshipBuilderSid", getRelationshipBuilderSid());
		attributes.put("hierarchyVersion", getHierarchyVersion());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("relationshipType", getRelationshipType());
		attributes.put("buildType", getBuildType());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String relationshipDescription = (String)attributes.get(
				"relationshipDescription");

		if (relationshipDescription != null) {
			setRelationshipDescription(relationshipDescription);
		}

		Date actionDate = (Date)attributes.get("actionDate");

		if (actionDate != null) {
			setActionDate(actionDate);
		}

		String actionFlag = (String)attributes.get("actionFlag");

		if (actionFlag != null) {
			setActionFlag(actionFlag);
		}

		Integer hierarchyDefinitionSid = (Integer)attributes.get(
				"hierarchyDefinitionSid");

		if (hierarchyDefinitionSid != null) {
			setHierarchyDefinitionSid(hierarchyDefinitionSid);
		}

		Integer versionNo = (Integer)attributes.get("versionNo");

		if (versionNo != null) {
			setVersionNo(versionNo);
		}

		String relationshipName = (String)attributes.get("relationshipName");

		if (relationshipName != null) {
			setRelationshipName(relationshipName);
		}

		Integer relationshipBuilderSid = (Integer)attributes.get(
				"relationshipBuilderSid");

		if (relationshipBuilderSid != null) {
			setRelationshipBuilderSid(relationshipBuilderSid);
		}

		Integer hierarchyVersion = (Integer)attributes.get("hierarchyVersion");

		if (hierarchyVersion != null) {
			setHierarchyVersion(hierarchyVersion);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer relationshipType = (Integer)attributes.get("relationshipType");

		if (relationshipType != null) {
			setRelationshipType(relationshipType);
		}

		String buildType = (String)attributes.get("buildType");

		if (buildType != null) {
			setBuildType(buildType);
		}
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getRelationshipDescription() {
		if (_relationshipDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _relationshipDescription;
		}
	}

	@Override
	public void setRelationshipDescription(String relationshipDescription) {
		_relationshipDescription = relationshipDescription;
	}

	@Override
	public Date getActionDate() {
		return _actionDate;
	}

	@Override
	public void setActionDate(Date actionDate) {
		_actionDate = actionDate;
	}

	@Override
	public String getActionFlag() {
		if (_actionFlag == null) {
			return StringPool.BLANK;
		}
		else {
			return _actionFlag;
		}
	}

	@Override
	public void setActionFlag(String actionFlag) {
		_actionFlag = actionFlag;
	}

	@Override
	public int getHierarchyDefinitionSid() {
		return _hierarchyDefinitionSid;
	}

	@Override
	public void setHierarchyDefinitionSid(int hierarchyDefinitionSid) {
		_hierarchyDefinitionSid = hierarchyDefinitionSid;
	}

	@Override
	public int getVersionNo() {
		return _versionNo;
	}

	@Override
	public void setVersionNo(int versionNo) {
		_versionNo = versionNo;
	}

	@Override
	public String getRelationshipName() {
		if (_relationshipName == null) {
			return StringPool.BLANK;
		}
		else {
			return _relationshipName;
		}
	}

	@Override
	public void setRelationshipName(String relationshipName) {
		_relationshipName = relationshipName;
	}

	@Override
	public int getRelationshipBuilderSid() {
		return _relationshipBuilderSid;
	}

	@Override
	public void setRelationshipBuilderSid(int relationshipBuilderSid) {
		_relationshipBuilderSid = relationshipBuilderSid;
	}

	@Override
	public int getHierarchyVersion() {
		return _hierarchyVersion;
	}

	@Override
	public void setHierarchyVersion(int hierarchyVersion) {
		_hierarchyVersion = hierarchyVersion;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public int getRelationshipType() {
		return _relationshipType;
	}

	@Override
	public void setRelationshipType(int relationshipType) {
		_relationshipType = relationshipType;
	}

	@Override
	public String getBuildType() {
		if (_buildType == null) {
			return StringPool.BLANK;
		}
		else {
			return _buildType;
		}
	}

	@Override
	public void setBuildType(String buildType) {
		_buildType = buildType;
	}

	@Override
	public HistRelationshipBuilder toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (HistRelationshipBuilder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HistRelationshipBuilderImpl histRelationshipBuilderImpl = new HistRelationshipBuilderImpl();

		histRelationshipBuilderImpl.setStartDate(getStartDate());
		histRelationshipBuilderImpl.setCreatedDate(getCreatedDate());
		histRelationshipBuilderImpl.setCreatedBy(getCreatedBy());
		histRelationshipBuilderImpl.setRelationshipDescription(getRelationshipDescription());
		histRelationshipBuilderImpl.setActionDate(getActionDate());
		histRelationshipBuilderImpl.setActionFlag(getActionFlag());
		histRelationshipBuilderImpl.setHierarchyDefinitionSid(getHierarchyDefinitionSid());
		histRelationshipBuilderImpl.setVersionNo(getVersionNo());
		histRelationshipBuilderImpl.setRelationshipName(getRelationshipName());
		histRelationshipBuilderImpl.setRelationshipBuilderSid(getRelationshipBuilderSid());
		histRelationshipBuilderImpl.setHierarchyVersion(getHierarchyVersion());
		histRelationshipBuilderImpl.setModifiedBy(getModifiedBy());
		histRelationshipBuilderImpl.setModifiedDate(getModifiedDate());
		histRelationshipBuilderImpl.setRelationshipType(getRelationshipType());
		histRelationshipBuilderImpl.setBuildType(getBuildType());

		histRelationshipBuilderImpl.resetOriginalValues();

		return histRelationshipBuilderImpl;
	}

	@Override
	public int compareTo(HistRelationshipBuilder histRelationshipBuilder) {
		HistRelationshipBuilderPK primaryKey = histRelationshipBuilder.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof HistRelationshipBuilder)) {
			return false;
		}

		HistRelationshipBuilder histRelationshipBuilder = (HistRelationshipBuilder)obj;

		HistRelationshipBuilderPK primaryKey = histRelationshipBuilder.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<HistRelationshipBuilder> toCacheModel() {
		HistRelationshipBuilderCacheModel histRelationshipBuilderCacheModel = new HistRelationshipBuilderCacheModel();

		histRelationshipBuilderCacheModel.histRelationshipBuilderPK = getPrimaryKey();

		Date startDate = getStartDate();

		if (startDate != null) {
			histRelationshipBuilderCacheModel.startDate = startDate.getTime();
		}
		else {
			histRelationshipBuilderCacheModel.startDate = Long.MIN_VALUE;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			histRelationshipBuilderCacheModel.createdDate = createdDate.getTime();
		}
		else {
			histRelationshipBuilderCacheModel.createdDate = Long.MIN_VALUE;
		}

		histRelationshipBuilderCacheModel.createdBy = getCreatedBy();

		histRelationshipBuilderCacheModel.relationshipDescription = getRelationshipDescription();

		String relationshipDescription = histRelationshipBuilderCacheModel.relationshipDescription;

		if ((relationshipDescription != null) &&
				(relationshipDescription.length() == 0)) {
			histRelationshipBuilderCacheModel.relationshipDescription = null;
		}

		Date actionDate = getActionDate();

		if (actionDate != null) {
			histRelationshipBuilderCacheModel.actionDate = actionDate.getTime();
		}
		else {
			histRelationshipBuilderCacheModel.actionDate = Long.MIN_VALUE;
		}

		histRelationshipBuilderCacheModel.actionFlag = getActionFlag();

		String actionFlag = histRelationshipBuilderCacheModel.actionFlag;

		if ((actionFlag != null) && (actionFlag.length() == 0)) {
			histRelationshipBuilderCacheModel.actionFlag = null;
		}

		histRelationshipBuilderCacheModel.hierarchyDefinitionSid = getHierarchyDefinitionSid();

		histRelationshipBuilderCacheModel.versionNo = getVersionNo();

		histRelationshipBuilderCacheModel.relationshipName = getRelationshipName();

		String relationshipName = histRelationshipBuilderCacheModel.relationshipName;

		if ((relationshipName != null) && (relationshipName.length() == 0)) {
			histRelationshipBuilderCacheModel.relationshipName = null;
		}

		histRelationshipBuilderCacheModel.relationshipBuilderSid = getRelationshipBuilderSid();

		histRelationshipBuilderCacheModel.hierarchyVersion = getHierarchyVersion();

		histRelationshipBuilderCacheModel.modifiedBy = getModifiedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			histRelationshipBuilderCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			histRelationshipBuilderCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		histRelationshipBuilderCacheModel.relationshipType = getRelationshipType();

		histRelationshipBuilderCacheModel.buildType = getBuildType();

		String buildType = histRelationshipBuilderCacheModel.buildType;

		if ((buildType != null) && (buildType.length() == 0)) {
			histRelationshipBuilderCacheModel.buildType = null;
		}

		return histRelationshipBuilderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{startDate=");
		sb.append(getStartDate());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", relationshipDescription=");
		sb.append(getRelationshipDescription());
		sb.append(", actionDate=");
		sb.append(getActionDate());
		sb.append(", actionFlag=");
		sb.append(getActionFlag());
		sb.append(", hierarchyDefinitionSid=");
		sb.append(getHierarchyDefinitionSid());
		sb.append(", versionNo=");
		sb.append(getVersionNo());
		sb.append(", relationshipName=");
		sb.append(getRelationshipName());
		sb.append(", relationshipBuilderSid=");
		sb.append(getRelationshipBuilderSid());
		sb.append(", hierarchyVersion=");
		sb.append(getHierarchyVersion());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", relationshipType=");
		sb.append(getRelationshipType());
		sb.append(", buildType=");
		sb.append(getBuildType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.HistRelationshipBuilder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relationshipDescription</column-name><column-value><![CDATA[");
		sb.append(getRelationshipDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionDate</column-name><column-value><![CDATA[");
		sb.append(getActionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionFlag</column-name><column-value><![CDATA[");
		sb.append(getActionFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hierarchyDefinitionSid</column-name><column-value><![CDATA[");
		sb.append(getHierarchyDefinitionSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionNo</column-name><column-value><![CDATA[");
		sb.append(getVersionNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relationshipName</column-name><column-value><![CDATA[");
		sb.append(getRelationshipName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relationshipBuilderSid</column-name><column-value><![CDATA[");
		sb.append(getRelationshipBuilderSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hierarchyVersion</column-name><column-value><![CDATA[");
		sb.append(getHierarchyVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relationshipType</column-name><column-value><![CDATA[");
		sb.append(getRelationshipType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>buildType</column-name><column-value><![CDATA[");
		sb.append(getBuildType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = HistRelationshipBuilder.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			HistRelationshipBuilder.class
		};
	private Date _startDate;
	private Date _createdDate;
	private int _createdBy;
	private String _relationshipDescription;
	private Date _actionDate;
	private String _actionFlag;
	private int _hierarchyDefinitionSid;
	private int _versionNo;
	private String _relationshipName;
	private int _relationshipBuilderSid;
	private int _hierarchyVersion;
	private int _modifiedBy;
	private Date _modifiedDate;
	private int _relationshipType;
	private String _buildType;
	private HistRelationshipBuilder _escapedModel;
}