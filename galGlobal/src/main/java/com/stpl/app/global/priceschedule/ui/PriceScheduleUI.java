package com.stpl.app.global.priceschedule.ui;

import com.stpl.app.global.abstractsearch.util.ConstantUtil;
import com.stpl.app.global.abstractsearch.view.AbstractSearchView;
import com.stpl.app.global.common.util.HelperListUtil;
import com.stpl.app.global.common.dto.SessionDTO;
import org.jboss.logging.Logger;

import com.stpl.app.global.priceschedule.ui.view.PSView;
import com.stpl.app.security.StplSecurity;
import com.stpl.app.ui.DateToStringConverterFactory;
import com.stpl.app.util.CommonUIUtils;
import com.stpl.app.util.ConstantsUtils;
import com.stpl.app.util.ErrorCodeUtil;
import com.stpl.app.util.ErrorCodes;
import com.stpl.portal.kernel.exception.PortalException;
import com.stpl.portal.kernel.exception.SystemException;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.Navigator;
import com.vaadin.server.DefaultErrorHandler;
import com.vaadin.server.VaadinRequest;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.UI;
import de.steinwedel.messagebox.ButtonId;
import de.steinwedel.messagebox.Icon;
import de.steinwedel.messagebox.MessageBox;
import de.steinwedel.messagebox.MessageBoxListener;

// TODO: Auto-generated Javadoc
/**
 * To display Price Schedule Form to User.
 *
 * @author manikanta
 */
@SuppressWarnings("serial")
public class PriceScheduleUI extends UI {

    /**
     * To navigate from screen to screen.
     */
    @AutoGenerated
    private Navigator navigator;
    SessionDTO sessionDTO=new SessionDTO();

    /**
     * Logger Field.
     */
    private static final Logger LOGGER = Logger.getLogger(PriceScheduleUI.class);

    /**
     * @return the navigator
     */
    public Navigator getNavigator() {
        return navigator;
    }

    /**
     * @param navigator the navigator to set
     */
    public void setNavigator(final Navigator navigator) {
        this.navigator = navigator;
    }

    /**
     * @return the logger
     */
    public static Logger getLogger() {
        return LOGGER;
    }

    /**
     * Invoked when UI is initiated.
     *
     * @param request the request
     */
    @Override
    protected void init(final VaadinRequest request) {
        try {
            addStyleName("bootstrap");
            addStyleName("bootstrap-bb");
            LOGGER.info("---init()--P1-VaadinRequest");
            final String userId = request.getRemoteUser();
            VaadinSession.getCurrent().setAttribute(ConstantsUtils.USER_ID, userId);
            final String sessionId = request.getWrappedSession().getId();
            VaadinSession.getCurrent().setAttribute(ConstantsUtils.SESSION_ID, sessionId);
            
            CommonUIUtils.beforeUnloadCloseUi(this,sessionDTO,ConstantUtil.PRICE_SCHEDULE_MASTER);
            
            VaadinSession.getCurrent().setConverterFactory(new DateToStringConverterFactory());            
            StplSecurity.getUserName();
            HelperListUtil helperListUtil=HelperListUtil.getInstance();
            helperListUtil.loadValuesWithListName("priceschedule");
            navigator = new Navigator(this, this);
            navigator.addView(AbstractSearchView.NAME, new AbstractSearchView(ConstantUtil.PRICE_SCHEDULE_MASTER,sessionDTO));
            PSView psView=new PSView(sessionDTO);
            navigator.addView(PSView.NAME, psView);
            
            navigator.setErrorView(new AbstractSearchView(ConstantUtil.PRICE_SCHEDULE_MASTER));
            UI.getCurrent().setErrorHandler(new DefaultErrorHandler() {

                @Override
                /**
                 * Invoked when an error occurs.
                 */
                @SuppressWarnings("PMD")
                public void error(final com.vaadin.server.ErrorEvent event) {
                    // Find the final cause
                    final StringBuilder cause = new StringBuilder("The Exception occured because of------>");
                    for (Throwable t = event.getThrowable(); t != null; t = t.getCause()) {
                        if (t.getCause() == null) // We're at final cause
                        {
                            cause.append(t.getClass().getName());                            
                        }
                 
                    }
                    LOGGER.error(cause);

                }
            });
        } catch (SystemException se) {
            final String errorMsg = ErrorCodeUtil.getErrorMessage(se);
            LOGGER.error(errorMsg);
            final MessageBox msg = MessageBox.showPlain(Icon.ERROR, ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1001), errorMsg, new MessageBoxListener() {    
                /**            
                 * The method is triggered when a button of the message box is   
                 * pressed .        
                 *          
                 * @param buttonId The buttonId of the pressed button.     
                 */           
                @SuppressWarnings("PMD")           
                public void buttonClicked(final ButtonId buttonId) { 
                    // Do Nothing     
                }           
            }, ButtonId.OK);  
            msg.getButton(ButtonId.OK).focus();
        } catch (PortalException pe) {
            final MessageBox msg = MessageBox.showPlain(Icon.ERROR, ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1001), ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1010), new MessageBoxListener() {      
                /**       
                 * The method is triggered when a button of the message box is        
                 * pressed .           
                 *          
                 * @param buttonId The buttonId of the pressed button.     
                 */             
                @SuppressWarnings("PMD")         
                public void buttonClicked(final ButtonId buttonId) {    
                    // Do Nothing          
                }    
            }, ButtonId.OK);  
            msg.getButton(ButtonId.OK).focus();
            LOGGER.error(pe);
        } catch (Exception exception) {
        	LOGGER.error(exception);
            final MessageBox msg = MessageBox.showPlain(Icon.ERROR, ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1001), ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1010), new MessageBoxListener() {    
                /**         
                 * The method is triggered when a button of the message box is      
                 * pressed .      
                 *           
                 * @param buttonId The buttonId of the pressed button.      
                 */         
                @SuppressWarnings("PMD")      
                public void buttonClicked(final ButtonId buttonId) {      
                    // Do Nothing       
                }         
            }, ButtonId.OK);    
            msg.getButton(ButtonId.OK).focus();
            LOGGER.error(exception);

        }
    }
}
