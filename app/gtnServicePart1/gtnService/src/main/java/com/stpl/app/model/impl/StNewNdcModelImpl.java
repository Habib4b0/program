/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.stpl.app.model.StNewNdc;
import com.stpl.app.model.StNewNdcModel;
import com.stpl.app.service.persistence.StNewNdcPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StNewNdc service. Represents a row in the &quot;ST_NEW_NDC&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link StNewNdcModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StNewNdcImpl}.
 * </p>
 *
 * @author
 * @see StNewNdcImpl
 * @see StNewNdc
 * @see StNewNdcModel
 * @generated
 */
@ProviderType
public class StNewNdcModelImpl extends BaseModelImpl<StNewNdc>
	implements StNewNdcModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a st new ndc model instance should use the {@link StNewNdc} interface instead.
	 */
	public static final String TABLE_NAME = "ST_NEW_NDC";
	public static final Object[][] TABLE_COLUMNS = {
			{ "FORECAST_AMP", Types.DOUBLE },
			{ "FORECAST_BESTPRICE", Types.DOUBLE },
			{ "NA_PROJ_DETAILS_SID", Types.INTEGER },
			{ "BASE_YEAR_CPI", Types.DOUBLE },
			{ "USER_ID", Types.INTEGER },
			{ "LAST_MODIFIED_DATE", Types.TIMESTAMP },
			{ "ITEM_MASTER_SID", Types.INTEGER },
			{ "WAC_PRICE", Types.DOUBLE },
			{ "BASE_YEAR_AMP", Types.DOUBLE },
			{ "SESSION_ID", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("FORECAST_AMP", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("FORECAST_BESTPRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("NA_PROJ_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BASE_YEAR_CPI", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("USER_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("LAST_MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ITEM_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("WAC_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("BASE_YEAR_AMP", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("SESSION_ID", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table ST_NEW_NDC (FORECAST_AMP DOUBLE,FORECAST_BESTPRICE DOUBLE,NA_PROJ_DETAILS_SID INTEGER not null IDENTITY,BASE_YEAR_CPI DOUBLE,USER_ID INTEGER not null IDENTITY,LAST_MODIFIED_DATE DATE null,ITEM_MASTER_SID INTEGER not null IDENTITY,WAC_PRICE DOUBLE,BASE_YEAR_AMP DOUBLE,SESSION_ID INTEGER not null IDENTITY,primary key (NA_PROJ_DETAILS_SID, USER_ID, ITEM_MASTER_SID, SESSION_ID))";
	public static final String TABLE_SQL_DROP = "drop table ST_NEW_NDC";
	public static final String ORDER_BY_JPQL = " ORDER BY stNewNdc.id.naProjDetailsSid ASC, stNewNdc.id.userId ASC, stNewNdc.id.itemMasterSid ASC, stNewNdc.id.sessionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ST_NEW_NDC.NA_PROJ_DETAILS_SID ASC, ST_NEW_NDC.USER_ID ASC, ST_NEW_NDC.ITEM_MASTER_SID ASC, ST_NEW_NDC.SESSION_ID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.StNewNdc"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.StNewNdc"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.StNewNdc"));

	public StNewNdcModelImpl() {
	}

	@Override
	public StNewNdcPK getPrimaryKey() {
		return new StNewNdcPK(_naProjDetailsSid, _userId, _itemMasterSid,
			_sessionId);
	}

	@Override
	public void setPrimaryKey(StNewNdcPK primaryKey) {
		setNaProjDetailsSid(primaryKey.naProjDetailsSid);
		setUserId(primaryKey.userId);
		setItemMasterSid(primaryKey.itemMasterSid);
		setSessionId(primaryKey.sessionId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new StNewNdcPK(_naProjDetailsSid, _userId, _itemMasterSid,
			_sessionId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((StNewNdcPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return StNewNdc.class;
	}

	@Override
	public String getModelClassName() {
		return StNewNdc.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("forecastAmp", getForecastAmp());
		attributes.put("forecastBestprice", getForecastBestprice());
		attributes.put("naProjDetailsSid", getNaProjDetailsSid());
		attributes.put("baseYearCpi", getBaseYearCpi());
		attributes.put("userId", getUserId());
		attributes.put("lastModifiedDate", getLastModifiedDate());
		attributes.put("itemMasterSid", getItemMasterSid());
		attributes.put("wacPrice", getWacPrice());
		attributes.put("baseYearAmp", getBaseYearAmp());
		attributes.put("sessionId", getSessionId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Double forecastAmp = (Double)attributes.get("forecastAmp");

		if (forecastAmp != null) {
			setForecastAmp(forecastAmp);
		}

		Double forecastBestprice = (Double)attributes.get("forecastBestprice");

		if (forecastBestprice != null) {
			setForecastBestprice(forecastBestprice);
		}

		Integer naProjDetailsSid = (Integer)attributes.get("naProjDetailsSid");

		if (naProjDetailsSid != null) {
			setNaProjDetailsSid(naProjDetailsSid);
		}

		Double baseYearCpi = (Double)attributes.get("baseYearCpi");

		if (baseYearCpi != null) {
			setBaseYearCpi(baseYearCpi);
		}

		Integer userId = (Integer)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date lastModifiedDate = (Date)attributes.get("lastModifiedDate");

		if (lastModifiedDate != null) {
			setLastModifiedDate(lastModifiedDate);
		}

		Integer itemMasterSid = (Integer)attributes.get("itemMasterSid");

		if (itemMasterSid != null) {
			setItemMasterSid(itemMasterSid);
		}

		Double wacPrice = (Double)attributes.get("wacPrice");

		if (wacPrice != null) {
			setWacPrice(wacPrice);
		}

		Double baseYearAmp = (Double)attributes.get("baseYearAmp");

		if (baseYearAmp != null) {
			setBaseYearAmp(baseYearAmp);
		}

		Integer sessionId = (Integer)attributes.get("sessionId");

		if (sessionId != null) {
			setSessionId(sessionId);
		}
	}

	@Override
	public double getForecastAmp() {
		return _forecastAmp;
	}

	@Override
	public void setForecastAmp(double forecastAmp) {
		_forecastAmp = forecastAmp;
	}

	@Override
	public double getForecastBestprice() {
		return _forecastBestprice;
	}

	@Override
	public void setForecastBestprice(double forecastBestprice) {
		_forecastBestprice = forecastBestprice;
	}

	@Override
	public int getNaProjDetailsSid() {
		return _naProjDetailsSid;
	}

	@Override
	public void setNaProjDetailsSid(int naProjDetailsSid) {
		_naProjDetailsSid = naProjDetailsSid;
	}

	@Override
	public double getBaseYearCpi() {
		return _baseYearCpi;
	}

	@Override
	public void setBaseYearCpi(double baseYearCpi) {
		_baseYearCpi = baseYearCpi;
	}

	@Override
	public int getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(int userId) {
		_userId = userId;
	}

	@Override
	public Date getLastModifiedDate() {
		return _lastModifiedDate;
	}

	@Override
	public void setLastModifiedDate(Date lastModifiedDate) {
		_lastModifiedDate = lastModifiedDate;
	}

	@Override
	public int getItemMasterSid() {
		return _itemMasterSid;
	}

	@Override
	public void setItemMasterSid(int itemMasterSid) {
		_itemMasterSid = itemMasterSid;
	}

	@Override
	public double getWacPrice() {
		return _wacPrice;
	}

	@Override
	public void setWacPrice(double wacPrice) {
		_wacPrice = wacPrice;
	}

	@Override
	public double getBaseYearAmp() {
		return _baseYearAmp;
	}

	@Override
	public void setBaseYearAmp(double baseYearAmp) {
		_baseYearAmp = baseYearAmp;
	}

	@Override
	public int getSessionId() {
		return _sessionId;
	}

	@Override
	public void setSessionId(int sessionId) {
		_sessionId = sessionId;
	}

	@Override
	public StNewNdc toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StNewNdc)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StNewNdcImpl stNewNdcImpl = new StNewNdcImpl();

		stNewNdcImpl.setForecastAmp(getForecastAmp());
		stNewNdcImpl.setForecastBestprice(getForecastBestprice());
		stNewNdcImpl.setNaProjDetailsSid(getNaProjDetailsSid());
		stNewNdcImpl.setBaseYearCpi(getBaseYearCpi());
		stNewNdcImpl.setUserId(getUserId());
		stNewNdcImpl.setLastModifiedDate(getLastModifiedDate());
		stNewNdcImpl.setItemMasterSid(getItemMasterSid());
		stNewNdcImpl.setWacPrice(getWacPrice());
		stNewNdcImpl.setBaseYearAmp(getBaseYearAmp());
		stNewNdcImpl.setSessionId(getSessionId());

		stNewNdcImpl.resetOriginalValues();

		return stNewNdcImpl;
	}

	@Override
	public int compareTo(StNewNdc stNewNdc) {
		StNewNdcPK primaryKey = stNewNdc.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StNewNdc)) {
			return false;
		}

		StNewNdc stNewNdc = (StNewNdc)obj;

		StNewNdcPK primaryKey = stNewNdc.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<StNewNdc> toCacheModel() {
		StNewNdcCacheModel stNewNdcCacheModel = new StNewNdcCacheModel();

		stNewNdcCacheModel.stNewNdcPK = getPrimaryKey();

		stNewNdcCacheModel.forecastAmp = getForecastAmp();

		stNewNdcCacheModel.forecastBestprice = getForecastBestprice();

		stNewNdcCacheModel.naProjDetailsSid = getNaProjDetailsSid();

		stNewNdcCacheModel.baseYearCpi = getBaseYearCpi();

		stNewNdcCacheModel.userId = getUserId();

		Date lastModifiedDate = getLastModifiedDate();

		if (lastModifiedDate != null) {
			stNewNdcCacheModel.lastModifiedDate = lastModifiedDate.getTime();
		}
		else {
			stNewNdcCacheModel.lastModifiedDate = Long.MIN_VALUE;
		}

		stNewNdcCacheModel.itemMasterSid = getItemMasterSid();

		stNewNdcCacheModel.wacPrice = getWacPrice();

		stNewNdcCacheModel.baseYearAmp = getBaseYearAmp();

		stNewNdcCacheModel.sessionId = getSessionId();

		return stNewNdcCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{forecastAmp=");
		sb.append(getForecastAmp());
		sb.append(", forecastBestprice=");
		sb.append(getForecastBestprice());
		sb.append(", naProjDetailsSid=");
		sb.append(getNaProjDetailsSid());
		sb.append(", baseYearCpi=");
		sb.append(getBaseYearCpi());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", lastModifiedDate=");
		sb.append(getLastModifiedDate());
		sb.append(", itemMasterSid=");
		sb.append(getItemMasterSid());
		sb.append(", wacPrice=");
		sb.append(getWacPrice());
		sb.append(", baseYearAmp=");
		sb.append(getBaseYearAmp());
		sb.append(", sessionId=");
		sb.append(getSessionId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.StNewNdc");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>forecastAmp</column-name><column-value><![CDATA[");
		sb.append(getForecastAmp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastBestprice</column-name><column-value><![CDATA[");
		sb.append(getForecastBestprice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>naProjDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getNaProjDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>baseYearCpi</column-name><column-value><![CDATA[");
		sb.append(getBaseYearCpi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getLastModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
		sb.append(getItemMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wacPrice</column-name><column-value><![CDATA[");
		sb.append(getWacPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>baseYearAmp</column-name><column-value><![CDATA[");
		sb.append(getBaseYearAmp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sessionId</column-name><column-value><![CDATA[");
		sb.append(getSessionId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = StNewNdc.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			StNewNdc.class
		};
	private double _forecastAmp;
	private double _forecastBestprice;
	private int _naProjDetailsSid;
	private double _baseYearCpi;
	private int _userId;
	private Date _lastModifiedDate;
	private int _itemMasterSid;
	private double _wacPrice;
	private double _baseYearAmp;
	private int _sessionId;
	private StNewNdc _escapedModel;
}