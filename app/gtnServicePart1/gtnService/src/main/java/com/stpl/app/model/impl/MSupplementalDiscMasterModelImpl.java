/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.MSupplementalDiscMaster;
import com.stpl.app.model.MSupplementalDiscMasterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MSupplementalDiscMaster service. Represents a row in the &quot;M_SUPPLEMENTAL_DISC_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MSupplementalDiscMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MSupplementalDiscMasterImpl}.
 * </p>
 *
 * @author
 * @see MSupplementalDiscMasterImpl
 * @see MSupplementalDiscMaster
 * @see MSupplementalDiscMasterModel
 * @generated
 */
@ProviderType
public class MSupplementalDiscMasterModelImpl extends BaseModelImpl<MSupplementalDiscMaster>
	implements MSupplementalDiscMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a m supplemental disc master model instance should use the {@link MSupplementalDiscMaster} interface instead.
	 */
	public static final String TABLE_NAME = "M_SUPPLEMENTAL_DISC_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ACTUAL_DISCOUNT_RATE2", Types.DOUBLE },
			{ "ACTUAL_DISCOUNT_RATE1", Types.DOUBLE },
			{ "MARKET_TYPE", Types.VARCHAR },
			{ "ACTUAL_METHODOLOGY", Types.VARCHAR },
			{ "ACTUAL_CONTRACT_PRICE", Types.DOUBLE },
			{ "PROJECTION_DETAILS_SID", Types.INTEGER },
			{ "ACTUAL_DISCOUNT", Types.DOUBLE },
			{ "CHECK_RECORD", Types.INTEGER },
			{ "CONTRACT_END_DATE", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ACTUAL_DISCOUNT_RATE2", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ACTUAL_DISCOUNT_RATE1", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("MARKET_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACTUAL_METHODOLOGY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACTUAL_CONTRACT_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PROJECTION_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ACTUAL_DISCOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("CHECK_RECORD", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CONTRACT_END_DATE", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table M_SUPPLEMENTAL_DISC_MASTER (ACTUAL_DISCOUNT_RATE2 DOUBLE,ACTUAL_DISCOUNT_RATE1 DOUBLE,MARKET_TYPE VARCHAR(75) null,ACTUAL_METHODOLOGY VARCHAR(75) null,ACTUAL_CONTRACT_PRICE DOUBLE,PROJECTION_DETAILS_SID INTEGER not null primary key IDENTITY,ACTUAL_DISCOUNT DOUBLE,CHECK_RECORD INTEGER,CONTRACT_END_DATE DATE null)";
	public static final String TABLE_SQL_DROP = "drop table M_SUPPLEMENTAL_DISC_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY mSupplementalDiscMaster.projectionDetailsSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY M_SUPPLEMENTAL_DISC_MASTER.PROJECTION_DETAILS_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.MSupplementalDiscMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.MSupplementalDiscMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.MSupplementalDiscMaster"));

	public MSupplementalDiscMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _projectionDetailsSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setProjectionDetailsSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectionDetailsSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MSupplementalDiscMaster.class;
	}

	@Override
	public String getModelClassName() {
		return MSupplementalDiscMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("actualDiscountRate2", getActualDiscountRate2());
		attributes.put("actualDiscountRate1", getActualDiscountRate1());
		attributes.put("marketType", getMarketType());
		attributes.put("actualMethodology", getActualMethodology());
		attributes.put("actualContractPrice", getActualContractPrice());
		attributes.put("projectionDetailsSid", getProjectionDetailsSid());
		attributes.put("actualDiscount", getActualDiscount());
		attributes.put("checkRecord", getCheckRecord());
		attributes.put("contractEndDate", getContractEndDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Double actualDiscountRate2 = (Double)attributes.get(
				"actualDiscountRate2");

		if (actualDiscountRate2 != null) {
			setActualDiscountRate2(actualDiscountRate2);
		}

		Double actualDiscountRate1 = (Double)attributes.get(
				"actualDiscountRate1");

		if (actualDiscountRate1 != null) {
			setActualDiscountRate1(actualDiscountRate1);
		}

		String marketType = (String)attributes.get("marketType");

		if (marketType != null) {
			setMarketType(marketType);
		}

		String actualMethodology = (String)attributes.get("actualMethodology");

		if (actualMethodology != null) {
			setActualMethodology(actualMethodology);
		}

		Double actualContractPrice = (Double)attributes.get(
				"actualContractPrice");

		if (actualContractPrice != null) {
			setActualContractPrice(actualContractPrice);
		}

		Integer projectionDetailsSid = (Integer)attributes.get(
				"projectionDetailsSid");

		if (projectionDetailsSid != null) {
			setProjectionDetailsSid(projectionDetailsSid);
		}

		Double actualDiscount = (Double)attributes.get("actualDiscount");

		if (actualDiscount != null) {
			setActualDiscount(actualDiscount);
		}

		Integer checkRecord = (Integer)attributes.get("checkRecord");

		if (checkRecord != null) {
			setCheckRecord(checkRecord);
		}

		Date contractEndDate = (Date)attributes.get("contractEndDate");

		if (contractEndDate != null) {
			setContractEndDate(contractEndDate);
		}
	}

	@Override
	public double getActualDiscountRate2() {
		return _actualDiscountRate2;
	}

	@Override
	public void setActualDiscountRate2(double actualDiscountRate2) {
		_actualDiscountRate2 = actualDiscountRate2;
	}

	@Override
	public double getActualDiscountRate1() {
		return _actualDiscountRate1;
	}

	@Override
	public void setActualDiscountRate1(double actualDiscountRate1) {
		_actualDiscountRate1 = actualDiscountRate1;
	}

	@Override
	public String getMarketType() {
		if (_marketType == null) {
			return StringPool.BLANK;
		}
		else {
			return _marketType;
		}
	}

	@Override
	public void setMarketType(String marketType) {
		_marketType = marketType;
	}

	@Override
	public String getActualMethodology() {
		if (_actualMethodology == null) {
			return StringPool.BLANK;
		}
		else {
			return _actualMethodology;
		}
	}

	@Override
	public void setActualMethodology(String actualMethodology) {
		_actualMethodology = actualMethodology;
	}

	@Override
	public double getActualContractPrice() {
		return _actualContractPrice;
	}

	@Override
	public void setActualContractPrice(double actualContractPrice) {
		_actualContractPrice = actualContractPrice;
	}

	@Override
	public int getProjectionDetailsSid() {
		return _projectionDetailsSid;
	}

	@Override
	public void setProjectionDetailsSid(int projectionDetailsSid) {
		_projectionDetailsSid = projectionDetailsSid;
	}

	@Override
	public double getActualDiscount() {
		return _actualDiscount;
	}

	@Override
	public void setActualDiscount(double actualDiscount) {
		_actualDiscount = actualDiscount;
	}

	@Override
	public int getCheckRecord() {
		return _checkRecord;
	}

	@Override
	public void setCheckRecord(int checkRecord) {
		_checkRecord = checkRecord;
	}

	@Override
	public Date getContractEndDate() {
		return _contractEndDate;
	}

	@Override
	public void setContractEndDate(Date contractEndDate) {
		_contractEndDate = contractEndDate;
	}

	@Override
	public MSupplementalDiscMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MSupplementalDiscMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MSupplementalDiscMasterImpl mSupplementalDiscMasterImpl = new MSupplementalDiscMasterImpl();

		mSupplementalDiscMasterImpl.setActualDiscountRate2(getActualDiscountRate2());
		mSupplementalDiscMasterImpl.setActualDiscountRate1(getActualDiscountRate1());
		mSupplementalDiscMasterImpl.setMarketType(getMarketType());
		mSupplementalDiscMasterImpl.setActualMethodology(getActualMethodology());
		mSupplementalDiscMasterImpl.setActualContractPrice(getActualContractPrice());
		mSupplementalDiscMasterImpl.setProjectionDetailsSid(getProjectionDetailsSid());
		mSupplementalDiscMasterImpl.setActualDiscount(getActualDiscount());
		mSupplementalDiscMasterImpl.setCheckRecord(getCheckRecord());
		mSupplementalDiscMasterImpl.setContractEndDate(getContractEndDate());

		mSupplementalDiscMasterImpl.resetOriginalValues();

		return mSupplementalDiscMasterImpl;
	}

	@Override
	public int compareTo(MSupplementalDiscMaster mSupplementalDiscMaster) {
		int primaryKey = mSupplementalDiscMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MSupplementalDiscMaster)) {
			return false;
		}

		MSupplementalDiscMaster mSupplementalDiscMaster = (MSupplementalDiscMaster)obj;

		int primaryKey = mSupplementalDiscMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MSupplementalDiscMaster> toCacheModel() {
		MSupplementalDiscMasterCacheModel mSupplementalDiscMasterCacheModel = new MSupplementalDiscMasterCacheModel();

		mSupplementalDiscMasterCacheModel.actualDiscountRate2 = getActualDiscountRate2();

		mSupplementalDiscMasterCacheModel.actualDiscountRate1 = getActualDiscountRate1();

		mSupplementalDiscMasterCacheModel.marketType = getMarketType();

		String marketType = mSupplementalDiscMasterCacheModel.marketType;

		if ((marketType != null) && (marketType.length() == 0)) {
			mSupplementalDiscMasterCacheModel.marketType = null;
		}

		mSupplementalDiscMasterCacheModel.actualMethodology = getActualMethodology();

		String actualMethodology = mSupplementalDiscMasterCacheModel.actualMethodology;

		if ((actualMethodology != null) && (actualMethodology.length() == 0)) {
			mSupplementalDiscMasterCacheModel.actualMethodology = null;
		}

		mSupplementalDiscMasterCacheModel.actualContractPrice = getActualContractPrice();

		mSupplementalDiscMasterCacheModel.projectionDetailsSid = getProjectionDetailsSid();

		mSupplementalDiscMasterCacheModel.actualDiscount = getActualDiscount();

		mSupplementalDiscMasterCacheModel.checkRecord = getCheckRecord();

		Date contractEndDate = getContractEndDate();

		if (contractEndDate != null) {
			mSupplementalDiscMasterCacheModel.contractEndDate = contractEndDate.getTime();
		}
		else {
			mSupplementalDiscMasterCacheModel.contractEndDate = Long.MIN_VALUE;
		}

		return mSupplementalDiscMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{actualDiscountRate2=");
		sb.append(getActualDiscountRate2());
		sb.append(", actualDiscountRate1=");
		sb.append(getActualDiscountRate1());
		sb.append(", marketType=");
		sb.append(getMarketType());
		sb.append(", actualMethodology=");
		sb.append(getActualMethodology());
		sb.append(", actualContractPrice=");
		sb.append(getActualContractPrice());
		sb.append(", projectionDetailsSid=");
		sb.append(getProjectionDetailsSid());
		sb.append(", actualDiscount=");
		sb.append(getActualDiscount());
		sb.append(", checkRecord=");
		sb.append(getCheckRecord());
		sb.append(", contractEndDate=");
		sb.append(getContractEndDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.MSupplementalDiscMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>actualDiscountRate2</column-name><column-value><![CDATA[");
		sb.append(getActualDiscountRate2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualDiscountRate1</column-name><column-value><![CDATA[");
		sb.append(getActualDiscountRate1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketType</column-name><column-value><![CDATA[");
		sb.append(getMarketType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualMethodology</column-name><column-value><![CDATA[");
		sb.append(getActualMethodology());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualContractPrice</column-name><column-value><![CDATA[");
		sb.append(getActualContractPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getProjectionDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualDiscount</column-name><column-value><![CDATA[");
		sb.append(getActualDiscount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkRecord</column-name><column-value><![CDATA[");
		sb.append(getCheckRecord());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractEndDate</column-name><column-value><![CDATA[");
		sb.append(getContractEndDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MSupplementalDiscMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MSupplementalDiscMaster.class
		};
	private double _actualDiscountRate2;
	private double _actualDiscountRate1;
	private String _marketType;
	private String _actualMethodology;
	private double _actualContractPrice;
	private int _projectionDetailsSid;
	private double _actualDiscount;
	private int _checkRecord;
	private Date _contractEndDate;
	private MSupplementalDiscMaster _escapedModel;
}