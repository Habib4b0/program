<?xml version="1.0"?>
<custom-sql>
 
    
    
      <sql id="PPAGenerate">
		<![CDATA[
       
        
DECLARE @RELATIONSHIPBUILDERSHIPSID INT = ?
       ,@PROJECTIONMASTERSID INT = ?
       ,@HIERARCHY_NO VARCHAR(100) = '?%'
       ,@SESSION_ID INT = ?
       ,@USER_ID INT = ?
       ,@LEVEL_NO INT = ?
       ,@active INT
       ,@inactive INT
       ,@START_DATE INT
       ,@END_DATE INT

SELECT @active = helper_table_sid
FROM helper_table
WHERE description = 'active'

SELECT @inactive = helper_table_sid
FROM helper_table
WHERE description = 'Inactive';

SELECT @START_DATE = MIN(SNP.PERIOD_SID)
FROM ST_NM_PPA_PROJECTION SNP
JOIN PROJECTION_DETAILS PD ON PD.PROJECTION_DETAILS_SID = SNP.PROJECTION_DETAILS_SID
WHERE USER_ID = @USER_ID
       AND SESSION_ID = @SESSION_ID
       AND PD.PROJECTION_MASTER_SID = @PROJECTIONMASTERSID

SELECT @END_DATE = MAX(SNP.PERIOD_SID)
FROM ST_NM_PPA_PROJECTION SNP
JOIN PROJECTION_DETAILS PD ON PD.PROJECTION_DETAILS_SID = SNP.PROJECTION_DETAILS_SID
WHERE USER_ID = @USER_ID
       AND SESSION_ID = @SESSION_ID
       AND PD.PROJECTION_MASTER_SID = @PROJECTIONMASTERSID;

WITH AVG_VALUE
AS (
       SELECT PD.PROJECTION_DETAILS_SID
              ,P.QUARTER
              ,P."YEAR"
              ,AVG(NEP) NEP
              ,AVG(MAX_INCREMENTAL_CHANGE) MAX_INCREMENTAL_CHANGE
              ,avg(PRICE_TOLERANCE) PRICE_TOLERANCE
       FROM ST_NM_PPA_PROJECTION SNP
       JOIN PROJECTION_DETAILS PD ON PD.PROJECTION_DETAILS_SID = SNP.PROJECTION_DETAILS_SID
       JOIN PERIOD P ON P.PERIOD_SID = SNP.PERIOD_SID
       WHERE USER_ID = @USER_ID
              AND SESSION_ID = @SESSION_ID
              AND PD.PROJECTION_MASTER_SID = @PROJECTIONMASTERSID
       GROUP BY PD.PROJECTION_DETAILS_SID
              ,P.QUARTER
              ,P."YEAR"
       )
       ,SUM_VALUE
AS (
       SELECT QUARTER
              ,YEAR
              ,SUM(NEP) NEP
              ,SUM(MAX_INCREMENTAL_CHANGE) MAX_INCREMENTAL_CHANGE
              ,sum(PRICE_TOLERANCE) PRICE_TOLERANCE
       FROM AVG_VALUE
       GROUP BY QUARTER
              ,YEAR
       )
       ,PRICE_TOL_TYPE
AS (
       SELECT count(DISTINCT CASE 
                           WHEN ht.DESCRIPTION IN (
                                         '%'
                                         ,'percent'
                                         )
                                  THEN 1
                           WHEN ht.DESCRIPTION = 'dollar'
                                  THEN 2
                           END) total
              ,QUARTER
              ,YEAR
       FROM ST_NM_PPA_PROJECTION SNP
       JOIN PROJECTION_DETAILS PD ON PD.PROJECTION_DETAILS_SID = SNP.PROJECTION_DETAILS_SID
       JOIN PERIOD P ON P.PERIOD_SID = SNP.PERIOD_SID
       LEFT JOIN HELPER_TABLE ht ON ht.HELPER_TABLE_SID = snp.PRICE_TOLERANCE_TYPE
       WHERE USER_ID = @USER_ID
              AND SESSION_ID = @SESSION_ID
              AND PD.PROJECTION_MASTER_SID = @PROJECTIONMASTERSID
       GROUP BY year
              ,QUARTER
       )
       ,REST_CAL
AS (
SELECT RLD1.LEVEL_NO AS level_no
       ,RLD1.LEVEL_NAME
       ,RLD1.RELATIONSHIP_LEVEL_VALUES AS rlv
       ,p.QUARTER
       ,p."YEAR"
       ,Max(A.USER_GROUP) AS USER_GROUP
       ,CASE 
              WHEN @active > @inactive
                     THEN Max(A.PRICE_PROTECTION_STATUS)
              ELSE min(A.PRICE_PROTECTION_STATUS)
              END AS PRICE_PROTECTION_STATUS
       ,MIN(A.PRICE_PROTECTION_START_DATE) AS PRICE_PROTECTION_START_DATE
       ,Max(A.PRICE_PROTECTION_END_DATE) AS PRICE_PROTECTION_END_DATE
       ,RLD1.HIERARCHY_NO
       ,Sum(CASE (CHECK_RECORD)
                     WHEN 1
                           THEN 1
                     ELSE 0
                     END) / 3 AS CHECK_RECORD
       ,Count(DISTINCT pd.PROJECTION_DETAILS_SID) AS COUNT1
       ,Max(IPQ.ITEM_PRICING_QUALIFIER_SID) AS PRICE_PROTECTION_PRICE_TYPE
       ,Max(NEP_FORMULA) AS NEP_FORMULA
       ,Max(BASE_PRICE_TYPE) AS BASE_PRICE_TYPE
       ,Avg(BASE_PRICE_MANUAL) AS BASE_PRICE_MANUAL
       ,Max(BASE_PRICE_DATE) AS BASE_PRICE_DATE
       ,Max(BASE_PRICE_PRICE_TYPE) AS BASE_PRICE_PRICE_TYPE
       ,Max(NET_BASE_PRICE) AS NET_BASE_PRICE
       ,Max(NET_BASE_PRICE_FORMULA) AS NET_BASE_PRICE_FORMULA
       ,Max(SUBSEQUENT_PERIOD_PRICE_TYPE) AS SUBSEQUENT_PERIOD_PRICE_TYPE
       ,Max(NET_SUBSEQUENT_PERIOD_PRICE) AS NET_SUBSEQUENT_PERIOD_PRICE
       ,Max(NET_SUBSEQUENT_PERIOD_PRICE_FORMULA) AS NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
       ,Max(PRICE_TOLERANCE_INTERVAL) AS PRICE_TOLERANCE_INTERVAL
       ,Max(PRICE_TOLERANCE_FREQUENCY) AS PRICE_TOLERANCE_FREQUENCY
       ,Max(PRICE_TOLERANCE_TYPE) AS PRICE_TOLERANCE_TYPE
       ,Avg(PRICE_TOLERANCE) AS PRICE_TOLERANCE
       ,Max(RESET_ELIGIBLE) AS RESET_ELIGIBLE
       ,Max(RESET_TYPE) AS RESET_TYPE
       ,Max(RESET_DATE) AS RESET_DATE
       ,Max(RESET_INTERVAL) AS RESET_INTERVAL
       ,Max(RESET_FREQUENCY) AS RESET_FREQUENCY
       ,Max(RESET_PRICE_TYPE) AS RESET_PRICE_TYPE
       ,Max(NET_RESET_PRICE_TYPE) AS NET_RESET_PRICE_TYPE
       ,Max(NET_RESET_PRICE_FORMULA) AS NET_RESET_PRICE_FORMULA
       ,Max(NET_PRICE_TYPE) AS NET_PRICE_TYPE
       ,Max(NET_PRICE_TYPE_FORMULA) AS NET_PRICE_TYPE_FORMULA
       ,Max(ATTACHED_DATE) ATTACHED_DATE
       ,CASE 
              WHEN count(DISTINCT ipq.ITEM_PRICING_QUALIFIER_SID) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END ITEM_PRICING_QUALIFIER_SID_flag
       ,CASE 
              WHEN count(DISTINCT nep_formula) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS NEP_FORMULA_FLAG
       ,CASE 
              WHEN count(DISTINCT BASE_PRICE_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS BASE_PRICE_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT BASE_PRICE_DATE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS BASE_PRICE_DATE_FLAG
       ,CASE 
              WHEN count(DISTINCT BASE_PRICE_PRICE_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS BASE_PRICE_PRICE_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_BASE_PRICE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS NET_BASE_PRICE_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_BASE_PRICE_FORMULA) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS NET_BASE_PRICE_FORMULA_FLAG
       ,CASE 
              WHEN count(DISTINCT SUBSEQUENT_PERIOD_PRICE_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS SUBSEQUENT_PERIOD_PRICE_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_SUBSEQUENT_PERIOD_PRICE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS NET_SUBSEQUENT_PERIOD_PRICE_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_SUBSEQUENT_PERIOD_PRICE_FORMULA) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS NET_SUBSEQUENT_PERIOD_PRICE_FORMULA_FLAG
       ,CASE 
              WHEN count(DISTINCT PRICE_TOLERANCE_INTERVAL) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS PRICE_TOLERANCE_INTERVAL_FLAG
       ,CASE 
              WHEN count(DISTINCT PRICE_TOLERANCE_FREQUENCY) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS PRICE_TOLERANCE_FREQUENCY_FLAG
       ,CASE 
              WHEN count(DISTINCT PRICE_TOLERANCE_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END PRICE_TOLERANCE_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT PRICE_TOLERANCE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END PRICE_TOLERANCE_FLAG
       ,CASE 
              WHEN count(DISTINCT RESET_ELIGIBLE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END RESET_ELIGIBLE_FLAG
       ,CASE 
              WHEN count(DISTINCT RESET_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END RESET_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT RESET_DATE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END RESET_DATE_FLAG
       ,CASE 
              WHEN count(DISTINCT RESET_INTERVAL) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END RESET_INTERVAL_FLAG
       ,CASE 
              WHEN count(DISTINCT RESET_FREQUENCY) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END RESET_FREQUENCY_FLAG
       ,CASE 
              WHEN count(DISTINCT RESET_PRICE_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END RESET_PRICE_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_RESET_PRICE_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END NET_RESET_PRICE_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_RESET_PRICE_FORMULA) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END NET_RESET_PRICE_FORMULA_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_PRICE_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END NET_PRICE_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_PRICE_TYPE_FORMULA) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END NET_PRICE_TYPE_FORMULA_FLAG
              ,MAX(NBP.NET_SALES_FORMULA_NO) NET_BASE_PRICE_FORMULA_NO
              ,MAX(NEP.NET_SALES_FORMULA_NO) NEP_FORMULA_NO
              ,MAX(NSPP.NET_SALES_FORMULA_NO) NET_SUBSEQUENT_PERIOD_PRICE_FORMULA_NO
              ,MAX(NRT.NET_SALES_FORMULA_NO) NET_PRICE_TYPE_FORMULA_NO
              ,MAX(NRP.NET_SALES_FORMULA_NO) NET_RESET_PRICE_FORMULA_NO
              ,CASE 
                     WHEN COUNT(DISTINCT NBP.NET_SALES_FORMULA_NO) IN (
                                  1
                                  ,0
                                  )
                           THEN 0
                     ELSE 1
                     END NET_BASE_PRICE_FORMULA_NO_FLAG
              ,CASE 
                     WHEN COUNT(DISTINCT NEP.NET_SALES_FORMULA_NO) IN (
                                  1
                                  ,0
                                  )
                           THEN 0
                     ELSE 1
                     END NEP_FORMULA_NO_FLAG
              ,CASE 
                     WHEN COUNT(DISTINCT NSPP.NET_SALES_FORMULA_NO) IN (
                                  1
                                  ,0
                                  )
                           THEN 0
                     ELSE 1
                     END NET_SUBSEQUENT_PERIOD_PRICE_FORMULA_NO_FLAG
              ,CASE 
                     WHEN COUNT(DISTINCT NRT.NET_SALES_FORMULA_NO) IN (
                                  1
                                  ,0
                                  )
                           THEN 0
                     ELSE 1
                     END NET_PRICE_TYPE_FORMULA_NO_FLAG
              ,CASE 
                     WHEN COUNT(DISTINCT NRP.NET_SALES_FORMULA_NO) IN (
                                  1
                                  ,0
                                  )
                           THEN 0
                     ELSE 1
                     END NET_RESET_PRICE_FORMULA_NO_FLAG
FROM RELATIONSHIP_LEVEL_DEFINITION RLD
JOIN PROJECTION_CUST_HIERARCHY PCH ON PCH.PROJECTION_MASTER_SID = @PROJECTIONMASTERSID
       AND RLD.RELATIONSHIP_LEVEL_SID = PCH.RELATIONSHIP_LEVEL_SID
       AND RLD.RELATIONSHIP_BUILDER_SID = @RELATIONSHIPBUILDERSHIPSID
JOIN RELATIONSHIP_LEVEL_DEFINITION RLD1 ON RLD1.HIERARCHY_NO LIKE @HIERARCHY_NO
       AND RLD.RELATIONSHIP_BUILDER_SID = RLD1.RELATIONSHIP_BUILDER_SID
       AND RLD.HIERARCHY_NO LIKE RLD1.HIERARCHY_NO + '%'
       AND RLD1.LEVEL_NO = @LEVEL_NO
       AND RLD1.HIERARCHY_NO IN (?)
JOIN CCP_MAP CCPMAP ON CCPMAP.RELATIONSHIP_LEVEL_SID = RLD.RELATIONSHIP_LEVEL_SID
JOIN PROJECTION_DETAILS PD ON PD.CCP_DETAILS_SID = CCPMAP.CCP_DETAILS_SID
JOIN ST_NM_PPA_PROJECTION_MASTER A ON pd.PROJECTION_DETAILS_SID = A.PROJECTION_DETAILS_SID
JOIN ST_NM_PPA_PROJECTION PA ON pd.PROJECTION_DETAILS_SID = PA.PROJECTION_DETAILS_SID
JOIN PERIOD p ON p.period_sid = PA.PERIOD_SID
       AND A.SESSION_ID = PA.SESSION_ID
       AND A.USER_ID = PA.USER_ID
       AND A.session_id = @SESSION_ID
       AND A.user_id = @USER_ID
LEFT JOIN NET_SALES_FORMULA_MASTER NBP ON NBP.NET_SALES_FORMULA_MASTER_SID = PA.NET_BASE_PRICE_FORMULA
LEFT JOIN NET_SALES_FORMULA_MASTER NEP ON NEP.NET_SALES_FORMULA_MASTER_SID = PA.NEP_FORMULA
LEFT JOIN NET_SALES_FORMULA_MASTER NSPP ON NSPP.NET_SALES_FORMULA_MASTER_SID = PA.NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
LEFT JOIN NET_SALES_FORMULA_MASTER NRT ON NRT.NET_SALES_FORMULA_MASTER_SID = PA.NET_PRICE_TYPE_FORMULA
LEFT JOIN NET_SALES_FORMULA_MASTER NRP ON NRP.NET_SALES_FORMULA_MASTER_SID = PA.NET_RESET_PRICE_FORMULA
LEFT JOIN ITEM_PRICING_QUALIFIER IPQ ON IPQ.ITEM_PRICING_QUALIFIER_SID = PA.ITEM_PRICING_QUALIFIER_SID
GROUP BY RLD1.RELATIONSHIP_LEVEL_VALUES
       ,p.QUARTER
       ,RLD1.LEVEL_NO
       ,p."YEAR"
       ,RLD1.HIERARCHY_NO
       ,RLD1.LEVEL_NAME
       
        )
SELECT Distinct level_no
       ,LEVEL_NAME
       ,rlv
       ,rc.QUARTER
       ,rc.YEAR
       ,USER_GROUP
       ,PRICE_PROTECTION_STATUS
       ,PRICE_PROTECTION_START_DATE
       ,PRICE_PROTECTION_END_DATE
       ,HIERARCHY_NO
       ,CHECK_RECORD
       ,COUNT1
       ,PRICE_PROTECTION_PRICE_TYPE
       ,NEP
       ,NEP_FORMULA
       ,BASE_PRICE_TYPE
       ,BASE_PRICE_MANUAL
       ,BASE_PRICE_DATE
       ,BASE_PRICE_PRICE_TYPE
       ,NET_BASE_PRICE
       ,NET_BASE_PRICE_FORMULA
       ,SUBSEQUENT_PERIOD_PRICE_TYPE
       ,NET_SUBSEQUENT_PERIOD_PRICE
       ,NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
       ,PRICE_TOLERANCE_INTERVAL
       ,PRICE_TOLERANCE_FREQUENCY
       ,PRICE_TOLERANCE_TYPE
       ,CASE 
              WHEN ht.DESCRIPTION IN (
                           '%'
                           ,'percent'
                           )
                     THEN RC.PRICE_TOLERANCE
              WHEN ht.DESCRIPTION = 'dollar'
                     THEN SV.PRICE_TOLERANCE
              END PRICE_TOLERANCE

       ,MAX_INCREMENTAL_CHANGE
       ,RESET_ELIGIBLE
       ,RESET_TYPE
       ,RESET_DATE
       ,RESET_INTERVAL
       ,RESET_FREQUENCY
       ,RESET_PRICE_TYPE
       ,NET_RESET_PRICE_TYPE
       ,NET_RESET_PRICE_FORMULA
       ,NET_PRICE_TYPE
       ,NET_PRICE_TYPE_FORMULA
       ,ATTACHED_DATE
       ,ITEM_PRICING_QUALIFIER_SID_flag
       ,NEP_FORMULA_FLAG
       ,BASE_PRICE_TYPE_FLAG
       ,BASE_PRICE_DATE_FLAG
       ,BASE_PRICE_PRICE_TYPE_FLAG
       ,NET_BASE_PRICE_FLAG
       ,NET_BASE_PRICE_FORMULA_FLAG
       ,SUBSEQUENT_PERIOD_PRICE_TYPE_FLAG
       ,NET_SUBSEQUENT_PERIOD_PRICE_FLAG
       ,NET_SUBSEQUENT_PERIOD_PRICE_FORMULA_FLAG
       ,PRICE_TOLERANCE_INTERVAL_FLAG
       ,PRICE_TOLERANCE_FREQUENCY_FLAG
       ,PRICE_TOLERANCE_TYPE_FLAG
       ,PRICE_TOLERANCE_FLAG = CASE 
              WHEN PTT.TOTAL = 2
                     THEN 1
              ELSE PRICE_TOLERANCE_FLAG
              END
       ,RESET_ELIGIBLE_FLAG
       ,RESET_TYPE_FLAG
       ,RESET_DATE_FLAG
       ,RESET_INTERVAL_FLAG
       ,RESET_FREQUENCY_FLAG
       ,RESET_PRICE_TYPE_FLAG
       ,NET_RESET_PRICE_TYPE_FLAG
       ,NET_RESET_PRICE_FORMULA_FLAG
       ,NET_PRICE_TYPE_FLAG
       ,NET_PRICE_TYPE_FORMULA_FLAG
       ,NET_BASE_PRICE_FORMULA_NO
       ,NEP_FORMULA_NO
       ,NET_SUBSEQUENT_PERIOD_PRICE_FORMULA_NO
       ,NET_PRICE_TYPE_FORMULA_NO
       ,NET_RESET_PRICE_FORMULA_NO
       ,NET_BASE_PRICE_FORMULA_NO_FLAG
       ,NEP_FORMULA_NO_FLAG
       ,NET_SUBSEQUENT_PERIOD_PRICE_FORMULA_NO_FLAG
       ,NET_PRICE_TYPE_FORMULA_NO_FLAG
       ,NET_RESET_PRICE_FORMULA_NO_FLAG

FROM REST_CAL RC
JOIN SUM_VALUE SV ON SV.YEAR = RC.YEAR
       AND SV.QUARTER = RC.QUARTER
LEFT JOIN helper_table ht ON ht.helper_table_sid = rc.PRICE_TOLERANCE_TYPE
JOIN price_tol_type PTT ON PTT.QUARTER = RC.QUARTER
JOIN PERIOD P ON P.QUARTER = RC.QUARTER
       AND P.YEAR = RC.YEAR
WHERE P.PERIOD_SID BETWEEN COALESCE(NULLIF(?, 0), @START_DATE)
              AND COALESCE(NULLIF(?, 0), @END_DATE)

ORDER BY LEVEL_NO
       ,rlv
       ,YEAR
       ,quarter

		]]>
    </sql>
    
      <sql id="PPAGenerate-For-Group">
        <![CDATA[ 
         DECLARE @RELATIONSHIPBUILDERSHIPSID INT = ?
       ,@PROJECTIONMASTERSID INT = ?
       ,@HIERARCHY_NO VARCHAR(100) = '?%'
       ,@SESSION_ID INT = ?
       ,@USER_ID INT = ?
       ,@LEVEL_NO INT = ?
       ,@USER_GROUP                 VARCHAR(50)='?'
       ,@active INT
       ,@inactive INT
       ,@START_DATE INT
       ,@END_DATE INT

SELECT @active = helper_table_sid
FROM helper_table
WHERE description = 'active'

SELECT @inactive = helper_table_sid
FROM helper_table
WHERE description = 'Inactive';

SELECT @START_DATE = MIN(SNP.PERIOD_SID)
FROM ST_NM_PPA_PROJECTION SNP
JOIN PROJECTION_DETAILS PD ON PD.PROJECTION_DETAILS_SID = SNP.PROJECTION_DETAILS_SID
WHERE USER_ID = @USER_ID
       AND SESSION_ID = @SESSION_ID
       AND PD.PROJECTION_MASTER_SID = @PROJECTIONMASTERSID

SELECT @END_DATE = MAX(SNP.PERIOD_SID)
FROM ST_NM_PPA_PROJECTION SNP
JOIN PROJECTION_DETAILS PD ON PD.PROJECTION_DETAILS_SID = SNP.PROJECTION_DETAILS_SID
WHERE USER_ID = @USER_ID
       AND SESSION_ID = @SESSION_ID
       AND PD.PROJECTION_MASTER_SID = @PROJECTIONMASTERSID;

WITH AVG_VALUE
AS (
       SELECT PD.PROJECTION_DETAILS_SID
              ,P.QUARTER
              ,P."YEAR"
              ,AVG(NEP) NEP
              ,AVG(MAX_INCREMENTAL_CHANGE) MAX_INCREMENTAL_CHANGE
              ,avg(PRICE_TOLERANCE) PRICE_TOLERANCE
       FROM ST_NM_PPA_PROJECTION SNP
       JOIN PROJECTION_DETAILS PD ON PD.PROJECTION_DETAILS_SID = SNP.PROJECTION_DETAILS_SID
       JOIN PERIOD P ON P.PERIOD_SID = SNP.PERIOD_SID
       WHERE USER_ID = @USER_ID
              AND SESSION_ID = @SESSION_ID
              AND PD.PROJECTION_MASTER_SID = @PROJECTIONMASTERSID
       GROUP BY PD.PROJECTION_DETAILS_SID
              ,P.QUARTER
              ,P."YEAR"
       )
       ,SUM_VALUE
AS (
       SELECT QUARTER
              ,YEAR
              ,SUM(NEP) NEP
              ,SUM(MAX_INCREMENTAL_CHANGE) MAX_INCREMENTAL_CHANGE
              ,sum(PRICE_TOLERANCE) PRICE_TOLERANCE
       FROM AVG_VALUE
       GROUP BY QUARTER
              ,YEAR
       )
       ,PRICE_TOL_TYPE
AS (
       SELECT count(DISTINCT CASE 
                           WHEN ht.DESCRIPTION IN (
                                         '%'
                                         ,'percent'
                                         )
                                  THEN 1
                           WHEN ht.DESCRIPTION = 'dollar'
                                  THEN 2
                           END) total
              ,QUARTER
              ,YEAR
       FROM ST_NM_PPA_PROJECTION SNP
       JOIN PROJECTION_DETAILS PD ON PD.PROJECTION_DETAILS_SID = SNP.PROJECTION_DETAILS_SID
       JOIN PERIOD P ON P.PERIOD_SID = SNP.PERIOD_SID
       LEFT JOIN HELPER_TABLE ht ON ht.HELPER_TABLE_SID = snp.PRICE_TOLERANCE_TYPE
       WHERE USER_ID = @USER_ID
              AND SESSION_ID = @SESSION_ID
              AND PD.PROJECTION_MASTER_SID = @PROJECTIONMASTERSID
       GROUP BY year
              ,QUARTER
       )
       ,REST_CAL
AS (
SELECT RLD1.LEVEL_NO AS level_no
       ,RLD1.LEVEL_NAME
       ,RLD1.RELATIONSHIP_LEVEL_VALUES AS rlv
       ,p.QUARTER
       ,p."YEAR"
       ,Max(A.USER_GROUP) AS USER_GROUP
       ,CASE 
              WHEN @active > @inactive
                     THEN Max(A.PRICE_PROTECTION_STATUS)
              ELSE min(A.PRICE_PROTECTION_STATUS)
              END AS PRICE_PROTECTION_STATUS
       ,MIN(A.PRICE_PROTECTION_START_DATE) AS PRICE_PROTECTION_START_DATE
       ,Max(A.PRICE_PROTECTION_END_DATE) AS PRICE_PROTECTION_END_DATE
       ,RLD1.HIERARCHY_NO
       ,Sum(CASE (CHECK_RECORD)
                     WHEN 1
                           THEN 1
                     ELSE 0
                     END) / 3 AS CHECK_RECORD
       ,Count(DISTINCT pd.PROJECTION_DETAILS_SID) AS COUNT1
       ,Max(IPQ.ITEM_PRICING_QUALIFIER_SID) AS PRICE_PROTECTION_PRICE_TYPE
       ,Max(NEP_FORMULA) AS NEP_FORMULA
       ,Max(BASE_PRICE_TYPE) AS BASE_PRICE_TYPE
       ,Avg(BASE_PRICE_MANUAL) AS BASE_PRICE_MANUAL
       ,Max(BASE_PRICE_DATE) AS BASE_PRICE_DATE
       ,Max(BASE_PRICE_PRICE_TYPE) AS BASE_PRICE_PRICE_TYPE
       ,Max(NET_BASE_PRICE) AS NET_BASE_PRICE
       ,Max(NET_BASE_PRICE_FORMULA) AS NET_BASE_PRICE_FORMULA
       ,Max(SUBSEQUENT_PERIOD_PRICE_TYPE) AS SUBSEQUENT_PERIOD_PRICE_TYPE
       ,Max(NET_SUBSEQUENT_PERIOD_PRICE) AS NET_SUBSEQUENT_PERIOD_PRICE
       ,Max(NET_SUBSEQUENT_PERIOD_PRICE_FORMULA) AS NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
       ,Max(PRICE_TOLERANCE_INTERVAL) AS PRICE_TOLERANCE_INTERVAL
       ,Max(PRICE_TOLERANCE_FREQUENCY) AS PRICE_TOLERANCE_FREQUENCY
       ,Max(PRICE_TOLERANCE_TYPE) AS PRICE_TOLERANCE_TYPE
       ,Avg(PRICE_TOLERANCE) AS PRICE_TOLERANCE
       ,Max(RESET_ELIGIBLE) AS RESET_ELIGIBLE
       ,Max(RESET_TYPE) AS RESET_TYPE
       ,Max(RESET_DATE) AS RESET_DATE
       ,Max(RESET_INTERVAL) AS RESET_INTERVAL
       ,Max(RESET_FREQUENCY) AS RESET_FREQUENCY
       ,Max(RESET_PRICE_TYPE) AS RESET_PRICE_TYPE
       ,Max(NET_RESET_PRICE_TYPE) AS NET_RESET_PRICE_TYPE
       ,Max(NET_RESET_PRICE_FORMULA) AS NET_RESET_PRICE_FORMULA
       ,Max(NET_PRICE_TYPE) AS NET_PRICE_TYPE
       ,Max(NET_PRICE_TYPE_FORMULA) AS NET_PRICE_TYPE_FORMULA
       ,Max(ATTACHED_DATE) ATTACHED_DATE
       ,CASE 
              WHEN count(DISTINCT ipq.ITEM_PRICING_QUALIFIER_SID) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END ITEM_PRICING_QUALIFIER_SID_flag
       ,CASE 
              WHEN count(DISTINCT nep_formula) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS NEP_FORMULA_FLAG
       ,CASE 
              WHEN count(DISTINCT BASE_PRICE_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS BASE_PRICE_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT BASE_PRICE_DATE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS BASE_PRICE_DATE_FLAG
       ,CASE 
              WHEN count(DISTINCT BASE_PRICE_PRICE_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS BASE_PRICE_PRICE_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_BASE_PRICE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS NET_BASE_PRICE_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_BASE_PRICE_FORMULA) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS NET_BASE_PRICE_FORMULA_FLAG
       ,CASE 
              WHEN count(DISTINCT SUBSEQUENT_PERIOD_PRICE_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS SUBSEQUENT_PERIOD_PRICE_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_SUBSEQUENT_PERIOD_PRICE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS NET_SUBSEQUENT_PERIOD_PRICE_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_SUBSEQUENT_PERIOD_PRICE_FORMULA) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS NET_SUBSEQUENT_PERIOD_PRICE_FORMULA_FLAG
       ,CASE 
              WHEN count(DISTINCT PRICE_TOLERANCE_INTERVAL) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS PRICE_TOLERANCE_INTERVAL_FLAG
       ,CASE 
              WHEN count(DISTINCT PRICE_TOLERANCE_FREQUENCY) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END AS PRICE_TOLERANCE_FREQUENCY_FLAG
       ,CASE 
              WHEN count(DISTINCT PRICE_TOLERANCE_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END PRICE_TOLERANCE_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT PRICE_TOLERANCE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END PRICE_TOLERANCE_FLAG
       ,CASE 
              WHEN count(DISTINCT RESET_ELIGIBLE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END RESET_ELIGIBLE_FLAG
       ,CASE 
              WHEN count(DISTINCT RESET_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END RESET_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT RESET_DATE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END RESET_DATE_FLAG
       ,CASE 
              WHEN count(DISTINCT RESET_INTERVAL) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END RESET_INTERVAL_FLAG
       ,CASE 
              WHEN count(DISTINCT RESET_FREQUENCY) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END RESET_FREQUENCY_FLAG
       ,CASE 
              WHEN count(DISTINCT RESET_PRICE_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END RESET_PRICE_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_RESET_PRICE_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END NET_RESET_PRICE_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_RESET_PRICE_FORMULA) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END NET_RESET_PRICE_FORMULA_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_PRICE_TYPE) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END NET_PRICE_TYPE_FLAG
       ,CASE 
              WHEN count(DISTINCT NET_PRICE_TYPE_FORMULA) IN (
                           1
                           ,0
                           )
                     THEN 0
              ELSE 1
              END NET_PRICE_TYPE_FORMULA_FLAG
              ,MAX(NBP.NET_SALES_FORMULA_NO) NET_BASE_PRICE_FORMULA_NO
              ,MAX(NEP.NET_SALES_FORMULA_NO) NEP_FORMULA_NO
              ,MAX(NSPP.NET_SALES_FORMULA_NO) NET_SUBSEQUENT_PERIOD_PRICE_FORMULA_NO
              ,MAX(NRT.NET_SALES_FORMULA_NO) NET_PRICE_TYPE_FORMULA_NO
              ,MAX(NRP.NET_SALES_FORMULA_NO) NET_RESET_PRICE_FORMULA_NO
              ,CASE 
                     WHEN COUNT(DISTINCT NBP.NET_SALES_FORMULA_NO) IN (
                                  1
                                  ,0
                                  )
                           THEN 0
                     ELSE 1
                     END NET_BASE_PRICE_FORMULA_NO_FLAG
              ,CASE 
                     WHEN COUNT(DISTINCT NEP.NET_SALES_FORMULA_NO) IN (
                                  1
                                  ,0
                                  )
                           THEN 0
                     ELSE 1
                     END NEP_FORMULA_NO_FLAG
              ,CASE 
                     WHEN COUNT(DISTINCT NSPP.NET_SALES_FORMULA_NO) IN (
                                  1
                                  ,0
                                  )
                           THEN 0
                     ELSE 1
                     END NET_SUBSEQUENT_PERIOD_PRICE_FORMULA_NO_FLAG
              ,CASE 
                     WHEN COUNT(DISTINCT NRT.NET_SALES_FORMULA_NO) IN (
                                  1
                                  ,0
                                  )
                           THEN 0
                     ELSE 1
                     END NET_PRICE_TYPE_FORMULA_NO_FLAG
              ,CASE 
                     WHEN COUNT(DISTINCT NRP.NET_SALES_FORMULA_NO) IN (
                                  1
                                  ,0
                                  )
                           THEN 0
                     ELSE 1
                     END NET_RESET_PRICE_FORMULA_NO_FLAG
FROM RELATIONSHIP_LEVEL_DEFINITION RLD
JOIN PROJECTION_CUST_HIERARCHY PCH ON PCH.PROJECTION_MASTER_SID = @PROJECTIONMASTERSID
       AND RLD.RELATIONSHIP_LEVEL_SID = PCH.RELATIONSHIP_LEVEL_SID
       AND RLD.RELATIONSHIP_BUILDER_SID = @RELATIONSHIPBUILDERSHIPSID
JOIN RELATIONSHIP_LEVEL_DEFINITION RLD1 ON RLD1.HIERARCHY_NO LIKE @HIERARCHY_NO
       AND RLD.RELATIONSHIP_BUILDER_SID = RLD1.RELATIONSHIP_BUILDER_SID
       AND RLD.HIERARCHY_NO LIKE RLD1.HIERARCHY_NO + '%'
       AND RLD1.LEVEL_NO = @LEVEL_NO
       AND RLD1.HIERARCHY_NO IN (?)
JOIN CCP_MAP CCPMAP ON CCPMAP.RELATIONSHIP_LEVEL_SID = RLD.RELATIONSHIP_LEVEL_SID
JOIN PROJECTION_DETAILS PD ON PD.CCP_DETAILS_SID = CCPMAP.CCP_DETAILS_SID
JOIN ST_NM_PPA_PROJECTION_MASTER A ON pd.PROJECTION_DETAILS_SID = A.PROJECTION_DETAILS_SID
JOIN ST_NM_PPA_PROJECTION PA ON pd.PROJECTION_DETAILS_SID = PA.PROJECTION_DETAILS_SID
JOIN PERIOD p ON p.period_sid = PA.PERIOD_SID
       AND A.SESSION_ID = PA.SESSION_ID
       AND A.USER_ID = PA.USER_ID
       AND A.session_id = @SESSION_ID
       AND A.user_id = @USER_ID
       AND Isnull(A.USER_GROUP, '0') LIKE @USER_GROUP
LEFT JOIN NET_SALES_FORMULA_MASTER NBP ON NBP.NET_SALES_FORMULA_MASTER_SID = PA.NET_BASE_PRICE_FORMULA
LEFT JOIN NET_SALES_FORMULA_MASTER NEP ON NEP.NET_SALES_FORMULA_MASTER_SID = PA.NEP_FORMULA
LEFT JOIN NET_SALES_FORMULA_MASTER NSPP ON NSPP.NET_SALES_FORMULA_MASTER_SID = PA.NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
LEFT JOIN NET_SALES_FORMULA_MASTER NRT ON NRT.NET_SALES_FORMULA_MASTER_SID = PA.NET_PRICE_TYPE_FORMULA
LEFT JOIN NET_SALES_FORMULA_MASTER NRP ON NRP.NET_SALES_FORMULA_MASTER_SID = PA.NET_RESET_PRICE_FORMULA
LEFT JOIN ITEM_PRICING_QUALIFIER IPQ ON IPQ.ITEM_PRICING_QUALIFIER_SID = PA.ITEM_PRICING_QUALIFIER_SID
GROUP BY RLD1.RELATIONSHIP_LEVEL_VALUES
       ,p.QUARTER
       ,RLD1.LEVEL_NO
       ,p."YEAR"
       ,RLD1.HIERARCHY_NO
       ,RLD1.LEVEL_NAME
       
        )
SELECT Distinct level_no
       ,LEVEL_NAME
       ,rlv
       ,rc.QUARTER
       ,rc.YEAR
       ,USER_GROUP
       ,PRICE_PROTECTION_STATUS
       ,PRICE_PROTECTION_START_DATE
       ,PRICE_PROTECTION_END_DATE
       ,HIERARCHY_NO
       ,CHECK_RECORD
       ,COUNT1
       ,PRICE_PROTECTION_PRICE_TYPE
       ,NEP
       ,NEP_FORMULA
       ,BASE_PRICE_TYPE
       ,BASE_PRICE_MANUAL
       ,BASE_PRICE_DATE
       ,BASE_PRICE_PRICE_TYPE
       ,NET_BASE_PRICE
       ,NET_BASE_PRICE_FORMULA
       ,SUBSEQUENT_PERIOD_PRICE_TYPE
       ,NET_SUBSEQUENT_PERIOD_PRICE
       ,NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
       ,PRICE_TOLERANCE_INTERVAL
       ,PRICE_TOLERANCE_FREQUENCY
       ,PRICE_TOLERANCE_TYPE
       ,CASE 
              WHEN ht.DESCRIPTION IN (
                           '%'
                           ,'percent'
                           )
                     THEN RC.PRICE_TOLERANCE
              WHEN ht.DESCRIPTION = 'dollar'
                     THEN SV.PRICE_TOLERANCE
              END PRICE_TOLERANCE

       ,MAX_INCREMENTAL_CHANGE
       ,RESET_ELIGIBLE
       ,RESET_TYPE
       ,RESET_DATE
       ,RESET_INTERVAL
       ,RESET_FREQUENCY
       ,RESET_PRICE_TYPE
       ,NET_RESET_PRICE_TYPE
       ,NET_RESET_PRICE_FORMULA
       ,NET_PRICE_TYPE
       ,NET_PRICE_TYPE_FORMULA
       ,ATTACHED_DATE
       ,ITEM_PRICING_QUALIFIER_SID_flag
       ,NEP_FORMULA_FLAG
       ,BASE_PRICE_TYPE_FLAG
       ,BASE_PRICE_DATE_FLAG
       ,BASE_PRICE_PRICE_TYPE_FLAG
       ,NET_BASE_PRICE_FLAG
       ,NET_BASE_PRICE_FORMULA_FLAG
       ,SUBSEQUENT_PERIOD_PRICE_TYPE_FLAG
       ,NET_SUBSEQUENT_PERIOD_PRICE_FLAG
       ,NET_SUBSEQUENT_PERIOD_PRICE_FORMULA_FLAG
       ,PRICE_TOLERANCE_INTERVAL_FLAG
       ,PRICE_TOLERANCE_FREQUENCY_FLAG
       ,PRICE_TOLERANCE_TYPE_FLAG
       ,PRICE_TOLERANCE_FLAG = CASE 
              WHEN PTT.TOTAL = 2
                     THEN 1
              ELSE PRICE_TOLERANCE_FLAG
              END
       ,RESET_ELIGIBLE_FLAG
       ,RESET_TYPE_FLAG
       ,RESET_DATE_FLAG
       ,RESET_INTERVAL_FLAG
       ,RESET_FREQUENCY_FLAG
       ,RESET_PRICE_TYPE_FLAG
       ,NET_RESET_PRICE_TYPE_FLAG
       ,NET_RESET_PRICE_FORMULA_FLAG
       ,NET_PRICE_TYPE_FLAG
       ,NET_PRICE_TYPE_FORMULA_FLAG
       ,NET_BASE_PRICE_FORMULA_NO
       ,NEP_FORMULA_NO
       ,NET_SUBSEQUENT_PERIOD_PRICE_FORMULA_NO
       ,NET_PRICE_TYPE_FORMULA_NO
       ,NET_RESET_PRICE_FORMULA_NO
       ,NET_BASE_PRICE_FORMULA_NO_FLAG
       ,NEP_FORMULA_NO_FLAG
       ,NET_SUBSEQUENT_PERIOD_PRICE_FORMULA_NO_FLAG
       ,NET_PRICE_TYPE_FORMULA_NO_FLAG
       ,NET_RESET_PRICE_FORMULA_NO_FLAG

FROM REST_CAL RC
JOIN SUM_VALUE SV ON SV.YEAR = RC.YEAR
       AND SV.QUARTER = RC.QUARTER
LEFT JOIN helper_table ht ON ht.helper_table_sid = rc.PRICE_TOLERANCE_TYPE
JOIN price_tol_type PTT ON PTT.QUARTER = RC.QUARTER
JOIN PERIOD P ON P.QUARTER = RC.QUARTER
       AND P.YEAR = RC.YEAR
WHERE P.PERIOD_SID BETWEEN COALESCE(NULLIF(?, 0), @START_DATE)
              AND COALESCE(NULLIF(?, 0), @END_DATE)

ORDER BY LEVEL_NO
       ,rlv
       ,YEAR
       ,quarter

		]]>
    </sql>
  
     <sql id="PPA.massupdate-group">
		<![CDATA[
    
                DECLARE @USER_GROUP1 VARCHAR(100)= '?',
                @RELATIONSHIPBUILDERSHIPSID INT =?,
                @PROJECTIONMASTERSID    INT =?,
		@HIERARCHY_NO VARCHAR(100)= '?%',
		
		@SESSION_ID INT=?,
		@USER_ID INT=?,
		@USER_GROUP VARCHAR(50)='?'
UPDATE ST_NM_PPA_PROJECTION_MASTER
SET    user_group = @USER_GROUP1
FROM   RELATIONSHIP_LEVEL_DEFINITION RLD
       JOIN PROJECTION_CUST_HIERARCHY PCH
         ON PCH.PROJECTION_MASTER_SID = @PROJECTIONMASTERSID
            AND RLD.RELATIONSHIP_LEVEL_SID = PCH.RELATIONSHIP_LEVEL_SID
            AND RLD.RELATIONSHIP_BUILDER_SID = @RELATIONSHIPBUILDERSHIPSID
       JOIN RELATIONSHIP_LEVEL_DEFINITION RLD1
         ON RLD1.HIERARCHY_NO LIKE @HIERARCHY_NO
            AND RLD.RELATIONSHIP_BUILDER_SID = RLD1.RELATIONSHIP_BUILDER_SID
            AND RLD.HIERARCHY_NO LIKE RLD1.HIERARCHY_NO + '%'
            
       JOIN CCP_MAP CCPMAP
         ON CCPMAP.RELATIONSHIP_LEVEL_SID = RLD.RELATIONSHIP_LEVEL_SID
		 JOIN PROJECTION_DETAILS PD ON PD.CCP_DETAILS_SID=CCPMAP.CCP_DETAILS_SID
       JOIN ST_NM_PPA_PROJECTION_MASTER A
         ON pd.PROJECTION_DETAILS_SID = A.PROJECTION_DETAILS_SID
            AND A.session_id = @SESSION_ID
            AND A.user_id = @USER_ID
            AND A.USER_GROUP LIKE @USER_GROUP;
		]]>
    </sql>
    
    
    <sql id="PPA.saveReset">
		<![CDATA[
     DECLARE @PRICE_CAP                  INT=?,
@RELATIONSHIPBUILDERSHIPSID INT =?,
                @PROJECTIONMASTERSID    INT =?,
		@HIERARCHY_NO VARCHAR(100)= '?%',
		@SESSION_ID INT=?,
                 @USER_ID INT=?,
                 @USER_GROUP                 VARCHAR(50)='?',
        @QUARTER                    INT=?,
        @YEAR                       INT=?
                  
UPDATE ST
SET    RESET = ( @PRICE_CAP )
FROM   RELATIONSHIP_LEVEL_DEFINITION RLD
       JOIN PROJECTION_CUST_HIERARCHY PCH
         ON PCH.PROJECTION_MASTER_SID = @PROJECTIONMASTERSID
            AND RLD.RELATIONSHIP_LEVEL_SID = PCH.RELATIONSHIP_LEVEL_SID
            AND RLD.RELATIONSHIP_BUILDER_SID = @RELATIONSHIPBUILDERSHIPSID
       JOIN RELATIONSHIP_LEVEL_DEFINITION RLD1
         ON RLD1.HIERARCHY_NO LIKE @HIERARCHY_NO
            AND RLD.RELATIONSHIP_BUILDER_SID = RLD1.RELATIONSHIP_BUILDER_SID
            AND RLD.HIERARCHY_NO LIKE RLD1.HIERARCHY_NO + '%'
       JOIN CCP_MAP CCPMAP
         ON CCPMAP.RELATIONSHIP_LEVEL_SID = RLD.RELATIONSHIP_LEVEL_SID
       JOIN PROJECTION_DETAILS PD
         ON PD.CCP_DETAILS_SID = CCPMAP.CCP_DETAILS_SID
       JOIN ST_NM_PPA_PROJECTION ST
         ON PD.PROJECTION_DETAILS_SID = ST.PROJECTION_DETAILS_SID
       JOIN PERIOD PR
         ON PR.PERIOD_SID = ST.PERIOD_SID
       JOIN ST_NM_PPA_PROJECTION_MASTER STNMPPA
         ON STNMPPA.PROJECTION_DETAILS_SID = PD.PROJECTION_DETAILS_SID
            AND ST.SESSION_ID = STNMPPA.SESSION_ID
            AND ST.USER_ID = STNMPPA.USER_ID
            AND PR.YEAR = @YEAR
            AND PR.QUARTER = @QUARTER
            AND ST.SESSION_ID = @SESSION_ID
            AND ST.USER_ID = @USER_ID
            AND STNMPPA.USER_GROUP LIKE @USER_GROUP 
                   




		]]>
    </sql>
    
     <sql id="PPA.saveCheckRecord">
		<![CDATA[
    
                DECLARE @CHECK_RECORD INT=?,
                @RELATIONSHIPBUILDERSHIPSID INT =?,
                @PROJECTIONMASTERSID    INT =?,
		@HIERARCHY_NO VARCHAR(100)= '?%',
		
		@SESSION_ID INT=?,
		@USER_ID INT=?,
		@USER_GROUP VARCHAR(50)='?'
UPDATE A
SET    CHECK_RECORD = @CHECK_RECORD

FROM   RELATIONSHIP_LEVEL_DEFINITION RLD
       JOIN PROJECTION_CUST_HIERARCHY PCH
         ON PCH.PROJECTION_MASTER_SID = @PROJECTIONMASTERSID
            AND RLD.RELATIONSHIP_LEVEL_SID = PCH.RELATIONSHIP_LEVEL_SID
            AND RLD.RELATIONSHIP_BUILDER_SID = @RELATIONSHIPBUILDERSHIPSID
       JOIN RELATIONSHIP_LEVEL_DEFINITION RLD1
         ON RLD1.HIERARCHY_NO LIKE @HIERARCHY_NO
            AND RLD.RELATIONSHIP_BUILDER_SID = RLD1.RELATIONSHIP_BUILDER_SID
            AND RLD.HIERARCHY_NO LIKE RLD1.HIERARCHY_NO + '%'
          
       JOIN CCP_MAP CCPMAP
         ON CCPMAP.RELATIONSHIP_LEVEL_SID = RLD.RELATIONSHIP_LEVEL_SID
		 JOIN PROJECTION_DETAILS PD ON PD.CCP_DETAILS_SID=CCPMAP.CCP_DETAILS_SID
       JOIN ST_NM_PPA_PROJECTION_MASTER A
         ON pd.PROJECTION_DETAILS_SID = A.PROJECTION_DETAILS_SID
            AND A.session_id = @SESSION_ID
            AND A.user_id = @USER_ID
            AND A.USER_GROUP LIKE @USER_GROUP
		]]>
    </sql>
    
    <sql id="PPA.saveAllCheckRecord">
		<![CDATA[
       UPDATE PM
SET    CHECK_RECORD = ?
FROM   PROJECTION_DETAILS PD
       JOIN ST_NM_PPA_PROJECTION_MASTER PM
         ON PM.PROJECTION_DETAILS_SID = PD.PROJECTION_DETAILS_SID
            AND PD.PROJECTION_MASTER_SID = ?
            AND PM.SESSION_ID = ?
            AND PM.USER_ID = ? 
            AND PM.USER_GROUP like '?'
		]]>
    </sql>
   
</custom-sql>