<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>

<sql>
	<entity id="psNotesTabDetailsQuery">
		<query>
        <![CDATA[
        	DECLARE 
			@MASTER_TABLE_SID INT=?
        	
            SELECT
                   
                    MDF.MASTER_TABLE_NAME,
					MDF.FILE_PATH,
					MDF.CREATED_DATE,
					MDF.CREATED_BY,
					MDF.MASTER_DATA_FILES_SID
                    
            FROM
                    MASTER_DATA_FILES MDF
            
            WHERE
                    MASTER_TABLE_NAME = 'PS_MODEL'
                    AND MASTER_TABLE_SID = @MASTER_TABLE_SID;
 ]]>
		</query>
	</entity>
	<entity id="getImtdPsDetailsDeleteQuery">
		<query> 
            <![CDATA[ 
			DECLARE 
			@USERS_SID VARCHAR(10) = ?,
			@SESSION_ID VARCHAR(10)=?
			
			DELETE  FROM dbo.Imtd_Ps_Details where USERS_SID=@USERS_SID	AND SESSION_ID= @SESSION_ID;
		]]>
		</query>
	</entity>
	<entity id="getImtdPsDetailsInsertQuery">
		<query> 
            <![CDATA[ 
			DECLARE
@USERS_SID VARCHAR(10) = ?,
@SESSION_ID VARCHAR(10)=?,
@IFP_MODEL_SID INT=?,
@PS_ID VARCHAR(100)=?;
 
INSERT INTO DBO.IMTD_PS_DETAILS (
       ITEM_MASTER_SID,
       ITEM_ID,
       ITEM_NO,
       ITEM_NAME,
       IFP_MODEL_SID,
       IFP_NO,
       PS_DETAILS_ATTACHED_DATE,
       BRAND_MASTER_SID,
       PS_DETAILS_PRICETYPE,
       PS_DETAILS_PRICE,
       PS_DETAILS_CREATED_BY,
       PS_DETAILS_CREATED_DATE,
       CREATED_DATE,
       CHECK_RECORD,
       SESSION_ID,
       USERS_SID,
       OPERATION,
       PS_MODEL_SID,
       PS_ID
       )
SELECT IM.ITEM_MASTER_SID,
       IM.ITEM_ID,
       IM.ITEM_NO,
       IM.ITEM_NAME,
       IFD.IFP_MODEL_SID,
       IFM.IFP_NO,
       IFD.ITEM_IFP_ATTACHED_DATE,
       IM.BRAND_MASTER_SID,
       0,
       0,
       @USERS_SID AS USERID,
       GETDATE(),
       GETDATE(),
       0 AS CHECK_RECORD,
       @SESSION_ID AS SESSIONID,
       @USERS_SID,
       'A',
       NULL,
       @PS_ID PS_ID
FROM IFP_MODEL IFM
INNER JOIN IFP_DETAILS IFD
       ON IFD.IFP_MODEL_SID = IFM.IFP_MODEL_SID
INNER JOIN ITEM_MASTER IM
       ON IM.ITEM_MASTER_SID = IFD.ITEM_MASTER_SID
WHERE IFM.IFP_MODEL_SID = @IFP_MODEL_SID
		]]>
		</query>
	</entity>
	<entity id="getPsEditInsertMainToTempQuery">
		<query> 
            <![CDATA[ 
			DECLARE 
			@USERS_SID VARCHAR(10) = ?,
			@SESSION_ID VARCHAR(10)=?,
			@PS_MODEL_SID INT=?
			
			INSERT
	INTO
		dbo.Imtd_Ps_Details(
			ps_Model_Sid,
			ps_Details_Sid,
			item_Master_Sid,
			item_Id,
			item_No,
			item_Name,
			ifp_Model_Sid,
			ifp_No,
			ps_Details_Price,
			ps_Details_Pricetype,
			ps_Details_Price_Tolerance,
			ps_Dtls_Price_Tolerance_Type,
			ps_Dtls_Price_Tolerance_Intrvl,
			ps_Dtls_Price_Tolerance_Freq,
			ps_Details_Pric_Prtcn_Stdate,
			ps_Details_Pric_Prtcn_Eddate,
			ps_Details_Base_Price,
			ps_Details_Contract_Price,
			ps_Dtls_Cont_Price_Startdate,
			ps_Dtls_Cont_Price_Enddate,
			ps_Details_Revision_Date,
			ps_Details_Attached_Date,
			ps_Details_Attached_Status,
			ps_Details_Created_Date,
			ps_Details_Created_By,
			status,
			PRICE_PROTECTION_STATUS,
			PRICE_PROTECTION_PRICE_TYPE,
			NEP,
			NEP_FORMULA,
			MAX_INCREMENTAL_CHANGE,
			RESET_ELIGIBLE,
			RESET_TYPE,
			RESET_DATE,
			RESET_INTERVAL,
			RESET_FREQUENCY,
			NET_PRICE_TYPE,
			NET_PRICE_TYPE_FORMULA,
			BRAND_MASTER_SID,
			ps_Details_Suggested_Price,
			BASE_PRICE_TYPE,
			BASE_PRICE_ENTRY,
			BASE_PRICE_DATE,
			NET_BASE_PRICE,
			BASE_PRICE_DDLB,
			SUBSEQUENT_PERIOD_PRICE_TYPE,
			NET_SUBSEQUENT_PERIOD_PRICE,
			NET_SUBSEQUENT_PRICE_FORMULA_ID,
			RESET_PRICE_TYPE,
			NET_RESET_PRICE_TYPE,
			NET_RESET_PRICE_FORMULA_ID,
			NET_BASE_PRICE_FORMULA_ID,
			users_Sid,
			session_Id,
			created_Date,
                        ADD_COPY_INDICATOR,
			check_Record,
			operation,
                        PPA_INDEX_NO
		) select
			PSD.ps_Model_Sid,
			PSD.ps_Details_Sid,
			IM.item_Master_Sid,
			IM.item_Id,
			IM.item_No,
			IM.item_Name,
			PSD.ifp_Model_Sid,
			IFM.ifp_No,
			PSD.price,
			PSD.item_Pricing_Qualifier_Sid,
			PSD.price_Tolerance,
			PSD.price_Tolerance_Type,
			PSD.price_Tolerance_Interval,
			PSD.price_Tolerance_Frequency,
			PSD.price_Protection_Start_Date,
			PSD.price_Protection_End_Date,
			PSD.base_Price,
			PSD.contract_Price,
			PSD.contract_Price_Start_Date,
			PSD.contract_Price_End_Date,
			PSD.revision_Date,
			PSD.item_Ps_Attached_Date,
			PSD.item_Ps_Attached_Status,
			PSD.created_Date,
			PSD.created_By,
			PSD.item_Ps_Attached_Status,
			PSD.PRICE_PROTECTION_STATUS,
			PSD.PRICE_PROTECTION_PRICE_TYPE,
			PSD.NEP,
			PSD.NEP_FORMULA,
			PSD.MAX_INCREMENTAL_CHANGE,
			PSD.RESET_ELIGIBLE,
			PSD.RESET_TYPE,
			PSD.RESET_DATE,
			PSD.RESET_INTERVAL,
			PSD.RESET_FREQUENCY,
			PSD.NET_PRICE_TYPE,
			PSD.NET_PRICE_TYPE_FORMULA,
			IM.BRAND_MASTER_SID,
			suggested_Price,
			BASE_PRICE_TYPE,
			BASE_PRICE_ENTRY,
			BASE_PRICE_DATE,
			NET_BASE_PRICE,
			BASE_PRICE_DDLB,
			SUBSEQUENT_PERIOD_PRICE_TYPE,
			NET_SUBSEQUENT_PERIOD_PRICE,
			NET_SUBSEQUENT_PRICE_FORMULA_ID,
			RESET_PRICE_TYPE,
			NET_RESET_PRICE_TYPE,
			NET_RESET_PRICE_FORMULA_ID,
			NET_BASE_PRICE_FORMULA_ID,
			@USERS_SID as userId,
			@SESSION_ID as sessionId,
			GetDate(),
                        ADD_COPY_INDICATOR,
			1,
			CASE
				WHEN PSD.inbound_Status in(
					'A',
					'U'
				) THEN 'U'
				else 'F'
			END,
                        PSD.PPA_INDEX_NO
		from
			item_Master IM,
			Ps_Details PSD,
			Ifp_Model IFM
		where
			PSD.inbound_Status in(
				'A',
				'U',
				'D'
			)
			and IFM.ifp_Model_Sid = PSD.ifp_Model_Sid
			and IM.item_Master_Sid = PSD.item_Master_Sid
			and PSD.ps_Model_Sid =@PS_MODEL_SID;
			
		]]>
		</query>
	</entity>
	<entity id="getPsDetailsDeleteQuery">
		<query>
        <![CDATA[
        
        DELETE FROM PS_DETAILS WHERE PS_MODEL_SID=? ;
 		]]>
		</query>
	</entity>
	<entity id="getNotesTabDeleteQuery">
		<query>
        <![CDATA[
              
        DELETE FROM MASTER_DATA_FILES WHERE MASTER_TABLE_SID=? AND MASTER_TABLE_NAME='PS_MODEL';
 		]]>
		</query>
	</entity>
	<entity id="getPsModelUpdateQuery">
		<query>
        <![CDATA[
        	
        	DECLARE
        	@PS_ID VARCHAR(50)=?,
        	@PS_NO VARCHAR(50)=?,
        	@PS_NAME VARCHAR(50)=?,
        	@PS_TYPE INT=?,
        	@PS_CATEGORY INT=?,
        	@PS_STATUS INT=?,
        	@PS_DESIGNATION INT=?,
        	@PS_START_DATE DATETIME= CAST( ? as DATETIME),
        	@PS_END_DATE DATETIME=CAST( ? as DATETIME),
        	@PARENT_PS_ID VARCHAR(50)=?,
        	@PARENT_PS_NAME VARCHAR(50)=?,
        	@PS_TRADE_CLASS INT=?,
        	@INTERNAL_NOTES VARCHAR(1000)=?,
        	@MODIFIED_BY INT =?,
        	@PS_MODEL_SID INT=?
        	
        	UPDATE
				dbo.PS_MODEL
			SET
				PS_ID = @PS_ID,
				PS_NO = @PS_NO,
				PS_NAME = @PS_NAME,
				PS_TYPE = @PS_TYPE,
				PS_CATEGORY = @PS_CATEGORY,
				PS_STATUS = @PS_STATUS,
				PS_DESIGNATION = @PS_DESIGNATION,
				PS_START_DATE = @PS_START_DATE,
				PS_END_DATE = @PS_END_DATE,
				PARENT_PS_ID = @PARENT_PS_ID,
				PARENT_PS_NAME = @PARENT_PS_NAME,
				PS_TRADE_CLASS = @PS_TRADE_CLASS,
				INTERNAL_NOTES = @INTERNAL_NOTES,
				MODIFIED_BY = @MODIFIED_BY,
				MODIFIED_DATE = GetDate()
			WHERE
				PS_MODEL_SID = @PS_MODEL_SID;
 		]]>
		</query>
	</entity>
	<entity id="getPsModelInsertQuery">
		<query>
        <![CDATA[
        	DECLARE 
        		@PS_ID VARCHAR(50)=?,
				@PS_NO VARCHAR(50)=?,
				@PS_NAME VARCHAR(50)=?,
				@PS_TYPE INT =?,
				@PS_CATEGORY INT =?,
				@PS_STATUS INT =?,
				@PS_DESIGNATION INT =?,
				@PS_START_DATE DATETIME= CAST(? as DATETIME),
				@PS_END_DATE DATETIME= CAST(? as DATETIME),
				@PARENT_PS_ID VARCHAR(50)=?,
				@PARENT_PS_NAME VARCHAR(50)=?,
				@PS_TRADE_CLASS INT =?,
				@INTERNAL_NOTES VARCHAR(1000)=?,
				@CREATED_BY INT =? 

		INSERT
			INTO
				dbo.PS_MODEL(
					PS_ID,
					PS_NO,
					PS_NAME,
					PS_TYPE,
					PS_CATEGORY,
					PS_STATUS,
					PS_DESIGNATION,
					PS_START_DATE,
					PS_END_DATE,
					PARENT_PS_ID,
					PARENT_PS_NAME,
					PS_TRADE_CLASS,
					INTERNAL_NOTES,
					INBOUND_STATUS,
					RECORD_LOCK_STATUS,
					BATCH_ID,
					"SOURCE",
					CREATED_BY,
					CREATED_DATE,
					MODIFIED_BY,
					MODIFIED_DATE
				)
			VALUES(
				@PS_ID,
				@PS_NO,
				@PS_NAME,
				@PS_TYPE,
				@PS_CATEGORY,
				@PS_STATUS,
				@PS_DESIGNATION,
				@PS_START_DATE,
				@PS_END_DATE,
				@PARENT_PS_ID,
				@PARENT_PS_NAME,
				@PS_TRADE_CLASS,
				@INTERNAL_NOTES,
				'A',
				0,
				'',
				'GTN',
				@CREATED_BY,
				GetDate(),
				@CREATED_BY,
				GetDate()
			) 
        	
 		]]>
		</query>
	</entity>
	<entity id="getPsDetailsInsertQuery">
		<query>
        <![CDATA[
        	DECLARE @USERS_SID VARCHAR(50) = ?
	,@SESSION_ID VARCHAR(50) = ?
	,@PS_MODEL_SID INT = ?

DECLARE @COUNT INT;
 
UPDATE IPD
SET IPD.PS_MODEL_SID = PM.PS_MODEL_SID
FROM IMTD_PS_DETAILS IPD
INNER JOIN PS_MODEL PM
       ON PM.PS_ID = IPD.PS_ID
              AND IPD.USERS_SID = @USERS_SID
              AND IPD.SESSION_ID = @SESSION_ID
              AND (
                     PM.PS_MODEL_SID = @PS_MODEL_SID
                     OR @PS_MODEL_SID IS NULL
                     )
 
 
SELECT @COUNT = MAX(PPA_INDEX_NO)
FROM PS_DETAILS
WHERE PS_MODEL_SID = @PS_MODEL_SID
 
 
MERGE DBO.PS_DETAILS AS TARGET
USING (select * FROM IMTD_PS_DETAILS WHERE USERS_SID = @USERS_SID
               AND SESSION_ID = @SESSION_ID)
AS SOURCE
       ON (
                     TARGET.PS_MODEL_SID = SOURCE.PS_MODEL_SID
                     AND TARGET.IFP_MODEL_SID = SOURCE.IFP_MODEL_SID
                     AND TARGET.ITEM_MASTER_SID = SOURCE.ITEM_MASTER_SID
                     AND TARGET.CONTRACT_PRICE_START_DATE = SOURCE.PS_DTLS_CONT_PRICE_STARTDATE
                     AND TARGET.PPA_INDEX_NO = SOURCE.PPA_INDEX_NO
                     )
WHEN MATCHED
       THEN
              UPDATE
              SET TARGET.PS_MODEL_SID = SOURCE.PS_MODEL_SID,
                     TARGET.IFP_MODEL_SID = SOURCE.IFP_MODEL_SID,
                     TARGET.ITEM_MASTER_SID = SOURCE.ITEM_MASTER_SID,
                     TARGET.CONTRACT_PRICE = SOURCE.PS_DETAILS_CONTRACT_PRICE,
                     TARGET.CONTRACT_PRICE_START_DATE = SOURCE.PS_DTLS_CONT_PRICE_STARTDATE,
                     TARGET.CONTRACT_PRICE_END_DATE = SOURCE.PS_DTLS_CONT_PRICE_ENDDATE,
                     TARGET.ITEM_PS_ATTACHED_STATUS = SOURCE.STATUS,
                     TARGET.ITEM_PS_ATTACHED_DATE = SOURCE.PS_DETAILS_ATTACHED_DATE,
                     TARGET.BASE_PRICE = SOURCE.PS_DETAILS_BASE_PRICE,
                     TARGET.PRICE_TOLERANCE = SOURCE.PS_DETAILS_PRICE_TOLERANCE,
                     TARGET.PRICE_TOLERANCE_TYPE = SOURCE.PS_DTLS_PRICE_TOLERANCE_TYPE,
                     TARGET.PRICE_TOLERANCE_FREQUENCY = SOURCE.PS_DTLS_PRICE_TOLERANCE_FREQ,
                     TARGET.PRICE_TOLERANCE_INTERVAL = SOURCE.PS_DTLS_PRICE_TOLERANCE_INTRVL,
                     TARGET.PRICE_PROTECTION_START_DATE = SOURCE.PS_DETAILS_PRIC_PRTCN_STDATE,
                     TARGET.PRICE_PROTECTION_END_DATE = SOURCE.PS_DETAILS_PRIC_PRTCN_EDDATE,
                     TARGET.PRICE_REVISION = SOURCE.PS_DETAILS_PRICE_REVISION,
                     TARGET.REVISION_DATE = SOURCE.PS_DETAILS_REVISION_DATE,
                     TARGET.SUGGESTED_PRICE = SOURCE.PS_DETAILS_SUGGESTED_PRICE,
                     TARGET.PRICE = SOURCE.PS_DETAILS_PRICE,
                     TARGET.STATUS = SOURCE.STATUS,
                     TARGET.BRAND_MASTER_SID = SOURCE.BRAND_MASTER_SID,
                     TARGET.NEP = SOURCE.NEP,
                     TARGET.PRICE_PROTECTION_STATUS = SOURCE.PRICE_PROTECTION_STATUS,
                     TARGET.PRICE_PROTECTION_PRICE_TYPE = SOURCE.PRICE_PROTECTION_PRICE_TYPE,
                     TARGET.NEP_FORMULA = SOURCE.NEP_FORMULA,
                     TARGET.MAX_INCREMENTAL_CHANGE = SOURCE.MAX_INCREMENTAL_CHANGE,
                     TARGET.RESET_ELIGIBLE = SOURCE.RESET_ELIGIBLE,
                     TARGET.RESET_TYPE = SOURCE.RESET_TYPE,
                     TARGET.RESET_DATE = SOURCE.RESET_DATE,
                     TARGET.RESET_INTERVAL = SOURCE.RESET_INTERVAL,
                     TARGET.RESET_FREQUENCY = SOURCE.RESET_FREQUENCY,
                     TARGET.NET_PRICE_TYPE = SOURCE.NET_PRICE_TYPE,
                     TARGET.NET_PRICE_TYPE_FORMULA = SOURCE.NET_PRICE_TYPE_FORMULA,
                     TARGET.CREATED_BY = SOURCE.PS_DETAILS_CREATED_BY,
                     TARGET.CREATED_DATE = SOURCE.PS_DETAILS_CREATED_DATE,
                     TARGET.MODIFIED_BY = ISNULL(SOURCE.PS_DETAILS_MODIFIED_BY, @USERS_SID),
                     TARGET.MODIFIED_DATE = ISNULL(SOURCE.PS_DETAILS_MODIFIED_DATE,GETDATE()),
                     TARGET.BASE_PRICE_TYPE = SOURCE.BASE_PRICE_TYPE,
                     TARGET.BASE_PRICE_ENTRY = SOURCE.BASE_PRICE_ENTRY,
                     TARGET.BASE_PRICE_DATE = SOURCE.BASE_PRICE_DATE,
                     TARGET.NET_BASE_PRICE = SOURCE.NET_BASE_PRICE,
                     TARGET.BASE_PRICE_DDLB = SOURCE.BASE_PRICE_DDLB,
                     TARGET.NET_BASE_PRICE_FORMULA_ID = SOURCE.NET_BASE_PRICE_FORMULA_ID,
                     TARGET.SUBSEQUENT_PERIOD_PRICE_TYPE = SOURCE.SUBSEQUENT_PERIOD_PRICE_TYPE,
                     TARGET.NET_SUBSEQUENT_PERIOD_PRICE = SOURCE.NET_SUBSEQUENT_PERIOD_PRICE,
                     TARGET.NET_SUBSEQUENT_PRICE_FORMULA_ID = SOURCE.NET_SUBSEQUENT_PRICE_FORMULA_ID,
                     TARGET.RESET_PRICE_TYPE = SOURCE.RESET_PRICE_TYPE,
                     TARGET.NET_RESET_PRICE_TYPE = SOURCE.NET_RESET_PRICE_TYPE,
                     TARGET.NET_RESET_PRICE_FORMULA_ID = SOURCE.NET_RESET_PRICE_FORMULA_ID,
                     TARGET.PPA_INDEX_NO = SOURCE.PPA_INDEX_NO,
                     TARGET.ADD_COPY_INDICATOR = SOURCE.ADD_COPY_INDICATOR
WHEN NOT MATCHED
       THEN
              INSERT (
                     ITEM_MASTER_SID,
                     CONTRACT_PRICE_START_DATE,
                     CONTRACT_PRICE_END_DATE,
                     ITEM_PRICING_QUALIFIER_SID,
                     CONTRACT_PRICE,
                     PRICE_PROTECTION_START_DATE,
                     PRICE_PROTECTION_END_DATE,
                     PRICE_TOLERANCE_TYPE,
                     PRICE_TOLERANCE,
                     BASE_PRICE,
                     PRICE_TOLERANCE_FREQUENCY,
                     PRICE_TOLERANCE_INTERVAL,
                     IFP_MODEL_SID,
                     PRICE,
                     STATUS,
                     ITEM_PS_ATTACHED_DATE,
                     ITEM_PS_ATTACHED_STATUS,
                     PRICE_PROTECTION_STATUS,
                     PRICE_PROTECTION_PRICE_TYPE,
                     NEP,
                     NEP_FORMULA,
                     MAX_INCREMENTAL_CHANGE,
                     RESET_ELIGIBLE,
                     RESET_TYPE,
                     RESET_DATE,
                     RESET_INTERVAL,
                     RESET_FREQUENCY,
                     NET_PRICE_TYPE,
                     NET_PRICE_TYPE_FORMULA,
                     BRAND_MASTER_SID,
                     SUGGESTED_PRICE,
                     BASE_PRICE_TYPE,
                     BASE_PRICE_ENTRY,
                     BASE_PRICE_DATE,
                     NET_BASE_PRICE,
                     BASE_PRICE_DDLB,
                     SUBSEQUENT_PERIOD_PRICE_TYPE,
                     NET_SUBSEQUENT_PERIOD_PRICE,
                     NET_SUBSEQUENT_PRICE_FORMULA_ID,
                     RESET_PRICE_TYPE,
                     NET_RESET_PRICE_TYPE,
                     NET_RESET_PRICE_FORMULA_ID,
                     NET_BASE_PRICE_FORMULA_ID,
                     CREATED_BY,
                     CREATED_DATE,
                     MODIFIED_BY,
                     MODIFIED_DATE,
                     PS_MODEL_SID,
                     INBOUND_STATUS,
                     RECORD_LOCK_STATUS,
                     PPA_INDEX_NO,
                     ADD_COPY_INDICATOR
                     )
              VALUES (
                     NULLIF(ITEM_MASTER_SID, 0),
                     PS_DTLS_CONT_PRICE_STARTDATE,
                     PS_DTLS_CONT_PRICE_ENDDATE,
                     CASE
                           WHEN PS_DETAILS_PRICETYPE = 0
                                  THEN NULL
                           ELSE PS_DETAILS_PRICETYPE
                           END,
                     PS_DETAILS_CONTRACT_PRICE,
                     PS_DETAILS_PRIC_PRTCN_STDATE,
                     PS_DETAILS_PRIC_PRTCN_EDDATE,
                     PS_DTLS_PRICE_TOLERANCE_TYPE,
                     PS_DETAILS_PRICE_TOLERANCE,
                     PS_DETAILS_BASE_PRICE,
                     PS_DTLS_PRICE_TOLERANCE_FREQ,
                     PS_DTLS_PRICE_TOLERANCE_INTRVL,
                     NULLIF(IFP_MODEL_SID, 0),
                     PS_DETAILS_PRICE,
                     STATUS,
                     PS_DETAILS_ATTACHED_DATE,
                     STATUS,
                     PRICE_PROTECTION_STATUS,
                     PRICE_PROTECTION_PRICE_TYPE,
                     NEP,
                     NEP_FORMULA,
                     MAX_INCREMENTAL_CHANGE,
                     RESET_ELIGIBLE,
                     RESET_TYPE,
                     RESET_DATE,
                     RESET_INTERVAL,
                     RESET_FREQUENCY,
                     NET_PRICE_TYPE,
                     NULLIF(NET_PRICE_TYPE_FORMULA, 0),
                     NULLIF(BRAND_MASTER_SID, 0),
                     PS_DETAILS_SUGGESTED_PRICE,
                     BASE_PRICE_TYPE,
                     BASE_PRICE_ENTRY,
                     BASE_PRICE_DATE,
                     NET_BASE_PRICE,
                     BASE_PRICE_DDLB,
                     SUBSEQUENT_PERIOD_PRICE_TYPE,
                     NET_SUBSEQUENT_PERIOD_PRICE,
                     NET_SUBSEQUENT_PRICE_FORMULA_ID,
                     RESET_PRICE_TYPE,
                     NET_RESET_PRICE_TYPE,
                     NET_RESET_PRICE_FORMULA_ID,
                     NET_BASE_PRICE_FORMULA_ID,
                     @USERS_SID,
                     GETDATE(),
                     @USERS_SID,
                     GETDATE(),
                     @PS_MODEL_SID,
                     'A',
                     0,
                     PPA_INDEX_NO,
                     ADD_COPY_INDICATOR
                     );
 
 
        	
 		]]>
		</query>
	</entity>
	<entity id="getImtdPsDetailsUpdateQuery">
		<query> 
            <![CDATA[
             DECLARE @COLUMN_NAME VARCHAR(50) = ?,
				@VALUE VARCHAR(50) = ?,
				@IMTD_PS_DETAILS_SID INT = ?,
				@USERS_SID VARCHAR(10) = ?,
				@SESSION_ID VARCHAR(50) = ? 

			DECLARE @SQL NVARCHAR(MAX)
			SET
			@SQL = ' UPDATE
				IMTD_PS_DETAILS
			SET ' + @COLUMN_NAME + ' = @VALUE
			WHERE
				IMTD_PS_DETAILS_SID = @IMTD_PS_DETAILS_SID
				AND USERS_SID = @USERS_SID
				AND SESSION_ID = @SESSION_ID' 
			exec sp_executesql @sql,
			N'@COLUMN_NAME VARCHAR(50) ,
			@VALUE VARCHAR(50),
			@IMTD_PS_DETAILS_SID INT,
			@USERS_SID VARCHAR(10) ,
			@SESSION_ID VARCHAR(50)',
			@COLUMN_NAME = @COLUMN_NAME,
			@VALUE = @VALUE,
			@IMTD_PS_DETAILS_SID = @IMTD_PS_DETAILS_SID,
			@USERS_SID = @USERS_SID,
			@SESSION_ID = @SESSION_ID
		]]>
		</query>
	</entity>
	<entity id="getPsModelDeleteQuery">
		<query> 
            <![CDATA[  
                   	DECLARE @PS_MODEL_SID INT = ? 
                    
                    UPDATE PS_MODEL SET INBOUND_STATUS ='D' WHERE PS_MODEL_SID = @PS_MODEL_SID;
 ]]>
		</query>
	</entity>
	<entity id="getPsInfoQuery">
		<query> 
            <![CDATA[  
                   	DECLARE @PS_MODEL_SID INT = ? 
                    SELECT
						PS_ID,
						PS_NO,
						PS_NAME,
						PARENT_PS_NAME,
						CREATED_BY,
						MODIFIED_BY,
						PARENT_PS_ID,
						PARENT_PS_NAME as PARENT_PS_NO,
						PS_STATUS,
						PS_DESIGNATION,
						PS_TYPE,
						PS_CATEGORY,
						PS_TRADE_CLASS,
						PS_START_DATE,
						PS_END_DATE,
						INTERNAL_NOTES
					FROM
						dbo.PS_MODEL
					WHERE
						PS_MODEL_SID = @PS_MODEL_SID;
                    
 ]]>
		</query>
	</entity>
	<entity id="getPsIfpInfoQuery">
		<query> 
            <![CDATA[ 
			DECLARE 
			@PS_MODEL_SID INT=?
			
			Select
				distinct IFP.IFP_ID,
				IFP.IFP_NO,
				IFP.IFP_NAME,
			case
				WHEN IFP_STATUS.DESCRIPTION = '-Select One-' THEN ''
				END as IFP_STATUS,
				IFP.IFP_END_DATE,
			case
				WHEN IFP_TYPE.DESCRIPTION = '-Select One-' THEN ''
				END as IFP_TYPE,
	
				 case WHEN  IFP_CATEGORY.DESCRIPTION='-Select One-' THEN '' END as IFP_CATEGORY, IFP.IFP_MODEL_SID   
				 FROM IFP_MODEL  IFP LEFT JOIN HELPER_TABLE IFP_STATUS ON IFP_STATUS.HELPER_TABLE_SID=IFP.IFP_STATUS
				LEFT JOIN HELPER_TABLE IFP_TYPE ON IFP_TYPE.HELPER_TABLE_SID=IFP.IFP_TYPE
				LEFT JOIN HELPER_TABLE IFP_CATEGORY ON IFP_CATEGORY.HELPER_TABLE_SID=IFP.IFP_CATEGORY  
				JOIN dbo.PS_DETAILS PSD ON PSD.IFP_MODEL_SID=IFP.IFP_MODEL_SID AND PSD.PS_MODEL_SID= @PS_MODEL_SID;
		]]>
		</query>
	</entity>
	<entity id="getImtdPsDetailsDeleteLineQuery">
		<query> 
            <![CDATA[ 
			DECLARE 
			@USERS_SID VARCHAR(10) = ?,
			@SESSION_ID VARCHAR(10)=?
			
			DELETE  FROM dbo.Imtd_Ps_Details where CHECK_RECORD = 1 and ADD_COPY_INDICATOR = 'A' AND USERS_SID=@USERS_SID	AND SESSION_ID= @SESSION_ID;
		]]>
		</query>
	</entity>
	<entity id="getImtdPsDetailsInsertQueryAddLine">
		<query> 
            <![CDATA[ 
		DECLARE @USERS_SID VARCHAR(10) = ?,
       @SESSION_ID VARCHAR(10) = ?
 
INSERT INTO DBO.IMTD_PS_DETAILS (
       PS_MODEL_SID,
       PS_DETAILS_SID,
       ITEM_MASTER_SID,
       ITEM_ID,
       ITEM_NO,
       ITEM_NAME,
       IFP_MODEL_SID,
       IFP_NO,
       BRAND_MASTER_SID,
       PS_DETAILS_PRICE,
       PS_DETAILS_PRICETYPE,
       PS_DETAILS_BASE_PRICE,
       PS_DETAILS_CONTRACT_PRICE,
       PS_DTLS_CONT_PRICE_STARTDATE,
       PS_DTLS_CONT_PRICE_ENDDATE,
       PS_DETAILS_REVISION_DATE,
       PS_DETAILS_ATTACHED_DATE,
       PS_DETAILS_ATTACHED_STATUS,
       PS_DETAILS_CREATED_DATE,
       PS_DETAILS_CREATED_BY,
       STATUS,
       USERS_SID,
       SESSION_ID,
       CREATED_DATE,
       CHECK_RECORD,
       OPERATION,
       ADD_COPY_INDICATOR,
       PPA_INDEX_NO,
       PS_ID
       )
SELECT PS_MODEL_SID,
       PS_DETAILS_SID,
       ITEM_MASTER_SID,
       ITEM_ID,
       ITEM_NO,
       ITEM_NAME,
       IFP_MODEL_SID,
       IFP_NO,
       BRAND_MASTER_SID,
       PS_DETAILS_PRICE,
       PS_DETAILS_PRICETYPE,
       PS_DETAILS_BASE_PRICE,
       PS_DETAILS_CONTRACT_PRICE,
       PS_DTLS_CONT_PRICE_STARTDATE,
       PS_DTLS_CONT_PRICE_ENDDATE,
       PS_DETAILS_REVISION_DATE,
       PS_DETAILS_ATTACHED_DATE,
       PS_DETAILS_ATTACHED_STATUS,
       PS_DETAILS_CREATED_DATE,
       PS_DETAILS_CREATED_BY,
       STATUS,
       USERS_SID,
       SESSION_ID,
       CREATED_DATE,
       0 AS CHECK_RECORD,
       OPERATION,
       'A' AS ADD_COPY_INDICATOR,
            COALESCE(CS.COUNT_VALUE, 0) + ROW_NUMBER() OVER (
              PARTITION BY ITEM_MASTER_SID,
              COALESCE(PS_ID, convert(varchar(50),PS_MODEL_SID)),
              IFP_MODEL_SID,
              PS_DTLS_CONT_PRICE_STARTDATE ORDER BY PS_DETAILS_PRIC_PRTCN_STDATE
              ) PPA_INDEX_NO,
       PS_ID
FROM IMTD_PS_DETAILS A
OUTER APPLY (
       SELECT TOP 1 MAX(B.PPA_INDEX_NO) OVER (
                     PARTITION BY ITEM_MASTER_SID,
                     COALESCE(PS_ID, convert(varchar(50),PS_MODEL_SID)),
                     IFP_MODEL_SID,
                     PS_DTLS_CONT_PRICE_STARTDATE
                     ) COUNT_VALUE
       FROM IMTD_PS_DETAILS B
       WHERE A.ITEM_MASTER_SID = B.ITEM_MASTER_SID
              AND COALESCE(A.PS_ID, convert(varchar(50),A.PS_MODEL_SID)) = COALESCE(B.PS_ID, convert(varchar(50),B.PS_MODEL_SID))
              AND A.PS_DTLS_CONT_PRICE_STARTDATE = B.PS_DTLS_CONT_PRICE_STARTDATE
              AND A.USERS_SID = B.USERS_SID
              AND A.SESSION_ID = B.SESSION_ID
       ) CS
WHERE A.CHECK_RECORD = 1
       AND USERS_SID = @USERS_SID
       AND SESSION_ID = @SESSION_ID;
		]]>
		</query>
	</entity>
	<entity id="getPsEditInsertMainToTempCopyQuery">
		<query> 
            <![CDATA[ 
			DECLARE @USERS_SID VARCHAR(10) = ?,
       @SESSION_ID VARCHAR(10) = ?
 
INSERT INTO DBO.IMTD_PS_DETAILS (
       PS_MODEL_SID,
       PS_DETAILS_SID,
       CONTRACT_MASTER_SID,
       CFP_MODEL_SID,
       ITEM_MASTER_SID,
       ITEM_ID,
       ITEM_NO,
       ITEM_NAME,
       IFP_MODEL_SID,
       IFP_NO,
       PS_DETAILS_PRICE,
       PS_DETAILS_PRICETYPE,
       PS_DETAILS_PRICE_TOLERANCE,
       PS_DTLS_PRICE_TOLERANCE_TYPE,
       PS_DTLS_PRICE_TOLERANCE_INTRVL,
       PS_DTLS_PRICE_TOLERANCE_FREQ,
       PS_DETAILS_PRIC_PRTCN_STDATE,
       PS_DETAILS_PRIC_PRTCN_EDDATE,
       PS_DETAILS_BASE_PRICE,
       PS_DETAILS_CONTRACT_PRICE,
       PS_DTLS_CONT_PRICE_STARTDATE,
       PS_DTLS_CONT_PRICE_ENDDATE,
       PS_DETAILS_REVISION_DATE,
       PS_DETAILS_ATTACHED_DATE,
       PS_DETAILS_ATTACHED_STATUS,
       PS_DETAILS_PRICE_REVISION,
       PS_DETAILS_PRICE_PLAN_ID,
       PS_DETAILS_SUGGESTED_PRICE,
       STATUS,
       BRAND_MASTER_SID,
       NEP,
       PRICE_PROTECTION_STATUS,
       PRICE_PROTECTION_PRICE_TYPE,
       NEP_FORMULA,
       MAX_INCREMENTAL_CHANGE,
       RESET_ELIGIBLE,
       RESET_TYPE,
       RESET_DATE,
       RESET_INTERVAL,
       RESET_FREQUENCY,
       NET_PRICE_TYPE,
       NET_PRICE_TYPE_FORMULA,
       PS_DETAILS_CREATED_DATE,
       PS_DETAILS_CREATED_BY,
       PS_DETAILS_MODIFIED_DATE,
       PS_DETAILS_MODIFIED_BY,
       USERS_SID,
       SESSION_ID,
       IMTD_CREATED_DATE,
       CREATED_BY,
       CREATED_DATE,
       MODIFIED_BY,
       MODIFIED_DATE,
       BASE_PRICE_TYPE,
       BASE_PRICE_ENTRY,
       BASE_PRICE_DATE,
       BASE_PRICE_DDLB,
       NET_BASE_PRICE,
       NET_BASE_PRICE_FORMULA_ID,
       NET_BASE_PRICE_FORMULA_NAME,
       NET_BASE_PRICE_FORMULA_NO,
       SUBSEQUENT_PERIOD_PRICE_TYPE,
       NET_SUBSEQUENT_PERIOD_PRICE,
       NET_SUBSEQUENT_PRICE_FORMULA_ID,
       NET_SUBSEQUENT_PRICE_FORMULA_NO,
       NET_SUBSEQUENT_PRICE_FORMULA_NAME,
       RESET_PRICE_TYPE,
       NET_RESET_PRICE_TYPE,
       NET_RESET_PRICE_FORMULA_ID,
       NET_RESET_PRICE_FORMULA_NO,
       NET_RESET_PRICE_FORMULA_NAME,
       CHECK_RECORD,
       OPERATION,
       ADD_COPY_INDICATOR,
       PPA_INDEX_NO,
       PS_ID
       )
SELECT PS_MODEL_SID,
       PS_DETAILS_SID,
       CONTRACT_MASTER_SID,
       CFP_MODEL_SID,
       ITEM_MASTER_SID,
       ITEM_ID,
       ITEM_NO,
       ITEM_NAME,
       IFP_MODEL_SID,
       IFP_NO,
       PS_DETAILS_PRICE,
       PS_DETAILS_PRICETYPE,
       PS_DETAILS_PRICE_TOLERANCE,
       PS_DTLS_PRICE_TOLERANCE_TYPE,
       PS_DTLS_PRICE_TOLERANCE_INTRVL,
       PS_DTLS_PRICE_TOLERANCE_FREQ,
       PS_DETAILS_PRIC_PRTCN_STDATE,
       PS_DETAILS_PRIC_PRTCN_EDDATE,
       PS_DETAILS_BASE_PRICE,
       PS_DETAILS_CONTRACT_PRICE,
       PS_DTLS_CONT_PRICE_STARTDATE,
       PS_DTLS_CONT_PRICE_ENDDATE,
       PS_DETAILS_REVISION_DATE,
       PS_DETAILS_ATTACHED_DATE,
       PS_DETAILS_ATTACHED_STATUS,
       PS_DETAILS_PRICE_REVISION,
       PS_DETAILS_PRICE_PLAN_ID,
       PS_DETAILS_SUGGESTED_PRICE,
       STATUS,
       BRAND_MASTER_SID,
       NEP,
       PRICE_PROTECTION_STATUS,
       PRICE_PROTECTION_PRICE_TYPE,
       NEP_FORMULA,
       MAX_INCREMENTAL_CHANGE,
       RESET_ELIGIBLE,
       RESET_TYPE,
       RESET_DATE,
       RESET_INTERVAL,
       RESET_FREQUENCY,
       NET_PRICE_TYPE,
       NET_PRICE_TYPE_FORMULA,
       PS_DETAILS_CREATED_DATE,
       PS_DETAILS_CREATED_BY,
       PS_DETAILS_MODIFIED_DATE,
       PS_DETAILS_MODIFIED_BY,
       USERS_SID,
       SESSION_ID,
       IMTD_CREATED_DATE,
       CREATED_BY,
       CREATED_DATE,
       MODIFIED_BY,
       MODIFIED_DATE,
       BASE_PRICE_TYPE,
       BASE_PRICE_ENTRY,
       BASE_PRICE_DATE,
       BASE_PRICE_DDLB,
       NET_BASE_PRICE,
       NET_BASE_PRICE_FORMULA_ID,
       NET_BASE_PRICE_FORMULA_NAME,
       NET_BASE_PRICE_FORMULA_NO,
       SUBSEQUENT_PERIOD_PRICE_TYPE,
       NET_SUBSEQUENT_PERIOD_PRICE,
       NET_SUBSEQUENT_PRICE_FORMULA_ID,
       NET_SUBSEQUENT_PRICE_FORMULA_NO,
       NET_SUBSEQUENT_PRICE_FORMULA_NAME,
       RESET_PRICE_TYPE,
       NET_RESET_PRICE_TYPE,
       NET_RESET_PRICE_FORMULA_ID,
       NET_RESET_PRICE_FORMULA_NO,
       NET_RESET_PRICE_FORMULA_NAME,
       0 AS CHECK_RECORD,
       OPERATION,
       'A' AS ADD_COPY_INDICATOR,
            COALESCE(CS.COUNT_VALUE, 0) + ROW_NUMBER() OVER (
              PARTITION BY ITEM_MASTER_SID,
              COALESCE(PS_ID, convert(varchar(50),PS_MODEL_SID)),
              IFP_MODEL_SID,
              PS_DTLS_CONT_PRICE_STARTDATE ORDER BY PS_DETAILS_PRIC_PRTCN_STDATE
              ) PPA_INDEX_NO,
       PS_ID
FROM IMTD_PS_DETAILS A
OUTER APPLY (
       SELECT TOP 1 MAX(B.PPA_INDEX_NO) OVER (
                     PARTITION BY ITEM_MASTER_SID,
                     COALESCE(PS_ID, convert(varchar(50),PS_MODEL_SID)),
                     IFP_MODEL_SID,
                     PS_DTLS_CONT_PRICE_STARTDATE
                     ) COUNT_VALUE
       FROM IMTD_PS_DETAILS B
       WHERE A.ITEM_MASTER_SID = B.ITEM_MASTER_SID
              AND COALESCE(A.PS_ID, convert(varchar(50),A.PS_MODEL_SID)) = COALESCE(B.PS_ID, convert(varchar(50),B.PS_MODEL_SID))
              AND A.PS_DTLS_CONT_PRICE_STARTDATE = B.PS_DTLS_CONT_PRICE_STARTDATE
              AND A.USERS_SID = B.USERS_SID
              AND A.SESSION_ID = B.SESSION_ID
       ) CS
WHERE A.CHECK_RECORD = 1
       AND USERS_SID = @USERS_SID
       AND SESSION_ID = @SESSION_ID
			
		]]>
		</query>
	</entity>
	<entity id="priceProtectionTableOnLoadItemId">
		<query> 
            <![CDATA[ 
			DECLARE 
			@USERS_SID VARCHAR(10) = ?,
			@SESSION_ID VARCHAR(10)=?
			
			select IMTD_PS_DETAILS_SID from IMTD_PS_DETAILS where USERS_SID=@USERS_SID AND SESSION_ID= @SESSION_ID;
		]]>
		</query>
	</entity>
	<entity id="getAddCopyDeleteLineAlertCountQuery">
		<query> 
            <![CDATA[ 
			DECLARE 
			@USERS_SID VARCHAR(10) = ?,
			@SESSION_ID VARCHAR(10)=?
			
			select count(1) from dbo.Imtd_Ps_Details where USERS_SID=@USERS_SID AND SESSION_ID= @SESSION_ID and CHECK_RECORD = 1;
		]]>
		</query>
	</entity>
	<entity id="deleteLineAlertCountQuery">
		<query> 
            <![CDATA[ 
			DECLARE 
			@USERS_SID VARCHAR(10) = ?,
			@SESSION_ID VARCHAR(10)=?
			
			select count(1) from dbo.Imtd_Ps_Details where USERS_SID=@USERS_SID AND SESSION_ID= @SESSION_ID and CHECK_RECORD = 1 and ADD_COPY_INDICATOR = 'A';
		]]>
		</query>
	</entity>
	<entity id="priceProtectionStartDateAlertQuery">
		<query> 
            <![CDATA[ 
			DECLARE 
			@USERS_SID VARCHAR(10) = ?,
			@SESSION_ID VARCHAR(10)=?
			
			Select MAX(mycount) from
                        (SELECT ITEM_ID,COUNT(PS_DETAILS_PRIC_PRTCN_STDATE)mycount
                        FROM dbo.Imtd_Ps_Details where USERS_SID=@USERS_SID AND SESSION_ID= @SESSION_ID
                        GROUP BY PS_DETAILS_PRIC_PRTCN_STDATE,ITEM_ID) a
		]]>
		</query>
	</entity>

	<entity id="Imtd_Ps_Details_Count_query">
		<query> 
            <![CDATA[ 
			select count(item_No) from Imtd_Ps_Details where   
		]]>
		</query>
	</entity>

	<entity id="psNotesTabAttachDetailsQuery">
		<query>
        <![CDATA[
        	DECLARE 
			@ATTACHMENT_TABLE_SID INT=?
        	
            SELECT
                   
                   AT.MASTER_TABLE_NAME,
                   AT.FILE_NAME,
                   AT.CREATED_DATE,
                   AT.CREATED_BY,
                   AT.ATTACHMENT_SID,
                   AT.FILE_DATA
                    
            FROM
                    ATTACHMENT AT
            
            WHERE
                    MASTER_TABLE_NAME = 'PS_MODEL'
                    AND ATTACHMENT_TABLE_SID = @ATTACHMENT_TABLE_SID;
 ]]>
		</query>
	</entity>

	<entity id="getNotesTabAttachDeleteQuery">
		<query>
        <![CDATA[
              
        DELETE FROM ATTACHMENT WHERE ATTACHMENT_TABLE_SID =? AND MASTER_TABLE_NAME='PS_MODEL';
 		]]>
		</query>
	</entity>
	<entity id="getPsIdWithStatusD">
		<query> 
            <![CDATA[   
             Select * from PS_MODEL where INBOUND_STATUS <> 'A' and PS_ID='?' and PS_NO='?'
                ]]>
		</query>
	</entity>
	<entity id="UpdatePsIdAndPsNoWithStatusA">
		<query> 
            <![CDATA[   
          UPDATE PS_MODEL SET INBOUND_STATUS='A' WHERE PS_ID='?' AND PS_NO='?' AND INBOUND_STATUS like 'D'
                ]]>
		</query>
	</entity>
	<entity id="getSysIdForPsIdWithStatusD">
		<query> 
            <![CDATA[   
            Select PS_MODEL_SID from PS_MODEL where PS_ID='?' AND PS_NO='?'
                ]]>
		</query>
	</entity>

	<entity id="getPsCopyDetailsInsertQuery">
		<query>
        <![CDATA[
        	DECLARE @USERS_SID VARCHAR(50) = ?
	,@SESSION_ID VARCHAR(50) = ?
	,@PS_MODEL_SID INT = ?



              INSERT INTO dbo.PS_DETAILS (
                     ITEM_MASTER_SID,
                     CONTRACT_PRICE_START_DATE,
                     CONTRACT_PRICE_END_DATE,
                     ITEM_PRICING_QUALIFIER_SID,
                     CONTRACT_PRICE,
                     PRICE_PROTECTION_START_DATE,
                     PRICE_PROTECTION_END_DATE,
                     PRICE_TOLERANCE_TYPE,
                     PRICE_TOLERANCE,
                     BASE_PRICE,
                     PRICE_TOLERANCE_FREQUENCY,
                     PRICE_TOLERANCE_INTERVAL,
                     IFP_MODEL_SID,
                     PRICE,
                     ITEM_PS_ATTACHED_STATUS,
                     ITEM_PS_ATTACHED_DATE,
                     STATUS,
                     PRICE_PROTECTION_STATUS,
                     PRICE_PROTECTION_PRICE_TYPE,
                     NEP,
                     NEP_FORMULA,
                     MAX_INCREMENTAL_CHANGE,
                     RESET_ELIGIBLE,
                     RESET_TYPE,
                     RESET_DATE,
                     RESET_INTERVAL,
                     RESET_FREQUENCY,
                     NET_PRICE_TYPE,
                     NET_PRICE_TYPE_FORMULA,
                     BRAND_MASTER_SID,
                     SUGGESTED_PRICE,
                     BASE_PRICE_TYPE,
                     BASE_PRICE_ENTRY,
                     BASE_PRICE_DATE,
                     NET_BASE_PRICE,
                     BASE_PRICE_DDLB,
                     SUBSEQUENT_PERIOD_PRICE_TYPE,
                     NET_SUBSEQUENT_PERIOD_PRICE,
                     NET_SUBSEQUENT_PRICE_FORMULA_ID,
                     RESET_PRICE_TYPE,
                     NET_RESET_PRICE_TYPE,
                     NET_RESET_PRICE_FORMULA_ID,
                     NET_BASE_PRICE_FORMULA_ID,
                     CREATED_BY,
                     CREATED_DATE,
                     MODIFIED_BY,
                     MODIFIED_DATE,
                     PS_MODEL_SID,
                     INBOUND_STATUS,
                     RECORD_LOCK_STATUS,
                     PPA_INDEX_NO,
                     ADD_COPY_INDICATOR
                     )
              SELECT
                     NULLIF(Source.ITEM_MASTER_SID, 0),
                     Source.PS_DTLS_CONT_PRICE_STARTDATE,
                     Source.PS_DTLS_CONT_PRICE_ENDDATE,
                     CASE
                           WHEN Source.PS_DETAILS_PRICETYPE = 0
                                  THEN NULL
                           ELSE Source.PS_DETAILS_PRICETYPE
                           END,
                     Source.PS_DETAILS_CONTRACT_PRICE,
                     Source.PS_DETAILS_PRIC_PRTCN_STDATE,
                     Source.PS_DETAILS_PRIC_PRTCN_EDDATE,
                     Source.PS_DTLS_PRICE_TOLERANCE_TYPE,
                     Source.PS_DETAILS_PRICE_TOLERANCE,
                     Source.PS_DETAILS_BASE_PRICE,
                     Source.PS_DTLS_PRICE_TOLERANCE_FREQ,
                     Source.PS_DTLS_PRICE_TOLERANCE_INTRVL,
                     NULLIF(Source.IFP_MODEL_SID, 0),
                     Source.PS_DETAILS_PRICE,
                     Source.PS_DETAILS_ATTACHED_STATUS,
                     Source.PS_DETAILS_ATTACHED_DATE,
                     Source.STATUS,
                     Source.PRICE_PROTECTION_STATUS,
                     Source.PRICE_PROTECTION_PRICE_TYPE,
                     Source.NEP,
                     Source.NEP_FORMULA,
                     Source.MAX_INCREMENTAL_CHANGE,
                     Source.RESET_ELIGIBLE,
                     Source.RESET_TYPE,
                     Source.RESET_DATE,
                     Source.RESET_INTERVAL,
                     Source.RESET_FREQUENCY,
                     Source.NET_PRICE_TYPE,
                     NULLIF(Source.NET_PRICE_TYPE_FORMULA, 0),
                     NULLIF(Source.BRAND_MASTER_SID, 0),
                     Source.PS_DETAILS_SUGGESTED_PRICE,
                     Source.BASE_PRICE_TYPE,
                     Source.BASE_PRICE_ENTRY,
                     Source.BASE_PRICE_DATE,
                     Source.NET_BASE_PRICE,
                     Source.BASE_PRICE_DDLB,
                     Source.SUBSEQUENT_PERIOD_PRICE_TYPE,
                     Source.NET_SUBSEQUENT_PERIOD_PRICE,
                     Source.NET_SUBSEQUENT_PRICE_FORMULA_ID,
                     Source.RESET_PRICE_TYPE,
                     Source.NET_RESET_PRICE_TYPE,
                     Source.NET_RESET_PRICE_FORMULA_ID,
                     Source.NET_BASE_PRICE_FORMULA_ID,
                     @USERS_SID,
                     GETDATE(),
                     @USERS_SID,
                     GETDATE(),
                     @PS_MODEL_SID,
                     'A',
                     0,
                     Source.PPA_INDEX_NO,
                     Source.ADD_COPY_INDICATOR
                     
                     FROM 
                     	dbo.IMTD_PS_DETAILS as Source
		WHERE
			USERS_SID = @USERS_SID AND  SESSION_ID =@SESSION_ID
			and CHECK_RECORD = 1;
 
 
        	
 		]]>
		</query>
	</entity>

</sql>