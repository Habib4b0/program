/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.ForecastingViewMaster;
import com.stpl.app.model.ForecastingViewMasterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ForecastingViewMaster service. Represents a row in the &quot;FORECASTING_VIEW_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ForecastingViewMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ForecastingViewMasterImpl}.
 * </p>
 *
 * @author
 * @see ForecastingViewMasterImpl
 * @see ForecastingViewMaster
 * @see ForecastingViewMasterModel
 * @generated
 */
@ProviderType
public class ForecastingViewMasterModelImpl extends BaseModelImpl<ForecastingViewMaster>
	implements ForecastingViewMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a forecasting view master model instance should use the {@link ForecastingViewMaster} interface instead.
	 */
	public static final String TABLE_NAME = "FORECASTING_VIEW_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.VARCHAR },
			{ "VIEW_TYPE", Types.VARCHAR },
			{ "VIEW_ID", Types.INTEGER },
			{ "PROJECTION_ID", Types.INTEGER },
			{ "MODIFIED_BY", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "VIEW_NAME", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VIEW_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VIEW_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PROJECTION_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("VIEW_NAME", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table FORECASTING_VIEW_MASTER (CREATED_DATE DATE null,CREATED_BY VARCHAR(75) null,VIEW_TYPE VARCHAR(75) null,VIEW_ID INTEGER not null primary key IDENTITY,PROJECTION_ID INTEGER,MODIFIED_BY VARCHAR(75) null,MODIFIED_DATE DATE null,VIEW_NAME VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table FORECASTING_VIEW_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY forecastingViewMaster.viewId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FORECASTING_VIEW_MASTER.VIEW_ID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.ForecastingViewMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.ForecastingViewMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.ForecastingViewMaster"));

	public ForecastingViewMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _viewId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setViewId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _viewId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ForecastingViewMaster.class;
	}

	@Override
	public String getModelClassName() {
		return ForecastingViewMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("viewType", getViewType());
		attributes.put("viewId", getViewId());
		attributes.put("projectionId", getProjectionId());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("viewName", getViewName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String viewType = (String)attributes.get("viewType");

		if (viewType != null) {
			setViewType(viewType);
		}

		Integer viewId = (Integer)attributes.get("viewId");

		if (viewId != null) {
			setViewId(viewId);
		}

		Integer projectionId = (Integer)attributes.get("projectionId");

		if (projectionId != null) {
			setProjectionId(projectionId);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String viewName = (String)attributes.get("viewName");

		if (viewName != null) {
			setViewName(viewName);
		}
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getViewType() {
		if (_viewType == null) {
			return StringPool.BLANK;
		}
		else {
			return _viewType;
		}
	}

	@Override
	public void setViewType(String viewType) {
		_viewType = viewType;
	}

	@Override
	public int getViewId() {
		return _viewId;
	}

	@Override
	public void setViewId(int viewId) {
		_viewId = viewId;
	}

	@Override
	public int getProjectionId() {
		return _projectionId;
	}

	@Override
	public void setProjectionId(int projectionId) {
		_projectionId = projectionId;
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getViewName() {
		if (_viewName == null) {
			return StringPool.BLANK;
		}
		else {
			return _viewName;
		}
	}

	@Override
	public void setViewName(String viewName) {
		_viewName = viewName;
	}

	@Override
	public ForecastingViewMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ForecastingViewMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ForecastingViewMasterImpl forecastingViewMasterImpl = new ForecastingViewMasterImpl();

		forecastingViewMasterImpl.setCreatedDate(getCreatedDate());
		forecastingViewMasterImpl.setCreatedBy(getCreatedBy());
		forecastingViewMasterImpl.setViewType(getViewType());
		forecastingViewMasterImpl.setViewId(getViewId());
		forecastingViewMasterImpl.setProjectionId(getProjectionId());
		forecastingViewMasterImpl.setModifiedBy(getModifiedBy());
		forecastingViewMasterImpl.setModifiedDate(getModifiedDate());
		forecastingViewMasterImpl.setViewName(getViewName());

		forecastingViewMasterImpl.resetOriginalValues();

		return forecastingViewMasterImpl;
	}

	@Override
	public int compareTo(ForecastingViewMaster forecastingViewMaster) {
		int primaryKey = forecastingViewMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ForecastingViewMaster)) {
			return false;
		}

		ForecastingViewMaster forecastingViewMaster = (ForecastingViewMaster)obj;

		int primaryKey = forecastingViewMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ForecastingViewMaster> toCacheModel() {
		ForecastingViewMasterCacheModel forecastingViewMasterCacheModel = new ForecastingViewMasterCacheModel();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			forecastingViewMasterCacheModel.createdDate = createdDate.getTime();
		}
		else {
			forecastingViewMasterCacheModel.createdDate = Long.MIN_VALUE;
		}

		forecastingViewMasterCacheModel.createdBy = getCreatedBy();

		String createdBy = forecastingViewMasterCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			forecastingViewMasterCacheModel.createdBy = null;
		}

		forecastingViewMasterCacheModel.viewType = getViewType();

		String viewType = forecastingViewMasterCacheModel.viewType;

		if ((viewType != null) && (viewType.length() == 0)) {
			forecastingViewMasterCacheModel.viewType = null;
		}

		forecastingViewMasterCacheModel.viewId = getViewId();

		forecastingViewMasterCacheModel.projectionId = getProjectionId();

		forecastingViewMasterCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = forecastingViewMasterCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			forecastingViewMasterCacheModel.modifiedBy = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			forecastingViewMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			forecastingViewMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		forecastingViewMasterCacheModel.viewName = getViewName();

		String viewName = forecastingViewMasterCacheModel.viewName;

		if ((viewName != null) && (viewName.length() == 0)) {
			forecastingViewMasterCacheModel.viewName = null;
		}

		return forecastingViewMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", viewType=");
		sb.append(getViewType());
		sb.append(", viewId=");
		sb.append(getViewId());
		sb.append(", projectionId=");
		sb.append(getProjectionId());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", viewName=");
		sb.append(getViewName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.ForecastingViewMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewType</column-name><column-value><![CDATA[");
		sb.append(getViewType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewId</column-name><column-value><![CDATA[");
		sb.append(getViewId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionId</column-name><column-value><![CDATA[");
		sb.append(getProjectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewName</column-name><column-value><![CDATA[");
		sb.append(getViewName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ForecastingViewMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ForecastingViewMaster.class
		};
	private Date _createdDate;
	private String _createdBy;
	private String _viewType;
	private int _viewId;
	private int _projectionId;
	private String _modifiedBy;
	private Date _modifiedDate;
	private String _viewName;
	private ForecastingViewMaster _escapedModel;
}