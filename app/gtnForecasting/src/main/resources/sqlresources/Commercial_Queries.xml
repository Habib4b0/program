<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->

<sql> 
    <entity id="Sales_Temp_Main_MASTER">
        <query> 
             <![CDATA[  
	    MERGE NM_SALES_PROJECTION_MASTER AS TARGET
		USING ( 
		SELECT PD.PROJECTION_DETAILS_SID,
		METHODOLOGY,
		USER_GROUP,
		CALCULATION_PERIODS,
		
		CHECK_RECORD
               
		FROM dbo.ST_NM_SALES_PROJECTION_MASTER MAS
                JOIN PROJECTION_DETAILS PD ON MAS.CCP_DETAILS_SID = PD.CCP_DETAILS_SID    
                WHERE  PD.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
		) AS SOURCE 
		ON (TARGET.PROJECTION_DETAILS_SID=SOURCE.PROJECTION_DETAILS_SID)
		WHEN MATCHED 
		THEN 
		UPDATE SET 
		TARGET.METHODOLOGY=SOURCE.METHODOLOGY, 
		TARGET.USER_GROUP=SOURCE.USER_GROUP, 
		TARGET.CALCULATION_PERIODS=SOURCE.CALCULATION_PERIODS, 
		 
		TARGET.CHECK_RECORD=SOURCE.CHECK_RECORD
                
		WHEN NOT MATCHED BY TARGET
		THEN 
		INSERT (PROJECTION_DETAILS_SID,
		METHODOLOGY,
		USER_GROUP,
		CALCULATION_PERIODS,
		
		CHECK_RECORD
                )
                VALUES(SOURCE.PROJECTION_DETAILS_SID,
		SOURCE.METHODOLOGY,
		SOURCE.USER_GROUP,
		SOURCE.CALCULATION_PERIODS,
		
		SOURCE.CHECK_RECORD
                );     
 	   ]]>
        </query>
    </entity>   
    
    <entity id="Sales_Temp_Main_PROJ">
        <query> 
             <![CDATA[              
		MERGE NM_SALES_PROJECTION AS TARGET
		USING ( 
		SELECT PD.PROJECTION_DETAILS_SID,
		ACCOUNT_GROWTH,
		PRODUCT_GROWTH,
		PROJECTION_SALES,
		PROJECTION_UNITS,
		PERIOD_SID
		FROM dbo.ST_NM_SALES_PROJECTION PROJ
                JOIN PROJECTION_DETAILS PD ON PROJ.CCP_DETAILS_SID = PD.CCP_DETAILS_SID    
                WHERE  PD.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
		) AS SOURCE 
		ON (TARGET.PROJECTION_DETAILS_SID=SOURCE.PROJECTION_DETAILS_SID AND TARGET.PERIOD_SID=SOURCE.PERIOD_SID)
		WHEN MATCHED 
		THEN 
		UPDATE SET 
		TARGET.ACCOUNT_GROWTH=SOURCE.ACCOUNT_GROWTH,
		TARGET.PRODUCT_GROWTH=SOURCE.PRODUCT_GROWTH,
		TARGET.PROJECTION_SALES=SOURCE.PROJECTION_SALES,
		TARGET.PROJECTION_UNITS=SOURCE.PROJECTION_UNITS,
		TARGET.PERIOD_SID=SOURCE.PERIOD_SID
		WHEN NOT MATCHED BY TARGET
		THEN 
		INSERT (PROJECTION_DETAILS_SID,
		ACCOUNT_GROWTH,
		PRODUCT_GROWTH,
		PROJECTION_SALES,
		PROJECTION_UNITS,
		PERIOD_SID)
                VALUES(SOURCE.PROJECTION_DETAILS_SID,
		SOURCE.ACCOUNT_GROWTH,
		SOURCE.PRODUCT_GROWTH,
		SOURCE.PROJECTION_SALES,
		SOURCE.PROJECTION_UNITS,
		SOURCE.PERIOD_SID);

	   ]]>
        </query>
    </entity> 
    
    <entity id="Sales_Temp_Main_ACTUAL">
        <query> 
             <![CDATA[    
		MERGE NM_ACTUAL_SALES AS TARGET
		USING ( 
		SELECT PD.PROJECTION_DETAILS_SID,
		PERIOD_SID,
		ACTUAL_SALES,
		ACTUAL_UNITS
		FROM dbo.ST_NM_ACTUAL_SALES ACTUAL
                JOIN PROJECTION_DETAILS PD ON ACTUAL.CCP_DETAILS_SID = PD.CCP_DETAILS_SID    
                WHERE  PD.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
		) AS SOURCE 
		ON (TARGET.PROJECTION_DETAILS_SID=SOURCE.PROJECTION_DETAILS_SID AND TARGET.PERIOD_SID=SOURCE.PERIOD_SID)
		WHEN MATCHED 
		THEN 
		UPDATE SET 
		TARGET.ACTUAL_SALES=SOURCE.ACTUAL_SALES,
		TARGET.ACTUAL_UNITS=SOURCE.ACTUAL_UNITS
		WHEN NOT MATCHED BY TARGET
		THEN 
		INSERT (PROJECTION_DETAILS_SID,
		PERIOD_SID,
		ACTUAL_SALES,
		ACTUAL_UNITS
		
		)
                VALUES(SOURCE.PROJECTION_DETAILS_SID,
		SOURCE.PERIOD_SID,
		SOURCE.ACTUAL_SALES,
		SOURCE.ACTUAL_UNITS);
		   ]]>
        </query>
    </entity> 
   
   
    <entity id="PPA_Temp_Main_MASTER">
        <query> 
             <![CDATA[ 
                MERGE NM_PPA_PROJECTION_MASTER AS TARGET
                USING (
                SELECT PD.PROJECTION_DETAILS_SID
		,ACTUAL_PRICE_CAP
		,PRICE_BASIS
		,USER_GROUP
		,PRICE_PROTECTION_START_DATE
		,PRICE_PROTECTION_END_DATE
		,CHECK_RECORD
		,PRICE_PROTECTION_STATUS
                ,RS_MODEL_SID
                ,REBATE_FREQUENCY
                ,RS_CONTRACT_SID
                FROM dbo.ST_NM_PPA_PROJECTION_MASTER MAS
                JOIN PROJECTION_DETAILS PD ON MAS.CCP_DETAILS_SID = PD.CCP_DETAILS_SID    
                WHERE PD.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
                ) AS SOURCE
                ON (TARGET.PROJECTION_DETAILS_SID = SOURCE.PROJECTION_DETAILS_SID
                 --AND TARGET.RS_MODEL_SID=SOURCE.RS_MODEL_SID 
                 AND TARGET.RS_CONTRACT_SID=SOURCE.RS_CONTRACT_SID)
                WHEN MATCHED
                THEN
		UPDATE
		SET TARGET.ACTUAL_PRICE_CAP = SOURCE.ACTUAL_PRICE_CAP
			,TARGET.PRICE_BASIS = SOURCE.PRICE_BASIS
			,TARGET.USER_GROUP = SOURCE.USER_GROUP
			,TARGET.PRICE_PROTECTION_START_DATE = SOURCE.PRICE_PROTECTION_START_DATE
			,TARGET.PRICE_PROTECTION_END_DATE = SOURCE.PRICE_PROTECTION_END_DATE
			,TARGET.CHECK_RECORD = SOURCE.CHECK_RECORD
			,TARGET.PRICE_PROTECTION_STATUS = SOURCE.PRICE_PROTECTION_STATUS
                        ,TARGET.REBATE_FREQUENCY = SOURCE.REBATE_FREQUENCY
                WHEN NOT MATCHED BY TARGET
                THEN
		INSERT(PROJECTION_DETAILS_SID
			,ACTUAL_PRICE_CAP
			,PRICE_BASIS
			,USER_GROUP
			,PRICE_PROTECTION_START_DATE
			,PRICE_PROTECTION_END_DATE
			,CHECK_RECORD
			,PRICE_PROTECTION_STATUS
                        ,RS_MODEL_SID
                        ,REBATE_FREQUENCY
                        ,RS_CONTRACT_SID)
		VALUES (
			SOURCE.PROJECTION_DETAILS_SID
			,source.ACTUAL_PRICE_CAP
			,source.PRICE_BASIS
			,source.USER_GROUP
			,source.PRICE_PROTECTION_START_DATE
			,source.PRICE_PROTECTION_END_DATE
			,source.CHECK_RECORD
			,source.PRICE_PROTECTION_STATUS
                        ,source.RS_MODEL_SID
                        ,source.REBATE_FREQUENCY
                        ,source.RS_CONTRACT_SID
			);
		 ]]>
        </query>
    </entity> 
    <entity id="PPA_Temp_Main_PROJ">
        <query> 
             <![CDATA[ 
		MERGE NM_PPA_PROJECTION AS TARGET
                USING (
                SELECT PD.PROJECTION_DETAILS_SID
		,PRICE_CAP
		,RESET
		,PERIOD_SID
		,RESET_PRICE_CAP
		,PROJECTION_MAP
		,PROJECTION_DISCOUNT_DOLLAR
		,PROJECTION_DISCOUNT_UNITS
		,ITEM_PRICING_QUALIFIER_SID
		,NEP
		,NEP_FORMULA
		,BASE_PRICE_TYPE
		,BASE_PRICE_MANUAL
		,BASE_PRICE_DATE
		,BASE_PRICE_PRICE_TYPE
		,NET_BASE_PRICE
		,NET_BASE_PRICE_FORMULA
		,SUBSEQUENT_PERIOD_PRICE_TYPE
		,NET_SUBSEQUENT_PERIOD_PRICE
		,NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
		,PRICE_TOLERANCE_INTERVAL
		,PRICE_TOLERANCE_FREQUENCY
		,PRICE_TOLERANCE_TYPE
		,PRICE_TOLERANCE
		,MAX_INCREMENTAL_CHANGE
		,RESET_ELIGIBLE
		,RESET_TYPE
		,RESET_DATE
		,RESET_INTERVAL
		,RESET_FREQUENCY
		,RESET_PRICE_TYPE
		,NET_RESET_PRICE_TYPE
		,NET_RESET_PRICE_FORMULA
		,NET_PRICE_TYPE
		,NET_PRICE_TYPE_FORMULA
		,ATTACHED_DATE
		,Price
		,PriceChange
		,TotalDeductions
		,NetPrice
		,NetMap
		,PriceProtectionAmountPerUnit
		,PriceProtectionPercentage
		,TotalPriceProtectionDeduction
                ,DEDUCTION_PER_UNIT
                ,RS_MODEL_SID
                ,RS_CONTRACT_SID
                FROM dbo.ST_NM_PPA_PROJECTION PROJ
                JOIN PROJECTION_DETAILS PD ON PROJ.CCP_DETAILS_SID = PD.CCP_DETAILS_SID    
                WHERE PD.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
                ) AS SOURCE
                ON (
			TARGET.PROJECTION_DETAILS_SID = SOURCE.PROJECTION_DETAILS_SID
			AND TARGET.PERIOD_SID = SOURCE.PERIOD_SID 
                       -- AND TARGET.RS_MODEL_SID = SOURCE.RS_MODEL_SID
                        AND TARGET.RS_CONTRACT_SID=SOURCE.RS_CONTRACT_SID
			)
                WHEN MATCHED
                THEN
		UPDATE
		SET TARGET.PRICE_CAP = SOURCE.PRICE_CAP
			,TARGET.RESET = SOURCE.RESET
			,TARGET.RESET_PRICE_CAP = SOURCE.RESET_PRICE_CAP
			,TARGET.PROJECTION_MAP = SOURCE.PROJECTION_MAP
			,TARGET.PROJECTION_DISCOUNT_DOLLAR = SOURCE.PROJECTION_DISCOUNT_DOLLAR
			,TARGET.PROJECTION_DISCOUNT_UNITS = SOURCE.PROJECTION_DISCOUNT_UNITS
			,TARGET.ITEM_PRICING_QUALIFIER_SID = SOURCE.ITEM_PRICING_QUALIFIER_SID
			,TARGET.NEP = SOURCE.NEP
			,TARGET.NEP_FORMULA = SOURCE.NEP_FORMULA
			,TARGET.BASE_PRICE_TYPE = SOURCE.BASE_PRICE_TYPE
			,TARGET.BASE_PRICE_MANUAL = SOURCE.BASE_PRICE_MANUAL
			,TARGET.BASE_PRICE_DATE = SOURCE.BASE_PRICE_DATE
			,TARGET.BASE_PRICE_PRICE_TYPE = SOURCE.BASE_PRICE_PRICE_TYPE
			,TARGET.NET_BASE_PRICE = SOURCE.NET_BASE_PRICE
			,TARGET.NET_BASE_PRICE_FORMULA = SOURCE.NET_BASE_PRICE_FORMULA
			,TARGET.SUBSEQUENT_PERIOD_PRICE_TYPE = SOURCE.SUBSEQUENT_PERIOD_PRICE_TYPE
			,TARGET.NET_SUBSEQUENT_PERIOD_PRICE = SOURCE.NET_SUBSEQUENT_PERIOD_PRICE
			,TARGET.NET_SUBSEQUENT_PERIOD_PRICE_FORMULA = SOURCE.NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
			,TARGET.PRICE_TOLERANCE_INTERVAL = SOURCE.PRICE_TOLERANCE_INTERVAL
			,TARGET.PRICE_TOLERANCE_FREQUENCY = SOURCE.PRICE_TOLERANCE_FREQUENCY
			,TARGET.PRICE_TOLERANCE_TYPE = SOURCE.PRICE_TOLERANCE_TYPE
			,TARGET.PRICE_TOLERANCE = SOURCE.PRICE_TOLERANCE
			,TARGET.MAX_INCREMENTAL_CHANGE = SOURCE.MAX_INCREMENTAL_CHANGE
			,TARGET.RESET_ELIGIBLE = SOURCE.RESET_ELIGIBLE
			,TARGET.RESET_TYPE = SOURCE.RESET_TYPE
			,TARGET.RESET_DATE = SOURCE.RESET_DATE
			,TARGET.RESET_INTERVAL = SOURCE.RESET_INTERVAL
			,TARGET.RESET_FREQUENCY = SOURCE.RESET_FREQUENCY
			,TARGET.RESET_PRICE_TYPE = SOURCE.RESET_PRICE_TYPE
			,TARGET.NET_RESET_PRICE_TYPE = SOURCE.NET_RESET_PRICE_TYPE
			,TARGET.NET_RESET_PRICE_FORMULA = SOURCE.NET_RESET_PRICE_FORMULA
			,TARGET.NET_PRICE_TYPE = SOURCE.NET_PRICE_TYPE
			,TARGET.NET_PRICE_TYPE_FORMULA = SOURCE.NET_PRICE_TYPE_FORMULA
			,TARGET.ATTACHED_DATE = SOURCE.ATTACHED_DATE
			,TARGET.Price = SOURCE.Price
			,TARGET.PriceChange = SOURCE.PriceChange
			,TARGET.TotalDeductions = SOURCE.TotalDeductions
			,TARGET.NetPrice = SOURCE.NetPrice
			,TARGET.NetMap = SOURCE.NetMap
			,TARGET.PriceProtectionAmountPerUnit = SOURCE.PriceProtectionAmountPerUnit
			,TARGET.PriceProtectionPercentage = SOURCE.PriceProtectionPercentage
			,TARGET.TotalPriceProtectionDeduction = SOURCE.TotalPriceProtectionDeduction
                        ,TARGET.DEDUCTION_PER_UNIT = SOURCE.DEDUCTION_PER_UNIT
                        WHEN NOT MATCHED BY TARGET
                        THEN
                        INSERT (PROJECTION_DETAILS_SID
			,PRICE_CAP
			,RESET
			,PERIOD_SID
			,RESET_PRICE_CAP
			,PROJECTION_MAP
			,PROJECTION_DISCOUNT_DOLLAR
			,PROJECTION_DISCOUNT_UNITS
			,ITEM_PRICING_QUALIFIER_SID
			,NEP
			,NEP_FORMULA
			,BASE_PRICE_TYPE
			,BASE_PRICE_MANUAL
			,BASE_PRICE_DATE
			,BASE_PRICE_PRICE_TYPE
			,NET_BASE_PRICE
			,NET_BASE_PRICE_FORMULA
			,SUBSEQUENT_PERIOD_PRICE_TYPE
			,NET_SUBSEQUENT_PERIOD_PRICE
			,NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
			,PRICE_TOLERANCE_INTERVAL
			,PRICE_TOLERANCE_FREQUENCY
			,PRICE_TOLERANCE_TYPE
			,PRICE_TOLERANCE
			,MAX_INCREMENTAL_CHANGE
			,RESET_ELIGIBLE
			,RESET_TYPE
			,RESET_DATE
			,RESET_INTERVAL
			,RESET_FREQUENCY
			,RESET_PRICE_TYPE
			,NET_RESET_PRICE_TYPE
			,NET_RESET_PRICE_FORMULA
			,NET_PRICE_TYPE
			,NET_PRICE_TYPE_FORMULA
			,ATTACHED_DATE
			,Price
			,PriceChange
			,TotalDeductions
			,NetPrice
			,NetMap
			,PriceProtectionAmountPerUnit
			,PriceProtectionPercentage
			,TotalPriceProtectionDeduction
                        ,DEDUCTION_PER_UNIT
                        ,RS_MODEL_SID
                        ,RS_CONTRACT_SID
                        )
                        VALUES (
			SOURCE.PROJECTION_DETAILS_SID
			,SOURCE.PRICE_CAP
			,SOURCE.RESET
			,SOURCE.PERIOD_SID
			,SOURCE.RESET_PRICE_CAP
			,SOURCE.PROJECTION_MAP
			,SOURCE.PROJECTION_DISCOUNT_DOLLAR
			,SOURCE.PROJECTION_DISCOUNT_UNITS
			,SOURCE.ITEM_PRICING_QUALIFIER_SID
			,SOURCE.NEP
			,SOURCE.NEP_FORMULA
			,SOURCE.BASE_PRICE_TYPE
			,SOURCE.BASE_PRICE_MANUAL
			,SOURCE.BASE_PRICE_DATE
			,SOURCE.BASE_PRICE_PRICE_TYPE
			,SOURCE.NET_BASE_PRICE
			,SOURCE.NET_BASE_PRICE_FORMULA
			,SOURCE.SUBSEQUENT_PERIOD_PRICE_TYPE
			,SOURCE.NET_SUBSEQUENT_PERIOD_PRICE
			,SOURCE.NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
			,SOURCE.PRICE_TOLERANCE_INTERVAL
			,SOURCE.PRICE_TOLERANCE_FREQUENCY
			,SOURCE.PRICE_TOLERANCE_TYPE
			,SOURCE.PRICE_TOLERANCE
			,SOURCE.MAX_INCREMENTAL_CHANGE
			,SOURCE.RESET_ELIGIBLE
			,SOURCE.RESET_TYPE
			,SOURCE.RESET_DATE
			,SOURCE.RESET_INTERVAL
			,SOURCE.RESET_FREQUENCY
			,SOURCE.RESET_PRICE_TYPE
			,SOURCE.NET_RESET_PRICE_TYPE
			,SOURCE.NET_RESET_PRICE_FORMULA
			,SOURCE.NET_PRICE_TYPE
			,SOURCE.NET_PRICE_TYPE_FORMULA
			,SOURCE.ATTACHED_DATE
			,SOURCE.Price
			,SOURCE.PriceChange
			,SOURCE.TotalDeductions
			,SOURCE.NetPrice
			,SOURCE.NetMap
			,SOURCE.PriceProtectionAmountPerUnit
			,SOURCE.PriceProtectionPercentage
			,SOURCE.TotalPriceProtectionDeduction
                        ,SOURCE.DEDUCTION_PER_UNIT
                        ,SOURCE.RS_MODEL_SID
                        ,SOURCE.RS_CONTRACT_SID
			);
             ]]>
        </query>
    </entity>
    
<entity id="PPA_Temp_Main_ACTUAL">
        <query> 
             <![CDATA[ 	
		MERGE NM_ACTUAL_PPA AS TARGET
                USING (
                SELECT PD.PROJECTION_DETAILS_SID
		,PERIOD_SID
		,ACTUAL_DISCOUNT_DOLLAR
		,ACTUAL_DISCOUNT_UNITS
                ,RS_MODEL_SID
                ,RS_CONTRACT_SID
                FROM dbo.ST_NM_ACTUAL_PPA ACTUAL
                JOIN PROJECTION_DETAILS PD ON ACTUAL.CCP_DETAILS_SID = PD.CCP_DETAILS_SID    
                WHERE PD.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
                ) AS SOURCE
                ON (
			TARGET.PROJECTION_DETAILS_SID = SOURCE.PROJECTION_DETAILS_SID
			AND TARGET.PERIOD_SID = SOURCE.PERIOD_SID
                        --AND TARGET.RS_MODEL_SID = SOURCE.RS_MODEL_SID
                        AND TARGET.RS_CONTRACT_SID=SOURCE.RS_CONTRACT_SID
			)
                WHEN MATCHED
                THEN
		UPDATE
		SET 
			TARGET.ACTUAL_DISCOUNT_DOLLAR = SOURCE.ACTUAL_DISCOUNT_DOLLAR
			,TARGET.ACTUAL_DISCOUNT_UNITS = SOURCE.ACTUAL_DISCOUNT_UNITS
                        ,TARGET.RS_MODEL_SID = SOURCE.RS_MODEL_SID
                        ,TARGET.RS_CONTRACT_SID=SOURCE.RS_CONTRACT_SID
                        WHEN NOT MATCHED BY TARGET
                        THEN
                        INSERT (
                        PROJECTION_DETAILS_SID
			,PERIOD_SID
			,ACTUAL_DISCOUNT_DOLLAR
			,ACTUAL_DISCOUNT_UNITS
                        ,RS_MODEL_SID
                        ,RS_CONTRACT_SID
                        )
                        VALUES (
			SOURCE.PROJECTION_DETAILS_SID
			,SOURCE.PERIOD_SID
			,SOURCE.ACTUAL_DISCOUNT_DOLLAR
			,SOURCE.ACTUAL_DISCOUNT_UNITS
                        ,SOURCE.RS_MODEL_SID
                        ,SOURCE.RS_CONTRACT_SID
			);
	   ]]>
        </query>
    </entity> 	
   
    <entity id="Discount_Temp_Main_MASTER">
        <query> 
             <![CDATA[ 	
		MERGE NM_DISCOUNT_PROJ_MASTER AS TARGET
		USING ( 
		SELECT PD.PROJECTION_DETAILS_SID,
		RS_MODEL_SID,
                RS_CONTRACT_SID,
		METHODOLOGY,
		PRICE_GROUP_TYPE,
		NET_FLAG,
		USER_GROUP,
		CHECK_RECORD,
                CALCULATION_PERIODS
                
		FROM ST_NM_DISCOUNT_PROJ_MASTER MAS
                JOIN PROJECTION_DETAILS PD ON MAS.CCP_DETAILS_SID = PD.CCP_DETAILS_SID    
                WHERE PD.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
                
		) AS SOURCE 
		ON (TARGET.PROJECTION_DETAILS_SID=SOURCE.PROJECTION_DETAILS_SID AND TARGET.RS_MODEL_SID=SOURCE.RS_MODEL_SID AND TARGET.RS_CONTRACT_SID=SOURCE.RS_CONTRACT_SID )
		WHEN MATCHED 
		THEN 
		UPDATE SET 
		TARGET.PROJECTION_DETAILS_SID=SOURCE.PROJECTION_DETAILS_SID,
		TARGET.RS_MODEL_SID=SOURCE.RS_MODEL_SID,
                TARGET.RS_CONTRACT_SID=SOURCE.RS_CONTRACT_SID,
		TARGET.METHODOLOGY=SOURCE.METHODOLOGY,
		TARGET.PRICE_GROUP_TYPE=SOURCE.PRICE_GROUP_TYPE,
		TARGET.NET_FLAG=SOURCE.NET_FLAG,
		TARGET.USER_GROUP=SOURCE.USER_GROUP,
		TARGET.CHECK_RECORD=SOURCE.CHECK_RECORD,
		
                TARGET.CALCULATION_PERIODS=SOURCE.CALCULATION_PERIODS
		
		
		WHEN NOT MATCHED BY TARGET
		THEN 
		INSERT(PROJECTION_DETAILS_SID,
		RS_MODEL_SID,
                RS_CONTRACT_SID,
		METHODOLOGY,
		PRICE_GROUP_TYPE,
		NET_FLAG,
		USER_GROUP,
		CHECK_RECORD,
		
                CALCULATION_PERIODS
              
               )
                VALUES(SOURCE.PROJECTION_DETAILS_SID,
		SOURCE.RS_MODEL_SID,
                SOURCE.RS_CONTRACT_SID,
		SOURCE.METHODOLOGY,
		SOURCE.PRICE_GROUP_TYPE,
		SOURCE.NET_FLAG,
		SOURCE.USER_GROUP,
		SOURCE.CHECK_RECORD,
		
                SOURCE.CALCULATION_PERIODS
               
               );
		 ]]>
        </query>
    </entity>
    
   <entity id="Discount_Temp_Main_PROJ">
        <query> 
             <![CDATA[ 
		MERGE NM_DISCOUNT_PROJECTION AS TARGET
		USING ( 
		SELECT PD.PROJECTION_DETAILS_SID,
		RS_MODEL_SID,
                RS_CONTRACT_SID,
		PERIOD_SID,
		PROJECTION_SALES,
                GROWTH,
                REFRESHED_NAME,
                REFRESHED_VALUE
		FROM ST_NM_DISCOUNT_PROJECTION PROJ
                JOIN PROJECTION_DETAILS PD ON PROJ.CCP_DETAILS_SID = PD.CCP_DETAILS_SID    
                WHERE PD.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
		) AS SOURCE 
		ON (TARGET.PROJECTION_DETAILS_SID=SOURCE.PROJECTION_DETAILS_SID
		AND TARGET.PERIOD_SID=SOURCE.PERIOD_SID
		AND TARGET.RS_MODEL_SID=SOURCE.RS_MODEL_SID
                AND TARGET.RS_CONTRACT_SID=SOURCE.RS_CONTRACT_SID )
		WHEN MATCHED 
		THEN 
		UPDATE SET 
		
		TARGET.PROJECTION_SALES=SOURCE.PROJECTION_SALES,
		TARGET.GROWTH=SOURCE.GROWTH,
                TARGET.REFRESHED_NAME=SOURCE.REFRESHED_NAME,
		TARGET.REFRESHED_VALUE=SOURCE.REFRESHED_VALUE
		WHEN NOT MATCHED BY TARGET
		THEN 
		INSERT (PROJECTION_DETAILS_SID,
		RS_MODEL_SID,
                RS_CONTRACT_SID,
		PERIOD_SID,
		PROJECTION_SALES,
                GROWTH,
                REFRESHED_NAME,
                REFRESHED_VALUE
		)
                VALUES(SOURCE.PROJECTION_DETAILS_SID,
		SOURCE.RS_MODEL_SID,
                SOURCE.RS_CONTRACT_SID,
		SOURCE.PERIOD_SID,
		SOURCE.PROJECTION_SALES,
                SOURCE.GROWTH,
                SOURCE.REFRESHED_NAME,
                SOURCE.REFRESHED_VALUE
		);
	 ]]>
        </query>
   </entity>	
   
   <entity id="Discount_Temp_Main_ACTUAL">
       <query> 
             <![CDATA[ 
		MERGE NM_ACTUAL_DISCOUNT AS TARGET
		USING ( 
		SELECT PD.PROJECTION_DETAILS_SID,
		RS_MODEL_SID,
                RS_CONTRACT_SID,
		PERIOD_SID,
		ACTUAL_SALES
		FROM ST_NM_ACTUAL_DISCOUNT ACTUAL
                JOIN PROJECTION_DETAILS PD ON ACTUAL.CCP_DETAILS_SID = PD.CCP_DETAILS_SID    
                WHERE PD.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
		) AS SOURCE 
		ON (TARGET.PROJECTION_DETAILS_SID=SOURCE.PROJECTION_DETAILS_SID
		AND TARGET.PERIOD_SID=SOURCE.PERIOD_SID
		AND TARGET.RS_MODEL_SID=SOURCE.RS_MODEL_SID
                AND TARGET.RS_CONTRACT_SID=SOURCE.RS_CONTRACT_SID )
		WHEN MATCHED 
		THEN 
		UPDATE SET 
		TARGET.ACTUAL_SALES=SOURCE.ACTUAL_SALES
		WHEN NOT MATCHED BY TARGET
		THEN 
		INSERT(PROJECTION_DETAILS_SID,
		RS_MODEL_SID,
                RS_CONTRACT_SID,
		PERIOD_SID,
		ACTUAL_SALES
                )
                
                VALUES(SOURCE.PROJECTION_DETAILS_SID,
		SOURCE.RS_MODEL_SID,
                SOURCE.RS_CONTRACT_SID,
		SOURCE.PERIOD_SID,
		SOURCE.ACTUAL_SALES
                );
		
	  ]]>
        </query>
    </entity> 	  
   
    <entity id="Sales_Main_Temp_Master_Insert">
        <query> 
             <![CDATA[  
	    INSERT INTO ST_NM_SALES_PROJECTION_MASTER(
			CCP_DETAILS_SID,
			METHODOLOGY,
			USER_GROUP,
			CALCULATION_PERIODS,
			CHECK_RECORD,SALES_INCLUSION
                        )
		SELECT  DISTINCT B.CCP_DETAILS_SID,
			A.METHODOLOGY,
			A.USER_GROUP,
			A.CALCULATION_PERIODS,
			A.CHECK_RECORD, CASE 
		WHEN DESCRIPTION = 'YES'
			THEN 0
		ELSE 1
		END AS SALES_INCLUSION
		FROM DBO.NM_SALES_PROJECTION_MASTER A
			JOIN PROJECTION_DETAILS B
		ON A.PROJECTION_DETAILS_SID=B.PROJECTION_DETAILS_SID 
		JOIN CCP_DETAILS CCP ON CCP.CCP_DETAILS_SID=B.CCP_DETAILS_SID JOIN  
		CFP_CONTRACT CFP ON CFP.CONTRACT_MASTER_SID=CCP.CONTRACT_MASTER_SID
		  JOIN CFP_CONTRACT_DETAILS CFPD ON CFPD.CFP_CONTRACT_SID=CFP.CFP_CONTRACT_SID
		  JOIN HELPER_TABLE HT ON HT.HELPER_TABLE_SID = CFP.SALES_INCLUSION
		  AND CFPD.COMPANY_MASTER_SID=CCP.COMPANY_MASTER_SID
		  AND CFP.INBOUND_STATUS<>'D'
			AND B.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID; 
				]]>
        </query>
    </entity>
    
    <entity id="Sales_Main_Temp_Proj_Insert">
        <query> 
             <![CDATA[ 
		INSERT INTO dbo.ST_NM_SALES_PROJECTION(
			CCP_DETAILS_SID,
			ACCOUNT_GROWTH,
			PRODUCT_GROWTH,
			PROJECTION_SALES,
			PROJECTION_UNITS,
			PERIOD_SID )
		SELECT  B.CCP_DETAILS_SID,
			A.ACCOUNT_GROWTH,
			A.PRODUCT_GROWTH,
			A.PROJECTION_SALES,
			A.PROJECTION_UNITS,
			A.PERIOD_SID
		FROM dbo.NM_SALES_PROJECTION A,
			dbo.PROJECTION_DETAILS B
		WHERE A.PROJECTION_DETAILS_SID=B.PROJECTION_DETAILS_SID
			AND B.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID;
			]]>
        </query>
    </entity>
   
    <entity id="Sales_Main_Temp_Actual_Insert">
        <query> 
             <![CDATA[ 
		INSERT INTO dbo.ST_NM_ACTUAL_SALES(
			CCP_DETAILS_SID,
			PERIOD_SID,
			ACTUAL_SALES,
			ACTUAL_UNITS)
		SELECT  B.CCP_DETAILS_SID,
			A.PERIOD_SID,
			A.ACTUAL_SALES,
			A.ACTUAL_UNITS
		FROM dbo.NM_ACTUAL_SALES A,
			dbo.PROJECTION_DETAILS B
		WHERE A.PROJECTION_DETAILS_SID=B.PROJECTION_DETAILS_SID
			AND B.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID;		
		]]>
        </query>
    </entity>
    
    <entity id="Discount_Main_Temp_Master_Insert">
        <query> 
             <![CDATA[ 
                INSERT INTO dbo.ST_NM_DISCOUNT_PROJ_MASTER(
            CCP_DETAILS_SID,
            RS_MODEL_SID,
                                    RS_CONTRACT_SID,
            METHODOLOGY,
            PRICE_GROUP_TYPE,
            NET_FLAG,
            USER_GROUP,
            CHECK_RECORD,
                        CALCULATION_PERIODS,DEDUCTION_INCLUSION,DEDUCTION_HIERARCHY_NO
                       )
            SELECT DISTINCT B.CCP_DETAILS_SID,A.RS_MODEL_SID,A.RS_CONTRACT_SID
            ,A.METHODOLOGY,A.PRICE_GROUP_TYPE,A.NET_FLAG,A.USER_GROUP,A.CHECK_RECORD
            ,A.CALCULATION_PERIODS
            ,CASE 
            WHEN DESCRIPTION = 'YES'
            THEN 0
            ELSE 1
            END AS DEDUCTION_INCLUSION,rld.HIERARCHY_NO
            FROM DBO.NM_DISCOUNT_PROJ_MASTER A
            JOIN PROJECTION_DETAILS B ON A.PROJECTION_DETAILS_SID = B.PROJECTION_DETAILS_SID
            JOIN CCP_DETAILS CCP ON CCP.CCP_DETAILS_SID = B.CCP_DETAILS_SID
            JOIN PROJECTION_MASTER PM ON PM.PROJECTION_MASTER_SID = B.PROJECTION_MASTER_SID
            JOIN RS_CONTRACT CFP ON CFP.CONTRACT_MASTER_SID = CCP.CONTRACT_MASTER_SID
            AND A.RS_CONTRACT_SID = CFP.RS_CONTRACT_SID
            AND A.RS_MODEL_SID = CFP.RS_MODEL_SID
            JOIN RS_CONTRACT_DETAILS CFPD ON CFPD.RS_CONTRACT_SID = CFP.RS_CONTRACT_SID
            JOIN HELPER_TABLE HT ON HT.HELPER_TABLE_SID = CFP.DEDUCTION_INCLUSION
            AND CFPD.ITEM_MASTER_SID = CCP.ITEM_MASTER_SID
            JOIN RELATIONSHIP_LEVEL_DEFINITION RLD ON RLD.RELATIONSHIP_LEVEL_VALUES = A.RS_CONTRACT_SID
            JOIN RELATIONSHIP_BUILDER RB ON RB.RELATIONSHIP_BUILDER_SID = RLD.RELATIONSHIP_BUILDER_SID
            AND RB.RELATIONSHIP_BUILDER_SID = PM.DED_RELATIONSHIP_BULDER_SID
            AND RB.VERSION_NO=RLD.VERSION_NO
            AND CFP.INBOUND_STATUS <> 'D'
            AND LEVEL_NO = 10  AND PM.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID AND RB.VERSION_NO in(
            SELECT VERSION_NO FROM PROJECTION_MASTER PM 
            JOIN RELATIONSHIP_BUILDER RB on PM.DED_RELATIONSHIP_BULDER_SID=RB.RELATIONSHIP_BUILDER_SID 
            WHERE PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID
            ) 
            
                        UPDATE B
SET DEDUCTION_INCLUSION = CASE 
		WHEN DESCRIPTION = 'YES'
			THEN 0
		ELSE 1
		END
FROM NM_DISCOUNT_PROJ_MASTER A
JOIN PROJECTION_DETAILS PD ON A.PROJECTION_DETAILS_SID = PD.PROJECTION_DETAILS_SID
JOIN CCP_DETAILS CCP ON CCP.CCP_DETAILS_SID = PD.CCP_DETAILS_SID
JOIN RS_CONTRACT CFP ON CFP.CONTRACT_MASTER_SID = CCP.CONTRACT_MASTER_SID
	AND A.RS_CONTRACT_SID = CFP.RS_CONTRACT_SID
	AND A.RS_MODEL_SID = CFP.RS_MODEL_SID
	JOIN RS_CONTRACT_DETAILS CFPD ON CFPD.RS_CONTRACT_SID = CFP.RS_CONTRACT_SID
AND CFPD.ITEM_MASTER_SID=CCP.ITEM_MASTER_SID
JOIN ST_NM_DISCOUNT_PROJ_MASTER B ON 
	A.RS_CONTRACT_SID = CFP.RS_CONTRACT_SID
	AND A.RS_MODEL_SID = CFP.RS_MODEL_SID
	AND CCP.CCP_DETAILS_SID = B.CCP_DETAILS_SID
JOIN HELPER_TABLE HT ON HT.HELPER_TABLE_SID = CFP.DEDUCTION_INCLUSION
	AND CFPD.ITEM_MASTER_SID = CCP.ITEM_MASTER_SID
	]]>
        </query>
    </entity>
    
    <entity id="Discount_Main_Temp_Proj_Insert">
        <query> 
             <![CDATA[ 
		INSERT INTO dbo.ST_NM_DISCOUNT_PROJECTION(
			CCP_DETAILS_SID,
			RS_MODEL_SID,
                        RS_CONTRACT_SID,
                        PERIOD_SID,
			PROJECTION_SALES,
                        GROWTH,
                        REFRESHED_NAME,
                        REFRESHED_VALUE
                        )
		SELECT  B.CCP_DETAILS_SID,
			A.RS_MODEL_SID,
                        A.RS_CONTRACT_SID,
			A.PERIOD_SID,
			A.PROJECTION_SALES,
                        A.GROWTH,
                        A.REFRESHED_NAME,
                        A.REFRESHED_VALUE
		FROM dbo.NM_DISCOUNT_PROJECTION A,
			dbo.PROJECTION_DETAILS B
		WHERE A.PROJECTION_DETAILS_SID=B.PROJECTION_DETAILS_SID
			AND B.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID;	
	]]>
        </query>
    </entity>
    
    <entity id="Discount_Main_Temp_Actual_Insert">
        <query> 
             <![CDATA[ 
		INSERT INTO dbo.ST_NM_ACTUAL_DISCOUNT(
			CCP_DETAILS_SID,
			RS_MODEL_SID,
                        RS_CONTRACT_SID,
			PERIOD_SID,
			ACTUAL_SALES)
		SELECT  B.CCP_DETAILS_SID,
			A.RS_MODEL_SID,
                        A.RS_CONTRACT_SID,
			A.PERIOD_SID,
			A.ACTUAL_SALES
		FROM dbo.NM_ACTUAL_DISCOUNT A,
			dbo.PROJECTION_DETAILS B
		WHERE A.PROJECTION_DETAILS_SID=B.PROJECTION_DETAILS_SID
			AND B.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID;	
        ]]>
        </query>
    </entity>
    
    <entity id="PPA_Main_Temp_Master_Insert">
        <query> 
             <![CDATA[ 
		INSERT INTO dbo.ST_NM_PPA_PROJECTION_MASTER (
       CCP_DETAILS_SID
       ,ACTUAL_PRICE_CAP
       ,PRICE_BASIS
       ,USER_GROUP
       ,PRICE_PROTECTION_START_DATE
       ,PRICE_PROTECTION_END_DATE
       ,PRICE_PROTECTION_STATUS
       ,CHECK_RECORD
       ,RS_MODEL_SID
       ,RS_CONTRACT_SID
       ,REBATE_FREQUENCY
       )
SELECT  B.CCP_DETAILS_SID
       ,A.ACTUAL_PRICE_CAP
       ,A.PRICE_BASIS
       ,A.USER_GROUP
       ,A.PRICE_PROTECTION_START_DATE
       ,A.PRICE_PROTECTION_END_DATE
       ,a.PRICE_PROTECTION_STATUS
       ,A.CHECK_RECORD
       ,A.RS_MODEL_SID
       ,A.RS_CONTRACT_SID
       ,A.REBATE_FREQUENCY
FROM dbo.NM_PPA_PROJECTION_MASTER A
       ,dbo.PROJECTION_DETAILS B
WHERE A.PROJECTION_DETAILS_SID = B.PROJECTION_DETAILS_SID
       AND B.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID;
 ]]>
        </query>
    </entity>
    
    <entity id="PPA_Main_Temp_Proj_Insert">
        <query> 
             <![CDATA[ 
			
		INSERT INTO dbo.ST_NM_PPA_PROJECTION (
       CCP_DETAILS_SID
       ,PRICE_CAP
       ,RESET
       ,PERIOD_SID
       ,RESET_PRICE_CAP
       ,PROJECTION_MAP
       ,PROJECTION_DISCOUNT_DOLLAR
       ,PROJECTION_DISCOUNT_UNITS
       ,ITEM_PRICING_QUALIFIER_SID
       ,NEP
       ,NEP_FORMULA
       ,BASE_PRICE_TYPE
       ,BASE_PRICE_MANUAL
       ,BASE_PRICE_DATE
       ,BASE_PRICE_PRICE_TYPE
       ,NET_BASE_PRICE
       ,NET_BASE_PRICE_FORMULA
       ,SUBSEQUENT_PERIOD_PRICE_TYPE
       ,NET_SUBSEQUENT_PERIOD_PRICE
       ,NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
       ,PRICE_TOLERANCE_INTERVAL
       ,PRICE_TOLERANCE_FREQUENCY
       ,PRICE_TOLERANCE_TYPE
       ,PRICE_TOLERANCE
       ,MAX_INCREMENTAL_CHANGE
       ,RESET_ELIGIBLE
       ,RESET_TYPE
       ,RESET_DATE
       ,RESET_INTERVAL
       ,RESET_FREQUENCY
       ,RESET_PRICE_TYPE
       ,NET_RESET_PRICE_TYPE
       ,NET_RESET_PRICE_FORMULA
       ,NET_PRICE_TYPE
       ,NET_PRICE_TYPE_FORMULA
       ,ATTACHED_DATE
       ,Price
       ,PriceChange
       ,TotalDeductions
       ,NetPrice
       ,NetMap
       ,PriceProtectionAmountPerUnit
       ,PriceProtectionPercentage
       ,TotalPriceProtectionDeduction
       ,DEDUCTION_PER_UNIT
       ,RS_MODEL_SID
       ,RS_CONTRACT_SID
       )
SELECT  B.CCP_DETAILS_SID
       ,A.PRICE_CAP
       ,A.RESET
       ,A.PERIOD_SID
       ,A.RESET_PRICE_CAP
       ,A.PROJECTION_MAP
       ,A.PROJECTION_DISCOUNT_DOLLAR
       ,A.PROJECTION_DISCOUNT_UNITS
       ,a.ITEM_PRICING_QUALIFIER_SID
       ,a.NEP
       ,a.NEP_FORMULA
       ,a.BASE_PRICE_TYPE
       ,a.BASE_PRICE_MANUAL
       ,a.BASE_PRICE_DATE
       ,a.BASE_PRICE_PRICE_TYPE
       ,a.NET_BASE_PRICE
       ,a.NET_BASE_PRICE_FORMULA
       ,a.SUBSEQUENT_PERIOD_PRICE_TYPE
       ,a.NET_SUBSEQUENT_PERIOD_PRICE
       ,a.NET_SUBSEQUENT_PERIOD_PRICE_FORMULA
       ,a.PRICE_TOLERANCE_INTERVAL
       ,a.PRICE_TOLERANCE_FREQUENCY
       ,a.PRICE_TOLERANCE_TYPE
       ,a.PRICE_TOLERANCE
       ,a.MAX_INCREMENTAL_CHANGE
       ,a.RESET_ELIGIBLE
       ,a.RESET_TYPE
       ,a.RESET_DATE
       ,a.RESET_INTERVAL
       ,a.RESET_FREQUENCY
       ,a.RESET_PRICE_TYPE
       ,a.NET_RESET_PRICE_TYPE
       ,a.NET_RESET_PRICE_FORMULA
       ,a.NET_PRICE_TYPE
       ,a.NET_PRICE_TYPE_FORMULA
       ,a.ATTACHED_DATE
       ,a.Price
       ,a.PriceChange
       ,a.TotalDeductions
       ,a.NetPrice
       ,a.NetMap
       ,a.PriceProtectionAmountPerUnit
       ,a.PriceProtectionPercentage
       ,a.TotalPriceProtectionDeduction
       ,a.DEDUCTION_PER_UNIT
       ,A.RS_MODEL_SID
       ,A.RS_CONTRACT_SID
FROM dbo.NM_PPA_PROJECTION A
       ,dbo.PROJECTION_DETAILS B
WHERE A.PROJECTION_DETAILS_SID = B.PROJECTION_DETAILS_SID
       AND B.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID;
 ]]>
        </query>
    </entity>
    
    <entity id="PPA_Main_Temp_Actual_Insert">
        <query> 
             <![CDATA[ 		
		INSERT INTO dbo.ST_NM_ACTUAL_PPA (
       CCP_DETAILS_SID
       ,PERIOD_SID
       ,ACTUAL_DISCOUNT_DOLLAR
       ,ACTUAL_DISCOUNT_UNITS
       ,RS_MODEL_SID
       ,RS_CONTRACT_SID
       )
SELECT  B.CCP_DETAILS_SID
       ,a.PERIOD_SID
       ,a.ACTUAL_DISCOUNT_DOLLAR
       ,a.ACTUAL_DISCOUNT_UNITS
       ,A.RS_MODEL_SID
       ,A.RS_CONTRACT_SID
FROM dbo.NM_ACTUAL_PPA A
       ,dbo.PROJECTION_DETAILS B
WHERE A.PROJECTION_DETAILS_SID = B.PROJECTION_DETAILS_SID
       AND B.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID;
	
 ]]>
        </query>
    </entity>
    
     <entity id="Product_customer_files_insert">
        <query> 
             <![CDATA[ 		
		DECLARE @FILE_VER       UDT_FILE,
        @BUSINESS_UNIT  INT,
        @COMPANY_ID     INT,
        @PROJECTION_SID INT = ?PROJECTION_ID

SELECT @BUSINESS_UNIT = BUSINESS_UNIT,
       @COMPANY_ID = COMPANY_MASTER_SID
FROM   PROJECTION_MASTER
WHERE  PROJECTION_MASTER_SID = @PROJECTION_SID

INSERT INTO @FILE_VER
            (FILE_TYPE,
             FILE_NAME,
             FILE_VERSION)
SELECT FILE_TYPE,
       FORECAST_NAME,
       VERSION
FROM   (SELECT FT.FORECAST_NAME,
               FT.[VERSION],
               FILE_MANAGEMENT_SID,
               HT.[DESCRIPTION]                       AS FILE_TYPE,
               Row_number()
                 OVER(
                   PARTITION BY FILE_TYPE
                   ORDER BY FILE_MANAGEMENT_SID DESC) AS RN
        FROM   FILE_MANAGEMENT FT
               INNER JOIN HELPER_TABLE HT
                       ON HT.HELPER_TABLE_SID = FT.FILE_TYPE
        WHERE  ( CONVERT(DATE, FT.FROM_PERIOD) <= CONVERT(DATE, Getdate())
                 AND FT.FROM_PERIOD IS NOT NULL )
               AND ( CONVERT(DATE, FT.TO_PERIOD) >= CONVERT(DATE, Getdate())
                      OR FT.TO_PERIOD IS NULL )
               AND HT.LIST_NAME = 'FILE_TYPE'
               AND HT.[DESCRIPTION] IN ( 'Demand', 'Customer Sales', 'Adjusted Demand', 'EX-FACTORY SALES',
                                         'Inventory Withdrawal - Forecast Summary', 'Inventory Withdrawal - Forecast Detail' )
               AND FT.BUSINESS_UNIT = @BUSINESS_UNIT
               AND FT.COMPANY = @COMPANY_ID
       )A
WHERE  RN = 1

EXEC PRC_FILES_DATA
				  @PROJECTION_SID,
				  @FILE_VER,
				  ?USER_ID,
				  ?SESSION_ID 
	
 ]]>
        </query>
    </entity>
    
    <entity id="Save_Currenct_Active_File">  
            <query> 
                 <![CDATA[ 

            DECLARE @USER_ID               INT=@USERID, 
                    @SESSION_ID            VARCHAR(100)='@SESSIONID', 
                    @SQL                   NVARCHAR(MAX), 
                    @PROJECTION_MASTER_SID INT=@PROJECTIONMASTERSID, 
                    @COUNT                 INT=0, 
                    @NOMETHODOLOGY         INT=0 
            DECLARE @MASTER_TABLE_SALES VARCHAR(200) = CONCAT('ST_NM_SALES_PROJECTION_MASTER_', @USER_ID, '_', @SESSION_ID, '_', REPLACE(CONVERT(VARCHAR(50), GETDATE(), 2), '.', ''))
            DECLARE @MASTER_TABLE_DISCOUNT VARCHAR(200) = CONCAT('ST_NM_DISCOUNT_PROJ_MASTER_', @USER_ID, '_', @SESSION_ID, '_', REPLACE(CONVERT(VARCHAR(50), GETDATE(), 2), '.', ''))
            DECLARE @BUSINESS_UNIT      INT, 
                    @COMPANY_MASTER_SID INT 

            SELECT @BUSINESS_UNIT = BUSINESS_UNIT, 
                   @COMPANY_MASTER_SID = COMPANY_MASTER_SID 
            FROM   PROJECTION_MASTER 
            WHERE  PROJECTION_MASTER_SID = @PROJECTIONMASTERSID 

            SET @SQL=CONCAT('SELECT @COUNT=1 WHERE EXISTS(SELECT DISTINCT METHODOLOGY FROM ', @MASTER_TABLE_DISCOUNT, '  WHERE METHODOLOGY = ''CONTRACT DETAILS'')')

            EXEC SP_EXECUTESQL 
              @SQL, 
              N'@COUNT INT OUTPUT', 
              @COUNT=@COUNT OUTPUT 

            SET @SQL=CONCAT('SELECT @NOMETHODOLOGY=1 WHERE EXISTS(SELECT DISTINCT METHODOLOGY FROM ', @MASTER_TABLE_DISCOUNT, '  WHERE METHODOLOGY IS NOT NULL)')

            EXEC SP_EXECUTESQL 
              @SQL, 
              N'@NOMETHODOLOGY INT OUTPUT ', 
              @NOMETHODOLOGY=@NOMETHODOLOGY OUTPUT 

            IF OBJECT_ID('TEMPDB..#TEMP_METHODOLOGY') IS NOT NULL 
              DROP TABLE #TEMP_METHODOLOGY 

            CREATE TABLE #TEMP_METHODOLOGY 
              ( 
                 FILE_TYPE VARCHAR(100) 
              ) 

            SET @SQL=CONCAT('INSERT INTO #TEMP_METHODOLOGY (FILE_TYPE)            SELECT CASE WHEN METHODOLOGY IN (''% OF EX-FACTORY SALES'',''% OF EX-FACTORY'') THEN ''EX-FACTORY SALES''              WHEN METHODOLOGY=''% OF DEMAND'' THEN ''DEMAND''                       WHEN METHODOLOGY=''% OF INVENTORY WITHDRAWAL'' THEN ''INVENTORY WITHDRAWAL - FORECAST SUMMARY''                      WHEN METHODOLOGY=''CUSTOMER GTS'' THEN ''CUSTOMER SALES''                       WHEN METHODOLOGY=''% OF ADJUSTED DEMAND'' THEN ''ADJUSTED DEMAND'' END FROM (SELECT DISTINCT CASE WHEN METHODOLOGY IN (''SINGLE PERIOD'',''AVERAGE'',''ROLLING ANNUAL TREND'') THEN ALLOCATION_BASIS ELSE METHODOLOGY END AS METHODOLOGY FROM  ', @MASTER_TABLE_SALES, ' WHERE  CASE WHEN METHODOLOGY IN (''SINGLE PERIOD'',''AVERAGE'',''ROLLING ANNUAL TREND'') THEN ALLOCATION_BASIS ELSE METHODOLOGY END IS NOT NULL)A UNION SELECT CASE WHEN METHODOLOGY IN (''% OF EX-FACTORY SALES'',''% OF EX-FACTORY'') THEN ''EX-FACTORY SALES''             WHEN METHODOLOGY=''% OF DEMAND'' THEN ''DEMAND''                       WHEN METHODOLOGY=''% OF INVENTORY WITHDRAWAL'' THEN ''INVENTORY WITHDRAWAL - FORECAST SUMMARY''                       WHEN METHODOLOGY=''CUSTOMER GTS'' THEN ''CUSTOMER SALES''                       WHEN METHODOLOGY=''% OF ADJUSTED DEMAND'' THEN ''ADJUSTED DEMAND'' END FROM (SELECT DISTINCT METHODOLOGY FROM  ', @MASTER_TABLE_DISCOUNT, ' WHERE METHODOLOGY NOT IN (''SINGLE PERIOD'',''AVERAGE'',''ROLLING ANNUAL TREND'',''CONTRACT DETAILS'') AND METHODOLOGY IS NOT NULL)B UNION  SELECT METHODOLOGY FROM (SELECT CASE WHEN @NOMETHODOLOGY=1 THEN ''EX-FACTORY SALES'' ELSE NULL END AS METHODOLOGY UNION ALL SELECT CASE WHEN @COUNT=1 THEN ''DEMAND'' ELSE NULL END AS METHODOLOGY UNION ALL SELECT CASE WHEN @COUNT=1 THEN ''INVENTORY WITHDRAWAL - FORECAST SUMMARY'' ELSE NULL END AS METHODOLOGY)C  WHERE METHODOLOGY IS NOT NULL') 

            EXEC SP_EXECUTESQL 
              @SQL, 
              N'@COUNT INT OUTPUT,@NOMETHODOLOGY INT OUTPUT', 
              @COUNT=@COUNT OUTPUT, 
              @NOMETHODOLOGY=@NOMETHODOLOGY OUTPUT 

            IF EXISTS(SELECT 1 
                      FROM   PROJECTION_FILE_DETAILS 
                      WHERE  PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID) 
              BEGIN 
                  DELETE FROM PROJECTION_FILE_DETAILS 
                  WHERE  PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID 
              END 

            INSERT INTO PROJECTION_FILE_DETAILS 
                        (PROJECTION_MASTER_SID, 
                         FILE_MANAGEMENT_SID, 
                         FILE_TYPE) 
            SELECT @PROJECTION_MASTER_SID AS PROJECTION_MASTER_SID, 
                   FILE_MANAGEMENT_SID, 
                   B.FILE_TYPE 
            FROM   (SELECT A.FILE_MANAGEMENT_SID, 
                           A.FILE_TYPE, 
                           A.FORECAST_NAME, 
                           A.VERSION, 
                           A.DESCRIPTION 
                    FROM   (SELECT ROW_NUMBER() 
                                     OVER( 
                                       PARTITION BY HT.DESCRIPTION 
                                       ORDER BY FT.FROM_PERIOD DESC)RN, 
                                   FT.FILE_MANAGEMENT_SID, 
                                   FT.FILE_TYPE, 
                                   FT.FORECAST_NAME, 
                                   FT.VERSION, 
                                   HT.DESCRIPTION 
                            FROM   FILE_MANAGEMENT FT 
                                   INNER JOIN HELPER_TABLE HT 
                                           ON HT.HELPER_TABLE_SID = FT.FILE_TYPE 
                            WHERE  ( CONVERT(DATE, FT.FROM_PERIOD) <= CONVERT(DATE, GETDATE()) 
                                     AND FT.FROM_PERIOD IS NOT NULL ) 
                                   AND ( CONVERT(DATE, FT.TO_PERIOD) >= CONVERT(DATE, GETDATE()) 
                                          OR FT.TO_PERIOD IS NULL ) 
                                   AND HT.LIST_NAME = 'FILE_TYPE' 
                                   AND HT.DESCRIPTION IN ( 'ADJUSTED DEMAND', 'DEMAND', 'INVENTORY WITHDRAWAL - FORECAST DETAIL', 'INVENTORY WITHDRAWAL - FORECAST SUMMARY',
                                                           'CUSTOMER SALES', 'EX-FACTORY SALES' ) 
                                   AND FT.BUSINESS_UNIT = @BUSINESS_UNIT 
                                   AND FT.COMPANY = @COMPANY_MASTER_SID)A 
                    WHERE  RN = 1)B 
                   INNER JOIN #TEMP_METHODOLOGY T 
                           ON T.FILE_TYPE = B.DESCRIPTION 


                ]]>
            </query>
        </entity>
        
        
        
        <entity id="Check_New_File_isActivated">  
            <query> 
                 <![CDATA[ 

            DECLARE @BUSINESS_UNIT       INT, 
                    @COMPANY_MASTER_SID  INT, 
                    @FILE_MANAGEMENT_SID INT 

            SELECT @BUSINESS_UNIT = BUSINESS_UNIT, 
                   @COMPANY_MASTER_SID = COMPANY_MASTER_SID
            FROM   PROJECTION_MASTER 
            WHERE  PROJECTION_MASTER_SID = @PROJECTION_ID 

            IF OBJECT_ID('TEMPDB..#TEMP_PFD') IS NOT NULL
            DROP TABLE #TEMP_PFD
            
            SELECT CASE 
                     WHEN B.FILE_MANAGEMENT_SID = A.FILE_MANAGEMENT_SID THEN 0 
                     ELSE 1 
                   END AS CHANGE_STATUS 
                      ,A.FORECAST_NAME
                      ,A.FILE_TYPE
                      ,A.DESCRIPTION
                      ,B.FLAG INTO #TEMP_PFD
            FROM   (SELECT A.FILE_MANAGEMENT_SID, 
                           A.FILE_TYPE, 
                           A.FORECAST_NAME, 
                           A.VERSION
                                    ,A.DESCRIPTION
                    FROM   (SELECT ROW_NUMBER() 
                                     OVER( 
                                       PARTITION BY HT.DESCRIPTION 
                                       ORDER BY FT.FROM_PERIOD DESC)RN, 
                                   FT.FILE_MANAGEMENT_SID, 
                                   FT.FILE_TYPE, 
                                   FT.FORECAST_NAME, 
                                   FT.VERSION
                                                 ,ht.DESCRIPTION 
                            FROM   FILE_MANAGEMENT FT 
                                   INNER JOIN HELPER_TABLE HT 
                                           ON HT.HELPER_TABLE_SID = FT.FILE_TYPE 
                            WHERE  ( CONVERT(DATE, FT.FROM_PERIOD) <= CONVERT(DATE, GETDATE()) 
                                     AND FT.FROM_PERIOD IS NOT NULL ) 
                                   AND ( CONVERT(DATE, FT.TO_PERIOD) >= CONVERT(DATE, GETDATE()) 
                                          OR FT.TO_PERIOD IS NULL ) 
                                   AND HT.LIST_NAME = 'FILE_TYPE' 
                                   AND HT.DESCRIPTION IN ( 'ADJUSTED DEMAND', 'DEMAND', 'INVENTORY WITHDRAWAL - FORECAST DETAIL', 'INVENTORY WITHDRAWAL - FORECAST SUMMARY',
                                                           'CUSTOMER SALES', 'EX-FACTORY SALES' ) 
                                   AND FT.BUSINESS_UNIT = @BUSINESSUNIT 
                                   AND FT.COMPANY = @COMPANYID)A 
                    WHERE  RN = 1)A 
                   JOIN ST_PROJECTION_FILE_DETAILS B 
                     ON A.FILE_TYPE = B.FILE_TYPE 
                     AND B.PROJECTION_MASTER_SID = @PROJECTION_ID

                     SELECT DISTINCT * FROM #TEMP_PFD WHERE CHANGE_STATUS = 1 AND FLAG <> 0

                ]]>
            </query>
        </entity>
        
        <entity id="currentFile_count">
        <query> 
            <![CDATA[
            
        
        DECLARE @PROJECTION_STATUS VARCHAR(100) = '[$WORKFLOWSTATUS]' 

        IF EXISTS(SELECT 1 
                  FROM   HELPER_TABLE 
                  WHERE  LIST_NAME = 'WorkFlowStatus' 
                         AND DESCRIPTION IN( 'Approved', 'Canceled', 'Pending' ) 
                         AND @PROJECTION_STATUS = DESCRIPTION) 
          BEGIN; 
       WITH CTE
                   AS (SELECT DISTINCT FILE_MANAGEMENT_SID = FT.FILE_MANAGEMENT_SID, 
                                       FORECAST_NAME = FT.FORECAST_NAME, 
                                       FORECAST_VERSION = FT.[VERSION], 
                                       HT.DESCRIPTION                     FILE_TYPE, 
                                       CMP.COMPANY_NAME                   COMPANY, 
                                       BU.COMPANY_NAME                    BUSINESS_UNIT, 
                                       ROW_NUMBER() 
                                         OVER( 
                                           PARTITION BY FT.FILE_TYPE 
                                           ORDER BY FT.FROM_PERIOD DESC ) RN, 
                                       FT.CREATED_DATE                    ACTIVE_FROM, 
                                       FT.FROM_PERIOD, 
                                       FT.TO_PERIOD 
                       FROM   FILE_MANAGEMENT FT 
                              INNER JOIN HELPER_TABLE HT 
                                      ON HT.HELPER_TABLE_SID = FT.FILE_TYPE 
                              INNER JOIN PROJECTION_MASTER PM 
                                      ON PM.BUSINESS_UNIT = FT.BUSINESS_UNIT 
                       AND PM.COMPANY_MASTER_SID = FT.COMPANY
                              JOIN COMPANY_MASTER CMP 
                                ON CMP.COMPANY_MASTER_SID = FT.COMPANY 
                              JOIN COMPANY_MASTER BU 
                                ON BU.COMPANY_MASTER_SID = FT.BUSINESS_UNIT 
                       WHERE  PM.PROJECTION_MASTER_SID = [@PROJECTION_MASTERID] 
                              AND ( CONVERT(DATE, FT.FROM_PERIOD) <= CONVERT(DATE, Getdate()) AND FT.FROM_PERIOD IS NOT NULL ) 
                              AND ( CONVERT(DATE, FT.TO_PERIOD) >= CONVERT(DATE, Getdate()) OR FT.TO_PERIOD IS NULL ) 
                              AND HT.LIST_NAME = 'FILE_TYPE'), 
                   CTE2 
                   AS (SELECT PF.FILE_MANAGEMENT_SID, 
                              FT.FORECAST_NAME, 
                              CMP.COMPANY_NAME COMPANY, 
                              BU.COMPANY_NAME  BUSINESS_UNIT, 
                              HT.DESCRIPTION   FILE_TYPE, 
                              FT.VERSION       AS FORECAST_VERSION, 
                              FT.CREATED_DATE  ACTIVE_FROM, 
                              FT.FROM_PERIOD, 
                              FT.TO_PERIOD 
                       FROM   (SELECT DISTINCT PROJECTION_MASTER_SID,FILE_MANAGEMENT_SID,FILE_TYPE FROM PROJECTION_FILE_DETAILS) PF 
                              JOIN FILE_MANAGEMENT FT 
                                ON FT.FILE_MANAGEMENT_SID = PF.FILE_MANAGEMENT_SID 
                              INNER JOIN HELPER_TABLE HT 
                                      ON HT.HELPER_TABLE_SID = FT.FILE_TYPE 
                              INNER JOIN PROJECTION_MASTER PM 
                                      ON PM.BUSINESS_UNIT = FT.BUSINESS_UNIT 
                                         AND PM.COMPANY_MASTER_SID = FT.COMPANY 
                                         AND PF.PROJECTION_MASTER_SID = PM.PROJECTION_MASTER_SID 
                              JOIN COMPANY_MASTER CMP 
                                ON CMP.COMPANY_MASTER_SID = FT.COMPANY 
                              JOIN COMPANY_MASTER BU 
                                ON BU.COMPANY_MASTER_SID = FT.BUSINESS_UNIT 
                       WHERE  PM.PROJECTION_MASTER_SID = [@PROJECTION_MASTERID]) 
              SELECT Count(*) 
              FROM   (SELECT FILE_MANAGEMENT_SID, 
                             FORECAST_NAME, 
                             COMPANY, 
                             BUSINESS_UNIT, 
                             FILE_TYPE, 
                             FORECAST_VERSION, 
                             ACTIVE_FROM, 
                             FROM_PERIOD, 
                             TO_PERIOD 
                      FROM   CTE C 
                      WHERE  RN = 1 
                             AND NOT EXISTS(SELECT * 
                                            FROM   CTE2 C2 
                                            WHERE  C2.BUSINESS_UNIT = C.BUSINESS_UNIT 
                                                   AND C2.COMPANY = C.COMPANY 
                                                   AND C2.FILE_TYPE = C.FILE_TYPE) 
                      UNION ALL 
                      SELECT FILE_MANAGEMENT_SID, 
                             FORECAST_NAME, 
                             COMPANY, 
                             BUSINESS_UNIT, 
                             FILE_TYPE, 
                             FORECAST_VERSION, 
                             ACTIVE_FROM, 
                             FROM_PERIOD, 
                             TO_PERIOD 
                      FROM   CTE2 C 
                      WHERE  EXISTS(SELECT * 
                                    FROM   CTE C2 
                                    WHERE  C2.BUSINESS_UNIT = C.BUSINESS_UNIT 
                                           AND C2.COMPANY = C.COMPANY 
                                           AND C2.FILE_TYPE = C.FILE_TYPE 
                                           AND C2.RN = 1)) A [$RECORD_FILTER]
          END 
        ELSE 
          BEGIN; 
              WITH CTE 
                   AS (SELECT DISTINCT FILE_MANAGEMENT_SID = FT.FILE_MANAGEMENT_SID, 
                                       FORECAST_NAME = FT.FORECAST_NAME, 
                                       FORECAST_VERSION = FT.[VERSION], 
                                       HT.DESCRIPTION                     FILE_TYPE, 
                                       CMP.COMPANY_NAME                   COMPANY, 
                                       BU.COMPANY_NAME                    BUSINESS_UNIT, 
                                       ROW_NUMBER() 
                                         OVER( 
                                           PARTITION BY FT.FILE_TYPE 
                                           ORDER BY FT.FROM_PERIOD DESC ) RN, 
                                       FT.CREATED_DATE                    ACTIVE_FROM, 
                                       FT.FROM_PERIOD, 
                                       FT.TO_PERIOD 
                       FROM   FILE_MANAGEMENT FT 
                              INNER JOIN HELPER_TABLE HT 
                                      ON HT.HELPER_TABLE_SID = FT.FILE_TYPE 
                              INNER JOIN PROJECTION_MASTER PM 
                                      ON PM.BUSINESS_UNIT = FT.BUSINESS_UNIT 
                                         AND PM.COMPANY_MASTER_SID = FT.COMPANY 
                              JOIN COMPANY_MASTER CMP 
                                ON CMP.COMPANY_MASTER_SID = FT.COMPANY 
                              JOIN COMPANY_MASTER BU 
                                ON BU.COMPANY_MASTER_SID = FT.BUSINESS_UNIT 
                       WHERE  PM.PROJECTION_MASTER_SID = [@PROJECTION_MASTERID] 
                              AND ( CONVERT(DATE, FT.FROM_PERIOD) <= CONVERT(DATE, Getdate()) AND FT.FROM_PERIOD IS NOT NULL ) 
                              AND ( CONVERT(DATE, FT.TO_PERIOD) >= CONVERT(DATE, Getdate()) OR FT.TO_PERIOD IS NULL ) 
                              AND HT.LIST_NAME = 'FILE_TYPE') 
              SELECT Count(*) from ( SELECT   FILE_MANAGEMENT_SID, 
                        FORECAST_NAME, 
                        COMPANY, 
                        BUSINESS_UNIT, 
                        FILE_TYPE, 
                        FORECAST_VERSION, 
                        ACTIVE_FROM, 
                        FROM_PERIOD, 
                        TO_PERIOD 
              FROM   CTE
              WHERE  RN = 1 ) A [$RECORD_FILTER]
          END 

        ]]>
        </query>
    </entity>
    <entity id="currentFile">
        <query> 
            <![CDATA[
            
            DECLARE @PROJECTION_STATUS VARCHAR(100) = '[$WORKFLOWSTATUS]'
            IF EXISTS (
                     SELECT 1
                     FROM   HELPER_TABLE
                     WHERE ( LIST_NAME = 'WorkFlowStatus'
                        
                     AND    @PROJECTION_STATUS = DESCRIPTION) or  @PROJECTION_STATUS='View'  )
             BEGIN; 
               WITH CTE AS 
               ( 
                               SELECT DISTINCT FILE_MANAGEMENT_SID = FT.FILE_MANAGEMENT_SID, 
                                               FORECAST_NAME =       FT.FORECAST_NAME, 
                                               FORECAST_VERSION = FT.[VERSION], 
                                               HT.DESCRIPTION                                                              FILE_TYPE,
                                               CMP.COMPANY_NAME                                                            COMPANY,
                                               BU.COMPANY_NAME                                                             BUSINESS_UNIT,
                                               ROW_NUMBER() OVER( PARTITION BY FT.FILE_TYPE ORDER BY FT.FROM_PERIOD DESC ) RN,
                                               FT.CREATED_DATE                                                             ACTIVE_FROM,
                                               FT.FROM_PERIOD, 
                                               FT.TO_PERIOD 
                               FROM            FILE_MANAGEMENT FT 
                               INNER JOIN      HELPER_TABLE HT 
                               ON              HT.HELPER_TABLE_SID = FT.FILE_TYPE 
                               INNER JOIN      PROJECTION_MASTER PM 
                               ON              PM.BUSINESS_UNIT = FT.BUSINESS_UNIT 
                               AND             PM.COMPANY_MASTER_SID = FT.COMPANY 
                               JOIN            COMPANY_MASTER CMP 
                               ON              CMP.COMPANY_MASTER_SID = FT.COMPANY 
                               JOIN            COMPANY_MASTER BU 
                               ON              BU.COMPANY_MASTER_SID = FT.BUSINESS_UNIT 
                               WHERE           PM.PROJECTION_MASTER_SID = [@PROJECTION_MASTERID] 
                               AND            ( 
                                                               CONVERT( DATE, FT.FROM_PERIOD ) <= CONVERT( DATE, Getdate() )
                                               AND             FT.FROM_PERIOD IS NOT NULL ) 
                               AND            ( 
                                                               CONVERT( DATE, FT.TO_PERIOD ) >= CONVERT( DATE, Getdate() )
                                               OR              FT.TO_PERIOD IS NULL ) 
                               AND             HT.LIST_NAME = 'FILE_TYPE' ), CTE2 AS 
               ( 
                          SELECT     PF.FILE_MANAGEMENT_SID, 
                                     FT.FORECAST_NAME, 
                                     CMP.COMPANY_NAME    COMPANY, 
                                     BU.COMPANY_NAME     BUSINESS_UNIT, 
                                     HT.DESCRIPTION      FILE_TYPE, 
                                     FT.VERSION       AS FORECAST_VERSION, 
                                     FT.CREATED_DATE     ACTIVE_FROM, 
                                     FT.FROM_PERIOD, 
                                     FT.TO_PERIOD 
                          FROM       (SELECT DISTINCT PROJECTION_MASTER_SID,FILE_MANAGEMENT_SID,FILE_TYPE FROM PROJECTION_FILE_DETAILS) PF 
                          JOIN       FILE_MANAGEMENT FT 
                          ON         FT.FILE_MANAGEMENT_SID = PF.FILE_MANAGEMENT_SID 
                          INNER JOIN HELPER_TABLE HT 
                          ON         HT.HELPER_TABLE_SID = FT.FILE_TYPE 
                          INNER JOIN PROJECTION_MASTER PM 
                          ON         PM.BUSINESS_UNIT = FT.BUSINESS_UNIT 
                          AND        PM.COMPANY_MASTER_SID = FT.COMPANY 
                          AND        PF.PROJECTION_MASTER_SID = PM.PROJECTION_MASTER_SID 
                          JOIN       COMPANY_MASTER CMP 
                          ON         CMP.COMPANY_MASTER_SID = FT.COMPANY 
                          JOIN       COMPANY_MASTER BU 
                          ON         BU.COMPANY_MASTER_SID = FT.BUSINESS_UNIT 
                          WHERE      PM.PROJECTION_MASTER_SID = [@PROJECTION_MASTERID] ) 
               SELECT   FILE_MANAGEMENT_SID, 
                        FORECAST_NAME, 
                        COMPANY, 
                        BUSINESS_UNIT, 
                        FILE_TYPE, 
                        FORECAST_VERSION, 
                        ACTIVE_FROM, 
                        FROM_PERIOD, 
                        TO_PERIOD 
               FROM     ( 
                               SELECT FILE_MANAGEMENT_SID, 
                                      FORECAST_NAME, 
                                      COMPANY, 
                                      BUSINESS_UNIT, 
                                      FILE_TYPE, 
                                      FORECAST_VERSION, 
                                      ACTIVE_FROM, 
                                      FROM_PERIOD, 
                                      TO_PERIOD 
                               FROM   CTE C 
                               WHERE  RN = 1 
                               AND    NOT EXISTS 
                                      ( 
                                             SELECT * 
                                             FROM   CTE2 C2 
                                             WHERE  C2.BUSINESS_UNIT = C.BUSINESS_UNIT 
                                             AND    C2.COMPANY = C.COMPANY 
                                             AND    C2.FILE_TYPE = C.FILE_TYPE ) 
                               UNION ALL 
                               SELECT FILE_MANAGEMENT_SID, 
                                      FORECAST_NAME, 
                                      COMPANY, 
                                      BUSINESS_UNIT, 
                                      FILE_TYPE, 
                                      FORECAST_VERSION, 
                                      ACTIVE_FROM, 
                                      FROM_PERIOD, 
                                      TO_PERIOD 
                               FROM   CTE2 C 
                               WHERE  EXISTS 
                                      ( 
                                             SELECT * 
                                             FROM   CTE C2 
                                             WHERE  C2.BUSINESS_UNIT = C.BUSINESS_UNIT 
                                             AND    C2.COMPANY = C.COMPANY 
                                             AND    C2.FILE_TYPE = C.FILE_TYPE 
                                             AND    C2.RN = 1 ) ) A 
        [$RECORD_FILTER] [$ORDER_BY] OFFSET [$START]  ROWS FETCH NEXT  [$END]  ROWS ONLY;
            
             END 
             ELSE 
             BEGIN; 
               WITH CTE AS 
               ( 
                               SELECT DISTINCT FILE_MANAGEMENT_SID = FT.FILE_MANAGEMENT_SID, 
                                               FORECAST_NAME =       FT.FORECAST_NAME, 
                                               FORECAST_VERSION = FT.[VERSION], 
                                               HT.DESCRIPTION                                                              FILE_TYPE,
                                               CMP.COMPANY_NAME                                                            COMPANY,
                                               BU.COMPANY_NAME                                                             BUSINESS_UNIT,
                                               ROW_NUMBER() OVER( PARTITION BY FT.FILE_TYPE ORDER BY FT.FROM_PERIOD DESC ) RN,
                                               FT.CREATED_DATE                                                             ACTIVE_FROM,
                                               FT.FROM_PERIOD, 
                                               FT.TO_PERIOD 
                               FROM            FILE_MANAGEMENT FT 
                               INNER JOIN      HELPER_TABLE HT 
                               ON              HT.HELPER_TABLE_SID = FT.FILE_TYPE 
                               INNER JOIN      PROJECTION_MASTER PM 
                               ON              PM.BUSINESS_UNIT = FT.BUSINESS_UNIT 
                               AND             PM.COMPANY_MASTER_SID = FT.COMPANY 
                               JOIN            COMPANY_MASTER CMP 
                               ON              CMP.COMPANY_MASTER_SID = FT.COMPANY 
                               JOIN            COMPANY_MASTER BU 
                               ON              BU.COMPANY_MASTER_SID = FT.BUSINESS_UNIT 
                               WHERE           PM.PROJECTION_MASTER_SID = [@PROJECTION_MASTERID] 
                               AND            ( 
                                                               CONVERT( DATE, FT.FROM_PERIOD ) <= CONVERT( DATE, Getdate() )
                                               AND             FT.FROM_PERIOD IS NOT NULL ) 
                               AND            ( 
                                                               CONVERT( DATE, FT.TO_PERIOD ) >= CONVERT( DATE, Getdate() )
                                               OR              FT.TO_PERIOD IS NULL ) 
                               AND             HT.LIST_NAME = 'FILE_TYPE' ) 
               SELECT   FILE_MANAGEMENT_SID, 
                        FORECAST_NAME, 
                        COMPANY, 
                        BUSINESS_UNIT, 
                        FILE_TYPE, 
                        FORECAST_VERSION, 
                        ACTIVE_FROM, 
                        FROM_PERIOD, 
                        TO_PERIOD 
               FROM     CTE 
               [$RECORD_FILTER] [$WHERECOND]  RN = 1  [$ORDER_BY] OFFSET [$START]  ROWS FETCH NEXT  [$END]  ROWS ONLY ;

             END
            
                    
        ]]>
        </query>
    </entity>
   
    <entity id="getCurrentActiveFiles">
        <query> 
            <![CDATA[
            
            DECLARE @BUSINESS_UNIT       INT, 
            @COMPANY_MASTER_SID  INT
            
            SELECT @BUSINESS_UNIT = BUSINESS_UNIT, @COMPANY_MASTER_SID = COMPANY_MASTER_SID
            FROM   PROJECTION_MASTER 
            WHERE  PROJECTION_MASTER_SID = @PROJECTIONID 
            
            SELECT A.FILE_MANAGEMENT_SID, 
                           A.FILE_TYPE, 
                           A.FORECAST_NAME, 
                           A.VERSION
                           ,A.DESCRIPTION
                    FROM   (SELECT ROW_NUMBER() 
                                     OVER( 
                                       PARTITION BY HT.DESCRIPTION 
                                       ORDER BY FT.FROM_PERIOD DESC)RN, 
                                   FT.FILE_MANAGEMENT_SID, 
                                   FT.FILE_TYPE, 
                                   FT.FORECAST_NAME, 
                                   FT.VERSION
                                   ,ht.DESCRIPTION 
                            FROM   FILE_MANAGEMENT FT 
                                   INNER JOIN HELPER_TABLE HT 
                                           ON HT.HELPER_TABLE_SID = FT.FILE_TYPE 
                            WHERE  ( CONVERT(DATE, FT.FROM_PERIOD) <= CONVERT(DATE, GETDATE()) 
                                     AND FT.FROM_PERIOD IS NOT NULL ) 
                                   AND ( CONVERT(DATE, FT.TO_PERIOD) >= CONVERT(DATE, GETDATE()) 
                                          OR FT.TO_PERIOD IS NULL ) 
                                   AND HT.LIST_NAME = 'FILE_TYPE' 
                                   AND HT.DESCRIPTION IN ( 'ADJUSTED DEMAND', 'DEMAND', 'INVENTORY WITHDRAWAL - FORECAST DETAIL', 'INVENTORY WITHDRAWAL - FORECAST SUMMARY',
                                                           'CUSTOMER SALES', 'EX-FACTORY SALES' ) 
                                   AND FT.BUSINESS_UNIT = @BUSINESS_UNIT 
                                   AND FT.COMPANY = @COMPANY_MASTER_SID)A 
                    WHERE  RN = 1
                            
            ]]>
        </query>
    </entity>
    
    <entity id="getTempPFD">
        <query> 
            <![CDATA[
            
                SELECT * FROM ST_PROJECTION_FILE_DETAILS WHERE PROJECTION_MASTER_SID = @PROJECTIONID ORDER BY SCREEN_NAME DESC ;
                            
            ]]>
        </query>
    </entity>
    
    <entity id="PFD_MAIN_TO_TEMP">
        <query> 
             <![CDATA[  
             
	    INSERT INTO ST_PROJECTION_FILE_DETAILS(
				PROJECTION_MASTER_SID,
				FILE_MANAGEMENT_SID,
				FILE_TYPE,
				SCREEN_NAME,
				FLAG)
		SELECT  A.PROJECTION_MASTER_SID,
				A.FILE_MANAGEMENT_SID,
				A.FILE_TYPE,
				A.SCREEN_NAME,
				ISNULL(A.FLAG,1)
		FROM dbo.PROJECTION_FILE_DETAILS A 
		JOIN dbo.PROJECTION_MASTER B ON B.PROJECTION_MASTER_SID=A.PROJECTION_MASTER_SID AND A.PROJECTION_MASTER_SID = @PROJECTIONMASTERSID ;	
                
            ]]>
        </query>
    </entity>
    
    <entity id="PFD_TEMP_INSERT">
        <query> 
             <![CDATA[  
            DELETE FROM  ST_PROJECTION_FILE_DETAILS WHERE PROJECTION_MASTER_SID = @PROJECTIONMASTERSID AND SCREEN_NAME IN (@SCREENNAME) ;
             
	    INSERT INTO ST_PROJECTION_FILE_DETAILS(
				PROJECTION_MASTER_SID,
				FILE_MANAGEMENT_SID,
				FILE_TYPE,
				SCREEN_NAME,
				FLAG)
	    VALUES (@TEMPVALUES)	;
                
            ]]>
        </query>
    </entity>
    
    <entity id="PFD_MAIN_TO_TEMP_INSERT">
        <query> 
             <![CDATA[  
            DELETE FROM  PROJECTION_FILE_DETAILS WHERE PROJECTION_MASTER_SID = @PROJECTIONMASTERSID ;
             
	    INSERT INTO PROJECTION_FILE_DETAILS(
				PROJECTION_MASTER_SID,
				FILE_MANAGEMENT_SID,
				FILE_TYPE,
				SCREEN_NAME,
				FLAG)
            SELECT PROJECTION_MASTER_SID,
				FILE_MANAGEMENT_SID,
				FILE_TYPE,
				SCREEN_NAME,
				FLAG
            FROM ST_PROJECTION_FILE_DETAILS
            WHERE PROJECTION_MASTER_SID = @PROJECTIONMASTERSID AND SCREEN_NAME IS NOT NULL ;
	    	;
            
            ]]>
        </query>
    </entity>
    
    <entity id="UPDATE_PFD_DISCOUNT_FLAG">
        <query> 
             <![CDATA[  
            
                UPDATE ST_PROJECTION_FILE_DETAILS SET FLAG = '0' WHERE PROJECTION_MASTER_SID = @PROJECTIONMASTERSID AND SCREEN_NAME IN ('D', 'C');
            
            ]]>
        </query>
    </entity>
    <entity id="QUERY_TO_CHECK_ISSALES_CALCULATED_ALREADY">
        <query> 
             <![CDATA[  
            
                DECLARE @BUSINESS_UNIT       INT, 
                    @COMPANY_MASTER_SID  INT, 
                    @FILE_MANAGEMENT_SID INT 

            SELECT @BUSINESS_UNIT = BUSINESS_UNIT, 
                   @COMPANY_MASTER_SID = COMPANY_MASTER_SID
            FROM   PROJECTION_MASTER 
            WHERE  PROJECTION_MASTER_SID = @PROJECTION_ID 
            
            SELECT CASE 
                     WHEN B.file_management_sid = A.file_management_sid THEN 0 
                     ELSE 1  
                   END AS CHANGE_STATUS 
            FROM   (SELECT A.FILE_MANAGEMENT_SID, 
                           A.FILE_TYPE, 
                           A.FORECAST_NAME, 
                           A.VERSION
                                    ,A.DESCRIPTION
                    FROM   (SELECT ROW_NUMBER() 
                                     OVER( 
                                       PARTITION BY HT.DESCRIPTION 
                                       ORDER BY FT.FROM_PERIOD DESC)RN, 
                                   FT.FILE_MANAGEMENT_SID, 
                                   FT.FILE_TYPE, 
                                   FT.FORECAST_NAME, 
                                   FT.VERSION
                                                 ,ht.DESCRIPTION 
                            FROM   FILE_MANAGEMENT FT 
                                   INNER JOIN HELPER_TABLE HT 
                                           ON HT.HELPER_TABLE_SID = FT.FILE_TYPE 
                            WHERE  ( CONVERT(DATE, FT.FROM_PERIOD) <= CONVERT(DATE, GETDATE()) 
                                     AND FT.FROM_PERIOD IS NOT NULL ) 
                                   AND ( CONVERT(DATE, FT.TO_PERIOD) >= CONVERT(DATE, GETDATE()) 
                                          OR FT.TO_PERIOD IS NULL ) 
                                   AND HT.LIST_NAME = 'FILE_TYPE' 
                                   AND HT.DESCRIPTION IN ( 'ADJUSTED DEMAND', 'DEMAND', 'INVENTORY WITHDRAWAL - FORECAST DETAIL', 'INVENTORY WITHDRAWAL - FORECAST SUMMARY',
                                                           'CUSTOMER SALES', 'EX-FACTORY SALES' ) 
                                   AND FT.BUSINESS_UNIT = @BUSINESS_UNIT 
                                   AND FT.COMPANY = @COMPANY_MASTER_SID)A 
                    WHERE  RN = 1)A 
                     JOIN ST_PROJECTION_FILE_DETAILS B 
                     ON A.FILE_TYPE = B.FILE_TYPE 
                     AND B.PROJECTION_MASTER_SID = @PROJECTION_ID
                     AND B.SCREEN_NAME = 'S'
            
            ]]>
        </query>
    </entity>
    
    <entity id="getFileTypeList">
        <query> 
            <![CDATA[
            
               SELECT HELPER_TABLE_SID,DESCRIPTION FROM HELPER_TABLE where LIST_NAME='FILE_TYPE'
                            
            ]]>
        </query>
    </entity>
    
    <entity id="PFD_TEMP_INSERT_WHILE_GENERATE">
        <query> 
            <![CDATA[
            
               IF Object_id('TEMPDB..#APPROVED_CCP_DETAILS') IS NOT NULL
                    DROP TABLE #APPROVED_CCP_DETAILS

                  CREATE TABLE #APPROVED_CCP_DETAILS
                    (
                       PROJECTION_MASTER_SID  INT,
                       PROJECTION_DETAILS_SID INT,
                       CCP_DETAILS_SID        INT
                    )

                  INSERT INTO #APPROVED_CCP_DETAILS
                              (PROJECTION_MASTER_SID,
                               PROJECTION_DETAILS_SID,
                               CCP_DETAILS_SID)
                  EXEC Prc_approved_ccp_details
                    ?,
                    '?',
                    ?,
                    '?'

                  DECLARE @RESULT_PROJ INT

                  SET @RESULT_PROJ=(SELECT TOP 1 PM.PROJECTION_MASTER_SID
                                    FROM   PROJECTION_MASTER PM
                                           JOIN #APPROVED_CCP_DETAILS AD
                                             ON AD.PROJECTION_MASTER_SID = PM.PROJECTION_MASTER_SID
                                    ORDER  BY COALESCE(PM.MODIFIED_DATE, PM.CREATED_DATE) DESC )

                  INSERT INTO ST_PROJECTION_FILE_DETAILS
                              (PROJECTION_MASTER_SID,
                               FILE_MANAGEMENT_SID,
                               FILE_TYPE,
                               SCREEN_NAME,
                               FLAG)
                  SELECT ?,
                         FILE_MANAGEMENT_SID,
                         FILE_TYPE,
                         SCREEN_NAME,
                         FLAG
                  FROM   PROJECTION_FILE_DETAILS
                  WHERE  PROJECTION_MASTER_SID = @RESULT_PROJ 
                            
            ]]>
        </query>
    </entity>
    
    <entity id="Product_customer_files_insert_view">
        <query> 
             <![CDATA[ 		
		DECLARE @FILE_VER       UDT_FILE,
                    @BUSINESS_UNIT  INT,
                    @COMPANY_ID     INT,
                    @PROJECTION_SID INT = ?PROJECTION_ID

            SELECT @BUSINESS_UNIT = BUSINESS_UNIT,
                   @COMPANY_ID = COMPANY_MASTER_SID
            FROM   PROJECTION_MASTER
            WHERE  PROJECTION_MASTER_SID = @PROJECTION_SID

            INSERT INTO @FILE_VER
                        (FILE_TYPE,
                         FILE_NAME,
                         FILE_VERSION)
            SELECT FILE_TYPE,
                   FORECAST_NAME,
                   VERSION
            FROM   (SELECT FT.FORECAST_NAME,
                           FT.[VERSION],
                           FILE_MANAGEMENT_SID,
                           HT.[DESCRIPTION]                       AS FILE_TYPE,
                           Row_number()
                             OVER(
                               PARTITION BY FILE_TYPE
                               ORDER BY FILE_MANAGEMENT_SID DESC) AS RN
                    FROM   FILE_MANAGEMENT FT
                           INNER JOIN HELPER_TABLE HT
                                   ON HT.HELPER_TABLE_SID = FT.FILE_TYPE
                    WHERE  ( CONVERT(DATE, FT.FROM_PERIOD) <= CONVERT(DATE, Getdate())
                             AND FT.FROM_PERIOD IS NOT NULL )
                           AND ( CONVERT(DATE, FT.TO_PERIOD) >= CONVERT(DATE, Getdate())
                                  OR FT.TO_PERIOD IS NULL )
                           AND HT.LIST_NAME = 'FILE_TYPE'
                           AND HT.[DESCRIPTION] IN ( 'Demand', 'Customer Sales', 'Adjusted Demand', 'EX-FACTORY SALES',
                                                     'Inventory Withdrawal - Forecast Summary', 'Inventory Withdrawal - Forecast Detail' )
                           AND FT.BUSINESS_UNIT = @BUSINESS_UNIT
                           AND FT.COMPANY = @COMPANY_ID
                           AND NOT EXISTS (
                                 SELECT 1
                                 FROM PROJECTION_FILE_DETAILS PFD
                                 WHERE PFD.PROJECTION_MASTER_SID = @PROJECTION_SID
                                       AND PFD.FILE_TYPE = FT.FILE_TYPE
                                 )

                   )A
            WHERE  RN = 1

            UNION ALL

            SELECT HT.DESCRIPTION AS FILE_TYPE
                   ,FT.FORECAST_NAME
                   ,FT.VERSION
            FROM FILE_MANAGEMENT FT
            INNER JOIN HELPER_TABLE HT ON HT.HELPER_TABLE_SID = FT.FILE_TYPE
            WHERE EXISTS (
                          SELECT 1
                          FROM PROJECTION_FILE_DETAILS PFD
                          WHERE PFD.PROJECTION_MASTER_SID = @PROJECTION_SID
                                 AND PFD.FILE_TYPE = FT.FILE_TYPE
                                 AND FT.FILE_MANAGEMENT_SID = PFD.FILE_MANAGEMENT_SID
                          )


            EXEC PRC_FILES_DATA
                                              @PROJECTION_SID,
                                              @FILE_VER,
                                              ?USER_ID,
                                              ?SESSION_ID 

             ]]>
        </query>
    </entity>
    <entity id="isAFSS_PriceType_Available">
        <query> 
             <![CDATA[ 		
 if exists (SELECT PRICING_QUALIFIER FROM ITEM_MASTER  IM
 JOIN ITEM_PRICING IP
 ON IP.ITEM_MASTER_SID=IM.ITEM_MASTER_SID
 JOIN ITEM_PRICING_QUALIFIER IPQ
 ON IPQ.ITEM_PRICING_QUALIFIER_SID=IP.ITEM_PRICING_QUALIFIER_SID
 JOIN NA_PROJ_DETAILS PRO
 ON PRO.ITEM_MASTER_SID = IM.ITEM_MASTER_SID

 WHERE PRO.NA_PROJ_MASTER_SID = ?
 AND PRICING_QUALIFIER = 'AFSS')
  BEGIN
  select 1 as CNT
   END
   ELSE
   select 0 as CNT
             ]]>
        </query>
    </entity>
    <entity id="sales-contract-filter">
        <query> 
             <![CDATA[ 		
                        SELECT distinct CM.CONTRACT_NAME FROM dbo.CCP_DETAILS AC
                        JOIN dbo.PROJECTION_DETAILS BV ON BV.CCP_DETAILS_SID=AC.CCP_DETAILS_SID 
                        JOIN dbo.CONTRACT_MASTER CM ON CM.CONTRACT_MASTER_SID=AC.CONTRACT_MASTER_SID AND BV.PROJECTION_MASTER_SID= @PROJECTION_MASTER_SID
             ]]>
        </query>
    </entity>
    <entity id="sales-company-filter">
        <query> 
             <![CDATA[ 		
                        SELECT distinct CM.COMPANY_NAME FROM dbo.CCP_DETAILS AC
                        JOIN dbo.PROJECTION_DETAILS BV ON BV.CCP_DETAILS_SID=AC.CCP_DETAILS_SID 
                        JOIN dbo.COMPANY_MASTER CM ON CM.COMPANY_MASTER_SID=AC.COMPANY_MASTER_SID AND BV.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID
             ]]>
        </query>
    </entity>
    <entity id="sales-marketType-filter">
        <query> 
             <![CDATA[ 		
                       SELECT DISTINCT HT.DESCRIPTION  FROM dbo.CCP_DETAILS AC
            JOIN dbo.PROJECTION_DETAILS BV ON BV.CCP_DETAILS_SID=AC.CCP_DETAILS_SID 
            JOIN dbo.CONTRACT_MASTER CM ON CM.CONTRACT_MASTER_SID=AC.CONTRACT_MASTER_SID
            JOIN dbo.HELPER_TABLE HT on HT.HELPER_TABLE_SID=CM.CONTRACT_TYPE 
            AND BV.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID
             ]]>
        </query>
    </entity>
                      
</sql>