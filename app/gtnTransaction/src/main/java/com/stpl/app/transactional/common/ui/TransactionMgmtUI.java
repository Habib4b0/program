package com.stpl.app.transactional.common.ui;

import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import javax.portlet.EventRequest;
import javax.portlet.EventResponse;
import javax.portlet.PortletMode;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;
import javax.portlet.ResourceRequest;
import javax.portlet.ResourceResponse;

import org.apache.commons.lang.StringUtils;
import org.jboss.logging.Logger;

import com.stpl.app.security.impl.StplSecurity;
import com.stpl.app.transactional.common.ui.view.DisplayView;
import com.stpl.app.transactional.common.ui.view.SearchView;
import com.stpl.app.util.CommonUIUtils;
import com.stpl.app.util.ConstantUtil;
import com.stpl.app.util.DateToStringConverterFactory;
import com.stpl.app.util.ErrorCodeUtil;
import com.stpl.app.util.HelperListUtil;
import com.stpl.portal.kernel.exception.SystemException;
import com.stpl.portal.kernel.util.WebKeys;
import com.stpl.portal.theme.PortletDisplay;
import com.stpl.portal.theme.ThemeDisplay;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.Navigator;
import com.vaadin.server.DefaultErrorHandler;
import com.vaadin.server.UserError;
import com.vaadin.server.VaadinPortletSession;
import com.vaadin.server.VaadinRequest;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.UI;

/**
 * The Class ForecastUI.
 *
 * @author manikanta
 */
@SuppressWarnings(ConstantUtil.SERIAL)
public class TransactionMgmtUI extends UI implements VaadinPortletSession.PortletListener {
public static final String DATE_FORMAT = "yyyy-MM-dd";
    /**
     * Logger
     */
    private static final Logger LOGGER = Logger.getLogger(TransactionMgmtUI.class);

    @AutoGenerated
    public Navigator navigator;
    PortletMode customMode;

    /**
     * Default method.
     */
    @Override
    protected void init(final VaadinRequest request) {
        try {
            LOGGER.info("Entering init");
            CommonUIUtils.beforeUnloadCloseUi(this,ConstantUtil.ST_ADJUSTMENT_GTN_DETAIL);
            CommonUIUtils.beforeUnloadCloseUi(this,ConstantUtil.ST_ADJUSTMENT_RESERVE_DETAIL);
            CommonUIUtils.beforeUnloadCloseUi(this,ConstantUtil.ARP_OUTBOUND);
            CommonUIUtils.beforeUnloadCloseUi(this,ConstantUtil.ST_CFF_OUTBOUND);
            CommonUIUtils.beforeUnloadCloseUi(this,ConstantUtil.VW_CUSTOMER_GTS_FORECAST);
            setId("Forecast");
            addStyleName("bootstrap");
            addStyleName("bootstrap-bb");
            final String userId = request.getRemoteUser();
            ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY);
            PortletDisplay portletDisplay = themeDisplay.getPortletDisplay();
            setId(portletDisplay.getPortletName());
            final SimpleDateFormat fmtID = new SimpleDateFormat("hhmmssms");
            String sessionId=fmtID.format(new Date());
            VaadinSession.getCurrent().setAttribute(ConstantUtil.SESSIONID,sessionId );
            VaadinSession.getCurrent().setAttribute(ConstantUtil.USERID, userId);
            VaadinSession.getCurrent().setAttribute("lockStatus", "N");
            VaadinSession.getCurrent().setAttribute("saveNotif", "N");
            VaadinSession.getCurrent().setConverterFactory(new DateToStringConverterFactory());
            VaadinSession.getCurrent().setAttribute(ConstantUtil.SCREEN_NAME, portletDisplay.getPortletName());
            VaadinSession.getCurrent().setAttribute(ConstantUtil.TABLE_NAME1, StringUtils.EMPTY);
            LOGGER.info("USER_ID:"+userId);
            LOGGER.info("SESSION_ID:"+sessionId);
            if("AdjustmentDetails".equals(portletDisplay.getPortletName())) {
                VaadinSession.getCurrent().setAttribute("getName2", ConstantUtil.ST_ADJUSTMENT_GTN_DETAIL);
            }
            VaadinSession.getCurrent().setAttribute("AccrualDetails", "false");
            
            ExecutorService service = Executors.newSingleThreadExecutor();
            service.submit(new HelperListLoadJob("DATA_SELECTION"));
          final Date tempDate = new Date();
          VaadinSession.getCurrent().setAttribute(ConstantUtil.SESSIONID_ARP, fmtID.format(tempDate));
            StplSecurity.getUserName();
            navigator = new Navigator(this, this);
            navigator.addView(SearchView.NAME, new SearchView());
            navigator.addView(DisplayView.NAME, new DisplayView());
            customMode = new PortletMode("config");
            if (VaadinSession.getCurrent() instanceof VaadinPortletSession) {
                VaadinPortletSession portletsession
                        = (VaadinPortletSession) VaadinSession.getCurrent();
                portletsession.addPortletListener(this);
            }
            navigator.setErrorView(new SearchView());

            setComponentError(new UserError(StringUtils.EMPTY));

             UI.getCurrent().setErrorHandler(new DefaultErrorHandler() {
                @Override
                /**
                 * Error event handling.
                 */
                @SuppressWarnings("PMD")
                public void error(final com.vaadin.server.ErrorEvent event) {
                    // Find the final cause

                    final StringBuilder cause = new StringBuilder("The Exception occured because of------>");

                    for (Throwable t = event.getThrowable(); t != null; t = t.getCause()) {
                        if (t.getCause() == null) // We're at final cause
                        {
                            cause.append(t.getClass().getName());
                        }
                        LOGGER.error(t);
                    } 
                    LOGGER.error(cause);
                }
            });
            LOGGER.info("Ends init");
        } catch (SystemException ex) {
            final String errorMsg = ErrorCodeUtil.getErrorMessage(ex);
            LOGGER.error(errorMsg);
        } catch (Exception ex) {
            LOGGER.error(ex);
		}

    }

    @Override
	public void handleRenderRequest(RenderRequest request, RenderResponse response, UI uI) {
        VaadinSession.getCurrent().getNextUIid();
        Collection<UI> uiList = VaadinSession.getCurrent().getUIs();
        for (Iterator<UI> iterator = uiList.iterator(); iterator.hasNext();) {

            UI ui2 = (UI) iterator.next();
            if (ui2.getId().equals("Forecast")) {
                ui2.close();
            }
        }
        getUI().getNavigator().navigateTo(SearchView.NAME);
    }

    @Override
	public void handleActionRequest(ActionRequest request, ActionResponse response, UI uI) {
 //To change body of generated methods, choose Tools | Templates.
    }

    @Override
	public void handleEventRequest(EventRequest request, EventResponse response, UI uI) {
 //To change body of generated methods, choose Tools | Templates.
    }

    @Override
	public void handleResourceRequest(ResourceRequest request, ResourceResponse response, UI uI) {
//To change body of generated methods, choose Tools | Templates.
    }
    
      class HelperListLoadJob implements Runnable {

        private final String listName;

        public HelperListLoadJob(String listName) {
            this.listName = listName;
        }

        @Override
        public void run() {
            LOGGER.debug("Calling loadValuesWithListName");
            HelperListUtil.getInstance().loadValuesWithListName(listName);
        }

    }

}
