/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.DeductionGroup;
import com.stpl.app.model.DeductionGroupModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DeductionGroup service. Represents a row in the &quot;DEDUCTION_GROUP&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DeductionGroupModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DeductionGroupImpl}.
 * </p>
 *
 * @author
 * @see DeductionGroupImpl
 * @see DeductionGroup
 * @see DeductionGroupModel
 * @generated
 */
@ProviderType
public class DeductionGroupModelImpl extends BaseModelImpl<DeductionGroup>
	implements DeductionGroupModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a deduction group model instance should use the {@link DeductionGroup} interface instead.
	 */
	public static final String TABLE_NAME = "DEDUCTION_GROUP";
	public static final Object[][] TABLE_COLUMNS = {
			{ "DEDUCTION_FILTER", Types.VARCHAR },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.INTEGER },
			{ "DEDUCTION_GROUP_SID", Types.INTEGER },
			{ "DEDUCTION_GROUP_NAME", Types.VARCHAR },
			{ "VERSION_NO", Types.INTEGER },
			{ "DEDUCTION_GROUP_DESCRIPTION", Types.VARCHAR },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "DEDUCTION_GROUP_NO", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("DEDUCTION_FILTER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("DEDUCTION_GROUP_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("DEDUCTION_GROUP_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VERSION_NO", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("DEDUCTION_GROUP_DESCRIPTION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("DEDUCTION_GROUP_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table DEDUCTION_GROUP (DEDUCTION_FILTER VARCHAR(75) null,CREATED_DATE DATE null,CREATED_BY INTEGER,DEDUCTION_GROUP_SID INTEGER not null primary key IDENTITY,DEDUCTION_GROUP_NAME VARCHAR(75) null,VERSION_NO INTEGER,DEDUCTION_GROUP_DESCRIPTION VARCHAR(75) null,MODIFIED_BY INTEGER,DEDUCTION_GROUP_NO VARCHAR(75) null,MODIFIED_DATE DATE null)";
	public static final String TABLE_SQL_DROP = "drop table DEDUCTION_GROUP";
	public static final String ORDER_BY_JPQL = " ORDER BY deductionGroup.deductionGroupSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DEDUCTION_GROUP.DEDUCTION_GROUP_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.DeductionGroup"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.DeductionGroup"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.DeductionGroup"));

	public DeductionGroupModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _deductionGroupSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setDeductionGroupSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _deductionGroupSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DeductionGroup.class;
	}

	@Override
	public String getModelClassName() {
		return DeductionGroup.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("deductionFilter", getDeductionFilter());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("deductionGroupSid", getDeductionGroupSid());
		attributes.put("deductionGroupName", getDeductionGroupName());
		attributes.put("versionNo", getVersionNo());
		attributes.put("deductionGroupDescription",
			getDeductionGroupDescription());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("deductionGroupNo", getDeductionGroupNo());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String deductionFilter = (String)attributes.get("deductionFilter");

		if (deductionFilter != null) {
			setDeductionFilter(deductionFilter);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Integer deductionGroupSid = (Integer)attributes.get("deductionGroupSid");

		if (deductionGroupSid != null) {
			setDeductionGroupSid(deductionGroupSid);
		}

		String deductionGroupName = (String)attributes.get("deductionGroupName");

		if (deductionGroupName != null) {
			setDeductionGroupName(deductionGroupName);
		}

		Integer versionNo = (Integer)attributes.get("versionNo");

		if (versionNo != null) {
			setVersionNo(versionNo);
		}

		String deductionGroupDescription = (String)attributes.get(
				"deductionGroupDescription");

		if (deductionGroupDescription != null) {
			setDeductionGroupDescription(deductionGroupDescription);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		String deductionGroupNo = (String)attributes.get("deductionGroupNo");

		if (deductionGroupNo != null) {
			setDeductionGroupNo(deductionGroupNo);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public String getDeductionFilter() {
		if (_deductionFilter == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionFilter;
		}
	}

	@Override
	public void setDeductionFilter(String deductionFilter) {
		_deductionFilter = deductionFilter;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public int getDeductionGroupSid() {
		return _deductionGroupSid;
	}

	@Override
	public void setDeductionGroupSid(int deductionGroupSid) {
		_deductionGroupSid = deductionGroupSid;
	}

	@Override
	public String getDeductionGroupName() {
		if (_deductionGroupName == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionGroupName;
		}
	}

	@Override
	public void setDeductionGroupName(String deductionGroupName) {
		_deductionGroupName = deductionGroupName;
	}

	@Override
	public int getVersionNo() {
		return _versionNo;
	}

	@Override
	public void setVersionNo(int versionNo) {
		_versionNo = versionNo;
	}

	@Override
	public String getDeductionGroupDescription() {
		if (_deductionGroupDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionGroupDescription;
		}
	}

	@Override
	public void setDeductionGroupDescription(String deductionGroupDescription) {
		_deductionGroupDescription = deductionGroupDescription;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public String getDeductionGroupNo() {
		if (_deductionGroupNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionGroupNo;
		}
	}

	@Override
	public void setDeductionGroupNo(String deductionGroupNo) {
		_deductionGroupNo = deductionGroupNo;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public DeductionGroup toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DeductionGroup)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DeductionGroupImpl deductionGroupImpl = new DeductionGroupImpl();

		deductionGroupImpl.setDeductionFilter(getDeductionFilter());
		deductionGroupImpl.setCreatedDate(getCreatedDate());
		deductionGroupImpl.setCreatedBy(getCreatedBy());
		deductionGroupImpl.setDeductionGroupSid(getDeductionGroupSid());
		deductionGroupImpl.setDeductionGroupName(getDeductionGroupName());
		deductionGroupImpl.setVersionNo(getVersionNo());
		deductionGroupImpl.setDeductionGroupDescription(getDeductionGroupDescription());
		deductionGroupImpl.setModifiedBy(getModifiedBy());
		deductionGroupImpl.setDeductionGroupNo(getDeductionGroupNo());
		deductionGroupImpl.setModifiedDate(getModifiedDate());

		deductionGroupImpl.resetOriginalValues();

		return deductionGroupImpl;
	}

	@Override
	public int compareTo(DeductionGroup deductionGroup) {
		int primaryKey = deductionGroup.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DeductionGroup)) {
			return false;
		}

		DeductionGroup deductionGroup = (DeductionGroup)obj;

		int primaryKey = deductionGroup.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DeductionGroup> toCacheModel() {
		DeductionGroupCacheModel deductionGroupCacheModel = new DeductionGroupCacheModel();

		deductionGroupCacheModel.deductionFilter = getDeductionFilter();

		String deductionFilter = deductionGroupCacheModel.deductionFilter;

		if ((deductionFilter != null) && (deductionFilter.length() == 0)) {
			deductionGroupCacheModel.deductionFilter = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			deductionGroupCacheModel.createdDate = createdDate.getTime();
		}
		else {
			deductionGroupCacheModel.createdDate = Long.MIN_VALUE;
		}

		deductionGroupCacheModel.createdBy = getCreatedBy();

		deductionGroupCacheModel.deductionGroupSid = getDeductionGroupSid();

		deductionGroupCacheModel.deductionGroupName = getDeductionGroupName();

		String deductionGroupName = deductionGroupCacheModel.deductionGroupName;

		if ((deductionGroupName != null) && (deductionGroupName.length() == 0)) {
			deductionGroupCacheModel.deductionGroupName = null;
		}

		deductionGroupCacheModel.versionNo = getVersionNo();

		deductionGroupCacheModel.deductionGroupDescription = getDeductionGroupDescription();

		String deductionGroupDescription = deductionGroupCacheModel.deductionGroupDescription;

		if ((deductionGroupDescription != null) &&
				(deductionGroupDescription.length() == 0)) {
			deductionGroupCacheModel.deductionGroupDescription = null;
		}

		deductionGroupCacheModel.modifiedBy = getModifiedBy();

		deductionGroupCacheModel.deductionGroupNo = getDeductionGroupNo();

		String deductionGroupNo = deductionGroupCacheModel.deductionGroupNo;

		if ((deductionGroupNo != null) && (deductionGroupNo.length() == 0)) {
			deductionGroupCacheModel.deductionGroupNo = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			deductionGroupCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			deductionGroupCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return deductionGroupCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{deductionFilter=");
		sb.append(getDeductionFilter());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", deductionGroupSid=");
		sb.append(getDeductionGroupSid());
		sb.append(", deductionGroupName=");
		sb.append(getDeductionGroupName());
		sb.append(", versionNo=");
		sb.append(getVersionNo());
		sb.append(", deductionGroupDescription=");
		sb.append(getDeductionGroupDescription());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", deductionGroupNo=");
		sb.append(getDeductionGroupNo());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.DeductionGroup");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>deductionFilter</column-name><column-value><![CDATA[");
		sb.append(getDeductionFilter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionGroupSid</column-name><column-value><![CDATA[");
		sb.append(getDeductionGroupSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionGroupName</column-name><column-value><![CDATA[");
		sb.append(getDeductionGroupName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionNo</column-name><column-value><![CDATA[");
		sb.append(getVersionNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionGroupDescription</column-name><column-value><![CDATA[");
		sb.append(getDeductionGroupDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionGroupNo</column-name><column-value><![CDATA[");
		sb.append(getDeductionGroupNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DeductionGroup.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DeductionGroup.class
		};
	private String _deductionFilter;
	private Date _createdDate;
	private int _createdBy;
	private int _deductionGroupSid;
	private String _deductionGroupName;
	private int _versionNo;
	private String _deductionGroupDescription;
	private int _modifiedBy;
	private String _deductionGroupNo;
	private Date _modifiedDate;
	private DeductionGroup _escapedModel;
}