package com.stpl.app.model.impl;

import com.stpl.app.model.IvldInventoryWdActualMas;
import com.stpl.app.model.IvldInventoryWdActualMasModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the IvldInventoryWdActualMas service. Represents a row in the &quot;IVLD_INVENTORY_WD_ACTUAL_MAS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.IvldInventoryWdActualMasModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IvldInventoryWdActualMasImpl}.
 * </p>
 *
 * @author
 * @see IvldInventoryWdActualMasImpl
 * @see com.stpl.app.model.IvldInventoryWdActualMas
 * @see com.stpl.app.model.IvldInventoryWdActualMasModel
 * @generated
 */
public class IvldInventoryWdActualMasModelImpl extends BaseModelImpl<IvldInventoryWdActualMas>
    implements IvldInventoryWdActualMasModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ivld inventory wd actual mas model instance should use the {@link com.stpl.app.model.IvldInventoryWdActualMas} interface instead.
     */
    public static final String TABLE_NAME = "IVLD_INVENTORY_WD_ACTUAL_MAS";
    public static final Object[][] TABLE_COLUMNS = {
            { "QUANTITY_ON_ORDER", Types.VARCHAR },
            { "WEEK", Types.VARCHAR },
            { "AMOUNT_ON_HAND", Types.VARCHAR },
            { "YEAR", Types.VARCHAR },
            { "ITEM_ID", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "ORGANIZATION_KEY", Types.VARCHAR },
            { "CREATED_BY", Types.VARCHAR },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "SOURCE", Types.VARCHAR },
            { "IVLD_INVENTORY_WD_ACTUAL_MAS_SID", Types.INTEGER },
            { "DAY", Types.VARCHAR },
            { "ADD_CHG_DEL_INDICATOR", Types.VARCHAR },
            { "UNITS_ON_HAND", Types.VARCHAR },
            { "AMOUNT_RECEIVED", Types.VARCHAR },
            { "ITEM_IDENTIFIER", Types.VARCHAR },
            { "ERROR_CODE", Types.VARCHAR },
            { "INTF_INSERTED_DATE", Types.TIMESTAMP },
            { "MODIFIED_BY", Types.VARCHAR },
            { "MONTH", Types.VARCHAR },
            { "REPROCESSED_FLAG", Types.VARCHAR },
            { "AMOUNT_WITHDRAWN", Types.VARCHAR },
            { "INVENTORY_WD_ACTUAL_MAS_INTF_ID", Types.INTEGER },
            { "QUANTITY_RECEIVED", Types.VARCHAR },
            { "UNITS_WITHDRAWN", Types.VARCHAR },
            { "REASON_FOR_FAILURE", Types.VARCHAR },
            { "COUNTRY", Types.VARCHAR },
            { "ITEM_IDENTIFIER_CODE_QUALIFIER", Types.VARCHAR },
            { "BATCH_ID", Types.VARCHAR },
            { "ERROR_FIELD", Types.VARCHAR },
            { "AMOUNT_ON_ORDER", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table IVLD_INVENTORY_WD_ACTUAL_MAS (QUANTITY_ON_ORDER VARCHAR(75) null,WEEK VARCHAR(75) null,AMOUNT_ON_HAND VARCHAR(75) null,YEAR VARCHAR(75) null,ITEM_ID VARCHAR(75) null,MODIFIED_DATE DATE null,ORGANIZATION_KEY VARCHAR(75) null,CREATED_BY VARCHAR(75) null,CREATED_DATE DATE null,SOURCE VARCHAR(75) null,IVLD_INVENTORY_WD_ACTUAL_MAS_SID INTEGER not null primary key IDENTITY,DAY VARCHAR(75) null,ADD_CHG_DEL_INDICATOR VARCHAR(75) null,UNITS_ON_HAND VARCHAR(75) null,AMOUNT_RECEIVED VARCHAR(75) null,ITEM_IDENTIFIER VARCHAR(75) null,ERROR_CODE VARCHAR(75) null,INTF_INSERTED_DATE DATE null,MODIFIED_BY VARCHAR(75) null,MONTH VARCHAR(75) null,REPROCESSED_FLAG VARCHAR(75) null,AMOUNT_WITHDRAWN VARCHAR(75) null,INVENTORY_WD_ACTUAL_MAS_INTF_ID INTEGER,QUANTITY_RECEIVED VARCHAR(75) null,UNITS_WITHDRAWN VARCHAR(75) null,REASON_FOR_FAILURE VARCHAR(75) null,COUNTRY VARCHAR(75) null,ITEM_IDENTIFIER_CODE_QUALIFIER VARCHAR(75) null,BATCH_ID VARCHAR(75) null,ERROR_FIELD VARCHAR(75) null,AMOUNT_ON_ORDER VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table IVLD_INVENTORY_WD_ACTUAL_MAS";
    public static final String ORDER_BY_JPQL = " ORDER BY ivldInventoryWdActualMas.ivldInventoryWdActualMasSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY IVLD_INVENTORY_WD_ACTUAL_MAS.IVLD_INVENTORY_WD_ACTUAL_MAS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.IvldInventoryWdActualMas"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.IvldInventoryWdActualMas"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.IvldInventoryWdActualMas"));
    private static ClassLoader _classLoader = IvldInventoryWdActualMas.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            IvldInventoryWdActualMas.class
        };
    private String _quantityOnOrder;
    private String _week;
    private String _amountOnHand;
    private String _year;
    private String _itemId;
    private Date _modifiedDate;
    private String _organizationKey;
    private String _createdBy;
    private Date _createdDate;
    private String _source;
    private int _ivldInventoryWdActualMasSid;
    private String _day;
    private String _addChgDelIndicator;
    private String _unitsOnHand;
    private String _amountReceived;
    private String _itemIdentifier;
    private String _errorCode;
    private Date _intfInsertedDate;
    private String _modifiedBy;
    private String _month;
    private String _reprocessedFlag;
    private String _amountWithdrawn;
    private int _inventoryWdActualMasIntfId;
    private String _quantityReceived;
    private String _unitsWithdrawn;
    private String _reasonForFailure;
    private String _country;
    private String _itemIdentifierCodeQualifier;
    private String _batchId;
    private String _errorField;
    private String _amountOnOrder;
    private IvldInventoryWdActualMas _escapedModel;

    public IvldInventoryWdActualMasModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _ivldInventoryWdActualMasSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setIvldInventoryWdActualMasSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _ivldInventoryWdActualMasSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return IvldInventoryWdActualMas.class;
    }

    @Override
    public String getModelClassName() {
        return IvldInventoryWdActualMas.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("quantityOnOrder", getQuantityOnOrder());
        attributes.put("week", getWeek());
        attributes.put("amountOnHand", getAmountOnHand());
        attributes.put("year", getYear());
        attributes.put("itemId", getItemId());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("organizationKey", getOrganizationKey());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("source", getSource());
        attributes.put("ivldInventoryWdActualMasSid",
            getIvldInventoryWdActualMasSid());
        attributes.put("day", getDay());
        attributes.put("addChgDelIndicator", getAddChgDelIndicator());
        attributes.put("unitsOnHand", getUnitsOnHand());
        attributes.put("amountReceived", getAmountReceived());
        attributes.put("itemIdentifier", getItemIdentifier());
        attributes.put("errorCode", getErrorCode());
        attributes.put("intfInsertedDate", getIntfInsertedDate());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("month", getMonth());
        attributes.put("reprocessedFlag", getReprocessedFlag());
        attributes.put("amountWithdrawn", getAmountWithdrawn());
        attributes.put("inventoryWdActualMasIntfId",
            getInventoryWdActualMasIntfId());
        attributes.put("quantityReceived", getQuantityReceived());
        attributes.put("unitsWithdrawn", getUnitsWithdrawn());
        attributes.put("reasonForFailure", getReasonForFailure());
        attributes.put("country", getCountry());
        attributes.put("itemIdentifierCodeQualifier",
            getItemIdentifierCodeQualifier());
        attributes.put("batchId", getBatchId());
        attributes.put("errorField", getErrorField());
        attributes.put("amountOnOrder", getAmountOnOrder());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String quantityOnOrder = (String) attributes.get("quantityOnOrder");

        if (quantityOnOrder != null) {
            setQuantityOnOrder(quantityOnOrder);
        }

        String week = (String) attributes.get("week");

        if (week != null) {
            setWeek(week);
        }

        String amountOnHand = (String) attributes.get("amountOnHand");

        if (amountOnHand != null) {
            setAmountOnHand(amountOnHand);
        }

        String year = (String) attributes.get("year");

        if (year != null) {
            setYear(year);
        }

        String itemId = (String) attributes.get("itemId");

        if (itemId != null) {
            setItemId(itemId);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String organizationKey = (String) attributes.get("organizationKey");

        if (organizationKey != null) {
            setOrganizationKey(organizationKey);
        }

        String createdBy = (String) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        Integer ivldInventoryWdActualMasSid = (Integer) attributes.get(
                "ivldInventoryWdActualMasSid");

        if (ivldInventoryWdActualMasSid != null) {
            setIvldInventoryWdActualMasSid(ivldInventoryWdActualMasSid);
        }

        String day = (String) attributes.get("day");

        if (day != null) {
            setDay(day);
        }

        String addChgDelIndicator = (String) attributes.get(
                "addChgDelIndicator");

        if (addChgDelIndicator != null) {
            setAddChgDelIndicator(addChgDelIndicator);
        }

        String unitsOnHand = (String) attributes.get("unitsOnHand");

        if (unitsOnHand != null) {
            setUnitsOnHand(unitsOnHand);
        }

        String amountReceived = (String) attributes.get("amountReceived");

        if (amountReceived != null) {
            setAmountReceived(amountReceived);
        }

        String itemIdentifier = (String) attributes.get("itemIdentifier");

        if (itemIdentifier != null) {
            setItemIdentifier(itemIdentifier);
        }

        String errorCode = (String) attributes.get("errorCode");

        if (errorCode != null) {
            setErrorCode(errorCode);
        }

        Date intfInsertedDate = (Date) attributes.get("intfInsertedDate");

        if (intfInsertedDate != null) {
            setIntfInsertedDate(intfInsertedDate);
        }

        String modifiedBy = (String) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String month = (String) attributes.get("month");

        if (month != null) {
            setMonth(month);
        }

        String reprocessedFlag = (String) attributes.get("reprocessedFlag");

        if (reprocessedFlag != null) {
            setReprocessedFlag(reprocessedFlag);
        }

        String amountWithdrawn = (String) attributes.get("amountWithdrawn");

        if (amountWithdrawn != null) {
            setAmountWithdrawn(amountWithdrawn);
        }

        Integer inventoryWdActualMasIntfId = (Integer) attributes.get(
                "inventoryWdActualMasIntfId");

        if (inventoryWdActualMasIntfId != null) {
            setInventoryWdActualMasIntfId(inventoryWdActualMasIntfId);
        }

        String quantityReceived = (String) attributes.get("quantityReceived");

        if (quantityReceived != null) {
            setQuantityReceived(quantityReceived);
        }

        String unitsWithdrawn = (String) attributes.get("unitsWithdrawn");

        if (unitsWithdrawn != null) {
            setUnitsWithdrawn(unitsWithdrawn);
        }

        String reasonForFailure = (String) attributes.get("reasonForFailure");

        if (reasonForFailure != null) {
            setReasonForFailure(reasonForFailure);
        }

        String country = (String) attributes.get("country");

        if (country != null) {
            setCountry(country);
        }

        String itemIdentifierCodeQualifier = (String) attributes.get(
                "itemIdentifierCodeQualifier");

        if (itemIdentifierCodeQualifier != null) {
            setItemIdentifierCodeQualifier(itemIdentifierCodeQualifier);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        String errorField = (String) attributes.get("errorField");

        if (errorField != null) {
            setErrorField(errorField);
        }

        String amountOnOrder = (String) attributes.get("amountOnOrder");

        if (amountOnOrder != null) {
            setAmountOnOrder(amountOnOrder);
        }
    }

    @Override
    public String getQuantityOnOrder() {
        if (_quantityOnOrder == null) {
            return StringPool.BLANK;
        } else {
            return _quantityOnOrder;
        }
    }

    @Override
    public void setQuantityOnOrder(String quantityOnOrder) {
        _quantityOnOrder = quantityOnOrder;
    }

    @Override
    public String getWeek() {
        if (_week == null) {
            return StringPool.BLANK;
        } else {
            return _week;
        }
    }

    @Override
    public void setWeek(String week) {
        _week = week;
    }

    @Override
    public String getAmountOnHand() {
        if (_amountOnHand == null) {
            return StringPool.BLANK;
        } else {
            return _amountOnHand;
        }
    }

    @Override
    public void setAmountOnHand(String amountOnHand) {
        _amountOnHand = amountOnHand;
    }

    @Override
    public String getYear() {
        if (_year == null) {
            return StringPool.BLANK;
        } else {
            return _year;
        }
    }

    @Override
    public void setYear(String year) {
        _year = year;
    }

    @Override
    public String getItemId() {
        if (_itemId == null) {
            return StringPool.BLANK;
        } else {
            return _itemId;
        }
    }

    @Override
    public void setItemId(String itemId) {
        _itemId = itemId;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getOrganizationKey() {
        if (_organizationKey == null) {
            return StringPool.BLANK;
        } else {
            return _organizationKey;
        }
    }

    @Override
    public void setOrganizationKey(String organizationKey) {
        _organizationKey = organizationKey;
    }

    @Override
    public String getCreatedBy() {
        if (_createdBy == null) {
            return StringPool.BLANK;
        } else {
            return _createdBy;
        }
    }

    @Override
    public void setCreatedBy(String createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public int getIvldInventoryWdActualMasSid() {
        return _ivldInventoryWdActualMasSid;
    }

    @Override
    public void setIvldInventoryWdActualMasSid(int ivldInventoryWdActualMasSid) {
        _ivldInventoryWdActualMasSid = ivldInventoryWdActualMasSid;
    }

    @Override
    public String getDay() {
        if (_day == null) {
            return StringPool.BLANK;
        } else {
            return _day;
        }
    }

    @Override
    public void setDay(String day) {
        _day = day;
    }

    @Override
    public String getAddChgDelIndicator() {
        if (_addChgDelIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _addChgDelIndicator;
        }
    }

    @Override
    public void setAddChgDelIndicator(String addChgDelIndicator) {
        _addChgDelIndicator = addChgDelIndicator;
    }

    @Override
    public String getUnitsOnHand() {
        if (_unitsOnHand == null) {
            return StringPool.BLANK;
        } else {
            return _unitsOnHand;
        }
    }

    @Override
    public void setUnitsOnHand(String unitsOnHand) {
        _unitsOnHand = unitsOnHand;
    }

    @Override
    public String getAmountReceived() {
        if (_amountReceived == null) {
            return StringPool.BLANK;
        } else {
            return _amountReceived;
        }
    }

    @Override
    public void setAmountReceived(String amountReceived) {
        _amountReceived = amountReceived;
    }

    @Override
    public String getItemIdentifier() {
        if (_itemIdentifier == null) {
            return StringPool.BLANK;
        } else {
            return _itemIdentifier;
        }
    }

    @Override
    public void setItemIdentifier(String itemIdentifier) {
        _itemIdentifier = itemIdentifier;
    }

    @Override
    public String getErrorCode() {
        if (_errorCode == null) {
            return StringPool.BLANK;
        } else {
            return _errorCode;
        }
    }

    @Override
    public void setErrorCode(String errorCode) {
        _errorCode = errorCode;
    }

    @Override
    public Date getIntfInsertedDate() {
        return _intfInsertedDate;
    }

    @Override
    public void setIntfInsertedDate(Date intfInsertedDate) {
        _intfInsertedDate = intfInsertedDate;
    }

    @Override
    public String getModifiedBy() {
        if (_modifiedBy == null) {
            return StringPool.BLANK;
        } else {
            return _modifiedBy;
        }
    }

    @Override
    public void setModifiedBy(String modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getMonth() {
        if (_month == null) {
            return StringPool.BLANK;
        } else {
            return _month;
        }
    }

    @Override
    public void setMonth(String month) {
        _month = month;
    }

    @Override
    public String getReprocessedFlag() {
        if (_reprocessedFlag == null) {
            return StringPool.BLANK;
        } else {
            return _reprocessedFlag;
        }
    }

    @Override
    public void setReprocessedFlag(String reprocessedFlag) {
        _reprocessedFlag = reprocessedFlag;
    }

    @Override
    public String getAmountWithdrawn() {
        if (_amountWithdrawn == null) {
            return StringPool.BLANK;
        } else {
            return _amountWithdrawn;
        }
    }

    @Override
    public void setAmountWithdrawn(String amountWithdrawn) {
        _amountWithdrawn = amountWithdrawn;
    }

    @Override
    public int getInventoryWdActualMasIntfId() {
        return _inventoryWdActualMasIntfId;
    }

    @Override
    public void setInventoryWdActualMasIntfId(int inventoryWdActualMasIntfId) {
        _inventoryWdActualMasIntfId = inventoryWdActualMasIntfId;
    }

    @Override
    public String getQuantityReceived() {
        if (_quantityReceived == null) {
            return StringPool.BLANK;
        } else {
            return _quantityReceived;
        }
    }

    @Override
    public void setQuantityReceived(String quantityReceived) {
        _quantityReceived = quantityReceived;
    }

    @Override
    public String getUnitsWithdrawn() {
        if (_unitsWithdrawn == null) {
            return StringPool.BLANK;
        } else {
            return _unitsWithdrawn;
        }
    }

    @Override
    public void setUnitsWithdrawn(String unitsWithdrawn) {
        _unitsWithdrawn = unitsWithdrawn;
    }

    @Override
    public String getReasonForFailure() {
        if (_reasonForFailure == null) {
            return StringPool.BLANK;
        } else {
            return _reasonForFailure;
        }
    }

    @Override
    public void setReasonForFailure(String reasonForFailure) {
        _reasonForFailure = reasonForFailure;
    }

    @Override
    public String getCountry() {
        if (_country == null) {
            return StringPool.BLANK;
        } else {
            return _country;
        }
    }

    @Override
    public void setCountry(String country) {
        _country = country;
    }

    @Override
    public String getItemIdentifierCodeQualifier() {
        if (_itemIdentifierCodeQualifier == null) {
            return StringPool.BLANK;
        } else {
            return _itemIdentifierCodeQualifier;
        }
    }

    @Override
    public void setItemIdentifierCodeQualifier(
        String itemIdentifierCodeQualifier) {
        _itemIdentifierCodeQualifier = itemIdentifierCodeQualifier;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public String getErrorField() {
        if (_errorField == null) {
            return StringPool.BLANK;
        } else {
            return _errorField;
        }
    }

    @Override
    public void setErrorField(String errorField) {
        _errorField = errorField;
    }

    @Override
    public String getAmountOnOrder() {
        if (_amountOnOrder == null) {
            return StringPool.BLANK;
        } else {
            return _amountOnOrder;
        }
    }

    @Override
    public void setAmountOnOrder(String amountOnOrder) {
        _amountOnOrder = amountOnOrder;
    }

    @Override
    public IvldInventoryWdActualMas toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (IvldInventoryWdActualMas) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        IvldInventoryWdActualMasImpl ivldInventoryWdActualMasImpl = new IvldInventoryWdActualMasImpl();

        ivldInventoryWdActualMasImpl.setQuantityOnOrder(getQuantityOnOrder());
        ivldInventoryWdActualMasImpl.setWeek(getWeek());
        ivldInventoryWdActualMasImpl.setAmountOnHand(getAmountOnHand());
        ivldInventoryWdActualMasImpl.setYear(getYear());
        ivldInventoryWdActualMasImpl.setItemId(getItemId());
        ivldInventoryWdActualMasImpl.setModifiedDate(getModifiedDate());
        ivldInventoryWdActualMasImpl.setOrganizationKey(getOrganizationKey());
        ivldInventoryWdActualMasImpl.setCreatedBy(getCreatedBy());
        ivldInventoryWdActualMasImpl.setCreatedDate(getCreatedDate());
        ivldInventoryWdActualMasImpl.setSource(getSource());
        ivldInventoryWdActualMasImpl.setIvldInventoryWdActualMasSid(getIvldInventoryWdActualMasSid());
        ivldInventoryWdActualMasImpl.setDay(getDay());
        ivldInventoryWdActualMasImpl.setAddChgDelIndicator(getAddChgDelIndicator());
        ivldInventoryWdActualMasImpl.setUnitsOnHand(getUnitsOnHand());
        ivldInventoryWdActualMasImpl.setAmountReceived(getAmountReceived());
        ivldInventoryWdActualMasImpl.setItemIdentifier(getItemIdentifier());
        ivldInventoryWdActualMasImpl.setErrorCode(getErrorCode());
        ivldInventoryWdActualMasImpl.setIntfInsertedDate(getIntfInsertedDate());
        ivldInventoryWdActualMasImpl.setModifiedBy(getModifiedBy());
        ivldInventoryWdActualMasImpl.setMonth(getMonth());
        ivldInventoryWdActualMasImpl.setReprocessedFlag(getReprocessedFlag());
        ivldInventoryWdActualMasImpl.setAmountWithdrawn(getAmountWithdrawn());
        ivldInventoryWdActualMasImpl.setInventoryWdActualMasIntfId(getInventoryWdActualMasIntfId());
        ivldInventoryWdActualMasImpl.setQuantityReceived(getQuantityReceived());
        ivldInventoryWdActualMasImpl.setUnitsWithdrawn(getUnitsWithdrawn());
        ivldInventoryWdActualMasImpl.setReasonForFailure(getReasonForFailure());
        ivldInventoryWdActualMasImpl.setCountry(getCountry());
        ivldInventoryWdActualMasImpl.setItemIdentifierCodeQualifier(getItemIdentifierCodeQualifier());
        ivldInventoryWdActualMasImpl.setBatchId(getBatchId());
        ivldInventoryWdActualMasImpl.setErrorField(getErrorField());
        ivldInventoryWdActualMasImpl.setAmountOnOrder(getAmountOnOrder());

        ivldInventoryWdActualMasImpl.resetOriginalValues();

        return ivldInventoryWdActualMasImpl;
    }

    @Override
    public int compareTo(IvldInventoryWdActualMas ivldInventoryWdActualMas) {
        int primaryKey = ivldInventoryWdActualMas.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof IvldInventoryWdActualMas)) {
            return false;
        }

        IvldInventoryWdActualMas ivldInventoryWdActualMas = (IvldInventoryWdActualMas) obj;

        int primaryKey = ivldInventoryWdActualMas.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<IvldInventoryWdActualMas> toCacheModel() {
        IvldInventoryWdActualMasCacheModel ivldInventoryWdActualMasCacheModel = new IvldInventoryWdActualMasCacheModel();

        ivldInventoryWdActualMasCacheModel.quantityOnOrder = getQuantityOnOrder();

        String quantityOnOrder = ivldInventoryWdActualMasCacheModel.quantityOnOrder;

        if ((quantityOnOrder != null) && (quantityOnOrder.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.quantityOnOrder = null;
        }

        ivldInventoryWdActualMasCacheModel.week = getWeek();

        String week = ivldInventoryWdActualMasCacheModel.week;

        if ((week != null) && (week.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.week = null;
        }

        ivldInventoryWdActualMasCacheModel.amountOnHand = getAmountOnHand();

        String amountOnHand = ivldInventoryWdActualMasCacheModel.amountOnHand;

        if ((amountOnHand != null) && (amountOnHand.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.amountOnHand = null;
        }

        ivldInventoryWdActualMasCacheModel.year = getYear();

        String year = ivldInventoryWdActualMasCacheModel.year;

        if ((year != null) && (year.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.year = null;
        }

        ivldInventoryWdActualMasCacheModel.itemId = getItemId();

        String itemId = ivldInventoryWdActualMasCacheModel.itemId;

        if ((itemId != null) && (itemId.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.itemId = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            ivldInventoryWdActualMasCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            ivldInventoryWdActualMasCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        ivldInventoryWdActualMasCacheModel.organizationKey = getOrganizationKey();

        String organizationKey = ivldInventoryWdActualMasCacheModel.organizationKey;

        if ((organizationKey != null) && (organizationKey.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.organizationKey = null;
        }

        ivldInventoryWdActualMasCacheModel.createdBy = getCreatedBy();

        String createdBy = ivldInventoryWdActualMasCacheModel.createdBy;

        if ((createdBy != null) && (createdBy.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.createdBy = null;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            ivldInventoryWdActualMasCacheModel.createdDate = createdDate.getTime();
        } else {
            ivldInventoryWdActualMasCacheModel.createdDate = Long.MIN_VALUE;
        }

        ivldInventoryWdActualMasCacheModel.source = getSource();

        String source = ivldInventoryWdActualMasCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.source = null;
        }

        ivldInventoryWdActualMasCacheModel.ivldInventoryWdActualMasSid = getIvldInventoryWdActualMasSid();

        ivldInventoryWdActualMasCacheModel.day = getDay();

        String day = ivldInventoryWdActualMasCacheModel.day;

        if ((day != null) && (day.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.day = null;
        }

        ivldInventoryWdActualMasCacheModel.addChgDelIndicator = getAddChgDelIndicator();

        String addChgDelIndicator = ivldInventoryWdActualMasCacheModel.addChgDelIndicator;

        if ((addChgDelIndicator != null) && (addChgDelIndicator.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.addChgDelIndicator = null;
        }

        ivldInventoryWdActualMasCacheModel.unitsOnHand = getUnitsOnHand();

        String unitsOnHand = ivldInventoryWdActualMasCacheModel.unitsOnHand;

        if ((unitsOnHand != null) && (unitsOnHand.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.unitsOnHand = null;
        }

        ivldInventoryWdActualMasCacheModel.amountReceived = getAmountReceived();

        String amountReceived = ivldInventoryWdActualMasCacheModel.amountReceived;

        if ((amountReceived != null) && (amountReceived.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.amountReceived = null;
        }

        ivldInventoryWdActualMasCacheModel.itemIdentifier = getItemIdentifier();

        String itemIdentifier = ivldInventoryWdActualMasCacheModel.itemIdentifier;

        if ((itemIdentifier != null) && (itemIdentifier.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.itemIdentifier = null;
        }

        ivldInventoryWdActualMasCacheModel.errorCode = getErrorCode();

        String errorCode = ivldInventoryWdActualMasCacheModel.errorCode;

        if ((errorCode != null) && (errorCode.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.errorCode = null;
        }

        Date intfInsertedDate = getIntfInsertedDate();

        if (intfInsertedDate != null) {
            ivldInventoryWdActualMasCacheModel.intfInsertedDate = intfInsertedDate.getTime();
        } else {
            ivldInventoryWdActualMasCacheModel.intfInsertedDate = Long.MIN_VALUE;
        }

        ivldInventoryWdActualMasCacheModel.modifiedBy = getModifiedBy();

        String modifiedBy = ivldInventoryWdActualMasCacheModel.modifiedBy;

        if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.modifiedBy = null;
        }

        ivldInventoryWdActualMasCacheModel.month = getMonth();

        String month = ivldInventoryWdActualMasCacheModel.month;

        if ((month != null) && (month.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.month = null;
        }

        ivldInventoryWdActualMasCacheModel.reprocessedFlag = getReprocessedFlag();

        String reprocessedFlag = ivldInventoryWdActualMasCacheModel.reprocessedFlag;

        if ((reprocessedFlag != null) && (reprocessedFlag.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.reprocessedFlag = null;
        }

        ivldInventoryWdActualMasCacheModel.amountWithdrawn = getAmountWithdrawn();

        String amountWithdrawn = ivldInventoryWdActualMasCacheModel.amountWithdrawn;

        if ((amountWithdrawn != null) && (amountWithdrawn.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.amountWithdrawn = null;
        }

        ivldInventoryWdActualMasCacheModel.inventoryWdActualMasIntfId = getInventoryWdActualMasIntfId();

        ivldInventoryWdActualMasCacheModel.quantityReceived = getQuantityReceived();

        String quantityReceived = ivldInventoryWdActualMasCacheModel.quantityReceived;

        if ((quantityReceived != null) && (quantityReceived.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.quantityReceived = null;
        }

        ivldInventoryWdActualMasCacheModel.unitsWithdrawn = getUnitsWithdrawn();

        String unitsWithdrawn = ivldInventoryWdActualMasCacheModel.unitsWithdrawn;

        if ((unitsWithdrawn != null) && (unitsWithdrawn.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.unitsWithdrawn = null;
        }

        ivldInventoryWdActualMasCacheModel.reasonForFailure = getReasonForFailure();

        String reasonForFailure = ivldInventoryWdActualMasCacheModel.reasonForFailure;

        if ((reasonForFailure != null) && (reasonForFailure.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.reasonForFailure = null;
        }

        ivldInventoryWdActualMasCacheModel.country = getCountry();

        String country = ivldInventoryWdActualMasCacheModel.country;

        if ((country != null) && (country.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.country = null;
        }

        ivldInventoryWdActualMasCacheModel.itemIdentifierCodeQualifier = getItemIdentifierCodeQualifier();

        String itemIdentifierCodeQualifier = ivldInventoryWdActualMasCacheModel.itemIdentifierCodeQualifier;

        if ((itemIdentifierCodeQualifier != null) &&
                (itemIdentifierCodeQualifier.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.itemIdentifierCodeQualifier = null;
        }

        ivldInventoryWdActualMasCacheModel.batchId = getBatchId();

        String batchId = ivldInventoryWdActualMasCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.batchId = null;
        }

        ivldInventoryWdActualMasCacheModel.errorField = getErrorField();

        String errorField = ivldInventoryWdActualMasCacheModel.errorField;

        if ((errorField != null) && (errorField.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.errorField = null;
        }

        ivldInventoryWdActualMasCacheModel.amountOnOrder = getAmountOnOrder();

        String amountOnOrder = ivldInventoryWdActualMasCacheModel.amountOnOrder;

        if ((amountOnOrder != null) && (amountOnOrder.length() == 0)) {
            ivldInventoryWdActualMasCacheModel.amountOnOrder = null;
        }

        return ivldInventoryWdActualMasCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(63);

        sb.append("{quantityOnOrder=");
        sb.append(getQuantityOnOrder());
        sb.append(", week=");
        sb.append(getWeek());
        sb.append(", amountOnHand=");
        sb.append(getAmountOnHand());
        sb.append(", year=");
        sb.append(getYear());
        sb.append(", itemId=");
        sb.append(getItemId());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", organizationKey=");
        sb.append(getOrganizationKey());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", ivldInventoryWdActualMasSid=");
        sb.append(getIvldInventoryWdActualMasSid());
        sb.append(", day=");
        sb.append(getDay());
        sb.append(", addChgDelIndicator=");
        sb.append(getAddChgDelIndicator());
        sb.append(", unitsOnHand=");
        sb.append(getUnitsOnHand());
        sb.append(", amountReceived=");
        sb.append(getAmountReceived());
        sb.append(", itemIdentifier=");
        sb.append(getItemIdentifier());
        sb.append(", errorCode=");
        sb.append(getErrorCode());
        sb.append(", intfInsertedDate=");
        sb.append(getIntfInsertedDate());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", month=");
        sb.append(getMonth());
        sb.append(", reprocessedFlag=");
        sb.append(getReprocessedFlag());
        sb.append(", amountWithdrawn=");
        sb.append(getAmountWithdrawn());
        sb.append(", inventoryWdActualMasIntfId=");
        sb.append(getInventoryWdActualMasIntfId());
        sb.append(", quantityReceived=");
        sb.append(getQuantityReceived());
        sb.append(", unitsWithdrawn=");
        sb.append(getUnitsWithdrawn());
        sb.append(", reasonForFailure=");
        sb.append(getReasonForFailure());
        sb.append(", country=");
        sb.append(getCountry());
        sb.append(", itemIdentifierCodeQualifier=");
        sb.append(getItemIdentifierCodeQualifier());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", errorField=");
        sb.append(getErrorField());
        sb.append(", amountOnOrder=");
        sb.append(getAmountOnOrder());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(97);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.IvldInventoryWdActualMas");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>quantityOnOrder</column-name><column-value><![CDATA[");
        sb.append(getQuantityOnOrder());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>week</column-name><column-value><![CDATA[");
        sb.append(getWeek());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>amountOnHand</column-name><column-value><![CDATA[");
        sb.append(getAmountOnHand());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>year</column-name><column-value><![CDATA[");
        sb.append(getYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemId</column-name><column-value><![CDATA[");
        sb.append(getItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationKey</column-name><column-value><![CDATA[");
        sb.append(getOrganizationKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ivldInventoryWdActualMasSid</column-name><column-value><![CDATA[");
        sb.append(getIvldInventoryWdActualMasSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>day</column-name><column-value><![CDATA[");
        sb.append(getDay());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>addChgDelIndicator</column-name><column-value><![CDATA[");
        sb.append(getAddChgDelIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>unitsOnHand</column-name><column-value><![CDATA[");
        sb.append(getUnitsOnHand());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>amountReceived</column-name><column-value><![CDATA[");
        sb.append(getAmountReceived());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemIdentifier</column-name><column-value><![CDATA[");
        sb.append(getItemIdentifier());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>errorCode</column-name><column-value><![CDATA[");
        sb.append(getErrorCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>intfInsertedDate</column-name><column-value><![CDATA[");
        sb.append(getIntfInsertedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>month</column-name><column-value><![CDATA[");
        sb.append(getMonth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reprocessedFlag</column-name><column-value><![CDATA[");
        sb.append(getReprocessedFlag());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>amountWithdrawn</column-name><column-value><![CDATA[");
        sb.append(getAmountWithdrawn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inventoryWdActualMasIntfId</column-name><column-value><![CDATA[");
        sb.append(getInventoryWdActualMasIntfId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>quantityReceived</column-name><column-value><![CDATA[");
        sb.append(getQuantityReceived());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>unitsWithdrawn</column-name><column-value><![CDATA[");
        sb.append(getUnitsWithdrawn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reasonForFailure</column-name><column-value><![CDATA[");
        sb.append(getReasonForFailure());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>country</column-name><column-value><![CDATA[");
        sb.append(getCountry());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemIdentifierCodeQualifier</column-name><column-value><![CDATA[");
        sb.append(getItemIdentifierCodeQualifier());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>errorField</column-name><column-value><![CDATA[");
        sb.append(getErrorField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>amountOnOrder</column-name><column-value><![CDATA[");
        sb.append(getAmountOnOrder());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
