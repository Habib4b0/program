package com.stpl.app.model.impl;

import com.stpl.app.model.GlCostCenterMaster;
import com.stpl.app.model.GlCostCenterMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GlCostCenterMaster service. Represents a row in the &quot;GL_COST_CENTER_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.GlCostCenterMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GlCostCenterMasterImpl}.
 * </p>
 *
 * @author
 * @see GlCostCenterMasterImpl
 * @see com.stpl.app.model.GlCostCenterMaster
 * @see com.stpl.app.model.GlCostCenterMasterModel
 * @generated
 */
public class GlCostCenterMasterModelImpl extends BaseModelImpl<GlCostCenterMaster>
    implements GlCostCenterMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a gl cost center master model instance should use the {@link com.stpl.app.model.GlCostCenterMaster} interface instead.
     */
    public static final String TABLE_NAME = "GL_COST_CENTER_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "CREATED_BY", Types.INTEGER },
            { "MODIFIED_BY", Types.INTEGER },
            { "UPLOAD_DATE", Types.TIMESTAMP },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "GL_COST_CENTER_MASTER_SID", Types.INTEGER },
            { "BATCH_ID", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "NDC8", Types.VARCHAR },
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "COMPANY_CODE", Types.VARCHAR },
            { "SOURCE", Types.VARCHAR },
            { "COMPANY_COST_CENTER", Types.VARCHAR },
            { "INBOUND_STATUS", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table GL_COST_CENTER_MASTER (CREATED_BY INTEGER,MODIFIED_BY INTEGER,UPLOAD_DATE DATE null,CREATED_DATE DATE null,GL_COST_CENTER_MASTER_SID INTEGER not null primary key IDENTITY,BATCH_ID VARCHAR(75) null,MODIFIED_DATE DATE null,NDC8 VARCHAR(75) null,RECORD_LOCK_STATUS BOOLEAN,COMPANY_CODE VARCHAR(75) null,SOURCE VARCHAR(75) null,COMPANY_COST_CENTER VARCHAR(75) null,INBOUND_STATUS VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table GL_COST_CENTER_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY glCostCenterMaster.glCostCenterMasterSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY GL_COST_CENTER_MASTER.GL_COST_CENTER_MASTER_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.GlCostCenterMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.GlCostCenterMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stpl.app.model.GlCostCenterMaster"),
            true);
    public static long COMPANYCODE_COLUMN_BITMASK = 1L;
    public static long COMPANYCOSTCENTER_COLUMN_BITMASK = 2L;
    public static long NDC8_COLUMN_BITMASK = 4L;
    public static long GLCOSTCENTERMASTERSID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.GlCostCenterMaster"));
    private static ClassLoader _classLoader = GlCostCenterMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            GlCostCenterMaster.class
        };
    private int _createdBy;
    private int _modifiedBy;
    private Date _uploadDate;
    private Date _createdDate;
    private int _glCostCenterMasterSid;
    private String _batchId;
    private Date _modifiedDate;
    private String _ndc8;
    private String _originalNdc8;
    private boolean _recordLockStatus;
    private String _companyCode;
    private String _originalCompanyCode;
    private String _source;
    private String _companyCostCenter;
    private String _originalCompanyCostCenter;
    private String _inboundStatus;
    private long _columnBitmask;
    private GlCostCenterMaster _escapedModel;

    public GlCostCenterMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _glCostCenterMasterSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setGlCostCenterMasterSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _glCostCenterMasterSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return GlCostCenterMaster.class;
    }

    @Override
    public String getModelClassName() {
        return GlCostCenterMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("createdBy", getCreatedBy());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("uploadDate", getUploadDate());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("glCostCenterMasterSid", getGlCostCenterMasterSid());
        attributes.put("batchId", getBatchId());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("ndc8", getNdc8());
        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("companyCode", getCompanyCode());
        attributes.put("source", getSource());
        attributes.put("companyCostCenter", getCompanyCostCenter());
        attributes.put("inboundStatus", getInboundStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        Date uploadDate = (Date) attributes.get("uploadDate");

        if (uploadDate != null) {
            setUploadDate(uploadDate);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Integer glCostCenterMasterSid = (Integer) attributes.get(
                "glCostCenterMasterSid");

        if (glCostCenterMasterSid != null) {
            setGlCostCenterMasterSid(glCostCenterMasterSid);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String ndc8 = (String) attributes.get("ndc8");

        if (ndc8 != null) {
            setNdc8(ndc8);
        }

        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        String companyCode = (String) attributes.get("companyCode");

        if (companyCode != null) {
            setCompanyCode(companyCode);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String companyCostCenter = (String) attributes.get("companyCostCenter");

        if (companyCostCenter != null) {
            setCompanyCostCenter(companyCostCenter);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public Date getUploadDate() {
        return _uploadDate;
    }

    @Override
    public void setUploadDate(Date uploadDate) {
        _uploadDate = uploadDate;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public int getGlCostCenterMasterSid() {
        return _glCostCenterMasterSid;
    }

    @Override
    public void setGlCostCenterMasterSid(int glCostCenterMasterSid) {
        _glCostCenterMasterSid = glCostCenterMasterSid;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getNdc8() {
        if (_ndc8 == null) {
            return StringPool.BLANK;
        } else {
            return _ndc8;
        }
    }

    @Override
    public void setNdc8(String ndc8) {
        _columnBitmask |= NDC8_COLUMN_BITMASK;

        if (_originalNdc8 == null) {
            _originalNdc8 = _ndc8;
        }

        _ndc8 = ndc8;
    }

    public String getOriginalNdc8() {
        return GetterUtil.getString(_originalNdc8);
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public String getCompanyCode() {
        if (_companyCode == null) {
            return StringPool.BLANK;
        } else {
            return _companyCode;
        }
    }

    @Override
    public void setCompanyCode(String companyCode) {
        _columnBitmask |= COMPANYCODE_COLUMN_BITMASK;

        if (_originalCompanyCode == null) {
            _originalCompanyCode = _companyCode;
        }

        _companyCode = companyCode;
    }

    public String getOriginalCompanyCode() {
        return GetterUtil.getString(_originalCompanyCode);
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getCompanyCostCenter() {
        if (_companyCostCenter == null) {
            return StringPool.BLANK;
        } else {
            return _companyCostCenter;
        }
    }

    @Override
    public void setCompanyCostCenter(String companyCostCenter) {
        _columnBitmask |= COMPANYCOSTCENTER_COLUMN_BITMASK;

        if (_originalCompanyCostCenter == null) {
            _originalCompanyCostCenter = _companyCostCenter;
        }

        _companyCostCenter = companyCostCenter;
    }

    public String getOriginalCompanyCostCenter() {
        return GetterUtil.getString(_originalCompanyCostCenter);
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public GlCostCenterMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (GlCostCenterMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        GlCostCenterMasterImpl glCostCenterMasterImpl = new GlCostCenterMasterImpl();

        glCostCenterMasterImpl.setCreatedBy(getCreatedBy());
        glCostCenterMasterImpl.setModifiedBy(getModifiedBy());
        glCostCenterMasterImpl.setUploadDate(getUploadDate());
        glCostCenterMasterImpl.setCreatedDate(getCreatedDate());
        glCostCenterMasterImpl.setGlCostCenterMasterSid(getGlCostCenterMasterSid());
        glCostCenterMasterImpl.setBatchId(getBatchId());
        glCostCenterMasterImpl.setModifiedDate(getModifiedDate());
        glCostCenterMasterImpl.setNdc8(getNdc8());
        glCostCenterMasterImpl.setRecordLockStatus(getRecordLockStatus());
        glCostCenterMasterImpl.setCompanyCode(getCompanyCode());
        glCostCenterMasterImpl.setSource(getSource());
        glCostCenterMasterImpl.setCompanyCostCenter(getCompanyCostCenter());
        glCostCenterMasterImpl.setInboundStatus(getInboundStatus());

        glCostCenterMasterImpl.resetOriginalValues();

        return glCostCenterMasterImpl;
    }

    @Override
    public int compareTo(GlCostCenterMaster glCostCenterMaster) {
        int primaryKey = glCostCenterMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof GlCostCenterMaster)) {
            return false;
        }

        GlCostCenterMaster glCostCenterMaster = (GlCostCenterMaster) obj;

        int primaryKey = glCostCenterMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        GlCostCenterMasterModelImpl glCostCenterMasterModelImpl = this;

        glCostCenterMasterModelImpl._originalNdc8 = glCostCenterMasterModelImpl._ndc8;

        glCostCenterMasterModelImpl._originalCompanyCode = glCostCenterMasterModelImpl._companyCode;

        glCostCenterMasterModelImpl._originalCompanyCostCenter = glCostCenterMasterModelImpl._companyCostCenter;

        glCostCenterMasterModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<GlCostCenterMaster> toCacheModel() {
        GlCostCenterMasterCacheModel glCostCenterMasterCacheModel = new GlCostCenterMasterCacheModel();

        glCostCenterMasterCacheModel.createdBy = getCreatedBy();

        glCostCenterMasterCacheModel.modifiedBy = getModifiedBy();

        Date uploadDate = getUploadDate();

        if (uploadDate != null) {
            glCostCenterMasterCacheModel.uploadDate = uploadDate.getTime();
        } else {
            glCostCenterMasterCacheModel.uploadDate = Long.MIN_VALUE;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            glCostCenterMasterCacheModel.createdDate = createdDate.getTime();
        } else {
            glCostCenterMasterCacheModel.createdDate = Long.MIN_VALUE;
        }

        glCostCenterMasterCacheModel.glCostCenterMasterSid = getGlCostCenterMasterSid();

        glCostCenterMasterCacheModel.batchId = getBatchId();

        String batchId = glCostCenterMasterCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            glCostCenterMasterCacheModel.batchId = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            glCostCenterMasterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            glCostCenterMasterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        glCostCenterMasterCacheModel.ndc8 = getNdc8();

        String ndc8 = glCostCenterMasterCacheModel.ndc8;

        if ((ndc8 != null) && (ndc8.length() == 0)) {
            glCostCenterMasterCacheModel.ndc8 = null;
        }

        glCostCenterMasterCacheModel.recordLockStatus = getRecordLockStatus();

        glCostCenterMasterCacheModel.companyCode = getCompanyCode();

        String companyCode = glCostCenterMasterCacheModel.companyCode;

        if ((companyCode != null) && (companyCode.length() == 0)) {
            glCostCenterMasterCacheModel.companyCode = null;
        }

        glCostCenterMasterCacheModel.source = getSource();

        String source = glCostCenterMasterCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            glCostCenterMasterCacheModel.source = null;
        }

        glCostCenterMasterCacheModel.companyCostCenter = getCompanyCostCenter();

        String companyCostCenter = glCostCenterMasterCacheModel.companyCostCenter;

        if ((companyCostCenter != null) && (companyCostCenter.length() == 0)) {
            glCostCenterMasterCacheModel.companyCostCenter = null;
        }

        glCostCenterMasterCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = glCostCenterMasterCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            glCostCenterMasterCacheModel.inboundStatus = null;
        }

        return glCostCenterMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{createdBy=");
        sb.append(getCreatedBy());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", uploadDate=");
        sb.append(getUploadDate());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", glCostCenterMasterSid=");
        sb.append(getGlCostCenterMasterSid());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", ndc8=");
        sb.append(getNdc8());
        sb.append(", recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", companyCode=");
        sb.append(getCompanyCode());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", companyCostCenter=");
        sb.append(getCompanyCostCenter());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.GlCostCenterMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>uploadDate</column-name><column-value><![CDATA[");
        sb.append(getUploadDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>glCostCenterMasterSid</column-name><column-value><![CDATA[");
        sb.append(getGlCostCenterMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ndc8</column-name><column-value><![CDATA[");
        sb.append(getNdc8());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyCode</column-name><column-value><![CDATA[");
        sb.append(getCompanyCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyCostCenter</column-name><column-value><![CDATA[");
        sb.append(getCompanyCostCenter());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
