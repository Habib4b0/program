package com.stpl.app.model.impl;

import com.stpl.app.model.InventoryWdProjMas;
import com.stpl.app.model.InventoryWdProjMasModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the InventoryWdProjMas service. Represents a row in the &quot;INVENTORY_WD_PROJ_MAS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.InventoryWdProjMasModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InventoryWdProjMasImpl}.
 * </p>
 *
 * @author
 * @see InventoryWdProjMasImpl
 * @see com.stpl.app.model.InventoryWdProjMas
 * @see com.stpl.app.model.InventoryWdProjMasModel
 * @generated
 */
public class InventoryWdProjMasModelImpl extends BaseModelImpl<InventoryWdProjMas>
    implements InventoryWdProjMasModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a inventory wd proj mas model instance should use the {@link com.stpl.app.model.InventoryWdProjMas} interface instead.
     */
    public static final String TABLE_NAME = "INVENTORY_WD_PROJ_MAS";
    public static final Object[][] TABLE_COLUMNS = {
            { "WEEK", Types.VARCHAR },
            { "ITEM_MASTER_SID", Types.INTEGER },
            { "UNITS_WITHDRAWN", Types.VARCHAR },
            { "COUNTRY", Types.VARCHAR },
            { "YEAR", Types.VARCHAR },
            { "ITEM_ID", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "ORGANIZATION_KEY", Types.VARCHAR },
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "ITEM_IDENTIFIER_CODE_QUALIFIER", Types.VARCHAR },
            { "SOURCE", Types.VARCHAR },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "CREATED_BY", Types.VARCHAR },
            { "INVENTORY_WD_PROJ_MAS_SID", Types.INTEGER },
            { "DAY", Types.VARCHAR },
            { "FORECAST_VER", Types.VARCHAR },
            { "BATCH_ID", Types.VARCHAR },
            { "ITEM_IDENTIFIER", Types.VARCHAR },
            { "INBOUND_STATUS", Types.VARCHAR },
            { "MODIFIED_BY", Types.VARCHAR },
            { "MONTH", Types.VARCHAR },
            { "FORECAST_NAME", Types.VARCHAR },
            { "AMOUNT_WITHDRAWN", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table INVENTORY_WD_PROJ_MAS (WEEK VARCHAR(75) null,ITEM_MASTER_SID INTEGER,UNITS_WITHDRAWN VARCHAR(75) null,COUNTRY VARCHAR(75) null,YEAR VARCHAR(75) null,ITEM_ID VARCHAR(75) null,MODIFIED_DATE DATE null,ORGANIZATION_KEY VARCHAR(75) null,RECORD_LOCK_STATUS BOOLEAN,ITEM_IDENTIFIER_CODE_QUALIFIER VARCHAR(75) null,SOURCE VARCHAR(75) null,CREATED_DATE DATE null,CREATED_BY VARCHAR(75) null,INVENTORY_WD_PROJ_MAS_SID INTEGER not null primary key IDENTITY,DAY VARCHAR(75) null,FORECAST_VER VARCHAR(75) null,BATCH_ID VARCHAR(75) null,ITEM_IDENTIFIER VARCHAR(75) null,INBOUND_STATUS VARCHAR(75) null,MODIFIED_BY VARCHAR(75) null,MONTH VARCHAR(75) null,FORECAST_NAME VARCHAR(75) null,AMOUNT_WITHDRAWN VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table INVENTORY_WD_PROJ_MAS";
    public static final String ORDER_BY_JPQL = " ORDER BY inventoryWdProjMas.inventoryWdProjMasSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY INVENTORY_WD_PROJ_MAS.INVENTORY_WD_PROJ_MAS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.InventoryWdProjMas"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.InventoryWdProjMas"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.InventoryWdProjMas"));
    private static ClassLoader _classLoader = InventoryWdProjMas.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            InventoryWdProjMas.class
        };
    private String _week;
    private int _itemMasterSid;
    private String _unitsWithdrawn;
    private String _country;
    private String _year;
    private String _itemId;
    private Date _modifiedDate;
    private String _organizationKey;
    private boolean _recordLockStatus;
    private String _itemIdentifierCodeQualifier;
    private String _source;
    private Date _createdDate;
    private String _createdBy;
    private int _inventoryWdProjMasSid;
    private String _day;
    private String _forecastVer;
    private String _batchId;
    private String _itemIdentifier;
    private String _inboundStatus;
    private String _modifiedBy;
    private String _month;
    private String _forecastName;
    private String _amountWithdrawn;
    private InventoryWdProjMas _escapedModel;

    public InventoryWdProjMasModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _inventoryWdProjMasSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setInventoryWdProjMasSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _inventoryWdProjMasSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return InventoryWdProjMas.class;
    }

    @Override
    public String getModelClassName() {
        return InventoryWdProjMas.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("week", getWeek());
        attributes.put("itemMasterSid", getItemMasterSid());
        attributes.put("unitsWithdrawn", getUnitsWithdrawn());
        attributes.put("country", getCountry());
        attributes.put("year", getYear());
        attributes.put("itemId", getItemId());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("organizationKey", getOrganizationKey());
        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("itemIdentifierCodeQualifier",
            getItemIdentifierCodeQualifier());
        attributes.put("source", getSource());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("inventoryWdProjMasSid", getInventoryWdProjMasSid());
        attributes.put("day", getDay());
        attributes.put("forecastVer", getForecastVer());
        attributes.put("batchId", getBatchId());
        attributes.put("itemIdentifier", getItemIdentifier());
        attributes.put("inboundStatus", getInboundStatus());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("month", getMonth());
        attributes.put("forecastName", getForecastName());
        attributes.put("amountWithdrawn", getAmountWithdrawn());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String week = (String) attributes.get("week");

        if (week != null) {
            setWeek(week);
        }

        Integer itemMasterSid = (Integer) attributes.get("itemMasterSid");

        if (itemMasterSid != null) {
            setItemMasterSid(itemMasterSid);
        }

        String unitsWithdrawn = (String) attributes.get("unitsWithdrawn");

        if (unitsWithdrawn != null) {
            setUnitsWithdrawn(unitsWithdrawn);
        }

        String country = (String) attributes.get("country");

        if (country != null) {
            setCountry(country);
        }

        String year = (String) attributes.get("year");

        if (year != null) {
            setYear(year);
        }

        String itemId = (String) attributes.get("itemId");

        if (itemId != null) {
            setItemId(itemId);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String organizationKey = (String) attributes.get("organizationKey");

        if (organizationKey != null) {
            setOrganizationKey(organizationKey);
        }

        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        String itemIdentifierCodeQualifier = (String) attributes.get(
                "itemIdentifierCodeQualifier");

        if (itemIdentifierCodeQualifier != null) {
            setItemIdentifierCodeQualifier(itemIdentifierCodeQualifier);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String createdBy = (String) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Integer inventoryWdProjMasSid = (Integer) attributes.get(
                "inventoryWdProjMasSid");

        if (inventoryWdProjMasSid != null) {
            setInventoryWdProjMasSid(inventoryWdProjMasSid);
        }

        String day = (String) attributes.get("day");

        if (day != null) {
            setDay(day);
        }

        String forecastVer = (String) attributes.get("forecastVer");

        if (forecastVer != null) {
            setForecastVer(forecastVer);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        String itemIdentifier = (String) attributes.get("itemIdentifier");

        if (itemIdentifier != null) {
            setItemIdentifier(itemIdentifier);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }

        String modifiedBy = (String) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String month = (String) attributes.get("month");

        if (month != null) {
            setMonth(month);
        }

        String forecastName = (String) attributes.get("forecastName");

        if (forecastName != null) {
            setForecastName(forecastName);
        }

        String amountWithdrawn = (String) attributes.get("amountWithdrawn");

        if (amountWithdrawn != null) {
            setAmountWithdrawn(amountWithdrawn);
        }
    }

    @Override
    public String getWeek() {
        if (_week == null) {
            return StringPool.BLANK;
        } else {
            return _week;
        }
    }

    @Override
    public void setWeek(String week) {
        _week = week;
    }

    @Override
    public int getItemMasterSid() {
        return _itemMasterSid;
    }

    @Override
    public void setItemMasterSid(int itemMasterSid) {
        _itemMasterSid = itemMasterSid;
    }

    @Override
    public String getUnitsWithdrawn() {
        if (_unitsWithdrawn == null) {
            return StringPool.BLANK;
        } else {
            return _unitsWithdrawn;
        }
    }

    @Override
    public void setUnitsWithdrawn(String unitsWithdrawn) {
        _unitsWithdrawn = unitsWithdrawn;
    }

    @Override
    public String getCountry() {
        if (_country == null) {
            return StringPool.BLANK;
        } else {
            return _country;
        }
    }

    @Override
    public void setCountry(String country) {
        _country = country;
    }

    @Override
    public String getYear() {
        if (_year == null) {
            return StringPool.BLANK;
        } else {
            return _year;
        }
    }

    @Override
    public void setYear(String year) {
        _year = year;
    }

    @Override
    public String getItemId() {
        if (_itemId == null) {
            return StringPool.BLANK;
        } else {
            return _itemId;
        }
    }

    @Override
    public void setItemId(String itemId) {
        _itemId = itemId;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getOrganizationKey() {
        if (_organizationKey == null) {
            return StringPool.BLANK;
        } else {
            return _organizationKey;
        }
    }

    @Override
    public void setOrganizationKey(String organizationKey) {
        _organizationKey = organizationKey;
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public String getItemIdentifierCodeQualifier() {
        if (_itemIdentifierCodeQualifier == null) {
            return StringPool.BLANK;
        } else {
            return _itemIdentifierCodeQualifier;
        }
    }

    @Override
    public void setItemIdentifierCodeQualifier(
        String itemIdentifierCodeQualifier) {
        _itemIdentifierCodeQualifier = itemIdentifierCodeQualifier;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getCreatedBy() {
        if (_createdBy == null) {
            return StringPool.BLANK;
        } else {
            return _createdBy;
        }
    }

    @Override
    public void setCreatedBy(String createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public int getInventoryWdProjMasSid() {
        return _inventoryWdProjMasSid;
    }

    @Override
    public void setInventoryWdProjMasSid(int inventoryWdProjMasSid) {
        _inventoryWdProjMasSid = inventoryWdProjMasSid;
    }

    @Override
    public String getDay() {
        if (_day == null) {
            return StringPool.BLANK;
        } else {
            return _day;
        }
    }

    @Override
    public void setDay(String day) {
        _day = day;
    }

    @Override
    public String getForecastVer() {
        if (_forecastVer == null) {
            return StringPool.BLANK;
        } else {
            return _forecastVer;
        }
    }

    @Override
    public void setForecastVer(String forecastVer) {
        _forecastVer = forecastVer;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public String getItemIdentifier() {
        if (_itemIdentifier == null) {
            return StringPool.BLANK;
        } else {
            return _itemIdentifier;
        }
    }

    @Override
    public void setItemIdentifier(String itemIdentifier) {
        _itemIdentifier = itemIdentifier;
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    @Override
    public String getModifiedBy() {
        if (_modifiedBy == null) {
            return StringPool.BLANK;
        } else {
            return _modifiedBy;
        }
    }

    @Override
    public void setModifiedBy(String modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getMonth() {
        if (_month == null) {
            return StringPool.BLANK;
        } else {
            return _month;
        }
    }

    @Override
    public void setMonth(String month) {
        _month = month;
    }

    @Override
    public String getForecastName() {
        if (_forecastName == null) {
            return StringPool.BLANK;
        } else {
            return _forecastName;
        }
    }

    @Override
    public void setForecastName(String forecastName) {
        _forecastName = forecastName;
    }

    @Override
    public String getAmountWithdrawn() {
        if (_amountWithdrawn == null) {
            return StringPool.BLANK;
        } else {
            return _amountWithdrawn;
        }
    }

    @Override
    public void setAmountWithdrawn(String amountWithdrawn) {
        _amountWithdrawn = amountWithdrawn;
    }

    @Override
    public InventoryWdProjMas toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (InventoryWdProjMas) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        InventoryWdProjMasImpl inventoryWdProjMasImpl = new InventoryWdProjMasImpl();

        inventoryWdProjMasImpl.setWeek(getWeek());
        inventoryWdProjMasImpl.setItemMasterSid(getItemMasterSid());
        inventoryWdProjMasImpl.setUnitsWithdrawn(getUnitsWithdrawn());
        inventoryWdProjMasImpl.setCountry(getCountry());
        inventoryWdProjMasImpl.setYear(getYear());
        inventoryWdProjMasImpl.setItemId(getItemId());
        inventoryWdProjMasImpl.setModifiedDate(getModifiedDate());
        inventoryWdProjMasImpl.setOrganizationKey(getOrganizationKey());
        inventoryWdProjMasImpl.setRecordLockStatus(getRecordLockStatus());
        inventoryWdProjMasImpl.setItemIdentifierCodeQualifier(getItemIdentifierCodeQualifier());
        inventoryWdProjMasImpl.setSource(getSource());
        inventoryWdProjMasImpl.setCreatedDate(getCreatedDate());
        inventoryWdProjMasImpl.setCreatedBy(getCreatedBy());
        inventoryWdProjMasImpl.setInventoryWdProjMasSid(getInventoryWdProjMasSid());
        inventoryWdProjMasImpl.setDay(getDay());
        inventoryWdProjMasImpl.setForecastVer(getForecastVer());
        inventoryWdProjMasImpl.setBatchId(getBatchId());
        inventoryWdProjMasImpl.setItemIdentifier(getItemIdentifier());
        inventoryWdProjMasImpl.setInboundStatus(getInboundStatus());
        inventoryWdProjMasImpl.setModifiedBy(getModifiedBy());
        inventoryWdProjMasImpl.setMonth(getMonth());
        inventoryWdProjMasImpl.setForecastName(getForecastName());
        inventoryWdProjMasImpl.setAmountWithdrawn(getAmountWithdrawn());

        inventoryWdProjMasImpl.resetOriginalValues();

        return inventoryWdProjMasImpl;
    }

    @Override
    public int compareTo(InventoryWdProjMas inventoryWdProjMas) {
        int primaryKey = inventoryWdProjMas.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof InventoryWdProjMas)) {
            return false;
        }

        InventoryWdProjMas inventoryWdProjMas = (InventoryWdProjMas) obj;

        int primaryKey = inventoryWdProjMas.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<InventoryWdProjMas> toCacheModel() {
        InventoryWdProjMasCacheModel inventoryWdProjMasCacheModel = new InventoryWdProjMasCacheModel();

        inventoryWdProjMasCacheModel.week = getWeek();

        String week = inventoryWdProjMasCacheModel.week;

        if ((week != null) && (week.length() == 0)) {
            inventoryWdProjMasCacheModel.week = null;
        }

        inventoryWdProjMasCacheModel.itemMasterSid = getItemMasterSid();

        inventoryWdProjMasCacheModel.unitsWithdrawn = getUnitsWithdrawn();

        String unitsWithdrawn = inventoryWdProjMasCacheModel.unitsWithdrawn;

        if ((unitsWithdrawn != null) && (unitsWithdrawn.length() == 0)) {
            inventoryWdProjMasCacheModel.unitsWithdrawn = null;
        }

        inventoryWdProjMasCacheModel.country = getCountry();

        String country = inventoryWdProjMasCacheModel.country;

        if ((country != null) && (country.length() == 0)) {
            inventoryWdProjMasCacheModel.country = null;
        }

        inventoryWdProjMasCacheModel.year = getYear();

        String year = inventoryWdProjMasCacheModel.year;

        if ((year != null) && (year.length() == 0)) {
            inventoryWdProjMasCacheModel.year = null;
        }

        inventoryWdProjMasCacheModel.itemId = getItemId();

        String itemId = inventoryWdProjMasCacheModel.itemId;

        if ((itemId != null) && (itemId.length() == 0)) {
            inventoryWdProjMasCacheModel.itemId = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            inventoryWdProjMasCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            inventoryWdProjMasCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        inventoryWdProjMasCacheModel.organizationKey = getOrganizationKey();

        String organizationKey = inventoryWdProjMasCacheModel.organizationKey;

        if ((organizationKey != null) && (organizationKey.length() == 0)) {
            inventoryWdProjMasCacheModel.organizationKey = null;
        }

        inventoryWdProjMasCacheModel.recordLockStatus = getRecordLockStatus();

        inventoryWdProjMasCacheModel.itemIdentifierCodeQualifier = getItemIdentifierCodeQualifier();

        String itemIdentifierCodeQualifier = inventoryWdProjMasCacheModel.itemIdentifierCodeQualifier;

        if ((itemIdentifierCodeQualifier != null) &&
                (itemIdentifierCodeQualifier.length() == 0)) {
            inventoryWdProjMasCacheModel.itemIdentifierCodeQualifier = null;
        }

        inventoryWdProjMasCacheModel.source = getSource();

        String source = inventoryWdProjMasCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            inventoryWdProjMasCacheModel.source = null;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            inventoryWdProjMasCacheModel.createdDate = createdDate.getTime();
        } else {
            inventoryWdProjMasCacheModel.createdDate = Long.MIN_VALUE;
        }

        inventoryWdProjMasCacheModel.createdBy = getCreatedBy();

        String createdBy = inventoryWdProjMasCacheModel.createdBy;

        if ((createdBy != null) && (createdBy.length() == 0)) {
            inventoryWdProjMasCacheModel.createdBy = null;
        }

        inventoryWdProjMasCacheModel.inventoryWdProjMasSid = getInventoryWdProjMasSid();

        inventoryWdProjMasCacheModel.day = getDay();

        String day = inventoryWdProjMasCacheModel.day;

        if ((day != null) && (day.length() == 0)) {
            inventoryWdProjMasCacheModel.day = null;
        }

        inventoryWdProjMasCacheModel.forecastVer = getForecastVer();

        String forecastVer = inventoryWdProjMasCacheModel.forecastVer;

        if ((forecastVer != null) && (forecastVer.length() == 0)) {
            inventoryWdProjMasCacheModel.forecastVer = null;
        }

        inventoryWdProjMasCacheModel.batchId = getBatchId();

        String batchId = inventoryWdProjMasCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            inventoryWdProjMasCacheModel.batchId = null;
        }

        inventoryWdProjMasCacheModel.itemIdentifier = getItemIdentifier();

        String itemIdentifier = inventoryWdProjMasCacheModel.itemIdentifier;

        if ((itemIdentifier != null) && (itemIdentifier.length() == 0)) {
            inventoryWdProjMasCacheModel.itemIdentifier = null;
        }

        inventoryWdProjMasCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = inventoryWdProjMasCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            inventoryWdProjMasCacheModel.inboundStatus = null;
        }

        inventoryWdProjMasCacheModel.modifiedBy = getModifiedBy();

        String modifiedBy = inventoryWdProjMasCacheModel.modifiedBy;

        if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
            inventoryWdProjMasCacheModel.modifiedBy = null;
        }

        inventoryWdProjMasCacheModel.month = getMonth();

        String month = inventoryWdProjMasCacheModel.month;

        if ((month != null) && (month.length() == 0)) {
            inventoryWdProjMasCacheModel.month = null;
        }

        inventoryWdProjMasCacheModel.forecastName = getForecastName();

        String forecastName = inventoryWdProjMasCacheModel.forecastName;

        if ((forecastName != null) && (forecastName.length() == 0)) {
            inventoryWdProjMasCacheModel.forecastName = null;
        }

        inventoryWdProjMasCacheModel.amountWithdrawn = getAmountWithdrawn();

        String amountWithdrawn = inventoryWdProjMasCacheModel.amountWithdrawn;

        if ((amountWithdrawn != null) && (amountWithdrawn.length() == 0)) {
            inventoryWdProjMasCacheModel.amountWithdrawn = null;
        }

        return inventoryWdProjMasCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(47);

        sb.append("{week=");
        sb.append(getWeek());
        sb.append(", itemMasterSid=");
        sb.append(getItemMasterSid());
        sb.append(", unitsWithdrawn=");
        sb.append(getUnitsWithdrawn());
        sb.append(", country=");
        sb.append(getCountry());
        sb.append(", year=");
        sb.append(getYear());
        sb.append(", itemId=");
        sb.append(getItemId());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", organizationKey=");
        sb.append(getOrganizationKey());
        sb.append(", recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", itemIdentifierCodeQualifier=");
        sb.append(getItemIdentifierCodeQualifier());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", inventoryWdProjMasSid=");
        sb.append(getInventoryWdProjMasSid());
        sb.append(", day=");
        sb.append(getDay());
        sb.append(", forecastVer=");
        sb.append(getForecastVer());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", itemIdentifier=");
        sb.append(getItemIdentifier());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", month=");
        sb.append(getMonth());
        sb.append(", forecastName=");
        sb.append(getForecastName());
        sb.append(", amountWithdrawn=");
        sb.append(getAmountWithdrawn());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(73);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.InventoryWdProjMas");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>week</column-name><column-value><![CDATA[");
        sb.append(getWeek());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
        sb.append(getItemMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>unitsWithdrawn</column-name><column-value><![CDATA[");
        sb.append(getUnitsWithdrawn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>country</column-name><column-value><![CDATA[");
        sb.append(getCountry());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>year</column-name><column-value><![CDATA[");
        sb.append(getYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemId</column-name><column-value><![CDATA[");
        sb.append(getItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationKey</column-name><column-value><![CDATA[");
        sb.append(getOrganizationKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemIdentifierCodeQualifier</column-name><column-value><![CDATA[");
        sb.append(getItemIdentifierCodeQualifier());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inventoryWdProjMasSid</column-name><column-value><![CDATA[");
        sb.append(getInventoryWdProjMasSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>day</column-name><column-value><![CDATA[");
        sb.append(getDay());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastVer</column-name><column-value><![CDATA[");
        sb.append(getForecastVer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemIdentifier</column-name><column-value><![CDATA[");
        sb.append(getItemIdentifier());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>month</column-name><column-value><![CDATA[");
        sb.append(getMonth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastName</column-name><column-value><![CDATA[");
        sb.append(getForecastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>amountWithdrawn</column-name><column-value><![CDATA[");
        sb.append(getAmountWithdrawn());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
