<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->


<sql>
    
    <entity id="non-mandated-sales-query-new">
        <query>
            <![CDATA[
             IF OBJECT_ID('TEMPDB..#ST_NM_SALES_PROJECTION_MASTER') IS NOT NULL
                             DROP TABLE #ST_NM_SALES_PROJECTION_MASTER

                SELECT  
         CASE 
                  WHEN COUNT(DISTINCT MSPM.CALCULATION_PERIODS) > 1 THEN '-' 
                  ELSE MAX(MSPM.CALCULATION_PERIODS) 
         END CALCULATION_PERIODS, 
         CASE 
                  WHEN COUNT(DISTINCT MSPM.METHODOLOGY) > 1 THEN '-' 
                  ELSE MAX(MSPM.METHODOLOGY) 
         END AS METHODOLOGY, 
         SHN.HIERARCHY_NO, 
         COUNT(*) AS RCOUNT, 
         MIN( 
         CASE (CHECK_RECORD) 
                  WHEN 1 THEN 1 
                  ELSE 0 
         END) AS CHECKREC, 
         SUM( 
         CASE (MSPM.CHECK_RECORD) 
                  WHEN 1 THEN 0 
                  ELSE 1 
         END)                        AS UNCHECK_COUNT, 
         COUNT(MSPM.CCP_DETAILS_SID) AS CCPCOUNT, 
         MIN(MSPM.USER_GROUP)        AS USER_GROUP, 
         @CCP_SALES_INCLUSION
              SHN.INSTR
INTO #ST_NM_SALES_PROJECTION_MASTER
                FROM #SELECTED_HIERARCHY_NO SHN
                JOIN ST_CCP_HIERARCHY CCP ON CCP.@TABLCOLUMN LIKE SHN.HIERARCHY_NO  +'%' AND CCP.SALES_INCLUSION = SHN.SALES_INCLUSION
JOIN     ST_NM_SALES_PROJECTION_MASTER MSPM 
ON       MSPM.CCP_DETAILS_SID = CCP.CCP_DETAILS_SID 
@SALESINCLUSIONCC
GROUP BY SHN.HIERARCHY_NO, 
         @CCP_SALES_INCLUSION
              SHN.INSTR
                
                   

                SELECT MAINQ.account_growth,
                       MAINQ.product_growth,
                       MAINQ.projection_sales,
                       MAINQ.projection_units,
                       MAINQ.actualsales,
                       MAINQ.actualunits,
                       MAINQ.YEARS,
                       MAINQ.PERIODS,
                       MAINQ.calculation_periods,
                       MAINQ.methodology,
                       MAINQ.HIERARCHY_NO,
                       MAINQ.rcount,
                       MAINQ.actualproj,
                       MAINQ.checkrec,
                       MAINQ.uncheck_count,
                       MAINQ.ccpcount,
                       MAINQ.hierarchy_indicator,
                       MAINQ.user_group,
                       '' AS SEC_HIERARCHY,@SALES_INCLUSION_ALL   , MAINQ.INSTR
                FROM
                  (SELECT Q.account_growth,
                          Q.product_growth,
                          Q.projection_sales,
                          Q.projection_units,
                          Q.actualsales,
                          Q.actualunits,
                          Q.YEARS,
                          Q.PERIODS,
                          mas.calculation_periods,
                          mas.methodology,
                          mas.HIERARCHY_NO,
                          mas.rcount,
                          Q.actualproj,
                          mas.checkrec,
                          mas.uncheck_count,
                          mas.ccpcount,
                          '@HIERARCHY_INDICATOR' as hierarchy_indicator,
                          mas.user_group,
                          Dense_rank() OVER(
                                            ORDER BY mas.INSTR ASC) AS TEMP_INDEX,
                                                                            @Q_SALES_INCLUSION mas.INSTR
                   FROM 
                     ( SELECT SH.HIERARCHY_NO,
                                          PERIOD AS PERIODS,
                                          YEAR AS YEARS,
                                          SUM(SALES) AS ACTUALSALES,
                                          SUM(UNITS) ACTUALUNITS,
                                                                        NULL AS projection_sales,
                                       NULL AS projection_units,
                                           @STC_SALES_INCLUSION
                                          INDICATOR  as ACTUALPROJ,
                                          AVG(ACCOUNT_GROWTH)  ACCOUNT_GROWTH,
                                          AVG(PRODUCT_GROWTH)  PRODUCT_GROWTH

                                                                       
                                                                         FROM @VIEWTABLE STC
                                                                        @CUSTOMJOIN
                                                                         JOIN #SELECTED_HIERARCHY_NO SH ON @REFCOLUMN.HIERARCHY_NO LIKE SH.HIERARCHY_NO+'%'
                                                                         AND STC.SALES_INCLUSION = SH.SALES_INCLUSION    
                                                                         @CUSTOMCONDITION                                                  
                                                                     
                                                                           WHERE INDICATOR=0 @SALESINCLUSION
                                                                           GROUP BY  SH.HIERARCHY_NO,
                                          PERIOD,
                                          YEAR,
                                                                        @STC_SALES_INCLUSION
                                          INDICATOR

                                           UNION ALL 
                                           SELECT SH.HIERARCHY_NO,
                                          PERIOD AS PERIODS,
                                          YEAR AS YEARS,
                                                                       NULL AS ACTUALSALES,
                                          NULL ACTUALUNITS,
                                          SUM(SALES) AS PROJECTION_SALES,
                                          SUM(UNITS) PROJECTION_UNITS,
                                           @STC_SALES_INCLUSION
                                          INDICATOR  as ACTUALPROJ,
                                          AVG(ACCOUNT_GROWTH)  ACCOUNT_GROWTH,
                                          AVG(PRODUCT_GROWTH)  PRODUCT_GROWTH

                                                                       
                                                                           FROM @VIEWTABLE STC
                                                                        @CUSTOMJOIN
                                                                         JOIN #SELECTED_HIERARCHY_NO SH ON @REFCOLUMN.HIERARCHY_NO LIKE SH.HIERARCHY_NO+'%'
                                                                          AND STC.SALES_INCLUSION = SH.SALES_INCLUSION   
                                                                         @CUSTOMCONDITION
                                                                                                                           
                                                                           WHERE INDICATOR=1 @SALESINCLUSION
                                                                           GROUP BY  SH.HIERARCHY_NO,
                                          PERIOD,
                                          YEAR,
                                                                        @STC_SALES_INCLUSION
                                          INDICATOR    )  Q
                                                                       
                                                                       join #ST_NM_SALES_PROJECTION_MASTER mas on mas.HIERARCHY_NO=q.HIERARCHY_NO
                                                                       @SALES_CONDITION
                                                                       
                                                                       ) MAINQ
                WHERE MAINQ.INSTR > @START
                  AND MAINQ.INSTR <= (@START+@END)
                  
                  @OPPOSITESINC  
                ORDER BY 
                        MAINQ.INSTR,
                        MAINQ.YEARS,
                        MAINQ.PERIODS;
                ]]>
        </query>
    </entity>
    
    
   <entity id="non-mandated-sales-query-excel">
        <query>
            <![CDATA[
             IF OBJECT_ID('TEMPDB..#ST_NM_SALES_PROJECTION_MASTER') IS NOT NULL
                             DROP TABLE #ST_NM_SALES_PROJECTION_MASTER

                SELECT  
         CASE 
                  WHEN COUNT(DISTINCT MSPM.CALCULATION_PERIODS) > 1 THEN '-' 
                  ELSE MAX(MSPM.CALCULATION_PERIODS) 
         END CALCULATION_PERIODS, 
         CASE 
                  WHEN COUNT(DISTINCT MSPM.METHODOLOGY) > 1 THEN '-' 
                  ELSE MAX(MSPM.METHODOLOGY) 
         END AS METHODOLOGY, 
         CCP.@HIERARCHY AS HIERARCHY_NO, 
         COUNT(*) AS RCOUNT, 
         MIN( 
         CASE (CHECK_RECORD) 
                  WHEN 1 THEN 1 
                  ELSE 0 
         END) AS CHECKREC, 
         SUM( 
         CASE (MSPM.CHECK_RECORD) 
                  WHEN 1 THEN 0 
                  ELSE 1 
         END)                        AS UNCHECK_COUNT, 
         COUNT(MSPM.CCP_DETAILS_SID) AS CCPCOUNT, 
         MIN(MSPM.USER_GROUP)        AS USER_GROUP, 
         CCP.SALES_INCLUSION 
              
INTO #ST_NM_SALES_PROJECTION_MASTER
                FROM ST_CCP_HIERARCHY CCP
JOIN     ST_NM_SALES_PROJECTION_MASTER MSPM 
ON       MSPM.CCP_DETAILS_SID = CCP.CCP_DETAILS_SID 
GROUP BY CCP.@HIERARCHY, 
         CCP.SALES_INCLUSION
                SELECT SH.HIERARCHY_NO, 
       PERIOD, 
       YEAR, 
       INDICATOR           AS ACTUALPROJ, 
       Avg(ACCOUNT_GROWTH) ACCOUNT_GROWTH, 
       Avg(PRODUCT_GROWTH) PRODUCT_GROWTH, 
       NULL                AS projection_sales, 
       NULL                AS projection_units, 
       Sum(SALES)          AS ACTUALSALES, 
       Sum(UNITS)          ACTUALUNITS, 
       METHODOLOGY, 
       USER_GROUP, 
       CALCULATION_PERIODS, 
       STC.SALES_INCLUSION 
FROM   @VIEWTABLE STC 
       JOIN #ST_NM_SALES_PROJECTION_MASTER SH 
         ON STC.HIERARCHY_NO = SH.HIERARCHY_NO 
WHERE  INDICATOR = 0 
       @SALESINCLUSION 
GROUP  BY SH.HIERARCHY_NO, 
          PERIOD, 
          YEAR, 
          STC.SALES_INCLUSION, 
          METHODOLOGY, 
          USER_GROUP, 
          CALCULATION_PERIODS, 
          INDICATOR 
UNION ALL 
SELECT SH.HIERARCHY_NO, 
       PERIOD, 
       YEAR, 
       INDICATOR           AS ACTUALPROJ, 
       Avg(ACCOUNT_GROWTH) ACCOUNT_GROWTH, 
       Avg(PRODUCT_GROWTH) PRODUCT_GROWTH, 
       Sum(SALES)          AS PROJECTION_SALES, 
       Sum(UNITS)          PROJECTION_UNITS, 
       NULL                AS ACTUALSALES, 
       NULL                ACTUALUNITS, 
       METHODOLOGY, 
       USER_GROUP, 
       CALCULATION_PERIODS, 
       STC.SALES_INCLUSION 
FROM   @VIEWTABLE STC 
       JOIN #ST_NM_SALES_PROJECTION_MASTER SH 
         ON STC.hierarchy_no = SH.hierarchy_no 
WHERE  INDICATOR = 1 
       @SALESINCLUSION 
GROUP  BY SH.HIERARCHY_NO, 
          PERIOD, 
          YEAR, 
          STC.SALES_INCLUSION, 
          METHODOLOGY, 
          USER_GROUP, 
          CALCULATION_PERIODS, 
          INDICATOR 
          @OPPOSITESINC
@CONDITION 

                ]]>
        </query>
    </entity>
    
    <entity id="non-mandated-sales-query-new-custom">
        <query>
            <![CDATA[
             IF OBJECT_ID('TEMPDB..#ST_NM_SALES_PROJECTION_MASTER') IS NOT NULL
                             DROP TABLE #ST_NM_SALES_PROJECTION_MASTER

                SELECT  
         CASE 
                  WHEN COUNT(DISTINCT MSPM.CALCULATION_PERIODS) > 1 THEN '-' 
                  ELSE MAX(MSPM.CALCULATION_PERIODS) 
         END CALCULATION_PERIODS, 
         CASE 
                  WHEN COUNT(DISTINCT MSPM.METHODOLOGY) > 1 THEN '-' 
                  ELSE MAX(MSPM.METHODOLOGY) 
         END AS METHODOLOGY, 
         SHN.HIERARCHY_NO, 
         COUNT(*) AS RCOUNT, 
         MIN( 
         CASE (CHECK_RECORD) 
                  WHEN 1 THEN 1 
                  ELSE 0 
         END) AS CHECKREC, 
         SUM( 
         CASE (MSPM.CHECK_RECORD) 
                  WHEN 1 THEN 0 
                  ELSE 1 
         END)                        AS UNCHECK_COUNT, 
         COUNT(MSPM.CCP_DETAILS_SID) AS CCPCOUNT, 
         MIN(MSPM.USER_GROUP)        AS USER_GROUP, 
         CCP.SALES_INCLUSION ,
              SHN.INSTR
INTO #ST_NM_SALES_PROJECTION_MASTER
                FROM #SELECTED_HIERARCHY_NO SHN
				INNER JOIN CUSTOM_CCP_SALES RLD1 ON RLD1.HIERARCHY_NO=SHN.HIERARCHY_NO AND RLD1.CUST_VIEW_MASTER_SID =@CUSTOMSID    
               JOIN ST_CCP_HIERARCHY CCP ON CCP.CCP_DETAILS_SID=RLD1.CCP_DETAILS_SID
JOIN     ST_NM_SALES_PROJECTION_MASTER MSPM 
ON       MSPM.CCP_DETAILS_SID = CCP.CCP_DETAILS_SID 
@SALESINCLUSIONCC
GROUP BY SHN.HIERARCHY_NO, 
         CCP.SALES_INCLUSION,
              SHN.INSTR
                
                   

                SELECT MAINQ.account_growth,
                       MAINQ.product_growth,
                       MAINQ.projection_sales,
                       MAINQ.projection_units,
                       MAINQ.actualsales,
                       MAINQ.actualunits,
                       MAINQ.YEARS,
                       MAINQ.PERIODS,
                       MAINQ.calculation_periods,
                       MAINQ.methodology,
                       MAINQ.HIERARCHY_NO,
                       MAINQ.rcount,
                       MAINQ.actualproj,
                       MAINQ.checkrec,
                       MAINQ.uncheck_count,
                       MAINQ.ccpcount,
                       MAINQ.hierarchy_indicator,
                       MAINQ.user_group,
                       '' AS SEC_HIERARCHY,SALES_INCLUSION   , MAINQ.INSTR
                FROM
                  (SELECT Q.account_growth,
                          Q.product_growth,
                          Q.projection_sales,
                          Q.projection_units,
                          Q.actualsales,
                          Q.actualunits,
                          Q.YEARS,
                          Q.PERIODS,
                          mas.calculation_periods,
                          mas.methodology,
                          mas.HIERARCHY_NO,
                          mas.rcount,
                          Q.actualproj,
                          mas.checkrec,
                          mas.uncheck_count,
                          mas.ccpcount,
                         'C' as hierarchy_indicator,
                          mas.user_group,
                          Dense_rank() OVER(
                                            ORDER BY mas.INSTR ASC) AS TEMP_INDEX,
                                                                            Q.SALES_INCLUSION,mas.INSTR
                   FROM 
                     ( SELECT SH.HIERARCHY_NO,
                                          PERIOD AS PERIODS,
                                          YEAR AS YEARS,
                                          SUM(SALES) AS ACTUALSALES,
                                          SUM(UNITS) ACTUALUNITS,
                                                                        NULL AS projection_sales,
                                       NULL AS projection_units,
                                          STC.SALES_INCLUSION,
                                          INDICATOR  as ACTUALPROJ,
                                          AVG(ACCOUNT_GROWTH)  ACCOUNT_GROWTH,
                                          AVG(PRODUCT_GROWTH)  PRODUCT_GROWTH

                                                                       
                                                                        FROM ST_CUSTOM_SALES STC JOIN (SELECT LEVEL_NO,
                                    CUST_VIEW_MASTER_SID,
                                    ROWID,
                                    HIERARCHY_NO
                             FROM   CUSTOM_CCP_SALES
                             WHERE  CUST_VIEW_MASTER_SID = @CUSTOMSID
                                    AND LEVEL_NO = @LASTLEVEL
                             GROUP  BY LEVEL_NO,
                                       CUST_VIEW_MASTER_SID,
                                       ROWID,
                                       HIERARCHY_NO) CO ON CO.ROWID=STC.HIERARCHY_NO
                                                                         JOIN #SELECTED_HIERARCHY_NO SH ON CO.HIERARCHY_NO LIKE SH.HIERARCHY_NO+'%' 

                                                                          AND STC.SALES_INCLUSION=SH.SALES_INCLUSION                                               
                                                                     
                                                                           WHERE INDICATOR=0  @SALESINCLUSION
                                                                           GROUP BY  SH.HIERARCHY_NO,
                                          PERIOD,
                                          YEAR,
                                                                       STC.SALES_INCLUSION,
                                          INDICATOR

                                           UNION ALL 
                                           SELECT SH.HIERARCHY_NO,
                                          PERIOD AS PERIODS,
                                          YEAR AS YEARS,
                                                                       NULL AS ACTUALSALES,
                                          NULL ACTUALUNITS,
                                          SUM(SALES) AS PROJECTION_SALES,
                                          SUM(UNITS) PROJECTION_UNITS,
                                          STC.SALES_INCLUSION,
                                          INDICATOR  as ACTUALPROJ,
                                          AVG(ACCOUNT_GROWTH)  ACCOUNT_GROWTH,
                                          AVG(PRODUCT_GROWTH)  PRODUCT_GROWTH

                                                                       
                                                                        FROM ST_CUSTOM_SALES STC JOIN (SELECT LEVEL_NO,
                                    CUST_VIEW_MASTER_SID,
                                    ROWID,
                                    HIERARCHY_NO
                             FROM   CUSTOM_CCP_SALES
                             WHERE  CUST_VIEW_MASTER_SID = @CUSTOMSID
                                    AND LEVEL_NO = @LASTLEVEL
                             GROUP  BY LEVEL_NO,
                                       CUST_VIEW_MASTER_SID,
                                       ROWID,
                                       HIERARCHY_NO) CO ON CO.ROWID=STC.HIERARCHY_NO
                                                                         JOIN #SELECTED_HIERARCHY_NO SH ON CO.HIERARCHY_NO LIKE SH.HIERARCHY_NO+'%' 

                                                                            AND STC.SALES_INCLUSION=SH.SALES_INCLUSION                                               
                                                                     
                                                                           WHERE INDICATOR=1  @SALESINCLUSION
                                                                           GROUP BY  SH.HIERARCHY_NO,
                                          PERIOD,
                                          YEAR,
                                                                       STC.SALES_INCLUSION,
                                          INDICATOR   )  Q
                                                                       
                                                                       join #ST_NM_SALES_PROJECTION_MASTER mas on mas.HIERARCHY_NO=q.HIERARCHY_NO
                                                                       @OPPOSITESINC
                                                                       ) MAINQ
                WHERE MAINQ.INSTR >  @START
                  AND MAINQ.INSTR <= (@START+@END)
                  
                      
                ORDER BY 
                        MAINQ.INSTR,
                        MAINQ.YEARS,
                        MAINQ.PERIODS;
                ]]>
        </query>
    </entity>
    
    <entity id="selected-hierarchy-no">
        <query>
            <![CDATA[
                IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(500),INSTR INT,CCP_DETAILS_SID INT,RELATIONSHIP_LEVEL_VALUES VARCHAR(50))

                INSERT INTO #SELECTED_HIERARCHY_NO
                (HIERARCHY_NO,INSTR,
                CCP_DETAILS_SID,RELATIONSHIP_LEVEL_VALUES)
                SELECT DISTINCT A.HIERARCHY_NO,INSTR,CH.CCP_DETAILS_SID,RELATIONSHIP_LEVEL_VALUES
                FROM   (VALUES 	[?HIERARCHY_NO_VALUES])A(HIERARCHY_NO,INSTR)  
                @RELJOIN              
                [?SELECTED_HIERARCHY_JOIN]
                
            ]]>
        </query>
    </entity>
    <entity id="selected-hierarchy-no-condition-query">
        <query>
             <![CDATA[
    IF Object_id('TEMPDB..#RESULT_HIERARCHY', 'U') IS NOT NULL
  DROP TABLE #RESULT_HIERARCHY

CREATE TABLE #RESULT_HIERARCHY
  (
     HIERARCHY_NO        VARCHAR(1000),
     LEVEL_NO            INT,
     PARENT_HIERARCHY_NO VARCHAR(4000),
     RELATIONSHIP_LEVEL_VALUES VARCHAR(4000)
  )
                
                INSERT INTO #RESULT_HIERARCHY
            (HIERARCHY_NO,
             LEVEL_NO,
             PARENT_HIERARCHY_NO,
             RELATIONSHIP_LEVEL_VALUES)
SELECT DISTINCT HIERARCHY_NO,
                level_no,
                LEFT(parent_hierarchy_no, Len(parent_hierarchy_no) - 1),
                RELATIONSHIP_LEVEL_VALUES
FROM   #SELECTED_HIERARCHY_NO a
       CROSS apply (SELECT CONVERT(VARCHAR(8000), HIERARCHY_NO + '~')
                    FROM   #SELECTED_HIERARCHY_NO b
                    WHERE  a.ccp_details_sid = b.ccp_details_sid
                           AND a.level_no > b.level_no
                    ORDER  BY level_no
                    FOR xml path ('')) cs (parent_hierarchy_no)
                    
                    
                    UPDATE A
SET A.HIERARCHY_NO = isnull(G.HIER, A.HIERARCHY_NO)
FROM #RESULT_HIERARCHY A
JOIN (SELECT PR.*
              ,STUFF((SELECT DISTINCT ', ' + R.HIERARCHY_NO HIER
                           FROM #RESULT_HIERARCHY R
                           WHERE CONVERT(INT, R.RELATIONSHIP_LEVEL_VALUES) = CONVERT(INT, PR.RELATIONSHIP_LEVEL_VALuES)
                                  AND (CASE WHEN r.level_no > 1
                                                       THEN r.PARENT_HIERARCHY_NO
                                                ELSE '1'
                                                END ) = (CASE
                                                WHEN pr.level_no > 1
                                                       THEN pr.PARENT_HIERARCHY_NO
                                                ELSE '1'
                                                END )
                                  AND r.level_no = pr.level_no
                           FOR XML PATH(''),TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, ' ') AS HIER
       FROM #RESULT_HIERARCHY PR) G ON G.HIERARCHY_NO = A.HIERARCHY_NO
       
       
       SELECT DISTINCT HIERARCHY_NO
      FROM   #RESULT_HIERARCHY 
             ]]>
        </query>
    </entity>
    
    <entity id="selected-hierarchy-no-for-custom">
        <query>
            <![CDATA[
                IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(500),INSTR INT,CCP_DETAILS_SID INT,RELATIONSHIP_LEVEL_VALUES VARCHAR(50))

                INSERT INTO #SELECTED_HIERARCHY_NO
                (HIERARCHY_NO,INSTR,
                CCP_DETAILS_SID,RELATIONSHIP_LEVEL_VALUES)
                SELECT DISTINCT A.HIERARCHY_NO,INSTR,CH.CCP_DETAILS_SID,RLD1.RELATIONSHIP_LEVEL_VALES
                FROM   (VALUES 	[?HIERARCHY_NO_VALUES])A(HIERARCHY_NO,INSTR)                
                [?SELECTED_HIERARCHY_JOIN]
            ]]>
        </query>
        </entity>
    <entity id="selected-hierarchy-no-for-custom-for-RsIds">
        <query>
            <![CDATA[
                IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(500),INSTR INT,CCP_DETAILS_SID INT,RELATIONSHIP_LEVEL_VALUES VARCHAR(50),RS_CONTRACT_SID int)

                INSERT INTO #SELECTED_HIERARCHY_NO
                (HIERARCHY_NO,INSTR,
                CCP_DETAILS_SID,RELATIONSHIP_LEVEL_VALUES,RS_CONTRACT_SID)
                SELECT DISTINCT A.HIERARCHY_NO,INSTR,CH.CCP_DETAILS_SID,RLD1.RELATIONSHIP_LEVEL_VALES,RLD1.RS_CONTRACT_SID
                FROM   (VALUES 	[?HIERARCHY_NO_VALUES])A(HIERARCHY_NO,INSTR)                
                [?SELECTED_HIERARCHY_JOIN]
            ]]>
        </query>
    </entity>
    <entity id="selected-hierarchy-no-for-customer-pv">
        <query>
            <![CDATA[
                IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(500),INSTR INT,CCP_DETAILS_SID INT,RELATIONSHIP_LEVEL_VALUES VARCHAR(50))

                INSERT INTO #SELECTED_HIERARCHY_NO
                (HIERARCHY_NO,INSTR,
                CCP_DETAILS_SID,RELATIONSHIP_LEVEL_VALUES)
                SELECT DISTINCT A.HIERARCHY_NO,INSTR,CH.CCP_DETAILS_SID,RLD1.RELATIONSHIP_LEVEL_VALUES
                FROM   (VALUES 	[?HIERARCHY_NO_VALUES])A(HIERARCHY_NO,INSTR)                
                [?SELECTED_HIERARCHY_JOIN]
            ]]>
        </query>
    </entity>
   
    <entity id="selected-hierarchy-no-customer">
        <query>
            <![CDATA[
                IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(500),CCP_DETAILS_SID INT,INSTR INT,SALES_INCLUSION int,CALCULATION_PERIODS varchar(8000),USER_GROUP varchar(10),METHODOLOGY varchar(100))

                INSERT INTO #SELECTED_HIERARCHY_NO
                (HIERARCHY_NO,
                CCP_DETAILS_SID,INSTR,
                SALES_INCLUSION,CALCULATION_PERIODS,USER_GROUP,METHODOLOGY)
                SELECT DISTINCT HIERARCHY_NO,CH.CCP_DETAILS_SID,INSTR ,SALES_INCLUSION ,CALCULATION_PERIODS,USER_GROUP,METHODOLOGY
                FROM   (VALUES 	[?HIERARCHY_NO_VALUES])A(HIERARCHY_NO,INSTR)                
                [?SELECTED_HIERARCHY_JOIN]
            ]]>
        </query>
    </entity>
    <entity id="selected-hierarchy-no-customer-excel">
        <query>
            <![CDATA[
                IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(500),CCP_DETAILS_SID INT,SALES_INCLUSION int,CALCULATION_PERIODS varchar(8000),USER_GROUP varchar(10),METHODOLOGY varchar(100),instr int)

                INSERT INTO #SELECTED_HIERARCHY_NO
                (HIERARCHY_NO,
                CCP_DETAILS_SID,
                SALES_INCLUSION,CALCULATION_PERIODS,USER_GROUP,METHODOLOGY,instr)
                SELECT DISTINCT HIERARCHY_NO,CH.CCP_DETAILS_SID ,SALES_INCLUSION ,CALCULATION_PERIODS,USER_GROUP,METHODOLOGY,INSTR
                FROM   (VALUES 	[?HIERARCHY_NO_VALUES])A(HIERARCHY_NO,INSTR)                
                [?SELECTED_HIERARCHY_JOIN]
            ]]>
        </query>
    </entity>
    
    <entity id="selected-hierarchy-no-custom-view">
        <query>
            <![CDATA[
                IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(500),CCP_DETAILS_SID INT)
    

                INSERT INTO #SELECTED_HIERARCHY_NO
                (HIERARCHY_NO,
                CCP_DETAILS_SID)
                SELECT DISTINCT HIERARCHY_NO,CH.CCP_DETAILS_SID
                FROM  ST_CCP_HIERARCHY CH 
                WHERE CUST_HIERARCHY_NO like '[?CustomerParent]%' AND PROD_HIERARCHY_NO like '[?ProductParent]%'
                
            ]]>
        </query>
    </entity>
    
    
    <entity id="projectionVariancePeriodQuery">
        <query>
            <![CDATA[
        DECLARE @PROJECTION_ID VARCHAR(100)= ' [?SELECTED_PROJECTION_IDS] '
        DECLARE @FORECAST_NAME_EXFACTORY    VARCHAR(50),
        @FORECAST_VERSION_EXFACTORY VARCHAR(50),
        @FORECAST_NAME_DEMAND VARCHAR(50),
        @FORECAST_VERSION_DEMAND VARCHAR(50),
        @FORECAST_NAME_INV VARCHAR(50),
        @FORECAST_VERSION_INV VARCHAR(50),
        @COUNT                      INT,
        @ACTUAL_PERIOD              INT,
        @PROJECTION_END_PERIOD      INT,
        @PROJECTION                 INT

IF Object_id('TEMPDB..#PROJECTION_MASTER') IS NOT NULL
  TRUNCATE TABLE #PROJECTION_MASTER
ELSE
  CREATE TABLE #PROJECTION_MASTER
    (
       ID                    INT IDENTITY(1, 1),
       PROJECTION_MASTER_SID INT
    )

INSERT INTO #PROJECTION_MASTER
            (PROJECTION_MASTER_SID)
SELECT TOKEN
FROM   [DBO].[Udf_splitstring](@PROJECTION_ID, ',')

SELECT @ACTUAL_PERIOD = PERIOD_SID
FROM   PERIOD
WHERE  PERIOD_DATE = Dateadd(YY, Datediff(YY, 0, Getdate()) - 3, 0)

SELECT @PROJECTION_END_PERIOD = PERIOD_SID
FROM   PERIOD
WHERE  PERIOD_DATE = (SELECT Dateadd(DAY, 1, Eomonth(PM1.TO_DATE, -1))
                      FROM   #PROJECTION_MASTER PM
                             JOIN PROJECTION_MASTER PM1
                               ON PM.PROJECTION_MASTER_SID = PM1.PROJECTION_MASTER_SID
                      WHERE  PM.ID = 1)

DECLARE @I INT=2
DECLARE @ITEMID1           [DBO].[UDT_ITEM],
        @PRICING_QUALIFIER VARCHAR(50)='WAC',
        @ITEM_UOM          VARCHAR(50) = 'EACH'

IF Object_id('TEMPDB..#FILE_INFO') IS NOT NULL
  DROP TABLE #FILE_INFO

SELECT DISTINCT B.ID,
                A.PROJECTION_MASTER_SID,
                C.DESCRIPTION,
                FORECAST_NAME,
                VERSION AS FILE_VERSION
INTO   #FILE_INFO
FROM   (SELECT PROJECTION_MASTER_SID,FILE_MANAGEMENT_SID,FILE_TYPE,SCREEN_NAME,FLAG 
            FROM (SELECT *,ROW_NUMBER() over(PARTITION BY PROJECTION_MASTER_SID, FILE_TYPE ORDER BY FLAG DESC ) rn FROM PROJECTION_FILE_DETAILS ) a where a.rn=1 ) A
       INNER JOIN #PROJECTION_MASTER B
               ON A.PROJECTION_MASTER_SID = B.PROJECTION_MASTER_SID
       LEFT JOIN HELPER_TABLE C
               ON C.HELPER_TABLE_SID = A.FILE_TYPE
       INNER JOIN FILE_MANAGEMENT FM
               ON FM.FILE_MANAGEMENT_SID = A.FILE_MANAGEMENT_SID
WHERE  B.ID <> 1

SELECT @COUNT = Count(DISTINCT ID)
FROM   #PROJECTION_MASTER

IF Object_id('TEMPDB..#PRODUCT_FILE_DATA') IS NOT NULL
  DROP TABLE #PRODUCT_FILE_DATA

CREATE TABLE #PRODUCT_FILE_DATA
  (
     PROJECTION_MASTER_SID    INT,
     ITEM_MASTER_SID          INT,
     PERIOD_SID               INT,
     EXFACTORY_ACTUAL_SALES   NUMERIC(22, 6),
     EXFACTORY_FORECAST_SALES NUMERIC(22, 6)
     ,DEMAND_ACTUAL_SALES NUMERIC(22, 6)
     ,DEMAND_FORECAST_SALES NUMERIC(22, 6)
     ,INVENTORY_ACTUAL_SALES NUMERIC(22, 6)
     ,INVENTORY_FORECAST_SALES NUMERIC(22, 6)
  )

WHILE ( @I <= @COUNT )
  BEGIN
      SELECT @PROJECTION = Max(PROJECTION_MASTER_SID),
             @FORECAST_NAME_EXFACTORY = Max(CASE
                                              WHEN DESCRIPTION = 'EX-FACTORY SALES' THEN FORECAST_NAME
                                            END),
             @FORECAST_VERSION_EXFACTORY = Max(CASE
                                                 WHEN DESCRIPTION = 'EX-FACTORY SALES' THEN FILE_VERSION
                                               END)
                ,@FORECAST_NAME_DEMAND = Max(CASE 
				WHEN DESCRIPTION = 'DEMAND'
					THEN FORECAST_NAME
				END)
		,@FORECAST_VERSION_DEMAND = Max(CASE 
				WHEN DESCRIPTION = 'DEMAND'
					THEN FILE_VERSION
				END)
		,@FORECAST_NAME_INV = Max(CASE 
				WHEN DESCRIPTION = 'Inventory Withdrawal - Forecast Summary'
					THEN FORECAST_NAME
				END)
		,@FORECAST_VERSION_INV = Max(CASE 
				WHEN DESCRIPTION = 'Inventory Withdrawal - Forecast Summary'
					THEN FILE_VERSION END)
      FROM   #FILE_INFO
      WHERE  ID = @I

      INSERT INTO @ITEMID1
      SELECT DISTINCT IM.ITEM_MASTER_SID
      FROM   ITEM_MASTER IM
             INNER JOIN CCP_DETAILS CD
                     ON CD.ITEM_MASTER_SID = IM.ITEM_MASTER_SID
             INNER JOIN PROJECTION_DETAILS PD
                     ON PD.CCP_DETAILS_SID = CD.CCP_DETAILS_SID
             INNER JOIN #FILE_INFO PM
                     ON PD.PROJECTION_MASTER_SID = PM.PROJECTION_MASTER_SID
      WHERE  PM.ID = @I
             AND IM.ITEM_MASTER_SID IN(SELECT IM.ITEM_MASTER_SID
                                       FROM   ITEM_MASTER IM
                                              INNER JOIN CCP_DETAILS CD
                                                      ON CD.ITEM_MASTER_SID = IM.ITEM_MASTER_SID
                                              INNER JOIN PROJECTION_DETAILS PD
                                                      ON PD.CCP_DETAILS_SID = CD.CCP_DETAILS_SID
                                              INNER JOIN #PROJECTION_MASTER PM
                                                      ON PD.PROJECTION_MASTER_SID = PM.PROJECTION_MASTER_SID
                                       WHERE  PM.ID = 1)

      INSERT INTO #PRODUCT_FILE_DATA
                  (PROJECTION_MASTER_SID,
                   ITEM_MASTER_SID,
                   PERIOD_SID,
                   EXFACTORY_ACTUAL_SALES,
                   EXFACTORY_FORECAST_SALES
                    ,DEMAND_ACTUAL_SALES
                    ,DEMAND_FORECAST_SALES
                    ,INVENTORY_ACTUAL_SALES
                    ,INVENTORY_FORECAST_SALES)
      SELECT @PROJECTION        AS PROJECTION_MASTER_SID,
             ITEM_MASTER_SID,
             PERIOD_SID,
             ACTUAL_GTS_SALES   AS EXFACTORY_ACTUAL_SALES,
             COALESCE(FORECAST_GTS_SALES,ACTUAL_GTS_SALES)AS EXFACTORY_FORECAST_SALES
             ,ACT_GROSS_AMOUNT_D
	     ,COALESCE(FOR_GROSS_AMOUNT_D,ACT_GROSS_AMOUNT_D)as DEMAND_FORECAST_SALES
     	     ,ACT_AMOUNT_WITHDRAWN
	     ,COALESCE(FOR_AMOUNT_WITHDRAWN,ACT_AMOUNT_WITHDRAWN) as INVENTORY_FORECAST_SALES
      FROM   (SELECT G.ITEM_MASTER_SID,
                     P.PERIOD_SID,
                     A.ACTUAL_GTS_SALES,
                     A.ACTUAL_GTS_UNITS,
                     A.FORECAST_GTS_SALES,
                     A.FORECAST_GTS_UNITS,
                     B.ACT_GROSS_AMOUNT ACT_GROSS_AMOUNT_D
		     ,B.ACT_GROSS_UNITS ACT_GROSS_UNITS_D
		     ,B.FOR_GROSS_AMOUNT FOR_GROSS_AMOUNT_D
		     ,B.FOR_GROSS_UNITS FOR_GROSS_UNITS_D
		     ,D.ACT_AMOUNT_WITHDRAWN
		     ,D.ACT_UNITS_WITHDRAWN
		     ,D.FOR_AMOUNT_WITHDRAWN
		     ,D.FOR_UNITS_WITHDRAWN
                     ,Row_number()
                       OVER(
                         PARTITION BY A.ITEM_MASTER_SID, A.PERIOD_SID
                         ORDER BY A.ITEM_MASTER_SID) RNO
              FROM   @ITEMID1 G
                     CROSS JOIN PERIOD P
                     LEFT JOIN Udf_gts_wac(@ITEMID1, @ACTUAL_PERIOD, @PROJECTION_END_PERIOD, @FORECAST_NAME_EXFACTORY, @FORECAST_VERSION_EXFACTORY) A
                            ON A.ITEM_MASTER_SID = G.ITEM_MASTER_SID
                               AND A.PERIOD_SID = P.PERIOD_SID
                               LEFT JOIN UDF_DEMAND_WAC(@ITEMID1, @ACTUAL_PERIOD, @PROJECTION_END_PERIOD, @FORECAST_NAME_DEMAND, @FORECAST_VERSION_DEMAND) B ON A.ITEM_MASTER_SID = B.ITEM_MASTER_SID
			AND A.PERIOD_SID = B.PERIOD_SID
		LEFT JOIN UDF_INVENTORY_WAC(@ITEMID1, @ACTUAL_PERIOD, @PROJECTION_END_PERIOD, @FORECAST_NAME_INV, @FORECAST_VERSION_INV) D ON D.ITEM_MASTER_SID = B.ITEM_MASTER_SID
			AND D.PERIOD_SID = B.PERIOD_SID
              WHERE  P.PERIOD_SID BETWEEN @ACTUAL_PERIOD AND @PROJECTION_END_PERIOD)A
      WHERE  RNO = 1

      SET @I=@I + 1

      DELETE FROM @ITEMID1
  END
            ]]>
        </query>
    </entity>
    
    
    <entity id="selected-hierarchy-no-ordered">
        <query>
            <![CDATA[
             
                IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(8000),INSTR INT,SALES_INCLUSION BIT)

                
                ;WITH HIERARCHY AS ( SELECT DISTINCT A.HIERARCHY_NO,INSTR,RELATIONSHIP_LEVEL_VALUES,CH.SALES_INCLUSION
                FROM   (VALUES 	[?HIERARCHY_NO_VALUES])A(HIERARCHY_NO,INSTR)   
                @RELJOIN          
                [?SELECTED_HIERARCHY_JOIN] )
                INSERT INTO #SELECTED_HIERARCHY_NO
                (HIERARCHY_NO,
                INSTR,SALES_INCLUSION)
                
                SELECT DISTINCT HIERARCHY_NO,INSTR, A.SALES_INCLUSION
                FROM   HIERARCHY A
                [?SELECTED_HIERARCHY_JOIN] 
            ]]>
        </query>
    </entity>
    <entity id="selected-hierarchy-no-custom">
        <query>
            <![CDATA[
               IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
  DROP TABLE #SELECTED_HIERARCHY_NO

CREATE TABLE #SELECTED_HIERARCHY_NO
  (
     HIERARCHY_NO    VARCHAR(50),
     SEC_HIERARCHYNO   VARCHAR(50),
      INSTTR INT ,
      HIERARCHY_INDICATOR VARCHAR(50),
     CCP_DETAILS_SID INT
  )
INSERT INTO #SELECTED_HIERARCHY_NO
            (HIERARCHY_NO,
            SEC_HIERARCHYNO,
            INSTTR,
            HIERARCHY_INDICATOR,
            CCP_DETAILS_SID)
SELECT DISTINCT A.HIERARCHY_NO,
                SEC_HIERARCHYNO,
                INSTTR,
                HIERARCHY_INDICATOR,
                CH.CCP_DETAILS_SID
FROM   (VALUES [?Hierarchy-Combination]


)A(HIERARCHY_NO,SEC_HIERARCHYNO,HIERARCHY_INDICATOR,INSTTR)
       JOIN ST_CCP_HIERARCHY CH
         ON ((CH.CUST_HIERARCHY_NO LIKE A.HIERARCHY_NO + '%' OR  CH.PROD_HIERARCHY_NO LIKE A.SEC_HIERARCHYNO + '%') AND (HIERARCHY_NO IS NULL OR SEC_HIERARCHYNO IS NULL)) OR
		   ((CH.CUST_HIERARCHY_NO LIKE A.SEC_HIERARCHYNO + '%' OR  CH.PROD_HIERARCHY_NO LIKE A.HIERARCHY_NO + '%') AND (HIERARCHY_NO IS NULL OR SEC_HIERARCHYNO IS NULL)) OR
			((CH.CUST_HIERARCHY_NO LIKE A.SEC_HIERARCHYNO + '%' AND  CH.PROD_HIERARCHY_NO LIKE A.HIERARCHY_NO + '%') AND (HIERARCHY_NO IS NOT NULL AND SEC_HIERARCHYNO IS NOT NULL)) OR 
			((CH.CUST_HIERARCHY_NO LIKE A.HIERARCHY_NO + '%' AND  CH.PROD_HIERARCHY_NO LIKE A.SEC_HIERARCHYNO + '%') AND (HIERARCHY_NO IS NOT NULL AND SEC_HIERARCHYNO IS NOT NULL))
       JOIN ST_NM_SALES_PROJECTION_MASTER SPM
         ON SPM.CCP_DETAILS_SID = CH.CCP_DETAILS_SID
            ]]>
        </query>
    </entity>
    
    <entity id="selected-hierarchy-no-custom-proj">
        <query>
            <![CDATA[
                IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
               DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(8000),INSTR INT,SALES_INCLUSION BIT)

                
                ;WITH HIERARCHY AS ( SELECT DISTINCT A.HIERARCHY_NO,INSTR,RELATIONSHIP_LEVEL_VALES,CH.SALES_INCLUSION
                FROM   (VALUES  [?Hierarchy-Combination] )A(HIERARCHY_NO,INSTR)   
                 INNER JOIN CUSTOM_CCP_SALES RLD1 ON RLD1.HIERARCHY_NO=A.HIERARCHY_NO AND RLD1.CUST_VIEW_MASTER_SID =@CUSTOMSID    
                 JOIN ST_CCP_HIERARCHY CH ON ch.CCP_DETAILS_SID=rld1.CCP_DETAILS_SID )
                INSERT INTO #SELECTED_HIERARCHY_NO
                (HIERARCHY_NO,
                INSTR,SALES_INCLUSION)
                
                SELECT DISTINCT a.HIERARCHY_NO
                         ,INSTR, A.SALES_INCLUSION
                FROM   HIERARCHY A
				INNER JOIN CUSTOM_CCP_SALES RLD1 ON RLD1.HIERARCHY_NO=A.HIERARCHY_NO AND RLD1.CUST_VIEW_MASTER_SID =@CUSTOMSID     
                 JOIN ST_CCP_HIERARCHY CH ON ch.CCP_DETAILS_SID=rld1.CCP_DETAILS_SID
            
                JOIN ST_NM_SALES_PROJECTION_MASTER SPM ON SPM.CCP_DETAILS_SID = CH.CCP_DETAILS_SID
            
            ]]>
        </query>
    </entity>
    
    <entity id="sales-customView">
        <query>
             <![CDATA[  
            

          IF Object_id('TEMPDB..#ST_NM_SALES_PROJECTION') IS NOT NULL
                DROP TABLE #ST_NM_SALES_PROJECTION

                SELECT SHN.HIERARCHY_NO,
                       SHN.SEC_HIERARCHYNO,
                       SHN.INSTTR,
                       SHN.HIERARCHY_INDICATOR,
                       P."YEAR",
                       @FREQUENCY@ ,
                       SUM(NMSP.PROJECTION_SALES) AS PROJECTION_SALES ,
                       SUM(NMSP.PROJECTION_UNITS) AS PROJECTION_UNITS ,
                       AVG(NMSP.ACCOUNT_GROWTH) AS ACCOUNT_GROWTH ,
                       AVG(NMSP.PRODUCT_GROWTH) AS PRODUCT_GROWTH ,
                       COUNT(DISTINCT SHN.CCP_DETAILS_SID) AS ROW_COUNT INTO #ST_NM_SALES_PROJECTION
                FROM #SELECTED_HIERARCHY_NO SHN
                JOIN ST_NM_SALES_PROJECTION NMSP ON NMSP.CCP_DETAILS_SID = SHN.CCP_DETAILS_SID
                JOIN PERIOD P ON P.PERIOD_SID = NMSP.PERIOD_SID    
                GROUP BY SHN.HIERARCHY_NO,
                         SHN.SEC_HIERARCHYNO,
                         SHN.INSTTR,
                         SHN.HIERARCHY_INDICATOR,
                         P."YEAR"
                        @FREQUENCY_GROUP@;

                IF Object_id('TEMPDB..#ST_NM_ACTUAL_SALES') IS NOT NULL
                DROP TABLE #ST_NM_ACTUAL_SALES
                SELECT SHN.HIERARCHY_NO,
                       SHN.SEC_HIERARCHYNO,
                       SHN.INSTTR,
                       SHN.HIERARCHY_INDICATOR,
                       P."YEAR", 
                        @FREQUENCY@,
                       Sum(NMSP.ACTUAL_SALES) AS ACTUAL_SALES,
                       Sum(NMSP.ACTUAL_UNITS) AS ACTUAL_UNITS INTO #ST_NM_ACTUAL_SALES
                FROM #SELECTED_HIERARCHY_NO SHN
                JOIN ST_NM_ACTUAL_SALES NMSP ON NMSP.CCP_DETAILS_SID = SHN.CCP_DETAILS_SID
                JOIN PERIOD P ON P.PERIOD_SID = NMSP.PERIOD_SID    
                GROUP BY SHN.HIERARCHY_NO,
                        SHN.SEC_HIERARCHYNO,
                        SHN.INSTTR,
                        SHN.HIERARCHY_INDICATOR,
                         P."YEAR"
                        @FREQUENCY_GROUP@;

                IF Object_id('TEMPDB..#ST_NM_SALES_PROJECTION_MASTER') IS NOT NULL
                DROP TABLE #ST_NM_SALES_PROJECTION_MASTER
                SELECT CASE
                           WHEN Count(DISTINCT MSPM.CALCULATION_PERIODS) > 1 THEN '-'
                           ELSE Max(MSPM.CALCULATION_PERIODS)
                       END CALCULATION_PERIODS,
                       CASE
                           WHEN Count(DISTINCT MSPM.METHODOLOGY) > 1 THEN '-'
                           ELSE Max(MSPM.METHODOLOGY)
                       END AS METHODOLOGY,
                       SHN.HIERARCHY_NO,
                       SHN.SEC_HIERARCHYNO,
                       SHN.INSTTR,
                       SHN.HIERARCHY_INDICATOR,
                       Count(*) AS RCOUNT,
                       Min(CASE (CHECK_RECORD)
                               WHEN 1 THEN 1
                               ELSE 0
                           END) AS checkrec,
                       Sum(CASE (MSPM.CHECK_RECORD)
                               WHEN 1 THEN 0
                               ELSE 1
                           END) AS UNCHECK_COUNT,
                       Count(MSPM.CCP_DETAILS_SID) AS CCPCOUNT,
                       Min(MSPM.USER_GROUP) AS USER_GROUP INTO #ST_NM_SALES_PROJECTION_MASTER
                FROM #SELECTED_HIERARCHY_NO SHN
                JOIN ST_NM_SALES_PROJECTION_MASTER MSPM ON MSPM.CCP_DETAILS_SID = SHN.CCP_DETAILS_SID        
                GROUP BY SHN.HIERARCHY_NO,
                SHN.SEC_HIERARCHYNO,SHN.INSTTR,SHN.HIERARCHY_INDICATOR;

                SELECT MAINQ.account_growth,
                       MAINQ.product_growth,
                       MAINQ.projection_sales,
                       MAINQ.projection_units,
                       MAINQ.actualsales,
                       MAINQ.actualunits,
                       MAINQ.YEARS,
                       MAINQ.PERIODS,
                       MAINQ.calculation_periods,
                       MAINQ.methodology,
                       MAINQ.HIERARCHY_NO,
                       MAINQ.rcount,
                       MAINQ.actualproj,
                       MAINQ.checkrec,
                       MAINQ.uncheck_count,
                       MAINQ.ccpcount,
                       MAINQ.HIERARCHY_INDICATOR,
                       MAINQ.user_group,
                       MAINQ.SEC_HIERARCHYNO
                FROM
                  (SELECT Q.account_growth,
                          Q.product_growth,
                          Q.projection_sales,
                          Q.projection_units,
                          Q.actualsales,
                          Q.actualunits,
                          Q.YEARS,
                          Q.PERIODS,
                          Q.calculation_periods,
                          Q.methodology,
                          Q.HIERARCHY_NO,
                          Q.SEC_HIERARCHYNO,
                          Q.INSTTR,
                          Q.rcount,
                          Q.actualproj,
                          Q.checkrec,
                          Q.uncheck_count,
                          Q.ccpcount,
                          Q.HIERARCHY_INDICATOR,
                          Q.user_group,
                          Dense_rank() OVER(
                                            ORDER BY Q.HIERARCHY_NO ASC) AS TEMP_INDEX
                   FROM
                     (SELECT 0.0 AS ACCOUNT_GROWTH,
                             0.0 AS PRODUCT_GROWTH,
                             NULL AS PROJECTION_SALES,
                             NULL AS PROJECTION_UNITS,
                             MAS.ACTUAL_SALES AS actualSales,
                             MAS.ACTUAL_UNITS AS actualUnits,
                             "YEAR" AS YEARS,
                             @FRE@ AS PERIODS,
                             CALCULATION_PERIODS,
                             METHODOLOGY,
                             MSPM.HIERARCHY_NO,
                             MSPM.SEC_HIERARCHYNO,
                             MSPM.INSTTR,
                             RCOUNT,
                             1 AS actualProj,
                             checkrec,
                             UNCHECK_COUNT,
                             CCPCOUNT,
                             MSPM.HIERARCHY_INDICATOR,
                             USER_GROUP
                      FROM #ST_NM_SALES_PROJECTION_MASTER MSPM
                      JOIN #ST_NM_ACTUAL_SALES MAS ON MSPM.HIERARCHY_NO = MAS.HIERARCHY_NO and (MSPM.SEC_HIERARCHYNO = MAS.SEC_HIERARCHYNO or MSPM.SEC_HIERARCHYNO is null )
                      UNION ALL SELECT MSP.ACCOUNT_GROWTH,
                                       MSP.PRODUCT_GROWTH,
                                       MSP.PROJECTION_SALES,
                                       MSP.PROJECTION_UNITS,
                                       NULL AS ACTUAL_SALES,
                                       NULL AS ACTUAL_UNITS,
                                       "YEAR" AS YEARS,
                                       @FRE@ AS PERIODS,
                                       CALCULATION_PERIODS,
                                       METHODOLOGY,
                                       MSPM.HIERARCHY_NO,
                                       MSPM.SEC_HIERARCHYNO,
                                       MSPM.INSTTR,
                                       RCOUNT,
                                       0 AS actualProj,
                                       checkrec,
                                       UNCHECK_COUNT,
                                       CCPCOUNT,
                                       MSPM.HIERARCHY_INDICATOR,
                                       USER_GROUP
                      FROM #ST_NM_SALES_PROJECTION_MASTER MSPM
                      JOIN #ST_NM_SALES_PROJECTION MSP ON MSPM.HIERARCHY_NO = MSP.HIERARCHY_NO and (MSPM.SEC_HIERARCHYNO = MSP.SEC_HIERARCHYNO or MSPM.SEC_HIERARCHYNO is null ) ) Q) MAINQ
                WHERE MAINQ.TEMP_INDEX > @START
                  AND MAINQ.TEMP_INDEX <= (@START+@END)
                ORDER BY
                        MAINQ.INSTTR,
                        MAINQ.HIERARCHY_NO,
                        MAINQ.SEC_HIERARCHYNO,
                        MAINQ.YEARS,
                        MAINQ.PERIODS;
              ]]>
        </query>
    </entity>
    <entity id="sales-customView-proj">
        <query>
             <![CDATA[  
            

          IF Object_id('TEMPDB..#ST_NM_SALES_PROJECTION') IS NOT NULL
                DROP TABLE #ST_NM_SALES_PROJECTION

                SELECT SHN.HIERARCHY_NO,
                       SHN.SEC_HIERARCHYNO,
                       SHN.HIERARCHY_INDICATOR,
                       P."YEAR",
                       @FREQUENCY@ ,
                       SUM(NMSP.PROJECTION_SALES) AS PROJECTION_SALES ,
                       @SUMPROJECTEDUNITS ,
                       AVG(NMSP.ACCOUNT_GROWTH) AS ACCOUNT_GROWTH ,
                       AVG(NMSP.PRODUCT_GROWTH) AS PRODUCT_GROWTH ,
                       COUNT(DISTINCT SHN.CCP_DETAILS_SID) AS ROW_COUNT INTO #ST_NM_SALES_PROJECTION
                FROM #SELECTED_HIERARCHY_NO SHN
                JOIN ST_NM_SALES_PROJECTION NMSP ON NMSP.CCP_DETAILS_SID = SHN.CCP_DETAILS_SID
                JOIN PERIOD P ON P.PERIOD_SID = NMSP.PERIOD_SID  
                @UOMCODE 
                @SALESINCLUSION  
                GROUP BY SHN.HIERARCHY_NO,
                         SHN.SEC_HIERARCHYNO,
                         SHN.HIERARCHY_INDICATOR,
                         P."YEAR"
                        @FREQUENCY_GROUP@;

                IF Object_id('TEMPDB..#ST_NM_ACTUAL_SALES') IS NOT NULL
                DROP TABLE #ST_NM_ACTUAL_SALES
                SELECT SHN.HIERARCHY_NO,
                       SHN.SEC_HIERARCHYNO,
                       SHN.HIERARCHY_INDICATOR,
                       P."YEAR", 
                        @FREQUENCY@,
                       Sum(NMSP.ACTUAL_SALES) AS ACTUAL_SALES,
                       @SUMACTUALUNITS
                INTO #ST_NM_ACTUAL_SALES
                FROM #SELECTED_HIERARCHY_NO SHN
                JOIN ST_NM_ACTUAL_SALES NMSP ON NMSP.CCP_DETAILS_SID = SHN.CCP_DETAILS_SID
                JOIN PERIOD P ON P.PERIOD_SID = NMSP.PERIOD_SID    
                @UOMCODE
                @SALESINCLUSION
                GROUP BY SHN.HIERARCHY_NO,
                        SHN.SEC_HIERARCHYNO,
                        SHN.HIERARCHY_INDICATOR,
                         P."YEAR"
                        @FREQUENCY_GROUP@;

                IF Object_id('TEMPDB..#ST_NM_SALES_PROJECTION_MASTER') IS NOT NULL
                DROP TABLE #ST_NM_SALES_PROJECTION_MASTER
                SELECT CASE
                           WHEN Count(DISTINCT MSPM.CALCULATION_PERIODS) > 1 THEN '-'
                           ELSE Max(MSPM.CALCULATION_PERIODS)
                       END CALCULATION_PERIODS,
                       CASE
                           WHEN Count(DISTINCT MSPM.METHODOLOGY) > 1 THEN '-'
                           ELSE Max(MSPM.METHODOLOGY)
                       END AS METHODOLOGY,
                       SHN.HIERARCHY_NO,
                       SHN.SEC_HIERARCHYNO,
                       SHN.HIERARCHY_INDICATOR,
                       Count(*) AS RCOUNT,
                       Min(CASE (CHECK_RECORD)
                               WHEN 1 THEN 1
                               ELSE 0
                           END) AS checkrec,
                       Sum(CASE (MSPM.CHECK_RECORD)
                               WHEN 1 THEN 0
                               ELSE 1
                           END) AS UNCHECK_COUNT,
                       Count(MSPM.CCP_DETAILS_SID) AS CCPCOUNT,
                       Min(MSPM.USER_GROUP) AS USER_GROUP,mspm.SALES_INCLUSION,MAX(SHN.INSTTR) INSTTR  INTO #ST_NM_SALES_PROJECTION_MASTER
                FROM #SELECTED_HIERARCHY_NO SHN
                JOIN ST_NM_SALES_PROJECTION_MASTER MSPM ON MSPM.CCP_DETAILS_SID = SHN.CCP_DETAILS_SID  
                @SALESINCLUSION      
                GROUP BY SHN.HIERARCHY_NO,
                SHN.SEC_HIERARCHYNO,SHN.HIERARCHY_INDICATOR,mspm.SALES_INCLUSION;
                
                DECLARE @STAT_PERIOD INT
,@EN_PERIOD INT
,@ACTUAL_END_PERIOD int,
@ACTUAL_START_PERIOD int

SET @STAT_PERIOD = (
SELECT MIN(PERIOD_SID)
FROM ST_NM_ACTUAL_SALES
)
SET @ACTUAL_END_PERIOD = (
SELECT MAX(PERIOD_SID)
FROM ST_NM_SALES_PROJECTION
)

SET @EN_PERIOD = (
SELECT MAX(PERIOD_SID)
FROM ST_NM_ACTUAL_SALES
)
SET @ACTUAL_START_PERIOD = (
SELECT MIN(PERIOD_SID)
FROM ST_NM_SALES_PROJECTION)
                
                SELECT MAINQ.account_growth,
                       MAINQ.product_growth,
                       MAINQ.projection_sales,
                       MAINQ.projection_units,
                       MAINQ.actualsales,
                       MAINQ.actualunits,
                       MAINQ.YEARS,
                       MAINQ.PERIODS,
                       MAINQ.calculation_periods,
                       MAINQ.methodology,
                       MAINQ.HIERARCHY_NO,
                       MAINQ.rcount,
                       MAINQ.actualproj,
                       MAINQ.checkrec,
                       MAINQ.uncheck_count,
                       MAINQ.ccpcount,
                       MAINQ.HIERARCHY_INDICATOR,
                       MAINQ.user_group,
                       MAINQ.SEC_HIERARCHYNO, SALES_INCLUSION,MAINQ.INSTTR
                FROM
                  (SELECT Q.account_growth,
                          Q.product_growth,
                          Q.projection_sales,
                          Q.projection_units,
                          Q.actualsales,
                          Q.actualunits,
                          Q.YEARS,
                          Q.PERIODS,
                          Q.calculation_periods,
                          Q.methodology,
                          Q.HIERARCHY_NO,
                          Q.SEC_HIERARCHYNO,
                          Q.rcount,
                          Q.actualproj,
                          Q.checkrec,
                          Q.uncheck_count,
                          Q.ccpcount,
                          Q.HIERARCHY_INDICATOR,
                          Q.user_group,
                          Dense_rank() OVER(
                                            ORDER BY Q.HIERARCHY_NO ASC) AS TEMP_INDEX,Q.SALES_INCLUSION,Q.INSTTR
                   FROM
                     (SELECT DISTINCT 0.0 AS ACCOUNT_GROWTH,
                             0.0 AS PRODUCT_GROWTH,
                             NULL AS PROJECTION_SALES,
                             NULL AS PROJECTION_UNITS,
                             MAS.ACTUAL_SALES AS actualSales,
                             MAS.ACTUAL_UNITS AS actualUnits,
                             SH."YEAR" AS YEARS,
                             SH.@FRE@ AS PERIODS,
                             SH.CALCULATION_PERIODS,
                             SH.METHODOLOGY,
                             SH.HIERARCHY_NO,
                             SH.SEC_HIERARCHYNO,
                             RCOUNT,
                             1 AS actualProj,
                             checkrec,
                             UNCHECK_COUNT,
                             CCPCOUNT,
                             SH.HIERARCHY_INDICATOR,
                             SH.USER_GROUP,MSPM.SALES_INCLUSION,SH.INSTTR
                      FROM (SELECT HIERARCHY_NO,year,CALCULATION_PERIODS,USER_GROUP,METHODOLOGY,P.@FREVAL@,INSTTR,HIERARCHY_INDICATOR,SHS.SEC_HIERARCHYNO FROM #SELECTED_HIERARCHY_NO SHS CROSS JOIN PERIOD P WHERE P.PERIOD_SID BETWEEN @STAT_PERIOD AND @EN_PERIOD GROUP BY  year,CALCULATION_PERIODS,USER_GROUP,METHODOLOGY,P.@FREVAL@,INSTtR,HIERARCHY_NO,HIERARCHY_INDICATOR,SHS.SEC_HIERARCHYNO) SH  left join 
  #ST_NM_SALES_PROJECTION_MASTER MSPM  ON MSPM.HIERARCHY_NO = sh.HIERARCHY_NO   AND MSPM.INSTTR=SH.INSTTR
                    left   JOIN #ST_NM_ACTUAL_SALES MAS ON MSPM.HIERARCHY_NO = MAS.HIERARCHY_NO and 
                    sh.YEAR=mas.year  and SH.@FRE@=mas.@FRE@ and (MSPM.SEC_HIERARCHYNO = MAS.SEC_HIERARCHYNO or MSPM.SEC_HIERARCHYNO is null )
                      UNION ALL SELECT DISTINCT MSP.ACCOUNT_GROWTH,
                                       MSP.PRODUCT_GROWTH,
                                       MSP.PROJECTION_SALES,
                                       MSP.PROJECTION_UNITS,
                                       NULL AS ACTUAL_SALES,
                                       NULL AS ACTUAL_UNITS,
                                       SH."YEAR" AS YEARS,
                                       SH.@FRE@ AS PERIODS,
                                       SH.CALCULATION_PERIODS,
                                       SH.METHODOLOGY,
                                       SH.HIERARCHY_NO,
                                       SH.SEC_HIERARCHYNO,
                                       RCOUNT,
                                       0 AS actualProj,
                                       checkrec,
                                       UNCHECK_COUNT,
                                       CCPCOUNT,
                                       SH.HIERARCHY_INDICATOR,
                                       SH.USER_GROUP,MSPM.SALES_INCLUSION,SH.INSTTR
                      FROM (SELECT HIERARCHY_NO,year,CALCULATION_PERIODS,USER_GROUP,METHODOLOGY,P.@FREVAL@,INSTtR,HIERARCHY_INDICATOR,SHS.SEC_HIERARCHYNO FROM #SELECTED_HIERARCHY_NO SHS CROSS JOIN PERIOD P WHERE P.PERIOD_SID BETWEEN @ACTUAL_START_PERIOD AND @ACTUAL_END_PERIOD GROUP BY  year,CALCULATION_PERIODS,USER_GROUP,METHODOLOGY,P.@FREVAL@,INSTtR,HIERARCHY_NO,HIERARCHY_INDICATOR,SHS.SEC_HIERARCHYNO) SH 
                    left join   #ST_NM_SALES_PROJECTION_MASTER MSPM  ON MSPM.HIERARCHY_NO = sh.HIERARCHY_NO AND SH.INSTTR=MSPM.INSTTR
                     left  JOIN #ST_NM_SALES_PROJECTION MSP ON MSPM.HIERARCHY_NO = MSP.HIERARCHY_NO and sh.YEAR=MSP.year  and SH.@FRE@=MSP.@FRE@  and (MSPM.SEC_HIERARCHYNO = MSP.SEC_HIERARCHYNO or MSPM.SEC_HIERARCHYNO is null ) ) Q) MAINQ
                WHERE MAINQ.TEMP_INDEX > @START
                  AND MAINQ.TEMP_INDEX <= (@START+@END)
                ORDER BY MAINQ.INSTTR,
                        MAINQ.HIERARCHY_NO,
                        MAINQ.SEC_HIERARCHYNO,
                        MAINQ.YEARS,
                        MAINQ.PERIODS;
              ]]>
        </query>
    </entity>
    
    <entity id="custom-view-count-query">
        <query>
            <![CDATA[    
                SELECT
                    COUNT(DISTINCT SHN.HIERARCHY_NO)
                FROM
                    #SELECTED_HIERARCHY_NO SHN;        
            ]]>
        </query>
    </entity>
    
    <entity id="custom-view-hiearchy-no-query">
        <query>
            <![CDATA[    
                SELECT
                    DISTINCT SHN.HIERARCHY_NO
                FROM
                    #SELECTED_HIERARCHY_NO SHN
                ORDER BY SHN.HIERARCHY_NO
                OFFSET [?START] ROWS FETCH NEXT [?END] ROWS ONLY;        
            ]]>
        </query>
    </entity>	
    <entity id="hiearchy-no-count-query">
        <query>
            <![CDATA[    
                IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(500),INSTR INT,CCP_DETAILS_SID INT,RELATIONSHIP_LEVEL_VALUES VARCHAR(50))

                INSERT INTO #SELECTED_HIERARCHY_NO 
                (HIERARCHY_NO,INSTR,
                CCP_DETAILS_SID,RELATIONSHIP_LEVEL_VALUES)
                SELECT DISTINCT A.HIERARCHY_NO,INSTR,CH.CCP_DETAILS_SID,RELATIONSHIP_LEVEL_VALUES
                FROM   (VALUES [?HIERARCHY_NO_VALUES])A(HIERARCHY_NO,INSTR)
                JOIN ST_CCP_HIERARCHY CH ON CH.[?HIERARCHY_COLUMN] LIKE A.HIERARCHY_NO+'%'
                [?TAB_BASED_JOIN]
            ]]>
        </query>
    </entity>
    
    <entity id="hiearchy-no-query">
        <query>
            <![CDATA[    
                IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(500),INSTR INT,CCP_DETAILS_SID INT,RELATIONSHIP_LEVEL_VALUES VARCHAR(50))

                INSERT INTO #SELECTED_HIERARCHY_NO 
                (HIERARCHY_NO,INSTR,
                CCP_DETAILS_SID,RELATIONSHIP_LEVEL_VALUES)
                SELECT DISTINCT A.HIERARCHY_NO,INSTR,CH.CCP_DETAILS_SID,RELATIONSHIP_LEVEL_VALUES
                FROM   (VALUES [?HIERARCHY_NO_VALUES])A(HIERARCHY_NO,INSTR)
                JOIN ST_CCP_HIERARCHY CH ON CH.[?HIERARCHY_COLUMN] LIKE A.HIERARCHY_NO+'%'
                [?TAB_BASED_JOIN]

            ]]>
        </query>
    </entity>	
    
    <entity id="line-level-update">
        <query>
            <![CDATA[
                UPDATE NMSP
                SET [?UPDATE_LINE]
                FROM #SELECTED_HIERARCHY_NO SHN 
                JOIN ST_NM_SALES_PROJECTION NMSP ON NMSP.CCP_DETAILS_SID = SHN.CCP_DETAILS_SID 
                JOIN CCP_DETAILS CCP ON CCP.CCP_DETAILS_SID=NMSP.CCP_DETAILS_SID
                @CCP_DETAIL_JOIN
                JOIN ST_PRODUCT_FILE PF ON PF.ITEM_MASTER_SID=CCP.ITEM_MASTER_SID
                           AND PF.PERIOD_SID=NMSP.PERIOD_SID
                JOIN PERIOD P ON P.PERIOD_SID = NMSP.PERIOD_SID
                [?PERIOD_RESTRICTION];
            ]]>
        </query>
    </entity>
    
    <entity id="check-record-update">
        <query>
            <![CDATA[
            UPDATE NMSPM
                SET CHECK_RECORD = [?CHECK_RECORD]
            FROM #SELECTED_HIERARCHY_NO SHN 
            JOIN ST_NM_SALES_PROJECTION_MASTER NMSPM ON NMSPM.CCP_DETAILS_SID = SHN.CCP_DETAILS_SID
            ]]>
        </query>
    </entity>
    
        
    <entity id="check-all-record-update">
        <query>
            <![CDATA[
            UPDATE NMSPM
                SET CHECK_RECORD = [?CHECK_RECORD]
            FROM ST_NM_SALES_PROJECTION_MASTER NMSPM;
            ]]>
        </query>
    </entity>
    
    <entity id="save-calculation-selection">
        <query>
            <![CDATA[
     
            DECLARE @frequency char(1) = '@selectedfreq',
                    @year int = @startyear,
                    @period int = @startperiodvalue,
                    @year1 int = @endyear,
                    @period1 int = @endPeriodvalue,
                    @startperiod int,
                    @endperiod int

            SELECT
                @startperiod = MIN(PERIOD_SID)
                FROM PERIOD
                WHERE year = @year
                AND ((@FREQUENCY = 'Q'
                AND QUARTER = @period)
                OR (@FREQUENCY = 'S'
                AND SEMI_ANNUAL = @period)
                OR (@FREQUENCY = 'M'
                AND month = @period)
                OR @FREQUENCY = 'A')

            SELECT
                @endperiod = MAX(PERIOD_SID)
                FROM PERIOD
                WHERE year = @year1
                AND ((@FREQUENCY = 'Q'
                AND QUARTER = @period1)
                OR (@FREQUENCY = 'S'
                AND SEMI_ANNUAL = @period1)
                OR (@FREQUENCY = 'M'
                AND month = @period1)
                OR @FREQUENCY = 'A')

            UPDATE SPM
                SET METHODOLOGY = '@METHODOLOGY',
                CALCULATION_PERIODS = '@CALCULATION_PERIODS'
                FROM @MASTER_TABLE SPM                
                WHERE 
                @USERID_ADD
                CHECK_RECORD = 1; 
              
      ]]>
        </query>
    </entity>
    
    <entity id="mass-update">
        <query>
            <![CDATA[
                UPDATE 
                    @TABLE_NAME
                SET 
                    @COLUMN_NAME = @VALUE
                FROM 
                    @PROJECTION_TABLE SP
                JOIN 
                    @MASTER_TABLE SPM 
                    @JOIN_CONDITION
                JOIN 
                    PERIOD P 
                    ON P.PERIOD_SID = SP.PERIOD_SID
                WHERE 
                    @USERID_ADD
                    SPM.CHECK_RECORD = 1
                    AND P.PERIOD_SID IN (SELECT PERIOD_SID FROM "PERIOD" where "YEAR" >= @START_YEAR and "YEAR" <= @END_YEAR
                    AND P.PERIOD_SID NOT IN(SELECT PERIOD_SID FROM "PERIOD" where "YEAR" = @START_YEAR @START_FREQUENCY)
                    AND P.PERIOD_SID NOT IN(SELECT PERIOD_SID FROM "PERIOD" where "YEAR" = @END_YEAR  @END_FREQUENCY));    
         ]]>
        </query>
    </entity>
    
    <entity id="save-adjustment-selection">
        <query>
            <![CDATA[
            
                UPDATE 
                    SP
                SET 
                    ADJUSTMENT_TYPE = '@ADJUSTMENT_TYPE',
                    ADJUSTMENT_VALUES = '@ADJUSTMENT_VALUES',
                    ADJUSTMENT_BASIS = '@ADJUSTMENT_BASIS',
                    ADJUSTMENT_VARIABLE = '@ADJUSTMENT_VARIABLE',
                    ADJUSTMENT_METHODOLOGY = '@ADJUSTMENT_METHODOLOGY'
                FROM 
                    @PROJECTION_TABLE SP
                JOIN 
                    @MASTER_TABLE SPM 
                    @JOIN_CONDITION
                JOIN 
                    PERIOD P 
                    ON P.PERIOD_SID = SP.PERIOD_SID
                WHERE 
                    @USERID_ADD
                    SPM.CHECK_RECORD = 1;
            ]]>
        </query>
    </entity>

    <entity id="group-filter-save">
        <query>
            <![CDATA[
                UPDATE STM
                SET USER_GROUP = '[?USER_GROUP]'
                FROM ST_NM_SALES_PROJECTION_MASTER STM
                JOIN ST_CCP_HIERARCHY CH ON CH.CCP_DETAILS_SID = STM.CCP_DETAILS_SID
                WHERE CH.CUST_HIERARCHY_NO LIKE '[?HIERARCHY_NO]%'
            ]]>
        </query>
    </entity>
    
    <entity id="hiearchy-no-discount-query-excel">
        <query>
            <![CDATA[  
              IF Object_id('TEMPDB..#SELECTED_REBATE') IS NOT NULL
    DROP TABLE #SELECTED_REBATE

  CREATE TABLE #SELECTED_REBATE
    (
       RS_CONTRACT_SID int
    )

  INSERT INTO #SELECTED_REBATE
              (RS_CONTRACT_SID)
  SELECT RS_CONTRACT_SID
                     FROM   RS_CONTRACT where RS_CONTRACT_SID in ( [?RS_MODEL_SID]);
  
                   IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                       DROP TABLE #SELECTED_HIERARCHY_NO

                     CREATE TABLE #SELECTED_HIERARCHY_NO
                       (
                          HIERARCHY_NO    VARCHAR(50),
                          CCP_DETAILS_SID INT,
                          RS_CONTRACT_SID INT
                       )

                     INSERT INTO #SELECTED_HIERARCHY_NO
                     (CCP_DETAILS_SID,
                RS_CONTRACT_SID,
                         HIERARCHY_NO
                         )
                 SELECT A.CCP_DETAILS_SID,
                        SR.RS_CONTRACT_SID,
                                      HIERARCHY_NO

                                   FROM   #SELECTED_REBATE SR
                              JOIN (SELECT MAS.CCP_DETAILS_SID,RS_CONTRACT_SID,a.HIERARCHY_NO
                                                     FROM   ST_NM_DISCOUNT_PROJ_MASTER    MAS
                                                                 JOIN ST_CCP_HIERARCHY    CH
                                                                         ON MAS.CCP_DETAILS_SID = CH.CCP_DETAILS_SID
                 JOIN (VALUES [?HIERARCHY_NO_VALUES])A(HIERARCHY_NO)
                ON CH.[?HIERARCHY_COLUMN] LIKE A.HIERARCHY_NO+'%'
               )A ON SR.RS_CONTRACT_SID=A.RS_CONTRACT_SID

                        JOIN ST_NM_DISCOUNT_PROJ_MASTER    DPM
                              ON DPM.RS_CONTRACT_SID = SR.RS_CONTRACT_SID
                                                 AND DPM.CCP_DETAILS_SID=A.CCP_DETAILS_SID

                SELECT DISTINCT HIERARCHY_NO FROM #SELECTED_HIERARCHY_NO
                ORDER BY HIERARCHY_NO
                OFFSET [?START] ROWS FETCH NEXT [?END] ROWS ONLY;
            ]]>
        </query>
    </entity>	
                      
    <entity id="custom-view-hiearchy-no-discount-query">
        <query>
            <![CDATA[    
                        DECLARE @VAR CHAR(1)='R'
                                DECLARE @FREQUENCY                     CHAR(1)='Q'
                                DECLARE @CUST_RELATIONSHIP_BUILDER_SID INT=[?CUST_RELATIONSHIP_BUILDER_SID]
                                DECLARE @PROD_RELATIONSHIP_BUILDER_SID INT=[?PROD_RELATIONSHIP_BUILDER_SID]
                               DECLARE @CUSTOM_VIEW_MASTER_SID        INT=[?CUSTOM_VIEW_MASTER_SID]
  IF Object_id('TEMPDB..#SELECTED_REBATE') IS NOT NULL
    DROP TABLE #SELECTED_REBATE

  CREATE TABLE #SELECTED_REBATE
    (
       RS_CONTRACT_SID INT
    )


      INSERT INTO #SELECTED_REBATE (RS_CONTRACT_SID)
      SELECT RS_CONTRACT_SID
      FROM RS_CONTRACT
      where RS_CONTRACT_SID in ( [?RS_MODEL_SID]);

       IF Object_id('TEMPDB..#PARENT_HIERARCHY') IS NOT NULL
         DROP TABLE #PARENT_HIERARCHY

       CREATE TABLE #PARENT_HIERARCHY
         (
            CCP_DETAILS_SID           INT,
            HIERARCHY_NO              VARCHAR(50),
            LEVEL_NAME                VARCHAR(75),
            LEVEL_NO                  SMALLINT,
            RELATIONSHIP_LEVEL_VALUES VARCHAR(50)
         )

       INSERT INTO #PARENT_HIERARCHY
                   (CCP_DETAILS_SID,
                    HIERARCHY_NO,
                    LEVEL_NAME,
                    LEVEL_NO,
                    RELATIONSHIP_LEVEL_VALUES)
       SELECT DISTINCT CH.ccp_details_sid,
                       RLD.HIERARCHY_NO,
                       RLD.LEVEL_NAME,
                       C.LEVEL_NO,
                       RLD.RELATIONSHIP_LEVEL_VALUES
       FROM   CUSTOM_VIEW_DETAILS C
              JOIN RELATIONSHIP_LEVEL_DEFINITION RLD
                ON C.HIERARCHY_ID = RLD.HIERARCHY_LEVEL_DEFINITION_SID
                   AND RELATIONSHIP_BUILDER_SID IN ( @CUST_RELATIONSHIP_BUILDER_SID, @PROD_RELATIONSHIP_BUILDER_SID )
              JOIN ST_CCP_HIERARCHY  CH
                ON CH.CUST_HIERARCHY_NO LIKE RLD.HIERARCHY_NO + '%'
                    OR CH.PROD_HIERARCHY_NO LIKE RLD.HIERARCHY_NO + '%'
              JOIN ST_NM_DISCOUNT_PROJ_MASTER  PPA
                ON PPA.CCP_DETAILS_SID = CH.CCP_DETAILS_SID
       WHERE  CUSTOM_VIEW_MASTER_SID = @CUSTOM_VIEW_MASTER_SID

       IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
         DROP TABLE #SELECTED_HIERARCHY_NO

       CREATE TABLE #SELECTED_HIERARCHY_NO
         (
            HIERARCHY_NO        VARCHAR(50),
            CCP_DETAILS_SID     INT,
            RS_MODEL_SID        INT,
            PARENT_HIERARCHY_NO VARCHAR(1000),
            LEVEL_NO            INT
         )

       INSERT INTO #SELECTED_HIERARCHY_NO
                   (HIERARCHY_NO,
                    CCP_DETAILS_SID,
                    PARENT_HIERARCHY_NO,
                    LEVEL_NO)
       SELECT HIERARCHY_NO,
              CCP_DETAILS_SID,
              LEFT(PARENT_HIERARCHY_NO, Len(PARENT_HIERARCHY_NO) - 1),
              LEVEL_NO
       FROM   #PARENT_HIERARCHY A
              CROSS APPLY (SELECT HIERARCHY_NO + '~'
                           FROM   #PARENT_HIERARCHY B
                           WHERE  A.CCP_DETAILS_SID = B.CCP_DETAILS_SID
                                  AND A.LEVEL_NO > B.LEVEL_NO
                           ORDER  BY LEVEL_NO
                           FOR XML PATH ('')) CS (PARENT_HIERARCHY_NO)
       ORDER  BY LEVEL_NO

       SELECT 
	DISTINCT HIERARCHY_NO,
	PARENT_HIERARCHY_NO,
	LEVEL_NO
FROM
	#SELECTED_HIERARCHY_NO s
WHERE
	EXISTS(
		SELECT
			1
		FROM
			ST_NM_DISCOUNT_PROJ_MASTER PPA join #SELECTED_REBATE r on
			r.RS_CONTRACT_SID = PPA.RS_CONTRACT_SID
		WHERE
			PPA.CCP_DETAILS_SID = s.CCP_DETAILS_SID
	)
 ORDER BY LEVEL_NO,HIERARCHY_NO,PARENT_HIERARCHY_NO
 OFFSET [?START] ROWS FETCH NEXT [?END] ROWS ONLY;        
            ]]>
        </query>
    </entity>
     	                                            
    <entity id="check-all-record-update-mandated">
        <query>
            <![CDATA[
            UPDATE MSPM
                SET CHECK_RECORD = [?CHECK_RECORD]
            FROM ST_M_SALES_PROJECTION_MASTER MSPM;
            ]]>
        </query>
    </entity>      
    
    <entity id="check-record-update-mandated">
        <query>
            <![CDATA[
            UPDATE MSPM
                SET CHECK_RECORD = [?CHECK_RECORD]
            FROM #SELECTED_HIERARCHY_NO SHN 
            JOIN ST_M_SALES_PROJECTION_MASTER MSPM ON MSPM.CCP_DETAILS_SID = SHN.CCP_DETAILS_SID;
            ]]>
        </query>
    </entity>  
    
    <entity id="custom-relationship">
        <query>
          <![CDATA[
IF Object_id('TEMPDB..#PARENT_HIERARCHY', 'U') IS NOT NULL
  DROP TABLE #PARENT_HIERARCHY

CREATE TABLE #PARENT_HIERARCHY
  (
     CCP_DETAILS_SID           INT,
     HIERARCHY_NO              VARCHAR(50),
     LEVEL_NAME                VARCHAR(75),
     LEVEL_NO                  SMALLINT,
     RELATIONSHIP_LEVEL_VALUES VARCHAR(50),
     HIERARCHY_INDICATOR       CHAR(1)
  )

INSERT INTO #PARENT_HIERARCHY
            (CCP_DETAILS_SID,
             HIERARCHY_NO,
             LEVEL_NAME,
             LEVEL_NO,
             RELATIONSHIP_LEVEL_VALUES,
             HIERARCHY_INDICATOR)
SELECT DISTINCT CH.CCP_DETAILS_SID,
                RLD.HIERARCHY_NO,
                RLD.LEVEL_NAME,
                C.LEVEL_NO,
                RLD.RELATIONSHIP_LEVEL_VALUES,
                HIERARCHY_INDICATOR
FROM   CUSTOM_VIEW_DETAILS C
       JOIN RELATIONSHIP_LEVEL_DEFINITION RLD
         ON C.HIERARCHY_ID = RLD.HIERARCHY_LEVEL_DEFINITION_SID
            AND RELATIONSHIP_BUILDER_SID IN ( [?CUST_RELATIONSHIP_BUILDER_SID], [?PROD_RELATIONSHIP_BUILDER_SID] )
       JOIN ST_CCP_HIERARCHY CH
         ON CH.CUST_HIERARCHY_NO LIKE RLD.HIERARCHY_NO + '%'
             OR CH.PROD_HIERARCHY_NO LIKE RLD.HIERARCHY_NO + '%'
       JOIN ST_NM_SALES_PROJECTION_MASTER PPA
         ON PPA.CCP_DETAILS_SID = CH.CCP_DETAILS_SID
WHERE  CUSTOM_VIEW_MASTER_SID = [?Custom_View_Master_SID] [?UserGroup] [?FILTERCCP]

IF Object_id('TEMPDB..#RESULT_HIERARCHY', 'U') IS NOT NULL
  DROP TABLE #RESULT_HIERARCHY

CREATE TABLE #RESULT_HIERARCHY
  (
     HIERARCHY_NO        VARCHAR(1000),
     LEVEL_NAME          VARCHAR(1000),
     LEVEL_NO            INT,
     HIERARCHY_INDICATOR CHAR(1),
     PARENT_HIERARCHY_NO VARCHAR(4000),
     RELATIONSHIP_LEVEL_VALUES VARCHAR(4000)
  )

INSERT INTO #RESULT_HIERARCHY
            (HIERARCHY_NO,
             LEVEL_NAME,
             LEVEL_NO,
             HIERARCHY_INDICATOR,
             PARENT_HIERARCHY_NO,
             RELATIONSHIP_LEVEL_VALUES)
SELECT DISTINCT HIERARCHY_NO,
                level_name,
                level_no,
                HIERARCHY_INDICATOR,
                LEFT(parent_hierarchy_no, Len(parent_hierarchy_no) - 1),
                RELATIONSHIP_LEVEL_VALUES
FROM   #PARENT_HIERARCHY a
       CROSS apply (SELECT CONVERT(VARCHAR(8000), HIERARCHY_NO + '~')
                    FROM   #PARENT_HIERARCHY b
                    WHERE  a.ccp_details_sid = b.ccp_details_sid
                           AND a.level_no > b.level_no
                    ORDER  BY level_no
                    FOR xml path ('')) cs (parent_hierarchy_no)
                    UPDATE A
SET A.HIERARCHY_NO = isnull(G.HIER, A.HIERARCHY_NO)
FROM #RESULT_HIERARCHY A
JOIN (SELECT PR.*
              ,STUFF((SELECT DISTINCT ', ' + R.HIERARCHY_NO HIER
                           FROM #RESULT_HIERARCHY R
                           WHERE CONVERT(INT, R.RELATIONSHIP_LEVEL_VALUES) = CONVERT(INT, PR.RELATIONSHIP_LEVEL_VALuES)
                                  AND (CASE WHEN r.level_no > 1
                                                       THEN r.PARENT_HIERARCHY_NO
                                                ELSE '1'
                                                END ) = (CASE
                                                WHEN pr.level_no > 1
                                                       THEN pr.PARENT_HIERARCHY_NO
                                                ELSE '1'
                                                END )
                                  AND r.level_no = pr.level_no
                           FOR XML PATH(''),TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, ' ') AS HIER
       FROM #RESULT_HIERARCHY PR) G ON G.HIERARCHY_NO = A.HIERARCHY_NO

SELECT DISTINCT HIERARCHY_NO,
       LEVEL_NAME,
       LEVEL_NO,
       HIERARCHY_INDICATOR,
       convert(VARCHAR(8000),STUFF(( SELECT DISTINCT ', ' + PARENT_HIERARCHY_NO
                           FROM #RESULT_HIERARCHY B
                           WHERE B.RELATIONSHIP_LEVEL_VALUES = A.RELATIONSHIP_LEVEL_VALUES
                           FOR XML PATH('')
                           ), 1, 2, '')) PARENT_HIERARCHY_NO
FROM   #RESULT_HIERARCHY A
order by level_no     
            ]]>
        </query>
    </entity>     
    
    <entity id="custom-relationship-hierarchy">
        <query>
            <![CDATA[
            IF OBJECT_ID('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO VARCHAR(500),INSTR INT)

                INSERT INTO #SELECTED_HIERARCHY_NO (HIERARCHY_NO,INSTR)
            
                SELECT HIERARCHY_NO ,ROW_NUMBER() OVER(ORDER BY LEVEL_NO)as instr  FROM  CUSTOM_CCP_SALES RLD1        
                 JOIN ST_CCP_HIERARCHY CH ON CH.CCP_DETAILS_SID  =RLD1.CCP_DETAILS_SID  
		 JOIN ST_NM_SALES_PROJECTION_MASTER SPM ON SPM.CCP_DETAILS_SID = CH.CCP_DETAILS_SID
            WHERE CUST_VIEW_MASTER_SID =@CUSTMASTERSID
                and SPM.USER_GROUP LIKE '%' GROUP BY CUST_VIEW_MASTER_SID,LEVEL_NO,HIERARCHY_NO 
                
                 Select  distinct HIERARCHY_NO from #SELECTED_HIERARCHY_NO order by HIERARCHY_NO  
            ]]>
        </query>
    </entity> 
    
                                
                                                                                        
    <entity id="sales-filter-customer">
        <query>
            <![CDATA[
SELECT HLD.FIELD_NAME,HLD.TABLE_NAME FROM dbo.PROJECTION_MASTER PM 
 JOIN  HIERARCHY_LEVEL_DEFINITION HLD on HLD.HIERARCHY_DEFINITION_SID=PM.CUSTOMER_HIERARCHY_SID 
WHERE PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID AND HLD.LEVEL_NO=@LEVEL  and HLD.VERSION_NO=@HIERVER   
            ]]>
        </query>
    </entity>       
                              
    <entity id="sales-filter-product">
        <query>
            <![CDATA[
SELECT HLD.FIELD_NAME,HLD.TABLE_NAME FROM dbo.PROJECTION_MASTER PM 
 JOIN  HIERARCHY_LEVEL_DEFINITION HLD on HLD.HIERARCHY_DEFINITION_SID=PM.PRODUCT_HIERARCHY_SID 
WHERE PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID AND HLD.LEVEL_NO=@LEVEL AND HLD.VERSION_NO=@HIERVER   
            ]]>
        </query>
    </entity>     
                                
    <entity id="primary-Key">
        <query>
            <![CDATA[
SELECT  DISTINCT PRIMARY_KEY_COLUMN_NAME FROM dbo.HIERARCHY_SINGLE_COLUMN_RELATION WHERE ACTUAL_TABLE_NAME='@TABLENAME'
            ]]>
        </query>
    </entity>           
                                 
                          
    <entity id="user-defined-join">
        <query>
            <![CDATA[
SELECT LEVEL_VALUE_REFERENCE FROM dbo.HIERARCHY_LEVEL_DEFINITION HLD 
JOIN dbo.PROJECTION_MASTER  PM ON PM.@HIERARCHY_SID=HLD.HIERARCHY_DEFINITION_SID WHERE PM.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID AND HLD.LEVEL_NO=@LEVEL
            ]]>
        </query>
    </entity>         
                            
    <entity id="user-defined-level-values">
        <query>
            <![CDATA[
SELECT
	DISTINCT 
	HLV.LEVEL_VALUES,HLV.HIERARCHY_LEVEL_VALUES_SID
FROM
	RELATIONSHIP_LEVEL_DEFINITION as RELATIONSHIP_LEVEL_DEFINITION
JOIN dbo.HIERARCHY_LEVEL_VALUES as HLV on
	RELATIONSHIP_LEVEL_DEFINITION.HIERARCHY_LEVEL_DEFINITION_SID = HLV.HIERARCHY_LEVEL_DEFINITION_SID
	and RELATIONSHIP_LEVEL_DEFINITION.RELATIONSHIP_LEVEL_VALUES=HLV.HIERARCHY_LEVEL_VALUES_SID AND RELATIONSHIP_LEVEL_DEFINITION.VERSION_NO=@VER
JOIN dbo.PROJECTION_MASTER PM ON PM.CUST_RELATIONSHIP_BUILDER_SID=RELATIONSHIP_LEVEL_DEFINITION.RELATIONSHIP_BUILDER_SID
	WHERE RELATIONSHIP_LEVEL_DEFINITION.LEVEL_NO = @LEVEL AND PM.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID
            ]]>
        </query>
    </entity>   
                                  
    <entity id="uom-dropdown-loading">
        <query>
            <![CDATA[
                    SELECT distinct UOM_CODE FROM ST_ITEM_UOM_DETAILS where UOM_CODE <>'EACH'
            ]]>
        </query>
    </entity>                                 
    <entity id="update-Customer">
        <query>
            <![CDATA[
                    IF OBJECT_ID('TEMPDB..#CUSTOMER') IS NOT NULL
DROP TABLE #CUSTOMER
CREATE TABLE #CUSTOMER (HIERARCHY_NO VARCHAR(8000))
 
INSERT INTO #CUSTOMER (HIERARCHY_NO)
SELECT HIERARCHY_NO
FROM RELATIONSHIP_LEVEL_DEFINITION
WHERE RELATIONSHIP_LEVEL_VALUES IN (
              @RELATIONSIDS
              )
       AND RELATIONSHIP_BUILDER_SID = @BUILDERSID  
 

            ]]>
        </query>
    </entity>                                 
    <entity id="update-Product">
        <query>
            <![CDATA[
                    IF OBJECT_ID('TEMPDB..#PRODUCT') IS NOT NULL
                    DROP TABLE #PRODUCT

                    CREATE TABLE #PRODUCT (HIERARCHY_NO VARCHAR(8000))

                    INSERT INTO #PRODUCT (HIERARCHY_NO)
                    SELECT HIERARCHY_NO
                    FROM RELATIONSHIP_LEVEL_DEFINITION
                    WHERE RELATIONSHIP_LEVEL_VALUES IN (
                                  @RELATIONSIDS
                                  )
                    AND RELATIONSHIP_BUILDER_SID = @BUILDERSID   
            ]]>
        </query>
    </entity>                                 
    <entity id="update-Filter-CCP">
        <query>
            <![CDATA[
                    UPDATE SPM
                    SET SPM.FILTER_CCP = 1 FROM ST_CCP_HIERARCHY ST
            ]]>
        </query>
    </entity>   
                                  
    <entity id="product-dynamic-filter">
        <query>
            <![CDATA[
                  IF OBJECT_ID('TEMPDB..#HIER_PRODUCT') IS NOT NULL
            DROP TABLE #HIER_PRODUCT


            CREATE TABLE #HIER_PRODUCT
            (
            HIERARCHY_NO VARCHAR(1000)
            )
            INSERT #HIER_PRODUCT
            (
            HIERARCHY_NO
            )

            SELECT HIERARCHY_NO FROM RELATIONSHIP_LEVEL_DEFINITION WHERE RELATIONSHIP_LEVEL_VALUES IN
            (
            @LEVELVALUES
            )
            and RELATIONSHIP_BUILDER_SID=@RELBUILDSID 
            ]]>
        </query>
    </entity>           
                          
    <entity id="customer-dynamic-filter">
        <query>
            <![CDATA[
                  IF OBJECT_ID('TEMPDB..#HIER_CUST') IS NOT NULL
                DROP TABLE #HIER_CUST
 
 
                CREATE TABLE #HIER_CUST
                (
               HIERARCHY_NO VARCHAR(1000)
                )
              INSERT #HIER_CUST
              (
              HIERARCHY_NO
              )

              SELECT HIERARCHY_NO FROM RELATIONSHIP_LEVEL_DEFINITION WHERE RELATIONSHIP_LEVEL_VALUES IN
              (
              @LEVELVALUES
              )
                and RELATIONSHIP_BUILDER_SID=@RELBUILDSID 
 
 
            ]]>
        </query>
    </entity>         
    <entity id="deduction-dynamic-filter">
        <query>
            <![CDATA[
                  IF OBJECT_ID('TEMPDB..#HIER_DEDUCTION_PROD') IS NOT NULL
                DROP TABLE #HIER_DEDUCTION_PROD


                CREATE TABLE #HIER_DEDUCTION_PROD
                (
                HIERARCHY_NO VARCHAR(1000)
                )
              INSERT #HIER_DEDUCTION_PROD
              (
              HIERARCHY_NO
              )

              SELECT HIERARCHY_NO FROM RELATIONSHIP_LEVEL_DEFINITION WHERE RELATIONSHIP_LEVEL_VALUES IN
              (
              @DEDLEVELVALUES
              )
              and RELATIONSHIP_BUILDER_SID=@DEDRELBUILDSID
              
              
            ]]>
        </query>
    </entity>         
                            
    <entity id="deduction-loading">
        <query>
            <![CDATA[
            
                  SELECT distinct LEVEL_NO,LEVEL_NAME FROM dbo.HIERARCHY_LEVEL_DEFINITION HLD 
                  JOIN dbo.PROJECTION_MASTER PM ON PM.DEDUCTION_HIERARCHY_SID=HLD.HIERARCHY_DEFINITION_SID WHERE PM.PROJECTION_MASTER_SID=@PROJID
 
 
            ]]>
        </query>
    </entity>      
    
    
<entity id="mass-update-sales-units">
<query>
    <![CDATA[

    DECLARE @START_QUARTER VARCHAR(50) = '?'
DECLARE @END_QUARTER VARCHAR(50) = '?'
DECLARE @DISCOUNT_AMOUNT NUMERIC(22, 6) = ?
DECLARE @FREQUENCY CHAR(1) = '?'
DECLARE @START_PERIOD_SID INT
DECLARE @END_PERIOD_SID INT
DECLARE @FREQUENCY_COUNT INT
DECLARE @QUARTERS_COUNT INT
 
 
IF Object_id('TEMPDB.DBO.#PERIOD', 'U') IS NOT NULL
       DROP TABLE #PERIOD;
 
SELECT PERIOD_SID,
       PERIOD_DATE,
       MONTH AS PERIOD_MONTH,
       QUARTER AS PERIOD_QUARTER,
       SEMI_ANNUAL AS PERIOD_SEMI,
       YEAR AS PERIOD_YEAR,
       CASE
              WHEN @FREQUENCY = 'M'
                     THEN CONCAT ( 'M', MONTH, ' ', YEAR )
              WHEN @FREQUENCY = 'Q'
                     THEN CONCAT ( 'Q', QUARTER, ' ', YEAR )
              WHEN @FREQUENCY = 'S'
                     THEN CONCAT ( 'S', SEMI_ANNUAL, ' ', YEAR )
              ELSE Cast(YEAR AS CHAR(4))
              END AS PERIOD,
       CASE
              WHEN @FREQUENCY = 'M'
                     THEN MONTH
              WHEN @FREQUENCY = 'Q'
                     THEN QUARTER
              WHEN @FREQUENCY = 'S'
                     THEN SEMI_ANNUAL
              ELSE YEAR
              END AS ROLL_PERIOD
INTO #PERIOD
FROM PERIOD
 
SELECT @START_PERIOD_SID = MIN(PERIOD_SID)
FROM #PERIOD
WHERE PERIOD = @START_QUARTER
 
SELECT @END_PERIOD_SID = MAX(PERIOD_SID)
FROM #PERIOD
WHERE PERIOD = @END_QUARTER
 
SET @FREQUENCY_COUNT = (
              SELECT CASE
                           WHEN @FREQUENCY = 'M'
                                  THEN 1
                           WHEN @FREQUENCY = 'Q'
                                  THEN 3
                           WHEN @FREQUENCY = 'S'
                                  THEN 6
                           ELSE 12
                           END
              );
SET @QUARTERS_COUNT = ((@END_PERIOD_SID - @START_PERIOD_SID) + 1) / @FREQUENCY_COUNT
 
IF OBJECT_ID('TEMPDB..#HIER_NO') IS NOT NULL
       DROP TABLE #HIER_NO
 
CREATE TABLE #HIER_NO (
       HIERARCHY_NO VARCHAR(1000),
       CCP_DETAILS_SID INT
       )
 
INSERT INTO #HIER_NO (
       HIERARCHY_NO,
       CCP_DETAILS_SID
       )
SELECT DISTINCT HIERARCHY_NO,
       CCP_DETAILS_SID
FROM (
       VALUES @HIERARCHY_NO_VALUES
       ) A(HIERARCHY_NO)
INNER JOIN ST_CCP_HIERARCHY B
       ON (
                     B.CUST_HIERARCHY_NO LIKE HIERARCHY_NO + '%'
                     OR B.PROD_HIERARCHY_NO LIKE HIERARCHY_NO + '%'
                     )
WHERE EXISTS (
              SELECT 1
              FROM ST_NM_SALES_PROJECTION_MASTER ST
              WHERE CHECK_RECORD = 1
                     AND ST.CCP_DETAILS_SID = B.CCP_DETAILS_SID
                     @SALES_INCLUSION_ST
              )
 
UPDATE SP
SET [UPDATE_LINE]
FROM ST_NM_SALES_PROJECTION SP
INNER JOIN ST_NM_SALES_PROJECTION_MASTER SP1
       ON SP.CCP_DETAILS_SID = SP1.CCP_DETAILS_SID
JOIN CCP_DETAILS CCP ON CCP.CCP_DETAILS_SID=SP.CCP_DETAILS_SID
JOIN ST_PRODUCT_FILE PF ON PF.ITEM_MASTER_SID=CCP.ITEM_MASTER_SID
AND PF.PERIOD_SID=SP.PERIOD_SID
INNER JOIN #PERIOD P
       ON SP.PERIOD_SID = P.PERIOD_SID
INNER JOIN (
       SELECT HIERARCHY_NO,
              CCP_DETAILS_SID,
              COUNT(CCP_DETAILS_SID) OVER (PARTITION BY HIERARCHY_NO) CCPS_COUNT
       FROM #HIER_NO
       ) CC
       ON CC.CCP_DETAILS_SID = SP1.CCP_DETAILS_SID
WHERE P.PERIOD_SID BETWEEN @START_PERIOD_SID
              AND @END_PERIOD_SID
              @SALES_INCLUSION
 
 
   ]]>

        </query>
    </entity>
    
<entity id="mass-update-sales-units-Custom">
<query>
    <![CDATA[

   
    

    DECLARE @START_QUARTER VARCHAR(50) = '?'
DECLARE @END_QUARTER VARCHAR(50) = '?'
DECLARE @DISCOUNT_AMOUNT NUMERIC(22, 6) = ?
DECLARE @FREQUENCY CHAR(1) = '?'
DECLARE @START_PERIOD_SID INT
DECLARE @END_PERIOD_SID INT
DECLARE @FREQUENCY_COUNT INT
DECLARE @QUARTERS_COUNT INT
 
 
IF Object_id('TEMPDB.DBO.#PERIOD', 'U') IS NOT NULL
       DROP TABLE #PERIOD;
 
SELECT PERIOD_SID,
       PERIOD_DATE,
       MONTH AS PERIOD_MONTH,
       QUARTER AS PERIOD_QUARTER,
       SEMI_ANNUAL AS PERIOD_SEMI,
       YEAR AS PERIOD_YEAR,
       CASE
              WHEN @FREQUENCY = 'M'
                     THEN CONCAT ( 'M', MONTH, ' ', YEAR )
              WHEN @FREQUENCY = 'Q'
                     THEN CONCAT ( 'Q', QUARTER, ' ', YEAR )
              WHEN @FREQUENCY = 'S'
                     THEN CONCAT ( 'S', SEMI_ANNUAL, ' ', YEAR )
              ELSE Cast(YEAR AS CHAR(4))
              END AS PERIOD,
       CASE
              WHEN @FREQUENCY = 'M'
                     THEN MONTH
              WHEN @FREQUENCY = 'Q'
                     THEN QUARTER
              WHEN @FREQUENCY = 'S'
                     THEN SEMI_ANNUAL
              ELSE YEAR
              END AS ROLL_PERIOD
INTO #PERIOD
FROM PERIOD
 
SELECT @START_PERIOD_SID = MIN(PERIOD_SID)
FROM #PERIOD
WHERE PERIOD = @START_QUARTER
 
SELECT @END_PERIOD_SID = MAX(PERIOD_SID)
FROM #PERIOD
WHERE PERIOD = @END_QUARTER
 
SET @FREQUENCY_COUNT = (
              SELECT CASE
                           WHEN @FREQUENCY = 'M'
                                  THEN 1
                           WHEN @FREQUENCY = 'Q'
                                  THEN 3
                           WHEN @FREQUENCY = 'S'
                                  THEN 6
                           ELSE 12
                           END
              );
SET @QUARTERS_COUNT = ((@END_PERIOD_SID - @START_PERIOD_SID) + 1) / @FREQUENCY_COUNT
 
IF OBJECT_ID('TEMPDB..#HIER_NO') IS NOT NULL
       DROP TABLE #HIER_NO
 
CREATE TABLE #HIER_NO (
       HIERARCHY_NO VARCHAR(1000),
       CCP_DETAILS_SID INT
       )
 
INSERT INTO #HIER_NO (
       HIERARCHY_NO,
       CCP_DETAILS_SID
       )
SELECT DISTINCT A.HIERARCHY_NO,
       B.CCP_DETAILS_SID
FROM (
       VALUES @HIERARCHY_NO_VALUES
       ) A(HIERARCHY_NO)
	   JOIN CUSTOM_CCP_SALES RLD1 ON RLD1.HIERARCHY_NO=A.HIERARCHY_NO AND RLD1.CUST_VIEW_MASTER_SID=@CUSTSID
INNER JOIN ST_CCP_HIERARCHY B
       ON B.CCP_DETAILS_SID=RLD1.CCP_DETAILS_SID
WHERE EXISTS (
              SELECT 1
              FROM ST_NM_SALES_PROJECTION_MASTER ST
              WHERE CHECK_RECORD = 1
                     AND ST.CCP_DETAILS_SID = B.CCP_DETAILS_SID
                     @SALES_INCLUSION_ST
              )
 
UPDATE SP
SET [UPDATE_LINE]
FROM ST_NM_SALES_PROJECTION SP
INNER JOIN ST_NM_SALES_PROJECTION_MASTER SP1
       ON SP.CCP_DETAILS_SID = SP1.CCP_DETAILS_SID
       JOIN CCP_DETAILS CCP ON CCP.CCP_DETAILS_SID=SP.CCP_DETAILS_SID
JOIN ST_PRODUCT_FILE PF ON PF.ITEM_MASTER_SID=CCP.ITEM_MASTER_SID
AND PF.PERIOD_SID=SP.PERIOD_SID
INNER JOIN #PERIOD P
       ON SP.PERIOD_SID = P.PERIOD_SID
INNER JOIN (
       SELECT HIERARCHY_NO,
              CCP_DETAILS_SID,
              COUNT(CCP_DETAILS_SID) OVER (PARTITION BY HIERARCHY_NO) CCPS_COUNT
       FROM #HIER_NO
       ) CC
       ON CC.CCP_DETAILS_SID = SP1.CCP_DETAILS_SID
WHERE P.PERIOD_SID BETWEEN @START_PERIOD_SID
              AND @END_PERIOD_SID
               @SALES_INCLUSION
 
 
   

        
   ]]>

        </query>
    </entity>
    
    
    <entity id="selected-Hierarchy-Query-sales">
<query>
    <![CDATA[

     IF Object_id('TEMPDB..#SELECTED_SYSTEM_HIERARCHY_NO') IS NOT NULL DROP
        TABLE
        #SELECTED_SYSTEM_HIERARCHY_NO CREATE
        TABLE
        #SELECTED_SYSTEM_HIERARCHY_NO(
        HIERARCHY_NO VARCHAR(500),
        RELATIONSHIP_LEVEL_SID INT,
        LEVEL_NO INT
        ) INSERT
        into
        #SELECTED_SYSTEM_HIERARCHY_NO(HIERARCHY_NO,RELATIONSHIP_LEVEL_SID,LEVEL_NO)
 
 
                SELECT
                RLD.HIERARCHY_NO,
                RELATIONSHIP_LEVEL_SID,LEVEL_NO
                from
                dbo.PROJECTION_MASTER PM
                JOIN dbo.PROJECTION_DETAILS PD on
                PD.PROJECTION_MASTER_SID = PM.PROJECTION_MASTER_SID
                JOIN dbo.RELATIONSHIP_LEVEL_DEFINITION RLD on
                rld.RELATIONSHIP_BUILDER_SID = PM.@REL_BUILD_ID
                and rld.VERSION_NO = PM.@CUSTPRODVER
                JOIN dbo.ST_CCP_HIERARCHY CCP on
                ccp.CCP_DETAILS_SID = PD.CCP_DETAILS_SID
                JOIN dbo.ST_NM_SALES_PROJECTION_MASTER as TEMP on
                pd.CCP_DETAILS_SID = TEMP.CCP_DETAILS_SID
                where
                pm.PROJECTION_MASTER_SID = @PROJ_ID
                and RLD.LEVEL_NO >= @LEVEL_NO
                and CCP.@HIER_NO LIKE RLD.HIERARCHY_NO + '%' 
                GROUP by
                HIERARCHY_no,RLD.RELATIONSHIP_LEVEL_SID,LEVEL_NO
                HAVING
                Sum( CASE( CHECK_RECORD ) WHEN 1 THEN 1 ELSE 0 END )= COUNT( TEMP.CCP_DETAILS_SID )
                order by RLD.LEVEL_NO




                DELETE M FROM #SELECTED_SYSTEM_HIERARCHY_NO M JOIN
                (
                SELECT C.* FROM
                #SELECTED_SYSTEM_HIERARCHY_NO A
                CROSS APPLY
                (
                SELECT * FROM #SELECTED_SYSTEM_HIERARCHY_NO B  WHERE b.HIERARCHY_NO LIKE a.HIERARCHY_NO+'[0-9]%'
                )C
                )B ON M.HIERARCHY_NO=B.HIERARCHY_NO

      SELECT distinct HIERARCHY_NO from #SELECTED_SYSTEM_HIERARCHY_NO


   ]]>

        </query>
    </entity>
    
    <entity id="selected-Hierarchy-Query-sales-Custom">
<query>
    <![CDATA[

    
      IF OBJECT_ID('TEMPDB..#SELECTED_SYSTEM_HIERARCHY_NO') IS NOT NULL DROP

        TABLE #SELECTED_SYSTEM_HIERARCHY_NO

        CREATE TABLE #SELECTED_SYSTEM_HIERARCHY_NO(

        HIERARCHY_NO VARCHAR(50),

        LEVEL_NO INT)

    INSERT INTO #SELECTED_SYSTEM_HIERARCHY_NO(HIERARCHY_NO,LEVEL_NO)

 

                SELECT DISTINCT

                RLD.HIERARCHY_NO,LEVEL_NO

                FROM    CUSTOM_CCP_SALES RLD

                JOIN DBO.ST_CCP_HIERARCHY CCP ON

                CCP.CCP_DETAILS_SID = RLD.CCP_DETAILS_SID  AND   CUST_VIEW_MASTER_SID=@CUSTID

                JOIN DBO.ST_NM_SALES_PROJECTION_MASTER AS TEMP ON

                CCP.CCP_DETAILS_SID = TEMP.CCP_DETAILS_SID

                GROUP BY

                RLD.HIERARCHY_NO,LEVEL_NO

                HAVING

                SUM( CASE( CHECK_RECORD ) WHEN 1 THEN 1 ELSE 0 END )= COUNT( TEMP.CCP_DETAILS_SID )

                ORDER BY RLD.LEVEL_NO

 

                DELETE M FROM #SELECTED_SYSTEM_HIERARCHY_NO M JOIN
                (
                SELECT C.* FROM
                #SELECTED_SYSTEM_HIERARCHY_NO A
                CROSS APPLY
                (
                SELECT * FROM #SELECTED_SYSTEM_HIERARCHY_NO B  WHERE B.HIERARCHY_NO LIKE A.HIERARCHY_NO+'[0-9]%'
                )C
                )B ON M.HIERARCHY_NO=B.HIERARCHY_NO

      SELECT DISTINCT HIERARCHY_NO FROM #SELECTED_SYSTEM_HIERARCHY_NO
   

   ]]>

        </query>
    </entity>
    
     <entity id="mass-update-sales-check">
<query>
    <![CDATA[

     DECLARE @START_QUARTER VARCHAR(50) = '?'
    DECLARE @END_QUARTER VARCHAR(50) = '?'
    DECLARE @DISCOUNT_AMOUNT NUMERIC(22, 6) = ?
    DECLARE @FREQUENCY CHAR(1) = '?'
    DECLARE @CCP_COUNT INT
    DECLARE @START_PERIOD_SID INT
    DECLARE @END_PERIOD_SID INT
    DECLARE @FREQUENCY_COUNT INT
    DECLARE @QUARTERS_COUNT INT


    SELECT @CCP_COUNT = Count(CCP_DETAILS_SID)
    FROM ST_NM_SALES_PROJECTION_MASTER
    WHERE CHECK_RECORD = 1

    IF Object_id('TEMPDB.DBO.#PERIOD', 'U') IS NOT NULL
          DROP TABLE #PERIOD;

    SELECT PERIOD_SID
          ,PERIOD_DATE
          ,MONTH AS PERIOD_MONTH
          ,QUARTER AS PERIOD_QUARTER
          ,SEMI_ANNUAL AS PERIOD_SEMI
          ,YEAR AS PERIOD_YEAR
          ,CASE
                  WHEN @FREQUENCY = 'M'
                          THEN CONCAT (
                                          'M'
                                          ,MONTH
                                          ,' '
                                          ,YEAR
                                          )
                  WHEN @FREQUENCY = 'Q'
                          THEN CONCAT (
                                          'Q'
                                          ,QUARTER
                                          ,' '
                                          ,YEAR
                                          )
                  WHEN @FREQUENCY = 'S'
                          THEN CONCAT (
                                          'S'
                                          ,SEMI_ANNUAL
                                          ,' '
                                          ,YEAR
                                          )
                  ELSE Cast(YEAR AS CHAR(4))
                  END AS PERIOD
          ,CASE
                  WHEN @FREQUENCY = 'M'
                          THEN MONTH
                  WHEN @FREQUENCY = 'Q'
                          THEN QUARTER
                  WHEN @FREQUENCY = 'S'
                          THEN SEMI_ANNUAL
                  ELSE YEAR
                  END AS ROLL_PERIOD
    INTO #PERIOD
    FROM PERIOD

    SELECT @START_PERIOD_SID = MIN(PERIOD_SID)
    FROM #PERIOD
    WHERE PERIOD = @START_QUARTER

    SELECT @END_PERIOD_SID = MAX(PERIOD_SID)
    FROM #PERIOD
    WHERE PERIOD = @END_QUARTER

    SET @FREQUENCY_COUNT= (SELECT CASE
                                   WHEN @FREQUENCY = 'M' THEN 1
                                   WHEN @FREQUENCY = 'Q' THEN 3
                                   WHEN @FREQUENCY = 'S' THEN 6
                                   ELSE 12
                                 END);

              SET @QUARTERS_COUNT =((@END_PERIOD_SID-@START_PERIOD_SID)+1)/@FREQUENCY_COUNT




    UPDATE SP
    SET SP.? = COALESCE(@DISCOUNT_AMOUNT *isnull(@QUARTERS_COUNT,0)/ Nullif(((@CCP_COUNT *isnull(@QUARTERS_COUNT,0))*@FREQUENCY_COUNT), 0),0)
    FROM ST_NM_SALES_PROJECTION SP
    JOIN ST_NM_SALES_PROJECTION_MASTER SP1 ON SP.CCP_DETAILS_SID = SP1.CCP_DETAILS_SID
    JOIN #PERIOD P ON SP.PERIOD_SID = P.PERIOD_SID
    WHERE p.PERIOD_SID BETWEEN @START_PERIOD_SID
                  AND @END_PERIOD_SID
          AND SP1.CHECK_RECORD = 1
 
 
   ]]>
    </query>
        </entity>
     <entity id="selected-hierarchy-no-order-values">
        <query>
            <![CDATA[
                IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(500),CCP_DETAILS_SID INT,RN INT)

                INSERT INTO #SELECTED_HIERARCHY_NO
                (HIERARCHY_NO,
                CCP_DETAILS_SID,RN)
                SELECT DISTINCT HIERARCHY_NO,CH.CCP_DETAILS_SID,RN
                FROM   (VALUES 	[?HIERARCHY_NO_VALUES])A(HIERARCHY_NO,RN)                
                [?SELECTED_HIERARCHY_JOIN]
            ]]>
        </query>
    </entity>
    <entity id="custom-view-condition-query">
        <query>
            <![CDATA[    
      SELECT  convert(VARCHAR(8000),HIERARCHY_NO) HIERARCHY_NO  FROM (SELECT DISTINCT HIERARCHY_NO = STUFF((
			SELECT DISTINCT ', ' + HIERARCHY_NO
			FROM #SELECTED_HIERARCHY_NO B
			WHERE B.RELATIONSHIP_LEVEL_VALUES = A.RELATIONSHIP_LEVEL_VALUES
			FOR XML PATH('')
			), 1, 2, ''),INSTR
FROM #SELECTED_HIERARCHY_NO A
@RELJOIN )S
ORDER BY INSTR
                OFFSET [?START] ROWS FETCH NEXT [?END] ROWS ONLY;   
            ]]>
        </query>
        </entity>
        
         <entity id="get-ccp-query">
        <query>
            <![CDATA[  
            IF OBJECT_ID('TEMPDB..#SELECTED_HIERARCHY_NO_TEMP') IS NOT NULL
                 DROP TABLE #SELECTED_HIERARCHY_NO_TEMP  
      SELECT CCP_DETAILS_SID,CONVERT(VARCHAR(8000),HIERARCHY_NO) HIERARCHY_NO  INTO #SELECTED_HIERARCHY_NO_TEMP  FROM (SELECT CCP_DETAILS_SID,HIERARCHY_NO = STUFF((
			SELECT DISTINCT ', ' + HIERARCHY_NO
			FROM #SELECTED_HIERARCHY_NO B
			WHERE B.RELATIONSHIP_LEVEL_VALUES = A.RELATIONSHIP_LEVEL_VALUES
			FOR XML PATH('')
			), 1, 2, '')
FROM #SELECTED_HIERARCHY_NO A
@RELJOIN )S
            ]]>
        </query>
    </entity>
    
                <entity id="custom-view-count-condition-query">
        <query>
            <![CDATA[  
              SELECT COUNT(DISTINCT HIERARCHY_NO)   FROM (SELECT HIERARCHY_NO = STUFF((
			SELECT DISTINCT ', ' + HIERARCHY_NO
			FROM #SELECTED_HIERARCHY_NO B
			WHERE B.RELATIONSHIP_LEVEL_VALUES = A.RELATIONSHIP_LEVEL_VALUES
			FOR XML PATH('')
			), 1, 2, '')
FROM #SELECTED_HIERARCHY_NO A
@RELJOIN )S
            ]]>
        </query>
    </entity>	
    
                <entity id="custom-view-sales-condition-query">
        <query>
            <![CDATA[  
              SELECT  DISTINCT convert(VARCHAR(8000),HIERARCHY_NO) HIERARCHY_NO  FROM (SELECT HIERARCHY_NO = STUFF((
			SELECT DISTINCT ', ' + HIERARCHY_NO
			FROM #SELECTED_HIERARCHY_NO B
			WHERE B.RELATIONSHIP_LEVEL_VALUES = A.RELATIONSHIP_LEVEL_VALUES
			FOR XML PATH('')
			), 1, 2, '')
FROM #SELECTED_HIERARCHY_NO A
@RELJOIN )S
            ]]>
        </query>
    </entity>			
     <entity id="sales-adjustment-query">
<query>
    <![CDATA[

     DECLARE @FREQUENCY VARCHAR(50) = '?',
@ADJUSTED_PERIODS VARCHAR(1000) ='?',
@ADJUSTMENT_BASIS VARCHAR(20) = '?',
@ADJUSTED_VALUE NUMERIC(22, 6) = '?',
@ADJUEST_METHOD VARCHAR(100) = '?',
@SALES_INCLUSION BIT=?,
@BASED_ON VARCHAR(100) = '?',
@BASELINE_PERIODS VARCHAR(1000)='?'

SET @FREQUENCY = LEFT(@FREQUENCY, 1)

IF Object_id('TEMPDB.DBO.#PERIOD', 'U') IS NOT NULL
	DROP TABLE #PERIOD;

CREATE TABLE #PERIOD (
	PERIOD_SID INT,
	PERIOD_DATE DATE,
	PERIOD_MONTH INT,
	PERIOD_QUARTER INT,
	PERIOD_SEMI INT,
	PERIOD_YEAR INT,
	PERIOD VARCHAR(10) PRIMARY KEY (PERIOD_SID)
	)


INSERT INTO #PERIOD
            (PERIOD_SID,
             PERIOD_DATE,
             PERIOD_MONTH,
             PERIOD_QUARTER,
             PERIOD_SEMI,
             PERIOD_YEAR,
             PERIOD)
SELECT PERIOD_SID,
       PERIOD_DATE,
       MONTH AS PERIOD_MONTH,
       QUARTER AS PERIOD_QUARTER,
       SEMI_ANNUAL AS PERIOD_SEMI,
       YEAR AS PERIOD_YEAR,
       CASE
                  WHEN @FREQUENCY = 'M' THEN Concat ('M', MONTH, ' ', YEAR)
                  WHEN @FREQUENCY = 'Q' THEN Concat ('Q', QUARTER, ' ', YEAR)
                  WHEN @FREQUENCY = 'S' THEN Concat ('S', SEMI_ANNUAL, ' ', YEAR)
                  ELSE Cast(YEAR AS CHAR(4))
                END AS PERIOD  
FROM   PERIOD
WHERE  EXISTS  (
				SELECT 1
				FROM DBO.UDF_SPLITSTRING(@ADJUSTED_PERIODS, ',') A
				WHERE A.TOKEN = CASE
                  WHEN @FREQUENCY = 'M' THEN Concat ('M', MONTH, ' ', YEAR)
                  WHEN @FREQUENCY = 'Q' THEN Concat ('Q', QUARTER, ' ', YEAR)
                  WHEN @FREQUENCY = 'S' THEN Concat ('S', SEMI_ANNUAL, ' ', YEAR)
                  ELSE Cast(YEAR AS CHAR(4))
                END
				)
IF Object_id('TEMPDB..#CCP_DETAILS_TEMP') IS NOT NULL
	DROP TABLE #CCP_DETAILS_TEMP

CREATE TABLE #CCP_DETAILS_TEMP (
	CCP_DETAILS_SID INT,
	ITEM_MASTER_SID INT,
	ADJUSTED_CCP INT,
	SALES_INCLUSION INT
	)

INSERT INTO #CCP_DETAILS_TEMP (
	CCP_DETAILS_SID,
	ITEM_MASTER_SID,
	ADJUSTED_CCP,
	SALES_INCLUSION
	)
SELECT CH.CCP_DETAILS_SID,
	ITEM_MASTER_SID,
	ADJUSTED_CCP,
	NSP.SALES_INCLUSION
FROM ST_CCP_HIERARCHY CH
INNER JOIN CCP_DETAILS CD
	ON CH.CCP_DETAILS_SID = CD.CCP_DETAILS_SID
INNER JOIN ST_NM_SALES_PROJECTION_MASTER NSP
	ON NSP.CCP_DETAILS_SID = CD.CCP_DETAILS_SID
	AND NSP.CHECK_RECORD=1;
        
IF object_id('tempdb..#NM_ACTUAL_SALES') IS NOT NULL
  DROP TABLE #NM_ACTUAL_SALES
CREATE TABLE #NM_ACTUAL_SALES
(PERIOD_SID  INT
       ,ACTUAL_SALES  NUMERIC(22,6)
       ,ACTUAL_UNITS  NUMERIC(22,6)
       ,CCP_DETAILS_SID  INT
)
       INSERT INTO #NM_ACTUAL_SALES (
       PERIOD_SID
       ,ACTUAL_SALES
       ,ACTUAL_UNITS
       ,CCP_DETAILS_SID
       )

SELECT P.PERIOD_SID,SALES,QUANTITY,B.CCP_DETAILS_SID FROM ST_NM_SALES_PROJECTION_MASTER B
              JOIN (SELECT AD.CCP_DETAILS_SID,
                               PERIOD_SID,
                               SUM(SALES)    SALES,
                               SUM(QUANTITY) QUANTITY
                        FROM   [ACTUALS_DETAILS] AD
                        WHERE  QUANTITY_INCLUSION = 'Y'
                        GROUP  BY AD.CCP_DETAILS_SID,
                                  PERIOD_SID) AD
                    ON AD.CCP_DETAILS_SID = B.CCP_DETAILS_SID
                                  JOIN #PERIOD P ON P.PERIOD_SID=AD.PERIOD_SID AND B.CHECK_RECORD=1


IF (@BASED_ON = 'A')
BEGIN
	UPDATE NDP
SET NDP.PROJECTION_SALES = IIF((
                           CD.SALES_INCLUSION = @SALES_INCLUSION
			OR @SALES_INCLUSION IS NULL
                           ), ST.ACTUAL_SALES, NULL),
	NDP.PROJECTION_UNITS = IIF((
                           CD.SALES_INCLUSION = @SALES_INCLUSION
			OR @SALES_INCLUSION IS NULL
                           ), ST.ACTUAL_UNITS, NULL)
FROM ST_NM_SALES_PROJECTION NDP
       INNER JOIN #CCP_DETAILS_TEMP CD
              ON CD.CCP_DETAILS_SID = NDP.CCP_DETAILS_SID
INNER JOIN #PERIOD P
	ON P.PERIOD_SID = NDP.PERIOD_SID
       INNER JOIN #NM_ACTUAL_SALES ST
              ON CD.CCP_DETAILS_SID = ST.CCP_DETAILS_SID
              and P.PERIOD_SID = ST.PERIOD_SID

END
ELSE
BEGIN
	WITH FINAL_RESULT
	AS (
		SELECT CCP.CCP_DETAILS_SID,
			COALESCE(CASE 
					WHEN @ADJUSTMENT_BASIS = 'AMOUNT'
						THEN @ADJUSTED_VALUE
					ELSE COALESCE(SUM(IIF((
										SALES_INCLUSION = @SALES_INCLUSION
										OR @SALES_INCLUSION IS NULL
										), IIF(@BASED_ON = '1', NDP.PROJECTION_SALES, NDP.PROJECTION_UNITS), NULL)) OVER (), 0) * (@ADJUSTED_VALUE / 100)
					END * (COALESCE(EXFACTORY_FORECAST_SALES, EXFACTORY_ACTUAL_SALES) / (COALESCE(SUM(COALESCE(EXFACTORY_FORECAST_SALES, EXFACTORY_ACTUAL_SALES)) OVER (), 0))), 0) SALES_UNITS_VALUE,
			P.PERIOD_SID,
			COALESCE(EXFACTORY_FORECAST_SALES, EXFACTORY_ACTUAL_SALES) / COALESCE(EXFACTORY_FORECAST_UNITS, EXFACTORY_ACTUAL_UNITS) WAC
		FROM #CCP_DETAILS_TEMP CCP
		CROSS JOIN #PERIOD P
		LEFT JOIN #NM_ACTUAL_SALES NAD
			ON NAD.CCP_DETAILS_SID = CCP.CCP_DETAILS_SID
				AND P.PERIOD_SID = NAD.PERIOD_SID
		LEFT JOIN ST_NM_SALES_PROJECTION NDP
			ON NDP.CCP_DETAILS_SID = CCP.CCP_DETAILS_SID
				AND P.PERIOD_SID = NDP.PERIOD_SID
		LEFT JOIN ST_PRODUCT_FILE PF
			ON PF.ITEM_MASTER_SID = CCP.ITEM_MASTER_SID
				AND PF.PERIOD_SID = P.PERIOD_SID
		)
	UPDATE NDP
	SET NDP.PROJECTION_SALES = CASE 
			WHEN @BASED_ON = '1'
				THEN SALES_UNITS_VALUE
			ELSE SALES_UNITS_VALUE * WAC
			END + IIF(@ADJUEST_METHOD = 'OVERRIDE', 0, ISNULL(NDP.PROJECTION_SALES, 0)),
		NDP.PROJECTION_UNITS = CASE 
			WHEN @BASED_ON = '1'
				THEN SALES_UNITS_VALUE / NULLIF(WAC, 0) 
			ELSE SALES_UNITS_VALUE
			END + IIF(@ADJUEST_METHOD = 'OVERRIDE', 0, ISNULL(NDP.PROJECTION_UNITS, 0))
	FROM ST_NM_SALES_PROJECTION NDP
	INNER JOIN FINAL_RESULT FR
		ON FR.CCP_DETAILS_SID = NDP.CCP_DETAILS_SID
			AND NDP.PERIOD_SID = FR.PERIOD_SID
END




 
 
   ]]>
    </query>
    </entity>
     <entity id="sales-adjustment-query-Validation">
<query>
    <![CDATA[

   SELECT MAX(CNT) CNT FROM(
 SELECT DISTINCT
	COUNT(A.CCP_DETAILS_SID) OVER (
		PARTITION BY 
		ITEM_MASTER_SID
		) CNT
FROM ST_CCP_HIERARCHY A
JOIN ST_NM_SALES_PROJECTION_MASTER C
ON A.CCP_DETAILS_SID = C.CCP_DETAILS_SID AND FILTER_CCP = 1
AND CHECK_RECORD=1
INNER JOIN CCP_DETAILS B
	ON A.CCP_DETAILS_SID = B.CCP_DETAILS_SID)A

   ]]>
    </query>
    </entity>
     <entity id="count-Query-Excel">
<query>
    <![CDATA[

   IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(500))

                INSERT INTO #SELECTED_HIERARCHY_NO
                (HIERARCHY_NO)
                SELECT DISTINCT HIERARCHY_NO
                FROM   (VALUES  [?HIERARCHY_NO_VALUES])A(HIERARCHY_NO)
                [?SELECTED_HIERARCHY_JOIN]              
   ]]>
    </query>
    </entity>  
    
    <entity id="selected-hierarchy-no-update">
        <query>
            <![CDATA[
                IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(500),CCP_DETAILS_SID INT)

                INSERT INTO #SELECTED_HIERARCHY_NO
                (HIERARCHY_NO,
                CCP_DETAILS_SID)
                SELECT DISTINCT HIERARCHY_NO,CH.CCP_DETAILS_SID
                FROM   (VALUES 	[?HIERARCHY_NO_VALUES])A(HIERARCHY_NO)                
                [?SELECTED_HIERARCHY_JOIN]
            ]]>
        </query>
    </entity>
    <entity id="selected-hierarchy-no-update-Sales_custom">
        <query>
            <![CDATA[
                IF Object_id('TEMPDB..#SELECTED_HIERARCHY_NO') IS NOT NULL
                DROP TABLE #SELECTED_HIERARCHY_NO
                CREATE TABLE #SELECTED_HIERARCHY_NO (HIERARCHY_NO varchar(500),CCP_DETAILS_SID INT)

                INSERT INTO #SELECTED_HIERARCHY_NO
                (HIERARCHY_NO,
                CCP_DETAILS_SID)
                SELECT DISTINCT A.HIERARCHY_NO,CH.CCP_DETAILS_SID
                FROM   (VALUES 	[?HIERARCHY_NO_VALUES])A(HIERARCHY_NO)  
                 JOIN CUSTOM_CCP_SALES RLD1 ON RLD1.HIERARCHY_NO=A.HIERARCHY_NO                
                 JOIN ST_CCP_HIERARCHY CH ON RLD1.CCP_DETAILS_SID= CH.CCP_DETAILS_SID
            ]]>
        </query>
    </entity>
    <entity id="dataSelection-deduction-loading">
        <query>
            <![CDATA[
            
                  SELECT
	distinct LEVEL_NO,
	LEVEL_NAME
        FROM
	HIERARCHY_DEFINITION HD
	JOIN dbo.HIERARCHY_LEVEL_DEFINITION HLD
        ON HLD.HIERARCHY_DEFINITION_SID = HD.HIERARCHY_DEFINITION_SID
	
        WHERE HD.HIERARCHY_NAME='DeductionHierarchy'
 
 
            ]]>
        </query>
    </entity>
    <entity id="custom-view-count-condition-query-forPV">
        <query>
            <![CDATA[  
              SELECT COUNT(DISTINCT HIERARCHY_NO)  
FROM #SELECTED_HIERARCHY_NO A
            ]]>
        </query>
    </entity>
    <entity id="custom-view-count-condition-query-forPVLoad">
        <query>
            <![CDATA[  
              SELECT DISTINCT HIERARCHY_NO,INSTR  
FROM #SELECTED_HIERARCHY_NO A
ORDER BY INSTR
                OFFSET [?START] ROWS FETCH NEXT [?END] ROWS ONLY;   
            ]]>
        </query>
    </entity>
    <entity id="non-mandated-sales-query-new-custom-Excel">
        <query>
            <![CDATA[  
    IF Object_id('TEMPDB..#ST_NM_SALES_PROJECTION_MASTER') IS NOT NULL DROP
	TABLE
		#st_nm_sales_projection_master SELECT
			CASE
				WHEN Count( DISTINCT MSPM.calculation_periods )> 1 THEN '-'
				ELSE Max( MSPM.calculation_periods )
			END CALCULATION_PERIODS,
			CASE
				WHEN Count( DISTINCT MSPM.methodology )> 1 THEN '-'
				ELSE Max( MSPM.methodology )
			END AS METHODOLOGY,
			CCCP.HIERARCHY_NO AS HIERARCHY_NO,
			Count(*) AS RCOUNT,
			Min( CASE( check_record ) WHEN 1 THEN 1 ELSE 0 END ) AS CHECKREC,
			Sum( CASE( MSPM.check_record ) WHEN 1 THEN 0 ELSE 1 END ) AS UNCHECK_COUNT,
			Count( MSPM.ccp_details_sid ) AS CCPCOUNT,
			Min( MSPM.user_group ) AS USER_GROUP,
			CCP.sales_inclusion INTO
				#st_nm_sales_projection_master
			FROM
				st_ccp_hierarchy CCP join CUSTOM_CCP_SALES CCCP ON
				CCCP.CCP_DETAILS_SID = CCP.CCP_DETAILS_SID
				AND CCCP.CUST_VIEW_MASTER_SID = @CUSTOMSID
			JOIN st_nm_sales_projection_master MSPM ON
				MSPM.ccp_details_sid = CCP.ccp_details_sid
			GROUP BY
				CCCP.HIERARCHY_NO,
				CCP.sales_inclusion 
                            
                                    SELECT
					SH.hierarchy_no,
					period,
					year,
					indicator AS ACTUALPROJ,
					Avg( account_growth ) ACCOUNT_GROWTH,
					Avg( product_growth ) PRODUCT_GROWTH,
					NULL AS projection_sales,
					NULL AS projection_units,
					Sum( sales ) AS ACTUALSALES,
					Sum( units ) ACTUALUNITS,
					methodology,
					user_group,
					calculation_periods,
					STC.sales_inclusion
				FROM
					ST_CUSTOM_SALES STC join custom_ccp_sales cccp on
					cccp.CUST_VIEW_MASTER_SID = @CUSTOMSID
					and stc.HIERARCHY_NO = cccp.ROWID
				JOIN #st_nm_sales_projection_master SH ON
					cccp.hierarchy_no = SH.hierarchy_no
				WHERE
					INDICATOR = 0 @SALESINCLUSION
				GROUP BY
					SH.hierarchy_no,
					period,
					year,
					STC.sales_inclusion,
					methodology,
					user_group,
					calculation_periods,
					indicator
			UNION ALL SELECT
					SH.hierarchy_no,
					period,
					year,
					indicator AS ACTUALPROJ,
					Avg( account_growth ) ACCOUNT_GROWTH,
					Avg( product_growth ) PRODUCT_GROWTH,
					convert(numeric(22,6),Sum( sales )) AS PROJECTION_SALES,
					convert(numeric(22,6),Sum( units )) PROJECTION_UNITS,
					NULL AS ACTUALSALES,
					NULL ACTUALUNITS,
					methodology,
					user_group,
					calculation_periods,
					STC.sales_inclusion
				FROM
					ST_CUSTOM_SALES STC
				join custom_ccp_sales cccp on
					cccp.CUST_VIEW_MASTER_SID = @CUSTOMSID
					and stc.HIERARCHY_NO = cccp.ROWID
				JOIN #st_nm_sales_projection_master SH ON
					cccp.hierarchy_no = SH.hierarchy_no
				WHERE
					INDICATOR = 1 @SALESINCLUSION
				GROUP BY
					SH.HIERARCHY_NO,
					PERIOD,
					YEAR,
					STC.SALES_INCLUSION,
					methodology,
					user_group,
					calculation_periods,
					INDICATOR @OPPOSITESINC
                                        ORDER BY 
					SH.HIERARCHY_NO
					,YEAR
					,PERIOD 
            ]]>
        </query>
    </entity>
</sql>
