/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.parttwo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.parttwo.model.StCffOutboundMaster;
import com.stpl.app.parttwo.model.StCffOutboundMasterModel;
import com.stpl.app.parttwo.service.persistence.StCffOutboundMasterPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StCffOutboundMaster service. Represents a row in the &quot;ST_CFF_OUTBOUND_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link StCffOutboundMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StCffOutboundMasterImpl}.
 * </p>
 *
 * @author
 * @see StCffOutboundMasterImpl
 * @see StCffOutboundMaster
 * @see StCffOutboundMasterModel
 * @generated
 */
@ProviderType
public class StCffOutboundMasterModelImpl extends BaseModelImpl<StCffOutboundMaster>
	implements StCffOutboundMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a st cff outbound master model instance should use the {@link StCffOutboundMaster} interface instead.
	 */
	public static final String TABLE_NAME = "ST_CFF_OUTBOUND_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ETL_CHECK_RECORD", Types.BOOLEAN },
			{ "CUSTOMER_NAME", Types.VARCHAR },
			{ "CONTRACT_HOLDER_ID", Types.VARCHAR },
			{ "BUSINESS_UNIT_NO", Types.VARCHAR },
			{ "YEAR", Types.VARCHAR },
			{ "FINANCIAL_FORECAST_APPROVAL_DATE", Types.TIMESTAMP },
			{ "DEDUCTION_ID", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "DEDUCTION_PER_UNIT", Types.DOUBLE },
			{ "COGS_PER_UNIT", Types.DOUBLE },
			{ "CONTRACT_TYPE", Types.VARCHAR },
			{ "SOURCE", Types.VARCHAR },
			{ "BUSINESS_UNIT_NAME", Types.VARCHAR },
			{ "CONTRACT_MASTER_SID", Types.INTEGER },
			{ "FINANCIAL_FORECAST_ID", Types.VARCHAR },
			{ "PROJECT_ID", Types.VARCHAR },
			{ "CUSTOMER_NO", Types.VARCHAR },
			{ "MODIFIED_BY", Types.VARCHAR },
			{ "SALES_DOLLARS", Types.DOUBLE },
			{ "MONTH", Types.INTEGER },
			{ "CFF_DETAILS_SID", Types.INTEGER },
			{ "TYPE", Types.VARCHAR },
			{ "DEDUCTION_TYPE", Types.VARCHAR },
			{ "COMPANY_MASTER_SID", Types.INTEGER },
			{ "CHECK_RECORD", Types.BOOLEAN },
			{ "CONTRACT_NAME", Types.VARCHAR },
			{ "DEDUCTION_RATE", Types.DOUBLE },
			{ "DEDUCTION_CATEGORY", Types.VARCHAR },
			{ "COGS_AMOUNT", Types.DOUBLE },
			{ "DEDUCTION_NO", Types.VARCHAR },
			{ "FINANCIAL_FORECAST_CREATION_DATE", Types.TIMESTAMP },
			{ "COMPANY_NO", Types.VARCHAR },
			{ "SALES_UNITS", Types.DOUBLE },
			{ "SESSION_ID", Types.VARCHAR },
			{ "ITEM_NAME", Types.VARCHAR },
			{ "DEDUCTION_INCLUSION", Types.VARCHAR },
			{ "RS_MODEL_SID", Types.INTEGER },
			{ "CONTRACT_HOLDER_NAME", Types.VARCHAR },
			{ "ITEM_MASTER_SID", Types.INTEGER },
			{ "COMPANY_NAME", Types.VARCHAR },
			{ "CUSTOMER_ID", Types.VARCHAR },
			{ "ITEM_ID", Types.VARCHAR },
			{ "NET_PROFIT_DOLLARS", Types.DOUBLE },
			{ "GL_COMPANY_MASTER_SID", Types.INTEGER },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.VARCHAR },
			{ "DEDUCTION_CATEGORY1", Types.VARCHAR },
			{ "DEDUCTION_CATEGORY2", Types.VARCHAR },
			{ "CONTRACT_HOLDER_NO", Types.VARCHAR },
			{ "DEDUCTION_CATEGORY3", Types.VARCHAR },
			{ "ITEM_NO", Types.VARCHAR },
			{ "DEDUCTION_CATEGORY4", Types.VARCHAR },
			{ "DEDUCTION_CATEGORY5", Types.VARCHAR },
			{ "DEDUCTION_CATEGORY6", Types.VARCHAR },
			{ "CONTRACT_ID", Types.VARCHAR },
			{ "DEDUCTION_PROGRAM", Types.VARCHAR },
			{ "BUSINESS_UNIT_ID", Types.VARCHAR },
			{ "PROJECTION_NAME", Types.VARCHAR },
			{ "USER_ID", Types.VARCHAR },
			{ "COMPANY_ID", Types.VARCHAR },
			{ "OUTBOUND_STATUS", Types.VARCHAR },
			{ "ORIGINAL_BATCH_ID", Types.VARCHAR },
			{ "DEDUCTION_NAME", Types.VARCHAR },
			{ "NET_PROFIT_PER_UNIT", Types.DOUBLE },
			{ "PERIOD_SID", Types.INTEGER },
			{ "SALES_INCLUSION", Types.VARCHAR },
			{ "BATCH_ID", Types.VARCHAR },
			{ "FINANCIAL_FORECAST_NAME", Types.VARCHAR },
			{ "NET_SALES_DOLLAR", Types.DOUBLE },
			{ "DEDUCTION_DOLLARS", Types.DOUBLE },
			{ "CONTRACT_NO", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ETL_CHECK_RECORD", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("CUSTOMER_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CONTRACT_HOLDER_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BUSINESS_UNIT_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("YEAR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FINANCIAL_FORECAST_APPROVAL_DATE",
			Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("DEDUCTION_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("DEDUCTION_PER_UNIT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("COGS_PER_UNIT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("CONTRACT_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BUSINESS_UNIT_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CONTRACT_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("FINANCIAL_FORECAST_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECT_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CUSTOMER_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SALES_DOLLARS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("MONTH", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CFF_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COMPANY_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CHECK_RECORD", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("CONTRACT_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_RATE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("DEDUCTION_CATEGORY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COGS_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("DEDUCTION_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FINANCIAL_FORECAST_CREATION_DATE",
			Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("COMPANY_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SALES_UNITS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("SESSION_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_INCLUSION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RS_MODEL_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CONTRACT_HOLDER_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("COMPANY_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CUSTOMER_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NET_PROFIT_DOLLARS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("GL_COMPANY_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_CATEGORY1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_CATEGORY2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CONTRACT_HOLDER_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_CATEGORY3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_CATEGORY4", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_CATEGORY5", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_CATEGORY6", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CONTRACT_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_PROGRAM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BUSINESS_UNIT_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECTION_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("USER_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COMPANY_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("OUTBOUND_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ORIGINAL_BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NET_PROFIT_PER_UNIT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PERIOD_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SALES_INCLUSION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FINANCIAL_FORECAST_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NET_SALES_DOLLAR", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("DEDUCTION_DOLLARS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("CONTRACT_NO", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table ST_CFF_OUTBOUND_MASTER (ETL_CHECK_RECORD BOOLEAN,CUSTOMER_NAME VARCHAR(75) null,CONTRACT_HOLDER_ID VARCHAR(75) null,BUSINESS_UNIT_NO VARCHAR(75) null,YEAR VARCHAR(75) null,FINANCIAL_FORECAST_APPROVAL_DATE DATE null,DEDUCTION_ID VARCHAR(75) null,MODIFIED_DATE DATE null,DEDUCTION_PER_UNIT DOUBLE,COGS_PER_UNIT DOUBLE,CONTRACT_TYPE VARCHAR(75) null,SOURCE VARCHAR(75) null,BUSINESS_UNIT_NAME VARCHAR(75) null,CONTRACT_MASTER_SID INTEGER,FINANCIAL_FORECAST_ID VARCHAR(75) null,PROJECT_ID VARCHAR(75) null,CUSTOMER_NO VARCHAR(75) null,MODIFIED_BY VARCHAR(75) null,SALES_DOLLARS DOUBLE,MONTH INTEGER,CFF_DETAILS_SID INTEGER not null IDENTITY,TYPE VARCHAR(75) null,DEDUCTION_TYPE VARCHAR(75) null,COMPANY_MASTER_SID INTEGER,CHECK_RECORD BOOLEAN,CONTRACT_NAME VARCHAR(75) null,DEDUCTION_RATE DOUBLE,DEDUCTION_CATEGORY VARCHAR(75) null,COGS_AMOUNT DOUBLE,DEDUCTION_NO VARCHAR(75) null,FINANCIAL_FORECAST_CREATION_DATE DATE null,COMPANY_NO VARCHAR(75) null,SALES_UNITS DOUBLE,SESSION_ID VARCHAR(75) not null IDENTITY,ITEM_NAME VARCHAR(75) null,DEDUCTION_INCLUSION VARCHAR(75) null,RS_MODEL_SID INTEGER not null IDENTITY,CONTRACT_HOLDER_NAME VARCHAR(75) null,ITEM_MASTER_SID INTEGER,COMPANY_NAME VARCHAR(75) null,CUSTOMER_ID VARCHAR(75) null,ITEM_ID VARCHAR(75) null,NET_PROFIT_DOLLARS DOUBLE,GL_COMPANY_MASTER_SID INTEGER,CREATED_DATE DATE null,CREATED_BY VARCHAR(75) null,DEDUCTION_CATEGORY1 VARCHAR(75) null,DEDUCTION_CATEGORY2 VARCHAR(75) null,CONTRACT_HOLDER_NO VARCHAR(75) null,DEDUCTION_CATEGORY3 VARCHAR(75) null,ITEM_NO VARCHAR(75) null,DEDUCTION_CATEGORY4 VARCHAR(75) null,DEDUCTION_CATEGORY5 VARCHAR(75) null,DEDUCTION_CATEGORY6 VARCHAR(75) null,CONTRACT_ID VARCHAR(75) null,DEDUCTION_PROGRAM VARCHAR(75) null,BUSINESS_UNIT_ID VARCHAR(75) null,PROJECTION_NAME VARCHAR(75) null,USER_ID VARCHAR(75) not null IDENTITY,COMPANY_ID VARCHAR(75) null,OUTBOUND_STATUS VARCHAR(75) null,ORIGINAL_BATCH_ID VARCHAR(75) null,DEDUCTION_NAME VARCHAR(75) null,NET_PROFIT_PER_UNIT DOUBLE,PERIOD_SID INTEGER not null IDENTITY,SALES_INCLUSION VARCHAR(75) null,BATCH_ID VARCHAR(75) null,FINANCIAL_FORECAST_NAME VARCHAR(75) null,NET_SALES_DOLLAR DOUBLE,DEDUCTION_DOLLARS DOUBLE,CONTRACT_NO VARCHAR(75) null,primary key (CFF_DETAILS_SID, SESSION_ID, RS_MODEL_SID, USER_ID, PERIOD_SID))";
	public static final String TABLE_SQL_DROP = "drop table ST_CFF_OUTBOUND_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY stCffOutboundMaster.id.cffDetailsSid ASC, stCffOutboundMaster.id.sessionId ASC, stCffOutboundMaster.id.rsModelSid ASC, stCffOutboundMaster.id.userId ASC, stCffOutboundMaster.id.periodSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ST_CFF_OUTBOUND_MASTER.CFF_DETAILS_SID ASC, ST_CFF_OUTBOUND_MASTER.SESSION_ID ASC, ST_CFF_OUTBOUND_MASTER.RS_MODEL_SID ASC, ST_CFF_OUTBOUND_MASTER.USER_ID ASC, ST_CFF_OUTBOUND_MASTER.PERIOD_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.parttwo.model.StCffOutboundMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.parttwo.model.StCffOutboundMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.parttwo.model.StCffOutboundMaster"));

	public StCffOutboundMasterModelImpl() {
	}

	@Override
	public StCffOutboundMasterPK getPrimaryKey() {
		return new StCffOutboundMasterPK(_cffDetailsSid, _sessionId,
			_rsModelSid, _userId, _periodSid);
	}

	@Override
	public void setPrimaryKey(StCffOutboundMasterPK primaryKey) {
		setCffDetailsSid(primaryKey.cffDetailsSid);
		setSessionId(primaryKey.sessionId);
		setRsModelSid(primaryKey.rsModelSid);
		setUserId(primaryKey.userId);
		setPeriodSid(primaryKey.periodSid);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new StCffOutboundMasterPK(_cffDetailsSid, _sessionId,
			_rsModelSid, _userId, _periodSid);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((StCffOutboundMasterPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return StCffOutboundMaster.class;
	}

	@Override
	public String getModelClassName() {
		return StCffOutboundMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("etlCheckRecord", getEtlCheckRecord());
		attributes.put("customerName", getCustomerName());
		attributes.put("contractHolderId", getContractHolderId());
		attributes.put("businessUnitNo", getBusinessUnitNo());
		attributes.put("year", getYear());
		attributes.put("financialForecastApprovalDate",
			getFinancialForecastApprovalDate());
		attributes.put("deductionId", getDeductionId());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("deductionPerUnit", getDeductionPerUnit());
		attributes.put("cogsPerUnit", getCogsPerUnit());
		attributes.put("contractType", getContractType());
		attributes.put("source", getSource());
		attributes.put("businessUnitName", getBusinessUnitName());
		attributes.put("contractMasterSid", getContractMasterSid());
		attributes.put("financialForecastId", getFinancialForecastId());
		attributes.put("projectId", getProjectId());
		attributes.put("customerNo", getCustomerNo());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("salesDollars", getSalesDollars());
		attributes.put("month", getMonth());
		attributes.put("cffDetailsSid", getCffDetailsSid());
		attributes.put("type", getType());
		attributes.put("deductionType", getDeductionType());
		attributes.put("companyMasterSid", getCompanyMasterSid());
		attributes.put("checkRecord", getCheckRecord());
		attributes.put("contractName", getContractName());
		attributes.put("deductionRate", getDeductionRate());
		attributes.put("deductionCategory", getDeductionCategory());
		attributes.put("cogsAmount", getCogsAmount());
		attributes.put("deductionNo", getDeductionNo());
		attributes.put("financialForecastCreationDate",
			getFinancialForecastCreationDate());
		attributes.put("companyNo", getCompanyNo());
		attributes.put("salesUnits", getSalesUnits());
		attributes.put("sessionId", getSessionId());
		attributes.put("itemName", getItemName());
		attributes.put("deductionInclusion", getDeductionInclusion());
		attributes.put("rsModelSid", getRsModelSid());
		attributes.put("contractHolderName", getContractHolderName());
		attributes.put("itemMasterSid", getItemMasterSid());
		attributes.put("companyName", getCompanyName());
		attributes.put("customerId", getCustomerId());
		attributes.put("itemId", getItemId());
		attributes.put("netProfitDollars", getNetProfitDollars());
		attributes.put("glCompanyMasterSid", getGlCompanyMasterSid());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("deductionCategory1", getDeductionCategory1());
		attributes.put("deductionCategory2", getDeductionCategory2());
		attributes.put("contractHolderNo", getContractHolderNo());
		attributes.put("deductionCategory3", getDeductionCategory3());
		attributes.put("itemNo", getItemNo());
		attributes.put("deductionCategory4", getDeductionCategory4());
		attributes.put("deductionCategory5", getDeductionCategory5());
		attributes.put("deductionCategory6", getDeductionCategory6());
		attributes.put("contractId", getContractId());
		attributes.put("deductionProgram", getDeductionProgram());
		attributes.put("businessUnitId", getBusinessUnitId());
		attributes.put("projectionName", getProjectionName());
		attributes.put("userId", getUserId());
		attributes.put("companyId", getCompanyId());
		attributes.put("outboundStatus", getOutboundStatus());
		attributes.put("originalBatchId", getOriginalBatchId());
		attributes.put("deductionName", getDeductionName());
		attributes.put("netProfitPerUnit", getNetProfitPerUnit());
		attributes.put("periodSid", getPeriodSid());
		attributes.put("salesInclusion", getSalesInclusion());
		attributes.put("batchId", getBatchId());
		attributes.put("financialForecastName", getFinancialForecastName());
		attributes.put("netSalesDollar", getNetSalesDollar());
		attributes.put("deductionDollars", getDeductionDollars());
		attributes.put("contractNo", getContractNo());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Boolean etlCheckRecord = (Boolean)attributes.get("etlCheckRecord");

		if (etlCheckRecord != null) {
			setEtlCheckRecord(etlCheckRecord);
		}

		String customerName = (String)attributes.get("customerName");

		if (customerName != null) {
			setCustomerName(customerName);
		}

		String contractHolderId = (String)attributes.get("contractHolderId");

		if (contractHolderId != null) {
			setContractHolderId(contractHolderId);
		}

		String businessUnitNo = (String)attributes.get("businessUnitNo");

		if (businessUnitNo != null) {
			setBusinessUnitNo(businessUnitNo);
		}

		String year = (String)attributes.get("year");

		if (year != null) {
			setYear(year);
		}

		Date financialForecastApprovalDate = (Date)attributes.get(
				"financialForecastApprovalDate");

		if (financialForecastApprovalDate != null) {
			setFinancialForecastApprovalDate(financialForecastApprovalDate);
		}

		String deductionId = (String)attributes.get("deductionId");

		if (deductionId != null) {
			setDeductionId(deductionId);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Double deductionPerUnit = (Double)attributes.get("deductionPerUnit");

		if (deductionPerUnit != null) {
			setDeductionPerUnit(deductionPerUnit);
		}

		Double cogsPerUnit = (Double)attributes.get("cogsPerUnit");

		if (cogsPerUnit != null) {
			setCogsPerUnit(cogsPerUnit);
		}

		String contractType = (String)attributes.get("contractType");

		if (contractType != null) {
			setContractType(contractType);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String businessUnitName = (String)attributes.get("businessUnitName");

		if (businessUnitName != null) {
			setBusinessUnitName(businessUnitName);
		}

		Integer contractMasterSid = (Integer)attributes.get("contractMasterSid");

		if (contractMasterSid != null) {
			setContractMasterSid(contractMasterSid);
		}

		String financialForecastId = (String)attributes.get(
				"financialForecastId");

		if (financialForecastId != null) {
			setFinancialForecastId(financialForecastId);
		}

		String projectId = (String)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		String customerNo = (String)attributes.get("customerNo");

		if (customerNo != null) {
			setCustomerNo(customerNo);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Double salesDollars = (Double)attributes.get("salesDollars");

		if (salesDollars != null) {
			setSalesDollars(salesDollars);
		}

		Integer month = (Integer)attributes.get("month");

		if (month != null) {
			setMonth(month);
		}

		Integer cffDetailsSid = (Integer)attributes.get("cffDetailsSid");

		if (cffDetailsSid != null) {
			setCffDetailsSid(cffDetailsSid);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String deductionType = (String)attributes.get("deductionType");

		if (deductionType != null) {
			setDeductionType(deductionType);
		}

		Integer companyMasterSid = (Integer)attributes.get("companyMasterSid");

		if (companyMasterSid != null) {
			setCompanyMasterSid(companyMasterSid);
		}

		Boolean checkRecord = (Boolean)attributes.get("checkRecord");

		if (checkRecord != null) {
			setCheckRecord(checkRecord);
		}

		String contractName = (String)attributes.get("contractName");

		if (contractName != null) {
			setContractName(contractName);
		}

		Double deductionRate = (Double)attributes.get("deductionRate");

		if (deductionRate != null) {
			setDeductionRate(deductionRate);
		}

		String deductionCategory = (String)attributes.get("deductionCategory");

		if (deductionCategory != null) {
			setDeductionCategory(deductionCategory);
		}

		Double cogsAmount = (Double)attributes.get("cogsAmount");

		if (cogsAmount != null) {
			setCogsAmount(cogsAmount);
		}

		String deductionNo = (String)attributes.get("deductionNo");

		if (deductionNo != null) {
			setDeductionNo(deductionNo);
		}

		Date financialForecastCreationDate = (Date)attributes.get(
				"financialForecastCreationDate");

		if (financialForecastCreationDate != null) {
			setFinancialForecastCreationDate(financialForecastCreationDate);
		}

		String companyNo = (String)attributes.get("companyNo");

		if (companyNo != null) {
			setCompanyNo(companyNo);
		}

		Double salesUnits = (Double)attributes.get("salesUnits");

		if (salesUnits != null) {
			setSalesUnits(salesUnits);
		}

		String sessionId = (String)attributes.get("sessionId");

		if (sessionId != null) {
			setSessionId(sessionId);
		}

		String itemName = (String)attributes.get("itemName");

		if (itemName != null) {
			setItemName(itemName);
		}

		String deductionInclusion = (String)attributes.get("deductionInclusion");

		if (deductionInclusion != null) {
			setDeductionInclusion(deductionInclusion);
		}

		Integer rsModelSid = (Integer)attributes.get("rsModelSid");

		if (rsModelSid != null) {
			setRsModelSid(rsModelSid);
		}

		String contractHolderName = (String)attributes.get("contractHolderName");

		if (contractHolderName != null) {
			setContractHolderName(contractHolderName);
		}

		Integer itemMasterSid = (Integer)attributes.get("itemMasterSid");

		if (itemMasterSid != null) {
			setItemMasterSid(itemMasterSid);
		}

		String companyName = (String)attributes.get("companyName");

		if (companyName != null) {
			setCompanyName(companyName);
		}

		String customerId = (String)attributes.get("customerId");

		if (customerId != null) {
			setCustomerId(customerId);
		}

		String itemId = (String)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		Double netProfitDollars = (Double)attributes.get("netProfitDollars");

		if (netProfitDollars != null) {
			setNetProfitDollars(netProfitDollars);
		}

		Integer glCompanyMasterSid = (Integer)attributes.get(
				"glCompanyMasterSid");

		if (glCompanyMasterSid != null) {
			setGlCompanyMasterSid(glCompanyMasterSid);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String deductionCategory1 = (String)attributes.get("deductionCategory1");

		if (deductionCategory1 != null) {
			setDeductionCategory1(deductionCategory1);
		}

		String deductionCategory2 = (String)attributes.get("deductionCategory2");

		if (deductionCategory2 != null) {
			setDeductionCategory2(deductionCategory2);
		}

		String contractHolderNo = (String)attributes.get("contractHolderNo");

		if (contractHolderNo != null) {
			setContractHolderNo(contractHolderNo);
		}

		String deductionCategory3 = (String)attributes.get("deductionCategory3");

		if (deductionCategory3 != null) {
			setDeductionCategory3(deductionCategory3);
		}

		String itemNo = (String)attributes.get("itemNo");

		if (itemNo != null) {
			setItemNo(itemNo);
		}

		String deductionCategory4 = (String)attributes.get("deductionCategory4");

		if (deductionCategory4 != null) {
			setDeductionCategory4(deductionCategory4);
		}

		String deductionCategory5 = (String)attributes.get("deductionCategory5");

		if (deductionCategory5 != null) {
			setDeductionCategory5(deductionCategory5);
		}

		String deductionCategory6 = (String)attributes.get("deductionCategory6");

		if (deductionCategory6 != null) {
			setDeductionCategory6(deductionCategory6);
		}

		String contractId = (String)attributes.get("contractId");

		if (contractId != null) {
			setContractId(contractId);
		}

		String deductionProgram = (String)attributes.get("deductionProgram");

		if (deductionProgram != null) {
			setDeductionProgram(deductionProgram);
		}

		String businessUnitId = (String)attributes.get("businessUnitId");

		if (businessUnitId != null) {
			setBusinessUnitId(businessUnitId);
		}

		String projectionName = (String)attributes.get("projectionName");

		if (projectionName != null) {
			setProjectionName(projectionName);
		}

		String userId = (String)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String companyId = (String)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String outboundStatus = (String)attributes.get("outboundStatus");

		if (outboundStatus != null) {
			setOutboundStatus(outboundStatus);
		}

		String originalBatchId = (String)attributes.get("originalBatchId");

		if (originalBatchId != null) {
			setOriginalBatchId(originalBatchId);
		}

		String deductionName = (String)attributes.get("deductionName");

		if (deductionName != null) {
			setDeductionName(deductionName);
		}

		Double netProfitPerUnit = (Double)attributes.get("netProfitPerUnit");

		if (netProfitPerUnit != null) {
			setNetProfitPerUnit(netProfitPerUnit);
		}

		Integer periodSid = (Integer)attributes.get("periodSid");

		if (periodSid != null) {
			setPeriodSid(periodSid);
		}

		String salesInclusion = (String)attributes.get("salesInclusion");

		if (salesInclusion != null) {
			setSalesInclusion(salesInclusion);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		String financialForecastName = (String)attributes.get(
				"financialForecastName");

		if (financialForecastName != null) {
			setFinancialForecastName(financialForecastName);
		}

		Double netSalesDollar = (Double)attributes.get("netSalesDollar");

		if (netSalesDollar != null) {
			setNetSalesDollar(netSalesDollar);
		}

		Double deductionDollars = (Double)attributes.get("deductionDollars");

		if (deductionDollars != null) {
			setDeductionDollars(deductionDollars);
		}

		String contractNo = (String)attributes.get("contractNo");

		if (contractNo != null) {
			setContractNo(contractNo);
		}
	}

	@Override
	public boolean getEtlCheckRecord() {
		return _etlCheckRecord;
	}

	@Override
	public boolean isEtlCheckRecord() {
		return _etlCheckRecord;
	}

	@Override
	public void setEtlCheckRecord(boolean etlCheckRecord) {
		_etlCheckRecord = etlCheckRecord;
	}

	@Override
	public String getCustomerName() {
		if (_customerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerName;
		}
	}

	@Override
	public void setCustomerName(String customerName) {
		_customerName = customerName;
	}

	@Override
	public String getContractHolderId() {
		if (_contractHolderId == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractHolderId;
		}
	}

	@Override
	public void setContractHolderId(String contractHolderId) {
		_contractHolderId = contractHolderId;
	}

	@Override
	public String getBusinessUnitNo() {
		if (_businessUnitNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessUnitNo;
		}
	}

	@Override
	public void setBusinessUnitNo(String businessUnitNo) {
		_businessUnitNo = businessUnitNo;
	}

	@Override
	public String getYear() {
		if (_year == null) {
			return StringPool.BLANK;
		}
		else {
			return _year;
		}
	}

	@Override
	public void setYear(String year) {
		_year = year;
	}

	@Override
	public Date getFinancialForecastApprovalDate() {
		return _financialForecastApprovalDate;
	}

	@Override
	public void setFinancialForecastApprovalDate(
		Date financialForecastApprovalDate) {
		_financialForecastApprovalDate = financialForecastApprovalDate;
	}

	@Override
	public String getDeductionId() {
		if (_deductionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionId;
		}
	}

	@Override
	public void setDeductionId(String deductionId) {
		_deductionId = deductionId;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public double getDeductionPerUnit() {
		return _deductionPerUnit;
	}

	@Override
	public void setDeductionPerUnit(double deductionPerUnit) {
		_deductionPerUnit = deductionPerUnit;
	}

	@Override
	public double getCogsPerUnit() {
		return _cogsPerUnit;
	}

	@Override
	public void setCogsPerUnit(double cogsPerUnit) {
		_cogsPerUnit = cogsPerUnit;
	}

	@Override
	public String getContractType() {
		if (_contractType == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractType;
		}
	}

	@Override
	public void setContractType(String contractType) {
		_contractType = contractType;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getBusinessUnitName() {
		if (_businessUnitName == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessUnitName;
		}
	}

	@Override
	public void setBusinessUnitName(String businessUnitName) {
		_businessUnitName = businessUnitName;
	}

	@Override
	public int getContractMasterSid() {
		return _contractMasterSid;
	}

	@Override
	public void setContractMasterSid(int contractMasterSid) {
		_contractMasterSid = contractMasterSid;
	}

	@Override
	public String getFinancialForecastId() {
		if (_financialForecastId == null) {
			return StringPool.BLANK;
		}
		else {
			return _financialForecastId;
		}
	}

	@Override
	public void setFinancialForecastId(String financialForecastId) {
		_financialForecastId = financialForecastId;
	}

	@Override
	public String getProjectId() {
		if (_projectId == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectId;
		}
	}

	@Override
	public void setProjectId(String projectId) {
		_projectId = projectId;
	}

	@Override
	public String getCustomerNo() {
		if (_customerNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerNo;
		}
	}

	@Override
	public void setCustomerNo(String customerNo) {
		_customerNo = customerNo;
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public double getSalesDollars() {
		return _salesDollars;
	}

	@Override
	public void setSalesDollars(double salesDollars) {
		_salesDollars = salesDollars;
	}

	@Override
	public int getMonth() {
		return _month;
	}

	@Override
	public void setMonth(int month) {
		_month = month;
	}

	@Override
	public int getCffDetailsSid() {
		return _cffDetailsSid;
	}

	@Override
	public void setCffDetailsSid(int cffDetailsSid) {
		_cffDetailsSid = cffDetailsSid;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@Override
	public String getDeductionType() {
		if (_deductionType == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionType;
		}
	}

	@Override
	public void setDeductionType(String deductionType) {
		_deductionType = deductionType;
	}

	@Override
	public int getCompanyMasterSid() {
		return _companyMasterSid;
	}

	@Override
	public void setCompanyMasterSid(int companyMasterSid) {
		_companyMasterSid = companyMasterSid;
	}

	@Override
	public boolean getCheckRecord() {
		return _checkRecord;
	}

	@Override
	public boolean isCheckRecord() {
		return _checkRecord;
	}

	@Override
	public void setCheckRecord(boolean checkRecord) {
		_checkRecord = checkRecord;
	}

	@Override
	public String getContractName() {
		if (_contractName == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractName;
		}
	}

	@Override
	public void setContractName(String contractName) {
		_contractName = contractName;
	}

	@Override
	public double getDeductionRate() {
		return _deductionRate;
	}

	@Override
	public void setDeductionRate(double deductionRate) {
		_deductionRate = deductionRate;
	}

	@Override
	public String getDeductionCategory() {
		if (_deductionCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionCategory;
		}
	}

	@Override
	public void setDeductionCategory(String deductionCategory) {
		_deductionCategory = deductionCategory;
	}

	@Override
	public double getCogsAmount() {
		return _cogsAmount;
	}

	@Override
	public void setCogsAmount(double cogsAmount) {
		_cogsAmount = cogsAmount;
	}

	@Override
	public String getDeductionNo() {
		if (_deductionNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionNo;
		}
	}

	@Override
	public void setDeductionNo(String deductionNo) {
		_deductionNo = deductionNo;
	}

	@Override
	public Date getFinancialForecastCreationDate() {
		return _financialForecastCreationDate;
	}

	@Override
	public void setFinancialForecastCreationDate(
		Date financialForecastCreationDate) {
		_financialForecastCreationDate = financialForecastCreationDate;
	}

	@Override
	public String getCompanyNo() {
		if (_companyNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyNo;
		}
	}

	@Override
	public void setCompanyNo(String companyNo) {
		_companyNo = companyNo;
	}

	@Override
	public double getSalesUnits() {
		return _salesUnits;
	}

	@Override
	public void setSalesUnits(double salesUnits) {
		_salesUnits = salesUnits;
	}

	@Override
	public String getSessionId() {
		if (_sessionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _sessionId;
		}
	}

	@Override
	public void setSessionId(String sessionId) {
		_sessionId = sessionId;
	}

	@Override
	public String getItemName() {
		if (_itemName == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemName;
		}
	}

	@Override
	public void setItemName(String itemName) {
		_itemName = itemName;
	}

	@Override
	public String getDeductionInclusion() {
		if (_deductionInclusion == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionInclusion;
		}
	}

	@Override
	public void setDeductionInclusion(String deductionInclusion) {
		_deductionInclusion = deductionInclusion;
	}

	@Override
	public int getRsModelSid() {
		return _rsModelSid;
	}

	@Override
	public void setRsModelSid(int rsModelSid) {
		_rsModelSid = rsModelSid;
	}

	@Override
	public String getContractHolderName() {
		if (_contractHolderName == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractHolderName;
		}
	}

	@Override
	public void setContractHolderName(String contractHolderName) {
		_contractHolderName = contractHolderName;
	}

	@Override
	public int getItemMasterSid() {
		return _itemMasterSid;
	}

	@Override
	public void setItemMasterSid(int itemMasterSid) {
		_itemMasterSid = itemMasterSid;
	}

	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		_companyName = companyName;
	}

	@Override
	public String getCustomerId() {
		if (_customerId == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerId;
		}
	}

	@Override
	public void setCustomerId(String customerId) {
		_customerId = customerId;
	}

	@Override
	public String getItemId() {
		if (_itemId == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemId;
		}
	}

	@Override
	public void setItemId(String itemId) {
		_itemId = itemId;
	}

	@Override
	public double getNetProfitDollars() {
		return _netProfitDollars;
	}

	@Override
	public void setNetProfitDollars(double netProfitDollars) {
		_netProfitDollars = netProfitDollars;
	}

	@Override
	public int getGlCompanyMasterSid() {
		return _glCompanyMasterSid;
	}

	@Override
	public void setGlCompanyMasterSid(int glCompanyMasterSid) {
		_glCompanyMasterSid = glCompanyMasterSid;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getDeductionCategory1() {
		if (_deductionCategory1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionCategory1;
		}
	}

	@Override
	public void setDeductionCategory1(String deductionCategory1) {
		_deductionCategory1 = deductionCategory1;
	}

	@Override
	public String getDeductionCategory2() {
		if (_deductionCategory2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionCategory2;
		}
	}

	@Override
	public void setDeductionCategory2(String deductionCategory2) {
		_deductionCategory2 = deductionCategory2;
	}

	@Override
	public String getContractHolderNo() {
		if (_contractHolderNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractHolderNo;
		}
	}

	@Override
	public void setContractHolderNo(String contractHolderNo) {
		_contractHolderNo = contractHolderNo;
	}

	@Override
	public String getDeductionCategory3() {
		if (_deductionCategory3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionCategory3;
		}
	}

	@Override
	public void setDeductionCategory3(String deductionCategory3) {
		_deductionCategory3 = deductionCategory3;
	}

	@Override
	public String getItemNo() {
		if (_itemNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemNo;
		}
	}

	@Override
	public void setItemNo(String itemNo) {
		_itemNo = itemNo;
	}

	@Override
	public String getDeductionCategory4() {
		if (_deductionCategory4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionCategory4;
		}
	}

	@Override
	public void setDeductionCategory4(String deductionCategory4) {
		_deductionCategory4 = deductionCategory4;
	}

	@Override
	public String getDeductionCategory5() {
		if (_deductionCategory5 == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionCategory5;
		}
	}

	@Override
	public void setDeductionCategory5(String deductionCategory5) {
		_deductionCategory5 = deductionCategory5;
	}

	@Override
	public String getDeductionCategory6() {
		if (_deductionCategory6 == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionCategory6;
		}
	}

	@Override
	public void setDeductionCategory6(String deductionCategory6) {
		_deductionCategory6 = deductionCategory6;
	}

	@Override
	public String getContractId() {
		if (_contractId == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractId;
		}
	}

	@Override
	public void setContractId(String contractId) {
		_contractId = contractId;
	}

	@Override
	public String getDeductionProgram() {
		if (_deductionProgram == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionProgram;
		}
	}

	@Override
	public void setDeductionProgram(String deductionProgram) {
		_deductionProgram = deductionProgram;
	}

	@Override
	public String getBusinessUnitId() {
		if (_businessUnitId == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessUnitId;
		}
	}

	@Override
	public void setBusinessUnitId(String businessUnitId) {
		_businessUnitId = businessUnitId;
	}

	@Override
	public String getProjectionName() {
		if (_projectionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectionName;
		}
	}

	@Override
	public void setProjectionName(String projectionName) {
		_projectionName = projectionName;
	}

	@Override
	public String getUserId() {
		if (_userId == null) {
			return StringPool.BLANK;
		}
		else {
			return _userId;
		}
	}

	@Override
	public void setUserId(String userId) {
		_userId = userId;
	}

	@Override
	public String getCompanyId() {
		if (_companyId == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyId;
		}
	}

	@Override
	public void setCompanyId(String companyId) {
		_companyId = companyId;
	}

	@Override
	public String getOutboundStatus() {
		if (_outboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _outboundStatus;
		}
	}

	@Override
	public void setOutboundStatus(String outboundStatus) {
		_outboundStatus = outboundStatus;
	}

	@Override
	public String getOriginalBatchId() {
		if (_originalBatchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _originalBatchId;
		}
	}

	@Override
	public void setOriginalBatchId(String originalBatchId) {
		_originalBatchId = originalBatchId;
	}

	@Override
	public String getDeductionName() {
		if (_deductionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionName;
		}
	}

	@Override
	public void setDeductionName(String deductionName) {
		_deductionName = deductionName;
	}

	@Override
	public double getNetProfitPerUnit() {
		return _netProfitPerUnit;
	}

	@Override
	public void setNetProfitPerUnit(double netProfitPerUnit) {
		_netProfitPerUnit = netProfitPerUnit;
	}

	@Override
	public int getPeriodSid() {
		return _periodSid;
	}

	@Override
	public void setPeriodSid(int periodSid) {
		_periodSid = periodSid;
	}

	@Override
	public String getSalesInclusion() {
		if (_salesInclusion == null) {
			return StringPool.BLANK;
		}
		else {
			return _salesInclusion;
		}
	}

	@Override
	public void setSalesInclusion(String salesInclusion) {
		_salesInclusion = salesInclusion;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public String getFinancialForecastName() {
		if (_financialForecastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _financialForecastName;
		}
	}

	@Override
	public void setFinancialForecastName(String financialForecastName) {
		_financialForecastName = financialForecastName;
	}

	@Override
	public double getNetSalesDollar() {
		return _netSalesDollar;
	}

	@Override
	public void setNetSalesDollar(double netSalesDollar) {
		_netSalesDollar = netSalesDollar;
	}

	@Override
	public double getDeductionDollars() {
		return _deductionDollars;
	}

	@Override
	public void setDeductionDollars(double deductionDollars) {
		_deductionDollars = deductionDollars;
	}

	@Override
	public String getContractNo() {
		if (_contractNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractNo;
		}
	}

	@Override
	public void setContractNo(String contractNo) {
		_contractNo = contractNo;
	}

	@Override
	public StCffOutboundMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StCffOutboundMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StCffOutboundMasterImpl stCffOutboundMasterImpl = new StCffOutboundMasterImpl();

		stCffOutboundMasterImpl.setEtlCheckRecord(getEtlCheckRecord());
		stCffOutboundMasterImpl.setCustomerName(getCustomerName());
		stCffOutboundMasterImpl.setContractHolderId(getContractHolderId());
		stCffOutboundMasterImpl.setBusinessUnitNo(getBusinessUnitNo());
		stCffOutboundMasterImpl.setYear(getYear());
		stCffOutboundMasterImpl.setFinancialForecastApprovalDate(getFinancialForecastApprovalDate());
		stCffOutboundMasterImpl.setDeductionId(getDeductionId());
		stCffOutboundMasterImpl.setModifiedDate(getModifiedDate());
		stCffOutboundMasterImpl.setDeductionPerUnit(getDeductionPerUnit());
		stCffOutboundMasterImpl.setCogsPerUnit(getCogsPerUnit());
		stCffOutboundMasterImpl.setContractType(getContractType());
		stCffOutboundMasterImpl.setSource(getSource());
		stCffOutboundMasterImpl.setBusinessUnitName(getBusinessUnitName());
		stCffOutboundMasterImpl.setContractMasterSid(getContractMasterSid());
		stCffOutboundMasterImpl.setFinancialForecastId(getFinancialForecastId());
		stCffOutboundMasterImpl.setProjectId(getProjectId());
		stCffOutboundMasterImpl.setCustomerNo(getCustomerNo());
		stCffOutboundMasterImpl.setModifiedBy(getModifiedBy());
		stCffOutboundMasterImpl.setSalesDollars(getSalesDollars());
		stCffOutboundMasterImpl.setMonth(getMonth());
		stCffOutboundMasterImpl.setCffDetailsSid(getCffDetailsSid());
		stCffOutboundMasterImpl.setType(getType());
		stCffOutboundMasterImpl.setDeductionType(getDeductionType());
		stCffOutboundMasterImpl.setCompanyMasterSid(getCompanyMasterSid());
		stCffOutboundMasterImpl.setCheckRecord(getCheckRecord());
		stCffOutboundMasterImpl.setContractName(getContractName());
		stCffOutboundMasterImpl.setDeductionRate(getDeductionRate());
		stCffOutboundMasterImpl.setDeductionCategory(getDeductionCategory());
		stCffOutboundMasterImpl.setCogsAmount(getCogsAmount());
		stCffOutboundMasterImpl.setDeductionNo(getDeductionNo());
		stCffOutboundMasterImpl.setFinancialForecastCreationDate(getFinancialForecastCreationDate());
		stCffOutboundMasterImpl.setCompanyNo(getCompanyNo());
		stCffOutboundMasterImpl.setSalesUnits(getSalesUnits());
		stCffOutboundMasterImpl.setSessionId(getSessionId());
		stCffOutboundMasterImpl.setItemName(getItemName());
		stCffOutboundMasterImpl.setDeductionInclusion(getDeductionInclusion());
		stCffOutboundMasterImpl.setRsModelSid(getRsModelSid());
		stCffOutboundMasterImpl.setContractHolderName(getContractHolderName());
		stCffOutboundMasterImpl.setItemMasterSid(getItemMasterSid());
		stCffOutboundMasterImpl.setCompanyName(getCompanyName());
		stCffOutboundMasterImpl.setCustomerId(getCustomerId());
		stCffOutboundMasterImpl.setItemId(getItemId());
		stCffOutboundMasterImpl.setNetProfitDollars(getNetProfitDollars());
		stCffOutboundMasterImpl.setGlCompanyMasterSid(getGlCompanyMasterSid());
		stCffOutboundMasterImpl.setCreatedDate(getCreatedDate());
		stCffOutboundMasterImpl.setCreatedBy(getCreatedBy());
		stCffOutboundMasterImpl.setDeductionCategory1(getDeductionCategory1());
		stCffOutboundMasterImpl.setDeductionCategory2(getDeductionCategory2());
		stCffOutboundMasterImpl.setContractHolderNo(getContractHolderNo());
		stCffOutboundMasterImpl.setDeductionCategory3(getDeductionCategory3());
		stCffOutboundMasterImpl.setItemNo(getItemNo());
		stCffOutboundMasterImpl.setDeductionCategory4(getDeductionCategory4());
		stCffOutboundMasterImpl.setDeductionCategory5(getDeductionCategory5());
		stCffOutboundMasterImpl.setDeductionCategory6(getDeductionCategory6());
		stCffOutboundMasterImpl.setContractId(getContractId());
		stCffOutboundMasterImpl.setDeductionProgram(getDeductionProgram());
		stCffOutboundMasterImpl.setBusinessUnitId(getBusinessUnitId());
		stCffOutboundMasterImpl.setProjectionName(getProjectionName());
		stCffOutboundMasterImpl.setUserId(getUserId());
		stCffOutboundMasterImpl.setCompanyId(getCompanyId());
		stCffOutboundMasterImpl.setOutboundStatus(getOutboundStatus());
		stCffOutboundMasterImpl.setOriginalBatchId(getOriginalBatchId());
		stCffOutboundMasterImpl.setDeductionName(getDeductionName());
		stCffOutboundMasterImpl.setNetProfitPerUnit(getNetProfitPerUnit());
		stCffOutboundMasterImpl.setPeriodSid(getPeriodSid());
		stCffOutboundMasterImpl.setSalesInclusion(getSalesInclusion());
		stCffOutboundMasterImpl.setBatchId(getBatchId());
		stCffOutboundMasterImpl.setFinancialForecastName(getFinancialForecastName());
		stCffOutboundMasterImpl.setNetSalesDollar(getNetSalesDollar());
		stCffOutboundMasterImpl.setDeductionDollars(getDeductionDollars());
		stCffOutboundMasterImpl.setContractNo(getContractNo());

		stCffOutboundMasterImpl.resetOriginalValues();

		return stCffOutboundMasterImpl;
	}

	@Override
	public int compareTo(StCffOutboundMaster stCffOutboundMaster) {
		StCffOutboundMasterPK primaryKey = stCffOutboundMaster.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StCffOutboundMaster)) {
			return false;
		}

		StCffOutboundMaster stCffOutboundMaster = (StCffOutboundMaster)obj;

		StCffOutboundMasterPK primaryKey = stCffOutboundMaster.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<StCffOutboundMaster> toCacheModel() {
		StCffOutboundMasterCacheModel stCffOutboundMasterCacheModel = new StCffOutboundMasterCacheModel();

		stCffOutboundMasterCacheModel.stCffOutboundMasterPK = getPrimaryKey();

		stCffOutboundMasterCacheModel.etlCheckRecord = getEtlCheckRecord();

		stCffOutboundMasterCacheModel.customerName = getCustomerName();

		String customerName = stCffOutboundMasterCacheModel.customerName;

		if ((customerName != null) && (customerName.length() == 0)) {
			stCffOutboundMasterCacheModel.customerName = null;
		}

		stCffOutboundMasterCacheModel.contractHolderId = getContractHolderId();

		String contractHolderId = stCffOutboundMasterCacheModel.contractHolderId;

		if ((contractHolderId != null) && (contractHolderId.length() == 0)) {
			stCffOutboundMasterCacheModel.contractHolderId = null;
		}

		stCffOutboundMasterCacheModel.businessUnitNo = getBusinessUnitNo();

		String businessUnitNo = stCffOutboundMasterCacheModel.businessUnitNo;

		if ((businessUnitNo != null) && (businessUnitNo.length() == 0)) {
			stCffOutboundMasterCacheModel.businessUnitNo = null;
		}

		stCffOutboundMasterCacheModel.year = getYear();

		String year = stCffOutboundMasterCacheModel.year;

		if ((year != null) && (year.length() == 0)) {
			stCffOutboundMasterCacheModel.year = null;
		}

		Date financialForecastApprovalDate = getFinancialForecastApprovalDate();

		if (financialForecastApprovalDate != null) {
			stCffOutboundMasterCacheModel.financialForecastApprovalDate = financialForecastApprovalDate.getTime();
		}
		else {
			stCffOutboundMasterCacheModel.financialForecastApprovalDate = Long.MIN_VALUE;
		}

		stCffOutboundMasterCacheModel.deductionId = getDeductionId();

		String deductionId = stCffOutboundMasterCacheModel.deductionId;

		if ((deductionId != null) && (deductionId.length() == 0)) {
			stCffOutboundMasterCacheModel.deductionId = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			stCffOutboundMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			stCffOutboundMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		stCffOutboundMasterCacheModel.deductionPerUnit = getDeductionPerUnit();

		stCffOutboundMasterCacheModel.cogsPerUnit = getCogsPerUnit();

		stCffOutboundMasterCacheModel.contractType = getContractType();

		String contractType = stCffOutboundMasterCacheModel.contractType;

		if ((contractType != null) && (contractType.length() == 0)) {
			stCffOutboundMasterCacheModel.contractType = null;
		}

		stCffOutboundMasterCacheModel.source = getSource();

		String source = stCffOutboundMasterCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			stCffOutboundMasterCacheModel.source = null;
		}

		stCffOutboundMasterCacheModel.businessUnitName = getBusinessUnitName();

		String businessUnitName = stCffOutboundMasterCacheModel.businessUnitName;

		if ((businessUnitName != null) && (businessUnitName.length() == 0)) {
			stCffOutboundMasterCacheModel.businessUnitName = null;
		}

		stCffOutboundMasterCacheModel.contractMasterSid = getContractMasterSid();

		stCffOutboundMasterCacheModel.financialForecastId = getFinancialForecastId();

		String financialForecastId = stCffOutboundMasterCacheModel.financialForecastId;

		if ((financialForecastId != null) &&
				(financialForecastId.length() == 0)) {
			stCffOutboundMasterCacheModel.financialForecastId = null;
		}

		stCffOutboundMasterCacheModel.projectId = getProjectId();

		String projectId = stCffOutboundMasterCacheModel.projectId;

		if ((projectId != null) && (projectId.length() == 0)) {
			stCffOutboundMasterCacheModel.projectId = null;
		}

		stCffOutboundMasterCacheModel.customerNo = getCustomerNo();

		String customerNo = stCffOutboundMasterCacheModel.customerNo;

		if ((customerNo != null) && (customerNo.length() == 0)) {
			stCffOutboundMasterCacheModel.customerNo = null;
		}

		stCffOutboundMasterCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = stCffOutboundMasterCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			stCffOutboundMasterCacheModel.modifiedBy = null;
		}

		stCffOutboundMasterCacheModel.salesDollars = getSalesDollars();

		stCffOutboundMasterCacheModel.month = getMonth();

		stCffOutboundMasterCacheModel.cffDetailsSid = getCffDetailsSid();

		stCffOutboundMasterCacheModel.type = getType();

		String type = stCffOutboundMasterCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			stCffOutboundMasterCacheModel.type = null;
		}

		stCffOutboundMasterCacheModel.deductionType = getDeductionType();

		String deductionType = stCffOutboundMasterCacheModel.deductionType;

		if ((deductionType != null) && (deductionType.length() == 0)) {
			stCffOutboundMasterCacheModel.deductionType = null;
		}

		stCffOutboundMasterCacheModel.companyMasterSid = getCompanyMasterSid();

		stCffOutboundMasterCacheModel.checkRecord = getCheckRecord();

		stCffOutboundMasterCacheModel.contractName = getContractName();

		String contractName = stCffOutboundMasterCacheModel.contractName;

		if ((contractName != null) && (contractName.length() == 0)) {
			stCffOutboundMasterCacheModel.contractName = null;
		}

		stCffOutboundMasterCacheModel.deductionRate = getDeductionRate();

		stCffOutboundMasterCacheModel.deductionCategory = getDeductionCategory();

		String deductionCategory = stCffOutboundMasterCacheModel.deductionCategory;

		if ((deductionCategory != null) && (deductionCategory.length() == 0)) {
			stCffOutboundMasterCacheModel.deductionCategory = null;
		}

		stCffOutboundMasterCacheModel.cogsAmount = getCogsAmount();

		stCffOutboundMasterCacheModel.deductionNo = getDeductionNo();

		String deductionNo = stCffOutboundMasterCacheModel.deductionNo;

		if ((deductionNo != null) && (deductionNo.length() == 0)) {
			stCffOutboundMasterCacheModel.deductionNo = null;
		}

		Date financialForecastCreationDate = getFinancialForecastCreationDate();

		if (financialForecastCreationDate != null) {
			stCffOutboundMasterCacheModel.financialForecastCreationDate = financialForecastCreationDate.getTime();
		}
		else {
			stCffOutboundMasterCacheModel.financialForecastCreationDate = Long.MIN_VALUE;
		}

		stCffOutboundMasterCacheModel.companyNo = getCompanyNo();

		String companyNo = stCffOutboundMasterCacheModel.companyNo;

		if ((companyNo != null) && (companyNo.length() == 0)) {
			stCffOutboundMasterCacheModel.companyNo = null;
		}

		stCffOutboundMasterCacheModel.salesUnits = getSalesUnits();

		stCffOutboundMasterCacheModel.sessionId = getSessionId();

		String sessionId = stCffOutboundMasterCacheModel.sessionId;

		if ((sessionId != null) && (sessionId.length() == 0)) {
			stCffOutboundMasterCacheModel.sessionId = null;
		}

		stCffOutboundMasterCacheModel.itemName = getItemName();

		String itemName = stCffOutboundMasterCacheModel.itemName;

		if ((itemName != null) && (itemName.length() == 0)) {
			stCffOutboundMasterCacheModel.itemName = null;
		}

		stCffOutboundMasterCacheModel.deductionInclusion = getDeductionInclusion();

		String deductionInclusion = stCffOutboundMasterCacheModel.deductionInclusion;

		if ((deductionInclusion != null) && (deductionInclusion.length() == 0)) {
			stCffOutboundMasterCacheModel.deductionInclusion = null;
		}

		stCffOutboundMasterCacheModel.rsModelSid = getRsModelSid();

		stCffOutboundMasterCacheModel.contractHolderName = getContractHolderName();

		String contractHolderName = stCffOutboundMasterCacheModel.contractHolderName;

		if ((contractHolderName != null) && (contractHolderName.length() == 0)) {
			stCffOutboundMasterCacheModel.contractHolderName = null;
		}

		stCffOutboundMasterCacheModel.itemMasterSid = getItemMasterSid();

		stCffOutboundMasterCacheModel.companyName = getCompanyName();

		String companyName = stCffOutboundMasterCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			stCffOutboundMasterCacheModel.companyName = null;
		}

		stCffOutboundMasterCacheModel.customerId = getCustomerId();

		String customerId = stCffOutboundMasterCacheModel.customerId;

		if ((customerId != null) && (customerId.length() == 0)) {
			stCffOutboundMasterCacheModel.customerId = null;
		}

		stCffOutboundMasterCacheModel.itemId = getItemId();

		String itemId = stCffOutboundMasterCacheModel.itemId;

		if ((itemId != null) && (itemId.length() == 0)) {
			stCffOutboundMasterCacheModel.itemId = null;
		}

		stCffOutboundMasterCacheModel.netProfitDollars = getNetProfitDollars();

		stCffOutboundMasterCacheModel.glCompanyMasterSid = getGlCompanyMasterSid();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			stCffOutboundMasterCacheModel.createdDate = createdDate.getTime();
		}
		else {
			stCffOutboundMasterCacheModel.createdDate = Long.MIN_VALUE;
		}

		stCffOutboundMasterCacheModel.createdBy = getCreatedBy();

		String createdBy = stCffOutboundMasterCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			stCffOutboundMasterCacheModel.createdBy = null;
		}

		stCffOutboundMasterCacheModel.deductionCategory1 = getDeductionCategory1();

		String deductionCategory1 = stCffOutboundMasterCacheModel.deductionCategory1;

		if ((deductionCategory1 != null) && (deductionCategory1.length() == 0)) {
			stCffOutboundMasterCacheModel.deductionCategory1 = null;
		}

		stCffOutboundMasterCacheModel.deductionCategory2 = getDeductionCategory2();

		String deductionCategory2 = stCffOutboundMasterCacheModel.deductionCategory2;

		if ((deductionCategory2 != null) && (deductionCategory2.length() == 0)) {
			stCffOutboundMasterCacheModel.deductionCategory2 = null;
		}

		stCffOutboundMasterCacheModel.contractHolderNo = getContractHolderNo();

		String contractHolderNo = stCffOutboundMasterCacheModel.contractHolderNo;

		if ((contractHolderNo != null) && (contractHolderNo.length() == 0)) {
			stCffOutboundMasterCacheModel.contractHolderNo = null;
		}

		stCffOutboundMasterCacheModel.deductionCategory3 = getDeductionCategory3();

		String deductionCategory3 = stCffOutboundMasterCacheModel.deductionCategory3;

		if ((deductionCategory3 != null) && (deductionCategory3.length() == 0)) {
			stCffOutboundMasterCacheModel.deductionCategory3 = null;
		}

		stCffOutboundMasterCacheModel.itemNo = getItemNo();

		String itemNo = stCffOutboundMasterCacheModel.itemNo;

		if ((itemNo != null) && (itemNo.length() == 0)) {
			stCffOutboundMasterCacheModel.itemNo = null;
		}

		stCffOutboundMasterCacheModel.deductionCategory4 = getDeductionCategory4();

		String deductionCategory4 = stCffOutboundMasterCacheModel.deductionCategory4;

		if ((deductionCategory4 != null) && (deductionCategory4.length() == 0)) {
			stCffOutboundMasterCacheModel.deductionCategory4 = null;
		}

		stCffOutboundMasterCacheModel.deductionCategory5 = getDeductionCategory5();

		String deductionCategory5 = stCffOutboundMasterCacheModel.deductionCategory5;

		if ((deductionCategory5 != null) && (deductionCategory5.length() == 0)) {
			stCffOutboundMasterCacheModel.deductionCategory5 = null;
		}

		stCffOutboundMasterCacheModel.deductionCategory6 = getDeductionCategory6();

		String deductionCategory6 = stCffOutboundMasterCacheModel.deductionCategory6;

		if ((deductionCategory6 != null) && (deductionCategory6.length() == 0)) {
			stCffOutboundMasterCacheModel.deductionCategory6 = null;
		}

		stCffOutboundMasterCacheModel.contractId = getContractId();

		String contractId = stCffOutboundMasterCacheModel.contractId;

		if ((contractId != null) && (contractId.length() == 0)) {
			stCffOutboundMasterCacheModel.contractId = null;
		}

		stCffOutboundMasterCacheModel.deductionProgram = getDeductionProgram();

		String deductionProgram = stCffOutboundMasterCacheModel.deductionProgram;

		if ((deductionProgram != null) && (deductionProgram.length() == 0)) {
			stCffOutboundMasterCacheModel.deductionProgram = null;
		}

		stCffOutboundMasterCacheModel.businessUnitId = getBusinessUnitId();

		String businessUnitId = stCffOutboundMasterCacheModel.businessUnitId;

		if ((businessUnitId != null) && (businessUnitId.length() == 0)) {
			stCffOutboundMasterCacheModel.businessUnitId = null;
		}

		stCffOutboundMasterCacheModel.projectionName = getProjectionName();

		String projectionName = stCffOutboundMasterCacheModel.projectionName;

		if ((projectionName != null) && (projectionName.length() == 0)) {
			stCffOutboundMasterCacheModel.projectionName = null;
		}

		stCffOutboundMasterCacheModel.userId = getUserId();

		String userId = stCffOutboundMasterCacheModel.userId;

		if ((userId != null) && (userId.length() == 0)) {
			stCffOutboundMasterCacheModel.userId = null;
		}

		stCffOutboundMasterCacheModel.companyId = getCompanyId();

		String companyId = stCffOutboundMasterCacheModel.companyId;

		if ((companyId != null) && (companyId.length() == 0)) {
			stCffOutboundMasterCacheModel.companyId = null;
		}

		stCffOutboundMasterCacheModel.outboundStatus = getOutboundStatus();

		String outboundStatus = stCffOutboundMasterCacheModel.outboundStatus;

		if ((outboundStatus != null) && (outboundStatus.length() == 0)) {
			stCffOutboundMasterCacheModel.outboundStatus = null;
		}

		stCffOutboundMasterCacheModel.originalBatchId = getOriginalBatchId();

		String originalBatchId = stCffOutboundMasterCacheModel.originalBatchId;

		if ((originalBatchId != null) && (originalBatchId.length() == 0)) {
			stCffOutboundMasterCacheModel.originalBatchId = null;
		}

		stCffOutboundMasterCacheModel.deductionName = getDeductionName();

		String deductionName = stCffOutboundMasterCacheModel.deductionName;

		if ((deductionName != null) && (deductionName.length() == 0)) {
			stCffOutboundMasterCacheModel.deductionName = null;
		}

		stCffOutboundMasterCacheModel.netProfitPerUnit = getNetProfitPerUnit();

		stCffOutboundMasterCacheModel.periodSid = getPeriodSid();

		stCffOutboundMasterCacheModel.salesInclusion = getSalesInclusion();

		String salesInclusion = stCffOutboundMasterCacheModel.salesInclusion;

		if ((salesInclusion != null) && (salesInclusion.length() == 0)) {
			stCffOutboundMasterCacheModel.salesInclusion = null;
		}

		stCffOutboundMasterCacheModel.batchId = getBatchId();

		String batchId = stCffOutboundMasterCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			stCffOutboundMasterCacheModel.batchId = null;
		}

		stCffOutboundMasterCacheModel.financialForecastName = getFinancialForecastName();

		String financialForecastName = stCffOutboundMasterCacheModel.financialForecastName;

		if ((financialForecastName != null) &&
				(financialForecastName.length() == 0)) {
			stCffOutboundMasterCacheModel.financialForecastName = null;
		}

		stCffOutboundMasterCacheModel.netSalesDollar = getNetSalesDollar();

		stCffOutboundMasterCacheModel.deductionDollars = getDeductionDollars();

		stCffOutboundMasterCacheModel.contractNo = getContractNo();

		String contractNo = stCffOutboundMasterCacheModel.contractNo;

		if ((contractNo != null) && (contractNo.length() == 0)) {
			stCffOutboundMasterCacheModel.contractNo = null;
		}

		return stCffOutboundMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(143);

		sb.append("{etlCheckRecord=");
		sb.append(getEtlCheckRecord());
		sb.append(", customerName=");
		sb.append(getCustomerName());
		sb.append(", contractHolderId=");
		sb.append(getContractHolderId());
		sb.append(", businessUnitNo=");
		sb.append(getBusinessUnitNo());
		sb.append(", year=");
		sb.append(getYear());
		sb.append(", financialForecastApprovalDate=");
		sb.append(getFinancialForecastApprovalDate());
		sb.append(", deductionId=");
		sb.append(getDeductionId());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", deductionPerUnit=");
		sb.append(getDeductionPerUnit());
		sb.append(", cogsPerUnit=");
		sb.append(getCogsPerUnit());
		sb.append(", contractType=");
		sb.append(getContractType());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", businessUnitName=");
		sb.append(getBusinessUnitName());
		sb.append(", contractMasterSid=");
		sb.append(getContractMasterSid());
		sb.append(", financialForecastId=");
		sb.append(getFinancialForecastId());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", customerNo=");
		sb.append(getCustomerNo());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", salesDollars=");
		sb.append(getSalesDollars());
		sb.append(", month=");
		sb.append(getMonth());
		sb.append(", cffDetailsSid=");
		sb.append(getCffDetailsSid());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", deductionType=");
		sb.append(getDeductionType());
		sb.append(", companyMasterSid=");
		sb.append(getCompanyMasterSid());
		sb.append(", checkRecord=");
		sb.append(getCheckRecord());
		sb.append(", contractName=");
		sb.append(getContractName());
		sb.append(", deductionRate=");
		sb.append(getDeductionRate());
		sb.append(", deductionCategory=");
		sb.append(getDeductionCategory());
		sb.append(", cogsAmount=");
		sb.append(getCogsAmount());
		sb.append(", deductionNo=");
		sb.append(getDeductionNo());
		sb.append(", financialForecastCreationDate=");
		sb.append(getFinancialForecastCreationDate());
		sb.append(", companyNo=");
		sb.append(getCompanyNo());
		sb.append(", salesUnits=");
		sb.append(getSalesUnits());
		sb.append(", sessionId=");
		sb.append(getSessionId());
		sb.append(", itemName=");
		sb.append(getItemName());
		sb.append(", deductionInclusion=");
		sb.append(getDeductionInclusion());
		sb.append(", rsModelSid=");
		sb.append(getRsModelSid());
		sb.append(", contractHolderName=");
		sb.append(getContractHolderName());
		sb.append(", itemMasterSid=");
		sb.append(getItemMasterSid());
		sb.append(", companyName=");
		sb.append(getCompanyName());
		sb.append(", customerId=");
		sb.append(getCustomerId());
		sb.append(", itemId=");
		sb.append(getItemId());
		sb.append(", netProfitDollars=");
		sb.append(getNetProfitDollars());
		sb.append(", glCompanyMasterSid=");
		sb.append(getGlCompanyMasterSid());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", deductionCategory1=");
		sb.append(getDeductionCategory1());
		sb.append(", deductionCategory2=");
		sb.append(getDeductionCategory2());
		sb.append(", contractHolderNo=");
		sb.append(getContractHolderNo());
		sb.append(", deductionCategory3=");
		sb.append(getDeductionCategory3());
		sb.append(", itemNo=");
		sb.append(getItemNo());
		sb.append(", deductionCategory4=");
		sb.append(getDeductionCategory4());
		sb.append(", deductionCategory5=");
		sb.append(getDeductionCategory5());
		sb.append(", deductionCategory6=");
		sb.append(getDeductionCategory6());
		sb.append(", contractId=");
		sb.append(getContractId());
		sb.append(", deductionProgram=");
		sb.append(getDeductionProgram());
		sb.append(", businessUnitId=");
		sb.append(getBusinessUnitId());
		sb.append(", projectionName=");
		sb.append(getProjectionName());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", outboundStatus=");
		sb.append(getOutboundStatus());
		sb.append(", originalBatchId=");
		sb.append(getOriginalBatchId());
		sb.append(", deductionName=");
		sb.append(getDeductionName());
		sb.append(", netProfitPerUnit=");
		sb.append(getNetProfitPerUnit());
		sb.append(", periodSid=");
		sb.append(getPeriodSid());
		sb.append(", salesInclusion=");
		sb.append(getSalesInclusion());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", financialForecastName=");
		sb.append(getFinancialForecastName());
		sb.append(", netSalesDollar=");
		sb.append(getNetSalesDollar());
		sb.append(", deductionDollars=");
		sb.append(getDeductionDollars());
		sb.append(", contractNo=");
		sb.append(getContractNo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(217);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.parttwo.model.StCffOutboundMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>etlCheckRecord</column-name><column-value><![CDATA[");
		sb.append(getEtlCheckRecord());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerName</column-name><column-value><![CDATA[");
		sb.append(getCustomerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractHolderId</column-name><column-value><![CDATA[");
		sb.append(getContractHolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessUnitNo</column-name><column-value><![CDATA[");
		sb.append(getBusinessUnitNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>financialForecastApprovalDate</column-name><column-value><![CDATA[");
		sb.append(getFinancialForecastApprovalDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionId</column-name><column-value><![CDATA[");
		sb.append(getDeductionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionPerUnit</column-name><column-value><![CDATA[");
		sb.append(getDeductionPerUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cogsPerUnit</column-name><column-value><![CDATA[");
		sb.append(getCogsPerUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractType</column-name><column-value><![CDATA[");
		sb.append(getContractType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessUnitName</column-name><column-value><![CDATA[");
		sb.append(getBusinessUnitName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractMasterSid</column-name><column-value><![CDATA[");
		sb.append(getContractMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>financialForecastId</column-name><column-value><![CDATA[");
		sb.append(getFinancialForecastId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerNo</column-name><column-value><![CDATA[");
		sb.append(getCustomerNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>salesDollars</column-name><column-value><![CDATA[");
		sb.append(getSalesDollars());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>month</column-name><column-value><![CDATA[");
		sb.append(getMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cffDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getCffDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionType</column-name><column-value><![CDATA[");
		sb.append(getDeductionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyMasterSid</column-name><column-value><![CDATA[");
		sb.append(getCompanyMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkRecord</column-name><column-value><![CDATA[");
		sb.append(getCheckRecord());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractName</column-name><column-value><![CDATA[");
		sb.append(getContractName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionRate</column-name><column-value><![CDATA[");
		sb.append(getDeductionRate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionCategory</column-name><column-value><![CDATA[");
		sb.append(getDeductionCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cogsAmount</column-name><column-value><![CDATA[");
		sb.append(getCogsAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionNo</column-name><column-value><![CDATA[");
		sb.append(getDeductionNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>financialForecastCreationDate</column-name><column-value><![CDATA[");
		sb.append(getFinancialForecastCreationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyNo</column-name><column-value><![CDATA[");
		sb.append(getCompanyNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>salesUnits</column-name><column-value><![CDATA[");
		sb.append(getSalesUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sessionId</column-name><column-value><![CDATA[");
		sb.append(getSessionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemName</column-name><column-value><![CDATA[");
		sb.append(getItemName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionInclusion</column-name><column-value><![CDATA[");
		sb.append(getDeductionInclusion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsModelSid</column-name><column-value><![CDATA[");
		sb.append(getRsModelSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractHolderName</column-name><column-value><![CDATA[");
		sb.append(getContractHolderName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
		sb.append(getItemMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyName</column-name><column-value><![CDATA[");
		sb.append(getCompanyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerId</column-name><column-value><![CDATA[");
		sb.append(getCustomerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netProfitDollars</column-name><column-value><![CDATA[");
		sb.append(getNetProfitDollars());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>glCompanyMasterSid</column-name><column-value><![CDATA[");
		sb.append(getGlCompanyMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionCategory1</column-name><column-value><![CDATA[");
		sb.append(getDeductionCategory1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionCategory2</column-name><column-value><![CDATA[");
		sb.append(getDeductionCategory2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractHolderNo</column-name><column-value><![CDATA[");
		sb.append(getContractHolderNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionCategory3</column-name><column-value><![CDATA[");
		sb.append(getDeductionCategory3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemNo</column-name><column-value><![CDATA[");
		sb.append(getItemNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionCategory4</column-name><column-value><![CDATA[");
		sb.append(getDeductionCategory4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionCategory5</column-name><column-value><![CDATA[");
		sb.append(getDeductionCategory5());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionCategory6</column-name><column-value><![CDATA[");
		sb.append(getDeductionCategory6());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractId</column-name><column-value><![CDATA[");
		sb.append(getContractId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionProgram</column-name><column-value><![CDATA[");
		sb.append(getDeductionProgram());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessUnitId</column-name><column-value><![CDATA[");
		sb.append(getBusinessUnitId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionName</column-name><column-value><![CDATA[");
		sb.append(getProjectionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>outboundStatus</column-name><column-value><![CDATA[");
		sb.append(getOutboundStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>originalBatchId</column-name><column-value><![CDATA[");
		sb.append(getOriginalBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionName</column-name><column-value><![CDATA[");
		sb.append(getDeductionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netProfitPerUnit</column-name><column-value><![CDATA[");
		sb.append(getNetProfitPerUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodSid</column-name><column-value><![CDATA[");
		sb.append(getPeriodSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>salesInclusion</column-name><column-value><![CDATA[");
		sb.append(getSalesInclusion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>financialForecastName</column-name><column-value><![CDATA[");
		sb.append(getFinancialForecastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSalesDollar</column-name><column-value><![CDATA[");
		sb.append(getNetSalesDollar());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionDollars</column-name><column-value><![CDATA[");
		sb.append(getDeductionDollars());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractNo</column-name><column-value><![CDATA[");
		sb.append(getContractNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = StCffOutboundMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			StCffOutboundMaster.class
		};
	private boolean _etlCheckRecord;
	private String _customerName;
	private String _contractHolderId;
	private String _businessUnitNo;
	private String _year;
	private Date _financialForecastApprovalDate;
	private String _deductionId;
	private Date _modifiedDate;
	private double _deductionPerUnit;
	private double _cogsPerUnit;
	private String _contractType;
	private String _source;
	private String _businessUnitName;
	private int _contractMasterSid;
	private String _financialForecastId;
	private String _projectId;
	private String _customerNo;
	private String _modifiedBy;
	private double _salesDollars;
	private int _month;
	private int _cffDetailsSid;
	private String _type;
	private String _deductionType;
	private int _companyMasterSid;
	private boolean _checkRecord;
	private String _contractName;
	private double _deductionRate;
	private String _deductionCategory;
	private double _cogsAmount;
	private String _deductionNo;
	private Date _financialForecastCreationDate;
	private String _companyNo;
	private double _salesUnits;
	private String _sessionId;
	private String _itemName;
	private String _deductionInclusion;
	private int _rsModelSid;
	private String _contractHolderName;
	private int _itemMasterSid;
	private String _companyName;
	private String _customerId;
	private String _itemId;
	private double _netProfitDollars;
	private int _glCompanyMasterSid;
	private Date _createdDate;
	private String _createdBy;
	private String _deductionCategory1;
	private String _deductionCategory2;
	private String _contractHolderNo;
	private String _deductionCategory3;
	private String _itemNo;
	private String _deductionCategory4;
	private String _deductionCategory5;
	private String _deductionCategory6;
	private String _contractId;
	private String _deductionProgram;
	private String _businessUnitId;
	private String _projectionName;
	private String _userId;
	private String _companyId;
	private String _outboundStatus;
	private String _originalBatchId;
	private String _deductionName;
	private double _netProfitPerUnit;
	private int _periodSid;
	private String _salesInclusion;
	private String _batchId;
	private String _financialForecastName;
	private double _netSalesDollar;
	private double _deductionDollars;
	private String _contractNo;
	private StCffOutboundMaster _escapedModel;
}