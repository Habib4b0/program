/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.stpl.app.model.NmDiscountProjection;
import com.stpl.app.model.NmDiscountProjectionModel;
import com.stpl.app.service.persistence.NmDiscountProjectionPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NmDiscountProjection service. Represents a row in the &quot;NM_DISCOUNT_PROJECTION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link NmDiscountProjectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NmDiscountProjectionImpl}.
 * </p>
 *
 * @author
 * @see NmDiscountProjectionImpl
 * @see NmDiscountProjection
 * @see NmDiscountProjectionModel
 * @generated
 */
@ProviderType
public class NmDiscountProjectionModelImpl extends BaseModelImpl<NmDiscountProjection>
	implements NmDiscountProjectionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a nm discount projection model instance should use the {@link NmDiscountProjection} interface instead.
	 */
	public static final String TABLE_NAME = "NM_DISCOUNT_PROJECTION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PERIOD_SID", Types.INTEGER },
			{ "PROJECTION_RATE", Types.DOUBLE },
			{ "PROJECTION_DETAILS_SID", Types.INTEGER },
			{ "PROJECTION_SALES", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PERIOD_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PROJECTION_RATE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PROJECTION_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PROJECTION_SALES", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table NM_DISCOUNT_PROJECTION (PERIOD_SID INTEGER not null IDENTITY,PROJECTION_RATE DOUBLE,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,PROJECTION_SALES DOUBLE,primary key (PERIOD_SID, PROJECTION_DETAILS_SID))";
	public static final String TABLE_SQL_DROP = "drop table NM_DISCOUNT_PROJECTION";
	public static final String ORDER_BY_JPQL = " ORDER BY nmDiscountProjection.id.periodSid ASC, nmDiscountProjection.id.projectionDetailsSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY NM_DISCOUNT_PROJECTION.PERIOD_SID ASC, NM_DISCOUNT_PROJECTION.PROJECTION_DETAILS_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.NmDiscountProjection"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.NmDiscountProjection"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.NmDiscountProjection"));

	public NmDiscountProjectionModelImpl() {
	}

	@Override
	public NmDiscountProjectionPK getPrimaryKey() {
		return new NmDiscountProjectionPK(_periodSid, _projectionDetailsSid);
	}

	@Override
	public void setPrimaryKey(NmDiscountProjectionPK primaryKey) {
		setPeriodSid(primaryKey.periodSid);
		setProjectionDetailsSid(primaryKey.projectionDetailsSid);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new NmDiscountProjectionPK(_periodSid, _projectionDetailsSid);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((NmDiscountProjectionPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return NmDiscountProjection.class;
	}

	@Override
	public String getModelClassName() {
		return NmDiscountProjection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("periodSid", getPeriodSid());
		attributes.put("projectionRate", getProjectionRate());
		attributes.put("projectionDetailsSid", getProjectionDetailsSid());
		attributes.put("projectionSales", getProjectionSales());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer periodSid = (Integer)attributes.get("periodSid");

		if (periodSid != null) {
			setPeriodSid(periodSid);
		}

		Double projectionRate = (Double)attributes.get("projectionRate");

		if (projectionRate != null) {
			setProjectionRate(projectionRate);
		}

		Integer projectionDetailsSid = (Integer)attributes.get(
				"projectionDetailsSid");

		if (projectionDetailsSid != null) {
			setProjectionDetailsSid(projectionDetailsSid);
		}

		Double projectionSales = (Double)attributes.get("projectionSales");

		if (projectionSales != null) {
			setProjectionSales(projectionSales);
		}
	}

	@Override
	public int getPeriodSid() {
		return _periodSid;
	}

	@Override
	public void setPeriodSid(int periodSid) {
		_periodSid = periodSid;
	}

	@Override
	public double getProjectionRate() {
		return _projectionRate;
	}

	@Override
	public void setProjectionRate(double projectionRate) {
		_projectionRate = projectionRate;
	}

	@Override
	public int getProjectionDetailsSid() {
		return _projectionDetailsSid;
	}

	@Override
	public void setProjectionDetailsSid(int projectionDetailsSid) {
		_projectionDetailsSid = projectionDetailsSid;
	}

	@Override
	public double getProjectionSales() {
		return _projectionSales;
	}

	@Override
	public void setProjectionSales(double projectionSales) {
		_projectionSales = projectionSales;
	}

	@Override
	public NmDiscountProjection toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (NmDiscountProjection)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NmDiscountProjectionImpl nmDiscountProjectionImpl = new NmDiscountProjectionImpl();

		nmDiscountProjectionImpl.setPeriodSid(getPeriodSid());
		nmDiscountProjectionImpl.setProjectionRate(getProjectionRate());
		nmDiscountProjectionImpl.setProjectionDetailsSid(getProjectionDetailsSid());
		nmDiscountProjectionImpl.setProjectionSales(getProjectionSales());

		nmDiscountProjectionImpl.resetOriginalValues();

		return nmDiscountProjectionImpl;
	}

	@Override
	public int compareTo(NmDiscountProjection nmDiscountProjection) {
		NmDiscountProjectionPK primaryKey = nmDiscountProjection.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof NmDiscountProjection)) {
			return false;
		}

		NmDiscountProjection nmDiscountProjection = (NmDiscountProjection)obj;

		NmDiscountProjectionPK primaryKey = nmDiscountProjection.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<NmDiscountProjection> toCacheModel() {
		NmDiscountProjectionCacheModel nmDiscountProjectionCacheModel = new NmDiscountProjectionCacheModel();

		nmDiscountProjectionCacheModel.nmDiscountProjectionPK = getPrimaryKey();

		nmDiscountProjectionCacheModel.periodSid = getPeriodSid();

		nmDiscountProjectionCacheModel.projectionRate = getProjectionRate();

		nmDiscountProjectionCacheModel.projectionDetailsSid = getProjectionDetailsSid();

		nmDiscountProjectionCacheModel.projectionSales = getProjectionSales();

		return nmDiscountProjectionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{periodSid=");
		sb.append(getPeriodSid());
		sb.append(", projectionRate=");
		sb.append(getProjectionRate());
		sb.append(", projectionDetailsSid=");
		sb.append(getProjectionDetailsSid());
		sb.append(", projectionSales=");
		sb.append(getProjectionSales());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.NmDiscountProjection");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>periodSid</column-name><column-value><![CDATA[");
		sb.append(getPeriodSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionRate</column-name><column-value><![CDATA[");
		sb.append(getProjectionRate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getProjectionDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionSales</column-name><column-value><![CDATA[");
		sb.append(getProjectionSales());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = NmDiscountProjection.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			NmDiscountProjection.class
		};
	private int _periodSid;
	private double _projectionRate;
	private int _projectionDetailsSid;
	private double _projectionSales;
	private NmDiscountProjection _escapedModel;
}