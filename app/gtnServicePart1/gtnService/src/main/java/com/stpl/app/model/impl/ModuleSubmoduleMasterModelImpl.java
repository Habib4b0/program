/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.ModuleSubmoduleMaster;
import com.stpl.app.model.ModuleSubmoduleMasterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ModuleSubmoduleMaster service. Represents a row in the &quot;MODULE_SUBMODULE_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ModuleSubmoduleMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ModuleSubmoduleMasterImpl}.
 * </p>
 *
 * @author
 * @see ModuleSubmoduleMasterImpl
 * @see ModuleSubmoduleMaster
 * @see ModuleSubmoduleMasterModel
 * @generated
 */
@ProviderType
public class ModuleSubmoduleMasterModelImpl extends BaseModelImpl<ModuleSubmoduleMaster>
	implements ModuleSubmoduleMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a module submodule master model instance should use the {@link ModuleSubmoduleMaster} interface instead.
	 */
	public static final String TABLE_NAME = "MODULE_SUBMODULE_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.INTEGER },
			{ "CATEGORY", Types.VARCHAR },
			{ "MODULE_SUBMODULE_SID", Types.INTEGER },
			{ "SUBMODULE_NAME", Types.VARCHAR },
			{ "MODULE_NAME", Types.VARCHAR },
			{ "VERSION_NO", Types.INTEGER },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "MODIFIED_DATE", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CATEGORY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODULE_SUBMODULE_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SUBMODULE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODULE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VERSION_NO", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table MODULE_SUBMODULE_MASTER (CREATED_DATE DATE null,CREATED_BY INTEGER,CATEGORY VARCHAR(75) null,MODULE_SUBMODULE_SID INTEGER not null primary key IDENTITY,SUBMODULE_NAME VARCHAR(75) null,MODULE_NAME VARCHAR(75) null,VERSION_NO INTEGER,MODIFIED_BY INTEGER,MODIFIED_DATE DATE null)";
	public static final String TABLE_SQL_DROP = "drop table MODULE_SUBMODULE_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY moduleSubmoduleMaster.moduleSubmoduleSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MODULE_SUBMODULE_MASTER.MODULE_SUBMODULE_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.ModuleSubmoduleMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.ModuleSubmoduleMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.stpl.app.model.ModuleSubmoduleMaster"),
			true);
	public static final long MODULENAME_COLUMN_BITMASK = 1L;
	public static final long MODULESUBMODULESID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.ModuleSubmoduleMaster"));

	public ModuleSubmoduleMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _moduleSubmoduleSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setModuleSubmoduleSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _moduleSubmoduleSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ModuleSubmoduleMaster.class;
	}

	@Override
	public String getModelClassName() {
		return ModuleSubmoduleMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("category", getCategory());
		attributes.put("moduleSubmoduleSid", getModuleSubmoduleSid());
		attributes.put("submoduleName", getSubmoduleName());
		attributes.put("moduleName", getModuleName());
		attributes.put("versionNo", getVersionNo());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}

		Integer moduleSubmoduleSid = (Integer)attributes.get(
				"moduleSubmoduleSid");

		if (moduleSubmoduleSid != null) {
			setModuleSubmoduleSid(moduleSubmoduleSid);
		}

		String submoduleName = (String)attributes.get("submoduleName");

		if (submoduleName != null) {
			setSubmoduleName(submoduleName);
		}

		String moduleName = (String)attributes.get("moduleName");

		if (moduleName != null) {
			setModuleName(moduleName);
		}

		Integer versionNo = (Integer)attributes.get("versionNo");

		if (versionNo != null) {
			setVersionNo(versionNo);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_category = category;
	}

	@Override
	public int getModuleSubmoduleSid() {
		return _moduleSubmoduleSid;
	}

	@Override
	public void setModuleSubmoduleSid(int moduleSubmoduleSid) {
		_moduleSubmoduleSid = moduleSubmoduleSid;
	}

	@Override
	public String getSubmoduleName() {
		if (_submoduleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _submoduleName;
		}
	}

	@Override
	public void setSubmoduleName(String submoduleName) {
		_submoduleName = submoduleName;
	}

	@Override
	public String getModuleName() {
		if (_moduleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _moduleName;
		}
	}

	@Override
	public void setModuleName(String moduleName) {
		_columnBitmask |= MODULENAME_COLUMN_BITMASK;

		if (_originalModuleName == null) {
			_originalModuleName = _moduleName;
		}

		_moduleName = moduleName;
	}

	public String getOriginalModuleName() {
		return GetterUtil.getString(_originalModuleName);
	}

	@Override
	public int getVersionNo() {
		return _versionNo;
	}

	@Override
	public void setVersionNo(int versionNo) {
		_versionNo = versionNo;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ModuleSubmoduleMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ModuleSubmoduleMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ModuleSubmoduleMasterImpl moduleSubmoduleMasterImpl = new ModuleSubmoduleMasterImpl();

		moduleSubmoduleMasterImpl.setCreatedDate(getCreatedDate());
		moduleSubmoduleMasterImpl.setCreatedBy(getCreatedBy());
		moduleSubmoduleMasterImpl.setCategory(getCategory());
		moduleSubmoduleMasterImpl.setModuleSubmoduleSid(getModuleSubmoduleSid());
		moduleSubmoduleMasterImpl.setSubmoduleName(getSubmoduleName());
		moduleSubmoduleMasterImpl.setModuleName(getModuleName());
		moduleSubmoduleMasterImpl.setVersionNo(getVersionNo());
		moduleSubmoduleMasterImpl.setModifiedBy(getModifiedBy());
		moduleSubmoduleMasterImpl.setModifiedDate(getModifiedDate());

		moduleSubmoduleMasterImpl.resetOriginalValues();

		return moduleSubmoduleMasterImpl;
	}

	@Override
	public int compareTo(ModuleSubmoduleMaster moduleSubmoduleMaster) {
		int primaryKey = moduleSubmoduleMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ModuleSubmoduleMaster)) {
			return false;
		}

		ModuleSubmoduleMaster moduleSubmoduleMaster = (ModuleSubmoduleMaster)obj;

		int primaryKey = moduleSubmoduleMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ModuleSubmoduleMasterModelImpl moduleSubmoduleMasterModelImpl = this;

		moduleSubmoduleMasterModelImpl._originalModuleName = moduleSubmoduleMasterModelImpl._moduleName;

		moduleSubmoduleMasterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ModuleSubmoduleMaster> toCacheModel() {
		ModuleSubmoduleMasterCacheModel moduleSubmoduleMasterCacheModel = new ModuleSubmoduleMasterCacheModel();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			moduleSubmoduleMasterCacheModel.createdDate = createdDate.getTime();
		}
		else {
			moduleSubmoduleMasterCacheModel.createdDate = Long.MIN_VALUE;
		}

		moduleSubmoduleMasterCacheModel.createdBy = getCreatedBy();

		moduleSubmoduleMasterCacheModel.category = getCategory();

		String category = moduleSubmoduleMasterCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			moduleSubmoduleMasterCacheModel.category = null;
		}

		moduleSubmoduleMasterCacheModel.moduleSubmoduleSid = getModuleSubmoduleSid();

		moduleSubmoduleMasterCacheModel.submoduleName = getSubmoduleName();

		String submoduleName = moduleSubmoduleMasterCacheModel.submoduleName;

		if ((submoduleName != null) && (submoduleName.length() == 0)) {
			moduleSubmoduleMasterCacheModel.submoduleName = null;
		}

		moduleSubmoduleMasterCacheModel.moduleName = getModuleName();

		String moduleName = moduleSubmoduleMasterCacheModel.moduleName;

		if ((moduleName != null) && (moduleName.length() == 0)) {
			moduleSubmoduleMasterCacheModel.moduleName = null;
		}

		moduleSubmoduleMasterCacheModel.versionNo = getVersionNo();

		moduleSubmoduleMasterCacheModel.modifiedBy = getModifiedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			moduleSubmoduleMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			moduleSubmoduleMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return moduleSubmoduleMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append(", moduleSubmoduleSid=");
		sb.append(getModuleSubmoduleSid());
		sb.append(", submoduleName=");
		sb.append(getSubmoduleName());
		sb.append(", moduleName=");
		sb.append(getModuleName());
		sb.append(", versionNo=");
		sb.append(getVersionNo());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.ModuleSubmoduleMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moduleSubmoduleSid</column-name><column-value><![CDATA[");
		sb.append(getModuleSubmoduleSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submoduleName</column-name><column-value><![CDATA[");
		sb.append(getSubmoduleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moduleName</column-name><column-value><![CDATA[");
		sb.append(getModuleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionNo</column-name><column-value><![CDATA[");
		sb.append(getVersionNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ModuleSubmoduleMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ModuleSubmoduleMaster.class
		};
	private Date _createdDate;
	private int _createdBy;
	private String _category;
	private int _moduleSubmoduleSid;
	private String _submoduleName;
	private String _moduleName;
	private String _originalModuleName;
	private int _versionNo;
	private int _modifiedBy;
	private Date _modifiedDate;
	private long _columnBitmask;
	private ModuleSubmoduleMaster _escapedModel;
}