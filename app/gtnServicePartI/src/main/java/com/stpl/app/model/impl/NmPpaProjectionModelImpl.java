package com.stpl.app.model.impl;

import com.stpl.app.model.NmPpaProjection;
import com.stpl.app.model.NmPpaProjectionModel;
import com.stpl.app.service.persistence.NmPpaProjectionPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NmPpaProjection service. Represents a row in the &quot;NM_PPA_PROJECTION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.NmPpaProjectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NmPpaProjectionImpl}.
 * </p>
 *
 * @author
 * @see NmPpaProjectionImpl
 * @see com.stpl.app.model.NmPpaProjection
 * @see com.stpl.app.model.NmPpaProjectionModel
 * @generated
 */
public class NmPpaProjectionModelImpl extends BaseModelImpl<NmPpaProjection>
    implements NmPpaProjectionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a nm ppa projection model instance should use the {@link com.stpl.app.model.NmPpaProjection} interface instead.
     */
    public static final String TABLE_NAME = "NM_PPA_PROJECTION";
    public static final Object[][] TABLE_COLUMNS = {
            { "PERIOD_SID", Types.INTEGER },
            { "PROJECTION_RATE", Types.DOUBLE },
            { "PROJECTION_DETAILS_SID", Types.INTEGER },
            { "PRICE_CAP", Types.DOUBLE },
            { "PROJECTION_DISCOUNT_UNITS", Types.DOUBLE },
            { "PROJECTION_DISCOUNT_DOLLAR", Types.DOUBLE },
            { "RESET", Types.BOOLEAN },
            { "PROJECTION_SALES", Types.DOUBLE },
            { "PROJECTION_MAP", Types.DOUBLE },
            { "RESET_PRICE_CAP", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table NM_PPA_PROJECTION (PERIOD_SID INTEGER not null IDENTITY,PROJECTION_RATE DOUBLE,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,PRICE_CAP DOUBLE,PROJECTION_DISCOUNT_UNITS DOUBLE,PROJECTION_DISCOUNT_DOLLAR DOUBLE,RESET BOOLEAN,PROJECTION_SALES DOUBLE,PROJECTION_MAP DOUBLE,RESET_PRICE_CAP BOOLEAN,primary key (PERIOD_SID, PROJECTION_DETAILS_SID))";
    public static final String TABLE_SQL_DROP = "drop table NM_PPA_PROJECTION";
    public static final String ORDER_BY_JPQL = " ORDER BY nmPpaProjection.id.periodSid ASC, nmPpaProjection.id.projectionDetailsSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY NM_PPA_PROJECTION.PERIOD_SID ASC, NM_PPA_PROJECTION.PROJECTION_DETAILS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.NmPpaProjection"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.NmPpaProjection"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.NmPpaProjection"));
    private static ClassLoader _classLoader = NmPpaProjection.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            NmPpaProjection.class
        };
    private int _periodSid;
    private double _projectionRate;
    private int _projectionDetailsSid;
    private double _priceCap;
    private double _projectionDiscountUnits;
    private double _projectionDiscountDollar;
    private boolean _reset;
    private double _projectionSales;
    private double _projectionMap;
    private boolean _resetPriceCap;
    private NmPpaProjection _escapedModel;

    public NmPpaProjectionModelImpl() {
    }

    @Override
    public NmPpaProjectionPK getPrimaryKey() {
        return new NmPpaProjectionPK(_periodSid, _projectionDetailsSid);
    }

    @Override
    public void setPrimaryKey(NmPpaProjectionPK primaryKey) {
        setPeriodSid(primaryKey.periodSid);
        setProjectionDetailsSid(primaryKey.projectionDetailsSid);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new NmPpaProjectionPK(_periodSid, _projectionDetailsSid);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((NmPpaProjectionPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return NmPpaProjection.class;
    }

    @Override
    public String getModelClassName() {
        return NmPpaProjection.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("periodSid", getPeriodSid());
        attributes.put("projectionRate", getProjectionRate());
        attributes.put("projectionDetailsSid", getProjectionDetailsSid());
        attributes.put("priceCap", getPriceCap());
        attributes.put("projectionDiscountUnits", getProjectionDiscountUnits());
        attributes.put("projectionDiscountDollar", getProjectionDiscountDollar());
        attributes.put("reset", getReset());
        attributes.put("projectionSales", getProjectionSales());
        attributes.put("projectionMap", getProjectionMap());
        attributes.put("resetPriceCap", getResetPriceCap());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer periodSid = (Integer) attributes.get("periodSid");

        if (periodSid != null) {
            setPeriodSid(periodSid);
        }

        Double projectionRate = (Double) attributes.get("projectionRate");

        if (projectionRate != null) {
            setProjectionRate(projectionRate);
        }

        Integer projectionDetailsSid = (Integer) attributes.get(
                "projectionDetailsSid");

        if (projectionDetailsSid != null) {
            setProjectionDetailsSid(projectionDetailsSid);
        }

        Double priceCap = (Double) attributes.get("priceCap");

        if (priceCap != null) {
            setPriceCap(priceCap);
        }

        Double projectionDiscountUnits = (Double) attributes.get(
                "projectionDiscountUnits");

        if (projectionDiscountUnits != null) {
            setProjectionDiscountUnits(projectionDiscountUnits);
        }

        Double projectionDiscountDollar = (Double) attributes.get(
                "projectionDiscountDollar");

        if (projectionDiscountDollar != null) {
            setProjectionDiscountDollar(projectionDiscountDollar);
        }

        Boolean reset = (Boolean) attributes.get("reset");

        if (reset != null) {
            setReset(reset);
        }

        Double projectionSales = (Double) attributes.get("projectionSales");

        if (projectionSales != null) {
            setProjectionSales(projectionSales);
        }

        Double projectionMap = (Double) attributes.get("projectionMap");

        if (projectionMap != null) {
            setProjectionMap(projectionMap);
        }

        Boolean resetPriceCap = (Boolean) attributes.get("resetPriceCap");

        if (resetPriceCap != null) {
            setResetPriceCap(resetPriceCap);
        }
    }

    @Override
    public int getPeriodSid() {
        return _periodSid;
    }

    @Override
    public void setPeriodSid(int periodSid) {
        _periodSid = periodSid;
    }

    @Override
    public double getProjectionRate() {
        return _projectionRate;
    }

    @Override
    public void setProjectionRate(double projectionRate) {
        _projectionRate = projectionRate;
    }

    @Override
    public int getProjectionDetailsSid() {
        return _projectionDetailsSid;
    }

    @Override
    public void setProjectionDetailsSid(int projectionDetailsSid) {
        _projectionDetailsSid = projectionDetailsSid;
    }

    @Override
    public double getPriceCap() {
        return _priceCap;
    }

    @Override
    public void setPriceCap(double priceCap) {
        _priceCap = priceCap;
    }

    @Override
    public double getProjectionDiscountUnits() {
        return _projectionDiscountUnits;
    }

    @Override
    public void setProjectionDiscountUnits(double projectionDiscountUnits) {
        _projectionDiscountUnits = projectionDiscountUnits;
    }

    @Override
    public double getProjectionDiscountDollar() {
        return _projectionDiscountDollar;
    }

    @Override
    public void setProjectionDiscountDollar(double projectionDiscountDollar) {
        _projectionDiscountDollar = projectionDiscountDollar;
    }

    @Override
    public boolean getReset() {
        return _reset;
    }

    @Override
    public boolean isReset() {
        return _reset;
    }

    @Override
    public void setReset(boolean reset) {
        _reset = reset;
    }

    @Override
    public double getProjectionSales() {
        return _projectionSales;
    }

    @Override
    public void setProjectionSales(double projectionSales) {
        _projectionSales = projectionSales;
    }

    @Override
    public double getProjectionMap() {
        return _projectionMap;
    }

    @Override
    public void setProjectionMap(double projectionMap) {
        _projectionMap = projectionMap;
    }

    @Override
    public boolean getResetPriceCap() {
        return _resetPriceCap;
    }

    @Override
    public boolean isResetPriceCap() {
        return _resetPriceCap;
    }

    @Override
    public void setResetPriceCap(boolean resetPriceCap) {
        _resetPriceCap = resetPriceCap;
    }

    @Override
    public NmPpaProjection toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (NmPpaProjection) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NmPpaProjectionImpl nmPpaProjectionImpl = new NmPpaProjectionImpl();

        nmPpaProjectionImpl.setPeriodSid(getPeriodSid());
        nmPpaProjectionImpl.setProjectionRate(getProjectionRate());
        nmPpaProjectionImpl.setProjectionDetailsSid(getProjectionDetailsSid());
        nmPpaProjectionImpl.setPriceCap(getPriceCap());
        nmPpaProjectionImpl.setProjectionDiscountUnits(getProjectionDiscountUnits());
        nmPpaProjectionImpl.setProjectionDiscountDollar(getProjectionDiscountDollar());
        nmPpaProjectionImpl.setReset(getReset());
        nmPpaProjectionImpl.setProjectionSales(getProjectionSales());
        nmPpaProjectionImpl.setProjectionMap(getProjectionMap());
        nmPpaProjectionImpl.setResetPriceCap(getResetPriceCap());

        nmPpaProjectionImpl.resetOriginalValues();

        return nmPpaProjectionImpl;
    }

    @Override
    public int compareTo(NmPpaProjection nmPpaProjection) {
        NmPpaProjectionPK primaryKey = nmPpaProjection.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof NmPpaProjection)) {
            return false;
        }

        NmPpaProjection nmPpaProjection = (NmPpaProjection) obj;

        NmPpaProjectionPK primaryKey = nmPpaProjection.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<NmPpaProjection> toCacheModel() {
        NmPpaProjectionCacheModel nmPpaProjectionCacheModel = new NmPpaProjectionCacheModel();

        nmPpaProjectionCacheModel.periodSid = getPeriodSid();

        nmPpaProjectionCacheModel.projectionRate = getProjectionRate();

        nmPpaProjectionCacheModel.projectionDetailsSid = getProjectionDetailsSid();

        nmPpaProjectionCacheModel.priceCap = getPriceCap();

        nmPpaProjectionCacheModel.projectionDiscountUnits = getProjectionDiscountUnits();

        nmPpaProjectionCacheModel.projectionDiscountDollar = getProjectionDiscountDollar();

        nmPpaProjectionCacheModel.reset = getReset();

        nmPpaProjectionCacheModel.projectionSales = getProjectionSales();

        nmPpaProjectionCacheModel.projectionMap = getProjectionMap();

        nmPpaProjectionCacheModel.resetPriceCap = getResetPriceCap();

        return nmPpaProjectionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{periodSid=");
        sb.append(getPeriodSid());
        sb.append(", projectionRate=");
        sb.append(getProjectionRate());
        sb.append(", projectionDetailsSid=");
        sb.append(getProjectionDetailsSid());
        sb.append(", priceCap=");
        sb.append(getPriceCap());
        sb.append(", projectionDiscountUnits=");
        sb.append(getProjectionDiscountUnits());
        sb.append(", projectionDiscountDollar=");
        sb.append(getProjectionDiscountDollar());
        sb.append(", reset=");
        sb.append(getReset());
        sb.append(", projectionSales=");
        sb.append(getProjectionSales());
        sb.append(", projectionMap=");
        sb.append(getProjectionMap());
        sb.append(", resetPriceCap=");
        sb.append(getResetPriceCap());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.NmPpaProjection");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>periodSid</column-name><column-value><![CDATA[");
        sb.append(getPeriodSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionRate</column-name><column-value><![CDATA[");
        sb.append(getProjectionRate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceCap</column-name><column-value><![CDATA[");
        sb.append(getPriceCap());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDiscountUnits</column-name><column-value><![CDATA[");
        sb.append(getProjectionDiscountUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDiscountDollar</column-name><column-value><![CDATA[");
        sb.append(getProjectionDiscountDollar());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reset</column-name><column-value><![CDATA[");
        sb.append(getReset());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionSales</column-name><column-value><![CDATA[");
        sb.append(getProjectionSales());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionMap</column-name><column-value><![CDATA[");
        sb.append(getProjectionMap());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>resetPriceCap</column-name><column-value><![CDATA[");
        sb.append(getResetPriceCap());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
