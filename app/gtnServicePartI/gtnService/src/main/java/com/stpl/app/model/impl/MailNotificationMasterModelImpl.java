/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.MailNotificationMaster;
import com.stpl.app.model.MailNotificationMasterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MailNotificationMaster service. Represents a row in the &quot;MAIL_NOTIFICATION_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MailNotificationMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MailNotificationMasterImpl}.
 * </p>
 *
 * @author
 * @see MailNotificationMasterImpl
 * @see MailNotificationMaster
 * @see MailNotificationMasterModel
 * @generated
 */
@ProviderType
public class MailNotificationMasterModelImpl extends BaseModelImpl<MailNotificationMaster>
	implements MailNotificationMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mail notification master model instance should use the {@link MailNotificationMaster} interface instead.
	 */
	public static final String TABLE_NAME = "MAIL_NOTIFICATION_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "SUBJECT", Types.VARCHAR },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.INTEGER },
			{ "TO_MAIL_IDS", Types.VARCHAR },
			{ "NOTIFICATION_CATEGORY_ID", Types.INTEGER },
			{ "NOTIFICATION_MODULE", Types.VARCHAR },
			{ "BODY", Types.VARCHAR },
			{ "FROM_MAIL_ID", Types.VARCHAR },
			{ "CC_MAIL_IDS", Types.VARCHAR },
			{ "VERSION_NO", Types.INTEGER },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "MAIL_NOTIFICATION_SID", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("SUBJECT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("TO_MAIL_IDS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NOTIFICATION_CATEGORY_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NOTIFICATION_MODULE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BODY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FROM_MAIL_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CC_MAIL_IDS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VERSION_NO", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MAIL_NOTIFICATION_SID", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table MAIL_NOTIFICATION_MASTER (SUBJECT VARCHAR(75) null,CREATED_DATE DATE null,CREATED_BY INTEGER,TO_MAIL_IDS VARCHAR(75) null,NOTIFICATION_CATEGORY_ID INTEGER,NOTIFICATION_MODULE VARCHAR(75) null,BODY VARCHAR(75) null,FROM_MAIL_ID VARCHAR(75) null,CC_MAIL_IDS VARCHAR(75) null,VERSION_NO INTEGER,MODIFIED_BY INTEGER,MODIFIED_DATE DATE null,MAIL_NOTIFICATION_SID INTEGER not null primary key IDENTITY)";
	public static final String TABLE_SQL_DROP = "drop table MAIL_NOTIFICATION_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY mailNotificationMaster.mailNotificationSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MAIL_NOTIFICATION_MASTER.MAIL_NOTIFICATION_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.MailNotificationMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.MailNotificationMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.MailNotificationMaster"));

	public MailNotificationMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _mailNotificationSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setMailNotificationSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mailNotificationSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MailNotificationMaster.class;
	}

	@Override
	public String getModelClassName() {
		return MailNotificationMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("subject", getSubject());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("toMailIds", getToMailIds());
		attributes.put("notificationCategoryId", getNotificationCategoryId());
		attributes.put("notificationModule", getNotificationModule());
		attributes.put("body", getBody());
		attributes.put("fromMailId", getFromMailId());
		attributes.put("ccMailIds", getCcMailIds());
		attributes.put("versionNo", getVersionNo());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("mailNotificationSid", getMailNotificationSid());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String toMailIds = (String)attributes.get("toMailIds");

		if (toMailIds != null) {
			setToMailIds(toMailIds);
		}

		Integer notificationCategoryId = (Integer)attributes.get(
				"notificationCategoryId");

		if (notificationCategoryId != null) {
			setNotificationCategoryId(notificationCategoryId);
		}

		String notificationModule = (String)attributes.get("notificationModule");

		if (notificationModule != null) {
			setNotificationModule(notificationModule);
		}

		String body = (String)attributes.get("body");

		if (body != null) {
			setBody(body);
		}

		String fromMailId = (String)attributes.get("fromMailId");

		if (fromMailId != null) {
			setFromMailId(fromMailId);
		}

		String ccMailIds = (String)attributes.get("ccMailIds");

		if (ccMailIds != null) {
			setCcMailIds(ccMailIds);
		}

		Integer versionNo = (Integer)attributes.get("versionNo");

		if (versionNo != null) {
			setVersionNo(versionNo);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer mailNotificationSid = (Integer)attributes.get(
				"mailNotificationSid");

		if (mailNotificationSid != null) {
			setMailNotificationSid(mailNotificationSid);
		}
	}

	@Override
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getToMailIds() {
		if (_toMailIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _toMailIds;
		}
	}

	@Override
	public void setToMailIds(String toMailIds) {
		_toMailIds = toMailIds;
	}

	@Override
	public int getNotificationCategoryId() {
		return _notificationCategoryId;
	}

	@Override
	public void setNotificationCategoryId(int notificationCategoryId) {
		_notificationCategoryId = notificationCategoryId;
	}

	@Override
	public String getNotificationModule() {
		if (_notificationModule == null) {
			return StringPool.BLANK;
		}
		else {
			return _notificationModule;
		}
	}

	@Override
	public void setNotificationModule(String notificationModule) {
		_notificationModule = notificationModule;
	}

	@Override
	public String getBody() {
		if (_body == null) {
			return StringPool.BLANK;
		}
		else {
			return _body;
		}
	}

	@Override
	public void setBody(String body) {
		_body = body;
	}

	@Override
	public String getFromMailId() {
		if (_fromMailId == null) {
			return StringPool.BLANK;
		}
		else {
			return _fromMailId;
		}
	}

	@Override
	public void setFromMailId(String fromMailId) {
		_fromMailId = fromMailId;
	}

	@Override
	public String getCcMailIds() {
		if (_ccMailIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _ccMailIds;
		}
	}

	@Override
	public void setCcMailIds(String ccMailIds) {
		_ccMailIds = ccMailIds;
	}

	@Override
	public int getVersionNo() {
		return _versionNo;
	}

	@Override
	public void setVersionNo(int versionNo) {
		_versionNo = versionNo;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public int getMailNotificationSid() {
		return _mailNotificationSid;
	}

	@Override
	public void setMailNotificationSid(int mailNotificationSid) {
		_mailNotificationSid = mailNotificationSid;
	}

	@Override
	public MailNotificationMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MailNotificationMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MailNotificationMasterImpl mailNotificationMasterImpl = new MailNotificationMasterImpl();

		mailNotificationMasterImpl.setSubject(getSubject());
		mailNotificationMasterImpl.setCreatedDate(getCreatedDate());
		mailNotificationMasterImpl.setCreatedBy(getCreatedBy());
		mailNotificationMasterImpl.setToMailIds(getToMailIds());
		mailNotificationMasterImpl.setNotificationCategoryId(getNotificationCategoryId());
		mailNotificationMasterImpl.setNotificationModule(getNotificationModule());
		mailNotificationMasterImpl.setBody(getBody());
		mailNotificationMasterImpl.setFromMailId(getFromMailId());
		mailNotificationMasterImpl.setCcMailIds(getCcMailIds());
		mailNotificationMasterImpl.setVersionNo(getVersionNo());
		mailNotificationMasterImpl.setModifiedBy(getModifiedBy());
		mailNotificationMasterImpl.setModifiedDate(getModifiedDate());
		mailNotificationMasterImpl.setMailNotificationSid(getMailNotificationSid());

		mailNotificationMasterImpl.resetOriginalValues();

		return mailNotificationMasterImpl;
	}

	@Override
	public int compareTo(MailNotificationMaster mailNotificationMaster) {
		int primaryKey = mailNotificationMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MailNotificationMaster)) {
			return false;
		}

		MailNotificationMaster mailNotificationMaster = (MailNotificationMaster)obj;

		int primaryKey = mailNotificationMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MailNotificationMaster> toCacheModel() {
		MailNotificationMasterCacheModel mailNotificationMasterCacheModel = new MailNotificationMasterCacheModel();

		mailNotificationMasterCacheModel.subject = getSubject();

		String subject = mailNotificationMasterCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			mailNotificationMasterCacheModel.subject = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			mailNotificationMasterCacheModel.createdDate = createdDate.getTime();
		}
		else {
			mailNotificationMasterCacheModel.createdDate = Long.MIN_VALUE;
		}

		mailNotificationMasterCacheModel.createdBy = getCreatedBy();

		mailNotificationMasterCacheModel.toMailIds = getToMailIds();

		String toMailIds = mailNotificationMasterCacheModel.toMailIds;

		if ((toMailIds != null) && (toMailIds.length() == 0)) {
			mailNotificationMasterCacheModel.toMailIds = null;
		}

		mailNotificationMasterCacheModel.notificationCategoryId = getNotificationCategoryId();

		mailNotificationMasterCacheModel.notificationModule = getNotificationModule();

		String notificationModule = mailNotificationMasterCacheModel.notificationModule;

		if ((notificationModule != null) && (notificationModule.length() == 0)) {
			mailNotificationMasterCacheModel.notificationModule = null;
		}

		mailNotificationMasterCacheModel.body = getBody();

		String body = mailNotificationMasterCacheModel.body;

		if ((body != null) && (body.length() == 0)) {
			mailNotificationMasterCacheModel.body = null;
		}

		mailNotificationMasterCacheModel.fromMailId = getFromMailId();

		String fromMailId = mailNotificationMasterCacheModel.fromMailId;

		if ((fromMailId != null) && (fromMailId.length() == 0)) {
			mailNotificationMasterCacheModel.fromMailId = null;
		}

		mailNotificationMasterCacheModel.ccMailIds = getCcMailIds();

		String ccMailIds = mailNotificationMasterCacheModel.ccMailIds;

		if ((ccMailIds != null) && (ccMailIds.length() == 0)) {
			mailNotificationMasterCacheModel.ccMailIds = null;
		}

		mailNotificationMasterCacheModel.versionNo = getVersionNo();

		mailNotificationMasterCacheModel.modifiedBy = getModifiedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			mailNotificationMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			mailNotificationMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		mailNotificationMasterCacheModel.mailNotificationSid = getMailNotificationSid();

		return mailNotificationMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{subject=");
		sb.append(getSubject());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", toMailIds=");
		sb.append(getToMailIds());
		sb.append(", notificationCategoryId=");
		sb.append(getNotificationCategoryId());
		sb.append(", notificationModule=");
		sb.append(getNotificationModule());
		sb.append(", body=");
		sb.append(getBody());
		sb.append(", fromMailId=");
		sb.append(getFromMailId());
		sb.append(", ccMailIds=");
		sb.append(getCcMailIds());
		sb.append(", versionNo=");
		sb.append(getVersionNo());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", mailNotificationSid=");
		sb.append(getMailNotificationSid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.MailNotificationMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toMailIds</column-name><column-value><![CDATA[");
		sb.append(getToMailIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notificationCategoryId</column-name><column-value><![CDATA[");
		sb.append(getNotificationCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notificationModule</column-name><column-value><![CDATA[");
		sb.append(getNotificationModule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>body</column-name><column-value><![CDATA[");
		sb.append(getBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromMailId</column-name><column-value><![CDATA[");
		sb.append(getFromMailId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ccMailIds</column-name><column-value><![CDATA[");
		sb.append(getCcMailIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionNo</column-name><column-value><![CDATA[");
		sb.append(getVersionNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mailNotificationSid</column-name><column-value><![CDATA[");
		sb.append(getMailNotificationSid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MailNotificationMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MailNotificationMaster.class
		};
	private String _subject;
	private Date _createdDate;
	private int _createdBy;
	private String _toMailIds;
	private int _notificationCategoryId;
	private String _notificationModule;
	private String _body;
	private String _fromMailId;
	private String _ccMailIds;
	private int _versionNo;
	private int _modifiedBy;
	private Date _modifiedDate;
	private int _mailNotificationSid;
	private MailNotificationMaster _escapedModel;
}