/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.stpl.app.model.ChSalesProjection;
import com.stpl.app.model.ChSalesProjectionModel;
import com.stpl.app.service.persistence.ChSalesProjectionPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ChSalesProjection service. Represents a row in the &quot;CH_SALES_PROJECTION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ChSalesProjectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChSalesProjectionImpl}.
 * </p>
 *
 * @author
 * @see ChSalesProjectionImpl
 * @see ChSalesProjection
 * @see ChSalesProjectionModel
 * @generated
 */
@ProviderType
public class ChSalesProjectionModelImpl extends BaseModelImpl<ChSalesProjection>
	implements ChSalesProjectionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ch sales projection model instance should use the {@link ChSalesProjection} interface instead.
	 */
	public static final String TABLE_NAME = "CH_SALES_PROJECTION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CONTRACT_UNITS", Types.DOUBLE },
			{ "PER_OF_BUSINESS", Types.DOUBLE },
			{ "PERIOD_SID", Types.INTEGER },
			{ "CONTRACT_SALES", Types.DOUBLE },
			{ "PROJECTION_DETAILS_SID", Types.INTEGER },
			{ "GTS_SALES", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CONTRACT_UNITS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PER_OF_BUSINESS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PERIOD_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CONTRACT_SALES", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PROJECTION_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("GTS_SALES", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table CH_SALES_PROJECTION (CONTRACT_UNITS DOUBLE,PER_OF_BUSINESS DOUBLE,PERIOD_SID INTEGER not null IDENTITY,CONTRACT_SALES DOUBLE,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,GTS_SALES DOUBLE,primary key (PERIOD_SID, PROJECTION_DETAILS_SID))";
	public static final String TABLE_SQL_DROP = "drop table CH_SALES_PROJECTION";
	public static final String ORDER_BY_JPQL = " ORDER BY chSalesProjection.id.periodSid ASC, chSalesProjection.id.projectionDetailsSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CH_SALES_PROJECTION.PERIOD_SID ASC, CH_SALES_PROJECTION.PROJECTION_DETAILS_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.ChSalesProjection"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.ChSalesProjection"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.ChSalesProjection"));

	public ChSalesProjectionModelImpl() {
	}

	@Override
	public ChSalesProjectionPK getPrimaryKey() {
		return new ChSalesProjectionPK(_periodSid, _projectionDetailsSid);
	}

	@Override
	public void setPrimaryKey(ChSalesProjectionPK primaryKey) {
		setPeriodSid(primaryKey.periodSid);
		setProjectionDetailsSid(primaryKey.projectionDetailsSid);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ChSalesProjectionPK(_periodSid, _projectionDetailsSid);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ChSalesProjectionPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ChSalesProjection.class;
	}

	@Override
	public String getModelClassName() {
		return ChSalesProjection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("contractUnits", getContractUnits());
		attributes.put("perOfBusiness", getPerOfBusiness());
		attributes.put("periodSid", getPeriodSid());
		attributes.put("contractSales", getContractSales());
		attributes.put("projectionDetailsSid", getProjectionDetailsSid());
		attributes.put("gtsSales", getGtsSales());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Double contractUnits = (Double)attributes.get("contractUnits");

		if (contractUnits != null) {
			setContractUnits(contractUnits);
		}

		Double perOfBusiness = (Double)attributes.get("perOfBusiness");

		if (perOfBusiness != null) {
			setPerOfBusiness(perOfBusiness);
		}

		Integer periodSid = (Integer)attributes.get("periodSid");

		if (periodSid != null) {
			setPeriodSid(periodSid);
		}

		Double contractSales = (Double)attributes.get("contractSales");

		if (contractSales != null) {
			setContractSales(contractSales);
		}

		Integer projectionDetailsSid = (Integer)attributes.get(
				"projectionDetailsSid");

		if (projectionDetailsSid != null) {
			setProjectionDetailsSid(projectionDetailsSid);
		}

		Double gtsSales = (Double)attributes.get("gtsSales");

		if (gtsSales != null) {
			setGtsSales(gtsSales);
		}
	}

	@Override
	public double getContractUnits() {
		return _contractUnits;
	}

	@Override
	public void setContractUnits(double contractUnits) {
		_contractUnits = contractUnits;
	}

	@Override
	public double getPerOfBusiness() {
		return _perOfBusiness;
	}

	@Override
	public void setPerOfBusiness(double perOfBusiness) {
		_perOfBusiness = perOfBusiness;
	}

	@Override
	public int getPeriodSid() {
		return _periodSid;
	}

	@Override
	public void setPeriodSid(int periodSid) {
		_periodSid = periodSid;
	}

	@Override
	public double getContractSales() {
		return _contractSales;
	}

	@Override
	public void setContractSales(double contractSales) {
		_contractSales = contractSales;
	}

	@Override
	public int getProjectionDetailsSid() {
		return _projectionDetailsSid;
	}

	@Override
	public void setProjectionDetailsSid(int projectionDetailsSid) {
		_projectionDetailsSid = projectionDetailsSid;
	}

	@Override
	public double getGtsSales() {
		return _gtsSales;
	}

	@Override
	public void setGtsSales(double gtsSales) {
		_gtsSales = gtsSales;
	}

	@Override
	public ChSalesProjection toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ChSalesProjection)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ChSalesProjectionImpl chSalesProjectionImpl = new ChSalesProjectionImpl();

		chSalesProjectionImpl.setContractUnits(getContractUnits());
		chSalesProjectionImpl.setPerOfBusiness(getPerOfBusiness());
		chSalesProjectionImpl.setPeriodSid(getPeriodSid());
		chSalesProjectionImpl.setContractSales(getContractSales());
		chSalesProjectionImpl.setProjectionDetailsSid(getProjectionDetailsSid());
		chSalesProjectionImpl.setGtsSales(getGtsSales());

		chSalesProjectionImpl.resetOriginalValues();

		return chSalesProjectionImpl;
	}

	@Override
	public int compareTo(ChSalesProjection chSalesProjection) {
		ChSalesProjectionPK primaryKey = chSalesProjection.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ChSalesProjection)) {
			return false;
		}

		ChSalesProjection chSalesProjection = (ChSalesProjection)obj;

		ChSalesProjectionPK primaryKey = chSalesProjection.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ChSalesProjection> toCacheModel() {
		ChSalesProjectionCacheModel chSalesProjectionCacheModel = new ChSalesProjectionCacheModel();

		chSalesProjectionCacheModel.chSalesProjectionPK = getPrimaryKey();

		chSalesProjectionCacheModel.contractUnits = getContractUnits();

		chSalesProjectionCacheModel.perOfBusiness = getPerOfBusiness();

		chSalesProjectionCacheModel.periodSid = getPeriodSid();

		chSalesProjectionCacheModel.contractSales = getContractSales();

		chSalesProjectionCacheModel.projectionDetailsSid = getProjectionDetailsSid();

		chSalesProjectionCacheModel.gtsSales = getGtsSales();

		return chSalesProjectionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{contractUnits=");
		sb.append(getContractUnits());
		sb.append(", perOfBusiness=");
		sb.append(getPerOfBusiness());
		sb.append(", periodSid=");
		sb.append(getPeriodSid());
		sb.append(", contractSales=");
		sb.append(getContractSales());
		sb.append(", projectionDetailsSid=");
		sb.append(getProjectionDetailsSid());
		sb.append(", gtsSales=");
		sb.append(getGtsSales());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.ChSalesProjection");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>contractUnits</column-name><column-value><![CDATA[");
		sb.append(getContractUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>perOfBusiness</column-name><column-value><![CDATA[");
		sb.append(getPerOfBusiness());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodSid</column-name><column-value><![CDATA[");
		sb.append(getPeriodSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractSales</column-name><column-value><![CDATA[");
		sb.append(getContractSales());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getProjectionDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gtsSales</column-name><column-value><![CDATA[");
		sb.append(getGtsSales());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ChSalesProjection.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ChSalesProjection.class
		};
	private double _contractUnits;
	private double _perOfBusiness;
	private int _periodSid;
	private double _contractSales;
	private int _projectionDetailsSid;
	private double _gtsSales;
	private ChSalesProjection _escapedModel;
}