/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.ProjectionNameConfig;
import com.stpl.app.model.ProjectionNameConfigModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ProjectionNameConfig service. Represents a row in the &quot;PROJECTION_NAME_CONFIG&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProjectionNameConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectionNameConfigImpl}.
 * </p>
 *
 * @author
 * @see ProjectionNameConfigImpl
 * @see ProjectionNameConfig
 * @see ProjectionNameConfigModel
 * @generated
 */
@ProviderType
public class ProjectionNameConfigModelImpl extends BaseModelImpl<ProjectionNameConfig>
	implements ProjectionNameConfigModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a projection name config model instance should use the {@link ProjectionNameConfig} interface instead.
	 */
	public static final String TABLE_NAME = "PROJECTION_NAME_CONFIG";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.INTEGER },
			{ "BUSINESS_PROCESS_TYPE", Types.VARCHAR },
			{ "VERSION_NO", Types.INTEGER },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "PROJECTION_NAME_CONFIG_SID", Types.INTEGER },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "SELECTED_ATTRIBUTES", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BUSINESS_PROCESS_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VERSION_NO", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PROJECTION_NAME_CONFIG_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("SELECTED_ATTRIBUTES", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table PROJECTION_NAME_CONFIG (CREATED_DATE DATE null,CREATED_BY INTEGER,BUSINESS_PROCESS_TYPE VARCHAR(75) null,VERSION_NO INTEGER,MODIFIED_BY INTEGER,PROJECTION_NAME_CONFIG_SID INTEGER not null primary key IDENTITY,MODIFIED_DATE DATE null,SELECTED_ATTRIBUTES VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table PROJECTION_NAME_CONFIG";
	public static final String ORDER_BY_JPQL = " ORDER BY projectionNameConfig.projectionNameConfigSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PROJECTION_NAME_CONFIG.PROJECTION_NAME_CONFIG_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.ProjectionNameConfig"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.ProjectionNameConfig"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.ProjectionNameConfig"));

	public ProjectionNameConfigModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _projectionNameConfigSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setProjectionNameConfigSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectionNameConfigSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectionNameConfig.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectionNameConfig.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("businessProcessType", getBusinessProcessType());
		attributes.put("versionNo", getVersionNo());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("projectionNameConfigSid", getProjectionNameConfigSid());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("selectedAttributes", getSelectedAttributes());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String businessProcessType = (String)attributes.get(
				"businessProcessType");

		if (businessProcessType != null) {
			setBusinessProcessType(businessProcessType);
		}

		Integer versionNo = (Integer)attributes.get("versionNo");

		if (versionNo != null) {
			setVersionNo(versionNo);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Integer projectionNameConfigSid = (Integer)attributes.get(
				"projectionNameConfigSid");

		if (projectionNameConfigSid != null) {
			setProjectionNameConfigSid(projectionNameConfigSid);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String selectedAttributes = (String)attributes.get("selectedAttributes");

		if (selectedAttributes != null) {
			setSelectedAttributes(selectedAttributes);
		}
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getBusinessProcessType() {
		if (_businessProcessType == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessProcessType;
		}
	}

	@Override
	public void setBusinessProcessType(String businessProcessType) {
		_businessProcessType = businessProcessType;
	}

	@Override
	public int getVersionNo() {
		return _versionNo;
	}

	@Override
	public void setVersionNo(int versionNo) {
		_versionNo = versionNo;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public int getProjectionNameConfigSid() {
		return _projectionNameConfigSid;
	}

	@Override
	public void setProjectionNameConfigSid(int projectionNameConfigSid) {
		_projectionNameConfigSid = projectionNameConfigSid;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getSelectedAttributes() {
		if (_selectedAttributes == null) {
			return StringPool.BLANK;
		}
		else {
			return _selectedAttributes;
		}
	}

	@Override
	public void setSelectedAttributes(String selectedAttributes) {
		_selectedAttributes = selectedAttributes;
	}

	@Override
	public ProjectionNameConfig toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProjectionNameConfig)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectionNameConfigImpl projectionNameConfigImpl = new ProjectionNameConfigImpl();

		projectionNameConfigImpl.setCreatedDate(getCreatedDate());
		projectionNameConfigImpl.setCreatedBy(getCreatedBy());
		projectionNameConfigImpl.setBusinessProcessType(getBusinessProcessType());
		projectionNameConfigImpl.setVersionNo(getVersionNo());
		projectionNameConfigImpl.setModifiedBy(getModifiedBy());
		projectionNameConfigImpl.setProjectionNameConfigSid(getProjectionNameConfigSid());
		projectionNameConfigImpl.setModifiedDate(getModifiedDate());
		projectionNameConfigImpl.setSelectedAttributes(getSelectedAttributes());

		projectionNameConfigImpl.resetOriginalValues();

		return projectionNameConfigImpl;
	}

	@Override
	public int compareTo(ProjectionNameConfig projectionNameConfig) {
		int primaryKey = projectionNameConfig.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProjectionNameConfig)) {
			return false;
		}

		ProjectionNameConfig projectionNameConfig = (ProjectionNameConfig)obj;

		int primaryKey = projectionNameConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ProjectionNameConfig> toCacheModel() {
		ProjectionNameConfigCacheModel projectionNameConfigCacheModel = new ProjectionNameConfigCacheModel();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			projectionNameConfigCacheModel.createdDate = createdDate.getTime();
		}
		else {
			projectionNameConfigCacheModel.createdDate = Long.MIN_VALUE;
		}

		projectionNameConfigCacheModel.createdBy = getCreatedBy();

		projectionNameConfigCacheModel.businessProcessType = getBusinessProcessType();

		String businessProcessType = projectionNameConfigCacheModel.businessProcessType;

		if ((businessProcessType != null) &&
				(businessProcessType.length() == 0)) {
			projectionNameConfigCacheModel.businessProcessType = null;
		}

		projectionNameConfigCacheModel.versionNo = getVersionNo();

		projectionNameConfigCacheModel.modifiedBy = getModifiedBy();

		projectionNameConfigCacheModel.projectionNameConfigSid = getProjectionNameConfigSid();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			projectionNameConfigCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			projectionNameConfigCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		projectionNameConfigCacheModel.selectedAttributes = getSelectedAttributes();

		String selectedAttributes = projectionNameConfigCacheModel.selectedAttributes;

		if ((selectedAttributes != null) && (selectedAttributes.length() == 0)) {
			projectionNameConfigCacheModel.selectedAttributes = null;
		}

		return projectionNameConfigCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", businessProcessType=");
		sb.append(getBusinessProcessType());
		sb.append(", versionNo=");
		sb.append(getVersionNo());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", projectionNameConfigSid=");
		sb.append(getProjectionNameConfigSid());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", selectedAttributes=");
		sb.append(getSelectedAttributes());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.ProjectionNameConfig");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessProcessType</column-name><column-value><![CDATA[");
		sb.append(getBusinessProcessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionNo</column-name><column-value><![CDATA[");
		sb.append(getVersionNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionNameConfigSid</column-name><column-value><![CDATA[");
		sb.append(getProjectionNameConfigSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>selectedAttributes</column-name><column-value><![CDATA[");
		sb.append(getSelectedAttributes());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProjectionNameConfig.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProjectionNameConfig.class
		};
	private Date _createdDate;
	private int _createdBy;
	private String _businessProcessType;
	private int _versionNo;
	private int _modifiedBy;
	private int _projectionNameConfigSid;
	private Date _modifiedDate;
	private String _selectedAttributes;
	private ProjectionNameConfig _escapedModel;
}