/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.BestPriceMaster;
import com.stpl.app.model.BestPriceMasterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BestPriceMaster service. Represents a row in the &quot;BEST_PRICE_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link BestPriceMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BestPriceMasterImpl}.
 * </p>
 *
 * @author
 * @see BestPriceMasterImpl
 * @see BestPriceMaster
 * @see BestPriceMasterModel
 * @generated
 */
@ProviderType
public class BestPriceMasterModelImpl extends BaseModelImpl<BestPriceMaster>
	implements BestPriceMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a best price master model instance should use the {@link BestPriceMaster} interface instead.
	 */
	public static final String TABLE_NAME = "BEST_PRICE_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "INITIAL_BEST_PRICE", Types.DOUBLE },
			{ "CREATED_BY", Types.INTEGER },
			{ "ITEM_NO", Types.VARCHAR },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "ACCOUNT_ID", Types.VARCHAR },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "ITEM_ID", Types.VARCHAR },
			{ "ITEM_DESC", Types.VARCHAR },
			{ "SELLING_PRICE", Types.DOUBLE },
			{ "CONTRACT_ID", Types.VARCHAR },
			{ "CONTRACT_NO", Types.VARCHAR },
			{ "BATCH_ID", Types.VARCHAR },
			{ "BEST_PRICE_MASTER_SID", Types.INTEGER },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "RECORD_LOCK_STATUS", Types.BOOLEAN },
			{ "BEGINNING_WAC_PACKAGE", Types.DOUBLE },
			{ "INITIAL_DISCOUNT", Types.DOUBLE },
			{ "PERIOD", Types.VARCHAR },
			{ "SOURCE", Types.VARCHAR },
			{ "CONTRACT_START_DATE", Types.TIMESTAMP },
			{ "CONTRACT_END_DATE", Types.TIMESTAMP },
			{ "INBOUND_STATUS", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("INITIAL_BEST_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ITEM_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ACCOUNT_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ITEM_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_DESC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SELLING_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("CONTRACT_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CONTRACT_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BEST_PRICE_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("RECORD_LOCK_STATUS", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("BEGINNING_WAC_PACKAGE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("INITIAL_DISCOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PERIOD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CONTRACT_START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CONTRACT_END_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table BEST_PRICE_MASTER (INITIAL_BEST_PRICE DOUBLE,CREATED_BY INTEGER,ITEM_NO VARCHAR(75) null,MODIFIED_BY INTEGER,ACCOUNT_ID VARCHAR(75) null,CREATED_DATE DATE null,ITEM_ID VARCHAR(75) null,ITEM_DESC VARCHAR(75) null,SELLING_PRICE DOUBLE,CONTRACT_ID VARCHAR(75) null,CONTRACT_NO VARCHAR(75) null,BATCH_ID VARCHAR(75) null,BEST_PRICE_MASTER_SID INTEGER not null primary key IDENTITY,MODIFIED_DATE DATE null,RECORD_LOCK_STATUS BOOLEAN,BEGINNING_WAC_PACKAGE DOUBLE,INITIAL_DISCOUNT DOUBLE,PERIOD VARCHAR(75) null,SOURCE VARCHAR(75) null,CONTRACT_START_DATE DATE null,CONTRACT_END_DATE DATE null,INBOUND_STATUS VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table BEST_PRICE_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY bestPriceMaster.bestPriceMasterSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BEST_PRICE_MASTER.BEST_PRICE_MASTER_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.BestPriceMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.BestPriceMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.stpl.app.model.BestPriceMaster"),
			true);
	public static final long ACCOUNTID_COLUMN_BITMASK = 1L;
	public static final long CONTRACTID_COLUMN_BITMASK = 2L;
	public static final long CONTRACTNO_COLUMN_BITMASK = 4L;
	public static final long ITEMID_COLUMN_BITMASK = 8L;
	public static final long ITEMNO_COLUMN_BITMASK = 16L;
	public static final long PERIOD_COLUMN_BITMASK = 32L;
	public static final long BESTPRICEMASTERSID_COLUMN_BITMASK = 64L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.BestPriceMaster"));

	public BestPriceMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _bestPriceMasterSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setBestPriceMasterSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bestPriceMasterSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BestPriceMaster.class;
	}

	@Override
	public String getModelClassName() {
		return BestPriceMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("initialBestPrice", getInitialBestPrice());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("itemNo", getItemNo());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("accountId", getAccountId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("itemId", getItemId());
		attributes.put("itemDesc", getItemDesc());
		attributes.put("sellingPrice", getSellingPrice());
		attributes.put("contractId", getContractId());
		attributes.put("contractNo", getContractNo());
		attributes.put("batchId", getBatchId());
		attributes.put("bestPriceMasterSid", getBestPriceMasterSid());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("recordLockStatus", getRecordLockStatus());
		attributes.put("beginningWacPackage", getBeginningWacPackage());
		attributes.put("initialDiscount", getInitialDiscount());
		attributes.put("period", getPeriod());
		attributes.put("source", getSource());
		attributes.put("contractStartDate", getContractStartDate());
		attributes.put("contractEndDate", getContractEndDate());
		attributes.put("inboundStatus", getInboundStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Double initialBestPrice = (Double)attributes.get("initialBestPrice");

		if (initialBestPrice != null) {
			setInitialBestPrice(initialBestPrice);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String itemNo = (String)attributes.get("itemNo");

		if (itemNo != null) {
			setItemNo(itemNo);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		String accountId = (String)attributes.get("accountId");

		if (accountId != null) {
			setAccountId(accountId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String itemId = (String)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		String itemDesc = (String)attributes.get("itemDesc");

		if (itemDesc != null) {
			setItemDesc(itemDesc);
		}

		Double sellingPrice = (Double)attributes.get("sellingPrice");

		if (sellingPrice != null) {
			setSellingPrice(sellingPrice);
		}

		String contractId = (String)attributes.get("contractId");

		if (contractId != null) {
			setContractId(contractId);
		}

		String contractNo = (String)attributes.get("contractNo");

		if (contractNo != null) {
			setContractNo(contractNo);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		Integer bestPriceMasterSid = (Integer)attributes.get(
				"bestPriceMasterSid");

		if (bestPriceMasterSid != null) {
			setBestPriceMasterSid(bestPriceMasterSid);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Boolean recordLockStatus = (Boolean)attributes.get("recordLockStatus");

		if (recordLockStatus != null) {
			setRecordLockStatus(recordLockStatus);
		}

		Double beginningWacPackage = (Double)attributes.get(
				"beginningWacPackage");

		if (beginningWacPackage != null) {
			setBeginningWacPackage(beginningWacPackage);
		}

		Double initialDiscount = (Double)attributes.get("initialDiscount");

		if (initialDiscount != null) {
			setInitialDiscount(initialDiscount);
		}

		String period = (String)attributes.get("period");

		if (period != null) {
			setPeriod(period);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		Date contractStartDate = (Date)attributes.get("contractStartDate");

		if (contractStartDate != null) {
			setContractStartDate(contractStartDate);
		}

		Date contractEndDate = (Date)attributes.get("contractEndDate");

		if (contractEndDate != null) {
			setContractEndDate(contractEndDate);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}
	}

	@Override
	public double getInitialBestPrice() {
		return _initialBestPrice;
	}

	@Override
	public void setInitialBestPrice(double initialBestPrice) {
		_initialBestPrice = initialBestPrice;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getItemNo() {
		if (_itemNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemNo;
		}
	}

	@Override
	public void setItemNo(String itemNo) {
		_columnBitmask |= ITEMNO_COLUMN_BITMASK;

		if (_originalItemNo == null) {
			_originalItemNo = _itemNo;
		}

		_itemNo = itemNo;
	}

	public String getOriginalItemNo() {
		return GetterUtil.getString(_originalItemNo);
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public String getAccountId() {
		if (_accountId == null) {
			return StringPool.BLANK;
		}
		else {
			return _accountId;
		}
	}

	@Override
	public void setAccountId(String accountId) {
		_columnBitmask |= ACCOUNTID_COLUMN_BITMASK;

		if (_originalAccountId == null) {
			_originalAccountId = _accountId;
		}

		_accountId = accountId;
	}

	public String getOriginalAccountId() {
		return GetterUtil.getString(_originalAccountId);
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getItemId() {
		if (_itemId == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemId;
		}
	}

	@Override
	public void setItemId(String itemId) {
		_columnBitmask |= ITEMID_COLUMN_BITMASK;

		if (_originalItemId == null) {
			_originalItemId = _itemId;
		}

		_itemId = itemId;
	}

	public String getOriginalItemId() {
		return GetterUtil.getString(_originalItemId);
	}

	@Override
	public String getItemDesc() {
		if (_itemDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemDesc;
		}
	}

	@Override
	public void setItemDesc(String itemDesc) {
		_itemDesc = itemDesc;
	}

	@Override
	public double getSellingPrice() {
		return _sellingPrice;
	}

	@Override
	public void setSellingPrice(double sellingPrice) {
		_sellingPrice = sellingPrice;
	}

	@Override
	public String getContractId() {
		if (_contractId == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractId;
		}
	}

	@Override
	public void setContractId(String contractId) {
		_columnBitmask |= CONTRACTID_COLUMN_BITMASK;

		if (_originalContractId == null) {
			_originalContractId = _contractId;
		}

		_contractId = contractId;
	}

	public String getOriginalContractId() {
		return GetterUtil.getString(_originalContractId);
	}

	@Override
	public String getContractNo() {
		if (_contractNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractNo;
		}
	}

	@Override
	public void setContractNo(String contractNo) {
		_columnBitmask |= CONTRACTNO_COLUMN_BITMASK;

		if (_originalContractNo == null) {
			_originalContractNo = _contractNo;
		}

		_contractNo = contractNo;
	}

	public String getOriginalContractNo() {
		return GetterUtil.getString(_originalContractNo);
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public int getBestPriceMasterSid() {
		return _bestPriceMasterSid;
	}

	@Override
	public void setBestPriceMasterSid(int bestPriceMasterSid) {
		_bestPriceMasterSid = bestPriceMasterSid;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public boolean getRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public boolean isRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public void setRecordLockStatus(boolean recordLockStatus) {
		_recordLockStatus = recordLockStatus;
	}

	@Override
	public double getBeginningWacPackage() {
		return _beginningWacPackage;
	}

	@Override
	public void setBeginningWacPackage(double beginningWacPackage) {
		_beginningWacPackage = beginningWacPackage;
	}

	@Override
	public double getInitialDiscount() {
		return _initialDiscount;
	}

	@Override
	public void setInitialDiscount(double initialDiscount) {
		_initialDiscount = initialDiscount;
	}

	@Override
	public String getPeriod() {
		if (_period == null) {
			return StringPool.BLANK;
		}
		else {
			return _period;
		}
	}

	@Override
	public void setPeriod(String period) {
		_columnBitmask |= PERIOD_COLUMN_BITMASK;

		if (_originalPeriod == null) {
			_originalPeriod = _period;
		}

		_period = period;
	}

	public String getOriginalPeriod() {
		return GetterUtil.getString(_originalPeriod);
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public Date getContractStartDate() {
		return _contractStartDate;
	}

	@Override
	public void setContractStartDate(Date contractStartDate) {
		_contractStartDate = contractStartDate;
	}

	@Override
	public Date getContractEndDate() {
		return _contractEndDate;
	}

	@Override
	public void setContractEndDate(Date contractEndDate) {
		_contractEndDate = contractEndDate;
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public BestPriceMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BestPriceMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BestPriceMasterImpl bestPriceMasterImpl = new BestPriceMasterImpl();

		bestPriceMasterImpl.setInitialBestPrice(getInitialBestPrice());
		bestPriceMasterImpl.setCreatedBy(getCreatedBy());
		bestPriceMasterImpl.setItemNo(getItemNo());
		bestPriceMasterImpl.setModifiedBy(getModifiedBy());
		bestPriceMasterImpl.setAccountId(getAccountId());
		bestPriceMasterImpl.setCreatedDate(getCreatedDate());
		bestPriceMasterImpl.setItemId(getItemId());
		bestPriceMasterImpl.setItemDesc(getItemDesc());
		bestPriceMasterImpl.setSellingPrice(getSellingPrice());
		bestPriceMasterImpl.setContractId(getContractId());
		bestPriceMasterImpl.setContractNo(getContractNo());
		bestPriceMasterImpl.setBatchId(getBatchId());
		bestPriceMasterImpl.setBestPriceMasterSid(getBestPriceMasterSid());
		bestPriceMasterImpl.setModifiedDate(getModifiedDate());
		bestPriceMasterImpl.setRecordLockStatus(getRecordLockStatus());
		bestPriceMasterImpl.setBeginningWacPackage(getBeginningWacPackage());
		bestPriceMasterImpl.setInitialDiscount(getInitialDiscount());
		bestPriceMasterImpl.setPeriod(getPeriod());
		bestPriceMasterImpl.setSource(getSource());
		bestPriceMasterImpl.setContractStartDate(getContractStartDate());
		bestPriceMasterImpl.setContractEndDate(getContractEndDate());
		bestPriceMasterImpl.setInboundStatus(getInboundStatus());

		bestPriceMasterImpl.resetOriginalValues();

		return bestPriceMasterImpl;
	}

	@Override
	public int compareTo(BestPriceMaster bestPriceMaster) {
		int primaryKey = bestPriceMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BestPriceMaster)) {
			return false;
		}

		BestPriceMaster bestPriceMaster = (BestPriceMaster)obj;

		int primaryKey = bestPriceMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BestPriceMasterModelImpl bestPriceMasterModelImpl = this;

		bestPriceMasterModelImpl._originalItemNo = bestPriceMasterModelImpl._itemNo;

		bestPriceMasterModelImpl._originalAccountId = bestPriceMasterModelImpl._accountId;

		bestPriceMasterModelImpl._originalItemId = bestPriceMasterModelImpl._itemId;

		bestPriceMasterModelImpl._originalContractId = bestPriceMasterModelImpl._contractId;

		bestPriceMasterModelImpl._originalContractNo = bestPriceMasterModelImpl._contractNo;

		bestPriceMasterModelImpl._originalPeriod = bestPriceMasterModelImpl._period;

		bestPriceMasterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BestPriceMaster> toCacheModel() {
		BestPriceMasterCacheModel bestPriceMasterCacheModel = new BestPriceMasterCacheModel();

		bestPriceMasterCacheModel.initialBestPrice = getInitialBestPrice();

		bestPriceMasterCacheModel.createdBy = getCreatedBy();

		bestPriceMasterCacheModel.itemNo = getItemNo();

		String itemNo = bestPriceMasterCacheModel.itemNo;

		if ((itemNo != null) && (itemNo.length() == 0)) {
			bestPriceMasterCacheModel.itemNo = null;
		}

		bestPriceMasterCacheModel.modifiedBy = getModifiedBy();

		bestPriceMasterCacheModel.accountId = getAccountId();

		String accountId = bestPriceMasterCacheModel.accountId;

		if ((accountId != null) && (accountId.length() == 0)) {
			bestPriceMasterCacheModel.accountId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			bestPriceMasterCacheModel.createdDate = createdDate.getTime();
		}
		else {
			bestPriceMasterCacheModel.createdDate = Long.MIN_VALUE;
		}

		bestPriceMasterCacheModel.itemId = getItemId();

		String itemId = bestPriceMasterCacheModel.itemId;

		if ((itemId != null) && (itemId.length() == 0)) {
			bestPriceMasterCacheModel.itemId = null;
		}

		bestPriceMasterCacheModel.itemDesc = getItemDesc();

		String itemDesc = bestPriceMasterCacheModel.itemDesc;

		if ((itemDesc != null) && (itemDesc.length() == 0)) {
			bestPriceMasterCacheModel.itemDesc = null;
		}

		bestPriceMasterCacheModel.sellingPrice = getSellingPrice();

		bestPriceMasterCacheModel.contractId = getContractId();

		String contractId = bestPriceMasterCacheModel.contractId;

		if ((contractId != null) && (contractId.length() == 0)) {
			bestPriceMasterCacheModel.contractId = null;
		}

		bestPriceMasterCacheModel.contractNo = getContractNo();

		String contractNo = bestPriceMasterCacheModel.contractNo;

		if ((contractNo != null) && (contractNo.length() == 0)) {
			bestPriceMasterCacheModel.contractNo = null;
		}

		bestPriceMasterCacheModel.batchId = getBatchId();

		String batchId = bestPriceMasterCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			bestPriceMasterCacheModel.batchId = null;
		}

		bestPriceMasterCacheModel.bestPriceMasterSid = getBestPriceMasterSid();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			bestPriceMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			bestPriceMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		bestPriceMasterCacheModel.recordLockStatus = getRecordLockStatus();

		bestPriceMasterCacheModel.beginningWacPackage = getBeginningWacPackage();

		bestPriceMasterCacheModel.initialDiscount = getInitialDiscount();

		bestPriceMasterCacheModel.period = getPeriod();

		String period = bestPriceMasterCacheModel.period;

		if ((period != null) && (period.length() == 0)) {
			bestPriceMasterCacheModel.period = null;
		}

		bestPriceMasterCacheModel.source = getSource();

		String source = bestPriceMasterCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			bestPriceMasterCacheModel.source = null;
		}

		Date contractStartDate = getContractStartDate();

		if (contractStartDate != null) {
			bestPriceMasterCacheModel.contractStartDate = contractStartDate.getTime();
		}
		else {
			bestPriceMasterCacheModel.contractStartDate = Long.MIN_VALUE;
		}

		Date contractEndDate = getContractEndDate();

		if (contractEndDate != null) {
			bestPriceMasterCacheModel.contractEndDate = contractEndDate.getTime();
		}
		else {
			bestPriceMasterCacheModel.contractEndDate = Long.MIN_VALUE;
		}

		bestPriceMasterCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = bestPriceMasterCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			bestPriceMasterCacheModel.inboundStatus = null;
		}

		return bestPriceMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(45);

		sb.append("{initialBestPrice=");
		sb.append(getInitialBestPrice());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", itemNo=");
		sb.append(getItemNo());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", accountId=");
		sb.append(getAccountId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", itemId=");
		sb.append(getItemId());
		sb.append(", itemDesc=");
		sb.append(getItemDesc());
		sb.append(", sellingPrice=");
		sb.append(getSellingPrice());
		sb.append(", contractId=");
		sb.append(getContractId());
		sb.append(", contractNo=");
		sb.append(getContractNo());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", bestPriceMasterSid=");
		sb.append(getBestPriceMasterSid());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", recordLockStatus=");
		sb.append(getRecordLockStatus());
		sb.append(", beginningWacPackage=");
		sb.append(getBeginningWacPackage());
		sb.append(", initialDiscount=");
		sb.append(getInitialDiscount());
		sb.append(", period=");
		sb.append(getPeriod());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", contractStartDate=");
		sb.append(getContractStartDate());
		sb.append(", contractEndDate=");
		sb.append(getContractEndDate());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(70);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.BestPriceMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>initialBestPrice</column-name><column-value><![CDATA[");
		sb.append(getInitialBestPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemNo</column-name><column-value><![CDATA[");
		sb.append(getItemNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accountId</column-name><column-value><![CDATA[");
		sb.append(getAccountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemDesc</column-name><column-value><![CDATA[");
		sb.append(getItemDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sellingPrice</column-name><column-value><![CDATA[");
		sb.append(getSellingPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractId</column-name><column-value><![CDATA[");
		sb.append(getContractId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractNo</column-name><column-value><![CDATA[");
		sb.append(getContractNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bestPriceMasterSid</column-name><column-value><![CDATA[");
		sb.append(getBestPriceMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
		sb.append(getRecordLockStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>beginningWacPackage</column-name><column-value><![CDATA[");
		sb.append(getBeginningWacPackage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>initialDiscount</column-name><column-value><![CDATA[");
		sb.append(getInitialDiscount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>period</column-name><column-value><![CDATA[");
		sb.append(getPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractStartDate</column-name><column-value><![CDATA[");
		sb.append(getContractStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractEndDate</column-name><column-value><![CDATA[");
		sb.append(getContractEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = BestPriceMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			BestPriceMaster.class
		};
	private double _initialBestPrice;
	private int _createdBy;
	private String _itemNo;
	private String _originalItemNo;
	private int _modifiedBy;
	private String _accountId;
	private String _originalAccountId;
	private Date _createdDate;
	private String _itemId;
	private String _originalItemId;
	private String _itemDesc;
	private double _sellingPrice;
	private String _contractId;
	private String _originalContractId;
	private String _contractNo;
	private String _originalContractNo;
	private String _batchId;
	private int _bestPriceMasterSid;
	private Date _modifiedDate;
	private boolean _recordLockStatus;
	private double _beginningWacPackage;
	private double _initialDiscount;
	private String _period;
	private String _originalPeriod;
	private String _source;
	private Date _contractStartDate;
	private Date _contractEndDate;
	private String _inboundStatus;
	private long _columnBitmask;
	private BestPriceMaster _escapedModel;
}