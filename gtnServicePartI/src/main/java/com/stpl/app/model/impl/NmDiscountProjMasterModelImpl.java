package com.stpl.app.model.impl;

import com.stpl.app.model.NmDiscountProjMaster;
import com.stpl.app.model.NmDiscountProjMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NmDiscountProjMaster service. Represents a row in the &quot;NM_DISCOUNT_PROJ_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.NmDiscountProjMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NmDiscountProjMasterImpl}.
 * </p>
 *
 * @author
 * @see NmDiscountProjMasterImpl
 * @see com.stpl.app.model.NmDiscountProjMaster
 * @see com.stpl.app.model.NmDiscountProjMasterModel
 * @generated
 */
public class NmDiscountProjMasterModelImpl extends BaseModelImpl<NmDiscountProjMaster>
    implements NmDiscountProjMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a nm discount proj master model instance should use the {@link com.stpl.app.model.NmDiscountProjMaster} interface instead.
     */
    public static final String TABLE_NAME = "NM_DISCOUNT_PROJ_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "CHECK_RECORD", Types.BOOLEAN },
            { "DISCOUNT_ID", Types.VARCHAR },
            { "USER_GROUP", Types.VARCHAR },
            { "PRICE_GROUP_TYPE", Types.VARCHAR },
            { "PROJECTION_DETAILS_SID", Types.INTEGER },
            { "NET_FLAG", Types.VARCHAR },
            { "METHODOLOGY", Types.VARCHAR },
            { "DISCOUNT_NAME", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table NM_DISCOUNT_PROJ_MASTER (CHECK_RECORD BOOLEAN,DISCOUNT_ID VARCHAR(75) null,USER_GROUP VARCHAR(75) null,PRICE_GROUP_TYPE VARCHAR(75) null,PROJECTION_DETAILS_SID INTEGER not null primary key IDENTITY,NET_FLAG VARCHAR(75) null,METHODOLOGY VARCHAR(75) null,DISCOUNT_NAME VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table NM_DISCOUNT_PROJ_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY nmDiscountProjMaster.projectionDetailsSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY NM_DISCOUNT_PROJ_MASTER.PROJECTION_DETAILS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.NmDiscountProjMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.NmDiscountProjMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.NmDiscountProjMaster"));
    private static ClassLoader _classLoader = NmDiscountProjMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            NmDiscountProjMaster.class
        };
    private boolean _checkRecord;
    private String _discountId;
    private String _userGroup;
    private String _priceGroupType;
    private int _projectionDetailsSid;
    private String _netFlag;
    private String _methodology;
    private String _discountName;
    private NmDiscountProjMaster _escapedModel;

    public NmDiscountProjMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _projectionDetailsSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setProjectionDetailsSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _projectionDetailsSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return NmDiscountProjMaster.class;
    }

    @Override
    public String getModelClassName() {
        return NmDiscountProjMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("checkRecord", getCheckRecord());
        attributes.put("discountId", getDiscountId());
        attributes.put("userGroup", getUserGroup());
        attributes.put("priceGroupType", getPriceGroupType());
        attributes.put("projectionDetailsSid", getProjectionDetailsSid());
        attributes.put("netFlag", getNetFlag());
        attributes.put("methodology", getMethodology());
        attributes.put("discountName", getDiscountName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Boolean checkRecord = (Boolean) attributes.get("checkRecord");

        if (checkRecord != null) {
            setCheckRecord(checkRecord);
        }

        String discountId = (String) attributes.get("discountId");

        if (discountId != null) {
            setDiscountId(discountId);
        }

        String userGroup = (String) attributes.get("userGroup");

        if (userGroup != null) {
            setUserGroup(userGroup);
        }

        String priceGroupType = (String) attributes.get("priceGroupType");

        if (priceGroupType != null) {
            setPriceGroupType(priceGroupType);
        }

        Integer projectionDetailsSid = (Integer) attributes.get(
                "projectionDetailsSid");

        if (projectionDetailsSid != null) {
            setProjectionDetailsSid(projectionDetailsSid);
        }

        String netFlag = (String) attributes.get("netFlag");

        if (netFlag != null) {
            setNetFlag(netFlag);
        }

        String methodology = (String) attributes.get("methodology");

        if (methodology != null) {
            setMethodology(methodology);
        }

        String discountName = (String) attributes.get("discountName");

        if (discountName != null) {
            setDiscountName(discountName);
        }
    }

    @Override
    public boolean getCheckRecord() {
        return _checkRecord;
    }

    @Override
    public boolean isCheckRecord() {
        return _checkRecord;
    }

    @Override
    public void setCheckRecord(boolean checkRecord) {
        _checkRecord = checkRecord;
    }

    @Override
    public String getDiscountId() {
        if (_discountId == null) {
            return StringPool.BLANK;
        } else {
            return _discountId;
        }
    }

    @Override
    public void setDiscountId(String discountId) {
        _discountId = discountId;
    }

    @Override
    public String getUserGroup() {
        if (_userGroup == null) {
            return StringPool.BLANK;
        } else {
            return _userGroup;
        }
    }

    @Override
    public void setUserGroup(String userGroup) {
        _userGroup = userGroup;
    }

    @Override
    public String getPriceGroupType() {
        if (_priceGroupType == null) {
            return StringPool.BLANK;
        } else {
            return _priceGroupType;
        }
    }

    @Override
    public void setPriceGroupType(String priceGroupType) {
        _priceGroupType = priceGroupType;
    }

    @Override
    public int getProjectionDetailsSid() {
        return _projectionDetailsSid;
    }

    @Override
    public void setProjectionDetailsSid(int projectionDetailsSid) {
        _projectionDetailsSid = projectionDetailsSid;
    }

    @Override
    public String getNetFlag() {
        if (_netFlag == null) {
            return StringPool.BLANK;
        } else {
            return _netFlag;
        }
    }

    @Override
    public void setNetFlag(String netFlag) {
        _netFlag = netFlag;
    }

    @Override
    public String getMethodology() {
        if (_methodology == null) {
            return StringPool.BLANK;
        } else {
            return _methodology;
        }
    }

    @Override
    public void setMethodology(String methodology) {
        _methodology = methodology;
    }

    @Override
    public String getDiscountName() {
        if (_discountName == null) {
            return StringPool.BLANK;
        } else {
            return _discountName;
        }
    }

    @Override
    public void setDiscountName(String discountName) {
        _discountName = discountName;
    }

    @Override
    public NmDiscountProjMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (NmDiscountProjMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NmDiscountProjMasterImpl nmDiscountProjMasterImpl = new NmDiscountProjMasterImpl();

        nmDiscountProjMasterImpl.setCheckRecord(getCheckRecord());
        nmDiscountProjMasterImpl.setDiscountId(getDiscountId());
        nmDiscountProjMasterImpl.setUserGroup(getUserGroup());
        nmDiscountProjMasterImpl.setPriceGroupType(getPriceGroupType());
        nmDiscountProjMasterImpl.setProjectionDetailsSid(getProjectionDetailsSid());
        nmDiscountProjMasterImpl.setNetFlag(getNetFlag());
        nmDiscountProjMasterImpl.setMethodology(getMethodology());
        nmDiscountProjMasterImpl.setDiscountName(getDiscountName());

        nmDiscountProjMasterImpl.resetOriginalValues();

        return nmDiscountProjMasterImpl;
    }

    @Override
    public int compareTo(NmDiscountProjMaster nmDiscountProjMaster) {
        int primaryKey = nmDiscountProjMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof NmDiscountProjMaster)) {
            return false;
        }

        NmDiscountProjMaster nmDiscountProjMaster = (NmDiscountProjMaster) obj;

        int primaryKey = nmDiscountProjMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<NmDiscountProjMaster> toCacheModel() {
        NmDiscountProjMasterCacheModel nmDiscountProjMasterCacheModel = new NmDiscountProjMasterCacheModel();

        nmDiscountProjMasterCacheModel.checkRecord = getCheckRecord();

        nmDiscountProjMasterCacheModel.discountId = getDiscountId();

        String discountId = nmDiscountProjMasterCacheModel.discountId;

        if ((discountId != null) && (discountId.length() == 0)) {
            nmDiscountProjMasterCacheModel.discountId = null;
        }

        nmDiscountProjMasterCacheModel.userGroup = getUserGroup();

        String userGroup = nmDiscountProjMasterCacheModel.userGroup;

        if ((userGroup != null) && (userGroup.length() == 0)) {
            nmDiscountProjMasterCacheModel.userGroup = null;
        }

        nmDiscountProjMasterCacheModel.priceGroupType = getPriceGroupType();

        String priceGroupType = nmDiscountProjMasterCacheModel.priceGroupType;

        if ((priceGroupType != null) && (priceGroupType.length() == 0)) {
            nmDiscountProjMasterCacheModel.priceGroupType = null;
        }

        nmDiscountProjMasterCacheModel.projectionDetailsSid = getProjectionDetailsSid();

        nmDiscountProjMasterCacheModel.netFlag = getNetFlag();

        String netFlag = nmDiscountProjMasterCacheModel.netFlag;

        if ((netFlag != null) && (netFlag.length() == 0)) {
            nmDiscountProjMasterCacheModel.netFlag = null;
        }

        nmDiscountProjMasterCacheModel.methodology = getMethodology();

        String methodology = nmDiscountProjMasterCacheModel.methodology;

        if ((methodology != null) && (methodology.length() == 0)) {
            nmDiscountProjMasterCacheModel.methodology = null;
        }

        nmDiscountProjMasterCacheModel.discountName = getDiscountName();

        String discountName = nmDiscountProjMasterCacheModel.discountName;

        if ((discountName != null) && (discountName.length() == 0)) {
            nmDiscountProjMasterCacheModel.discountName = null;
        }

        return nmDiscountProjMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{checkRecord=");
        sb.append(getCheckRecord());
        sb.append(", discountId=");
        sb.append(getDiscountId());
        sb.append(", userGroup=");
        sb.append(getUserGroup());
        sb.append(", priceGroupType=");
        sb.append(getPriceGroupType());
        sb.append(", projectionDetailsSid=");
        sb.append(getProjectionDetailsSid());
        sb.append(", netFlag=");
        sb.append(getNetFlag());
        sb.append(", methodology=");
        sb.append(getMethodology());
        sb.append(", discountName=");
        sb.append(getDiscountName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.NmDiscountProjMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>checkRecord</column-name><column-value><![CDATA[");
        sb.append(getCheckRecord());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discountId</column-name><column-value><![CDATA[");
        sb.append(getDiscountId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userGroup</column-name><column-value><![CDATA[");
        sb.append(getUserGroup());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceGroupType</column-name><column-value><![CDATA[");
        sb.append(getPriceGroupType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>netFlag</column-name><column-value><![CDATA[");
        sb.append(getNetFlag());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>methodology</column-name><column-value><![CDATA[");
        sb.append(getMethodology());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discountName</column-name><column-value><![CDATA[");
        sb.append(getDiscountName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
