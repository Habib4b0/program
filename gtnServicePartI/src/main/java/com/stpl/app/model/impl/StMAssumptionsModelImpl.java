package com.stpl.app.model.impl;

import com.stpl.app.model.StMAssumptions;
import com.stpl.app.model.StMAssumptionsModel;
import com.stpl.app.service.persistence.StMAssumptionsPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StMAssumptions service. Represents a row in the &quot;ST_M_ASSUMPTIONS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.StMAssumptionsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StMAssumptionsImpl}.
 * </p>
 *
 * @author
 * @see StMAssumptionsImpl
 * @see com.stpl.app.model.StMAssumptions
 * @see com.stpl.app.model.StMAssumptionsModel
 * @generated
 */
public class StMAssumptionsModelImpl extends BaseModelImpl<StMAssumptions>
    implements StMAssumptionsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a st m assumptions model instance should use the {@link com.stpl.app.model.StMAssumptions} interface instead.
     */
    public static final String TABLE_NAME = "ST_M_ASSUMPTIONS";
    public static final Object[][] TABLE_COLUMNS = {
            { "GROSS_SALES_PERCENT_CHANGE", Types.DOUBLE },
            { "GROSS_SALES_PRIOR", Types.DOUBLE },
            { "PROJ_YEAR", Types.INTEGER },
            { "TOTAL_DISCOUNT_PERCENT_PROJECTED", Types.DOUBLE },
            { "CAM_ID", Types.INTEGER },
            { "COMMENTARY", Types.VARCHAR },
            { "IS_CHECKED", Types.BOOLEAN },
            { "USER_ID", Types.INTEGER },
            { "LAST_MODIFIED_DATE", Types.TIMESTAMP },
            { "GROSS_SALES_PROJECTED", Types.DOUBLE },
            { "TOTAL_DISCOUNT_PERCENT_CHANGE", Types.DOUBLE },
            { "TOTAL_DISCOUNT_PERCENT_PRIOR", Types.DOUBLE },
            { "NET_SALES_PERCENT_CHANGE", Types.DOUBLE },
            { "PARENT", Types.BOOLEAN },
            { "ST_M_ASSUMPTIONS_SID", Types.VARCHAR },
            { "PROJECTION_PERIOD", Types.INTEGER },
            { "PROJECTION_DETAILS_SID", Types.INTEGER },
            { "NET_SALES_PRIOR", Types.DOUBLE },
            { "SESSION_ID", Types.INTEGER },
            { "NET_SALES_PROJECTED", Types.DOUBLE },
            { "REASON_CODES", Types.VARCHAR },
            { "M_ASSUMPTIONS_SID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table ST_M_ASSUMPTIONS (GROSS_SALES_PERCENT_CHANGE DOUBLE,GROSS_SALES_PRIOR DOUBLE,PROJ_YEAR INTEGER not null IDENTITY,TOTAL_DISCOUNT_PERCENT_PROJECTED DOUBLE,CAM_ID INTEGER,COMMENTARY VARCHAR(75) null,IS_CHECKED BOOLEAN,USER_ID INTEGER not null IDENTITY,LAST_MODIFIED_DATE DATE null,GROSS_SALES_PROJECTED DOUBLE,TOTAL_DISCOUNT_PERCENT_CHANGE DOUBLE,TOTAL_DISCOUNT_PERCENT_PRIOR DOUBLE,NET_SALES_PERCENT_CHANGE DOUBLE,PARENT BOOLEAN,ST_M_ASSUMPTIONS_SID VARCHAR(75) not null IDENTITY,PROJECTION_PERIOD INTEGER not null IDENTITY,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,NET_SALES_PRIOR DOUBLE,SESSION_ID INTEGER not null IDENTITY,NET_SALES_PROJECTED DOUBLE,REASON_CODES VARCHAR(75) null,M_ASSUMPTIONS_SID INTEGER not null IDENTITY,primary key (PROJ_YEAR, USER_ID, ST_M_ASSUMPTIONS_SID, PROJECTION_PERIOD, PROJECTION_DETAILS_SID, SESSION_ID, M_ASSUMPTIONS_SID))";
    public static final String TABLE_SQL_DROP = "drop table ST_M_ASSUMPTIONS";
    public static final String ORDER_BY_JPQL = " ORDER BY stMAssumptions.id.projYear ASC, stMAssumptions.id.userId ASC, stMAssumptions.id.stMAssumptionsSid ASC, stMAssumptions.id.projectionPeriod ASC, stMAssumptions.id.projectionDetailsSid ASC, stMAssumptions.id.sessionId ASC, stMAssumptions.id.mAssumptionsSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ST_M_ASSUMPTIONS.PROJ_YEAR ASC, ST_M_ASSUMPTIONS.USER_ID ASC, ST_M_ASSUMPTIONS.ST_M_ASSUMPTIONS_SID ASC, ST_M_ASSUMPTIONS.PROJECTION_PERIOD ASC, ST_M_ASSUMPTIONS.PROJECTION_DETAILS_SID ASC, ST_M_ASSUMPTIONS.SESSION_ID ASC, ST_M_ASSUMPTIONS.M_ASSUMPTIONS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.StMAssumptions"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.StMAssumptions"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.StMAssumptions"));
    private static ClassLoader _classLoader = StMAssumptions.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            StMAssumptions.class
        };
    private double _grossSalesPercentChange;
    private double _grossSalesPrior;
    private int _projYear;
    private double _totalDiscountPercentProjected;
    private int _camId;
    private String _commentary;
    private boolean _isChecked;
    private int _userId;
    private Date _lastModifiedDate;
    private double _grossSalesProjected;
    private double _totalDiscountPercentChange;
    private double _totalDiscountPercentPrior;
    private double _netSalesPercentChange;
    private boolean _parent;
    private String _stMAssumptionsSid;
    private int _projectionPeriod;
    private int _projectionDetailsSid;
    private double _netSalesPrior;
    private int _sessionId;
    private double _netSalesProjected;
    private String _reasonCodes;
    private int _mAssumptionsSid;
    private StMAssumptions _escapedModel;

    public StMAssumptionsModelImpl() {
    }

    @Override
    public StMAssumptionsPK getPrimaryKey() {
        return new StMAssumptionsPK(_projYear, _userId, _stMAssumptionsSid,
            _projectionPeriod, _projectionDetailsSid, _sessionId,
            _mAssumptionsSid);
    }

    @Override
    public void setPrimaryKey(StMAssumptionsPK primaryKey) {
        setProjYear(primaryKey.projYear);
        setUserId(primaryKey.userId);
        setStMAssumptionsSid(primaryKey.stMAssumptionsSid);
        setProjectionPeriod(primaryKey.projectionPeriod);
        setProjectionDetailsSid(primaryKey.projectionDetailsSid);
        setSessionId(primaryKey.sessionId);
        setMAssumptionsSid(primaryKey.mAssumptionsSid);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new StMAssumptionsPK(_projYear, _userId, _stMAssumptionsSid,
            _projectionPeriod, _projectionDetailsSid, _sessionId,
            _mAssumptionsSid);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((StMAssumptionsPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return StMAssumptions.class;
    }

    @Override
    public String getModelClassName() {
        return StMAssumptions.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("grossSalesPercentChange", getGrossSalesPercentChange());
        attributes.put("grossSalesPrior", getGrossSalesPrior());
        attributes.put("projYear", getProjYear());
        attributes.put("totalDiscountPercentProjected",
            getTotalDiscountPercentProjected());
        attributes.put("camId", getCamId());
        attributes.put("commentary", getCommentary());
        attributes.put("isChecked", getIsChecked());
        attributes.put("userId", getUserId());
        attributes.put("lastModifiedDate", getLastModifiedDate());
        attributes.put("grossSalesProjected", getGrossSalesProjected());
        attributes.put("totalDiscountPercentChange",
            getTotalDiscountPercentChange());
        attributes.put("totalDiscountPercentPrior",
            getTotalDiscountPercentPrior());
        attributes.put("netSalesPercentChange", getNetSalesPercentChange());
        attributes.put("parent", getParent());
        attributes.put("stMAssumptionsSid", getStMAssumptionsSid());
        attributes.put("projectionPeriod", getProjectionPeriod());
        attributes.put("projectionDetailsSid", getProjectionDetailsSid());
        attributes.put("netSalesPrior", getNetSalesPrior());
        attributes.put("sessionId", getSessionId());
        attributes.put("netSalesProjected", getNetSalesProjected());
        attributes.put("reasonCodes", getReasonCodes());
        attributes.put("mAssumptionsSid", getMAssumptionsSid());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Double grossSalesPercentChange = (Double) attributes.get(
                "grossSalesPercentChange");

        if (grossSalesPercentChange != null) {
            setGrossSalesPercentChange(grossSalesPercentChange);
        }

        Double grossSalesPrior = (Double) attributes.get("grossSalesPrior");

        if (grossSalesPrior != null) {
            setGrossSalesPrior(grossSalesPrior);
        }

        Integer projYear = (Integer) attributes.get("projYear");

        if (projYear != null) {
            setProjYear(projYear);
        }

        Double totalDiscountPercentProjected = (Double) attributes.get(
                "totalDiscountPercentProjected");

        if (totalDiscountPercentProjected != null) {
            setTotalDiscountPercentProjected(totalDiscountPercentProjected);
        }

        Integer camId = (Integer) attributes.get("camId");

        if (camId != null) {
            setCamId(camId);
        }

        String commentary = (String) attributes.get("commentary");

        if (commentary != null) {
            setCommentary(commentary);
        }

        Boolean isChecked = (Boolean) attributes.get("isChecked");

        if (isChecked != null) {
            setIsChecked(isChecked);
        }

        Integer userId = (Integer) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date lastModifiedDate = (Date) attributes.get("lastModifiedDate");

        if (lastModifiedDate != null) {
            setLastModifiedDate(lastModifiedDate);
        }

        Double grossSalesProjected = (Double) attributes.get(
                "grossSalesProjected");

        if (grossSalesProjected != null) {
            setGrossSalesProjected(grossSalesProjected);
        }

        Double totalDiscountPercentChange = (Double) attributes.get(
                "totalDiscountPercentChange");

        if (totalDiscountPercentChange != null) {
            setTotalDiscountPercentChange(totalDiscountPercentChange);
        }

        Double totalDiscountPercentPrior = (Double) attributes.get(
                "totalDiscountPercentPrior");

        if (totalDiscountPercentPrior != null) {
            setTotalDiscountPercentPrior(totalDiscountPercentPrior);
        }

        Double netSalesPercentChange = (Double) attributes.get(
                "netSalesPercentChange");

        if (netSalesPercentChange != null) {
            setNetSalesPercentChange(netSalesPercentChange);
        }

        Boolean parent = (Boolean) attributes.get("parent");

        if (parent != null) {
            setParent(parent);
        }

        String stMAssumptionsSid = (String) attributes.get("stMAssumptionsSid");

        if (stMAssumptionsSid != null) {
            setStMAssumptionsSid(stMAssumptionsSid);
        }

        Integer projectionPeriod = (Integer) attributes.get("projectionPeriod");

        if (projectionPeriod != null) {
            setProjectionPeriod(projectionPeriod);
        }

        Integer projectionDetailsSid = (Integer) attributes.get(
                "projectionDetailsSid");

        if (projectionDetailsSid != null) {
            setProjectionDetailsSid(projectionDetailsSid);
        }

        Double netSalesPrior = (Double) attributes.get("netSalesPrior");

        if (netSalesPrior != null) {
            setNetSalesPrior(netSalesPrior);
        }

        Integer sessionId = (Integer) attributes.get("sessionId");

        if (sessionId != null) {
            setSessionId(sessionId);
        }

        Double netSalesProjected = (Double) attributes.get("netSalesProjected");

        if (netSalesProjected != null) {
            setNetSalesProjected(netSalesProjected);
        }

        String reasonCodes = (String) attributes.get("reasonCodes");

        if (reasonCodes != null) {
            setReasonCodes(reasonCodes);
        }

        Integer mAssumptionsSid = (Integer) attributes.get("mAssumptionsSid");

        if (mAssumptionsSid != null) {
            setMAssumptionsSid(mAssumptionsSid);
        }
    }

    @Override
    public double getGrossSalesPercentChange() {
        return _grossSalesPercentChange;
    }

    @Override
    public void setGrossSalesPercentChange(double grossSalesPercentChange) {
        _grossSalesPercentChange = grossSalesPercentChange;
    }

    @Override
    public double getGrossSalesPrior() {
        return _grossSalesPrior;
    }

    @Override
    public void setGrossSalesPrior(double grossSalesPrior) {
        _grossSalesPrior = grossSalesPrior;
    }

    @Override
    public int getProjYear() {
        return _projYear;
    }

    @Override
    public void setProjYear(int projYear) {
        _projYear = projYear;
    }

    @Override
    public double getTotalDiscountPercentProjected() {
        return _totalDiscountPercentProjected;
    }

    @Override
    public void setTotalDiscountPercentProjected(
        double totalDiscountPercentProjected) {
        _totalDiscountPercentProjected = totalDiscountPercentProjected;
    }

    @Override
    public int getCamId() {
        return _camId;
    }

    @Override
    public void setCamId(int camId) {
        _camId = camId;
    }

    @Override
    public String getCommentary() {
        if (_commentary == null) {
            return StringPool.BLANK;
        } else {
            return _commentary;
        }
    }

    @Override
    public void setCommentary(String commentary) {
        _commentary = commentary;
    }

    @Override
    public boolean getIsChecked() {
        return _isChecked;
    }

    @Override
    public boolean isIsChecked() {
        return _isChecked;
    }

    @Override
    public void setIsChecked(boolean isChecked) {
        _isChecked = isChecked;
    }

    @Override
    public int getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(int userId) {
        _userId = userId;
    }

    @Override
    public Date getLastModifiedDate() {
        return _lastModifiedDate;
    }

    @Override
    public void setLastModifiedDate(Date lastModifiedDate) {
        _lastModifiedDate = lastModifiedDate;
    }

    @Override
    public double getGrossSalesProjected() {
        return _grossSalesProjected;
    }

    @Override
    public void setGrossSalesProjected(double grossSalesProjected) {
        _grossSalesProjected = grossSalesProjected;
    }

    @Override
    public double getTotalDiscountPercentChange() {
        return _totalDiscountPercentChange;
    }

    @Override
    public void setTotalDiscountPercentChange(double totalDiscountPercentChange) {
        _totalDiscountPercentChange = totalDiscountPercentChange;
    }

    @Override
    public double getTotalDiscountPercentPrior() {
        return _totalDiscountPercentPrior;
    }

    @Override
    public void setTotalDiscountPercentPrior(double totalDiscountPercentPrior) {
        _totalDiscountPercentPrior = totalDiscountPercentPrior;
    }

    @Override
    public double getNetSalesPercentChange() {
        return _netSalesPercentChange;
    }

    @Override
    public void setNetSalesPercentChange(double netSalesPercentChange) {
        _netSalesPercentChange = netSalesPercentChange;
    }

    @Override
    public boolean getParent() {
        return _parent;
    }

    @Override
    public boolean isParent() {
        return _parent;
    }

    @Override
    public void setParent(boolean parent) {
        _parent = parent;
    }

    @Override
    public String getStMAssumptionsSid() {
        if (_stMAssumptionsSid == null) {
            return StringPool.BLANK;
        } else {
            return _stMAssumptionsSid;
        }
    }

    @Override
    public void setStMAssumptionsSid(String stMAssumptionsSid) {
        _stMAssumptionsSid = stMAssumptionsSid;
    }

    @Override
    public int getProjectionPeriod() {
        return _projectionPeriod;
    }

    @Override
    public void setProjectionPeriod(int projectionPeriod) {
        _projectionPeriod = projectionPeriod;
    }

    @Override
    public int getProjectionDetailsSid() {
        return _projectionDetailsSid;
    }

    @Override
    public void setProjectionDetailsSid(int projectionDetailsSid) {
        _projectionDetailsSid = projectionDetailsSid;
    }

    @Override
    public double getNetSalesPrior() {
        return _netSalesPrior;
    }

    @Override
    public void setNetSalesPrior(double netSalesPrior) {
        _netSalesPrior = netSalesPrior;
    }

    @Override
    public int getSessionId() {
        return _sessionId;
    }

    @Override
    public void setSessionId(int sessionId) {
        _sessionId = sessionId;
    }

    @Override
    public double getNetSalesProjected() {
        return _netSalesProjected;
    }

    @Override
    public void setNetSalesProjected(double netSalesProjected) {
        _netSalesProjected = netSalesProjected;
    }

    @Override
    public String getReasonCodes() {
        if (_reasonCodes == null) {
            return StringPool.BLANK;
        } else {
            return _reasonCodes;
        }
    }

    @Override
    public void setReasonCodes(String reasonCodes) {
        _reasonCodes = reasonCodes;
    }

    @Override
    public int getMAssumptionsSid() {
        return _mAssumptionsSid;
    }

    @Override
    public void setMAssumptionsSid(int mAssumptionsSid) {
        _mAssumptionsSid = mAssumptionsSid;
    }

    @Override
    public StMAssumptions toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (StMAssumptions) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        StMAssumptionsImpl stMAssumptionsImpl = new StMAssumptionsImpl();

        stMAssumptionsImpl.setGrossSalesPercentChange(getGrossSalesPercentChange());
        stMAssumptionsImpl.setGrossSalesPrior(getGrossSalesPrior());
        stMAssumptionsImpl.setProjYear(getProjYear());
        stMAssumptionsImpl.setTotalDiscountPercentProjected(getTotalDiscountPercentProjected());
        stMAssumptionsImpl.setCamId(getCamId());
        stMAssumptionsImpl.setCommentary(getCommentary());
        stMAssumptionsImpl.setIsChecked(getIsChecked());
        stMAssumptionsImpl.setUserId(getUserId());
        stMAssumptionsImpl.setLastModifiedDate(getLastModifiedDate());
        stMAssumptionsImpl.setGrossSalesProjected(getGrossSalesProjected());
        stMAssumptionsImpl.setTotalDiscountPercentChange(getTotalDiscountPercentChange());
        stMAssumptionsImpl.setTotalDiscountPercentPrior(getTotalDiscountPercentPrior());
        stMAssumptionsImpl.setNetSalesPercentChange(getNetSalesPercentChange());
        stMAssumptionsImpl.setParent(getParent());
        stMAssumptionsImpl.setStMAssumptionsSid(getStMAssumptionsSid());
        stMAssumptionsImpl.setProjectionPeriod(getProjectionPeriod());
        stMAssumptionsImpl.setProjectionDetailsSid(getProjectionDetailsSid());
        stMAssumptionsImpl.setNetSalesPrior(getNetSalesPrior());
        stMAssumptionsImpl.setSessionId(getSessionId());
        stMAssumptionsImpl.setNetSalesProjected(getNetSalesProjected());
        stMAssumptionsImpl.setReasonCodes(getReasonCodes());
        stMAssumptionsImpl.setMAssumptionsSid(getMAssumptionsSid());

        stMAssumptionsImpl.resetOriginalValues();

        return stMAssumptionsImpl;
    }

    @Override
    public int compareTo(StMAssumptions stMAssumptions) {
        StMAssumptionsPK primaryKey = stMAssumptions.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof StMAssumptions)) {
            return false;
        }

        StMAssumptions stMAssumptions = (StMAssumptions) obj;

        StMAssumptionsPK primaryKey = stMAssumptions.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<StMAssumptions> toCacheModel() {
        StMAssumptionsCacheModel stMAssumptionsCacheModel = new StMAssumptionsCacheModel();

        stMAssumptionsCacheModel.grossSalesPercentChange = getGrossSalesPercentChange();

        stMAssumptionsCacheModel.grossSalesPrior = getGrossSalesPrior();

        stMAssumptionsCacheModel.projYear = getProjYear();

        stMAssumptionsCacheModel.totalDiscountPercentProjected = getTotalDiscountPercentProjected();

        stMAssumptionsCacheModel.camId = getCamId();

        stMAssumptionsCacheModel.commentary = getCommentary();

        String commentary = stMAssumptionsCacheModel.commentary;

        if ((commentary != null) && (commentary.length() == 0)) {
            stMAssumptionsCacheModel.commentary = null;
        }

        stMAssumptionsCacheModel.isChecked = getIsChecked();

        stMAssumptionsCacheModel.userId = getUserId();

        Date lastModifiedDate = getLastModifiedDate();

        if (lastModifiedDate != null) {
            stMAssumptionsCacheModel.lastModifiedDate = lastModifiedDate.getTime();
        } else {
            stMAssumptionsCacheModel.lastModifiedDate = Long.MIN_VALUE;
        }

        stMAssumptionsCacheModel.grossSalesProjected = getGrossSalesProjected();

        stMAssumptionsCacheModel.totalDiscountPercentChange = getTotalDiscountPercentChange();

        stMAssumptionsCacheModel.totalDiscountPercentPrior = getTotalDiscountPercentPrior();

        stMAssumptionsCacheModel.netSalesPercentChange = getNetSalesPercentChange();

        stMAssumptionsCacheModel.parent = getParent();

        stMAssumptionsCacheModel.stMAssumptionsSid = getStMAssumptionsSid();

        String stMAssumptionsSid = stMAssumptionsCacheModel.stMAssumptionsSid;

        if ((stMAssumptionsSid != null) && (stMAssumptionsSid.length() == 0)) {
            stMAssumptionsCacheModel.stMAssumptionsSid = null;
        }

        stMAssumptionsCacheModel.projectionPeriod = getProjectionPeriod();

        stMAssumptionsCacheModel.projectionDetailsSid = getProjectionDetailsSid();

        stMAssumptionsCacheModel.netSalesPrior = getNetSalesPrior();

        stMAssumptionsCacheModel.sessionId = getSessionId();

        stMAssumptionsCacheModel.netSalesProjected = getNetSalesProjected();

        stMAssumptionsCacheModel.reasonCodes = getReasonCodes();

        String reasonCodes = stMAssumptionsCacheModel.reasonCodes;

        if ((reasonCodes != null) && (reasonCodes.length() == 0)) {
            stMAssumptionsCacheModel.reasonCodes = null;
        }

        stMAssumptionsCacheModel.mAssumptionsSid = getMAssumptionsSid();

        return stMAssumptionsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(45);

        sb.append("{grossSalesPercentChange=");
        sb.append(getGrossSalesPercentChange());
        sb.append(", grossSalesPrior=");
        sb.append(getGrossSalesPrior());
        sb.append(", projYear=");
        sb.append(getProjYear());
        sb.append(", totalDiscountPercentProjected=");
        sb.append(getTotalDiscountPercentProjected());
        sb.append(", camId=");
        sb.append(getCamId());
        sb.append(", commentary=");
        sb.append(getCommentary());
        sb.append(", isChecked=");
        sb.append(getIsChecked());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", lastModifiedDate=");
        sb.append(getLastModifiedDate());
        sb.append(", grossSalesProjected=");
        sb.append(getGrossSalesProjected());
        sb.append(", totalDiscountPercentChange=");
        sb.append(getTotalDiscountPercentChange());
        sb.append(", totalDiscountPercentPrior=");
        sb.append(getTotalDiscountPercentPrior());
        sb.append(", netSalesPercentChange=");
        sb.append(getNetSalesPercentChange());
        sb.append(", parent=");
        sb.append(getParent());
        sb.append(", stMAssumptionsSid=");
        sb.append(getStMAssumptionsSid());
        sb.append(", projectionPeriod=");
        sb.append(getProjectionPeriod());
        sb.append(", projectionDetailsSid=");
        sb.append(getProjectionDetailsSid());
        sb.append(", netSalesPrior=");
        sb.append(getNetSalesPrior());
        sb.append(", sessionId=");
        sb.append(getSessionId());
        sb.append(", netSalesProjected=");
        sb.append(getNetSalesProjected());
        sb.append(", reasonCodes=");
        sb.append(getReasonCodes());
        sb.append(", mAssumptionsSid=");
        sb.append(getMAssumptionsSid());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(70);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.StMAssumptions");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>grossSalesPercentChange</column-name><column-value><![CDATA[");
        sb.append(getGrossSalesPercentChange());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grossSalesPrior</column-name><column-value><![CDATA[");
        sb.append(getGrossSalesPrior());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projYear</column-name><column-value><![CDATA[");
        sb.append(getProjYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>totalDiscountPercentProjected</column-name><column-value><![CDATA[");
        sb.append(getTotalDiscountPercentProjected());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>camId</column-name><column-value><![CDATA[");
        sb.append(getCamId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>commentary</column-name><column-value><![CDATA[");
        sb.append(getCommentary());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isChecked</column-name><column-value><![CDATA[");
        sb.append(getIsChecked());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
        sb.append(getLastModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grossSalesProjected</column-name><column-value><![CDATA[");
        sb.append(getGrossSalesProjected());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>totalDiscountPercentChange</column-name><column-value><![CDATA[");
        sb.append(getTotalDiscountPercentChange());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>totalDiscountPercentPrior</column-name><column-value><![CDATA[");
        sb.append(getTotalDiscountPercentPrior());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>netSalesPercentChange</column-name><column-value><![CDATA[");
        sb.append(getNetSalesPercentChange());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parent</column-name><column-value><![CDATA[");
        sb.append(getParent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stMAssumptionsSid</column-name><column-value><![CDATA[");
        sb.append(getStMAssumptionsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionPeriod</column-name><column-value><![CDATA[");
        sb.append(getProjectionPeriod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>netSalesPrior</column-name><column-value><![CDATA[");
        sb.append(getNetSalesPrior());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sessionId</column-name><column-value><![CDATA[");
        sb.append(getSessionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>netSalesProjected</column-name><column-value><![CDATA[");
        sb.append(getNetSalesProjected());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reasonCodes</column-name><column-value><![CDATA[");
        sb.append(getReasonCodes());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mAssumptionsSid</column-name><column-value><![CDATA[");
        sb.append(getMAssumptionsSid());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
