/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.VwIvldDemandForecastActual;
import com.stpl.app.model.VwIvldDemandForecastActualModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VwIvldDemandForecastActual service. Represents a row in the &quot;VW_IVLD_DEMAND_FORECAST_ACTUAL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VwIvldDemandForecastActualModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VwIvldDemandForecastActualImpl}.
 * </p>
 *
 * @author
 * @see VwIvldDemandForecastActualImpl
 * @see VwIvldDemandForecastActual
 * @see VwIvldDemandForecastActualModel
 * @generated
 */
@ProviderType
public class VwIvldDemandForecastActualModelImpl extends BaseModelImpl<VwIvldDemandForecastActual>
	implements VwIvldDemandForecastActualModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vw ivld demand forecast actual model instance should use the {@link VwIvldDemandForecastActual} interface instead.
	 */
	public static final String TABLE_NAME = "VW_IVLD_DEMAND_FORECAST_ACTUAL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "DEMAND_INT_SID", Types.VARCHAR },
			{ "FORECAST_YEAR", Types.VARCHAR },
			{ "GROSS_UNITS", Types.VARCHAR },
			{ "BUSINESS_UNIT_NO", Types.VARCHAR },
			{ "TOTAL_DEMAND_UNITS", Types.VARCHAR },
			{ "BRAND_NAME", Types.VARCHAR },
			{ "ITEM_ID", Types.VARCHAR },
			{ "ORGANIZATION_KEY", Types.VARCHAR },
			{ "SOURCE", Types.VARCHAR },
			{ "MARKET_SHARE_RATIO", Types.VARCHAR },
			{ "IVLD_DEMAND_ACTUAL_FORECAST_SID", Types.INTEGER },
			{ "BUSINESS_UNIT_NAME", Types.VARCHAR },
			{ "ADD_CHG_DEL_INDICATOR", Types.VARCHAR },
			{ "ERROR_CODE", Types.VARCHAR },
			{ "MARKET_SHARE_UNITS", Types.VARCHAR },
			{ "INVENTORY_UNIT_CHANGE", Types.VARCHAR },
			{ "REPROCESSED_FLAG", Types.VARCHAR },
			{ "UNCAPTURED_UNITS_RATIO", Types.VARCHAR },
			{ "REASON_FOR_FAILURE", Types.VARCHAR },
			{ "COUNTRY", Types.VARCHAR },
			{ "FORECAST_TYPE", Types.VARCHAR },
			{ "BRAND_ID", Types.VARCHAR },
			{ "IS_FORECAST", Types.VARCHAR },
			{ "UNCAPTURED_UNITS", Types.VARCHAR },
			{ "GROSS_PRICE", Types.VARCHAR },
			{ "IS_ACTIVE", Types.VARCHAR },
			{ "GROSS_AMOUNT", Types.VARCHAR },
			{ "BATCH_ID", Types.VARCHAR },
			{ "FORECAST_VER", Types.VARCHAR },
			{ "ITEM_NAME", Types.VARCHAR },
			{ "FORECAST_MONTH", Types.VARCHAR },
			{ "ERROR_FIELD", Types.VARCHAR },
			{ "NET_SALES_PRICE", Types.VARCHAR },
			{ "NET_SALES_AMOUNT", Types.VARCHAR },
			{ "SEGMENT", Types.VARCHAR },
			{ "TOTAL_DEMAND_AMOUNT", Types.VARCHAR },
			{ "FORECAST_NAME", Types.VARCHAR },
			{ "MARKET_SIZE_UNITS", Types.VARCHAR },
			{ "CHECK_RECORD", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("DEMAND_INT_SID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_YEAR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("GROSS_UNITS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BUSINESS_UNIT_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TOTAL_DEMAND_UNITS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BRAND_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ORGANIZATION_KEY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MARKET_SHARE_RATIO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IVLD_DEMAND_ACTUAL_FORECAST_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BUSINESS_UNIT_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ADD_CHG_DEL_INDICATOR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ERROR_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MARKET_SHARE_UNITS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INVENTORY_UNIT_CHANGE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REPROCESSED_FLAG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UNCAPTURED_UNITS_RATIO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REASON_FOR_FAILURE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COUNTRY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BRAND_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IS_FORECAST", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UNCAPTURED_UNITS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("GROSS_PRICE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IS_ACTIVE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("GROSS_AMOUNT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_VER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_MONTH", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ERROR_FIELD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NET_SALES_PRICE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NET_SALES_AMOUNT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SEGMENT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TOTAL_DEMAND_AMOUNT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MARKET_SIZE_UNITS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CHECK_RECORD", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table VW_IVLD_DEMAND_FORECAST_ACTUAL (DEMAND_INT_SID VARCHAR(75) null,FORECAST_YEAR VARCHAR(75) null,GROSS_UNITS VARCHAR(75) null,BUSINESS_UNIT_NO VARCHAR(75) null,TOTAL_DEMAND_UNITS VARCHAR(75) null,BRAND_NAME VARCHAR(75) null,ITEM_ID VARCHAR(75) null,ORGANIZATION_KEY VARCHAR(75) null,SOURCE VARCHAR(75) null,MARKET_SHARE_RATIO VARCHAR(75) null,IVLD_DEMAND_ACTUAL_FORECAST_SID INTEGER not null primary key,BUSINESS_UNIT_NAME VARCHAR(75) null,ADD_CHG_DEL_INDICATOR VARCHAR(75) null,ERROR_CODE VARCHAR(75) null,MARKET_SHARE_UNITS VARCHAR(75) null,INVENTORY_UNIT_CHANGE VARCHAR(75) null,REPROCESSED_FLAG VARCHAR(75) null,UNCAPTURED_UNITS_RATIO VARCHAR(75) null,REASON_FOR_FAILURE VARCHAR(75) null,COUNTRY VARCHAR(75) null,FORECAST_TYPE VARCHAR(75) null,BRAND_ID VARCHAR(75) null,IS_FORECAST VARCHAR(75) null,UNCAPTURED_UNITS VARCHAR(75) null,GROSS_PRICE VARCHAR(75) null,IS_ACTIVE VARCHAR(75) null,GROSS_AMOUNT VARCHAR(75) null,BATCH_ID VARCHAR(75) null,FORECAST_VER VARCHAR(75) null,ITEM_NAME VARCHAR(75) null,FORECAST_MONTH VARCHAR(75) null,ERROR_FIELD VARCHAR(75) null,NET_SALES_PRICE VARCHAR(75) null,NET_SALES_AMOUNT VARCHAR(75) null,SEGMENT VARCHAR(75) null,TOTAL_DEMAND_AMOUNT VARCHAR(75) null,FORECAST_NAME VARCHAR(75) null,MARKET_SIZE_UNITS VARCHAR(75) null,CHECK_RECORD BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table VW_IVLD_DEMAND_FORECAST_ACTUAL";
	public static final String ORDER_BY_JPQL = " ORDER BY vwIvldDemandForecastActual.ivldDemandActualForecastSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY VW_IVLD_DEMAND_FORECAST_ACTUAL.IVLD_DEMAND_ACTUAL_FORECAST_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.VwIvldDemandForecastActual"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.VwIvldDemandForecastActual"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.VwIvldDemandForecastActual"));

	public VwIvldDemandForecastActualModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _ivldDemandActualForecastSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setIvldDemandActualForecastSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ivldDemandActualForecastSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VwIvldDemandForecastActual.class;
	}

	@Override
	public String getModelClassName() {
		return VwIvldDemandForecastActual.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("demandIntSid", getDemandIntSid());
		attributes.put("forecastYear", getForecastYear());
		attributes.put("grossUnits", getGrossUnits());
		attributes.put("businessUnitNo", getBusinessUnitNo());
		attributes.put("totalDemandUnits", getTotalDemandUnits());
		attributes.put("brandName", getBrandName());
		attributes.put("itemId", getItemId());
		attributes.put("organizationKey", getOrganizationKey());
		attributes.put("source", getSource());
		attributes.put("marketShareRatio", getMarketShareRatio());
		attributes.put("ivldDemandActualForecastSid",
			getIvldDemandActualForecastSid());
		attributes.put("businessUnitName", getBusinessUnitName());
		attributes.put("addChgDelIndicator", getAddChgDelIndicator());
		attributes.put("errorCode", getErrorCode());
		attributes.put("marketShareUnits", getMarketShareUnits());
		attributes.put("inventoryUnitChange", getInventoryUnitChange());
		attributes.put("reprocessedFlag", getReprocessedFlag());
		attributes.put("uncapturedUnitsRatio", getUncapturedUnitsRatio());
		attributes.put("reasonForFailure", getReasonForFailure());
		attributes.put("country", getCountry());
		attributes.put("forecastType", getForecastType());
		attributes.put("brandId", getBrandId());
		attributes.put("isForecast", getIsForecast());
		attributes.put("uncapturedUnits", getUncapturedUnits());
		attributes.put("grossPrice", getGrossPrice());
		attributes.put("isActive", getIsActive());
		attributes.put("grossAmount", getGrossAmount());
		attributes.put("batchId", getBatchId());
		attributes.put("forecastVer", getForecastVer());
		attributes.put("itemName", getItemName());
		attributes.put("forecastMonth", getForecastMonth());
		attributes.put("errorField", getErrorField());
		attributes.put("netSalesPrice", getNetSalesPrice());
		attributes.put("netSalesAmount", getNetSalesAmount());
		attributes.put("segment", getSegment());
		attributes.put("totalDemandAmount", getTotalDemandAmount());
		attributes.put("forecastName", getForecastName());
		attributes.put("marketSizeUnits", getMarketSizeUnits());
		attributes.put("checkRecord", getCheckRecord());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String demandIntSid = (String)attributes.get("demandIntSid");

		if (demandIntSid != null) {
			setDemandIntSid(demandIntSid);
		}

		String forecastYear = (String)attributes.get("forecastYear");

		if (forecastYear != null) {
			setForecastYear(forecastYear);
		}

		String grossUnits = (String)attributes.get("grossUnits");

		if (grossUnits != null) {
			setGrossUnits(grossUnits);
		}

		String businessUnitNo = (String)attributes.get("businessUnitNo");

		if (businessUnitNo != null) {
			setBusinessUnitNo(businessUnitNo);
		}

		String totalDemandUnits = (String)attributes.get("totalDemandUnits");

		if (totalDemandUnits != null) {
			setTotalDemandUnits(totalDemandUnits);
		}

		String brandName = (String)attributes.get("brandName");

		if (brandName != null) {
			setBrandName(brandName);
		}

		String itemId = (String)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		String organizationKey = (String)attributes.get("organizationKey");

		if (organizationKey != null) {
			setOrganizationKey(organizationKey);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String marketShareRatio = (String)attributes.get("marketShareRatio");

		if (marketShareRatio != null) {
			setMarketShareRatio(marketShareRatio);
		}

		Integer ivldDemandActualForecastSid = (Integer)attributes.get(
				"ivldDemandActualForecastSid");

		if (ivldDemandActualForecastSid != null) {
			setIvldDemandActualForecastSid(ivldDemandActualForecastSid);
		}

		String businessUnitName = (String)attributes.get("businessUnitName");

		if (businessUnitName != null) {
			setBusinessUnitName(businessUnitName);
		}

		String addChgDelIndicator = (String)attributes.get("addChgDelIndicator");

		if (addChgDelIndicator != null) {
			setAddChgDelIndicator(addChgDelIndicator);
		}

		String errorCode = (String)attributes.get("errorCode");

		if (errorCode != null) {
			setErrorCode(errorCode);
		}

		String marketShareUnits = (String)attributes.get("marketShareUnits");

		if (marketShareUnits != null) {
			setMarketShareUnits(marketShareUnits);
		}

		String inventoryUnitChange = (String)attributes.get(
				"inventoryUnitChange");

		if (inventoryUnitChange != null) {
			setInventoryUnitChange(inventoryUnitChange);
		}

		String reprocessedFlag = (String)attributes.get("reprocessedFlag");

		if (reprocessedFlag != null) {
			setReprocessedFlag(reprocessedFlag);
		}

		String uncapturedUnitsRatio = (String)attributes.get(
				"uncapturedUnitsRatio");

		if (uncapturedUnitsRatio != null) {
			setUncapturedUnitsRatio(uncapturedUnitsRatio);
		}

		String reasonForFailure = (String)attributes.get("reasonForFailure");

		if (reasonForFailure != null) {
			setReasonForFailure(reasonForFailure);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		String forecastType = (String)attributes.get("forecastType");

		if (forecastType != null) {
			setForecastType(forecastType);
		}

		String brandId = (String)attributes.get("brandId");

		if (brandId != null) {
			setBrandId(brandId);
		}

		String isForecast = (String)attributes.get("isForecast");

		if (isForecast != null) {
			setIsForecast(isForecast);
		}

		String uncapturedUnits = (String)attributes.get("uncapturedUnits");

		if (uncapturedUnits != null) {
			setUncapturedUnits(uncapturedUnits);
		}

		String grossPrice = (String)attributes.get("grossPrice");

		if (grossPrice != null) {
			setGrossPrice(grossPrice);
		}

		String isActive = (String)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}

		String grossAmount = (String)attributes.get("grossAmount");

		if (grossAmount != null) {
			setGrossAmount(grossAmount);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		String forecastVer = (String)attributes.get("forecastVer");

		if (forecastVer != null) {
			setForecastVer(forecastVer);
		}

		String itemName = (String)attributes.get("itemName");

		if (itemName != null) {
			setItemName(itemName);
		}

		String forecastMonth = (String)attributes.get("forecastMonth");

		if (forecastMonth != null) {
			setForecastMonth(forecastMonth);
		}

		String errorField = (String)attributes.get("errorField");

		if (errorField != null) {
			setErrorField(errorField);
		}

		String netSalesPrice = (String)attributes.get("netSalesPrice");

		if (netSalesPrice != null) {
			setNetSalesPrice(netSalesPrice);
		}

		String netSalesAmount = (String)attributes.get("netSalesAmount");

		if (netSalesAmount != null) {
			setNetSalesAmount(netSalesAmount);
		}

		String segment = (String)attributes.get("segment");

		if (segment != null) {
			setSegment(segment);
		}

		String totalDemandAmount = (String)attributes.get("totalDemandAmount");

		if (totalDemandAmount != null) {
			setTotalDemandAmount(totalDemandAmount);
		}

		String forecastName = (String)attributes.get("forecastName");

		if (forecastName != null) {
			setForecastName(forecastName);
		}

		String marketSizeUnits = (String)attributes.get("marketSizeUnits");

		if (marketSizeUnits != null) {
			setMarketSizeUnits(marketSizeUnits);
		}

		Boolean checkRecord = (Boolean)attributes.get("checkRecord");

		if (checkRecord != null) {
			setCheckRecord(checkRecord);
		}
	}

	@Override
	public String getDemandIntSid() {
		if (_demandIntSid == null) {
			return StringPool.BLANK;
		}
		else {
			return _demandIntSid;
		}
	}

	@Override
	public void setDemandIntSid(String demandIntSid) {
		_demandIntSid = demandIntSid;
	}

	@Override
	public String getForecastYear() {
		if (_forecastYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastYear;
		}
	}

	@Override
	public void setForecastYear(String forecastYear) {
		_forecastYear = forecastYear;
	}

	@Override
	public String getGrossUnits() {
		if (_grossUnits == null) {
			return StringPool.BLANK;
		}
		else {
			return _grossUnits;
		}
	}

	@Override
	public void setGrossUnits(String grossUnits) {
		_grossUnits = grossUnits;
	}

	@Override
	public String getBusinessUnitNo() {
		if (_businessUnitNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessUnitNo;
		}
	}

	@Override
	public void setBusinessUnitNo(String businessUnitNo) {
		_businessUnitNo = businessUnitNo;
	}

	@Override
	public String getTotalDemandUnits() {
		if (_totalDemandUnits == null) {
			return StringPool.BLANK;
		}
		else {
			return _totalDemandUnits;
		}
	}

	@Override
	public void setTotalDemandUnits(String totalDemandUnits) {
		_totalDemandUnits = totalDemandUnits;
	}

	@Override
	public String getBrandName() {
		if (_brandName == null) {
			return StringPool.BLANK;
		}
		else {
			return _brandName;
		}
	}

	@Override
	public void setBrandName(String brandName) {
		_brandName = brandName;
	}

	@Override
	public String getItemId() {
		if (_itemId == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemId;
		}
	}

	@Override
	public void setItemId(String itemId) {
		_itemId = itemId;
	}

	@Override
	public String getOrganizationKey() {
		if (_organizationKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _organizationKey;
		}
	}

	@Override
	public void setOrganizationKey(String organizationKey) {
		_organizationKey = organizationKey;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getMarketShareRatio() {
		if (_marketShareRatio == null) {
			return StringPool.BLANK;
		}
		else {
			return _marketShareRatio;
		}
	}

	@Override
	public void setMarketShareRatio(String marketShareRatio) {
		_marketShareRatio = marketShareRatio;
	}

	@Override
	public int getIvldDemandActualForecastSid() {
		return _ivldDemandActualForecastSid;
	}

	@Override
	public void setIvldDemandActualForecastSid(int ivldDemandActualForecastSid) {
		_ivldDemandActualForecastSid = ivldDemandActualForecastSid;
	}

	@Override
	public String getBusinessUnitName() {
		if (_businessUnitName == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessUnitName;
		}
	}

	@Override
	public void setBusinessUnitName(String businessUnitName) {
		_businessUnitName = businessUnitName;
	}

	@Override
	public String getAddChgDelIndicator() {
		if (_addChgDelIndicator == null) {
			return StringPool.BLANK;
		}
		else {
			return _addChgDelIndicator;
		}
	}

	@Override
	public void setAddChgDelIndicator(String addChgDelIndicator) {
		_addChgDelIndicator = addChgDelIndicator;
	}

	@Override
	public String getErrorCode() {
		if (_errorCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _errorCode;
		}
	}

	@Override
	public void setErrorCode(String errorCode) {
		_errorCode = errorCode;
	}

	@Override
	public String getMarketShareUnits() {
		if (_marketShareUnits == null) {
			return StringPool.BLANK;
		}
		else {
			return _marketShareUnits;
		}
	}

	@Override
	public void setMarketShareUnits(String marketShareUnits) {
		_marketShareUnits = marketShareUnits;
	}

	@Override
	public String getInventoryUnitChange() {
		if (_inventoryUnitChange == null) {
			return StringPool.BLANK;
		}
		else {
			return _inventoryUnitChange;
		}
	}

	@Override
	public void setInventoryUnitChange(String inventoryUnitChange) {
		_inventoryUnitChange = inventoryUnitChange;
	}

	@Override
	public String getReprocessedFlag() {
		if (_reprocessedFlag == null) {
			return StringPool.BLANK;
		}
		else {
			return _reprocessedFlag;
		}
	}

	@Override
	public void setReprocessedFlag(String reprocessedFlag) {
		_reprocessedFlag = reprocessedFlag;
	}

	@Override
	public String getUncapturedUnitsRatio() {
		if (_uncapturedUnitsRatio == null) {
			return StringPool.BLANK;
		}
		else {
			return _uncapturedUnitsRatio;
		}
	}

	@Override
	public void setUncapturedUnitsRatio(String uncapturedUnitsRatio) {
		_uncapturedUnitsRatio = uncapturedUnitsRatio;
	}

	@Override
	public String getReasonForFailure() {
		if (_reasonForFailure == null) {
			return StringPool.BLANK;
		}
		else {
			return _reasonForFailure;
		}
	}

	@Override
	public void setReasonForFailure(String reasonForFailure) {
		_reasonForFailure = reasonForFailure;
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public String getForecastType() {
		if (_forecastType == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastType;
		}
	}

	@Override
	public void setForecastType(String forecastType) {
		_forecastType = forecastType;
	}

	@Override
	public String getBrandId() {
		if (_brandId == null) {
			return StringPool.BLANK;
		}
		else {
			return _brandId;
		}
	}

	@Override
	public void setBrandId(String brandId) {
		_brandId = brandId;
	}

	@Override
	public String getIsForecast() {
		if (_isForecast == null) {
			return StringPool.BLANK;
		}
		else {
			return _isForecast;
		}
	}

	@Override
	public void setIsForecast(String isForecast) {
		_isForecast = isForecast;
	}

	@Override
	public String getUncapturedUnits() {
		if (_uncapturedUnits == null) {
			return StringPool.BLANK;
		}
		else {
			return _uncapturedUnits;
		}
	}

	@Override
	public void setUncapturedUnits(String uncapturedUnits) {
		_uncapturedUnits = uncapturedUnits;
	}

	@Override
	public String getGrossPrice() {
		if (_grossPrice == null) {
			return StringPool.BLANK;
		}
		else {
			return _grossPrice;
		}
	}

	@Override
	public void setGrossPrice(String grossPrice) {
		_grossPrice = grossPrice;
	}

	@Override
	public String getIsActive() {
		if (_isActive == null) {
			return StringPool.BLANK;
		}
		else {
			return _isActive;
		}
	}

	@Override
	public void setIsActive(String isActive) {
		_isActive = isActive;
	}

	@Override
	public String getGrossAmount() {
		if (_grossAmount == null) {
			return StringPool.BLANK;
		}
		else {
			return _grossAmount;
		}
	}

	@Override
	public void setGrossAmount(String grossAmount) {
		_grossAmount = grossAmount;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public String getForecastVer() {
		if (_forecastVer == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastVer;
		}
	}

	@Override
	public void setForecastVer(String forecastVer) {
		_forecastVer = forecastVer;
	}

	@Override
	public String getItemName() {
		if (_itemName == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemName;
		}
	}

	@Override
	public void setItemName(String itemName) {
		_itemName = itemName;
	}

	@Override
	public String getForecastMonth() {
		if (_forecastMonth == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastMonth;
		}
	}

	@Override
	public void setForecastMonth(String forecastMonth) {
		_forecastMonth = forecastMonth;
	}

	@Override
	public String getErrorField() {
		if (_errorField == null) {
			return StringPool.BLANK;
		}
		else {
			return _errorField;
		}
	}

	@Override
	public void setErrorField(String errorField) {
		_errorField = errorField;
	}

	@Override
	public String getNetSalesPrice() {
		if (_netSalesPrice == null) {
			return StringPool.BLANK;
		}
		else {
			return _netSalesPrice;
		}
	}

	@Override
	public void setNetSalesPrice(String netSalesPrice) {
		_netSalesPrice = netSalesPrice;
	}

	@Override
	public String getNetSalesAmount() {
		if (_netSalesAmount == null) {
			return StringPool.BLANK;
		}
		else {
			return _netSalesAmount;
		}
	}

	@Override
	public void setNetSalesAmount(String netSalesAmount) {
		_netSalesAmount = netSalesAmount;
	}

	@Override
	public String getSegment() {
		if (_segment == null) {
			return StringPool.BLANK;
		}
		else {
			return _segment;
		}
	}

	@Override
	public void setSegment(String segment) {
		_segment = segment;
	}

	@Override
	public String getTotalDemandAmount() {
		if (_totalDemandAmount == null) {
			return StringPool.BLANK;
		}
		else {
			return _totalDemandAmount;
		}
	}

	@Override
	public void setTotalDemandAmount(String totalDemandAmount) {
		_totalDemandAmount = totalDemandAmount;
	}

	@Override
	public String getForecastName() {
		if (_forecastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastName;
		}
	}

	@Override
	public void setForecastName(String forecastName) {
		_forecastName = forecastName;
	}

	@Override
	public String getMarketSizeUnits() {
		if (_marketSizeUnits == null) {
			return StringPool.BLANK;
		}
		else {
			return _marketSizeUnits;
		}
	}

	@Override
	public void setMarketSizeUnits(String marketSizeUnits) {
		_marketSizeUnits = marketSizeUnits;
	}

	@Override
	public boolean getCheckRecord() {
		return _checkRecord;
	}

	@Override
	public boolean isCheckRecord() {
		return _checkRecord;
	}

	@Override
	public void setCheckRecord(boolean checkRecord) {
		_checkRecord = checkRecord;
	}

	@Override
	public VwIvldDemandForecastActual toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VwIvldDemandForecastActual)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VwIvldDemandForecastActualImpl vwIvldDemandForecastActualImpl = new VwIvldDemandForecastActualImpl();

		vwIvldDemandForecastActualImpl.setDemandIntSid(getDemandIntSid());
		vwIvldDemandForecastActualImpl.setForecastYear(getForecastYear());
		vwIvldDemandForecastActualImpl.setGrossUnits(getGrossUnits());
		vwIvldDemandForecastActualImpl.setBusinessUnitNo(getBusinessUnitNo());
		vwIvldDemandForecastActualImpl.setTotalDemandUnits(getTotalDemandUnits());
		vwIvldDemandForecastActualImpl.setBrandName(getBrandName());
		vwIvldDemandForecastActualImpl.setItemId(getItemId());
		vwIvldDemandForecastActualImpl.setOrganizationKey(getOrganizationKey());
		vwIvldDemandForecastActualImpl.setSource(getSource());
		vwIvldDemandForecastActualImpl.setMarketShareRatio(getMarketShareRatio());
		vwIvldDemandForecastActualImpl.setIvldDemandActualForecastSid(getIvldDemandActualForecastSid());
		vwIvldDemandForecastActualImpl.setBusinessUnitName(getBusinessUnitName());
		vwIvldDemandForecastActualImpl.setAddChgDelIndicator(getAddChgDelIndicator());
		vwIvldDemandForecastActualImpl.setErrorCode(getErrorCode());
		vwIvldDemandForecastActualImpl.setMarketShareUnits(getMarketShareUnits());
		vwIvldDemandForecastActualImpl.setInventoryUnitChange(getInventoryUnitChange());
		vwIvldDemandForecastActualImpl.setReprocessedFlag(getReprocessedFlag());
		vwIvldDemandForecastActualImpl.setUncapturedUnitsRatio(getUncapturedUnitsRatio());
		vwIvldDemandForecastActualImpl.setReasonForFailure(getReasonForFailure());
		vwIvldDemandForecastActualImpl.setCountry(getCountry());
		vwIvldDemandForecastActualImpl.setForecastType(getForecastType());
		vwIvldDemandForecastActualImpl.setBrandId(getBrandId());
		vwIvldDemandForecastActualImpl.setIsForecast(getIsForecast());
		vwIvldDemandForecastActualImpl.setUncapturedUnits(getUncapturedUnits());
		vwIvldDemandForecastActualImpl.setGrossPrice(getGrossPrice());
		vwIvldDemandForecastActualImpl.setIsActive(getIsActive());
		vwIvldDemandForecastActualImpl.setGrossAmount(getGrossAmount());
		vwIvldDemandForecastActualImpl.setBatchId(getBatchId());
		vwIvldDemandForecastActualImpl.setForecastVer(getForecastVer());
		vwIvldDemandForecastActualImpl.setItemName(getItemName());
		vwIvldDemandForecastActualImpl.setForecastMonth(getForecastMonth());
		vwIvldDemandForecastActualImpl.setErrorField(getErrorField());
		vwIvldDemandForecastActualImpl.setNetSalesPrice(getNetSalesPrice());
		vwIvldDemandForecastActualImpl.setNetSalesAmount(getNetSalesAmount());
		vwIvldDemandForecastActualImpl.setSegment(getSegment());
		vwIvldDemandForecastActualImpl.setTotalDemandAmount(getTotalDemandAmount());
		vwIvldDemandForecastActualImpl.setForecastName(getForecastName());
		vwIvldDemandForecastActualImpl.setMarketSizeUnits(getMarketSizeUnits());
		vwIvldDemandForecastActualImpl.setCheckRecord(getCheckRecord());

		vwIvldDemandForecastActualImpl.resetOriginalValues();

		return vwIvldDemandForecastActualImpl;
	}

	@Override
	public int compareTo(VwIvldDemandForecastActual vwIvldDemandForecastActual) {
		int primaryKey = vwIvldDemandForecastActual.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VwIvldDemandForecastActual)) {
			return false;
		}

		VwIvldDemandForecastActual vwIvldDemandForecastActual = (VwIvldDemandForecastActual)obj;

		int primaryKey = vwIvldDemandForecastActual.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<VwIvldDemandForecastActual> toCacheModel() {
		VwIvldDemandForecastActualCacheModel vwIvldDemandForecastActualCacheModel =
			new VwIvldDemandForecastActualCacheModel();

		vwIvldDemandForecastActualCacheModel.demandIntSid = getDemandIntSid();

		String demandIntSid = vwIvldDemandForecastActualCacheModel.demandIntSid;

		if ((demandIntSid != null) && (demandIntSid.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.demandIntSid = null;
		}

		vwIvldDemandForecastActualCacheModel.forecastYear = getForecastYear();

		String forecastYear = vwIvldDemandForecastActualCacheModel.forecastYear;

		if ((forecastYear != null) && (forecastYear.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.forecastYear = null;
		}

		vwIvldDemandForecastActualCacheModel.grossUnits = getGrossUnits();

		String grossUnits = vwIvldDemandForecastActualCacheModel.grossUnits;

		if ((grossUnits != null) && (grossUnits.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.grossUnits = null;
		}

		vwIvldDemandForecastActualCacheModel.businessUnitNo = getBusinessUnitNo();

		String businessUnitNo = vwIvldDemandForecastActualCacheModel.businessUnitNo;

		if ((businessUnitNo != null) && (businessUnitNo.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.businessUnitNo = null;
		}

		vwIvldDemandForecastActualCacheModel.totalDemandUnits = getTotalDemandUnits();

		String totalDemandUnits = vwIvldDemandForecastActualCacheModel.totalDemandUnits;

		if ((totalDemandUnits != null) && (totalDemandUnits.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.totalDemandUnits = null;
		}

		vwIvldDemandForecastActualCacheModel.brandName = getBrandName();

		String brandName = vwIvldDemandForecastActualCacheModel.brandName;

		if ((brandName != null) && (brandName.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.brandName = null;
		}

		vwIvldDemandForecastActualCacheModel.itemId = getItemId();

		String itemId = vwIvldDemandForecastActualCacheModel.itemId;

		if ((itemId != null) && (itemId.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.itemId = null;
		}

		vwIvldDemandForecastActualCacheModel.organizationKey = getOrganizationKey();

		String organizationKey = vwIvldDemandForecastActualCacheModel.organizationKey;

		if ((organizationKey != null) && (organizationKey.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.organizationKey = null;
		}

		vwIvldDemandForecastActualCacheModel.source = getSource();

		String source = vwIvldDemandForecastActualCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.source = null;
		}

		vwIvldDemandForecastActualCacheModel.marketShareRatio = getMarketShareRatio();

		String marketShareRatio = vwIvldDemandForecastActualCacheModel.marketShareRatio;

		if ((marketShareRatio != null) && (marketShareRatio.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.marketShareRatio = null;
		}

		vwIvldDemandForecastActualCacheModel.ivldDemandActualForecastSid = getIvldDemandActualForecastSid();

		vwIvldDemandForecastActualCacheModel.businessUnitName = getBusinessUnitName();

		String businessUnitName = vwIvldDemandForecastActualCacheModel.businessUnitName;

		if ((businessUnitName != null) && (businessUnitName.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.businessUnitName = null;
		}

		vwIvldDemandForecastActualCacheModel.addChgDelIndicator = getAddChgDelIndicator();

		String addChgDelIndicator = vwIvldDemandForecastActualCacheModel.addChgDelIndicator;

		if ((addChgDelIndicator != null) && (addChgDelIndicator.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.addChgDelIndicator = null;
		}

		vwIvldDemandForecastActualCacheModel.errorCode = getErrorCode();

		String errorCode = vwIvldDemandForecastActualCacheModel.errorCode;

		if ((errorCode != null) && (errorCode.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.errorCode = null;
		}

		vwIvldDemandForecastActualCacheModel.marketShareUnits = getMarketShareUnits();

		String marketShareUnits = vwIvldDemandForecastActualCacheModel.marketShareUnits;

		if ((marketShareUnits != null) && (marketShareUnits.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.marketShareUnits = null;
		}

		vwIvldDemandForecastActualCacheModel.inventoryUnitChange = getInventoryUnitChange();

		String inventoryUnitChange = vwIvldDemandForecastActualCacheModel.inventoryUnitChange;

		if ((inventoryUnitChange != null) &&
				(inventoryUnitChange.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.inventoryUnitChange = null;
		}

		vwIvldDemandForecastActualCacheModel.reprocessedFlag = getReprocessedFlag();

		String reprocessedFlag = vwIvldDemandForecastActualCacheModel.reprocessedFlag;

		if ((reprocessedFlag != null) && (reprocessedFlag.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.reprocessedFlag = null;
		}

		vwIvldDemandForecastActualCacheModel.uncapturedUnitsRatio = getUncapturedUnitsRatio();

		String uncapturedUnitsRatio = vwIvldDemandForecastActualCacheModel.uncapturedUnitsRatio;

		if ((uncapturedUnitsRatio != null) &&
				(uncapturedUnitsRatio.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.uncapturedUnitsRatio = null;
		}

		vwIvldDemandForecastActualCacheModel.reasonForFailure = getReasonForFailure();

		String reasonForFailure = vwIvldDemandForecastActualCacheModel.reasonForFailure;

		if ((reasonForFailure != null) && (reasonForFailure.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.reasonForFailure = null;
		}

		vwIvldDemandForecastActualCacheModel.country = getCountry();

		String country = vwIvldDemandForecastActualCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.country = null;
		}

		vwIvldDemandForecastActualCacheModel.forecastType = getForecastType();

		String forecastType = vwIvldDemandForecastActualCacheModel.forecastType;

		if ((forecastType != null) && (forecastType.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.forecastType = null;
		}

		vwIvldDemandForecastActualCacheModel.brandId = getBrandId();

		String brandId = vwIvldDemandForecastActualCacheModel.brandId;

		if ((brandId != null) && (brandId.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.brandId = null;
		}

		vwIvldDemandForecastActualCacheModel.isForecast = getIsForecast();

		String isForecast = vwIvldDemandForecastActualCacheModel.isForecast;

		if ((isForecast != null) && (isForecast.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.isForecast = null;
		}

		vwIvldDemandForecastActualCacheModel.uncapturedUnits = getUncapturedUnits();

		String uncapturedUnits = vwIvldDemandForecastActualCacheModel.uncapturedUnits;

		if ((uncapturedUnits != null) && (uncapturedUnits.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.uncapturedUnits = null;
		}

		vwIvldDemandForecastActualCacheModel.grossPrice = getGrossPrice();

		String grossPrice = vwIvldDemandForecastActualCacheModel.grossPrice;

		if ((grossPrice != null) && (grossPrice.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.grossPrice = null;
		}

		vwIvldDemandForecastActualCacheModel.isActive = getIsActive();

		String isActive = vwIvldDemandForecastActualCacheModel.isActive;

		if ((isActive != null) && (isActive.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.isActive = null;
		}

		vwIvldDemandForecastActualCacheModel.grossAmount = getGrossAmount();

		String grossAmount = vwIvldDemandForecastActualCacheModel.grossAmount;

		if ((grossAmount != null) && (grossAmount.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.grossAmount = null;
		}

		vwIvldDemandForecastActualCacheModel.batchId = getBatchId();

		String batchId = vwIvldDemandForecastActualCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.batchId = null;
		}

		vwIvldDemandForecastActualCacheModel.forecastVer = getForecastVer();

		String forecastVer = vwIvldDemandForecastActualCacheModel.forecastVer;

		if ((forecastVer != null) && (forecastVer.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.forecastVer = null;
		}

		vwIvldDemandForecastActualCacheModel.itemName = getItemName();

		String itemName = vwIvldDemandForecastActualCacheModel.itemName;

		if ((itemName != null) && (itemName.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.itemName = null;
		}

		vwIvldDemandForecastActualCacheModel.forecastMonth = getForecastMonth();

		String forecastMonth = vwIvldDemandForecastActualCacheModel.forecastMonth;

		if ((forecastMonth != null) && (forecastMonth.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.forecastMonth = null;
		}

		vwIvldDemandForecastActualCacheModel.errorField = getErrorField();

		String errorField = vwIvldDemandForecastActualCacheModel.errorField;

		if ((errorField != null) && (errorField.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.errorField = null;
		}

		vwIvldDemandForecastActualCacheModel.netSalesPrice = getNetSalesPrice();

		String netSalesPrice = vwIvldDemandForecastActualCacheModel.netSalesPrice;

		if ((netSalesPrice != null) && (netSalesPrice.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.netSalesPrice = null;
		}

		vwIvldDemandForecastActualCacheModel.netSalesAmount = getNetSalesAmount();

		String netSalesAmount = vwIvldDemandForecastActualCacheModel.netSalesAmount;

		if ((netSalesAmount != null) && (netSalesAmount.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.netSalesAmount = null;
		}

		vwIvldDemandForecastActualCacheModel.segment = getSegment();

		String segment = vwIvldDemandForecastActualCacheModel.segment;

		if ((segment != null) && (segment.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.segment = null;
		}

		vwIvldDemandForecastActualCacheModel.totalDemandAmount = getTotalDemandAmount();

		String totalDemandAmount = vwIvldDemandForecastActualCacheModel.totalDemandAmount;

		if ((totalDemandAmount != null) && (totalDemandAmount.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.totalDemandAmount = null;
		}

		vwIvldDemandForecastActualCacheModel.forecastName = getForecastName();

		String forecastName = vwIvldDemandForecastActualCacheModel.forecastName;

		if ((forecastName != null) && (forecastName.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.forecastName = null;
		}

		vwIvldDemandForecastActualCacheModel.marketSizeUnits = getMarketSizeUnits();

		String marketSizeUnits = vwIvldDemandForecastActualCacheModel.marketSizeUnits;

		if ((marketSizeUnits != null) && (marketSizeUnits.length() == 0)) {
			vwIvldDemandForecastActualCacheModel.marketSizeUnits = null;
		}

		vwIvldDemandForecastActualCacheModel.checkRecord = getCheckRecord();

		return vwIvldDemandForecastActualCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(79);

		sb.append("{demandIntSid=");
		sb.append(getDemandIntSid());
		sb.append(", forecastYear=");
		sb.append(getForecastYear());
		sb.append(", grossUnits=");
		sb.append(getGrossUnits());
		sb.append(", businessUnitNo=");
		sb.append(getBusinessUnitNo());
		sb.append(", totalDemandUnits=");
		sb.append(getTotalDemandUnits());
		sb.append(", brandName=");
		sb.append(getBrandName());
		sb.append(", itemId=");
		sb.append(getItemId());
		sb.append(", organizationKey=");
		sb.append(getOrganizationKey());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", marketShareRatio=");
		sb.append(getMarketShareRatio());
		sb.append(", ivldDemandActualForecastSid=");
		sb.append(getIvldDemandActualForecastSid());
		sb.append(", businessUnitName=");
		sb.append(getBusinessUnitName());
		sb.append(", addChgDelIndicator=");
		sb.append(getAddChgDelIndicator());
		sb.append(", errorCode=");
		sb.append(getErrorCode());
		sb.append(", marketShareUnits=");
		sb.append(getMarketShareUnits());
		sb.append(", inventoryUnitChange=");
		sb.append(getInventoryUnitChange());
		sb.append(", reprocessedFlag=");
		sb.append(getReprocessedFlag());
		sb.append(", uncapturedUnitsRatio=");
		sb.append(getUncapturedUnitsRatio());
		sb.append(", reasonForFailure=");
		sb.append(getReasonForFailure());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", forecastType=");
		sb.append(getForecastType());
		sb.append(", brandId=");
		sb.append(getBrandId());
		sb.append(", isForecast=");
		sb.append(getIsForecast());
		sb.append(", uncapturedUnits=");
		sb.append(getUncapturedUnits());
		sb.append(", grossPrice=");
		sb.append(getGrossPrice());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append(", grossAmount=");
		sb.append(getGrossAmount());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", forecastVer=");
		sb.append(getForecastVer());
		sb.append(", itemName=");
		sb.append(getItemName());
		sb.append(", forecastMonth=");
		sb.append(getForecastMonth());
		sb.append(", errorField=");
		sb.append(getErrorField());
		sb.append(", netSalesPrice=");
		sb.append(getNetSalesPrice());
		sb.append(", netSalesAmount=");
		sb.append(getNetSalesAmount());
		sb.append(", segment=");
		sb.append(getSegment());
		sb.append(", totalDemandAmount=");
		sb.append(getTotalDemandAmount());
		sb.append(", forecastName=");
		sb.append(getForecastName());
		sb.append(", marketSizeUnits=");
		sb.append(getMarketSizeUnits());
		sb.append(", checkRecord=");
		sb.append(getCheckRecord());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(121);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.VwIvldDemandForecastActual");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>demandIntSid</column-name><column-value><![CDATA[");
		sb.append(getDemandIntSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastYear</column-name><column-value><![CDATA[");
		sb.append(getForecastYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossUnits</column-name><column-value><![CDATA[");
		sb.append(getGrossUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessUnitNo</column-name><column-value><![CDATA[");
		sb.append(getBusinessUnitNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalDemandUnits</column-name><column-value><![CDATA[");
		sb.append(getTotalDemandUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brandName</column-name><column-value><![CDATA[");
		sb.append(getBrandName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationKey</column-name><column-value><![CDATA[");
		sb.append(getOrganizationKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketShareRatio</column-name><column-value><![CDATA[");
		sb.append(getMarketShareRatio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ivldDemandActualForecastSid</column-name><column-value><![CDATA[");
		sb.append(getIvldDemandActualForecastSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessUnitName</column-name><column-value><![CDATA[");
		sb.append(getBusinessUnitName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addChgDelIndicator</column-name><column-value><![CDATA[");
		sb.append(getAddChgDelIndicator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorCode</column-name><column-value><![CDATA[");
		sb.append(getErrorCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketShareUnits</column-name><column-value><![CDATA[");
		sb.append(getMarketShareUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inventoryUnitChange</column-name><column-value><![CDATA[");
		sb.append(getInventoryUnitChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reprocessedFlag</column-name><column-value><![CDATA[");
		sb.append(getReprocessedFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uncapturedUnitsRatio</column-name><column-value><![CDATA[");
		sb.append(getUncapturedUnitsRatio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reasonForFailure</column-name><column-value><![CDATA[");
		sb.append(getReasonForFailure());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastType</column-name><column-value><![CDATA[");
		sb.append(getForecastType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brandId</column-name><column-value><![CDATA[");
		sb.append(getBrandId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isForecast</column-name><column-value><![CDATA[");
		sb.append(getIsForecast());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uncapturedUnits</column-name><column-value><![CDATA[");
		sb.append(getUncapturedUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossPrice</column-name><column-value><![CDATA[");
		sb.append(getGrossPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossAmount</column-name><column-value><![CDATA[");
		sb.append(getGrossAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastVer</column-name><column-value><![CDATA[");
		sb.append(getForecastVer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemName</column-name><column-value><![CDATA[");
		sb.append(getItemName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastMonth</column-name><column-value><![CDATA[");
		sb.append(getForecastMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorField</column-name><column-value><![CDATA[");
		sb.append(getErrorField());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSalesPrice</column-name><column-value><![CDATA[");
		sb.append(getNetSalesPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSalesAmount</column-name><column-value><![CDATA[");
		sb.append(getNetSalesAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>segment</column-name><column-value><![CDATA[");
		sb.append(getSegment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalDemandAmount</column-name><column-value><![CDATA[");
		sb.append(getTotalDemandAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastName</column-name><column-value><![CDATA[");
		sb.append(getForecastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketSizeUnits</column-name><column-value><![CDATA[");
		sb.append(getMarketSizeUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkRecord</column-name><column-value><![CDATA[");
		sb.append(getCheckRecord());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VwIvldDemandForecastActual.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VwIvldDemandForecastActual.class
		};
	private String _demandIntSid;
	private String _forecastYear;
	private String _grossUnits;
	private String _businessUnitNo;
	private String _totalDemandUnits;
	private String _brandName;
	private String _itemId;
	private String _organizationKey;
	private String _source;
	private String _marketShareRatio;
	private int _ivldDemandActualForecastSid;
	private String _businessUnitName;
	private String _addChgDelIndicator;
	private String _errorCode;
	private String _marketShareUnits;
	private String _inventoryUnitChange;
	private String _reprocessedFlag;
	private String _uncapturedUnitsRatio;
	private String _reasonForFailure;
	private String _country;
	private String _forecastType;
	private String _brandId;
	private String _isForecast;
	private String _uncapturedUnits;
	private String _grossPrice;
	private String _isActive;
	private String _grossAmount;
	private String _batchId;
	private String _forecastVer;
	private String _itemName;
	private String _forecastMonth;
	private String _errorField;
	private String _netSalesPrice;
	private String _netSalesAmount;
	private String _segment;
	private String _totalDemandAmount;
	private String _forecastName;
	private String _marketSizeUnits;
	private boolean _checkRecord;
	private VwIvldDemandForecastActual _escapedModel;
}