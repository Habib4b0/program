/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.stpl.app.model.StNmPpaProjection;
import com.stpl.app.model.StNmPpaProjectionModel;
import com.stpl.app.service.persistence.StNmPpaProjectionPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StNmPpaProjection service. Represents a row in the &quot;ST_NM_PPA_PROJECTION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link StNmPpaProjectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StNmPpaProjectionImpl}.
 * </p>
 *
 * @author
 * @see StNmPpaProjectionImpl
 * @see StNmPpaProjection
 * @see StNmPpaProjectionModel
 * @generated
 */
@ProviderType
public class StNmPpaProjectionModelImpl extends BaseModelImpl<StNmPpaProjection>
	implements StNmPpaProjectionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a st nm ppa projection model instance should use the {@link StNmPpaProjection} interface instead.
	 */
	public static final String TABLE_NAME = "ST_NM_PPA_PROJECTION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "LAST_MODIFIED_DATE", Types.TIMESTAMP },
			{ "PERIOD_SID", Types.INTEGER },
			{ "PROJECTION_RATE", Types.DOUBLE },
			{ "PROJECTION_DETAILS_SID", Types.INTEGER },
			{ "USER_ID", Types.INTEGER },
			{ "PRICE_CAP", Types.DOUBLE },
			{ "PROJECTION_DISCOUNT_UNITS", Types.DOUBLE },
			{ "SESSION_ID", Types.INTEGER },
			{ "PROJECTION_DISCOUNT_DOLLAR", Types.DOUBLE },
			{ "RESET", Types.BOOLEAN },
			{ "PROJECTION_SALES", Types.DOUBLE },
			{ "PROJECTION_MAP", Types.DOUBLE },
			{ "RESET_PRICE_CAP", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("LAST_MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PERIOD_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PROJECTION_RATE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PROJECTION_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("USER_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE_CAP", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PROJECTION_DISCOUNT_UNITS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("SESSION_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PROJECTION_DISCOUNT_DOLLAR", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("RESET", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("PROJECTION_SALES", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PROJECTION_MAP", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("RESET_PRICE_CAP", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table ST_NM_PPA_PROJECTION (LAST_MODIFIED_DATE DATE null,PERIOD_SID INTEGER not null IDENTITY,PROJECTION_RATE DOUBLE,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,USER_ID INTEGER not null,PRICE_CAP DOUBLE,PROJECTION_DISCOUNT_UNITS DOUBLE,SESSION_ID INTEGER not null,PROJECTION_DISCOUNT_DOLLAR DOUBLE,RESET BOOLEAN,PROJECTION_SALES DOUBLE,PROJECTION_MAP DOUBLE,RESET_PRICE_CAP BOOLEAN,primary key (PERIOD_SID, PROJECTION_DETAILS_SID, USER_ID, SESSION_ID))";
	public static final String TABLE_SQL_DROP = "drop table ST_NM_PPA_PROJECTION";
	public static final String ORDER_BY_JPQL = " ORDER BY stNmPpaProjection.id.periodSid ASC, stNmPpaProjection.id.projectionDetailsSid ASC, stNmPpaProjection.id.userId ASC, stNmPpaProjection.id.sessionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ST_NM_PPA_PROJECTION.PERIOD_SID ASC, ST_NM_PPA_PROJECTION.PROJECTION_DETAILS_SID ASC, ST_NM_PPA_PROJECTION.USER_ID ASC, ST_NM_PPA_PROJECTION.SESSION_ID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.StNmPpaProjection"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.StNmPpaProjection"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.StNmPpaProjection"));

	public StNmPpaProjectionModelImpl() {
	}

	@Override
	public StNmPpaProjectionPK getPrimaryKey() {
		return new StNmPpaProjectionPK(_periodSid, _projectionDetailsSid,
			_userId, _sessionId);
	}

	@Override
	public void setPrimaryKey(StNmPpaProjectionPK primaryKey) {
		setPeriodSid(primaryKey.periodSid);
		setProjectionDetailsSid(primaryKey.projectionDetailsSid);
		setUserId(primaryKey.userId);
		setSessionId(primaryKey.sessionId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new StNmPpaProjectionPK(_periodSid, _projectionDetailsSid,
			_userId, _sessionId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((StNmPpaProjectionPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return StNmPpaProjection.class;
	}

	@Override
	public String getModelClassName() {
		return StNmPpaProjection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lastModifiedDate", getLastModifiedDate());
		attributes.put("periodSid", getPeriodSid());
		attributes.put("projectionRate", getProjectionRate());
		attributes.put("projectionDetailsSid", getProjectionDetailsSid());
		attributes.put("userId", getUserId());
		attributes.put("priceCap", getPriceCap());
		attributes.put("projectionDiscountUnits", getProjectionDiscountUnits());
		attributes.put("sessionId", getSessionId());
		attributes.put("projectionDiscountDollar", getProjectionDiscountDollar());
		attributes.put("reset", getReset());
		attributes.put("projectionSales", getProjectionSales());
		attributes.put("projectionMap", getProjectionMap());
		attributes.put("resetPriceCap", getResetPriceCap());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date lastModifiedDate = (Date)attributes.get("lastModifiedDate");

		if (lastModifiedDate != null) {
			setLastModifiedDate(lastModifiedDate);
		}

		Integer periodSid = (Integer)attributes.get("periodSid");

		if (periodSid != null) {
			setPeriodSid(periodSid);
		}

		Double projectionRate = (Double)attributes.get("projectionRate");

		if (projectionRate != null) {
			setProjectionRate(projectionRate);
		}

		Integer projectionDetailsSid = (Integer)attributes.get(
				"projectionDetailsSid");

		if (projectionDetailsSid != null) {
			setProjectionDetailsSid(projectionDetailsSid);
		}

		Integer userId = (Integer)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Double priceCap = (Double)attributes.get("priceCap");

		if (priceCap != null) {
			setPriceCap(priceCap);
		}

		Double projectionDiscountUnits = (Double)attributes.get(
				"projectionDiscountUnits");

		if (projectionDiscountUnits != null) {
			setProjectionDiscountUnits(projectionDiscountUnits);
		}

		Integer sessionId = (Integer)attributes.get("sessionId");

		if (sessionId != null) {
			setSessionId(sessionId);
		}

		Double projectionDiscountDollar = (Double)attributes.get(
				"projectionDiscountDollar");

		if (projectionDiscountDollar != null) {
			setProjectionDiscountDollar(projectionDiscountDollar);
		}

		Boolean reset = (Boolean)attributes.get("reset");

		if (reset != null) {
			setReset(reset);
		}

		Double projectionSales = (Double)attributes.get("projectionSales");

		if (projectionSales != null) {
			setProjectionSales(projectionSales);
		}

		Double projectionMap = (Double)attributes.get("projectionMap");

		if (projectionMap != null) {
			setProjectionMap(projectionMap);
		}

		Boolean resetPriceCap = (Boolean)attributes.get("resetPriceCap");

		if (resetPriceCap != null) {
			setResetPriceCap(resetPriceCap);
		}
	}

	@Override
	public Date getLastModifiedDate() {
		return _lastModifiedDate;
	}

	@Override
	public void setLastModifiedDate(Date lastModifiedDate) {
		_lastModifiedDate = lastModifiedDate;
	}

	@Override
	public int getPeriodSid() {
		return _periodSid;
	}

	@Override
	public void setPeriodSid(int periodSid) {
		_periodSid = periodSid;
	}

	@Override
	public double getProjectionRate() {
		return _projectionRate;
	}

	@Override
	public void setProjectionRate(double projectionRate) {
		_projectionRate = projectionRate;
	}

	@Override
	public int getProjectionDetailsSid() {
		return _projectionDetailsSid;
	}

	@Override
	public void setProjectionDetailsSid(int projectionDetailsSid) {
		_projectionDetailsSid = projectionDetailsSid;
	}

	@Override
	public int getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(int userId) {
		_userId = userId;
	}

	@Override
	public double getPriceCap() {
		return _priceCap;
	}

	@Override
	public void setPriceCap(double priceCap) {
		_priceCap = priceCap;
	}

	@Override
	public double getProjectionDiscountUnits() {
		return _projectionDiscountUnits;
	}

	@Override
	public void setProjectionDiscountUnits(double projectionDiscountUnits) {
		_projectionDiscountUnits = projectionDiscountUnits;
	}

	@Override
	public int getSessionId() {
		return _sessionId;
	}

	@Override
	public void setSessionId(int sessionId) {
		_sessionId = sessionId;
	}

	@Override
	public double getProjectionDiscountDollar() {
		return _projectionDiscountDollar;
	}

	@Override
	public void setProjectionDiscountDollar(double projectionDiscountDollar) {
		_projectionDiscountDollar = projectionDiscountDollar;
	}

	@Override
	public boolean getReset() {
		return _reset;
	}

	@Override
	public boolean isReset() {
		return _reset;
	}

	@Override
	public void setReset(boolean reset) {
		_reset = reset;
	}

	@Override
	public double getProjectionSales() {
		return _projectionSales;
	}

	@Override
	public void setProjectionSales(double projectionSales) {
		_projectionSales = projectionSales;
	}

	@Override
	public double getProjectionMap() {
		return _projectionMap;
	}

	@Override
	public void setProjectionMap(double projectionMap) {
		_projectionMap = projectionMap;
	}

	@Override
	public boolean getResetPriceCap() {
		return _resetPriceCap;
	}

	@Override
	public boolean isResetPriceCap() {
		return _resetPriceCap;
	}

	@Override
	public void setResetPriceCap(boolean resetPriceCap) {
		_resetPriceCap = resetPriceCap;
	}

	@Override
	public StNmPpaProjection toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StNmPpaProjection)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StNmPpaProjectionImpl stNmPpaProjectionImpl = new StNmPpaProjectionImpl();

		stNmPpaProjectionImpl.setLastModifiedDate(getLastModifiedDate());
		stNmPpaProjectionImpl.setPeriodSid(getPeriodSid());
		stNmPpaProjectionImpl.setProjectionRate(getProjectionRate());
		stNmPpaProjectionImpl.setProjectionDetailsSid(getProjectionDetailsSid());
		stNmPpaProjectionImpl.setUserId(getUserId());
		stNmPpaProjectionImpl.setPriceCap(getPriceCap());
		stNmPpaProjectionImpl.setProjectionDiscountUnits(getProjectionDiscountUnits());
		stNmPpaProjectionImpl.setSessionId(getSessionId());
		stNmPpaProjectionImpl.setProjectionDiscountDollar(getProjectionDiscountDollar());
		stNmPpaProjectionImpl.setReset(getReset());
		stNmPpaProjectionImpl.setProjectionSales(getProjectionSales());
		stNmPpaProjectionImpl.setProjectionMap(getProjectionMap());
		stNmPpaProjectionImpl.setResetPriceCap(getResetPriceCap());

		stNmPpaProjectionImpl.resetOriginalValues();

		return stNmPpaProjectionImpl;
	}

	@Override
	public int compareTo(StNmPpaProjection stNmPpaProjection) {
		StNmPpaProjectionPK primaryKey = stNmPpaProjection.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StNmPpaProjection)) {
			return false;
		}

		StNmPpaProjection stNmPpaProjection = (StNmPpaProjection)obj;

		StNmPpaProjectionPK primaryKey = stNmPpaProjection.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<StNmPpaProjection> toCacheModel() {
		StNmPpaProjectionCacheModel stNmPpaProjectionCacheModel = new StNmPpaProjectionCacheModel();

		stNmPpaProjectionCacheModel.stNmPpaProjectionPK = getPrimaryKey();

		Date lastModifiedDate = getLastModifiedDate();

		if (lastModifiedDate != null) {
			stNmPpaProjectionCacheModel.lastModifiedDate = lastModifiedDate.getTime();
		}
		else {
			stNmPpaProjectionCacheModel.lastModifiedDate = Long.MIN_VALUE;
		}

		stNmPpaProjectionCacheModel.periodSid = getPeriodSid();

		stNmPpaProjectionCacheModel.projectionRate = getProjectionRate();

		stNmPpaProjectionCacheModel.projectionDetailsSid = getProjectionDetailsSid();

		stNmPpaProjectionCacheModel.userId = getUserId();

		stNmPpaProjectionCacheModel.priceCap = getPriceCap();

		stNmPpaProjectionCacheModel.projectionDiscountUnits = getProjectionDiscountUnits();

		stNmPpaProjectionCacheModel.sessionId = getSessionId();

		stNmPpaProjectionCacheModel.projectionDiscountDollar = getProjectionDiscountDollar();

		stNmPpaProjectionCacheModel.reset = getReset();

		stNmPpaProjectionCacheModel.projectionSales = getProjectionSales();

		stNmPpaProjectionCacheModel.projectionMap = getProjectionMap();

		stNmPpaProjectionCacheModel.resetPriceCap = getResetPriceCap();

		return stNmPpaProjectionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{lastModifiedDate=");
		sb.append(getLastModifiedDate());
		sb.append(", periodSid=");
		sb.append(getPeriodSid());
		sb.append(", projectionRate=");
		sb.append(getProjectionRate());
		sb.append(", projectionDetailsSid=");
		sb.append(getProjectionDetailsSid());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", priceCap=");
		sb.append(getPriceCap());
		sb.append(", projectionDiscountUnits=");
		sb.append(getProjectionDiscountUnits());
		sb.append(", sessionId=");
		sb.append(getSessionId());
		sb.append(", projectionDiscountDollar=");
		sb.append(getProjectionDiscountDollar());
		sb.append(", reset=");
		sb.append(getReset());
		sb.append(", projectionSales=");
		sb.append(getProjectionSales());
		sb.append(", projectionMap=");
		sb.append(getProjectionMap());
		sb.append(", resetPriceCap=");
		sb.append(getResetPriceCap());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.StNmPpaProjection");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getLastModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodSid</column-name><column-value><![CDATA[");
		sb.append(getPeriodSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionRate</column-name><column-value><![CDATA[");
		sb.append(getProjectionRate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getProjectionDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceCap</column-name><column-value><![CDATA[");
		sb.append(getPriceCap());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionDiscountUnits</column-name><column-value><![CDATA[");
		sb.append(getProjectionDiscountUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sessionId</column-name><column-value><![CDATA[");
		sb.append(getSessionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionDiscountDollar</column-name><column-value><![CDATA[");
		sb.append(getProjectionDiscountDollar());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reset</column-name><column-value><![CDATA[");
		sb.append(getReset());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionSales</column-name><column-value><![CDATA[");
		sb.append(getProjectionSales());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionMap</column-name><column-value><![CDATA[");
		sb.append(getProjectionMap());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetPriceCap</column-name><column-value><![CDATA[");
		sb.append(getResetPriceCap());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = StNmPpaProjection.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			StNmPpaProjection.class
		};
	private Date _lastModifiedDate;
	private int _periodSid;
	private double _projectionRate;
	private int _projectionDetailsSid;
	private int _userId;
	private double _priceCap;
	private double _projectionDiscountUnits;
	private int _sessionId;
	private double _projectionDiscountDollar;
	private boolean _reset;
	private double _projectionSales;
	private double _projectionMap;
	private boolean _resetPriceCap;
	private StNmPpaProjection _escapedModel;
}