/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.ForecastingFormula;
import com.stpl.app.model.ForecastingFormulaModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ForecastingFormula service. Represents a row in the &quot;FORECASTING_FORMULA&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ForecastingFormulaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ForecastingFormulaImpl}.
 * </p>
 *
 * @author
 * @see ForecastingFormulaImpl
 * @see ForecastingFormula
 * @see ForecastingFormulaModel
 * @generated
 */
@ProviderType
public class ForecastingFormulaModelImpl extends BaseModelImpl<ForecastingFormula>
	implements ForecastingFormulaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a forecasting formula model instance should use the {@link ForecastingFormula} interface instead.
	 */
	public static final String TABLE_NAME = "FORECASTING_FORMULA";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "FORMULA_TYPE", Types.INTEGER },
			{ "FORECASTING_FORMULA_SID", Types.INTEGER },
			{ "FORMULA", Types.VARCHAR },
			{ "FORMULA_NO", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "IS_ACTIVE", Types.BOOLEAN },
			{ "FORMULA_NAME", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("FORMULA_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("FORECASTING_FORMULA_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("FORMULA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORMULA_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("IS_ACTIVE", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("FORMULA_NAME", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table FORECASTING_FORMULA (CREATED_DATE DATE null,FORMULA_TYPE INTEGER,FORECASTING_FORMULA_SID INTEGER not null primary key IDENTITY,FORMULA VARCHAR(75) null,FORMULA_NO VARCHAR(75) null,MODIFIED_DATE DATE null,IS_ACTIVE BOOLEAN,FORMULA_NAME VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table FORECASTING_FORMULA";
	public static final String ORDER_BY_JPQL = " ORDER BY forecastingFormula.forecastingFormulaSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FORECASTING_FORMULA.FORECASTING_FORMULA_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.ForecastingFormula"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.ForecastingFormula"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.ForecastingFormula"));

	public ForecastingFormulaModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _forecastingFormulaSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setForecastingFormulaSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _forecastingFormulaSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ForecastingFormula.class;
	}

	@Override
	public String getModelClassName() {
		return ForecastingFormula.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("createdDate", getCreatedDate());
		attributes.put("formulaType", getFormulaType());
		attributes.put("forecastingFormulaSid", getForecastingFormulaSid());
		attributes.put("formula", getFormula());
		attributes.put("formulaNo", getFormulaNo());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("isActive", getIsActive());
		attributes.put("formulaName", getFormulaName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer formulaType = (Integer)attributes.get("formulaType");

		if (formulaType != null) {
			setFormulaType(formulaType);
		}

		Integer forecastingFormulaSid = (Integer)attributes.get(
				"forecastingFormulaSid");

		if (forecastingFormulaSid != null) {
			setForecastingFormulaSid(forecastingFormulaSid);
		}

		String formula = (String)attributes.get("formula");

		if (formula != null) {
			setFormula(formula);
		}

		String formulaNo = (String)attributes.get("formulaNo");

		if (formulaNo != null) {
			setFormulaNo(formulaNo);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Boolean isActive = (Boolean)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}

		String formulaName = (String)attributes.get("formulaName");

		if (formulaName != null) {
			setFormulaName(formulaName);
		}
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getFormulaType() {
		return _formulaType;
	}

	@Override
	public void setFormulaType(int formulaType) {
		_formulaType = formulaType;
	}

	@Override
	public int getForecastingFormulaSid() {
		return _forecastingFormulaSid;
	}

	@Override
	public void setForecastingFormulaSid(int forecastingFormulaSid) {
		_forecastingFormulaSid = forecastingFormulaSid;
	}

	@Override
	public String getFormula() {
		if (_formula == null) {
			return StringPool.BLANK;
		}
		else {
			return _formula;
		}
	}

	@Override
	public void setFormula(String formula) {
		_formula = formula;
	}

	@Override
	public String getFormulaNo() {
		if (_formulaNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _formulaNo;
		}
	}

	@Override
	public void setFormulaNo(String formulaNo) {
		_formulaNo = formulaNo;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public boolean getIsActive() {
		return _isActive;
	}

	@Override
	public boolean isIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(boolean isActive) {
		_isActive = isActive;
	}

	@Override
	public String getFormulaName() {
		if (_formulaName == null) {
			return StringPool.BLANK;
		}
		else {
			return _formulaName;
		}
	}

	@Override
	public void setFormulaName(String formulaName) {
		_formulaName = formulaName;
	}

	@Override
	public ForecastingFormula toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ForecastingFormula)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ForecastingFormulaImpl forecastingFormulaImpl = new ForecastingFormulaImpl();

		forecastingFormulaImpl.setCreatedDate(getCreatedDate());
		forecastingFormulaImpl.setFormulaType(getFormulaType());
		forecastingFormulaImpl.setForecastingFormulaSid(getForecastingFormulaSid());
		forecastingFormulaImpl.setFormula(getFormula());
		forecastingFormulaImpl.setFormulaNo(getFormulaNo());
		forecastingFormulaImpl.setModifiedDate(getModifiedDate());
		forecastingFormulaImpl.setIsActive(getIsActive());
		forecastingFormulaImpl.setFormulaName(getFormulaName());

		forecastingFormulaImpl.resetOriginalValues();

		return forecastingFormulaImpl;
	}

	@Override
	public int compareTo(ForecastingFormula forecastingFormula) {
		int primaryKey = forecastingFormula.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ForecastingFormula)) {
			return false;
		}

		ForecastingFormula forecastingFormula = (ForecastingFormula)obj;

		int primaryKey = forecastingFormula.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ForecastingFormula> toCacheModel() {
		ForecastingFormulaCacheModel forecastingFormulaCacheModel = new ForecastingFormulaCacheModel();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			forecastingFormulaCacheModel.createdDate = createdDate.getTime();
		}
		else {
			forecastingFormulaCacheModel.createdDate = Long.MIN_VALUE;
		}

		forecastingFormulaCacheModel.formulaType = getFormulaType();

		forecastingFormulaCacheModel.forecastingFormulaSid = getForecastingFormulaSid();

		forecastingFormulaCacheModel.formula = getFormula();

		String formula = forecastingFormulaCacheModel.formula;

		if ((formula != null) && (formula.length() == 0)) {
			forecastingFormulaCacheModel.formula = null;
		}

		forecastingFormulaCacheModel.formulaNo = getFormulaNo();

		String formulaNo = forecastingFormulaCacheModel.formulaNo;

		if ((formulaNo != null) && (formulaNo.length() == 0)) {
			forecastingFormulaCacheModel.formulaNo = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			forecastingFormulaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			forecastingFormulaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		forecastingFormulaCacheModel.isActive = getIsActive();

		forecastingFormulaCacheModel.formulaName = getFormulaName();

		String formulaName = forecastingFormulaCacheModel.formulaName;

		if ((formulaName != null) && (formulaName.length() == 0)) {
			forecastingFormulaCacheModel.formulaName = null;
		}

		return forecastingFormulaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{createdDate=");
		sb.append(getCreatedDate());
		sb.append(", formulaType=");
		sb.append(getFormulaType());
		sb.append(", forecastingFormulaSid=");
		sb.append(getForecastingFormulaSid());
		sb.append(", formula=");
		sb.append(getFormula());
		sb.append(", formulaNo=");
		sb.append(getFormulaNo());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append(", formulaName=");
		sb.append(getFormulaName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.ForecastingFormula");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formulaType</column-name><column-value><![CDATA[");
		sb.append(getFormulaType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastingFormulaSid</column-name><column-value><![CDATA[");
		sb.append(getForecastingFormulaSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formula</column-name><column-value><![CDATA[");
		sb.append(getFormula());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formulaNo</column-name><column-value><![CDATA[");
		sb.append(getFormulaNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formulaName</column-name><column-value><![CDATA[");
		sb.append(getFormulaName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ForecastingFormula.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ForecastingFormula.class
		};
	private Date _createdDate;
	private int _formulaType;
	private int _forecastingFormulaSid;
	private String _formula;
	private String _formulaNo;
	private Date _modifiedDate;
	private boolean _isActive;
	private String _formulaName;
	private ForecastingFormula _escapedModel;
}