<?xml version="1.0" encoding="UTF-8"?>
<custom-sql>
    <sql id="com.contractDashboard.saveCFP">
        <![CDATA[
            
        
         MERGE CFP_CONTRACT_DETAILS AS Target USING 
         (SELECT '?' CFP_CONTRACT_SID,
                   COMPANY_MASTER_SID,
                   COMPANY_START_DATE = CASE
                              WHEN COMPANY_START_DATE <= @CFP_START_DATE THEN @CFP_START_DATE
                              ELSE COMPANY_START_DATE
                            END, 
                   COMPANY_END_DATE = CASE
                            WHEN ( COMPANY_END_DATE IS NULL
                                   AND @CFP_END_DATE IS NULL ) THEN NULL
                            WHEN ( COMPANY_END_DATE IS NULL
                                   AND @CFP_END_DATE IS NOT NULL ) THEN @CFP_END_DATE
                            WHEN COMPANY_END_DATE >= @CFP_END_DATE THEN @CFP_END_DATE
                            ELSE COMPANY_END_DATE
                          END, 
                   COMPANY_CFP_ATTACHED_STATUS,
                   TRADE_CLASS, 
                   TRADE_CLASS_START_DATE, 
                   TRADE_CLASS_END_DATE, 
                   '?' CREATED_BY, 
                   '?' CREATED_DATE, 
                   '?' MODIFIED_BY, 
                   '?' MODIFIED_DATE, 
                   'A' INBOUND_STATUS, 
                   'false' RECORD_LOCK_STATUS FROM dbo.CFP_DETAILS
        WHERE INBOUND_STATUS NOT IN('D') AND CFP_MODEL_SID=? AND ( COMPANY_START_DATE >= @CFP_START_DATE OR COMPANY_START_DATE <= @CFP_START_DATE ) 
        AND ( COMPANY_START_DATE <= @CFP_END_DATE OR @CFP_END_DATE IS NULL ) AND ( COMPANY_END_DATE >= @CFP_START_DATE OR COMPANY_END_DATE IS NULL )) AS Source
        
        ON (Target.CFP_CONTRACT_SID = Source.CFP_CONTRACT_SID AND Target.COMPANY_MASTER_SID=Source.COMPANY_MASTER_SID  AND 
        	Target.INBOUND_STATUS = 'D')
        WHEN MATCHED THEN
        
        UPDATE SET 
        Target.COMPANY_START_DATE=Source.COMPANY_START_DATE,
        Target.COMPANY_END_DATE = Source.COMPANY_END_DATE, 
        Target.CFP_CONTRACT_ATTACHED_STATUS=Source.COMPANY_CFP_ATTACHED_STATUS,
        Target.TRADE_CLASS = Source.TRADE_CLASS, 
       	Target.TRADE_CLASS_START_DATE = Source.TRADE_CLASS_START_DATE, 
        Target.TRADE_CLASS_END_DATE = Source.TRADE_CLASS_END_DATE, 
        Target.CREATED_BY = Source.CREATED_BY,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.INBOUND_STATUS = 'A',
        Target.RECORD_LOCK_STATUS = 0 
       
        WHEN NOT matched THEN
        
  		INSERT(CFP_CONTRACT_SID, COMPANY_MASTER_SID, COMPANY_START_DATE, COMPANY_END_DATE,CFP_CONTRACT_ATTACHED_STATUS,
        TRADE_CLASS, TRADE_CLASS_START_DATE, TRADE_CLASS_END_DATE, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, INBOUND_STATUS, RECORD_LOCK_STATUS)
  		VALUES(Source.CFP_CONTRACT_SID, Source.COMPANY_MASTER_SID, Source.COMPANY_START_DATE,Source.COMPANY_END_DATE,Source.COMPANY_CFP_ATTACHED_STATUS,
        Source.TRADE_CLASS, Source.TRADE_CLASS_START_DATE, Source.TRADE_CLASS_END_DATE, Source.CREATED_BY, Source.CREATED_DATE, Source.MODIFIED_BY,
         Source.MODIFIED_DATE, 'A', 0);
        
        
        
        ]]>
    </sql>
    
<!--    <sql id="com.contractDashboard.process.saveCfpHql">
        <![CDATA[
        INSERT INTO CfpDetailsAttached 
        {CfpDetailsAttached.companyFamilyPlanSystemId, CfpDetailsAttached.contractSystemId, CfpDetailsAttached.tradingPartnerSystemId, CfpDetailsAttached.startDate, CfpDetailsAttached.endDate, CfpDetailsAttached.attachedStatus,
        CfpDetailsAttached.attachedDate, CfpDetailsAttached.tradeClass, CfpDetailsAttached.tradeClassStartDate, CfpDetailsAttached.tradeClassEndDate, CfpDetailsAttached.createdBy, CfpDetailsAttached.createdDate, CfpDetailsAttached.inboundStatus, CfpDetailsAttached.recordLockStatus}) 
        SELECT 
        {CompanyFamilyplanDetails.companyFamilyPlanSystemId, ? contractSystemId, CompanyFamilyplanDetails.tradingPartnerSystemId, CompanyFamilyplanDetails.startDate, CompanyFamilyplanDetails.endDate, CompanyFamilyplanDetails.attachedStatus,
        '?' attachedDate, CompanyFamilyplanDetails.tradeClass, CompanyFamilyplanDetails.tradeClassStartDate, CompanyFamilyplanDetails.tradeClassEndDate, '?' createdBy, '?' createdDate, 'A' inboundStatus, 'UnLocked' recordLockStatus}
        FROM CompanyFamilyplanDetails
        WHERE CompanyFamilyplanDetails.companyFamilyPlanSystemId=?;
        ]]>
    </sql>-->
    
    <sql id="com.contractDashboard.saveIFP">
       <![CDATA[
       
        
         MERGE IFP_CONTRACT_DETAILS AS Target USING 
         (SELECT '?' IFP_CONTRACT_SID, 
            A.ITEM_MASTER_SID, 
            START_DATE = CASE
                              WHEN A.START_DATE <= @IFP_START_DATE THEN @IFP_START_DATE
                              ELSE A.START_DATE
                            END, 
            END_DATE = CASE
                            WHEN ( A.END_DATE IS NULL
                                   AND @IFP_END_DATE IS NULL ) THEN NULL
                            WHEN ( A.END_DATE IS NULL
                                   AND @IFP_END_DATE IS NOT NULL ) THEN @IFP_END_DATE
                            WHEN A.END_DATE >= @IFP_END_DATE THEN @IFP_END_DATE
                            ELSE A.END_DATE
                          END,  
            IM.ITEM_STATUS,
            '?' CREATED_BY, 
            '?' CREATED_DATE, 
            '?' MODIFIED_BY, 
            '?' MODIFIED_DATE, 
            'A' INBOUND_STATUS, 
            'false' RECORD_LOCK_STATUS 
        FROM dbo.IFP_DETAILS A
        JOIN   ITEM_MASTER IM ON IM.ITEM_MASTER_SID = A.ITEM_MASTER_SID
        WHERE A.INBOUND_STATUS NOT IN('D') AND A.IFP_MODEL_SID=? 
        AND ( A.START_DATE >= @IFP_START_DATE
              OR A.START_DATE <= @IFP_START_DATE )
       AND ( A.START_DATE <= @IFP_END_DATE
              OR @IFP_END_DATE IS NULL )
       AND ( A.END_DATE >= @IFP_START_DATE
              OR A.END_DATE IS NULL )) AS Source
        
        ON (Target.IFP_CONTRACT_SID = Source.IFP_CONTRACT_SID AND Target.ITEM_MASTER_SID=Source.ITEM_MASTER_SID  AND 
        	Target.INBOUND_STATUS = 'D')
       
        WHEN MATCHED THEN
        
        UPDATE SET 
        Target.ITEM_START_DATE = Source.START_DATE, 
       	Target.ITEM_END_DATE = Source.END_DATE, 
        Target.ITEM_STATUS= Source.ITEM_STATUS,
        Target.CREATED_BY = Source.CREATED_BY,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.INBOUND_STATUS = 'A',
        Target.RECORD_LOCK_STATUS = 0 
       
        WHEN NOT matched THEN
        
  		INSERT(IFP_CONTRACT_SID, ITEM_MASTER_SID, ITEM_START_DATE, ITEM_END_DATE,  ITEM_STATUS,
        CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, INBOUND_STATUS, RECORD_LOCK_STATUS)
  		VALUES(Source.IFP_CONTRACT_SID, Source.ITEM_MASTER_SID, Source.START_DATE,Source.END_DATE, Source.ITEM_STATUS,
        Source.CREATED_BY, Source.CREATED_DATE, Source.MODIFIED_BY, Source.MODIFIED_DATE, 'A', 0);
       
        ]]>
    </sql>
    
    <sql id="com.contractDashboard.savePS">
        <![CDATA[
        
         MERGE PS_CONTRACT_DETAILS AS Target USING 
         (SELECT '?' PS_CONTRACT_SID, 
            ITEM_MASTER_SID, 
            CONTRACT_PRICE_START_DATE= CASE  
                              WHEN CONTRACT_PRICE_START_DATE <= @PS_START_DATE THEN @PS_START_DATE
                              ELSE CONTRACT_PRICE_START_DATE
                            END, 
            CONTRACT_PRICE_END_DATE= CASE   
                            WHEN ( CONTRACT_PRICE_END_DATE IS NULL
                                   AND @PS_END_DATE IS NULL ) THEN NULL
                            WHEN ( CONTRACT_PRICE_END_DATE IS NULL
                                   AND @PS_END_DATE IS NOT NULL ) THEN @PS_END_DATE
                            WHEN CONTRACT_PRICE_END_DATE >= @PS_END_DATE THEN @PS_END_DATE
                            ELSE CONTRACT_PRICE_END_DATE
                          END, 
            CONTRACT_PRICE, 
            PRICE_REVISION, 
            REVISION_DATE, 
            PRICE_PROTECTION_START_DATE ,
            PRICE_PROTECTION_END_DATE, 
            PRICE_TOLERANCE_TYPE, 
            PRICE_TOLERANCE, 
            BASE_PRICE, 
            PRICE_TOLERANCE_FREQUENCY ,
            PRICE_TOLERANCE_INTERVAL, 
            SUGGESTED_PRICE, 
            ITEM_PRICING_QUALIFIER_SID,  
        '?' CREATED_BY, '?' CREATED_DATE, '?' MODIFIED_BY, '?' MODIFIED_DATE, PRICE, 'A' INBOUND_STATUS, 'false' RECORD_LOCK_STATUS ,
            BRAND_MASTER_SID,
NEP,
PRICE_PROTECTION_STATUS,
PRICE_PROTECTION_PRICE_TYPE,
NEP_FORMULA,
MAX_INCREMENTAL_CHANGE,
RESET_ELIGIBLE,
RESET_TYPE,
RESET_DATE,
RESET_INTERVAL,
RESET_FREQUENCY,
NET_PRICE_TYPE,
NET_PRICE_TYPE_FORMULA,
Base_Price_Type,
Base_Price_Entry,
Base_Price_Date,
Net_Base_Price,
Base_Price_ddlb,
Net_Base_Price_Formula_ID,
Subsequent_Period_Price_Type,
Net_Subsequent_Period_price,
Net_Subsequent_Price_Formula_Id,
Reset_Price_Type,
Net_Reset_Price_Type,
Net_Reset_Price_Formula_Id
        FROM dbo.PS_DETAILS
        WHERE INBOUND_STATUS NOT IN('D') AND PS_MODEL_SID=? 
        AND ( CONTRACT_PRICE_START_DATE >= @PS_START_DATE
              OR CONTRACT_PRICE_START_DATE <= @PS_START_DATE )
       AND ( CONTRACT_PRICE_START_DATE <= @PS_END_DATE
              OR @PS_END_DATE IS NULL )
       AND ( CONTRACT_PRICE_END_DATE >= @PS_START_DATE
              OR CONTRACT_PRICE_END_DATE IS NULL )) AS Source
        
        ON (Target.PS_CONTRACT_SID = Source.PS_CONTRACT_SID AND Target.ITEM_MASTER_SID=Source.ITEM_MASTER_SID  AND 
        	Target.INBOUND_STATUS = 'D')
       
        WHEN MATCHED THEN
        
        UPDATE SET 
        Target.CONTRACT_PRICE_START_DATE=Source.CONTRACT_PRICE_START_DATE,
        Target.CONTRACT_PRICE_END_DATE = Source.CONTRACT_PRICE_END_DATE,
        Target.CONTRACT_PRICE = Source.CONTRACT_PRICE, 
       	Target.PRICE_REVISION = Source.PRICE_REVISION, 
        Target.REVISION_DATE = Source.REVISION_DATE, 
        Target.PRICE_PROTECTION_START_DATE = Source.PRICE_PROTECTION_START_DATE,
        Target.PRICE_TOLERANCE_TYPE = Source.PRICE_TOLERANCE_TYPE,
        Target.PRICE_TOLERANCE = Source.PRICE_TOLERANCE,
        Target.BASE_PRICE = Source.BASE_PRICE,
        Target.PRICE = Source.PRICE,
        Target.PRICE_TOLERANCE_FREQUENCY = Source.PRICE_TOLERANCE_FREQUENCY,
        Target.PRICE_TOLERANCE_INTERVAL = Source.PRICE_TOLERANCE_INTERVAL,
        Target.SUGGESTED_PRICE = Source.SUGGESTED_PRICE,
        Target.ITEM_PRICING_QUALIFIER_SID = Source.ITEM_PRICING_QUALIFIER_SID,
        Target.CREATED_BY = Source.CREATED_BY,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.INBOUND_STATUS = 'A',
        Target.RECORD_LOCK_STATUS = 0,
        Target.BRAND_MASTER_SID = Source.BRAND_MASTER_SID,
        Target.NEP = Source.NEP,
        Target.PRICE_PROTECTION_STATUS = Source.PRICE_PROTECTION_STATUS,
        Target.PRICE_PROTECTION_PRICE_TYPE = Source.PRICE_PROTECTION_PRICE_TYPE,
        Target.NEP_FORMULA = Source.NEP_FORMULA,
        Target.MAX_INCREMENTAL_CHANGE = Source.MAX_INCREMENTAL_CHANGE,
        Target.RESET_ELIGIBLE = Source.RESET_ELIGIBLE,
        Target.RESET_TYPE = Source.RESET_TYPE,
        Target.RESET_DATE = Source.RESET_DATE,
        Target.RESET_INTERVAL = Source.RESET_INTERVAL,
        Target.RESET_FREQUENCY = Source.RESET_FREQUENCY,
        Target.NET_PRICE_TYPE = Source.NET_PRICE_TYPE,
        Target.NET_PRICE_TYPE_FORMULA = Source.NET_PRICE_TYPE_FORMULA,
        Target.Base_Price_Type = Source.Base_Price_Type,
        Target.Base_Price_Entry = Source.Base_Price_Entry,
        Target.Base_Price_Date = Source.Base_Price_Date,
        Target.Net_Base_Price = Source.Net_Base_Price,
        Target.Base_Price_ddlb = Source.Base_Price_ddlb,
        Target.Net_Base_Price_Formula_ID = Source.Net_Base_Price_Formula_ID,
        Target.Subsequent_Period_Price_Type = Source.Subsequent_Period_Price_Type,
        Target.Net_Subsequent_Period_price = Source.Net_Subsequent_Period_price,
        Target.Net_Subsequent_Price_Formula_Id = Source.Net_Subsequent_Price_Formula_Id,
        Target.Reset_Price_Type = Source.Reset_Price_Type,
        Target.Net_Reset_Price_Type = Source.Net_Reset_Price_Type,
        Target.Net_Reset_Price_Formula_Id = Source.Net_Reset_Price_Formula_Id
         
       
        WHEN NOT matched THEN
        
  		INSERT(PS_CONTRACT_SID, ITEM_MASTER_SID, CONTRACT_PRICE_START_DATE, CONTRACT_PRICE_END_DATE, CONTRACT_PRICE, 
        PRICE_REVISION, REVISION_DATE, PRICE_PROTECTION_START_DATE ,PRICE_PROTECTION_END_DATE, PRICE_TOLERANCE_TYPE, PRICE_TOLERANCE, BASE_PRICE, PRICE_TOLERANCE_FREQUENCY ,
        PRICE_TOLERANCE_INTERVAL, SUGGESTED_PRICE, ITEM_PRICING_QUALIFIER_SID,   
        CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, PRICE, INBOUND_STATUS, RECORD_LOCK_STATUS,
        BRAND_MASTER_SID,NEP,PRICE_PROTECTION_STATUS,PRICE_PROTECTION_PRICE_TYPE,NEP_FORMULA,MAX_INCREMENTAL_CHANGE,RESET_ELIGIBLE,RESET_TYPE,RESET_DATE,RESET_INTERVAL,
        RESET_FREQUENCY,NET_PRICE_TYPE,NET_PRICE_TYPE_FORMULA,Base_Price_Type,Base_Price_Entry,Base_Price_Date,Net_Base_Price,Base_Price_ddlb,Net_Base_Price_Formula_ID,Subsequent_Period_Price_Type,
        Net_Subsequent_Period_price,Net_Subsequent_Price_Formula_Id,Reset_Price_Type,Net_Reset_Price_Type,Net_Reset_Price_Formula_Id
        )
        
  		VALUES(Source.PS_CONTRACT_SID, Source.ITEM_MASTER_SID, Source.CONTRACT_PRICE_START_DATE, Source.CONTRACT_PRICE_END_DATE, Source.CONTRACT_PRICE, 
        Source.PRICE_REVISION, Source.REVISION_DATE, Source.PRICE_PROTECTION_START_DATE ,Source.PRICE_PROTECTION_END_DATE, Source.PRICE_TOLERANCE_TYPE,
        Source.PRICE_TOLERANCE, Source.BASE_PRICE, Source.PRICE_TOLERANCE_FREQUENCY ,
        Source.PRICE_TOLERANCE_INTERVAL, Source.SUGGESTED_PRICE, Source.ITEM_PRICING_QUALIFIER_SID,   
        Source.CREATED_BY, Source.CREATED_DATE, Source.MODIFIED_BY, Source.MODIFIED_DATE, Source.PRICE,'A', 0,
        Source.BRAND_MASTER_SID,Source.NEP,Source.PRICE_PROTECTION_STATUS,Source.PRICE_PROTECTION_PRICE_TYPE,Source.NEP_FORMULA,Source.MAX_INCREMENTAL_CHANGE,Source.RESET_ELIGIBLE,Source.RESET_TYPE,Source.RESET_DATE,
        Source.RESET_INTERVAL,Source.RESET_FREQUENCY,Source.NET_PRICE_TYPE,Source.NET_PRICE_TYPE_FORMULA,Source.Base_Price_Type,Source.Base_Price_Entry,Source.Base_Price_Date,Source.Net_Base_Price,Source.Base_Price_ddlb,Source.Net_Base_Price_Formula_ID,
        Source.Subsequent_Period_Price_Type,Source.Net_Subsequent_Period_price,Source.Net_Subsequent_Price_Formula_Id,Source.Reset_Price_Type,Source.Net_Reset_Price_Type,Source.Net_Reset_Price_Formula_Id
        );
        
        
        
        ]]>
    </sql>
    
    <sql id="com.contractDashboard.saveRS">
        <![CDATA[
       
        
         MERGE RS_CONTRACT_DETAILS AS Target USING 
         (SELECT '?' RS_CONTRACT_SID, 
            ITEM_MASTER_SID, 
            ITEM_REBATE_START_DATE = CASE  
                    WHEN ITEM_REBATE_START_DATE <= @RS_START_DATE THEN @RS_START_DATE
                    ELSE ITEM_REBATE_START_DATE
                    END, 
            ITEM_REBATE_END_DATE = CASE   
                    WHEN ( ITEM_REBATE_END_DATE IS NULL
                    AND @RS_END_DATE IS NULL ) THEN NULL
                    WHEN ( ITEM_REBATE_END_DATE IS NULL
                    AND @RS_END_DATE IS NOT NULL ) THEN @RS_END_DATE
                    WHEN ITEM_REBATE_END_DATE >= @RS_END_DATE THEN @RS_END_DATE
                    ELSE ITEM_REBATE_END_DATE
                    END, 
            FORMULA_ID, 
            REBATE_PLAN_MASTER_SID, 
            REBATE_AMOUNT, 
            BUNDLE_NO,  
        '?' CREATED_BY, '?' CREATED_DATE, '?' MODIFIED_BY, '?' MODIFIED_DATE, 'A' INBOUND_STATUS, FORMULA_METHOD_ID, 'false' RECORD_LOCK_STATUS
        , nullif(DEDUCTION_CALENDAR_MASTER_SID,0) as DEDUCTION_CALENDAR_MASTER_SID, nullif(NET_SALES_FORMULA_MASTER_SID,0) as NET_SALES_FORMULA_MASTER_SID, FORMULA_TYPE, NET_SALES_RULE, EVALUATION_RULE, EVALUATION_RULE_BUNDLE, CALCULATION_RULE, CALCULATION_RULE_BUNDLE, ITEM_RS_ATTACHED_STATUS
        FROM dbo.RS_DETAILS
        WHERE INBOUND_STATUS NOT IN('D') AND RS_MODEL_SID=?
        AND ( ITEM_REBATE_START_DATE >= @RS_START_DATE
              OR ITEM_REBATE_START_DATE <= @RS_START_DATE )
        AND ( ITEM_REBATE_START_DATE <= @RS_END_DATE
              OR @RS_END_DATE IS NULL )
        AND ( ITEM_REBATE_END_DATE >= @RS_START_DATE
              OR ITEM_REBATE_END_DATE IS NULL )) AS Source
        
        ON (Target.RS_CONTRACT_SID = Source.RS_CONTRACT_SID AND Target.ITEM_MASTER_SID=Source.ITEM_MASTER_SID  AND 
        	Target.INBOUND_STATUS = 'D')
       
        WHEN MATCHED THEN
        
        UPDATE SET 
        Target.ITEM_REBATE_START_DATE=Source.ITEM_REBATE_START_DATE,
        Target.ITEM_REBATE_END_DATE = Source.ITEM_REBATE_END_DATE,
        Target.FORMULA_ID = Source.FORMULA_ID, 
       	Target.REBATE_PLAN_MASTER_SID = Source.REBATE_PLAN_MASTER_SID, 
        Target.REBATE_AMOUNT = Source.REBATE_AMOUNT, 
        Target.BUNDLE_NO = Source.BUNDLE_NO,
        
        Target.CREATED_BY = Source.CREATED_BY,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.INBOUND_STATUS = 'A',
        Target.FORMULA_METHOD_ID=Source.FORMULA_METHOD_ID,
        Target.RECORD_LOCK_STATUS = 0, 
        Target.DEDUCTION_CALENDAR_MASTER_SID = Source.DEDUCTION_CALENDAR_MASTER_SID,
        Target.NET_SALES_FORMULA_MASTER_SID = Source.NET_SALES_FORMULA_MASTER_SID,
        Target.FORMULA_TYPE = Source.FORMULA_TYPE,
        Target.NET_SALES_RULE = Source.NET_SALES_RULE,
        Target.EVALUATION_RULE = Source.EVALUATION_RULE,
        Target.EVALUATION_RULE_BUNDLE = Source.EVALUATION_RULE_BUNDLE,
        Target.CALCULATION_RULE = Source.CALCULATION_RULE,
        Target.CALCULATION_RULE_BUNDLE = Source.CALCULATION_RULE_BUNDLE,
        Target.RS_CONTRACT_ATTACHED_STATUS = Source.ITEM_RS_ATTACHED_STATUS
       
        WHEN NOT matched THEN
        
  		INSERT(RS_CONTRACT_SID, ITEM_MASTER_SID, ITEM_REBATE_START_DATE, ITEM_REBATE_END_DATE, FORMULA_ID, REBATE_PLAN_MASTER_SID, 
        REBATE_AMOUNT, BUNDLE_NO,  
        CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, INBOUND_STATUS, FORMULA_METHOD_ID, RECORD_LOCK_STATUS
        , DEDUCTION_CALENDAR_MASTER_SID, NET_SALES_FORMULA_MASTER_SID, FORMULA_TYPE, NET_SALES_RULE, EVALUATION_RULE, EVALUATION_RULE_BUNDLE, CALCULATION_RULE, CALCULATION_RULE_BUNDLE, RS_CONTRACT_ATTACHED_STATUS)
  		VALUES(Source.RS_CONTRACT_SID, Source.ITEM_MASTER_SID, Source.ITEM_REBATE_START_DATE, Source.ITEM_REBATE_END_DATE,
  		 Source.FORMULA_ID, Source.REBATE_PLAN_MASTER_SID, Source.REBATE_AMOUNT, Source.BUNDLE_NO,  
        Source.CREATED_BY, Source.CREATED_DATE, Source.MODIFIED_BY, Source.MODIFIED_DATE, 'A', Source.FORMULA_METHOD_ID, 0
        , nullif(Source.DEDUCTION_CALENDAR_MASTER_SID,0), nullif(Source.NET_SALES_FORMULA_MASTER_SID,0), Source.FORMULA_TYPE, Source.NET_SALES_RULE, Source.EVALUATION_RULE, Source.EVALUATION_RULE_BUNDLE, Source.CALCULATION_RULE, Source.CALCULATION_RULE_BUNDLE, Source.ITEM_RS_ATTACHED_STATUS);
        
        ]]>
    </sql>
</custom-sql>
