package com.stpl.app.model.impl;

import com.stpl.app.model.NmDiscountProjection;
import com.stpl.app.model.NmDiscountProjectionModel;
import com.stpl.app.service.persistence.NmDiscountProjectionPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NmDiscountProjection service. Represents a row in the &quot;NM_DISCOUNT_PROJECTION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.NmDiscountProjectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NmDiscountProjectionImpl}.
 * </p>
 *
 * @author
 * @see NmDiscountProjectionImpl
 * @see com.stpl.app.model.NmDiscountProjection
 * @see com.stpl.app.model.NmDiscountProjectionModel
 * @generated
 */
public class NmDiscountProjectionModelImpl extends BaseModelImpl<NmDiscountProjection>
    implements NmDiscountProjectionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a nm discount projection model instance should use the {@link com.stpl.app.model.NmDiscountProjection} interface instead.
     */
    public static final String TABLE_NAME = "NM_DISCOUNT_PROJECTION";
    public static final Object[][] TABLE_COLUMNS = {
            { "PERIOD_SID", Types.INTEGER },
            { "PROJECTION_RATE", Types.DOUBLE },
            { "PROJECTION_DETAILS_SID", Types.INTEGER },
            { "PROJECTION_SALES", Types.DOUBLE }
        };
    public static final String TABLE_SQL_CREATE = "create table NM_DISCOUNT_PROJECTION (PERIOD_SID INTEGER not null IDENTITY,PROJECTION_RATE DOUBLE,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,PROJECTION_SALES DOUBLE,primary key (PERIOD_SID, PROJECTION_DETAILS_SID))";
    public static final String TABLE_SQL_DROP = "drop table NM_DISCOUNT_PROJECTION";
    public static final String ORDER_BY_JPQL = " ORDER BY nmDiscountProjection.id.periodSid ASC, nmDiscountProjection.id.projectionDetailsSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY NM_DISCOUNT_PROJECTION.PERIOD_SID ASC, NM_DISCOUNT_PROJECTION.PROJECTION_DETAILS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.NmDiscountProjection"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.NmDiscountProjection"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.NmDiscountProjection"));
    private static ClassLoader _classLoader = NmDiscountProjection.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            NmDiscountProjection.class
        };
    private int _periodSid;
    private double _projectionRate;
    private int _projectionDetailsSid;
    private double _projectionSales;
    private NmDiscountProjection _escapedModel;

    public NmDiscountProjectionModelImpl() {
    }

    @Override
    public NmDiscountProjectionPK getPrimaryKey() {
        return new NmDiscountProjectionPK(_periodSid, _projectionDetailsSid);
    }

    @Override
    public void setPrimaryKey(NmDiscountProjectionPK primaryKey) {
        setPeriodSid(primaryKey.periodSid);
        setProjectionDetailsSid(primaryKey.projectionDetailsSid);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new NmDiscountProjectionPK(_periodSid, _projectionDetailsSid);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((NmDiscountProjectionPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return NmDiscountProjection.class;
    }

    @Override
    public String getModelClassName() {
        return NmDiscountProjection.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("periodSid", getPeriodSid());
        attributes.put("projectionRate", getProjectionRate());
        attributes.put("projectionDetailsSid", getProjectionDetailsSid());
        attributes.put("projectionSales", getProjectionSales());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer periodSid = (Integer) attributes.get("periodSid");

        if (periodSid != null) {
            setPeriodSid(periodSid);
        }

        Double projectionRate = (Double) attributes.get("projectionRate");

        if (projectionRate != null) {
            setProjectionRate(projectionRate);
        }

        Integer projectionDetailsSid = (Integer) attributes.get(
                "projectionDetailsSid");

        if (projectionDetailsSid != null) {
            setProjectionDetailsSid(projectionDetailsSid);
        }

        Double projectionSales = (Double) attributes.get("projectionSales");

        if (projectionSales != null) {
            setProjectionSales(projectionSales);
        }
    }

    @Override
    public int getPeriodSid() {
        return _periodSid;
    }

    @Override
    public void setPeriodSid(int periodSid) {
        _periodSid = periodSid;
    }

    @Override
    public double getProjectionRate() {
        return _projectionRate;
    }

    @Override
    public void setProjectionRate(double projectionRate) {
        _projectionRate = projectionRate;
    }

    @Override
    public int getProjectionDetailsSid() {
        return _projectionDetailsSid;
    }

    @Override
    public void setProjectionDetailsSid(int projectionDetailsSid) {
        _projectionDetailsSid = projectionDetailsSid;
    }

    @Override
    public double getProjectionSales() {
        return _projectionSales;
    }

    @Override
    public void setProjectionSales(double projectionSales) {
        _projectionSales = projectionSales;
    }

    @Override
    public NmDiscountProjection toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (NmDiscountProjection) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NmDiscountProjectionImpl nmDiscountProjectionImpl = new NmDiscountProjectionImpl();

        nmDiscountProjectionImpl.setPeriodSid(getPeriodSid());
        nmDiscountProjectionImpl.setProjectionRate(getProjectionRate());
        nmDiscountProjectionImpl.setProjectionDetailsSid(getProjectionDetailsSid());
        nmDiscountProjectionImpl.setProjectionSales(getProjectionSales());

        nmDiscountProjectionImpl.resetOriginalValues();

        return nmDiscountProjectionImpl;
    }

    @Override
    public int compareTo(NmDiscountProjection nmDiscountProjection) {
        NmDiscountProjectionPK primaryKey = nmDiscountProjection.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof NmDiscountProjection)) {
            return false;
        }

        NmDiscountProjection nmDiscountProjection = (NmDiscountProjection) obj;

        NmDiscountProjectionPK primaryKey = nmDiscountProjection.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<NmDiscountProjection> toCacheModel() {
        NmDiscountProjectionCacheModel nmDiscountProjectionCacheModel = new NmDiscountProjectionCacheModel();

        nmDiscountProjectionCacheModel.periodSid = getPeriodSid();

        nmDiscountProjectionCacheModel.projectionRate = getProjectionRate();

        nmDiscountProjectionCacheModel.projectionDetailsSid = getProjectionDetailsSid();

        nmDiscountProjectionCacheModel.projectionSales = getProjectionSales();

        return nmDiscountProjectionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{periodSid=");
        sb.append(getPeriodSid());
        sb.append(", projectionRate=");
        sb.append(getProjectionRate());
        sb.append(", projectionDetailsSid=");
        sb.append(getProjectionDetailsSid());
        sb.append(", projectionSales=");
        sb.append(getProjectionSales());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.NmDiscountProjection");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>periodSid</column-name><column-value><![CDATA[");
        sb.append(getPeriodSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionRate</column-name><column-value><![CDATA[");
        sb.append(getProjectionRate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionSales</column-name><column-value><![CDATA[");
        sb.append(getProjectionSales());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
