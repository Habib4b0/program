package com.stpl.app.model.impl;

import com.stpl.app.model.StNmDiscountProjMaster;
import com.stpl.app.model.StNmDiscountProjMasterModel;
import com.stpl.app.service.persistence.StNmDiscountProjMasterPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StNmDiscountProjMaster service. Represents a row in the &quot;ST_NM_DISCOUNT_PROJ_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.StNmDiscountProjMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StNmDiscountProjMasterImpl}.
 * </p>
 *
 * @author
 * @see StNmDiscountProjMasterImpl
 * @see com.stpl.app.model.StNmDiscountProjMaster
 * @see com.stpl.app.model.StNmDiscountProjMasterModel
 * @generated
 */
public class StNmDiscountProjMasterModelImpl extends BaseModelImpl<StNmDiscountProjMaster>
    implements StNmDiscountProjMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a st nm discount proj master model instance should use the {@link com.stpl.app.model.StNmDiscountProjMaster} interface instead.
     */
    public static final String TABLE_NAME = "ST_NM_DISCOUNT_PROJ_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "SELECTED_PERIODS", Types.VARCHAR },
            { "METHODOLOGY", Types.VARCHAR },
            { "NET_FLAG", Types.VARCHAR },
            { "PRICE_GROUP_TYPE", Types.VARCHAR },
            { "USER_GROUP", Types.VARCHAR },
            { "USER_ID", Types.INTEGER },
            { "LAST_MODIFIED_DATE", Types.TIMESTAMP },
            { "PROJECTION_DETAILS_SID", Types.INTEGER },
            { "RS_MODEL_SID", Types.INTEGER },
            { "SESSION_ID", Types.INTEGER },
            { "CHECK_RECORD", Types.BOOLEAN },
            { "BASELINE_PERIODS", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table ST_NM_DISCOUNT_PROJ_MASTER (SELECTED_PERIODS VARCHAR(75) null,METHODOLOGY VARCHAR(75) null,NET_FLAG VARCHAR(75) null,PRICE_GROUP_TYPE VARCHAR(75) null,USER_GROUP VARCHAR(75) null,USER_ID INTEGER not null,LAST_MODIFIED_DATE DATE null,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,RS_MODEL_SID INTEGER not null IDENTITY,SESSION_ID INTEGER not null,CHECK_RECORD BOOLEAN,BASELINE_PERIODS VARCHAR(75) null,primary key (USER_ID, PROJECTION_DETAILS_SID, RS_MODEL_SID, SESSION_ID))";
    public static final String TABLE_SQL_DROP = "drop table ST_NM_DISCOUNT_PROJ_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY stNmDiscountProjMaster.id.userId ASC, stNmDiscountProjMaster.id.projectionDetailsSid ASC, stNmDiscountProjMaster.id.rsModelSid ASC, stNmDiscountProjMaster.id.sessionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ST_NM_DISCOUNT_PROJ_MASTER.USER_ID ASC, ST_NM_DISCOUNT_PROJ_MASTER.PROJECTION_DETAILS_SID ASC, ST_NM_DISCOUNT_PROJ_MASTER.RS_MODEL_SID ASC, ST_NM_DISCOUNT_PROJ_MASTER.SESSION_ID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.StNmDiscountProjMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.StNmDiscountProjMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.StNmDiscountProjMaster"));
    private static ClassLoader _classLoader = StNmDiscountProjMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            StNmDiscountProjMaster.class
        };
    private String _selectedPeriods;
    private String _methodology;
    private String _netFlag;
    private String _priceGroupType;
    private String _userGroup;
    private int _userId;
    private Date _lastModifiedDate;
    private int _projectionDetailsSid;
    private int _rsModelSid;
    private int _sessionId;
    private boolean _checkRecord;
    private String _baselinePeriods;
    private StNmDiscountProjMaster _escapedModel;

    public StNmDiscountProjMasterModelImpl() {
    }

    @Override
    public StNmDiscountProjMasterPK getPrimaryKey() {
        return new StNmDiscountProjMasterPK(_userId, _projectionDetailsSid,
            _rsModelSid, _sessionId);
    }

    @Override
    public void setPrimaryKey(StNmDiscountProjMasterPK primaryKey) {
        setUserId(primaryKey.userId);
        setProjectionDetailsSid(primaryKey.projectionDetailsSid);
        setRsModelSid(primaryKey.rsModelSid);
        setSessionId(primaryKey.sessionId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new StNmDiscountProjMasterPK(_userId, _projectionDetailsSid,
            _rsModelSid, _sessionId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((StNmDiscountProjMasterPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return StNmDiscountProjMaster.class;
    }

    @Override
    public String getModelClassName() {
        return StNmDiscountProjMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("selectedPeriods", getSelectedPeriods());
        attributes.put("methodology", getMethodology());
        attributes.put("netFlag", getNetFlag());
        attributes.put("priceGroupType", getPriceGroupType());
        attributes.put("userGroup", getUserGroup());
        attributes.put("userId", getUserId());
        attributes.put("lastModifiedDate", getLastModifiedDate());
        attributes.put("projectionDetailsSid", getProjectionDetailsSid());
        attributes.put("rsModelSid", getRsModelSid());
        attributes.put("sessionId", getSessionId());
        attributes.put("checkRecord", getCheckRecord());
        attributes.put("baselinePeriods", getBaselinePeriods());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String selectedPeriods = (String) attributes.get("selectedPeriods");

        if (selectedPeriods != null) {
            setSelectedPeriods(selectedPeriods);
        }

        String methodology = (String) attributes.get("methodology");

        if (methodology != null) {
            setMethodology(methodology);
        }

        String netFlag = (String) attributes.get("netFlag");

        if (netFlag != null) {
            setNetFlag(netFlag);
        }

        String priceGroupType = (String) attributes.get("priceGroupType");

        if (priceGroupType != null) {
            setPriceGroupType(priceGroupType);
        }

        String userGroup = (String) attributes.get("userGroup");

        if (userGroup != null) {
            setUserGroup(userGroup);
        }

        Integer userId = (Integer) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date lastModifiedDate = (Date) attributes.get("lastModifiedDate");

        if (lastModifiedDate != null) {
            setLastModifiedDate(lastModifiedDate);
        }

        Integer projectionDetailsSid = (Integer) attributes.get(
                "projectionDetailsSid");

        if (projectionDetailsSid != null) {
            setProjectionDetailsSid(projectionDetailsSid);
        }

        Integer rsModelSid = (Integer) attributes.get("rsModelSid");

        if (rsModelSid != null) {
            setRsModelSid(rsModelSid);
        }

        Integer sessionId = (Integer) attributes.get("sessionId");

        if (sessionId != null) {
            setSessionId(sessionId);
        }

        Boolean checkRecord = (Boolean) attributes.get("checkRecord");

        if (checkRecord != null) {
            setCheckRecord(checkRecord);
        }

        String baselinePeriods = (String) attributes.get("baselinePeriods");

        if (baselinePeriods != null) {
            setBaselinePeriods(baselinePeriods);
        }
    }

    @Override
    public String getSelectedPeriods() {
        if (_selectedPeriods == null) {
            return StringPool.BLANK;
        } else {
            return _selectedPeriods;
        }
    }

    @Override
    public void setSelectedPeriods(String selectedPeriods) {
        _selectedPeriods = selectedPeriods;
    }

    @Override
    public String getMethodology() {
        if (_methodology == null) {
            return StringPool.BLANK;
        } else {
            return _methodology;
        }
    }

    @Override
    public void setMethodology(String methodology) {
        _methodology = methodology;
    }

    @Override
    public String getNetFlag() {
        if (_netFlag == null) {
            return StringPool.BLANK;
        } else {
            return _netFlag;
        }
    }

    @Override
    public void setNetFlag(String netFlag) {
        _netFlag = netFlag;
    }

    @Override
    public String getPriceGroupType() {
        if (_priceGroupType == null) {
            return StringPool.BLANK;
        } else {
            return _priceGroupType;
        }
    }

    @Override
    public void setPriceGroupType(String priceGroupType) {
        _priceGroupType = priceGroupType;
    }

    @Override
    public String getUserGroup() {
        if (_userGroup == null) {
            return StringPool.BLANK;
        } else {
            return _userGroup;
        }
    }

    @Override
    public void setUserGroup(String userGroup) {
        _userGroup = userGroup;
    }

    @Override
    public int getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(int userId) {
        _userId = userId;
    }

    @Override
    public Date getLastModifiedDate() {
        return _lastModifiedDate;
    }

    @Override
    public void setLastModifiedDate(Date lastModifiedDate) {
        _lastModifiedDate = lastModifiedDate;
    }

    @Override
    public int getProjectionDetailsSid() {
        return _projectionDetailsSid;
    }

    @Override
    public void setProjectionDetailsSid(int projectionDetailsSid) {
        _projectionDetailsSid = projectionDetailsSid;
    }

    @Override
    public int getRsModelSid() {
        return _rsModelSid;
    }

    @Override
    public void setRsModelSid(int rsModelSid) {
        _rsModelSid = rsModelSid;
    }

    @Override
    public int getSessionId() {
        return _sessionId;
    }

    @Override
    public void setSessionId(int sessionId) {
        _sessionId = sessionId;
    }

    @Override
    public boolean getCheckRecord() {
        return _checkRecord;
    }

    @Override
    public boolean isCheckRecord() {
        return _checkRecord;
    }

    @Override
    public void setCheckRecord(boolean checkRecord) {
        _checkRecord = checkRecord;
    }

    @Override
    public String getBaselinePeriods() {
        if (_baselinePeriods == null) {
            return StringPool.BLANK;
        } else {
            return _baselinePeriods;
        }
    }

    @Override
    public void setBaselinePeriods(String baselinePeriods) {
        _baselinePeriods = baselinePeriods;
    }

    @Override
    public StNmDiscountProjMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (StNmDiscountProjMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        StNmDiscountProjMasterImpl stNmDiscountProjMasterImpl = new StNmDiscountProjMasterImpl();

        stNmDiscountProjMasterImpl.setSelectedPeriods(getSelectedPeriods());
        stNmDiscountProjMasterImpl.setMethodology(getMethodology());
        stNmDiscountProjMasterImpl.setNetFlag(getNetFlag());
        stNmDiscountProjMasterImpl.setPriceGroupType(getPriceGroupType());
        stNmDiscountProjMasterImpl.setUserGroup(getUserGroup());
        stNmDiscountProjMasterImpl.setUserId(getUserId());
        stNmDiscountProjMasterImpl.setLastModifiedDate(getLastModifiedDate());
        stNmDiscountProjMasterImpl.setProjectionDetailsSid(getProjectionDetailsSid());
        stNmDiscountProjMasterImpl.setRsModelSid(getRsModelSid());
        stNmDiscountProjMasterImpl.setSessionId(getSessionId());
        stNmDiscountProjMasterImpl.setCheckRecord(getCheckRecord());
        stNmDiscountProjMasterImpl.setBaselinePeriods(getBaselinePeriods());

        stNmDiscountProjMasterImpl.resetOriginalValues();

        return stNmDiscountProjMasterImpl;
    }

    @Override
    public int compareTo(StNmDiscountProjMaster stNmDiscountProjMaster) {
        StNmDiscountProjMasterPK primaryKey = stNmDiscountProjMaster.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof StNmDiscountProjMaster)) {
            return false;
        }

        StNmDiscountProjMaster stNmDiscountProjMaster = (StNmDiscountProjMaster) obj;

        StNmDiscountProjMasterPK primaryKey = stNmDiscountProjMaster.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<StNmDiscountProjMaster> toCacheModel() {
        StNmDiscountProjMasterCacheModel stNmDiscountProjMasterCacheModel = new StNmDiscountProjMasterCacheModel();

        stNmDiscountProjMasterCacheModel.selectedPeriods = getSelectedPeriods();

        String selectedPeriods = stNmDiscountProjMasterCacheModel.selectedPeriods;

        if ((selectedPeriods != null) && (selectedPeriods.length() == 0)) {
            stNmDiscountProjMasterCacheModel.selectedPeriods = null;
        }

        stNmDiscountProjMasterCacheModel.methodology = getMethodology();

        String methodology = stNmDiscountProjMasterCacheModel.methodology;

        if ((methodology != null) && (methodology.length() == 0)) {
            stNmDiscountProjMasterCacheModel.methodology = null;
        }

        stNmDiscountProjMasterCacheModel.netFlag = getNetFlag();

        String netFlag = stNmDiscountProjMasterCacheModel.netFlag;

        if ((netFlag != null) && (netFlag.length() == 0)) {
            stNmDiscountProjMasterCacheModel.netFlag = null;
        }

        stNmDiscountProjMasterCacheModel.priceGroupType = getPriceGroupType();

        String priceGroupType = stNmDiscountProjMasterCacheModel.priceGroupType;

        if ((priceGroupType != null) && (priceGroupType.length() == 0)) {
            stNmDiscountProjMasterCacheModel.priceGroupType = null;
        }

        stNmDiscountProjMasterCacheModel.userGroup = getUserGroup();

        String userGroup = stNmDiscountProjMasterCacheModel.userGroup;

        if ((userGroup != null) && (userGroup.length() == 0)) {
            stNmDiscountProjMasterCacheModel.userGroup = null;
        }

        stNmDiscountProjMasterCacheModel.userId = getUserId();

        Date lastModifiedDate = getLastModifiedDate();

        if (lastModifiedDate != null) {
            stNmDiscountProjMasterCacheModel.lastModifiedDate = lastModifiedDate.getTime();
        } else {
            stNmDiscountProjMasterCacheModel.lastModifiedDate = Long.MIN_VALUE;
        }

        stNmDiscountProjMasterCacheModel.projectionDetailsSid = getProjectionDetailsSid();

        stNmDiscountProjMasterCacheModel.rsModelSid = getRsModelSid();

        stNmDiscountProjMasterCacheModel.sessionId = getSessionId();

        stNmDiscountProjMasterCacheModel.checkRecord = getCheckRecord();

        stNmDiscountProjMasterCacheModel.baselinePeriods = getBaselinePeriods();

        String baselinePeriods = stNmDiscountProjMasterCacheModel.baselinePeriods;

        if ((baselinePeriods != null) && (baselinePeriods.length() == 0)) {
            stNmDiscountProjMasterCacheModel.baselinePeriods = null;
        }

        return stNmDiscountProjMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{selectedPeriods=");
        sb.append(getSelectedPeriods());
        sb.append(", methodology=");
        sb.append(getMethodology());
        sb.append(", netFlag=");
        sb.append(getNetFlag());
        sb.append(", priceGroupType=");
        sb.append(getPriceGroupType());
        sb.append(", userGroup=");
        sb.append(getUserGroup());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", lastModifiedDate=");
        sb.append(getLastModifiedDate());
        sb.append(", projectionDetailsSid=");
        sb.append(getProjectionDetailsSid());
        sb.append(", rsModelSid=");
        sb.append(getRsModelSid());
        sb.append(", sessionId=");
        sb.append(getSessionId());
        sb.append(", checkRecord=");
        sb.append(getCheckRecord());
        sb.append(", baselinePeriods=");
        sb.append(getBaselinePeriods());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.StNmDiscountProjMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>selectedPeriods</column-name><column-value><![CDATA[");
        sb.append(getSelectedPeriods());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>methodology</column-name><column-value><![CDATA[");
        sb.append(getMethodology());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>netFlag</column-name><column-value><![CDATA[");
        sb.append(getNetFlag());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceGroupType</column-name><column-value><![CDATA[");
        sb.append(getPriceGroupType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userGroup</column-name><column-value><![CDATA[");
        sb.append(getUserGroup());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
        sb.append(getLastModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rsModelSid</column-name><column-value><![CDATA[");
        sb.append(getRsModelSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sessionId</column-name><column-value><![CDATA[");
        sb.append(getSessionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>checkRecord</column-name><column-value><![CDATA[");
        sb.append(getCheckRecord());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baselinePeriods</column-name><column-value><![CDATA[");
        sb.append(getBaselinePeriods());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
