/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.VwDemandForecastActual;
import com.stpl.app.model.VwDemandForecastActualModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VwDemandForecastActual service. Represents a row in the &quot;vw_DEMAND_FORECAST_ACTUAL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VwDemandForecastActualModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VwDemandForecastActualImpl}.
 * </p>
 *
 * @author
 * @see VwDemandForecastActualImpl
 * @see VwDemandForecastActual
 * @see VwDemandForecastActualModel
 * @generated
 */
@ProviderType
public class VwDemandForecastActualModelImpl extends BaseModelImpl<VwDemandForecastActual>
	implements VwDemandForecastActualModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vw demand forecast actual model instance should use the {@link VwDemandForecastActual} interface instead.
	 */
	public static final String TABLE_NAME = "vw_DEMAND_FORECAST_ACTUAL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "FORECAST_YEAR", Types.VARCHAR },
			{ "GROSS_UNITS", Types.DOUBLE },
			{ "BUSINESS_UNIT_NO", Types.VARCHAR },
			{ "TOTAL_DEMAND_UNITS", Types.DOUBLE },
			{ "BRAND_NAME", Types.VARCHAR },
			{ "ITEM_ID", Types.VARCHAR },
			{ "ORGANIZATION_KEY", Types.VARCHAR },
			{ "SOURCE", Types.VARCHAR },
			{ "MARKET_SHARE_RATIO", Types.VARCHAR },
			{ "BUSINESS_UNIT_NAME", Types.VARCHAR },
			{ "DEMAND_FORECAST_ACTUAL_SID", Types.INTEGER },
			{ "MARKET_SHARE_UNITS", Types.DOUBLE },
			{ "INVENTORY_UNIT_CHANGE", Types.DOUBLE },
			{ "UNCAPTURED_UNITS_RATIO", Types.VARCHAR },
			{ "COUNTRY", Types.VARCHAR },
			{ "FORECAST_TYPE", Types.VARCHAR },
			{ "BRAND_ID", Types.VARCHAR },
			{ "IS_FORECAST", Types.VARCHAR },
			{ "UNCAPTURED_UNITS", Types.DOUBLE },
			{ "GROSS_PRICE", Types.DOUBLE },
			{ "IS_ACTIVE", Types.VARCHAR },
			{ "GROSS_AMOUNT", Types.DOUBLE },
			{ "BATCH_ID", Types.VARCHAR },
			{ "FORECAST_VER", Types.VARCHAR },
			{ "ITEM_NAME", Types.VARCHAR },
			{ "FORECAST_MONTH", Types.VARCHAR },
			{ "NET_SALES_PRICE", Types.DOUBLE },
			{ "NET_SALES_AMOUNT", Types.DOUBLE },
			{ "SEGMENT", Types.VARCHAR },
			{ "TOTAL_DEMAND_AMOUNT", Types.DOUBLE },
			{ "FORECAST_NAME", Types.VARCHAR },
			{ "MARKET_SIZE_UNITS", Types.DOUBLE },
			{ "DEMAND_ID", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("FORECAST_YEAR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("GROSS_UNITS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("BUSINESS_UNIT_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TOTAL_DEMAND_UNITS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("BRAND_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ORGANIZATION_KEY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MARKET_SHARE_RATIO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BUSINESS_UNIT_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEMAND_FORECAST_ACTUAL_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MARKET_SHARE_UNITS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("INVENTORY_UNIT_CHANGE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("UNCAPTURED_UNITS_RATIO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COUNTRY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BRAND_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IS_FORECAST", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UNCAPTURED_UNITS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("GROSS_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("IS_ACTIVE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("GROSS_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_VER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_MONTH", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NET_SALES_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("NET_SALES_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("SEGMENT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TOTAL_DEMAND_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("FORECAST_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MARKET_SIZE_UNITS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("DEMAND_ID", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table vw_DEMAND_FORECAST_ACTUAL (FORECAST_YEAR VARCHAR(75) null,GROSS_UNITS DOUBLE,BUSINESS_UNIT_NO VARCHAR(75) null,TOTAL_DEMAND_UNITS DOUBLE,BRAND_NAME VARCHAR(75) null,ITEM_ID VARCHAR(75) null,ORGANIZATION_KEY VARCHAR(75) null,SOURCE VARCHAR(75) null,MARKET_SHARE_RATIO VARCHAR(75) null,BUSINESS_UNIT_NAME VARCHAR(75) null,DEMAND_FORECAST_ACTUAL_SID INTEGER not null primary key,MARKET_SHARE_UNITS DOUBLE,INVENTORY_UNIT_CHANGE DOUBLE,UNCAPTURED_UNITS_RATIO VARCHAR(75) null,COUNTRY VARCHAR(75) null,FORECAST_TYPE VARCHAR(75) null,BRAND_ID VARCHAR(75) null,IS_FORECAST VARCHAR(75) null,UNCAPTURED_UNITS DOUBLE,GROSS_PRICE DOUBLE,IS_ACTIVE VARCHAR(75) null,GROSS_AMOUNT DOUBLE,BATCH_ID VARCHAR(75) null,FORECAST_VER VARCHAR(75) null,ITEM_NAME VARCHAR(75) null,FORECAST_MONTH VARCHAR(75) null,NET_SALES_PRICE DOUBLE,NET_SALES_AMOUNT DOUBLE,SEGMENT VARCHAR(75) null,TOTAL_DEMAND_AMOUNT DOUBLE,FORECAST_NAME VARCHAR(75) null,MARKET_SIZE_UNITS DOUBLE,DEMAND_ID INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table vw_DEMAND_FORECAST_ACTUAL";
	public static final String ORDER_BY_JPQL = " ORDER BY vwDemandForecastActual.demandForecastActualSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vw_DEMAND_FORECAST_ACTUAL.DEMAND_FORECAST_ACTUAL_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.VwDemandForecastActual"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.VwDemandForecastActual"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.VwDemandForecastActual"));

	public VwDemandForecastActualModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _demandForecastActualSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setDemandForecastActualSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _demandForecastActualSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VwDemandForecastActual.class;
	}

	@Override
	public String getModelClassName() {
		return VwDemandForecastActual.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("forecastYear", getForecastYear());
		attributes.put("grossUnits", getGrossUnits());
		attributes.put("businessUnitNo", getBusinessUnitNo());
		attributes.put("totalDemandUnits", getTotalDemandUnits());
		attributes.put("brandName", getBrandName());
		attributes.put("itemId", getItemId());
		attributes.put("organizationKey", getOrganizationKey());
		attributes.put("source", getSource());
		attributes.put("marketShareRatio", getMarketShareRatio());
		attributes.put("businessUnitName", getBusinessUnitName());
		attributes.put("demandForecastActualSid", getDemandForecastActualSid());
		attributes.put("marketShareUnits", getMarketShareUnits());
		attributes.put("inventoryUnitChange", getInventoryUnitChange());
		attributes.put("uncapturedUnitsRatio", getUncapturedUnitsRatio());
		attributes.put("country", getCountry());
		attributes.put("forecastType", getForecastType());
		attributes.put("brandId", getBrandId());
		attributes.put("isForecast", getIsForecast());
		attributes.put("uncapturedUnits", getUncapturedUnits());
		attributes.put("grossPrice", getGrossPrice());
		attributes.put("isActive", getIsActive());
		attributes.put("grossAmount", getGrossAmount());
		attributes.put("batchId", getBatchId());
		attributes.put("forecastVer", getForecastVer());
		attributes.put("itemName", getItemName());
		attributes.put("forecastMonth", getForecastMonth());
		attributes.put("netSalesPrice", getNetSalesPrice());
		attributes.put("netSalesAmount", getNetSalesAmount());
		attributes.put("segment", getSegment());
		attributes.put("totalDemandAmount", getTotalDemandAmount());
		attributes.put("forecastName", getForecastName());
		attributes.put("marketSizeUnits", getMarketSizeUnits());
		attributes.put("demandId", getDemandId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String forecastYear = (String)attributes.get("forecastYear");

		if (forecastYear != null) {
			setForecastYear(forecastYear);
		}

		Double grossUnits = (Double)attributes.get("grossUnits");

		if (grossUnits != null) {
			setGrossUnits(grossUnits);
		}

		String businessUnitNo = (String)attributes.get("businessUnitNo");

		if (businessUnitNo != null) {
			setBusinessUnitNo(businessUnitNo);
		}

		Double totalDemandUnits = (Double)attributes.get("totalDemandUnits");

		if (totalDemandUnits != null) {
			setTotalDemandUnits(totalDemandUnits);
		}

		String brandName = (String)attributes.get("brandName");

		if (brandName != null) {
			setBrandName(brandName);
		}

		String itemId = (String)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		String organizationKey = (String)attributes.get("organizationKey");

		if (organizationKey != null) {
			setOrganizationKey(organizationKey);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String marketShareRatio = (String)attributes.get("marketShareRatio");

		if (marketShareRatio != null) {
			setMarketShareRatio(marketShareRatio);
		}

		String businessUnitName = (String)attributes.get("businessUnitName");

		if (businessUnitName != null) {
			setBusinessUnitName(businessUnitName);
		}

		Integer demandForecastActualSid = (Integer)attributes.get(
				"demandForecastActualSid");

		if (demandForecastActualSid != null) {
			setDemandForecastActualSid(demandForecastActualSid);
		}

		Double marketShareUnits = (Double)attributes.get("marketShareUnits");

		if (marketShareUnits != null) {
			setMarketShareUnits(marketShareUnits);
		}

		Double inventoryUnitChange = (Double)attributes.get(
				"inventoryUnitChange");

		if (inventoryUnitChange != null) {
			setInventoryUnitChange(inventoryUnitChange);
		}

		String uncapturedUnitsRatio = (String)attributes.get(
				"uncapturedUnitsRatio");

		if (uncapturedUnitsRatio != null) {
			setUncapturedUnitsRatio(uncapturedUnitsRatio);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		String forecastType = (String)attributes.get("forecastType");

		if (forecastType != null) {
			setForecastType(forecastType);
		}

		String brandId = (String)attributes.get("brandId");

		if (brandId != null) {
			setBrandId(brandId);
		}

		String isForecast = (String)attributes.get("isForecast");

		if (isForecast != null) {
			setIsForecast(isForecast);
		}

		Double uncapturedUnits = (Double)attributes.get("uncapturedUnits");

		if (uncapturedUnits != null) {
			setUncapturedUnits(uncapturedUnits);
		}

		Double grossPrice = (Double)attributes.get("grossPrice");

		if (grossPrice != null) {
			setGrossPrice(grossPrice);
		}

		String isActive = (String)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}

		Double grossAmount = (Double)attributes.get("grossAmount");

		if (grossAmount != null) {
			setGrossAmount(grossAmount);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		String forecastVer = (String)attributes.get("forecastVer");

		if (forecastVer != null) {
			setForecastVer(forecastVer);
		}

		String itemName = (String)attributes.get("itemName");

		if (itemName != null) {
			setItemName(itemName);
		}

		String forecastMonth = (String)attributes.get("forecastMonth");

		if (forecastMonth != null) {
			setForecastMonth(forecastMonth);
		}

		Double netSalesPrice = (Double)attributes.get("netSalesPrice");

		if (netSalesPrice != null) {
			setNetSalesPrice(netSalesPrice);
		}

		Double netSalesAmount = (Double)attributes.get("netSalesAmount");

		if (netSalesAmount != null) {
			setNetSalesAmount(netSalesAmount);
		}

		String segment = (String)attributes.get("segment");

		if (segment != null) {
			setSegment(segment);
		}

		Double totalDemandAmount = (Double)attributes.get("totalDemandAmount");

		if (totalDemandAmount != null) {
			setTotalDemandAmount(totalDemandAmount);
		}

		String forecastName = (String)attributes.get("forecastName");

		if (forecastName != null) {
			setForecastName(forecastName);
		}

		Double marketSizeUnits = (Double)attributes.get("marketSizeUnits");

		if (marketSizeUnits != null) {
			setMarketSizeUnits(marketSizeUnits);
		}

		Integer demandId = (Integer)attributes.get("demandId");

		if (demandId != null) {
			setDemandId(demandId);
		}
	}

	@Override
	public String getForecastYear() {
		if (_forecastYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastYear;
		}
	}

	@Override
	public void setForecastYear(String forecastYear) {
		_forecastYear = forecastYear;
	}

	@Override
	public double getGrossUnits() {
		return _grossUnits;
	}

	@Override
	public void setGrossUnits(double grossUnits) {
		_grossUnits = grossUnits;
	}

	@Override
	public String getBusinessUnitNo() {
		if (_businessUnitNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessUnitNo;
		}
	}

	@Override
	public void setBusinessUnitNo(String businessUnitNo) {
		_businessUnitNo = businessUnitNo;
	}

	@Override
	public double getTotalDemandUnits() {
		return _totalDemandUnits;
	}

	@Override
	public void setTotalDemandUnits(double totalDemandUnits) {
		_totalDemandUnits = totalDemandUnits;
	}

	@Override
	public String getBrandName() {
		if (_brandName == null) {
			return StringPool.BLANK;
		}
		else {
			return _brandName;
		}
	}

	@Override
	public void setBrandName(String brandName) {
		_brandName = brandName;
	}

	@Override
	public String getItemId() {
		if (_itemId == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemId;
		}
	}

	@Override
	public void setItemId(String itemId) {
		_itemId = itemId;
	}

	@Override
	public String getOrganizationKey() {
		if (_organizationKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _organizationKey;
		}
	}

	@Override
	public void setOrganizationKey(String organizationKey) {
		_organizationKey = organizationKey;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getMarketShareRatio() {
		if (_marketShareRatio == null) {
			return StringPool.BLANK;
		}
		else {
			return _marketShareRatio;
		}
	}

	@Override
	public void setMarketShareRatio(String marketShareRatio) {
		_marketShareRatio = marketShareRatio;
	}

	@Override
	public String getBusinessUnitName() {
		if (_businessUnitName == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessUnitName;
		}
	}

	@Override
	public void setBusinessUnitName(String businessUnitName) {
		_businessUnitName = businessUnitName;
	}

	@Override
	public int getDemandForecastActualSid() {
		return _demandForecastActualSid;
	}

	@Override
	public void setDemandForecastActualSid(int demandForecastActualSid) {
		_demandForecastActualSid = demandForecastActualSid;
	}

	@Override
	public double getMarketShareUnits() {
		return _marketShareUnits;
	}

	@Override
	public void setMarketShareUnits(double marketShareUnits) {
		_marketShareUnits = marketShareUnits;
	}

	@Override
	public double getInventoryUnitChange() {
		return _inventoryUnitChange;
	}

	@Override
	public void setInventoryUnitChange(double inventoryUnitChange) {
		_inventoryUnitChange = inventoryUnitChange;
	}

	@Override
	public String getUncapturedUnitsRatio() {
		if (_uncapturedUnitsRatio == null) {
			return StringPool.BLANK;
		}
		else {
			return _uncapturedUnitsRatio;
		}
	}

	@Override
	public void setUncapturedUnitsRatio(String uncapturedUnitsRatio) {
		_uncapturedUnitsRatio = uncapturedUnitsRatio;
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public String getForecastType() {
		if (_forecastType == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastType;
		}
	}

	@Override
	public void setForecastType(String forecastType) {
		_forecastType = forecastType;
	}

	@Override
	public String getBrandId() {
		if (_brandId == null) {
			return StringPool.BLANK;
		}
		else {
			return _brandId;
		}
	}

	@Override
	public void setBrandId(String brandId) {
		_brandId = brandId;
	}

	@Override
	public String getIsForecast() {
		if (_isForecast == null) {
			return StringPool.BLANK;
		}
		else {
			return _isForecast;
		}
	}

	@Override
	public void setIsForecast(String isForecast) {
		_isForecast = isForecast;
	}

	@Override
	public double getUncapturedUnits() {
		return _uncapturedUnits;
	}

	@Override
	public void setUncapturedUnits(double uncapturedUnits) {
		_uncapturedUnits = uncapturedUnits;
	}

	@Override
	public double getGrossPrice() {
		return _grossPrice;
	}

	@Override
	public void setGrossPrice(double grossPrice) {
		_grossPrice = grossPrice;
	}

	@Override
	public String getIsActive() {
		if (_isActive == null) {
			return StringPool.BLANK;
		}
		else {
			return _isActive;
		}
	}

	@Override
	public void setIsActive(String isActive) {
		_isActive = isActive;
	}

	@Override
	public double getGrossAmount() {
		return _grossAmount;
	}

	@Override
	public void setGrossAmount(double grossAmount) {
		_grossAmount = grossAmount;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public String getForecastVer() {
		if (_forecastVer == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastVer;
		}
	}

	@Override
	public void setForecastVer(String forecastVer) {
		_forecastVer = forecastVer;
	}

	@Override
	public String getItemName() {
		if (_itemName == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemName;
		}
	}

	@Override
	public void setItemName(String itemName) {
		_itemName = itemName;
	}

	@Override
	public String getForecastMonth() {
		if (_forecastMonth == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastMonth;
		}
	}

	@Override
	public void setForecastMonth(String forecastMonth) {
		_forecastMonth = forecastMonth;
	}

	@Override
	public double getNetSalesPrice() {
		return _netSalesPrice;
	}

	@Override
	public void setNetSalesPrice(double netSalesPrice) {
		_netSalesPrice = netSalesPrice;
	}

	@Override
	public double getNetSalesAmount() {
		return _netSalesAmount;
	}

	@Override
	public void setNetSalesAmount(double netSalesAmount) {
		_netSalesAmount = netSalesAmount;
	}

	@Override
	public String getSegment() {
		if (_segment == null) {
			return StringPool.BLANK;
		}
		else {
			return _segment;
		}
	}

	@Override
	public void setSegment(String segment) {
		_segment = segment;
	}

	@Override
	public double getTotalDemandAmount() {
		return _totalDemandAmount;
	}

	@Override
	public void setTotalDemandAmount(double totalDemandAmount) {
		_totalDemandAmount = totalDemandAmount;
	}

	@Override
	public String getForecastName() {
		if (_forecastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastName;
		}
	}

	@Override
	public void setForecastName(String forecastName) {
		_forecastName = forecastName;
	}

	@Override
	public double getMarketSizeUnits() {
		return _marketSizeUnits;
	}

	@Override
	public void setMarketSizeUnits(double marketSizeUnits) {
		_marketSizeUnits = marketSizeUnits;
	}

	@Override
	public int getDemandId() {
		return _demandId;
	}

	@Override
	public void setDemandId(int demandId) {
		_demandId = demandId;
	}

	@Override
	public VwDemandForecastActual toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VwDemandForecastActual)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VwDemandForecastActualImpl vwDemandForecastActualImpl = new VwDemandForecastActualImpl();

		vwDemandForecastActualImpl.setForecastYear(getForecastYear());
		vwDemandForecastActualImpl.setGrossUnits(getGrossUnits());
		vwDemandForecastActualImpl.setBusinessUnitNo(getBusinessUnitNo());
		vwDemandForecastActualImpl.setTotalDemandUnits(getTotalDemandUnits());
		vwDemandForecastActualImpl.setBrandName(getBrandName());
		vwDemandForecastActualImpl.setItemId(getItemId());
		vwDemandForecastActualImpl.setOrganizationKey(getOrganizationKey());
		vwDemandForecastActualImpl.setSource(getSource());
		vwDemandForecastActualImpl.setMarketShareRatio(getMarketShareRatio());
		vwDemandForecastActualImpl.setBusinessUnitName(getBusinessUnitName());
		vwDemandForecastActualImpl.setDemandForecastActualSid(getDemandForecastActualSid());
		vwDemandForecastActualImpl.setMarketShareUnits(getMarketShareUnits());
		vwDemandForecastActualImpl.setInventoryUnitChange(getInventoryUnitChange());
		vwDemandForecastActualImpl.setUncapturedUnitsRatio(getUncapturedUnitsRatio());
		vwDemandForecastActualImpl.setCountry(getCountry());
		vwDemandForecastActualImpl.setForecastType(getForecastType());
		vwDemandForecastActualImpl.setBrandId(getBrandId());
		vwDemandForecastActualImpl.setIsForecast(getIsForecast());
		vwDemandForecastActualImpl.setUncapturedUnits(getUncapturedUnits());
		vwDemandForecastActualImpl.setGrossPrice(getGrossPrice());
		vwDemandForecastActualImpl.setIsActive(getIsActive());
		vwDemandForecastActualImpl.setGrossAmount(getGrossAmount());
		vwDemandForecastActualImpl.setBatchId(getBatchId());
		vwDemandForecastActualImpl.setForecastVer(getForecastVer());
		vwDemandForecastActualImpl.setItemName(getItemName());
		vwDemandForecastActualImpl.setForecastMonth(getForecastMonth());
		vwDemandForecastActualImpl.setNetSalesPrice(getNetSalesPrice());
		vwDemandForecastActualImpl.setNetSalesAmount(getNetSalesAmount());
		vwDemandForecastActualImpl.setSegment(getSegment());
		vwDemandForecastActualImpl.setTotalDemandAmount(getTotalDemandAmount());
		vwDemandForecastActualImpl.setForecastName(getForecastName());
		vwDemandForecastActualImpl.setMarketSizeUnits(getMarketSizeUnits());
		vwDemandForecastActualImpl.setDemandId(getDemandId());

		vwDemandForecastActualImpl.resetOriginalValues();

		return vwDemandForecastActualImpl;
	}

	@Override
	public int compareTo(VwDemandForecastActual vwDemandForecastActual) {
		int primaryKey = vwDemandForecastActual.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VwDemandForecastActual)) {
			return false;
		}

		VwDemandForecastActual vwDemandForecastActual = (VwDemandForecastActual)obj;

		int primaryKey = vwDemandForecastActual.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<VwDemandForecastActual> toCacheModel() {
		VwDemandForecastActualCacheModel vwDemandForecastActualCacheModel = new VwDemandForecastActualCacheModel();

		vwDemandForecastActualCacheModel.forecastYear = getForecastYear();

		String forecastYear = vwDemandForecastActualCacheModel.forecastYear;

		if ((forecastYear != null) && (forecastYear.length() == 0)) {
			vwDemandForecastActualCacheModel.forecastYear = null;
		}

		vwDemandForecastActualCacheModel.grossUnits = getGrossUnits();

		vwDemandForecastActualCacheModel.businessUnitNo = getBusinessUnitNo();

		String businessUnitNo = vwDemandForecastActualCacheModel.businessUnitNo;

		if ((businessUnitNo != null) && (businessUnitNo.length() == 0)) {
			vwDemandForecastActualCacheModel.businessUnitNo = null;
		}

		vwDemandForecastActualCacheModel.totalDemandUnits = getTotalDemandUnits();

		vwDemandForecastActualCacheModel.brandName = getBrandName();

		String brandName = vwDemandForecastActualCacheModel.brandName;

		if ((brandName != null) && (brandName.length() == 0)) {
			vwDemandForecastActualCacheModel.brandName = null;
		}

		vwDemandForecastActualCacheModel.itemId = getItemId();

		String itemId = vwDemandForecastActualCacheModel.itemId;

		if ((itemId != null) && (itemId.length() == 0)) {
			vwDemandForecastActualCacheModel.itemId = null;
		}

		vwDemandForecastActualCacheModel.organizationKey = getOrganizationKey();

		String organizationKey = vwDemandForecastActualCacheModel.organizationKey;

		if ((organizationKey != null) && (organizationKey.length() == 0)) {
			vwDemandForecastActualCacheModel.organizationKey = null;
		}

		vwDemandForecastActualCacheModel.source = getSource();

		String source = vwDemandForecastActualCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			vwDemandForecastActualCacheModel.source = null;
		}

		vwDemandForecastActualCacheModel.marketShareRatio = getMarketShareRatio();

		String marketShareRatio = vwDemandForecastActualCacheModel.marketShareRatio;

		if ((marketShareRatio != null) && (marketShareRatio.length() == 0)) {
			vwDemandForecastActualCacheModel.marketShareRatio = null;
		}

		vwDemandForecastActualCacheModel.businessUnitName = getBusinessUnitName();

		String businessUnitName = vwDemandForecastActualCacheModel.businessUnitName;

		if ((businessUnitName != null) && (businessUnitName.length() == 0)) {
			vwDemandForecastActualCacheModel.businessUnitName = null;
		}

		vwDemandForecastActualCacheModel.demandForecastActualSid = getDemandForecastActualSid();

		vwDemandForecastActualCacheModel.marketShareUnits = getMarketShareUnits();

		vwDemandForecastActualCacheModel.inventoryUnitChange = getInventoryUnitChange();

		vwDemandForecastActualCacheModel.uncapturedUnitsRatio = getUncapturedUnitsRatio();

		String uncapturedUnitsRatio = vwDemandForecastActualCacheModel.uncapturedUnitsRatio;

		if ((uncapturedUnitsRatio != null) &&
				(uncapturedUnitsRatio.length() == 0)) {
			vwDemandForecastActualCacheModel.uncapturedUnitsRatio = null;
		}

		vwDemandForecastActualCacheModel.country = getCountry();

		String country = vwDemandForecastActualCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			vwDemandForecastActualCacheModel.country = null;
		}

		vwDemandForecastActualCacheModel.forecastType = getForecastType();

		String forecastType = vwDemandForecastActualCacheModel.forecastType;

		if ((forecastType != null) && (forecastType.length() == 0)) {
			vwDemandForecastActualCacheModel.forecastType = null;
		}

		vwDemandForecastActualCacheModel.brandId = getBrandId();

		String brandId = vwDemandForecastActualCacheModel.brandId;

		if ((brandId != null) && (brandId.length() == 0)) {
			vwDemandForecastActualCacheModel.brandId = null;
		}

		vwDemandForecastActualCacheModel.isForecast = getIsForecast();

		String isForecast = vwDemandForecastActualCacheModel.isForecast;

		if ((isForecast != null) && (isForecast.length() == 0)) {
			vwDemandForecastActualCacheModel.isForecast = null;
		}

		vwDemandForecastActualCacheModel.uncapturedUnits = getUncapturedUnits();

		vwDemandForecastActualCacheModel.grossPrice = getGrossPrice();

		vwDemandForecastActualCacheModel.isActive = getIsActive();

		String isActive = vwDemandForecastActualCacheModel.isActive;

		if ((isActive != null) && (isActive.length() == 0)) {
			vwDemandForecastActualCacheModel.isActive = null;
		}

		vwDemandForecastActualCacheModel.grossAmount = getGrossAmount();

		vwDemandForecastActualCacheModel.batchId = getBatchId();

		String batchId = vwDemandForecastActualCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			vwDemandForecastActualCacheModel.batchId = null;
		}

		vwDemandForecastActualCacheModel.forecastVer = getForecastVer();

		String forecastVer = vwDemandForecastActualCacheModel.forecastVer;

		if ((forecastVer != null) && (forecastVer.length() == 0)) {
			vwDemandForecastActualCacheModel.forecastVer = null;
		}

		vwDemandForecastActualCacheModel.itemName = getItemName();

		String itemName = vwDemandForecastActualCacheModel.itemName;

		if ((itemName != null) && (itemName.length() == 0)) {
			vwDemandForecastActualCacheModel.itemName = null;
		}

		vwDemandForecastActualCacheModel.forecastMonth = getForecastMonth();

		String forecastMonth = vwDemandForecastActualCacheModel.forecastMonth;

		if ((forecastMonth != null) && (forecastMonth.length() == 0)) {
			vwDemandForecastActualCacheModel.forecastMonth = null;
		}

		vwDemandForecastActualCacheModel.netSalesPrice = getNetSalesPrice();

		vwDemandForecastActualCacheModel.netSalesAmount = getNetSalesAmount();

		vwDemandForecastActualCacheModel.segment = getSegment();

		String segment = vwDemandForecastActualCacheModel.segment;

		if ((segment != null) && (segment.length() == 0)) {
			vwDemandForecastActualCacheModel.segment = null;
		}

		vwDemandForecastActualCacheModel.totalDemandAmount = getTotalDemandAmount();

		vwDemandForecastActualCacheModel.forecastName = getForecastName();

		String forecastName = vwDemandForecastActualCacheModel.forecastName;

		if ((forecastName != null) && (forecastName.length() == 0)) {
			vwDemandForecastActualCacheModel.forecastName = null;
		}

		vwDemandForecastActualCacheModel.marketSizeUnits = getMarketSizeUnits();

		vwDemandForecastActualCacheModel.demandId = getDemandId();

		return vwDemandForecastActualCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(67);

		sb.append("{forecastYear=");
		sb.append(getForecastYear());
		sb.append(", grossUnits=");
		sb.append(getGrossUnits());
		sb.append(", businessUnitNo=");
		sb.append(getBusinessUnitNo());
		sb.append(", totalDemandUnits=");
		sb.append(getTotalDemandUnits());
		sb.append(", brandName=");
		sb.append(getBrandName());
		sb.append(", itemId=");
		sb.append(getItemId());
		sb.append(", organizationKey=");
		sb.append(getOrganizationKey());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", marketShareRatio=");
		sb.append(getMarketShareRatio());
		sb.append(", businessUnitName=");
		sb.append(getBusinessUnitName());
		sb.append(", demandForecastActualSid=");
		sb.append(getDemandForecastActualSid());
		sb.append(", marketShareUnits=");
		sb.append(getMarketShareUnits());
		sb.append(", inventoryUnitChange=");
		sb.append(getInventoryUnitChange());
		sb.append(", uncapturedUnitsRatio=");
		sb.append(getUncapturedUnitsRatio());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", forecastType=");
		sb.append(getForecastType());
		sb.append(", brandId=");
		sb.append(getBrandId());
		sb.append(", isForecast=");
		sb.append(getIsForecast());
		sb.append(", uncapturedUnits=");
		sb.append(getUncapturedUnits());
		sb.append(", grossPrice=");
		sb.append(getGrossPrice());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append(", grossAmount=");
		sb.append(getGrossAmount());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", forecastVer=");
		sb.append(getForecastVer());
		sb.append(", itemName=");
		sb.append(getItemName());
		sb.append(", forecastMonth=");
		sb.append(getForecastMonth());
		sb.append(", netSalesPrice=");
		sb.append(getNetSalesPrice());
		sb.append(", netSalesAmount=");
		sb.append(getNetSalesAmount());
		sb.append(", segment=");
		sb.append(getSegment());
		sb.append(", totalDemandAmount=");
		sb.append(getTotalDemandAmount());
		sb.append(", forecastName=");
		sb.append(getForecastName());
		sb.append(", marketSizeUnits=");
		sb.append(getMarketSizeUnits());
		sb.append(", demandId=");
		sb.append(getDemandId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(103);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.VwDemandForecastActual");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>forecastYear</column-name><column-value><![CDATA[");
		sb.append(getForecastYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossUnits</column-name><column-value><![CDATA[");
		sb.append(getGrossUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessUnitNo</column-name><column-value><![CDATA[");
		sb.append(getBusinessUnitNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalDemandUnits</column-name><column-value><![CDATA[");
		sb.append(getTotalDemandUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brandName</column-name><column-value><![CDATA[");
		sb.append(getBrandName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationKey</column-name><column-value><![CDATA[");
		sb.append(getOrganizationKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketShareRatio</column-name><column-value><![CDATA[");
		sb.append(getMarketShareRatio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessUnitName</column-name><column-value><![CDATA[");
		sb.append(getBusinessUnitName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>demandForecastActualSid</column-name><column-value><![CDATA[");
		sb.append(getDemandForecastActualSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketShareUnits</column-name><column-value><![CDATA[");
		sb.append(getMarketShareUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inventoryUnitChange</column-name><column-value><![CDATA[");
		sb.append(getInventoryUnitChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uncapturedUnitsRatio</column-name><column-value><![CDATA[");
		sb.append(getUncapturedUnitsRatio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastType</column-name><column-value><![CDATA[");
		sb.append(getForecastType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brandId</column-name><column-value><![CDATA[");
		sb.append(getBrandId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isForecast</column-name><column-value><![CDATA[");
		sb.append(getIsForecast());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uncapturedUnits</column-name><column-value><![CDATA[");
		sb.append(getUncapturedUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossPrice</column-name><column-value><![CDATA[");
		sb.append(getGrossPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossAmount</column-name><column-value><![CDATA[");
		sb.append(getGrossAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastVer</column-name><column-value><![CDATA[");
		sb.append(getForecastVer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemName</column-name><column-value><![CDATA[");
		sb.append(getItemName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastMonth</column-name><column-value><![CDATA[");
		sb.append(getForecastMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSalesPrice</column-name><column-value><![CDATA[");
		sb.append(getNetSalesPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSalesAmount</column-name><column-value><![CDATA[");
		sb.append(getNetSalesAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>segment</column-name><column-value><![CDATA[");
		sb.append(getSegment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalDemandAmount</column-name><column-value><![CDATA[");
		sb.append(getTotalDemandAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastName</column-name><column-value><![CDATA[");
		sb.append(getForecastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketSizeUnits</column-name><column-value><![CDATA[");
		sb.append(getMarketSizeUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>demandId</column-name><column-value><![CDATA[");
		sb.append(getDemandId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VwDemandForecastActual.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VwDemandForecastActual.class
		};
	private String _forecastYear;
	private double _grossUnits;
	private String _businessUnitNo;
	private double _totalDemandUnits;
	private String _brandName;
	private String _itemId;
	private String _organizationKey;
	private String _source;
	private String _marketShareRatio;
	private String _businessUnitName;
	private int _demandForecastActualSid;
	private double _marketShareUnits;
	private double _inventoryUnitChange;
	private String _uncapturedUnitsRatio;
	private String _country;
	private String _forecastType;
	private String _brandId;
	private String _isForecast;
	private double _uncapturedUnits;
	private double _grossPrice;
	private String _isActive;
	private double _grossAmount;
	private String _batchId;
	private String _forecastVer;
	private String _itemName;
	private String _forecastMonth;
	private double _netSalesPrice;
	private double _netSalesAmount;
	private String _segment;
	private double _totalDemandAmount;
	private String _forecastName;
	private double _marketSizeUnits;
	private int _demandId;
	private VwDemandForecastActual _escapedModel;
}