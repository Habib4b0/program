
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stpl.app.cff.ui;

import com.stpl.app.cff.util.HelperListUtil;
import com.stpl.app.cff.security.StplSecurity;
import com.stpl.app.cff.ui.view.ConsolidatedFinancialForecastView;
import com.stpl.app.cff.util.CommonUtils;
import com.stpl.app.cff.util.ConstantsUtil;
import com.stpl.portal.kernel.exception.SystemException;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.Navigator;
import com.vaadin.server.DefaultErrorHandler;
import com.vaadin.server.VaadinRequest;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.UI;
import javax.portlet.PortletMode;
import org.jboss.logging.Logger;
import org.vaadin.alump.beforeunload.BeforeUnload;

/**
 * CFF Main UI
 *
 * @author shrihariharan
 */
  public class ConsolidatedFinancialForecastUI extends UI  {

    private static final long serialVersionUID = -1698071209409581013L;
    @AutoGenerated
    private Navigator navigator;
    PortletMode customMode;
     public static boolean EXCEL_CLOSE =false;
    /**
     * Logger constant for the class ConsolidatedFinancialForecastUI
     */
    private static final Logger LOGGER = Logger.getLogger(ConsolidatedFinancialForecastUI.class);

    /**
     * Override methods called from UI class
     *
     * @param request - Vaadin request parameter
     */
    public ConsolidatedFinancialForecastUI() throws SystemException {
        StplSecurity.getUserName();
    }

    protected void init(VaadinRequest request) {
        try {
            LOGGER.info("init method started");
            beforeUnloadCloseUi();
            setId(CommonUtils.MODULE_NAME);
            navigator = new Navigator(this, this);
            addStyleName("bootstrap bootstrap-ui bootstrap-forecast bootstrap-nm");
            final String userId = request.getRemoteUser();
            final String sessionId = request.getWrappedSession().getId();
            navigator = new Navigator(this, this);
            HelperListUtil helperListUtil = HelperListUtil.getInstance();
            helperListUtil.loadValuesWithListName(CommonUtils.MODULE_NAME);
            VaadinSession.getCurrent().setAttribute(ConstantsUtil.SESSION_ID, sessionId);
            VaadinSession.getCurrent().setAttribute(ConstantsUtil.USER_ID, userId);
            StplSecurity.getUserName();

            navigator.addView(ConsolidatedFinancialForecastView.NAME, new ConsolidatedFinancialForecastView());

            navigator.setErrorView(new ConsolidatedFinancialForecastView());


//            customMode = new PortletMode("config");
//            if (VaadinSession.getCurrent() instanceof VaadinPortletSession) {
//                VaadinPortletSession portletsession = (VaadinPortletSession) VaadinSession.getCurrent();
//                // Add a custom listener to handle action and
//                // render requests.
//                portletsession.addPortletListener(this);
//            }
            LOGGER.info("init method ends");
        } catch (Exception ex) {
            LOGGER.error(ex);
        }

    
//         Configure the error handler for the UI
        UI.getCurrent().setErrorHandler(new DefaultErrorHandler() {
            @Override
            public void error(com.vaadin.server.ErrorEvent event) {
                // Find the final cause
                String cause = "The Exception occured because of: ";
                for (Throwable t = event.getThrowable(); t != null; t = t.getCause()) {
                    if (t.getCause() == null) // We're at final cause
                    {

                        cause += t.getClass().getName();
    }

                }

                LOGGER.error(cause);
                // Do the default error handling (optional)
            }
        });
    }
//    @Override
//    public void handleRenderRequest(RenderRequest request, RenderResponse response, UI uI) {
//        VaadinSession.getCurrent().getNextUIid();
//        Collection<UI> uiList = VaadinSession.getCurrent().getUIs();
//        for (Iterator<UI> iterator = uiList.iterator(); iterator.hasNext();) {
//
//            UI ui2 = (UI) iterator.next();
//            if (ui2.getId().equals(CommonUtils.MODULE_NAME)) {
//                ui2.close();
//            }
//        }
//        getUI().getNavigator().navigateTo(ConsolidatedFinancialForecastView.NAME);
//    }
//
//    public void handleActionRequest(ActionRequest request, ActionResponse response, UI uI) {
//    }
//
//    public void handleEventRequest(EventRequest request, EventResponse response, UI uI) {
//    }
//
//    public void handleResourceRequest(ResourceRequest request, ResourceResponse response, UI uI) {
//    }
    
     /**
     * Used to invalidate the session
     *
     */
    public static void makeSessionInValidate() {
        if (EXCEL_CLOSE) { // Fix to avoid blank page issue while excel export
            EXCEL_CLOSE = false;
        } else {
            UI.getCurrent().close();
        }
    }

    /**
     * Used to close the session in browser closer listener
     *
     */
    private void beforeUnloadCloseUi() {
        BeforeUnload ob = BeforeUnload.closeBeforeUnload(this);
        ob.addUnloadListener(new BeforeUnload.UnloadListener() {
            @Override
            public void unload(BeforeUnload.UnloadEvent event) {
                makeSessionInValidate();
            }
        });
    }
}