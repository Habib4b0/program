/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.HistHierarchyDefinition;
import com.stpl.app.model.HistHierarchyDefinitionModel;
import com.stpl.app.service.persistence.HistHierarchyDefinitionPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the HistHierarchyDefinition service. Represents a row in the &quot;HIST_HIERARCHY_DEFINITION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link HistHierarchyDefinitionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HistHierarchyDefinitionImpl}.
 * </p>
 *
 * @author
 * @see HistHierarchyDefinitionImpl
 * @see HistHierarchyDefinition
 * @see HistHierarchyDefinitionModel
 * @generated
 */
@ProviderType
public class HistHierarchyDefinitionModelImpl extends BaseModelImpl<HistHierarchyDefinition>
	implements HistHierarchyDefinitionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a hist hierarchy definition model instance should use the {@link HistHierarchyDefinition} interface instead.
	 */
	public static final String TABLE_NAME = "HIST_HIERARCHY_DEFINITION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "NO_OF_LEVELS", Types.INTEGER },
			{ "CREATED_BY", Types.INTEGER },
			{ "ACTION_DATE", Types.TIMESTAMP },
			{ "ACTION_FLAG", Types.VARCHAR },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "HIERARCHY_DEFINITION_SID", Types.INTEGER },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "HIERARCHY_TYPE", Types.INTEGER },
			{ "HIERARCHY_CATEGORY", Types.INTEGER },
			{ "HIERARCHY_NAME", Types.VARCHAR },
			{ "VERSION_NO", Types.INTEGER },
			{ "MODIFIED_DATE", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("NO_OF_LEVELS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ACTION_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ACTION_FLAG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("HIERARCHY_DEFINITION_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("HIERARCHY_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("HIERARCHY_CATEGORY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("HIERARCHY_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VERSION_NO", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table HIST_HIERARCHY_DEFINITION (NO_OF_LEVELS INTEGER,CREATED_BY INTEGER,ACTION_DATE DATE null,ACTION_FLAG VARCHAR(75) not null IDENTITY,MODIFIED_BY INTEGER,HIERARCHY_DEFINITION_SID INTEGER not null IDENTITY,CREATED_DATE DATE null,HIERARCHY_TYPE INTEGER,HIERARCHY_CATEGORY INTEGER,HIERARCHY_NAME VARCHAR(75) null,VERSION_NO INTEGER not null IDENTITY,MODIFIED_DATE DATE null,primary key (ACTION_FLAG, HIERARCHY_DEFINITION_SID, VERSION_NO))";
	public static final String TABLE_SQL_DROP = "drop table HIST_HIERARCHY_DEFINITION";
	public static final String ORDER_BY_JPQL = " ORDER BY histHierarchyDefinition.id.actionFlag ASC, histHierarchyDefinition.id.hierarchyDefinitionSid ASC, histHierarchyDefinition.id.versionNo ASC";
	public static final String ORDER_BY_SQL = " ORDER BY HIST_HIERARCHY_DEFINITION.ACTION_FLAG ASC, HIST_HIERARCHY_DEFINITION.HIERARCHY_DEFINITION_SID ASC, HIST_HIERARCHY_DEFINITION.VERSION_NO ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.HistHierarchyDefinition"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.HistHierarchyDefinition"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.HistHierarchyDefinition"));

	public HistHierarchyDefinitionModelImpl() {
	}

	@Override
	public HistHierarchyDefinitionPK getPrimaryKey() {
		return new HistHierarchyDefinitionPK(_actionFlag,
			_hierarchyDefinitionSid, _versionNo);
	}

	@Override
	public void setPrimaryKey(HistHierarchyDefinitionPK primaryKey) {
		setActionFlag(primaryKey.actionFlag);
		setHierarchyDefinitionSid(primaryKey.hierarchyDefinitionSid);
		setVersionNo(primaryKey.versionNo);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new HistHierarchyDefinitionPK(_actionFlag,
			_hierarchyDefinitionSid, _versionNo);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((HistHierarchyDefinitionPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return HistHierarchyDefinition.class;
	}

	@Override
	public String getModelClassName() {
		return HistHierarchyDefinition.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("noOfLevels", getNoOfLevels());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("actionDate", getActionDate());
		attributes.put("actionFlag", getActionFlag());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("hierarchyDefinitionSid", getHierarchyDefinitionSid());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("hierarchyType", getHierarchyType());
		attributes.put("hierarchyCategory", getHierarchyCategory());
		attributes.put("hierarchyName", getHierarchyName());
		attributes.put("versionNo", getVersionNo());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer noOfLevels = (Integer)attributes.get("noOfLevels");

		if (noOfLevels != null) {
			setNoOfLevels(noOfLevels);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date actionDate = (Date)attributes.get("actionDate");

		if (actionDate != null) {
			setActionDate(actionDate);
		}

		String actionFlag = (String)attributes.get("actionFlag");

		if (actionFlag != null) {
			setActionFlag(actionFlag);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Integer hierarchyDefinitionSid = (Integer)attributes.get(
				"hierarchyDefinitionSid");

		if (hierarchyDefinitionSid != null) {
			setHierarchyDefinitionSid(hierarchyDefinitionSid);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer hierarchyType = (Integer)attributes.get("hierarchyType");

		if (hierarchyType != null) {
			setHierarchyType(hierarchyType);
		}

		Integer hierarchyCategory = (Integer)attributes.get("hierarchyCategory");

		if (hierarchyCategory != null) {
			setHierarchyCategory(hierarchyCategory);
		}

		String hierarchyName = (String)attributes.get("hierarchyName");

		if (hierarchyName != null) {
			setHierarchyName(hierarchyName);
		}

		Integer versionNo = (Integer)attributes.get("versionNo");

		if (versionNo != null) {
			setVersionNo(versionNo);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public int getNoOfLevels() {
		return _noOfLevels;
	}

	@Override
	public void setNoOfLevels(int noOfLevels) {
		_noOfLevels = noOfLevels;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getActionDate() {
		return _actionDate;
	}

	@Override
	public void setActionDate(Date actionDate) {
		_actionDate = actionDate;
	}

	@Override
	public String getActionFlag() {
		if (_actionFlag == null) {
			return StringPool.BLANK;
		}
		else {
			return _actionFlag;
		}
	}

	@Override
	public void setActionFlag(String actionFlag) {
		_actionFlag = actionFlag;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public int getHierarchyDefinitionSid() {
		return _hierarchyDefinitionSid;
	}

	@Override
	public void setHierarchyDefinitionSid(int hierarchyDefinitionSid) {
		_hierarchyDefinitionSid = hierarchyDefinitionSid;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getHierarchyType() {
		return _hierarchyType;
	}

	@Override
	public void setHierarchyType(int hierarchyType) {
		_hierarchyType = hierarchyType;
	}

	@Override
	public int getHierarchyCategory() {
		return _hierarchyCategory;
	}

	@Override
	public void setHierarchyCategory(int hierarchyCategory) {
		_hierarchyCategory = hierarchyCategory;
	}

	@Override
	public String getHierarchyName() {
		if (_hierarchyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _hierarchyName;
		}
	}

	@Override
	public void setHierarchyName(String hierarchyName) {
		_hierarchyName = hierarchyName;
	}

	@Override
	public int getVersionNo() {
		return _versionNo;
	}

	@Override
	public void setVersionNo(int versionNo) {
		_versionNo = versionNo;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public HistHierarchyDefinition toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (HistHierarchyDefinition)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HistHierarchyDefinitionImpl histHierarchyDefinitionImpl = new HistHierarchyDefinitionImpl();

		histHierarchyDefinitionImpl.setNoOfLevels(getNoOfLevels());
		histHierarchyDefinitionImpl.setCreatedBy(getCreatedBy());
		histHierarchyDefinitionImpl.setActionDate(getActionDate());
		histHierarchyDefinitionImpl.setActionFlag(getActionFlag());
		histHierarchyDefinitionImpl.setModifiedBy(getModifiedBy());
		histHierarchyDefinitionImpl.setHierarchyDefinitionSid(getHierarchyDefinitionSid());
		histHierarchyDefinitionImpl.setCreatedDate(getCreatedDate());
		histHierarchyDefinitionImpl.setHierarchyType(getHierarchyType());
		histHierarchyDefinitionImpl.setHierarchyCategory(getHierarchyCategory());
		histHierarchyDefinitionImpl.setHierarchyName(getHierarchyName());
		histHierarchyDefinitionImpl.setVersionNo(getVersionNo());
		histHierarchyDefinitionImpl.setModifiedDate(getModifiedDate());

		histHierarchyDefinitionImpl.resetOriginalValues();

		return histHierarchyDefinitionImpl;
	}

	@Override
	public int compareTo(HistHierarchyDefinition histHierarchyDefinition) {
		HistHierarchyDefinitionPK primaryKey = histHierarchyDefinition.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof HistHierarchyDefinition)) {
			return false;
		}

		HistHierarchyDefinition histHierarchyDefinition = (HistHierarchyDefinition)obj;

		HistHierarchyDefinitionPK primaryKey = histHierarchyDefinition.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<HistHierarchyDefinition> toCacheModel() {
		HistHierarchyDefinitionCacheModel histHierarchyDefinitionCacheModel = new HistHierarchyDefinitionCacheModel();

		histHierarchyDefinitionCacheModel.histHierarchyDefinitionPK = getPrimaryKey();

		histHierarchyDefinitionCacheModel.noOfLevels = getNoOfLevels();

		histHierarchyDefinitionCacheModel.createdBy = getCreatedBy();

		Date actionDate = getActionDate();

		if (actionDate != null) {
			histHierarchyDefinitionCacheModel.actionDate = actionDate.getTime();
		}
		else {
			histHierarchyDefinitionCacheModel.actionDate = Long.MIN_VALUE;
		}

		histHierarchyDefinitionCacheModel.actionFlag = getActionFlag();

		String actionFlag = histHierarchyDefinitionCacheModel.actionFlag;

		if ((actionFlag != null) && (actionFlag.length() == 0)) {
			histHierarchyDefinitionCacheModel.actionFlag = null;
		}

		histHierarchyDefinitionCacheModel.modifiedBy = getModifiedBy();

		histHierarchyDefinitionCacheModel.hierarchyDefinitionSid = getHierarchyDefinitionSid();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			histHierarchyDefinitionCacheModel.createdDate = createdDate.getTime();
		}
		else {
			histHierarchyDefinitionCacheModel.createdDate = Long.MIN_VALUE;
		}

		histHierarchyDefinitionCacheModel.hierarchyType = getHierarchyType();

		histHierarchyDefinitionCacheModel.hierarchyCategory = getHierarchyCategory();

		histHierarchyDefinitionCacheModel.hierarchyName = getHierarchyName();

		String hierarchyName = histHierarchyDefinitionCacheModel.hierarchyName;

		if ((hierarchyName != null) && (hierarchyName.length() == 0)) {
			histHierarchyDefinitionCacheModel.hierarchyName = null;
		}

		histHierarchyDefinitionCacheModel.versionNo = getVersionNo();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			histHierarchyDefinitionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			histHierarchyDefinitionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return histHierarchyDefinitionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{noOfLevels=");
		sb.append(getNoOfLevels());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", actionDate=");
		sb.append(getActionDate());
		sb.append(", actionFlag=");
		sb.append(getActionFlag());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", hierarchyDefinitionSid=");
		sb.append(getHierarchyDefinitionSid());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", hierarchyType=");
		sb.append(getHierarchyType());
		sb.append(", hierarchyCategory=");
		sb.append(getHierarchyCategory());
		sb.append(", hierarchyName=");
		sb.append(getHierarchyName());
		sb.append(", versionNo=");
		sb.append(getVersionNo());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.HistHierarchyDefinition");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>noOfLevels</column-name><column-value><![CDATA[");
		sb.append(getNoOfLevels());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionDate</column-name><column-value><![CDATA[");
		sb.append(getActionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionFlag</column-name><column-value><![CDATA[");
		sb.append(getActionFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hierarchyDefinitionSid</column-name><column-value><![CDATA[");
		sb.append(getHierarchyDefinitionSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hierarchyType</column-name><column-value><![CDATA[");
		sb.append(getHierarchyType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hierarchyCategory</column-name><column-value><![CDATA[");
		sb.append(getHierarchyCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hierarchyName</column-name><column-value><![CDATA[");
		sb.append(getHierarchyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionNo</column-name><column-value><![CDATA[");
		sb.append(getVersionNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = HistHierarchyDefinition.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			HistHierarchyDefinition.class
		};
	private int _noOfLevels;
	private int _createdBy;
	private Date _actionDate;
	private String _actionFlag;
	private int _modifiedBy;
	private int _hierarchyDefinitionSid;
	private Date _createdDate;
	private int _hierarchyType;
	private int _hierarchyCategory;
	private String _hierarchyName;
	private int _versionNo;
	private Date _modifiedDate;
	private HistHierarchyDefinition _escapedModel;
}