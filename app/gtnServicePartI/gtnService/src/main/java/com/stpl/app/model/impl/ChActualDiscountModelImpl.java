/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.stpl.app.model.ChActualDiscount;
import com.stpl.app.model.ChActualDiscountModel;
import com.stpl.app.service.persistence.ChActualDiscountPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ChActualDiscount service. Represents a row in the &quot;CH_ACTUAL_DISCOUNT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ChActualDiscountModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChActualDiscountImpl}.
 * </p>
 *
 * @author
 * @see ChActualDiscountImpl
 * @see ChActualDiscount
 * @see ChActualDiscountModel
 * @generated
 */
@ProviderType
public class ChActualDiscountModelImpl extends BaseModelImpl<ChActualDiscount>
	implements ChActualDiscountModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ch actual discount model instance should use the {@link ChActualDiscount} interface instead.
	 */
	public static final String TABLE_NAME = "CH_ACTUAL_DISCOUNT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ACTUAL_RATE", Types.DOUBLE },
			{ "PERIOD_SID", Types.INTEGER },
			{ "PROJECTION_DETAILS_SID", Types.INTEGER },
			{ "RS_MODEL_SID", Types.INTEGER },
			{ "ACTUAL_SALES", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ACTUAL_RATE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PERIOD_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PROJECTION_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RS_MODEL_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ACTUAL_SALES", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table CH_ACTUAL_DISCOUNT (ACTUAL_RATE DOUBLE,PERIOD_SID INTEGER not null IDENTITY,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,RS_MODEL_SID INTEGER not null IDENTITY,ACTUAL_SALES DOUBLE,primary key (PERIOD_SID, PROJECTION_DETAILS_SID, RS_MODEL_SID))";
	public static final String TABLE_SQL_DROP = "drop table CH_ACTUAL_DISCOUNT";
	public static final String ORDER_BY_JPQL = " ORDER BY chActualDiscount.id.periodSid ASC, chActualDiscount.id.projectionDetailsSid ASC, chActualDiscount.id.rsModelSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CH_ACTUAL_DISCOUNT.PERIOD_SID ASC, CH_ACTUAL_DISCOUNT.PROJECTION_DETAILS_SID ASC, CH_ACTUAL_DISCOUNT.RS_MODEL_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.ChActualDiscount"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.ChActualDiscount"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.ChActualDiscount"));

	public ChActualDiscountModelImpl() {
	}

	@Override
	public ChActualDiscountPK getPrimaryKey() {
		return new ChActualDiscountPK(_periodSid, _projectionDetailsSid,
			_rsModelSid);
	}

	@Override
	public void setPrimaryKey(ChActualDiscountPK primaryKey) {
		setPeriodSid(primaryKey.periodSid);
		setProjectionDetailsSid(primaryKey.projectionDetailsSid);
		setRsModelSid(primaryKey.rsModelSid);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ChActualDiscountPK(_periodSid, _projectionDetailsSid,
			_rsModelSid);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ChActualDiscountPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ChActualDiscount.class;
	}

	@Override
	public String getModelClassName() {
		return ChActualDiscount.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("actualRate", getActualRate());
		attributes.put("periodSid", getPeriodSid());
		attributes.put("projectionDetailsSid", getProjectionDetailsSid());
		attributes.put("rsModelSid", getRsModelSid());
		attributes.put("actualSales", getActualSales());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Double actualRate = (Double)attributes.get("actualRate");

		if (actualRate != null) {
			setActualRate(actualRate);
		}

		Integer periodSid = (Integer)attributes.get("periodSid");

		if (periodSid != null) {
			setPeriodSid(periodSid);
		}

		Integer projectionDetailsSid = (Integer)attributes.get(
				"projectionDetailsSid");

		if (projectionDetailsSid != null) {
			setProjectionDetailsSid(projectionDetailsSid);
		}

		Integer rsModelSid = (Integer)attributes.get("rsModelSid");

		if (rsModelSid != null) {
			setRsModelSid(rsModelSid);
		}

		Double actualSales = (Double)attributes.get("actualSales");

		if (actualSales != null) {
			setActualSales(actualSales);
		}
	}

	@Override
	public double getActualRate() {
		return _actualRate;
	}

	@Override
	public void setActualRate(double actualRate) {
		_actualRate = actualRate;
	}

	@Override
	public int getPeriodSid() {
		return _periodSid;
	}

	@Override
	public void setPeriodSid(int periodSid) {
		_periodSid = periodSid;
	}

	@Override
	public int getProjectionDetailsSid() {
		return _projectionDetailsSid;
	}

	@Override
	public void setProjectionDetailsSid(int projectionDetailsSid) {
		_projectionDetailsSid = projectionDetailsSid;
	}

	@Override
	public int getRsModelSid() {
		return _rsModelSid;
	}

	@Override
	public void setRsModelSid(int rsModelSid) {
		_rsModelSid = rsModelSid;
	}

	@Override
	public double getActualSales() {
		return _actualSales;
	}

	@Override
	public void setActualSales(double actualSales) {
		_actualSales = actualSales;
	}

	@Override
	public ChActualDiscount toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ChActualDiscount)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ChActualDiscountImpl chActualDiscountImpl = new ChActualDiscountImpl();

		chActualDiscountImpl.setActualRate(getActualRate());
		chActualDiscountImpl.setPeriodSid(getPeriodSid());
		chActualDiscountImpl.setProjectionDetailsSid(getProjectionDetailsSid());
		chActualDiscountImpl.setRsModelSid(getRsModelSid());
		chActualDiscountImpl.setActualSales(getActualSales());

		chActualDiscountImpl.resetOriginalValues();

		return chActualDiscountImpl;
	}

	@Override
	public int compareTo(ChActualDiscount chActualDiscount) {
		ChActualDiscountPK primaryKey = chActualDiscount.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ChActualDiscount)) {
			return false;
		}

		ChActualDiscount chActualDiscount = (ChActualDiscount)obj;

		ChActualDiscountPK primaryKey = chActualDiscount.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ChActualDiscount> toCacheModel() {
		ChActualDiscountCacheModel chActualDiscountCacheModel = new ChActualDiscountCacheModel();

		chActualDiscountCacheModel.chActualDiscountPK = getPrimaryKey();

		chActualDiscountCacheModel.actualRate = getActualRate();

		chActualDiscountCacheModel.periodSid = getPeriodSid();

		chActualDiscountCacheModel.projectionDetailsSid = getProjectionDetailsSid();

		chActualDiscountCacheModel.rsModelSid = getRsModelSid();

		chActualDiscountCacheModel.actualSales = getActualSales();

		return chActualDiscountCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{actualRate=");
		sb.append(getActualRate());
		sb.append(", periodSid=");
		sb.append(getPeriodSid());
		sb.append(", projectionDetailsSid=");
		sb.append(getProjectionDetailsSid());
		sb.append(", rsModelSid=");
		sb.append(getRsModelSid());
		sb.append(", actualSales=");
		sb.append(getActualSales());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.ChActualDiscount");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>actualRate</column-name><column-value><![CDATA[");
		sb.append(getActualRate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodSid</column-name><column-value><![CDATA[");
		sb.append(getPeriodSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getProjectionDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsModelSid</column-name><column-value><![CDATA[");
		sb.append(getRsModelSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualSales</column-name><column-value><![CDATA[");
		sb.append(getActualSales());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ChActualDiscount.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ChActualDiscount.class
		};
	private double _actualRate;
	private int _periodSid;
	private int _projectionDetailsSid;
	private int _rsModelSid;
	private double _actualSales;
	private ChActualDiscount _escapedModel;
}