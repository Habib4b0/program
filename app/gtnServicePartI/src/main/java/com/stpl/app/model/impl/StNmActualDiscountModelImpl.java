package com.stpl.app.model.impl;

import com.stpl.app.model.StNmActualDiscount;
import com.stpl.app.model.StNmActualDiscountModel;
import com.stpl.app.service.persistence.StNmActualDiscountPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StNmActualDiscount service. Represents a row in the &quot;ST_NM_ACTUAL_DISCOUNT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.StNmActualDiscountModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StNmActualDiscountImpl}.
 * </p>
 *
 * @author
 * @see StNmActualDiscountImpl
 * @see com.stpl.app.model.StNmActualDiscount
 * @see com.stpl.app.model.StNmActualDiscountModel
 * @generated
 */
public class StNmActualDiscountModelImpl extends BaseModelImpl<StNmActualDiscount>
    implements StNmActualDiscountModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a st nm actual discount model instance should use the {@link com.stpl.app.model.StNmActualDiscount} interface instead.
     */
    public static final String TABLE_NAME = "ST_NM_ACTUAL_DISCOUNT";
    public static final Object[][] TABLE_COLUMNS = {
            { "ACTUAL_SALES", Types.DOUBLE },
            { "PERIOD_SID", Types.INTEGER },
            { "ACTUAL_RATE", Types.DOUBLE },
            { "USER_ID", Types.INTEGER },
            { "LAST_MODIFIED_DATE", Types.TIMESTAMP },
            { "ACTUAL_PROJECTION_SALES", Types.DOUBLE },
            { "ACTUAL_PROJECTION_RATE", Types.DOUBLE },
            { "PROJECTION_DETAILS_SID", Types.INTEGER },
            { "RS_MODEL_SID", Types.INTEGER },
            { "SESSION_ID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table ST_NM_ACTUAL_DISCOUNT (ACTUAL_SALES DOUBLE,PERIOD_SID INTEGER not null IDENTITY,ACTUAL_RATE DOUBLE,USER_ID INTEGER not null,LAST_MODIFIED_DATE DATE null,ACTUAL_PROJECTION_SALES DOUBLE,ACTUAL_PROJECTION_RATE DOUBLE,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,RS_MODEL_SID INTEGER not null IDENTITY,SESSION_ID INTEGER not null,primary key (PERIOD_SID, USER_ID, PROJECTION_DETAILS_SID, RS_MODEL_SID, SESSION_ID))";
    public static final String TABLE_SQL_DROP = "drop table ST_NM_ACTUAL_DISCOUNT";
    public static final String ORDER_BY_JPQL = " ORDER BY stNmActualDiscount.id.periodSid ASC, stNmActualDiscount.id.userId ASC, stNmActualDiscount.id.projectionDetailsSid ASC, stNmActualDiscount.id.rsModelSid ASC, stNmActualDiscount.id.sessionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ST_NM_ACTUAL_DISCOUNT.PERIOD_SID ASC, ST_NM_ACTUAL_DISCOUNT.USER_ID ASC, ST_NM_ACTUAL_DISCOUNT.PROJECTION_DETAILS_SID ASC, ST_NM_ACTUAL_DISCOUNT.RS_MODEL_SID ASC, ST_NM_ACTUAL_DISCOUNT.SESSION_ID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.StNmActualDiscount"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.StNmActualDiscount"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.StNmActualDiscount"));
    private static ClassLoader _classLoader = StNmActualDiscount.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            StNmActualDiscount.class
        };
    private double _actualSales;
    private int _periodSid;
    private double _actualRate;
    private int _userId;
    private Date _lastModifiedDate;
    private double _actualProjectionSales;
    private double _actualProjectionRate;
    private int _projectionDetailsSid;
    private int _rsModelSid;
    private int _sessionId;
    private StNmActualDiscount _escapedModel;

    public StNmActualDiscountModelImpl() {
    }

    @Override
    public StNmActualDiscountPK getPrimaryKey() {
        return new StNmActualDiscountPK(_periodSid, _userId,
            _projectionDetailsSid, _rsModelSid, _sessionId);
    }

    @Override
    public void setPrimaryKey(StNmActualDiscountPK primaryKey) {
        setPeriodSid(primaryKey.periodSid);
        setUserId(primaryKey.userId);
        setProjectionDetailsSid(primaryKey.projectionDetailsSid);
        setRsModelSid(primaryKey.rsModelSid);
        setSessionId(primaryKey.sessionId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new StNmActualDiscountPK(_periodSid, _userId,
            _projectionDetailsSid, _rsModelSid, _sessionId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((StNmActualDiscountPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return StNmActualDiscount.class;
    }

    @Override
    public String getModelClassName() {
        return StNmActualDiscount.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("actualSales", getActualSales());
        attributes.put("periodSid", getPeriodSid());
        attributes.put("actualRate", getActualRate());
        attributes.put("userId", getUserId());
        attributes.put("lastModifiedDate", getLastModifiedDate());
        attributes.put("actualProjectionSales", getActualProjectionSales());
        attributes.put("actualProjectionRate", getActualProjectionRate());
        attributes.put("projectionDetailsSid", getProjectionDetailsSid());
        attributes.put("rsModelSid", getRsModelSid());
        attributes.put("sessionId", getSessionId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Double actualSales = (Double) attributes.get("actualSales");

        if (actualSales != null) {
            setActualSales(actualSales);
        }

        Integer periodSid = (Integer) attributes.get("periodSid");

        if (periodSid != null) {
            setPeriodSid(periodSid);
        }

        Double actualRate = (Double) attributes.get("actualRate");

        if (actualRate != null) {
            setActualRate(actualRate);
        }

        Integer userId = (Integer) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date lastModifiedDate = (Date) attributes.get("lastModifiedDate");

        if (lastModifiedDate != null) {
            setLastModifiedDate(lastModifiedDate);
        }

        Double actualProjectionSales = (Double) attributes.get(
                "actualProjectionSales");

        if (actualProjectionSales != null) {
            setActualProjectionSales(actualProjectionSales);
        }

        Double actualProjectionRate = (Double) attributes.get(
                "actualProjectionRate");

        if (actualProjectionRate != null) {
            setActualProjectionRate(actualProjectionRate);
        }

        Integer projectionDetailsSid = (Integer) attributes.get(
                "projectionDetailsSid");

        if (projectionDetailsSid != null) {
            setProjectionDetailsSid(projectionDetailsSid);
        }

        Integer rsModelSid = (Integer) attributes.get("rsModelSid");

        if (rsModelSid != null) {
            setRsModelSid(rsModelSid);
        }

        Integer sessionId = (Integer) attributes.get("sessionId");

        if (sessionId != null) {
            setSessionId(sessionId);
        }
    }

    @Override
    public double getActualSales() {
        return _actualSales;
    }

    @Override
    public void setActualSales(double actualSales) {
        _actualSales = actualSales;
    }

    @Override
    public int getPeriodSid() {
        return _periodSid;
    }

    @Override
    public void setPeriodSid(int periodSid) {
        _periodSid = periodSid;
    }

    @Override
    public double getActualRate() {
        return _actualRate;
    }

    @Override
    public void setActualRate(double actualRate) {
        _actualRate = actualRate;
    }

    @Override
    public int getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(int userId) {
        _userId = userId;
    }

    @Override
    public Date getLastModifiedDate() {
        return _lastModifiedDate;
    }

    @Override
    public void setLastModifiedDate(Date lastModifiedDate) {
        _lastModifiedDate = lastModifiedDate;
    }

    @Override
    public double getActualProjectionSales() {
        return _actualProjectionSales;
    }

    @Override
    public void setActualProjectionSales(double actualProjectionSales) {
        _actualProjectionSales = actualProjectionSales;
    }

    @Override
    public double getActualProjectionRate() {
        return _actualProjectionRate;
    }

    @Override
    public void setActualProjectionRate(double actualProjectionRate) {
        _actualProjectionRate = actualProjectionRate;
    }

    @Override
    public int getProjectionDetailsSid() {
        return _projectionDetailsSid;
    }

    @Override
    public void setProjectionDetailsSid(int projectionDetailsSid) {
        _projectionDetailsSid = projectionDetailsSid;
    }

    @Override
    public int getRsModelSid() {
        return _rsModelSid;
    }

    @Override
    public void setRsModelSid(int rsModelSid) {
        _rsModelSid = rsModelSid;
    }

    @Override
    public int getSessionId() {
        return _sessionId;
    }

    @Override
    public void setSessionId(int sessionId) {
        _sessionId = sessionId;
    }

    @Override
    public StNmActualDiscount toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (StNmActualDiscount) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        StNmActualDiscountImpl stNmActualDiscountImpl = new StNmActualDiscountImpl();

        stNmActualDiscountImpl.setActualSales(getActualSales());
        stNmActualDiscountImpl.setPeriodSid(getPeriodSid());
        stNmActualDiscountImpl.setActualRate(getActualRate());
        stNmActualDiscountImpl.setUserId(getUserId());
        stNmActualDiscountImpl.setLastModifiedDate(getLastModifiedDate());
        stNmActualDiscountImpl.setActualProjectionSales(getActualProjectionSales());
        stNmActualDiscountImpl.setActualProjectionRate(getActualProjectionRate());
        stNmActualDiscountImpl.setProjectionDetailsSid(getProjectionDetailsSid());
        stNmActualDiscountImpl.setRsModelSid(getRsModelSid());
        stNmActualDiscountImpl.setSessionId(getSessionId());

        stNmActualDiscountImpl.resetOriginalValues();

        return stNmActualDiscountImpl;
    }

    @Override
    public int compareTo(StNmActualDiscount stNmActualDiscount) {
        StNmActualDiscountPK primaryKey = stNmActualDiscount.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof StNmActualDiscount)) {
            return false;
        }

        StNmActualDiscount stNmActualDiscount = (StNmActualDiscount) obj;

        StNmActualDiscountPK primaryKey = stNmActualDiscount.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<StNmActualDiscount> toCacheModel() {
        StNmActualDiscountCacheModel stNmActualDiscountCacheModel = new StNmActualDiscountCacheModel();

        stNmActualDiscountCacheModel.actualSales = getActualSales();

        stNmActualDiscountCacheModel.periodSid = getPeriodSid();

        stNmActualDiscountCacheModel.actualRate = getActualRate();

        stNmActualDiscountCacheModel.userId = getUserId();

        Date lastModifiedDate = getLastModifiedDate();

        if (lastModifiedDate != null) {
            stNmActualDiscountCacheModel.lastModifiedDate = lastModifiedDate.getTime();
        } else {
            stNmActualDiscountCacheModel.lastModifiedDate = Long.MIN_VALUE;
        }

        stNmActualDiscountCacheModel.actualProjectionSales = getActualProjectionSales();

        stNmActualDiscountCacheModel.actualProjectionRate = getActualProjectionRate();

        stNmActualDiscountCacheModel.projectionDetailsSid = getProjectionDetailsSid();

        stNmActualDiscountCacheModel.rsModelSid = getRsModelSid();

        stNmActualDiscountCacheModel.sessionId = getSessionId();

        return stNmActualDiscountCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{actualSales=");
        sb.append(getActualSales());
        sb.append(", periodSid=");
        sb.append(getPeriodSid());
        sb.append(", actualRate=");
        sb.append(getActualRate());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", lastModifiedDate=");
        sb.append(getLastModifiedDate());
        sb.append(", actualProjectionSales=");
        sb.append(getActualProjectionSales());
        sb.append(", actualProjectionRate=");
        sb.append(getActualProjectionRate());
        sb.append(", projectionDetailsSid=");
        sb.append(getProjectionDetailsSid());
        sb.append(", rsModelSid=");
        sb.append(getRsModelSid());
        sb.append(", sessionId=");
        sb.append(getSessionId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.StNmActualDiscount");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>actualSales</column-name><column-value><![CDATA[");
        sb.append(getActualSales());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>periodSid</column-name><column-value><![CDATA[");
        sb.append(getPeriodSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>actualRate</column-name><column-value><![CDATA[");
        sb.append(getActualRate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
        sb.append(getLastModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>actualProjectionSales</column-name><column-value><![CDATA[");
        sb.append(getActualProjectionSales());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>actualProjectionRate</column-name><column-value><![CDATA[");
        sb.append(getActualProjectionRate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rsModelSid</column-name><column-value><![CDATA[");
        sb.append(getRsModelSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sessionId</column-name><column-value><![CDATA[");
        sb.append(getSessionId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
