/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.ProjectionCustDetails;
import com.stpl.app.model.ProjectionCustDetailsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ProjectionCustDetails service. Represents a row in the &quot;PROJECTION_CUST_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProjectionCustDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectionCustDetailsImpl}.
 * </p>
 *
 * @author
 * @see ProjectionCustDetailsImpl
 * @see ProjectionCustDetails
 * @see ProjectionCustDetailsModel
 * @generated
 */
@ProviderType
public class ProjectionCustDetailsModelImpl extends BaseModelImpl<ProjectionCustDetails>
	implements ProjectionCustDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a projection cust details model instance should use the {@link ProjectionCustDetails} interface instead.
	 */
	public static final String TABLE_NAME = "PROJECTION_CUST_DETAILS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CONTRACT_NAME", Types.VARCHAR },
			{ "CUSTOMER_NAME", Types.VARCHAR },
			{ "CUSTOMER_DETAILS_ID", Types.INTEGER },
			{ "COST_CENTER", Types.VARCHAR },
			{ "CUSTOMER_ALIAS", Types.VARCHAR },
			{ "SUB_LEDGER_CODE", Types.VARCHAR },
			{ "PROJECTION_ID", Types.INTEGER },
			{ "MARKET_TYPE", Types.VARCHAR },
			{ "CONTRACT_NO", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CONTRACT_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CUSTOMER_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CUSTOMER_DETAILS_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("COST_CENTER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CUSTOMER_ALIAS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SUB_LEDGER_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECTION_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MARKET_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CONTRACT_NO", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table PROJECTION_CUST_DETAILS (CONTRACT_NAME VARCHAR(75) null,CUSTOMER_NAME VARCHAR(75) null,CUSTOMER_DETAILS_ID INTEGER not null primary key IDENTITY,COST_CENTER VARCHAR(75) null,CUSTOMER_ALIAS VARCHAR(75) null,SUB_LEDGER_CODE VARCHAR(75) null,PROJECTION_ID INTEGER,MARKET_TYPE VARCHAR(75) null,CONTRACT_NO VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table PROJECTION_CUST_DETAILS";
	public static final String ORDER_BY_JPQL = " ORDER BY projectionCustDetails.customerDetailsId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PROJECTION_CUST_DETAILS.CUSTOMER_DETAILS_ID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.ProjectionCustDetails"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.ProjectionCustDetails"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.ProjectionCustDetails"));

	public ProjectionCustDetailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _customerDetailsId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setCustomerDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _customerDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectionCustDetails.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectionCustDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("contractName", getContractName());
		attributes.put("customerName", getCustomerName());
		attributes.put("customerDetailsId", getCustomerDetailsId());
		attributes.put("costCenter", getCostCenter());
		attributes.put("customerAlias", getCustomerAlias());
		attributes.put("subLedgerCode", getSubLedgerCode());
		attributes.put("projectionId", getProjectionId());
		attributes.put("marketType", getMarketType());
		attributes.put("contractNo", getContractNo());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String contractName = (String)attributes.get("contractName");

		if (contractName != null) {
			setContractName(contractName);
		}

		String customerName = (String)attributes.get("customerName");

		if (customerName != null) {
			setCustomerName(customerName);
		}

		Integer customerDetailsId = (Integer)attributes.get("customerDetailsId");

		if (customerDetailsId != null) {
			setCustomerDetailsId(customerDetailsId);
		}

		String costCenter = (String)attributes.get("costCenter");

		if (costCenter != null) {
			setCostCenter(costCenter);
		}

		String customerAlias = (String)attributes.get("customerAlias");

		if (customerAlias != null) {
			setCustomerAlias(customerAlias);
		}

		String subLedgerCode = (String)attributes.get("subLedgerCode");

		if (subLedgerCode != null) {
			setSubLedgerCode(subLedgerCode);
		}

		Integer projectionId = (Integer)attributes.get("projectionId");

		if (projectionId != null) {
			setProjectionId(projectionId);
		}

		String marketType = (String)attributes.get("marketType");

		if (marketType != null) {
			setMarketType(marketType);
		}

		String contractNo = (String)attributes.get("contractNo");

		if (contractNo != null) {
			setContractNo(contractNo);
		}
	}

	@Override
	public String getContractName() {
		if (_contractName == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractName;
		}
	}

	@Override
	public void setContractName(String contractName) {
		_contractName = contractName;
	}

	@Override
	public String getCustomerName() {
		if (_customerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerName;
		}
	}

	@Override
	public void setCustomerName(String customerName) {
		_customerName = customerName;
	}

	@Override
	public int getCustomerDetailsId() {
		return _customerDetailsId;
	}

	@Override
	public void setCustomerDetailsId(int customerDetailsId) {
		_customerDetailsId = customerDetailsId;
	}

	@Override
	public String getCostCenter() {
		if (_costCenter == null) {
			return StringPool.BLANK;
		}
		else {
			return _costCenter;
		}
	}

	@Override
	public void setCostCenter(String costCenter) {
		_costCenter = costCenter;
	}

	@Override
	public String getCustomerAlias() {
		if (_customerAlias == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerAlias;
		}
	}

	@Override
	public void setCustomerAlias(String customerAlias) {
		_customerAlias = customerAlias;
	}

	@Override
	public String getSubLedgerCode() {
		if (_subLedgerCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _subLedgerCode;
		}
	}

	@Override
	public void setSubLedgerCode(String subLedgerCode) {
		_subLedgerCode = subLedgerCode;
	}

	@Override
	public int getProjectionId() {
		return _projectionId;
	}

	@Override
	public void setProjectionId(int projectionId) {
		_projectionId = projectionId;
	}

	@Override
	public String getMarketType() {
		if (_marketType == null) {
			return StringPool.BLANK;
		}
		else {
			return _marketType;
		}
	}

	@Override
	public void setMarketType(String marketType) {
		_marketType = marketType;
	}

	@Override
	public String getContractNo() {
		if (_contractNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractNo;
		}
	}

	@Override
	public void setContractNo(String contractNo) {
		_contractNo = contractNo;
	}

	@Override
	public ProjectionCustDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProjectionCustDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectionCustDetailsImpl projectionCustDetailsImpl = new ProjectionCustDetailsImpl();

		projectionCustDetailsImpl.setContractName(getContractName());
		projectionCustDetailsImpl.setCustomerName(getCustomerName());
		projectionCustDetailsImpl.setCustomerDetailsId(getCustomerDetailsId());
		projectionCustDetailsImpl.setCostCenter(getCostCenter());
		projectionCustDetailsImpl.setCustomerAlias(getCustomerAlias());
		projectionCustDetailsImpl.setSubLedgerCode(getSubLedgerCode());
		projectionCustDetailsImpl.setProjectionId(getProjectionId());
		projectionCustDetailsImpl.setMarketType(getMarketType());
		projectionCustDetailsImpl.setContractNo(getContractNo());

		projectionCustDetailsImpl.resetOriginalValues();

		return projectionCustDetailsImpl;
	}

	@Override
	public int compareTo(ProjectionCustDetails projectionCustDetails) {
		int primaryKey = projectionCustDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProjectionCustDetails)) {
			return false;
		}

		ProjectionCustDetails projectionCustDetails = (ProjectionCustDetails)obj;

		int primaryKey = projectionCustDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ProjectionCustDetails> toCacheModel() {
		ProjectionCustDetailsCacheModel projectionCustDetailsCacheModel = new ProjectionCustDetailsCacheModel();

		projectionCustDetailsCacheModel.contractName = getContractName();

		String contractName = projectionCustDetailsCacheModel.contractName;

		if ((contractName != null) && (contractName.length() == 0)) {
			projectionCustDetailsCacheModel.contractName = null;
		}

		projectionCustDetailsCacheModel.customerName = getCustomerName();

		String customerName = projectionCustDetailsCacheModel.customerName;

		if ((customerName != null) && (customerName.length() == 0)) {
			projectionCustDetailsCacheModel.customerName = null;
		}

		projectionCustDetailsCacheModel.customerDetailsId = getCustomerDetailsId();

		projectionCustDetailsCacheModel.costCenter = getCostCenter();

		String costCenter = projectionCustDetailsCacheModel.costCenter;

		if ((costCenter != null) && (costCenter.length() == 0)) {
			projectionCustDetailsCacheModel.costCenter = null;
		}

		projectionCustDetailsCacheModel.customerAlias = getCustomerAlias();

		String customerAlias = projectionCustDetailsCacheModel.customerAlias;

		if ((customerAlias != null) && (customerAlias.length() == 0)) {
			projectionCustDetailsCacheModel.customerAlias = null;
		}

		projectionCustDetailsCacheModel.subLedgerCode = getSubLedgerCode();

		String subLedgerCode = projectionCustDetailsCacheModel.subLedgerCode;

		if ((subLedgerCode != null) && (subLedgerCode.length() == 0)) {
			projectionCustDetailsCacheModel.subLedgerCode = null;
		}

		projectionCustDetailsCacheModel.projectionId = getProjectionId();

		projectionCustDetailsCacheModel.marketType = getMarketType();

		String marketType = projectionCustDetailsCacheModel.marketType;

		if ((marketType != null) && (marketType.length() == 0)) {
			projectionCustDetailsCacheModel.marketType = null;
		}

		projectionCustDetailsCacheModel.contractNo = getContractNo();

		String contractNo = projectionCustDetailsCacheModel.contractNo;

		if ((contractNo != null) && (contractNo.length() == 0)) {
			projectionCustDetailsCacheModel.contractNo = null;
		}

		return projectionCustDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{contractName=");
		sb.append(getContractName());
		sb.append(", customerName=");
		sb.append(getCustomerName());
		sb.append(", customerDetailsId=");
		sb.append(getCustomerDetailsId());
		sb.append(", costCenter=");
		sb.append(getCostCenter());
		sb.append(", customerAlias=");
		sb.append(getCustomerAlias());
		sb.append(", subLedgerCode=");
		sb.append(getSubLedgerCode());
		sb.append(", projectionId=");
		sb.append(getProjectionId());
		sb.append(", marketType=");
		sb.append(getMarketType());
		sb.append(", contractNo=");
		sb.append(getContractNo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.ProjectionCustDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>contractName</column-name><column-value><![CDATA[");
		sb.append(getContractName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerName</column-name><column-value><![CDATA[");
		sb.append(getCustomerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerDetailsId</column-name><column-value><![CDATA[");
		sb.append(getCustomerDetailsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>costCenter</column-name><column-value><![CDATA[");
		sb.append(getCostCenter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerAlias</column-name><column-value><![CDATA[");
		sb.append(getCustomerAlias());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subLedgerCode</column-name><column-value><![CDATA[");
		sb.append(getSubLedgerCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionId</column-name><column-value><![CDATA[");
		sb.append(getProjectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketType</column-name><column-value><![CDATA[");
		sb.append(getMarketType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractNo</column-name><column-value><![CDATA[");
		sb.append(getContractNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProjectionCustDetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProjectionCustDetails.class
		};
	private String _contractName;
	private String _customerName;
	private int _customerDetailsId;
	private String _costCenter;
	private String _customerAlias;
	private String _subLedgerCode;
	private int _projectionId;
	private String _marketType;
	private String _contractNo;
	private ProjectionCustDetails _escapedModel;
}