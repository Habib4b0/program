package com.stpl.app.model;

import com.stpl.portal.kernel.bean.AutoEscape;
import com.stpl.portal.model.BaseModel;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.service.ServiceContext;

import com.stpl.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the ForecastingMaster service. Represents a row in the &quot;FORECASTING_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.stpl.app.model.impl.ForecastingMasterModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.stpl.app.model.impl.ForecastingMasterImpl}.
 * </p>
 *
 * @author
 * @see ForecastingMaster
 * @see com.stpl.app.model.impl.ForecastingMasterImpl
 * @see com.stpl.app.model.impl.ForecastingMasterModelImpl
 * @generated
 */
public interface ForecastingMasterModel extends BaseModel<ForecastingMaster> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a forecasting master model instance should use the {@link ForecastingMaster} interface instead.
     */

    /**
     * Returns the primary key of this forecasting master.
     *
     * @return the primary key of this forecasting master
     */
    public int getPrimaryKey();

    /**
     * Sets the primary key of this forecasting master.
     *
     * @param primaryKey the primary key of this forecasting master
     */
    public void setPrimaryKey(int primaryKey);

    /**
     * Returns the forecast value type of this forecasting master.
     *
     * @return the forecast value type of this forecasting master
     */
    @AutoEscape
    public String getForecastValueType();

    /**
     * Sets the forecast value type of this forecasting master.
     *
     * @param forecastValueType the forecast value type of this forecasting master
     */
    public void setForecastValueType(String forecastValueType);

    /**
     * Returns the modified by of this forecasting master.
     *
     * @return the modified by of this forecasting master
     */
    public int getModifiedBy();

    /**
     * Sets the modified by of this forecasting master.
     *
     * @param modifiedBy the modified by of this forecasting master
     */
    public void setModifiedBy(int modifiedBy);

    /**
     * Returns the created date of this forecasting master.
     *
     * @return the created date of this forecasting master
     */
    public Date getCreatedDate();

    /**
     * Sets the created date of this forecasting master.
     *
     * @param createdDate the created date of this forecasting master
     */
    public void setCreatedDate(Date createdDate);

    /**
     * Returns the percentage estimate of this forecasting master.
     *
     * @return the percentage estimate of this forecasting master
     */
    @AutoEscape
    public String getPercentageEstimate();

    /**
     * Sets the percentage estimate of this forecasting master.
     *
     * @param percentageEstimate the percentage estimate of this forecasting master
     */
    public void setPercentageEstimate(String percentageEstimate);

    /**
     * Returns the actual sales percentage month of this forecasting master.
     *
     * @return the actual sales percentage month of this forecasting master
     */
    public int getActualSalesPercentageMonth();

    /**
     * Sets the actual sales percentage month of this forecasting master.
     *
     * @param actualSalesPercentageMonth the actual sales percentage month of this forecasting master
     */
    public void setActualSalesPercentageMonth(int actualSalesPercentageMonth);

    /**
     * Returns the ndc of this forecasting master.
     *
     * @return the ndc of this forecasting master
     */
    @AutoEscape
    public String getNdc();

    /**
     * Sets the ndc of this forecasting master.
     *
     * @param ndc the ndc of this forecasting master
     */
    public void setNdc(String ndc);

    /**
     * Returns the batch ID of this forecasting master.
     *
     * @return the batch ID of this forecasting master
     */
    @AutoEscape
    public String getBatchId();

    /**
     * Sets the batch ID of this forecasting master.
     *
     * @param batchId the batch ID of this forecasting master
     */
    public void setBatchId(String batchId);

    /**
     * Returns the forecast ver of this forecasting master.
     *
     * @return the forecast ver of this forecasting master
     */
    @AutoEscape
    public String getForecastVer();

    /**
     * Sets the forecast ver of this forecasting master.
     *
     * @param forecastVer the forecast ver of this forecasting master
     */
    public void setForecastVer(String forecastVer);

    /**
     * Returns the country of this forecasting master.
     *
     * @return the country of this forecasting master
     */
    @AutoEscape
    public String getCountry();

    /**
     * Sets the country of this forecasting master.
     *
     * @param country the country of this forecasting master
     */
    public void setCountry(String country);

    /**
     * Returns the product of this forecasting master.
     *
     * @return the product of this forecasting master
     */
    @AutoEscape
    public String getProduct();

    /**
     * Sets the product of this forecasting master.
     *
     * @param product the product of this forecasting master
     */
    public void setProduct(String product);

    /**
     * Returns the forecast start date of this forecasting master.
     *
     * @return the forecast start date of this forecasting master
     */
    public Date getForecastStartDate();

    /**
     * Sets the forecast start date of this forecasting master.
     *
     * @param forecastStartDate the forecast start date of this forecasting master
     */
    public void setForecastStartDate(Date forecastStartDate);

    /**
     * Returns the forecasted sales percentage of this forecasting master.
     *
     * @return the forecasted sales percentage of this forecasting master
     */
    @AutoEscape
    public String getForecastedSalesPercentage();

    /**
     * Sets the forecasted sales percentage of this forecasting master.
     *
     * @param forecastedSalesPercentage the forecasted sales percentage of this forecasting master
     */
    public void setForecastedSalesPercentage(String forecastedSalesPercentage);

    /**
     * Returns the units of this forecasting master.
     *
     * @return the units of this forecasting master
     */
    public double getUnits();

    /**
     * Sets the units of this forecasting master.
     *
     * @param units the units of this forecasting master
     */
    public void setUnits(double units);

    /**
     * Returns the dollars of this forecasting master.
     *
     * @return the dollars of this forecasting master
     */
    public double getDollars();

    /**
     * Sets the dollars of this forecasting master.
     *
     * @param dollars the dollars of this forecasting master
     */
    public void setDollars(double dollars);

    /**
     * Returns the forecast month of this forecasting master.
     *
     * @return the forecast month of this forecasting master
     */
    @AutoEscape
    public String getForecastMonth();

    /**
     * Sets the forecast month of this forecasting master.
     *
     * @param forecastMonth the forecast month of this forecasting master
     */
    public void setForecastMonth(String forecastMonth);

    /**
     * Returns the created by of this forecasting master.
     *
     * @return the created by of this forecasting master
     */
    public int getCreatedBy();

    /**
     * Sets the created by of this forecasting master.
     *
     * @param createdBy the created by of this forecasting master
     */
    public void setCreatedBy(int createdBy);

    /**
     * Returns the segment of this forecasting master.
     *
     * @return the segment of this forecasting master
     */
    @AutoEscape
    public String getSegment();

    /**
     * Sets the segment of this forecasting master.
     *
     * @param segment the segment of this forecasting master
     */
    public void setSegment(String segment);

    /**
     * Returns the price of this forecasting master.
     *
     * @return the price of this forecasting master
     */
    public double getPrice();

    /**
     * Sets the price of this forecasting master.
     *
     * @param price the price of this forecasting master
     */
    public void setPrice(double price);

    /**
     * Returns the actual sales percentage of this forecasting master.
     *
     * @return the actual sales percentage of this forecasting master
     */
    @AutoEscape
    public String getActualSalesPercentage();

    /**
     * Sets the actual sales percentage of this forecasting master.
     *
     * @param actualSalesPercentage the actual sales percentage of this forecasting master
     */
    public void setActualSalesPercentage(String actualSalesPercentage);

    /**
     * Returns the forecast year of this forecasting master.
     *
     * @return the forecast year of this forecasting master
     */
    @AutoEscape
    public String getForecastYear();

    /**
     * Sets the forecast year of this forecasting master.
     *
     * @param forecastYear the forecast year of this forecasting master
     */
    public void setForecastYear(String forecastYear);

    /**
     * Returns the forecast name of this forecasting master.
     *
     * @return the forecast name of this forecasting master
     */
    @AutoEscape
    public String getForecastName();

    /**
     * Sets the forecast name of this forecasting master.
     *
     * @param forecastName the forecast name of this forecasting master
     */
    public void setForecastName(String forecastName);

    /**
     * Returns the forecast date of this forecasting master.
     *
     * @return the forecast date of this forecasting master
     */
    public Date getForecastDate();

    /**
     * Sets the forecast date of this forecasting master.
     *
     * @param forecastDate the forecast date of this forecasting master
     */
    public void setForecastDate(Date forecastDate);

    /**
     * Returns the modified date of this forecasting master.
     *
     * @return the modified date of this forecasting master
     */
    public Date getModifiedDate();

    /**
     * Sets the modified date of this forecasting master.
     *
     * @param modifiedDate the modified date of this forecasting master
     */
    public void setModifiedDate(Date modifiedDate);

    /**
     * Returns the brand of this forecasting master.
     *
     * @return the brand of this forecasting master
     */
    @AutoEscape
    public String getBrand();

    /**
     * Sets the brand of this forecasting master.
     *
     * @param brand the brand of this forecasting master
     */
    public void setBrand(String brand);

    /**
     * Returns the forecast value of this forecasting master.
     *
     * @return the forecast value of this forecasting master
     */
    @AutoEscape
    public String getForecastValue();

    /**
     * Sets the forecast value of this forecasting master.
     *
     * @param forecastValue the forecast value of this forecasting master
     */
    public void setForecastValue(String forecastValue);

    /**
     * Returns the percentage estimate year of this forecasting master.
     *
     * @return the percentage estimate year of this forecasting master
     */
    public int getPercentageEstimateYear();

    /**
     * Sets the percentage estimate year of this forecasting master.
     *
     * @param percentageEstimateYear the percentage estimate year of this forecasting master
     */
    public void setPercentageEstimateYear(int percentageEstimateYear);

    /**
     * Returns the record lock status of this forecasting master.
     *
     * @return the record lock status of this forecasting master
     */
    public boolean getRecordLockStatus();

    /**
     * Returns <code>true</code> if this forecasting master is record lock status.
     *
     * @return <code>true</code> if this forecasting master is record lock status; <code>false</code> otherwise
     */
    public boolean isRecordLockStatus();

    /**
     * Sets whether this forecasting master is record lock status.
     *
     * @param recordLockStatus the record lock status of this forecasting master
     */
    public void setRecordLockStatus(boolean recordLockStatus);

    /**
     * Returns the source of this forecasting master.
     *
     * @return the source of this forecasting master
     */
    @AutoEscape
    public String getSource();

    /**
     * Sets the source of this forecasting master.
     *
     * @param source the source of this forecasting master
     */
    public void setSource(String source);

    /**
     * Returns the forecast master sid of this forecasting master.
     *
     * @return the forecast master sid of this forecasting master
     */
    public int getForecastMasterSid();

    /**
     * Sets the forecast master sid of this forecasting master.
     *
     * @param forecastMasterSid the forecast master sid of this forecasting master
     */
    public void setForecastMasterSid(int forecastMasterSid);

    /**
     * Returns the forecasted sales percent month of this forecasting master.
     *
     * @return the forecasted sales percent month of this forecasting master
     */
    public int getForecastedSalesPercentMonth();

    /**
     * Sets the forecasted sales percent month of this forecasting master.
     *
     * @param forecastedSalesPercentMonth the forecasted sales percent month of this forecasting master
     */
    public void setForecastedSalesPercentMonth(int forecastedSalesPercentMonth);

    /**
     * Returns the inbound status of this forecasting master.
     *
     * @return the inbound status of this forecasting master
     */
    @AutoEscape
    public String getInboundStatus();

    /**
     * Sets the inbound status of this forecasting master.
     *
     * @param inboundStatus the inbound status of this forecasting master
     */
    public void setInboundStatus(String inboundStatus);

    /**
     * Returns the business unit of this forecasting master.
     *
     * @return the business unit of this forecasting master
     */
    public int getBusinessUnit();

    /**
     * Sets the business unit of this forecasting master.
     *
     * @param businessUnit the business unit of this forecasting master
     */
    public void setBusinessUnit(int businessUnit);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    @Override
    public Object clone();

    @Override
    public int compareTo(ForecastingMaster forecastingMaster);

    @Override
    public int hashCode();

    @Override
    public CacheModel<ForecastingMaster> toCacheModel();

    @Override
    public ForecastingMaster toEscapedModel();

    @Override
    public ForecastingMaster toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
