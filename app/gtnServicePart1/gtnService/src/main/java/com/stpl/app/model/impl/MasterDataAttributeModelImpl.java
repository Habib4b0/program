/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.MasterDataAttribute;
import com.stpl.app.model.MasterDataAttributeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MasterDataAttribute service. Represents a row in the &quot;MASTER_DATA_ATTRIBUTE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MasterDataAttributeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MasterDataAttributeImpl}.
 * </p>
 *
 * @author
 * @see MasterDataAttributeImpl
 * @see MasterDataAttribute
 * @see MasterDataAttributeModel
 * @generated
 */
@ProviderType
public class MasterDataAttributeModelImpl extends BaseModelImpl<MasterDataAttribute>
	implements MasterDataAttributeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a master data attribute model instance should use the {@link MasterDataAttribute} interface instead.
	 */
	public static final String TABLE_NAME = "MASTER_DATA_ATTRIBUTE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "COLUMN_15", Types.VARCHAR },
			{ "COLUMN_14", Types.VARCHAR },
			{ "COLUMN_17", Types.VARCHAR },
			{ "COLUMN_16", Types.VARCHAR },
			{ "COLUMN_11", Types.VARCHAR },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "COLUMN_10", Types.VARCHAR },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "COLUMN_13", Types.VARCHAR },
			{ "COLUMN_12", Types.VARCHAR },
			{ "BATCH_ID", Types.VARCHAR },
			{ "COLUMN_19", Types.VARCHAR },
			{ "COLUMN_18", Types.VARCHAR },
			{ "MASTER_ATTRIBUTE", Types.VARCHAR },
			{ "CREATED_BY", Types.INTEGER },
			{ "MASTER_TYPE", Types.VARCHAR },
			{ "MASTER_ID", Types.VARCHAR },
			{ "COLUMN_20", Types.VARCHAR },
			{ "COLUMN_9", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "COLUMN_6", Types.VARCHAR },
			{ "MASTER_DATA_ATTRIBUTE_SID", Types.INTEGER },
			{ "COLUMN_5", Types.VARCHAR },
			{ "COLUMN_8", Types.VARCHAR },
			{ "COLUMN_7", Types.VARCHAR },
			{ "RECORD_LOCK_STATUS", Types.BOOLEAN },
			{ "COLUMN_2", Types.VARCHAR },
			{ "COLUMN_1", Types.VARCHAR },
			{ "COLUMN_4", Types.VARCHAR },
			{ "COLUMN_3", Types.VARCHAR },
			{ "SOURCE", Types.VARCHAR },
			{ "INBOUND_STATUS", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("COLUMN_15", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COLUMN_14", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COLUMN_17", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COLUMN_16", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COLUMN_11", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("COLUMN_10", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("COLUMN_13", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COLUMN_12", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COLUMN_19", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COLUMN_18", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MASTER_ATTRIBUTE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MASTER_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MASTER_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COLUMN_20", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COLUMN_9", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("COLUMN_6", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MASTER_DATA_ATTRIBUTE_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("COLUMN_5", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COLUMN_8", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COLUMN_7", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RECORD_LOCK_STATUS", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("COLUMN_2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COLUMN_1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COLUMN_4", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COLUMN_3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MASTER_DATA_ATTRIBUTE (COLUMN_15 VARCHAR(75) null,COLUMN_14 VARCHAR(75) null,COLUMN_17 VARCHAR(75) null,COLUMN_16 VARCHAR(75) null,COLUMN_11 VARCHAR(75) null,MODIFIED_BY INTEGER,COLUMN_10 VARCHAR(75) null,CREATED_DATE DATE null,COLUMN_13 VARCHAR(75) null,COLUMN_12 VARCHAR(75) null,BATCH_ID VARCHAR(75) null,COLUMN_19 VARCHAR(75) null,COLUMN_18 VARCHAR(75) null,MASTER_ATTRIBUTE VARCHAR(75) null,CREATED_BY INTEGER,MASTER_TYPE VARCHAR(75) null,MASTER_ID VARCHAR(75) null,COLUMN_20 VARCHAR(75) null,COLUMN_9 VARCHAR(75) null,MODIFIED_DATE DATE null,COLUMN_6 VARCHAR(75) null,MASTER_DATA_ATTRIBUTE_SID INTEGER not null primary key IDENTITY,COLUMN_5 VARCHAR(75) null,COLUMN_8 VARCHAR(75) null,COLUMN_7 VARCHAR(75) null,RECORD_LOCK_STATUS BOOLEAN,COLUMN_2 VARCHAR(75) null,COLUMN_1 VARCHAR(75) null,COLUMN_4 VARCHAR(75) null,COLUMN_3 VARCHAR(75) null,SOURCE VARCHAR(75) null,INBOUND_STATUS VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table MASTER_DATA_ATTRIBUTE";
	public static final String ORDER_BY_JPQL = " ORDER BY masterDataAttribute.masterDataAttributeSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MASTER_DATA_ATTRIBUTE.MASTER_DATA_ATTRIBUTE_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.MasterDataAttribute"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.MasterDataAttribute"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.stpl.app.model.MasterDataAttribute"),
			true);
	public static final long MASTERATTRIBUTE_COLUMN_BITMASK = 1L;
	public static final long MASTERID_COLUMN_BITMASK = 2L;
	public static final long MASTERTYPE_COLUMN_BITMASK = 4L;
	public static final long MASTERDATAATTRIBUTESID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.MasterDataAttribute"));

	public MasterDataAttributeModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _masterDataAttributeSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setMasterDataAttributeSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _masterDataAttributeSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MasterDataAttribute.class;
	}

	@Override
	public String getModelClassName() {
		return MasterDataAttribute.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("column15", getColumn15());
		attributes.put("column14", getColumn14());
		attributes.put("column17", getColumn17());
		attributes.put("column16", getColumn16());
		attributes.put("column11", getColumn11());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("column10", getColumn10());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("column13", getColumn13());
		attributes.put("column12", getColumn12());
		attributes.put("batchId", getBatchId());
		attributes.put("column19", getColumn19());
		attributes.put("column18", getColumn18());
		attributes.put("masterAttribute", getMasterAttribute());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("masterType", getMasterType());
		attributes.put("masterId", getMasterId());
		attributes.put("column20", getColumn20());
		attributes.put("column9", getColumn9());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("column6", getColumn6());
		attributes.put("masterDataAttributeSid", getMasterDataAttributeSid());
		attributes.put("column5", getColumn5());
		attributes.put("column8", getColumn8());
		attributes.put("column7", getColumn7());
		attributes.put("recordLockStatus", getRecordLockStatus());
		attributes.put("column2", getColumn2());
		attributes.put("column1", getColumn1());
		attributes.put("column4", getColumn4());
		attributes.put("column3", getColumn3());
		attributes.put("source", getSource());
		attributes.put("inboundStatus", getInboundStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String column15 = (String)attributes.get("column15");

		if (column15 != null) {
			setColumn15(column15);
		}

		String column14 = (String)attributes.get("column14");

		if (column14 != null) {
			setColumn14(column14);
		}

		String column17 = (String)attributes.get("column17");

		if (column17 != null) {
			setColumn17(column17);
		}

		String column16 = (String)attributes.get("column16");

		if (column16 != null) {
			setColumn16(column16);
		}

		String column11 = (String)attributes.get("column11");

		if (column11 != null) {
			setColumn11(column11);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		String column10 = (String)attributes.get("column10");

		if (column10 != null) {
			setColumn10(column10);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String column13 = (String)attributes.get("column13");

		if (column13 != null) {
			setColumn13(column13);
		}

		String column12 = (String)attributes.get("column12");

		if (column12 != null) {
			setColumn12(column12);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		String column19 = (String)attributes.get("column19");

		if (column19 != null) {
			setColumn19(column19);
		}

		String column18 = (String)attributes.get("column18");

		if (column18 != null) {
			setColumn18(column18);
		}

		String masterAttribute = (String)attributes.get("masterAttribute");

		if (masterAttribute != null) {
			setMasterAttribute(masterAttribute);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String masterType = (String)attributes.get("masterType");

		if (masterType != null) {
			setMasterType(masterType);
		}

		String masterId = (String)attributes.get("masterId");

		if (masterId != null) {
			setMasterId(masterId);
		}

		String column20 = (String)attributes.get("column20");

		if (column20 != null) {
			setColumn20(column20);
		}

		String column9 = (String)attributes.get("column9");

		if (column9 != null) {
			setColumn9(column9);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String column6 = (String)attributes.get("column6");

		if (column6 != null) {
			setColumn6(column6);
		}

		Integer masterDataAttributeSid = (Integer)attributes.get(
				"masterDataAttributeSid");

		if (masterDataAttributeSid != null) {
			setMasterDataAttributeSid(masterDataAttributeSid);
		}

		String column5 = (String)attributes.get("column5");

		if (column5 != null) {
			setColumn5(column5);
		}

		String column8 = (String)attributes.get("column8");

		if (column8 != null) {
			setColumn8(column8);
		}

		String column7 = (String)attributes.get("column7");

		if (column7 != null) {
			setColumn7(column7);
		}

		Boolean recordLockStatus = (Boolean)attributes.get("recordLockStatus");

		if (recordLockStatus != null) {
			setRecordLockStatus(recordLockStatus);
		}

		String column2 = (String)attributes.get("column2");

		if (column2 != null) {
			setColumn2(column2);
		}

		String column1 = (String)attributes.get("column1");

		if (column1 != null) {
			setColumn1(column1);
		}

		String column4 = (String)attributes.get("column4");

		if (column4 != null) {
			setColumn4(column4);
		}

		String column3 = (String)attributes.get("column3");

		if (column3 != null) {
			setColumn3(column3);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}
	}

	@Override
	public String getColumn15() {
		if (_column15 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column15;
		}
	}

	@Override
	public void setColumn15(String column15) {
		_column15 = column15;
	}

	@Override
	public String getColumn14() {
		if (_column14 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column14;
		}
	}

	@Override
	public void setColumn14(String column14) {
		_column14 = column14;
	}

	@Override
	public String getColumn17() {
		if (_column17 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column17;
		}
	}

	@Override
	public void setColumn17(String column17) {
		_column17 = column17;
	}

	@Override
	public String getColumn16() {
		if (_column16 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column16;
		}
	}

	@Override
	public void setColumn16(String column16) {
		_column16 = column16;
	}

	@Override
	public String getColumn11() {
		if (_column11 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column11;
		}
	}

	@Override
	public void setColumn11(String column11) {
		_column11 = column11;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public String getColumn10() {
		if (_column10 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column10;
		}
	}

	@Override
	public void setColumn10(String column10) {
		_column10 = column10;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getColumn13() {
		if (_column13 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column13;
		}
	}

	@Override
	public void setColumn13(String column13) {
		_column13 = column13;
	}

	@Override
	public String getColumn12() {
		if (_column12 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column12;
		}
	}

	@Override
	public void setColumn12(String column12) {
		_column12 = column12;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public String getColumn19() {
		if (_column19 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column19;
		}
	}

	@Override
	public void setColumn19(String column19) {
		_column19 = column19;
	}

	@Override
	public String getColumn18() {
		if (_column18 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column18;
		}
	}

	@Override
	public void setColumn18(String column18) {
		_column18 = column18;
	}

	@Override
	public String getMasterAttribute() {
		if (_masterAttribute == null) {
			return StringPool.BLANK;
		}
		else {
			return _masterAttribute;
		}
	}

	@Override
	public void setMasterAttribute(String masterAttribute) {
		_columnBitmask |= MASTERATTRIBUTE_COLUMN_BITMASK;

		if (_originalMasterAttribute == null) {
			_originalMasterAttribute = _masterAttribute;
		}

		_masterAttribute = masterAttribute;
	}

	public String getOriginalMasterAttribute() {
		return GetterUtil.getString(_originalMasterAttribute);
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getMasterType() {
		if (_masterType == null) {
			return StringPool.BLANK;
		}
		else {
			return _masterType;
		}
	}

	@Override
	public void setMasterType(String masterType) {
		_columnBitmask |= MASTERTYPE_COLUMN_BITMASK;

		if (_originalMasterType == null) {
			_originalMasterType = _masterType;
		}

		_masterType = masterType;
	}

	public String getOriginalMasterType() {
		return GetterUtil.getString(_originalMasterType);
	}

	@Override
	public String getMasterId() {
		if (_masterId == null) {
			return StringPool.BLANK;
		}
		else {
			return _masterId;
		}
	}

	@Override
	public void setMasterId(String masterId) {
		_columnBitmask |= MASTERID_COLUMN_BITMASK;

		if (_originalMasterId == null) {
			_originalMasterId = _masterId;
		}

		_masterId = masterId;
	}

	public String getOriginalMasterId() {
		return GetterUtil.getString(_originalMasterId);
	}

	@Override
	public String getColumn20() {
		if (_column20 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column20;
		}
	}

	@Override
	public void setColumn20(String column20) {
		_column20 = column20;
	}

	@Override
	public String getColumn9() {
		if (_column9 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column9;
		}
	}

	@Override
	public void setColumn9(String column9) {
		_column9 = column9;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getColumn6() {
		if (_column6 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column6;
		}
	}

	@Override
	public void setColumn6(String column6) {
		_column6 = column6;
	}

	@Override
	public int getMasterDataAttributeSid() {
		return _masterDataAttributeSid;
	}

	@Override
	public void setMasterDataAttributeSid(int masterDataAttributeSid) {
		_masterDataAttributeSid = masterDataAttributeSid;
	}

	@Override
	public String getColumn5() {
		if (_column5 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column5;
		}
	}

	@Override
	public void setColumn5(String column5) {
		_column5 = column5;
	}

	@Override
	public String getColumn8() {
		if (_column8 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column8;
		}
	}

	@Override
	public void setColumn8(String column8) {
		_column8 = column8;
	}

	@Override
	public String getColumn7() {
		if (_column7 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column7;
		}
	}

	@Override
	public void setColumn7(String column7) {
		_column7 = column7;
	}

	@Override
	public boolean getRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public boolean isRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public void setRecordLockStatus(boolean recordLockStatus) {
		_recordLockStatus = recordLockStatus;
	}

	@Override
	public String getColumn2() {
		if (_column2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column2;
		}
	}

	@Override
	public void setColumn2(String column2) {
		_column2 = column2;
	}

	@Override
	public String getColumn1() {
		if (_column1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column1;
		}
	}

	@Override
	public void setColumn1(String column1) {
		_column1 = column1;
	}

	@Override
	public String getColumn4() {
		if (_column4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column4;
		}
	}

	@Override
	public void setColumn4(String column4) {
		_column4 = column4;
	}

	@Override
	public String getColumn3() {
		if (_column3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _column3;
		}
	}

	@Override
	public void setColumn3(String column3) {
		_column3 = column3;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public MasterDataAttribute toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MasterDataAttribute)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MasterDataAttributeImpl masterDataAttributeImpl = new MasterDataAttributeImpl();

		masterDataAttributeImpl.setColumn15(getColumn15());
		masterDataAttributeImpl.setColumn14(getColumn14());
		masterDataAttributeImpl.setColumn17(getColumn17());
		masterDataAttributeImpl.setColumn16(getColumn16());
		masterDataAttributeImpl.setColumn11(getColumn11());
		masterDataAttributeImpl.setModifiedBy(getModifiedBy());
		masterDataAttributeImpl.setColumn10(getColumn10());
		masterDataAttributeImpl.setCreatedDate(getCreatedDate());
		masterDataAttributeImpl.setColumn13(getColumn13());
		masterDataAttributeImpl.setColumn12(getColumn12());
		masterDataAttributeImpl.setBatchId(getBatchId());
		masterDataAttributeImpl.setColumn19(getColumn19());
		masterDataAttributeImpl.setColumn18(getColumn18());
		masterDataAttributeImpl.setMasterAttribute(getMasterAttribute());
		masterDataAttributeImpl.setCreatedBy(getCreatedBy());
		masterDataAttributeImpl.setMasterType(getMasterType());
		masterDataAttributeImpl.setMasterId(getMasterId());
		masterDataAttributeImpl.setColumn20(getColumn20());
		masterDataAttributeImpl.setColumn9(getColumn9());
		masterDataAttributeImpl.setModifiedDate(getModifiedDate());
		masterDataAttributeImpl.setColumn6(getColumn6());
		masterDataAttributeImpl.setMasterDataAttributeSid(getMasterDataAttributeSid());
		masterDataAttributeImpl.setColumn5(getColumn5());
		masterDataAttributeImpl.setColumn8(getColumn8());
		masterDataAttributeImpl.setColumn7(getColumn7());
		masterDataAttributeImpl.setRecordLockStatus(getRecordLockStatus());
		masterDataAttributeImpl.setColumn2(getColumn2());
		masterDataAttributeImpl.setColumn1(getColumn1());
		masterDataAttributeImpl.setColumn4(getColumn4());
		masterDataAttributeImpl.setColumn3(getColumn3());
		masterDataAttributeImpl.setSource(getSource());
		masterDataAttributeImpl.setInboundStatus(getInboundStatus());

		masterDataAttributeImpl.resetOriginalValues();

		return masterDataAttributeImpl;
	}

	@Override
	public int compareTo(MasterDataAttribute masterDataAttribute) {
		int primaryKey = masterDataAttribute.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MasterDataAttribute)) {
			return false;
		}

		MasterDataAttribute masterDataAttribute = (MasterDataAttribute)obj;

		int primaryKey = masterDataAttribute.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		MasterDataAttributeModelImpl masterDataAttributeModelImpl = this;

		masterDataAttributeModelImpl._originalMasterAttribute = masterDataAttributeModelImpl._masterAttribute;

		masterDataAttributeModelImpl._originalMasterType = masterDataAttributeModelImpl._masterType;

		masterDataAttributeModelImpl._originalMasterId = masterDataAttributeModelImpl._masterId;

		masterDataAttributeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MasterDataAttribute> toCacheModel() {
		MasterDataAttributeCacheModel masterDataAttributeCacheModel = new MasterDataAttributeCacheModel();

		masterDataAttributeCacheModel.column15 = getColumn15();

		String column15 = masterDataAttributeCacheModel.column15;

		if ((column15 != null) && (column15.length() == 0)) {
			masterDataAttributeCacheModel.column15 = null;
		}

		masterDataAttributeCacheModel.column14 = getColumn14();

		String column14 = masterDataAttributeCacheModel.column14;

		if ((column14 != null) && (column14.length() == 0)) {
			masterDataAttributeCacheModel.column14 = null;
		}

		masterDataAttributeCacheModel.column17 = getColumn17();

		String column17 = masterDataAttributeCacheModel.column17;

		if ((column17 != null) && (column17.length() == 0)) {
			masterDataAttributeCacheModel.column17 = null;
		}

		masterDataAttributeCacheModel.column16 = getColumn16();

		String column16 = masterDataAttributeCacheModel.column16;

		if ((column16 != null) && (column16.length() == 0)) {
			masterDataAttributeCacheModel.column16 = null;
		}

		masterDataAttributeCacheModel.column11 = getColumn11();

		String column11 = masterDataAttributeCacheModel.column11;

		if ((column11 != null) && (column11.length() == 0)) {
			masterDataAttributeCacheModel.column11 = null;
		}

		masterDataAttributeCacheModel.modifiedBy = getModifiedBy();

		masterDataAttributeCacheModel.column10 = getColumn10();

		String column10 = masterDataAttributeCacheModel.column10;

		if ((column10 != null) && (column10.length() == 0)) {
			masterDataAttributeCacheModel.column10 = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			masterDataAttributeCacheModel.createdDate = createdDate.getTime();
		}
		else {
			masterDataAttributeCacheModel.createdDate = Long.MIN_VALUE;
		}

		masterDataAttributeCacheModel.column13 = getColumn13();

		String column13 = masterDataAttributeCacheModel.column13;

		if ((column13 != null) && (column13.length() == 0)) {
			masterDataAttributeCacheModel.column13 = null;
		}

		masterDataAttributeCacheModel.column12 = getColumn12();

		String column12 = masterDataAttributeCacheModel.column12;

		if ((column12 != null) && (column12.length() == 0)) {
			masterDataAttributeCacheModel.column12 = null;
		}

		masterDataAttributeCacheModel.batchId = getBatchId();

		String batchId = masterDataAttributeCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			masterDataAttributeCacheModel.batchId = null;
		}

		masterDataAttributeCacheModel.column19 = getColumn19();

		String column19 = masterDataAttributeCacheModel.column19;

		if ((column19 != null) && (column19.length() == 0)) {
			masterDataAttributeCacheModel.column19 = null;
		}

		masterDataAttributeCacheModel.column18 = getColumn18();

		String column18 = masterDataAttributeCacheModel.column18;

		if ((column18 != null) && (column18.length() == 0)) {
			masterDataAttributeCacheModel.column18 = null;
		}

		masterDataAttributeCacheModel.masterAttribute = getMasterAttribute();

		String masterAttribute = masterDataAttributeCacheModel.masterAttribute;

		if ((masterAttribute != null) && (masterAttribute.length() == 0)) {
			masterDataAttributeCacheModel.masterAttribute = null;
		}

		masterDataAttributeCacheModel.createdBy = getCreatedBy();

		masterDataAttributeCacheModel.masterType = getMasterType();

		String masterType = masterDataAttributeCacheModel.masterType;

		if ((masterType != null) && (masterType.length() == 0)) {
			masterDataAttributeCacheModel.masterType = null;
		}

		masterDataAttributeCacheModel.masterId = getMasterId();

		String masterId = masterDataAttributeCacheModel.masterId;

		if ((masterId != null) && (masterId.length() == 0)) {
			masterDataAttributeCacheModel.masterId = null;
		}

		masterDataAttributeCacheModel.column20 = getColumn20();

		String column20 = masterDataAttributeCacheModel.column20;

		if ((column20 != null) && (column20.length() == 0)) {
			masterDataAttributeCacheModel.column20 = null;
		}

		masterDataAttributeCacheModel.column9 = getColumn9();

		String column9 = masterDataAttributeCacheModel.column9;

		if ((column9 != null) && (column9.length() == 0)) {
			masterDataAttributeCacheModel.column9 = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			masterDataAttributeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			masterDataAttributeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		masterDataAttributeCacheModel.column6 = getColumn6();

		String column6 = masterDataAttributeCacheModel.column6;

		if ((column6 != null) && (column6.length() == 0)) {
			masterDataAttributeCacheModel.column6 = null;
		}

		masterDataAttributeCacheModel.masterDataAttributeSid = getMasterDataAttributeSid();

		masterDataAttributeCacheModel.column5 = getColumn5();

		String column5 = masterDataAttributeCacheModel.column5;

		if ((column5 != null) && (column5.length() == 0)) {
			masterDataAttributeCacheModel.column5 = null;
		}

		masterDataAttributeCacheModel.column8 = getColumn8();

		String column8 = masterDataAttributeCacheModel.column8;

		if ((column8 != null) && (column8.length() == 0)) {
			masterDataAttributeCacheModel.column8 = null;
		}

		masterDataAttributeCacheModel.column7 = getColumn7();

		String column7 = masterDataAttributeCacheModel.column7;

		if ((column7 != null) && (column7.length() == 0)) {
			masterDataAttributeCacheModel.column7 = null;
		}

		masterDataAttributeCacheModel.recordLockStatus = getRecordLockStatus();

		masterDataAttributeCacheModel.column2 = getColumn2();

		String column2 = masterDataAttributeCacheModel.column2;

		if ((column2 != null) && (column2.length() == 0)) {
			masterDataAttributeCacheModel.column2 = null;
		}

		masterDataAttributeCacheModel.column1 = getColumn1();

		String column1 = masterDataAttributeCacheModel.column1;

		if ((column1 != null) && (column1.length() == 0)) {
			masterDataAttributeCacheModel.column1 = null;
		}

		masterDataAttributeCacheModel.column4 = getColumn4();

		String column4 = masterDataAttributeCacheModel.column4;

		if ((column4 != null) && (column4.length() == 0)) {
			masterDataAttributeCacheModel.column4 = null;
		}

		masterDataAttributeCacheModel.column3 = getColumn3();

		String column3 = masterDataAttributeCacheModel.column3;

		if ((column3 != null) && (column3.length() == 0)) {
			masterDataAttributeCacheModel.column3 = null;
		}

		masterDataAttributeCacheModel.source = getSource();

		String source = masterDataAttributeCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			masterDataAttributeCacheModel.source = null;
		}

		masterDataAttributeCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = masterDataAttributeCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			masterDataAttributeCacheModel.inboundStatus = null;
		}

		return masterDataAttributeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(65);

		sb.append("{column15=");
		sb.append(getColumn15());
		sb.append(", column14=");
		sb.append(getColumn14());
		sb.append(", column17=");
		sb.append(getColumn17());
		sb.append(", column16=");
		sb.append(getColumn16());
		sb.append(", column11=");
		sb.append(getColumn11());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", column10=");
		sb.append(getColumn10());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", column13=");
		sb.append(getColumn13());
		sb.append(", column12=");
		sb.append(getColumn12());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", column19=");
		sb.append(getColumn19());
		sb.append(", column18=");
		sb.append(getColumn18());
		sb.append(", masterAttribute=");
		sb.append(getMasterAttribute());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", masterType=");
		sb.append(getMasterType());
		sb.append(", masterId=");
		sb.append(getMasterId());
		sb.append(", column20=");
		sb.append(getColumn20());
		sb.append(", column9=");
		sb.append(getColumn9());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", column6=");
		sb.append(getColumn6());
		sb.append(", masterDataAttributeSid=");
		sb.append(getMasterDataAttributeSid());
		sb.append(", column5=");
		sb.append(getColumn5());
		sb.append(", column8=");
		sb.append(getColumn8());
		sb.append(", column7=");
		sb.append(getColumn7());
		sb.append(", recordLockStatus=");
		sb.append(getRecordLockStatus());
		sb.append(", column2=");
		sb.append(getColumn2());
		sb.append(", column1=");
		sb.append(getColumn1());
		sb.append(", column4=");
		sb.append(getColumn4());
		sb.append(", column3=");
		sb.append(getColumn3());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(100);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.MasterDataAttribute");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>column15</column-name><column-value><![CDATA[");
		sb.append(getColumn15());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column14</column-name><column-value><![CDATA[");
		sb.append(getColumn14());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column17</column-name><column-value><![CDATA[");
		sb.append(getColumn17());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column16</column-name><column-value><![CDATA[");
		sb.append(getColumn16());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column11</column-name><column-value><![CDATA[");
		sb.append(getColumn11());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column10</column-name><column-value><![CDATA[");
		sb.append(getColumn10());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column13</column-name><column-value><![CDATA[");
		sb.append(getColumn13());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column12</column-name><column-value><![CDATA[");
		sb.append(getColumn12());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column19</column-name><column-value><![CDATA[");
		sb.append(getColumn19());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column18</column-name><column-value><![CDATA[");
		sb.append(getColumn18());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterAttribute</column-name><column-value><![CDATA[");
		sb.append(getMasterAttribute());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterType</column-name><column-value><![CDATA[");
		sb.append(getMasterType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterId</column-name><column-value><![CDATA[");
		sb.append(getMasterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column20</column-name><column-value><![CDATA[");
		sb.append(getColumn20());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column9</column-name><column-value><![CDATA[");
		sb.append(getColumn9());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column6</column-name><column-value><![CDATA[");
		sb.append(getColumn6());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterDataAttributeSid</column-name><column-value><![CDATA[");
		sb.append(getMasterDataAttributeSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column5</column-name><column-value><![CDATA[");
		sb.append(getColumn5());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column8</column-name><column-value><![CDATA[");
		sb.append(getColumn8());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column7</column-name><column-value><![CDATA[");
		sb.append(getColumn7());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
		sb.append(getRecordLockStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column2</column-name><column-value><![CDATA[");
		sb.append(getColumn2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column1</column-name><column-value><![CDATA[");
		sb.append(getColumn1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column4</column-name><column-value><![CDATA[");
		sb.append(getColumn4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column3</column-name><column-value><![CDATA[");
		sb.append(getColumn3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MasterDataAttribute.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MasterDataAttribute.class
		};
	private String _column15;
	private String _column14;
	private String _column17;
	private String _column16;
	private String _column11;
	private int _modifiedBy;
	private String _column10;
	private Date _createdDate;
	private String _column13;
	private String _column12;
	private String _batchId;
	private String _column19;
	private String _column18;
	private String _masterAttribute;
	private String _originalMasterAttribute;
	private int _createdBy;
	private String _masterType;
	private String _originalMasterType;
	private String _masterId;
	private String _originalMasterId;
	private String _column20;
	private String _column9;
	private Date _modifiedDate;
	private String _column6;
	private int _masterDataAttributeSid;
	private String _column5;
	private String _column8;
	private String _column7;
	private boolean _recordLockStatus;
	private String _column2;
	private String _column1;
	private String _column4;
	private String _column3;
	private String _source;
	private String _inboundStatus;
	private long _columnBitmask;
	private MasterDataAttribute _escapedModel;
}