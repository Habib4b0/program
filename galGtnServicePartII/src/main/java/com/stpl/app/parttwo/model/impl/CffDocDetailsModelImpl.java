package com.stpl.app.parttwo.model.impl;

import com.stpl.app.parttwo.model.CffDocDetails;
import com.stpl.app.parttwo.model.CffDocDetailsModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CffDocDetails service. Represents a row in the &quot;CFF_DOC_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.parttwo.model.CffDocDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CffDocDetailsImpl}.
 * </p>
 *
 * @author
 * @see CffDocDetailsImpl
 * @see com.stpl.app.parttwo.model.CffDocDetails
 * @see com.stpl.app.parttwo.model.CffDocDetailsModel
 * @generated
 */
public class CffDocDetailsModelImpl extends BaseModelImpl<CffDocDetails>
    implements CffDocDetailsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a cff doc details model instance should use the {@link com.stpl.app.parttwo.model.CffDocDetails} interface instead.
     */
    public static final String TABLE_NAME = "CFF_DOC_DETAILS";
    public static final Object[][] TABLE_COLUMNS = {
            { "FILE_NAME", Types.VARCHAR },
            { "UPLOAD_DATE", Types.TIMESTAMP },
            { "FILE_TYPE", Types.VARCHAR },
            { "UPLOAD_BY", Types.INTEGER },
            { "CFF_MASTER_SID", Types.INTEGER },
            { "CFF_DOC_DETAILS_SID", Types.INTEGER },
            { "FILE_SIZE", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table CFF_DOC_DETAILS (FILE_NAME VARCHAR(75) null,UPLOAD_DATE DATE null,FILE_TYPE VARCHAR(75) null,UPLOAD_BY INTEGER,CFF_MASTER_SID INTEGER,CFF_DOC_DETAILS_SID INTEGER not null primary key IDENTITY,FILE_SIZE VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table CFF_DOC_DETAILS";
    public static final String ORDER_BY_JPQL = " ORDER BY cffDocDetails.cffDocDetailsSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY CFF_DOC_DETAILS.CFF_DOC_DETAILS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.parttwo.model.CffDocDetails"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.parttwo.model.CffDocDetails"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.parttwo.model.CffDocDetails"));
    private static ClassLoader _classLoader = CffDocDetails.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            CffDocDetails.class
        };
    private String _fileName;
    private Date _uploadDate;
    private String _fileType;
    private int _uploadBy;
    private int _cffMasterSid;
    private int _cffDocDetailsSid;
    private String _fileSize;
    private CffDocDetails _escapedModel;

    public CffDocDetailsModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _cffDocDetailsSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setCffDocDetailsSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _cffDocDetailsSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return CffDocDetails.class;
    }

    @Override
    public String getModelClassName() {
        return CffDocDetails.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("fileName", getFileName());
        attributes.put("uploadDate", getUploadDate());
        attributes.put("fileType", getFileType());
        attributes.put("uploadBy", getUploadBy());
        attributes.put("cffMasterSid", getCffMasterSid());
        attributes.put("cffDocDetailsSid", getCffDocDetailsSid());
        attributes.put("fileSize", getFileSize());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String fileName = (String) attributes.get("fileName");

        if (fileName != null) {
            setFileName(fileName);
        }

        Date uploadDate = (Date) attributes.get("uploadDate");

        if (uploadDate != null) {
            setUploadDate(uploadDate);
        }

        String fileType = (String) attributes.get("fileType");

        if (fileType != null) {
            setFileType(fileType);
        }

        Integer uploadBy = (Integer) attributes.get("uploadBy");

        if (uploadBy != null) {
            setUploadBy(uploadBy);
        }

        Integer cffMasterSid = (Integer) attributes.get("cffMasterSid");

        if (cffMasterSid != null) {
            setCffMasterSid(cffMasterSid);
        }

        Integer cffDocDetailsSid = (Integer) attributes.get("cffDocDetailsSid");

        if (cffDocDetailsSid != null) {
            setCffDocDetailsSid(cffDocDetailsSid);
        }

        String fileSize = (String) attributes.get("fileSize");

        if (fileSize != null) {
            setFileSize(fileSize);
        }
    }

    @Override
    public String getFileName() {
        if (_fileName == null) {
            return StringPool.BLANK;
        } else {
            return _fileName;
        }
    }

    @Override
    public void setFileName(String fileName) {
        _fileName = fileName;
    }

    @Override
    public Date getUploadDate() {
        return _uploadDate;
    }

    @Override
    public void setUploadDate(Date uploadDate) {
        _uploadDate = uploadDate;
    }

    @Override
    public String getFileType() {
        if (_fileType == null) {
            return StringPool.BLANK;
        } else {
            return _fileType;
        }
    }

    @Override
    public void setFileType(String fileType) {
        _fileType = fileType;
    }

    @Override
    public int getUploadBy() {
        return _uploadBy;
    }

    @Override
    public void setUploadBy(int uploadBy) {
        _uploadBy = uploadBy;
    }

    @Override
    public int getCffMasterSid() {
        return _cffMasterSid;
    }

    @Override
    public void setCffMasterSid(int cffMasterSid) {
        _cffMasterSid = cffMasterSid;
    }

    @Override
    public int getCffDocDetailsSid() {
        return _cffDocDetailsSid;
    }

    @Override
    public void setCffDocDetailsSid(int cffDocDetailsSid) {
        _cffDocDetailsSid = cffDocDetailsSid;
    }

    @Override
    public String getFileSize() {
        if (_fileSize == null) {
            return StringPool.BLANK;
        } else {
            return _fileSize;
        }
    }

    @Override
    public void setFileSize(String fileSize) {
        _fileSize = fileSize;
    }

    @Override
    public CffDocDetails toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (CffDocDetails) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CffDocDetailsImpl cffDocDetailsImpl = new CffDocDetailsImpl();

        cffDocDetailsImpl.setFileName(getFileName());
        cffDocDetailsImpl.setUploadDate(getUploadDate());
        cffDocDetailsImpl.setFileType(getFileType());
        cffDocDetailsImpl.setUploadBy(getUploadBy());
        cffDocDetailsImpl.setCffMasterSid(getCffMasterSid());
        cffDocDetailsImpl.setCffDocDetailsSid(getCffDocDetailsSid());
        cffDocDetailsImpl.setFileSize(getFileSize());

        cffDocDetailsImpl.resetOriginalValues();

        return cffDocDetailsImpl;
    }

    @Override
    public int compareTo(CffDocDetails cffDocDetails) {
        int primaryKey = cffDocDetails.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof CffDocDetails)) {
            return false;
        }

        CffDocDetails cffDocDetails = (CffDocDetails) obj;

        int primaryKey = cffDocDetails.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<CffDocDetails> toCacheModel() {
        CffDocDetailsCacheModel cffDocDetailsCacheModel = new CffDocDetailsCacheModel();

        cffDocDetailsCacheModel.fileName = getFileName();

        String fileName = cffDocDetailsCacheModel.fileName;

        if ((fileName != null) && (fileName.length() == 0)) {
            cffDocDetailsCacheModel.fileName = null;
        }

        Date uploadDate = getUploadDate();

        if (uploadDate != null) {
            cffDocDetailsCacheModel.uploadDate = uploadDate.getTime();
        } else {
            cffDocDetailsCacheModel.uploadDate = Long.MIN_VALUE;
        }

        cffDocDetailsCacheModel.fileType = getFileType();

        String fileType = cffDocDetailsCacheModel.fileType;

        if ((fileType != null) && (fileType.length() == 0)) {
            cffDocDetailsCacheModel.fileType = null;
        }

        cffDocDetailsCacheModel.uploadBy = getUploadBy();

        cffDocDetailsCacheModel.cffMasterSid = getCffMasterSid();

        cffDocDetailsCacheModel.cffDocDetailsSid = getCffDocDetailsSid();

        cffDocDetailsCacheModel.fileSize = getFileSize();

        String fileSize = cffDocDetailsCacheModel.fileSize;

        if ((fileSize != null) && (fileSize.length() == 0)) {
            cffDocDetailsCacheModel.fileSize = null;
        }

        return cffDocDetailsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{fileName=");
        sb.append(getFileName());
        sb.append(", uploadDate=");
        sb.append(getUploadDate());
        sb.append(", fileType=");
        sb.append(getFileType());
        sb.append(", uploadBy=");
        sb.append(getUploadBy());
        sb.append(", cffMasterSid=");
        sb.append(getCffMasterSid());
        sb.append(", cffDocDetailsSid=");
        sb.append(getCffDocDetailsSid());
        sb.append(", fileSize=");
        sb.append(getFileSize());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.parttwo.model.CffDocDetails");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>fileName</column-name><column-value><![CDATA[");
        sb.append(getFileName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>uploadDate</column-name><column-value><![CDATA[");
        sb.append(getUploadDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fileType</column-name><column-value><![CDATA[");
        sb.append(getFileType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>uploadBy</column-name><column-value><![CDATA[");
        sb.append(getUploadBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cffMasterSid</column-name><column-value><![CDATA[");
        sb.append(getCffMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cffDocDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getCffDocDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fileSize</column-name><column-value><![CDATA[");
        sb.append(getFileSize());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
