/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stpl.app.gtnforecasting.nationalassumptions.ui;

import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.JavaConstants;
import com.stpl.app.gtnforecasting.nationalassumptions.ui.view.DataSelectionView;
import com.stpl.app.gtnforecasting.nationalassumptions.ui.view.NationalAssumptionsView;
import com.stpl.app.gtnforecasting.nationalassumptions.util.CommonUtils;
import static com.stpl.app.gtnforecasting.nationalassumptions.util.Constants.CommonConstants.ACTION;
import com.stpl.app.gtnforecasting.sessionutils.SessionDTO;
import com.stpl.app.gtnforecasting.sessionutils.SessionUtil;
import com.stpl.app.gtnforecasting.utils.Constant;
import static com.stpl.app.gtnforecasting.utils.Constant.PROJECTION_ID;
import static com.stpl.app.gtnforecasting.utils.Constant.USER_ID;
import com.stpl.ifs.ui.util.converters.DataTypeConverter;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.Navigator;
import com.vaadin.server.DefaultErrorHandler;
import com.vaadin.server.VaadinRequest;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.UI;
import javax.portlet.PortletConfig;
import javax.portlet.PortletRequest;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author gopinath
 */
public class NationalAssumptionsUI extends UI {

    /**
     * The Constant serialVersionUID.
     */
    private static final long serialVersionUID = -1698071209409581013L;

    /**
     * The navigator.
     */
    @AutoGenerated
    private Navigator navigator;

    /**
     * The Constant LOGGER.
     */
    private static final Logger LOGGER = LoggerFactory.getLogger(NationalAssumptionsUI.class);
    /**
     * The projection id.
     */
    private String projectionId;
    protected SessionDTO sessionDto = null;

    public NationalAssumptionsUI() {
        super();
    }

    /* (non-Javadoc)
     * @see com.vaadin.ui.UI#init(com.vaadin.server.VaadinRequest)
     */
    @Override
    protected void init(final VaadinRequest request) {
        try {
            LOGGER.debug("Starting of init method");
            addStyleName("bootstrap bootstrap-ui bootstrap-forecast bootstrap-nm");
            final String userId = request.getRemoteUser();
            PortletConfig portletConfig = (PortletConfig) request.getAttribute(JavaConstants.JAVAX_PORTLET_CONFIG);
            PortletRequest portletRequest = (PortletRequest) request.getAttribute(JavaConstants.JAVAX_PORTLET_REQUEST);
            com.stpl.app.gtnforecasting.utils.CommonUtils.setPortletSession(portletRequest.getPortletSession());
            com.stpl.app.gtnforecasting.utils.CommonUtils.setPortalConfig(portletConfig);

            VaadinSession.getCurrent().setAttribute(USER_ID, userId);
            VaadinSession.getCurrent().setAttribute(ACTION.getConstant(), StringUtils.EMPTY);
            VaadinSession.getCurrent().setAttribute(Constant.PORTLET_NAME, portletConfig.getPortletName());
            CommonUtils.getUserName();
            CommonUtils.getStartandTodate();
            sessionDto = SessionUtil.createSession();
            sessionDto.setScreenName("NationalAssumptions");
            if (projectionId == null) {
                VaadinSession.getCurrent().setAttribute(PROJECTION_ID, 0);
                sessionDto.setProjectionId(0);
            } else {
                VaadinSession.getCurrent().setAttribute(PROJECTION_ID, DataTypeConverter.convertStringToInteger(projectionId.trim()));
                sessionDto.setProjectionId(Integer.parseInt(projectionId));
                navigator.navigateTo(DataSelectionView.NAME);
            }
           

            /**
             * Registering navigation views
             */
            navigator = new Navigator(this, this);
            navigator.addView(DataSelectionView.NAME, new DataSelectionView(sessionDto));
            navigator.addView(NationalAssumptionsView.NAME, new NationalAssumptionsView(sessionDto));
            navigator.setErrorView(new DataSelectionView(sessionDto));

            

        } catch (SystemException | NumberFormatException ex) {
            LOGGER.error(ex.getMessage());
        }
        
        //         Configure the error handler for the UI
        UI.getCurrent().setErrorHandler(new DefaultErrorHandler() {
            @Override
            public void error(com.vaadin.server.ErrorEvent event) {
                // Find the final cause
                String cause;
                StringBuilder causeBuilder = new StringBuilder("The Exception occured because of: ");
                for (Throwable t = event.getThrowable(); t != null; t = t.getCause()) {
                    if (t.getCause() == null) // We're at final cause
                    {
                        causeBuilder.append(t.getClass().getName());
                    }

                }
                cause = causeBuilder.toString();
                LOGGER.error(cause);
                // Do the default error handling (optional)
            }
        });
        LOGGER.debug("End of init method");
        
        
    }

}
