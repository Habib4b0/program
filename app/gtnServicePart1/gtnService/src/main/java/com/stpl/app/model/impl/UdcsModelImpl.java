/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.Udcs;
import com.stpl.app.model.UdcsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Udcs service. Represents a row in the &quot;UDCS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UdcsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UdcsImpl}.
 * </p>
 *
 * @author
 * @see UdcsImpl
 * @see Udcs
 * @see UdcsModel
 * @generated
 */
@ProviderType
public class UdcsModelImpl extends BaseModelImpl<Udcs> implements UdcsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a udcs model instance should use the {@link Udcs} interface instead.
	 */
	public static final String TABLE_NAME = "UDCS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "UDC1", Types.INTEGER },
			{ "UDC2", Types.INTEGER },
			{ "MASTER_TYPE", Types.VARCHAR },
			{ "UDC3", Types.INTEGER },
			{ "UDC12", Types.INTEGER },
			{ "UDC11", Types.INTEGER },
			{ "UDCS_SID", Types.INTEGER },
			{ "MASTER_SID", Types.INTEGER },
			{ "UDC10", Types.INTEGER },
			{ "UDC9", Types.INTEGER },
			{ "UDC8", Types.INTEGER },
			{ "UDC7", Types.INTEGER },
			{ "UDC6", Types.INTEGER },
			{ "UDC5", Types.INTEGER },
			{ "UDC4", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("UDC1", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC2", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MASTER_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UDC3", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC12", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC11", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDCS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC10", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC9", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC8", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC7", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC6", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC5", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC4", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table UDCS (UDC1 INTEGER,UDC2 INTEGER,MASTER_TYPE VARCHAR(75) null,UDC3 INTEGER,UDC12 INTEGER,UDC11 INTEGER,UDCS_SID INTEGER not null primary key IDENTITY,MASTER_SID INTEGER,UDC10 INTEGER,UDC9 INTEGER,UDC8 INTEGER,UDC7 INTEGER,UDC6 INTEGER,UDC5 INTEGER,UDC4 INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table UDCS";
	public static final String ORDER_BY_JPQL = " ORDER BY udcs.udcsSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UDCS.UDCS_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.Udcs"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.Udcs"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.Udcs"));

	public UdcsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _udcsSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setUdcsSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _udcsSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Udcs.class;
	}

	@Override
	public String getModelClassName() {
		return Udcs.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("udc1", getUdc1());
		attributes.put("udc2", getUdc2());
		attributes.put("masterType", getMasterType());
		attributes.put("udc3", getUdc3());
		attributes.put("udc12", getUdc12());
		attributes.put("udc11", getUdc11());
		attributes.put("udcsSid", getUdcsSid());
		attributes.put("masterSid", getMasterSid());
		attributes.put("udc10", getUdc10());
		attributes.put("udc9", getUdc9());
		attributes.put("udc8", getUdc8());
		attributes.put("udc7", getUdc7());
		attributes.put("udc6", getUdc6());
		attributes.put("udc5", getUdc5());
		attributes.put("udc4", getUdc4());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer udc1 = (Integer)attributes.get("udc1");

		if (udc1 != null) {
			setUdc1(udc1);
		}

		Integer udc2 = (Integer)attributes.get("udc2");

		if (udc2 != null) {
			setUdc2(udc2);
		}

		String masterType = (String)attributes.get("masterType");

		if (masterType != null) {
			setMasterType(masterType);
		}

		Integer udc3 = (Integer)attributes.get("udc3");

		if (udc3 != null) {
			setUdc3(udc3);
		}

		Integer udc12 = (Integer)attributes.get("udc12");

		if (udc12 != null) {
			setUdc12(udc12);
		}

		Integer udc11 = (Integer)attributes.get("udc11");

		if (udc11 != null) {
			setUdc11(udc11);
		}

		Integer udcsSid = (Integer)attributes.get("udcsSid");

		if (udcsSid != null) {
			setUdcsSid(udcsSid);
		}

		Integer masterSid = (Integer)attributes.get("masterSid");

		if (masterSid != null) {
			setMasterSid(masterSid);
		}

		Integer udc10 = (Integer)attributes.get("udc10");

		if (udc10 != null) {
			setUdc10(udc10);
		}

		Integer udc9 = (Integer)attributes.get("udc9");

		if (udc9 != null) {
			setUdc9(udc9);
		}

		Integer udc8 = (Integer)attributes.get("udc8");

		if (udc8 != null) {
			setUdc8(udc8);
		}

		Integer udc7 = (Integer)attributes.get("udc7");

		if (udc7 != null) {
			setUdc7(udc7);
		}

		Integer udc6 = (Integer)attributes.get("udc6");

		if (udc6 != null) {
			setUdc6(udc6);
		}

		Integer udc5 = (Integer)attributes.get("udc5");

		if (udc5 != null) {
			setUdc5(udc5);
		}

		Integer udc4 = (Integer)attributes.get("udc4");

		if (udc4 != null) {
			setUdc4(udc4);
		}
	}

	@Override
	public int getUdc1() {
		return _udc1;
	}

	@Override
	public void setUdc1(int udc1) {
		_udc1 = udc1;
	}

	@Override
	public int getUdc2() {
		return _udc2;
	}

	@Override
	public void setUdc2(int udc2) {
		_udc2 = udc2;
	}

	@Override
	public String getMasterType() {
		if (_masterType == null) {
			return StringPool.BLANK;
		}
		else {
			return _masterType;
		}
	}

	@Override
	public void setMasterType(String masterType) {
		_masterType = masterType;
	}

	@Override
	public int getUdc3() {
		return _udc3;
	}

	@Override
	public void setUdc3(int udc3) {
		_udc3 = udc3;
	}

	@Override
	public int getUdc12() {
		return _udc12;
	}

	@Override
	public void setUdc12(int udc12) {
		_udc12 = udc12;
	}

	@Override
	public int getUdc11() {
		return _udc11;
	}

	@Override
	public void setUdc11(int udc11) {
		_udc11 = udc11;
	}

	@Override
	public int getUdcsSid() {
		return _udcsSid;
	}

	@Override
	public void setUdcsSid(int udcsSid) {
		_udcsSid = udcsSid;
	}

	@Override
	public int getMasterSid() {
		return _masterSid;
	}

	@Override
	public void setMasterSid(int masterSid) {
		_masterSid = masterSid;
	}

	@Override
	public int getUdc10() {
		return _udc10;
	}

	@Override
	public void setUdc10(int udc10) {
		_udc10 = udc10;
	}

	@Override
	public int getUdc9() {
		return _udc9;
	}

	@Override
	public void setUdc9(int udc9) {
		_udc9 = udc9;
	}

	@Override
	public int getUdc8() {
		return _udc8;
	}

	@Override
	public void setUdc8(int udc8) {
		_udc8 = udc8;
	}

	@Override
	public int getUdc7() {
		return _udc7;
	}

	@Override
	public void setUdc7(int udc7) {
		_udc7 = udc7;
	}

	@Override
	public int getUdc6() {
		return _udc6;
	}

	@Override
	public void setUdc6(int udc6) {
		_udc6 = udc6;
	}

	@Override
	public int getUdc5() {
		return _udc5;
	}

	@Override
	public void setUdc5(int udc5) {
		_udc5 = udc5;
	}

	@Override
	public int getUdc4() {
		return _udc4;
	}

	@Override
	public void setUdc4(int udc4) {
		_udc4 = udc4;
	}

	@Override
	public Udcs toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Udcs)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UdcsImpl udcsImpl = new UdcsImpl();

		udcsImpl.setUdc1(getUdc1());
		udcsImpl.setUdc2(getUdc2());
		udcsImpl.setMasterType(getMasterType());
		udcsImpl.setUdc3(getUdc3());
		udcsImpl.setUdc12(getUdc12());
		udcsImpl.setUdc11(getUdc11());
		udcsImpl.setUdcsSid(getUdcsSid());
		udcsImpl.setMasterSid(getMasterSid());
		udcsImpl.setUdc10(getUdc10());
		udcsImpl.setUdc9(getUdc9());
		udcsImpl.setUdc8(getUdc8());
		udcsImpl.setUdc7(getUdc7());
		udcsImpl.setUdc6(getUdc6());
		udcsImpl.setUdc5(getUdc5());
		udcsImpl.setUdc4(getUdc4());

		udcsImpl.resetOriginalValues();

		return udcsImpl;
	}

	@Override
	public int compareTo(Udcs udcs) {
		int primaryKey = udcs.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Udcs)) {
			return false;
		}

		Udcs udcs = (Udcs)obj;

		int primaryKey = udcs.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Udcs> toCacheModel() {
		UdcsCacheModel udcsCacheModel = new UdcsCacheModel();

		udcsCacheModel.udc1 = getUdc1();

		udcsCacheModel.udc2 = getUdc2();

		udcsCacheModel.masterType = getMasterType();

		String masterType = udcsCacheModel.masterType;

		if ((masterType != null) && (masterType.length() == 0)) {
			udcsCacheModel.masterType = null;
		}

		udcsCacheModel.udc3 = getUdc3();

		udcsCacheModel.udc12 = getUdc12();

		udcsCacheModel.udc11 = getUdc11();

		udcsCacheModel.udcsSid = getUdcsSid();

		udcsCacheModel.masterSid = getMasterSid();

		udcsCacheModel.udc10 = getUdc10();

		udcsCacheModel.udc9 = getUdc9();

		udcsCacheModel.udc8 = getUdc8();

		udcsCacheModel.udc7 = getUdc7();

		udcsCacheModel.udc6 = getUdc6();

		udcsCacheModel.udc5 = getUdc5();

		udcsCacheModel.udc4 = getUdc4();

		return udcsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{udc1=");
		sb.append(getUdc1());
		sb.append(", udc2=");
		sb.append(getUdc2());
		sb.append(", masterType=");
		sb.append(getMasterType());
		sb.append(", udc3=");
		sb.append(getUdc3());
		sb.append(", udc12=");
		sb.append(getUdc12());
		sb.append(", udc11=");
		sb.append(getUdc11());
		sb.append(", udcsSid=");
		sb.append(getUdcsSid());
		sb.append(", masterSid=");
		sb.append(getMasterSid());
		sb.append(", udc10=");
		sb.append(getUdc10());
		sb.append(", udc9=");
		sb.append(getUdc9());
		sb.append(", udc8=");
		sb.append(getUdc8());
		sb.append(", udc7=");
		sb.append(getUdc7());
		sb.append(", udc6=");
		sb.append(getUdc6());
		sb.append(", udc5=");
		sb.append(getUdc5());
		sb.append(", udc4=");
		sb.append(getUdc4());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.Udcs");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>udc1</column-name><column-value><![CDATA[");
		sb.append(getUdc1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc2</column-name><column-value><![CDATA[");
		sb.append(getUdc2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterType</column-name><column-value><![CDATA[");
		sb.append(getMasterType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc3</column-name><column-value><![CDATA[");
		sb.append(getUdc3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc12</column-name><column-value><![CDATA[");
		sb.append(getUdc12());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc11</column-name><column-value><![CDATA[");
		sb.append(getUdc11());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udcsSid</column-name><column-value><![CDATA[");
		sb.append(getUdcsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterSid</column-name><column-value><![CDATA[");
		sb.append(getMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc10</column-name><column-value><![CDATA[");
		sb.append(getUdc10());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc9</column-name><column-value><![CDATA[");
		sb.append(getUdc9());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc8</column-name><column-value><![CDATA[");
		sb.append(getUdc8());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc7</column-name><column-value><![CDATA[");
		sb.append(getUdc7());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc6</column-name><column-value><![CDATA[");
		sb.append(getUdc6());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc5</column-name><column-value><![CDATA[");
		sb.append(getUdc5());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc4</column-name><column-value><![CDATA[");
		sb.append(getUdc4());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Udcs.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Udcs.class
		};
	private int _udc1;
	private int _udc2;
	private String _masterType;
	private int _udc3;
	private int _udc12;
	private int _udc11;
	private int _udcsSid;
	private int _masterSid;
	private int _udc10;
	private int _udc9;
	private int _udc8;
	private int _udc7;
	private int _udc6;
	private int _udc5;
	private int _udc4;
	private Udcs _escapedModel;
}