<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<sql>
<entity id="assumption.sales">
<query> <![CDATA[
		
		DECLARE @START_MONTH INT=?
		DECLARE @START_YEAR INT=?
		DECLARE @END_MONTH INT=?
		DECLARE @END_YEAR INT=?
		SELECT 
			P."YEAR", 
			CM.COMPANY_NAME, 
			CM.COMPANY_ID, 
			SPM.USER_GROUP, 
			BM.BRAND_NAME, 
			AVG(SP.ACCOUNT_GROWTH) ACCOUNT_GROWTH, 
			AVG(SP.PRODUCT_GROWTH) PRODUCT_GROWTH 
		FROM 
			dbo.CCP_DETAILS CCP, 
			dbo.ITEM_MASTER IM, 
			dbo.PROJECTION_DETAILS PD, 
			dbo.COMPANY_MASTER CM, 
			dbo.BRAND_MASTER BM, 
			dbo.ST_NM_SALES_PROJECTION_MASTER SPM, 
			dbo.ST_NM_SALES_PROJECTION SP,  
			dbo."PERIOD" P 
		WHERE IM.ITEM_MASTER_SID=CCP.ITEM_MASTER_SID 
			AND CM.COMPANY_MASTER_SID=CCP.COMPANY_MASTER_SID 
			AND CCP.CCP_DETAILS_SID=PD.CCP_DETAILS_SID 
			AND BM.BRAND_MASTER_SID=IM.BRAND_MASTER_SID 
			AND SPM.PROJECTION_DETAILS_SID=PD.PROJECTION_DETAILS_SID 
			AND SP.PROJECTION_DETAILS_SID=PD.PROJECTION_DETAILS_SID 
			AND SP.PERIOD_SID=P.PERIOD_SID 
			AND P.PERIOD_DATE  BETWEEN
			   CASE
			   WHEN @START_MONTH = 1 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-01-01')
			   WHEN @START_MONTH = 2 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-02-01')
			   WHEN @START_MONTH = 3 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-03-01')
			   WHEN @START_MONTH = 4 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-04-01')
			   WHEN @START_MONTH = 5 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-05-01')
			   WHEN @START_MONTH = 6 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-06-01')
			   WHEN @START_MONTH = 7 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-07-01')
			   WHEN @START_MONTH = 8 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-08-01')
			   WHEN @START_MONTH = 9 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-09-01')
			   WHEN @START_MONTH = 10 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-10-01')
			   WHEN @START_MONTH = 11 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-11-01')
			   WHEN @START_MONTH = 12 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-12-01')
			   END
			   AND
			   CASE
			   WHEN @END_MONTH = 1 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-01-31')
			   WHEN @END_MONTH = 2 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-02-28')
			   WHEN @END_MONTH = 3 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-03-31')
			   WHEN @END_MONTH = 4 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-04-30')
			   WHEN @END_MONTH = 5 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-05-31')
			   WHEN @END_MONTH = 6 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-06-30')
			   WHEN @END_MONTH = 7 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-07-31')
			   WHEN @END_MONTH = 8 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-08-31')
			   WHEN @END_MONTH = 9 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-09-30')
			   WHEN @END_MONTH = 10 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-10-31')
			   WHEN @END_MONTH = 11 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-11-30')
			   WHEN @END_MONTH = 12 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-12-31')
			   END
			AND PD.PROJECTION_MASTER_SID=? 
			AND SPM.USER_ID=? 
			AND SPM.SESSION_ID=? 
			AND SP.USER_ID=? 
			AND SP.SESSION_ID=? 
		GROUP BY 
			CM.COMPANY_NAME, 
			CM.COMPANY_ID, 
			BM.BRAND_NAME, 
			SPM.USER_GROUP, 
			P."YEAR" 
		ORDER BY 
			P."YEAR", 
			CM.COMPANY_NAME, 
			CM.COMPANY_ID, 
			SPM.USER_GROUP, 
			BM.BRAND_NAME 
		ASC;
		
    ]]> </query>
</entity>
<entity id="assumption.discount">
<query> <![CDATA[
		
		DECLARE @START_MONTH INT=?
		DECLARE @START_YEAR INT=?
		DECLARE @END_MONTH INT=?
		DECLARE @END_YEAR INT=?
		SELECT 
			P."YEAR", 
			CM.COMPANY_NAME, 
			CM.COMPANY_ID,  
			SPM.USER_GROUP, 
			BM.BRAND_NAME 
		FROM 
			dbo.CCP_DETAILS CCP, 
			dbo.ITEM_MASTER IM, 
			dbo.PROJECTION_DETAILS PD, 
			dbo.COMPANY_MASTER CM, 
			dbo.BRAND_MASTER BM, 
			dbo.ST_NM_DISCOUNT_PROJ_MASTER SPM, 
			dbo.ST_NM_DISCOUNT_PROJECTION SP,  
			dbo."PERIOD" P 
		WHERE IM.ITEM_MASTER_SID=CCP.ITEM_MASTER_SID 
			AND CM.COMPANY_MASTER_SID=CCP.COMPANY_MASTER_SID 
			AND CCP.CCP_DETAILS_SID=PD.CCP_DETAILS_SID 
			AND BM.BRAND_MASTER_SID=IM.BRAND_MASTER_SID 
			AND SPM.PROJECTION_DETAILS_SID=PD.PROJECTION_DETAILS_SID 
			AND SP.PROJECTION_DETAILS_SID=PD.PROJECTION_DETAILS_SID 
			AND SP.PERIOD_SID=P.PERIOD_SID 
			AND P.PERIOD_DATE  BETWEEN
			   CASE
			   WHEN @START_MONTH = 1 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-01-01')
			   WHEN @START_MONTH = 2 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-02-01')
			   WHEN @START_MONTH = 3 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-03-01')
			   WHEN @START_MONTH = 4 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-04-01')
			   WHEN @START_MONTH = 5 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-05-01')
			   WHEN @START_MONTH = 6 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-06-01')
			   WHEN @START_MONTH = 7 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-07-01')
			   WHEN @START_MONTH = 8 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-08-01')
			   WHEN @START_MONTH = 9 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-09-01')
			   WHEN @START_MONTH = 10 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-10-01')
			   WHEN @START_MONTH = 11 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-11-01')
			   WHEN @START_MONTH = 12 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-12-01')
			   END
			   AND
			   CASE
			   WHEN @END_MONTH = 1 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-01-31')
			   WHEN @END_MONTH = 2 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-02-28')
			   WHEN @END_MONTH = 3 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-03-31')
			   WHEN @END_MONTH = 4 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-04-30')
			   WHEN @END_MONTH = 5 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-05-31')
			   WHEN @END_MONTH = 6 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-06-30')
			   WHEN @END_MONTH = 7 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-07-31')
			   WHEN @END_MONTH = 8 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-08-31')
			   WHEN @END_MONTH = 9 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-09-30')
			   WHEN @END_MONTH = 10 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-10-31')
			   WHEN @END_MONTH = 11 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-11-30')
			   WHEN @END_MONTH = 12 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-12-31')
			   END
			AND PD.PROJECTION_MASTER_SID=? 
			AND SPM.USER_ID=? 
			AND SPM.SESSION_ID=? 
			AND SP.USER_ID=? 
			AND SP.SESSION_ID=? 
		GROUP BY
			CM.COMPANY_NAME, 
			CM.COMPANY_ID,  
			BM.BRAND_NAME, 
			SPM.USER_GROUP, 
			P."YEAR"
		ORDER BY
			P."YEAR", 
			CM.COMPANY_NAME, 
			CM.COMPANY_ID,  
			SPM.USER_GROUP, 
			BM.BRAND_NAME
		ASC;
		
    ]]> </query>
</entity>
<entity id="assumption.ppa">
<query> <![CDATA[
		
		DECLARE @START_MONTH INT=?
		DECLARE @START_YEAR INT=?
		DECLARE @END_MONTH INT=?
		DECLARE @END_YEAR INT=?
		SELECT 
			P."YEAR", 
			CM.COMPANY_NAME, 
			CM.COMPANY_ID, 
			SPM.USER_GROUP, 
			BM.BRAND_NAME, 
			AVG(SP.PRICE_CAP) PRICE_CAP, 
			AVG(SP.PROJECTION_RATE) PROJECTION_DISCOUNT_UNITS, 
			SUM(SP.PROJECTION_SALES) PROJECTION_DISCOUNT_DOLLAR 
		FROM 
			dbo.CCP_DETAILS CCP, 
			dbo.ITEM_MASTER IM, 
			dbo.PROJECTION_DETAILS PD, 
			dbo.COMPANY_MASTER CM, 
			dbo.BRAND_MASTER BM, 
			dbo.ST_NM_PPA_PROJECTION_MASTER SPM, 
			dbo.ST_NM_PPA_PROJECTION SP,  
			dbo."PERIOD" P 
		WHERE IM.ITEM_MASTER_SID=CCP.ITEM_MASTER_SID 
			AND CM.COMPANY_MASTER_SID=CCP.COMPANY_MASTER_SID 
			AND CCP.CCP_DETAILS_SID=PD.CCP_DETAILS_SID 
			AND BM.BRAND_MASTER_SID=IM.BRAND_MASTER_SID 
			AND SPM.PROJECTION_DETAILS_SID=PD.PROJECTION_DETAILS_SID 
			AND SP.PROJECTION_DETAILS_SID=PD.PROJECTION_DETAILS_SID 
			AND SP.PERIOD_SID=P.PERIOD_SID 
			AND P.PERIOD_DATE  BETWEEN
			   CASE
			   WHEN @START_MONTH = 1 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-01-01')
			   WHEN @START_MONTH = 2 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-02-01')
			   WHEN @START_MONTH = 3 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-03-01')
			   WHEN @START_MONTH = 4 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-04-01')
			   WHEN @START_MONTH = 5 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-05-01')
			   WHEN @START_MONTH = 6 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-06-01')
			   WHEN @START_MONTH = 7 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-07-01')
			   WHEN @START_MONTH = 8 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-08-01')
			   WHEN @START_MONTH = 9 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-09-01')
			   WHEN @START_MONTH = 10 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-10-01')
			   WHEN @START_MONTH = 11 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-11-01')
			   WHEN @START_MONTH = 12 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @START_YEAR) + '-12-01')
			   END
			   AND
			   CASE
			   WHEN @END_MONTH = 1 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-01-31')
			   WHEN @END_MONTH = 2 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-02-28')
			   WHEN @END_MONTH = 3 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-03-31')
			   WHEN @END_MONTH = 4 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-04-30')
			   WHEN @END_MONTH = 5 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-05-31')
			   WHEN @END_MONTH = 6 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-06-30')
			   WHEN @END_MONTH = 7 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-07-31')
			   WHEN @END_MONTH = 8 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-08-31')
			   WHEN @END_MONTH = 9 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-09-30')
			   WHEN @END_MONTH = 10 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-10-31')
			   WHEN @END_MONTH = 11 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-11-30')
			   WHEN @END_MONTH = 12 THEN CONVERT(DATE, CONVERT(VARCHAR(4), @END_YEAR) + '-12-31')
			   END
			AND PD.PROJECTION_MASTER_SID=? 
			AND SPM.USER_ID=? 
			AND SPM.SESSION_ID=? 
			AND SP.USER_ID=? 
			AND SP.SESSION_ID=? 
		GROUP BY
			CM.COMPANY_NAME, 
			CM.COMPANY_ID,  
			BM.BRAND_NAME, 
			SPM.USER_GROUP, 
			P."YEAR"
		ORDER BY
			P."YEAR", 
			CM.COMPANY_NAME, 
			CM.COMPANY_ID,  
			SPM.USER_GROUP, 
			BM.BRAND_NAME
		ASC;
		
    ]]> </query>
</entity>
<entity id="assumption.pvsTempInsert">
<query> <![CDATA[
		
		MERGE ST_NM_ASSUMPTIONS AS TARGET
		USING (SELECT  GROSS_PROJECTED.PROJECTION_DETAILS_SID, P.YEAR, 
		       SUM(ISNULL(NMS.PROJECTION_SALES, 0))                                                                                                                               GROSS_SALES_PRIOR,
		       SUM(ISNULL(NMSP.PROJECTION_SALES, 0))                                                                                                                              GROSS_SALES_PROJECTED,
		       SUM(ISNULL(NMSP.PROJECTION_SALES, 0)) - SUM(ISNULL(NMS.PROJECTION_SALES, 0))                                                                                        GROSS_SALES_CHANGE,
		       ?                                                                                                                                                               CAM_ID,
		       1                                                                                                                                                                   PARENT,
		       0                                                                                                                                                                   IS_CHECKED,
		       ?                                                                                                                                                               USER_ID,
		       ?                                                                                                                                                          SESSION_ID,
		       0                                                                                                                                                                   NM_ASSUMPTIONS_SID
		FROM   (SELECT PD.PROJECTION_MASTER_SID,
		               STNMSPM.PROJECTION_DETAILS_SID,
		               STNMSPM.SESSION_ID,
		               PD.CCP_DETAILS_SID
		        FROM   ST_NM_SALES_PROJECTION_MASTER STNMSPM
		               JOIN PROJECTION_DETAILS PD
		                 ON PD.PROJECTION_DETAILS_SID = STNMSPM.PROJECTION_DETAILS_SID
		        WHERE  STNMSPM.USER_ID = ?
		               AND STNMSPM.SESSION_ID = ?
		               AND PD.PROJECTION_MASTER_SID = ?) GROSS_PROJECTED
		       OUTER apply (SELECT TOP 1 PD.PROJECTION_MASTER_SID,
		                                 NMSPM.PROJECTION_DETAILS_SID,
		                                 PD.CCP_DETAILS_SID
		                    FROM   NM_SALES_PROJECTION_MASTER NMSPM
		                           JOIN PROJECTION_DETAILS PD
		                             ON PD.PROJECTION_DETAILS_SID = NMSPM.PROJECTION_DETAILS_SID
		                           JOIN WORKFLOW_MASTER WM
		                             ON WM.PROJECTION_MASTER_SID = PD.PROJECTION_MASTER_SID
		                           JOIN HELPER_TABLE HT
		                             ON HT.HELPER_TABLE_SID = WM.WORKFLOW_STATUS_ID
		                    WHERE  
		                            (PD.PROJECTION_MASTER_SID < GROSS_PROJECTED.PROJECTION_MASTER_SID
		                           OR PD.PROJECTION_MASTER_SID > GROSS_PROJECTED.PROJECTION_MASTER_SID)
		                           AND PD.CCP_DETAILS_SID = GROSS_PROJECTED.CCP_DETAILS_SID
		                           AND HT.DESCRIPTION = 'Approved'
		                           AND HT.LIST_NAME = 'WorkFlowStatus'
		                    ORDER  BY PD.PROJECTION_MASTER_SID DESC) LATEST_CCP_SALES
		       JOIN ST_NM_SALES_PROJECTION NMSP
		         ON NMSP.PROJECTION_DETAILS_SID = GROSS_PROJECTED.PROJECTION_DETAILS_SID 
		         AND NMSP.SESSION_ID=GROSS_PROJECTED.SESSION_ID
		       JOIN PERIOD P
		         ON P.PERIOD_SID = NMSP.PERIOD_SID
		         AND P.PERIOD_DATE  BETWEEN '?' AND '?'	
		       LEFT JOIN NM_SALES_PROJECTION NMS
		              ON NMS.PROJECTION_DETAILS_SID = LATEST_CCP_SALES.PROJECTION_DETAILS_SID
		                 AND NMSP.PERIOD_SID = NMS.PERIOD_SID
		GROUP  BY GROSS_PROJECTED.PROJECTION_DETAILS_SID,
		          P.YEAR) AS SOURCE
		ON ( TARGET.PROJECTION_DETAILS_SID = SOURCE.PROJECTION_DETAILS_SID
		     AND TARGET.PROJECTION_PERIOD = SOURCE.YEAR 
		     AND TARGET.USER_ID=SOURCE.USER_ID 
		     AND TARGET.SESSION_ID= SOURCE.SESSION_ID
		     AND TARGET.PARENT=1)
		WHEN MATCHED THEN
		  UPDATE SET TARGET.GROSS_SALES_PRIOR = SOURCE.GROSS_SALES_PRIOR,
		             TARGET.GROSS_SALES_PROJECTED = SOURCE.GROSS_SALES_PROJECTED,
		             TARGET.GROSS_SALES_PERCENT_CHANGE = SOURCE.GROSS_SALES_CHANGE 
		WHEN NOT MATCHED THEN
		  INSERT (NM_ASSUMPTIONS_SID,
		          PROJECTION_DETAILS_SID,
		          PROJECTION_PERIOD,
		          GROSS_SALES_PRIOR,
		          GROSS_SALES_PROJECTED,
		          GROSS_SALES_PERCENT_CHANGE,
		          CAM_ID,
		          PARENT,
		          IS_CHECKED,
		          USER_ID,
		          SESSION_ID )
		  VALUES ( SOURCE.NM_ASSUMPTIONS_SID,
		           SOURCE.PROJECTION_DETAILS_SID,
		           SOURCE.YEAR,
		           SOURCE.GROSS_SALES_PRIOR,
		           SOURCE.GROSS_SALES_PROJECTED,
		           SOURCE.GROSS_SALES_CHANGE,
		           SOURCE.CAM_ID,
		           SOURCE.PARENT,
		           SOURCE.IS_CHECKED,
		           SOURCE.USER_ID,
		           SOURCE.SESSION_ID ); 
		           
		           
      
		MERGE ST_NM_ASSUMPTIONS AS TARGET
		USING (SELECT  GROSS_PROJECTED.PROJECTION_DETAILS_SID, P.YEAR, 
			   SUM(ISNULL(NMD.PROJECTION_SALES, 0))                                                                                                                                TOTAL_DISCOUNT_PRIOR,
		       SUM(ISNULL(NMDP.PROJECTION_SALES, 0))                                                                                                                               TOTAL_DISCOUNT_PROJECTED,
		       SUM(ISNULL(NMDP.PROJECTION_SALES, 0)) - SUM(ISNULL(NMD.PROJECTION_SALES, 0))                                                                                        TOTAL_DISCOUNT_CHANGE,
		       ?                                                                                                                                                               CAM_ID,
		       1                                                                                                                                                                   PARENT,
		       0                                                                                                                                                                   IS_CHECKED,
		       ?                                                                                                                                                               USER_ID,
		       ?                                                                                                                                                          SESSION_ID,
		       0                                                                                                                                                                   NM_ASSUMPTIONS_SID
		FROM   (SELECT PD.PROJECTION_MASTER_SID,
		               STNMSPM.PROJECTION_DETAILS_SID,
		               STNMSPM.SESSION_ID,
		               PD.CCP_DETAILS_SID
		        FROM   ST_NM_SALES_PROJECTION_MASTER STNMSPM
		               JOIN PROJECTION_DETAILS PD
		                 ON PD.PROJECTION_DETAILS_SID = STNMSPM.PROJECTION_DETAILS_SID
		        WHERE  STNMSPM.USER_ID = ?
		               AND STNMSPM.SESSION_ID = ?
		               AND PD.PROJECTION_MASTER_SID = ?) GROSS_PROJECTED
		       OUTER apply (SELECT TOP 1 PD.PROJECTION_MASTER_SID,
		                                 NMSPM.PROJECTION_DETAILS_SID,
		                                 PD.CCP_DETAILS_SID
		                    FROM   NM_SALES_PROJECTION_MASTER NMSPM
		                           JOIN PROJECTION_DETAILS PD
		                             ON PD.PROJECTION_DETAILS_SID = NMSPM.PROJECTION_DETAILS_SID
		                           JOIN WORKFLOW_MASTER WM
		                             ON WM.PROJECTION_MASTER_SID = PD.PROJECTION_MASTER_SID
		                           JOIN HELPER_TABLE HT
		                             ON HT.HELPER_TABLE_SID = WM.WORKFLOW_STATUS_ID
		                    WHERE  
		                            (PD.PROJECTION_MASTER_SID < GROSS_PROJECTED.PROJECTION_MASTER_SID
		                           OR PD.PROJECTION_MASTER_SID > GROSS_PROJECTED.PROJECTION_MASTER_SID)
		                           AND PD.CCP_DETAILS_SID = GROSS_PROJECTED.CCP_DETAILS_SID
		                           AND HT.DESCRIPTION = 'Approved'
		                           AND HT.LIST_NAME = 'WorkFlowStatus' 
		                    ORDER  BY PD.PROJECTION_MASTER_SID DESC) LATEST_CCP_SALES
		       LEFT JOIN ST_NM_DISCOUNT_PROJECTION NMDP
		              ON NMDP.PROJECTION_DETAILS_SID = GROSS_PROJECTED.PROJECTION_DETAILS_SID
		                 AND NMDP.SESSION_ID=GROSS_PROJECTED.SESSION_ID
		                 JOIN PERIOD P
		         ON P.PERIOD_SID = NMDP.PERIOD_SID
		         AND P.PERIOD_DATE  BETWEEN '?' AND '?'				   
		       LEFT JOIN NM_DISCOUNT_PROJECTION NMD
		              ON NMD.PROJECTION_DETAILS_SID = LATEST_CCP_SALES.PROJECTION_DETAILS_SID
		                 AND NMDP.PERIOD_SID = NMD.PERIOD_SID
		GROUP  BY GROSS_PROJECTED.PROJECTION_DETAILS_SID,
		          P.YEAR) AS SOURCE
		ON ( TARGET.PROJECTION_DETAILS_SID = SOURCE.PROJECTION_DETAILS_SID
		     AND TARGET.PROJECTION_PERIOD = SOURCE.YEAR 
		     AND TARGET.USER_ID=SOURCE.USER_ID 
		     AND TARGET.SESSION_ID= SOURCE.SESSION_ID
		     AND TARGET.PARENT=1)
		WHEN MATCHED THEN
		  UPDATE SET TARGET.TOTAL_DISCOUNT_PERCENT_PRIOR = SOURCE.TOTAL_DISCOUNT_PRIOR,
		             TARGET.TOTAL_DISCOUNT_PERCENT_PROJECTED = SOURCE.TOTAL_DISCOUNT_PROJECTED,
		             TARGET.TOTAL_DISCOUNT_PERCENT_CHANGE = SOURCE.TOTAL_DISCOUNT_CHANGE; 
		
		MERGE ST_NM_ASSUMPTIONS AS TARGET
		USING (
		SELECT distinct PD.PROJECTION_DETAILS_SID, HLV.LEVEL_VALUES AS RELATIONSHIP_LEVEL_VALUES 
			FROM PROJECTION_DETAILS PD,
                HIERARCHY_LEVEL_VALUES HLV,
				(SELECT RLD1.RELATIONSHIP_LEVEL_VALUES, RLD1.RELATIONSHIP_LEVEL_SID, CCPMAP.CCP_DETAILS_SID, RLD1.HIERARCHY_NO
                FROM   RELATIONSHIP_LEVEL_DEFINITION RLD
                       JOIN PROJECTION_CUST_HIERARCHY PCH
                         ON PCH.PROJECTION_MASTER_SID = ?
                            AND RLD.RELATIONSHIP_LEVEL_SID = PCH.RELATIONSHIP_LEVEL_SID
                            AND RLD.RELATIONSHIP_BUILDER_SID = ? 
                       JOIN RELATIONSHIP_LEVEL_DEFINITION RLD1
                         ON RLD.RELATIONSHIP_BUILDER_SID = RLD1.RELATIONSHIP_BUILDER_SID
                            AND RLD.HIERARCHY_NO LIKE RLD1.HIERARCHY_NO + '%' 
                       JOIN CCP_MAP CCPMAP
                         ON CCPMAP.RELATIONSHIP_LEVEL_SID = RLD.RELATIONSHIP_LEVEL_SID
                       JOIN PROJECTION_DETAILS PD 
                         ON PD.CCP_DETAILS_SID=CCPMAP.CCP_DETAILS_SID 
                            AND PD.PROJECTION_MASTER_SID=?
                WHERE RLD1.LEVEL_NAME='Segment') CCP1
		WHERE PD.PROJECTION_MASTER_SID=?
		AND CCP1.CCP_DETAILS_SID=PD.CCP_DETAILS_SID
		AND HLV.HIERARCHY_LEVEL_VALUES_SID=CCP1.RELATIONSHIP_LEVEL_VALUES
		) AS SOURCE 
		ON (TARGET.PROJECTION_DETAILS_SID=SOURCE.PROJECTION_DETAILS_SID 
		AND  TARGET.USER_ID=? AND TARGET.SESSION_ID=? AND TARGET.PARENT=1)
		WHEN MATCHED 
		THEN 
		UPDATE SET
		TARGET.SEGMENT=SOURCE.RELATIONSHIP_LEVEL_VALUES;
		
    ]]> </query>
</entity>
<entity id="assumption.pvsTempFetch">
<query> <![CDATA[
		
	    SELECT  min(CASE(NMA.IS_CHECKED) WHEN 1 THEN 1 ELSE 0  END), 
                        NMA.PROJECTION_PERIOD, NMA.PARENT, 
			CTCM.COMPANY_NAME, 
			CM.COMPANY_ID, NMA.SEGMENT, 
			HT.DESCRIPTION, 
			BM.BRAND_NAME, 
			SUM(NMA.GROSS_SALES_PRIOR) GROSS_SALES_PRIOR, 
                        SUM(NMA.GROSS_SALES_PROJECTED) GROSS_SALES_PROJECTED, 
			SUM(NMA.GROSS_SALES_PERCENT_CHANGE) GROSS_SALES_PERCENT_CHANGE, 
                        SUM(NMA.TOTAL_DISCOUNT_PERCENT_PRIOR) TOTAL_DISCOUNT_PERCENT_PRIOR, 
                        SUM(NMA.TOTAL_DISCOUNT_PERCENT_PROJECTED) TOTAL_DISCOUNT_PERCENT_PROJECTED,  
			SUM(NMA.TOTAL_DISCOUNT_PERCENT_CHANGE) TOTAL_DISCOUNT_PERCENT_CHANGE, 
                        SUM(NMA.NET_SALES_PRIOR) NET_SALES_PRIOR, 
                        SUM(NMA.NET_SALES_PROJECTED) NET_SALES_PROJECTED, 
                        SUM(NMA.NET_SALES_PERCENT_CHANGE) NET_SALES_PERCENT_CHANGE, 
			NMA.CAM_ID, NMA.COMMENTARY, NMA.USER_ID, NMA.SESSION_ID, NMA.REASON_CODES, 
                        CTM.CONT_HOLD_COMPANY_MASTER_SID, CM.COMPANY_MASTER_SID, CTM.CONTRACT_TYPE, IM.BRAND_MASTER_SID
		FROM ST_NM_ASSUMPTIONS NMA 
			JOIN PROJECTION_DETAILS PD ON NMA.PROJECTION_DETAILS_SID=PD.PROJECTION_DETAILS_SID 
                            AND PD.PROJECTION_MASTER_SID=? 
                            AND NMA.USER_ID='?' 
                            AND NMA.SESSION_ID='?' 
                            AND ( NMA.SEGMENT<>'DeleteFromMain' 
                            OR NMA.SEGMENT IS NULL)
                            AND NMA.PROJECTION_PERIOD>=?
                            AND NMA.PROJECTION_PERIOD<=?
			JOIN CCP_DETAILS CCP ON PD.CCP_DETAILS_SID=CCP.CCP_DETAILS_SID 
			JOIN ITEM_MASTER IM ON IM.ITEM_MASTER_SID=CCP.ITEM_MASTER_SID 
			JOIN BRAND_MASTER BM ON BM.BRAND_MASTER_SID=IM.BRAND_MASTER_SID 
			JOIN COMPANY_MASTER CM ON CM.COMPANY_MASTER_SID=CCP.COMPANY_MASTER_SID 
			JOIN CONTRACT_MASTER CTM ON CTM.CONTRACT_MASTER_SID=CCP.CONTRACT_MASTER_SID 
			JOIN HELPER_TABLE HT ON HT.HELPER_TABLE_SID=CTM.CONTRACT_TYPE  
			LEFT JOIN COMPANY_MASTER CTCM ON CTCM.COMPANY_MASTER_SID=CTM.CONT_HOLD_COMPANY_MASTER_SID 
                GROUP BY NMA.PROJECTION_PERIOD, NMA.PARENT, 
			CTCM.COMPANY_NAME, 
			CM.COMPANY_ID, NMA.SEGMENT, 
			HT.DESCRIPTION, 
			BM.BRAND_NAME, 
                        NMA.CAM_ID, NMA.COMMENTARY, NMA.USER_ID, NMA.SESSION_ID, NMA.REASON_CODES, 
                        CTM.CONT_HOLD_COMPANY_MASTER_SID, CM.COMPANY_MASTER_SID, CTM.CONTRACT_TYPE, IM.BRAND_MASTER_SID
		ORDER BY 
			NMA.PROJECTION_PERIOD, 
			CTCM.COMPANY_NAME, 
			CM.COMPANY_ID, 
			NMA.SEGMENT, 
			HT.DESCRIPTION, 
			BM.BRAND_NAME,
                        NMA.PARENT DESC
		OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
		
    ]]> </query>
</entity>
<entity id="assumption.checkAll">
<query> <![CDATA[
		
	    UPDATE ST_NM_ASSUMPTIONS SET IS_CHECKED=? WHERE USER_ID=? AND SESSION_ID=?; 
		
    ]]> </query>
</entity>
<entity id="assumption.populateCommentry">
<query> <![CDATA[
		
	    UPDATE ST_NM_ASSUMPTIONS SET COMMENTARY='?' WHERE USER_ID=? AND SESSION_ID=? AND IS_CHECKED=1;
		
    ]]> </query>
</entity>
<entity id="assumption.populateReasonCode">
<query> <![CDATA[
		
	    UPDATE ST_NM_ASSUMPTIONS SET REASON_CODES='?' WHERE USER_ID=? AND SESSION_ID=? AND IS_CHECKED=1;
		
    ]]> </query>
</entity>
<entity id="assumption.addLine">
<query> <![CDATA[
		
		INSERT INTO ST_NM_ASSUMPTIONS (IS_CHECKED, PROJECTION_PERIOD, PROJECTION_DETAILS_SID, 
		NM_ASSUMPTIONS_SID, USER_ID, SESSION_ID, PARENT,LAST_MODIFIED_DATE, COMMENTARY, REASON_CODES,SEGMENT,CAM_ID)
		SELECT ? IS_CHECKED, PROJECTION_PERIOD, PROJECTION_DETAILS_SID, 0 NM_ASSUMPTIONS_SID, 
		USER_ID, SESSION_ID, 0 PARENT, LAST_MODIFIED_DATE, '' COMMENTARY, '' REASON_CODES, SEGMENT, CAM_ID
		FROM dbo.ST_NM_ASSUMPTIONS WHERE USER_ID=? AND SESSION_ID=? AND IS_CHECKED=1 AND PARENT=1;
		
    ]]> </query>
</entity>
<entity id="assumption.childCheckForAddLine">
<query> <![CDATA[
		
	    SELECT count(ST_NM_ASSUMPTIONS_SID) ST_NM_ASSUMPTIONS_SID FROM ST_NM_ASSUMPTIONS WHERE USER_ID=? AND SESSION_ID=? AND IS_CHECKED=1 AND PARENT=0;
		
    ]]> </query>
</entity>
<entity id="assumption.checkedCount">
<query> <![CDATA[
		
	    SELECT count(ST_NM_ASSUMPTIONS_SID) ST_NM_ASSUMPTIONS_SID FROM ST_NM_ASSUMPTIONS WHERE USER_ID=? AND SESSION_ID=? AND IS_CHECKED=1; 
		
    ]]> </query>
</entity>
<entity id="assumption.totalCount">
<query> <![CDATA[
		
            SELECT count(*) FROM
            (SELECT  min(CASE(NMA.IS_CHECKED) WHEN 1 THEN 1 ELSE 0  END) CNT, 
                                    NMA.PROJECTION_PERIOD, NMA.PARENT, 
                                    NMA.CAM_ID, NMA.COMMENTARY, NMA.REASON_CODES, 
                                    CTM.CONT_HOLD_COMPANY_MASTER_SID, CM.COMPANY_MASTER_SID, CTM.CONTRACT_TYPE, IM.BRAND_MASTER_SID
                            FROM ST_NM_ASSUMPTIONS NMA 
                                    JOIN PROJECTION_DETAILS PD ON NMA.PROJECTION_DETAILS_SID=PD.PROJECTION_DETAILS_SID 
                                        AND PD.PROJECTION_MASTER_SID=? 
                                        AND NMA.USER_ID='?' 
                                        AND NMA.SESSION_ID='?' 
                                        AND ( NMA.SEGMENT<>'DeleteFromMain' 
                                        OR NMA.SEGMENT IS NULL)
                                    JOIN CCP_DETAILS CCP ON PD.CCP_DETAILS_SID=CCP.CCP_DETAILS_SID 
                                    JOIN ITEM_MASTER IM ON IM.ITEM_MASTER_SID=CCP.ITEM_MASTER_SID 
                                    JOIN COMPANY_MASTER CM ON CM.COMPANY_MASTER_SID=CCP.COMPANY_MASTER_SID 
                                    JOIN CONTRACT_MASTER CTM ON CTM.CONTRACT_MASTER_SID=CCP.CONTRACT_MASTER_SID 
                            GROUP BY NMA.PROJECTION_PERIOD, NMA.PARENT, 
                                    NMA.CAM_ID, NMA.COMMENTARY, NMA.REASON_CODES, 
                                    CTM.CONT_HOLD_COMPANY_MASTER_SID, CM.COMPANY_MASTER_SID, CTM.CONTRACT_TYPE, IM.BRAND_MASTER_SID) RSLT;
		
    ]]> </query>
</entity>
<entity id="assumption.childDelete">
<query> <![CDATA[
		
	    DELETE FROM dbo.NM_ASSUMPTIONS  WHERE 
		NM_ASSUMPTIONS_SID in(SELECT NM_ASSUMPTIONS_SID FROM ST_NM_ASSUMPTIONS WHERE 
		USER_ID=? AND SESSION_ID=? AND PARENT=0 
		AND SEGMENT='DeleteFromMain'); 
		
    ]]> </query>
</entity>
<entity id="assumption.updateRecord">
<query> <![CDATA[
		
                    UPDATE NMA SET NMA.IS_CHECKED=?, NMA.REASON_CODES='?', NMA.COMMENTARY='?', NMA.SEGMENT = '?'  
                    FROM ST_NM_ASSUMPTIONS NMA 
                    JOIN PROJECTION_DETAILS PD ON NMA.PROJECTION_DETAILS_SID=PD.PROJECTION_DETAILS_SID 
                        AND NMA.PROJECTION_PERIOD=?
                        AND NMA.PARENT =?
                        AND PD.PROJECTION_MASTER_SID=? 
                        AND NMA.USER_ID='?' 
                        AND NMA.SESSION_ID='?' 
                        AND NMA.CAM_ID=?
                        AND NMA.SEGMENT = '?'
                        ? 
                        ?
                    JOIN CCP_DETAILS CCP ON PD.CCP_DETAILS_SID=CCP.CCP_DETAILS_SID 
                    JOIN ITEM_MASTER IM ON IM.ITEM_MASTER_SID=CCP.ITEM_MASTER_SID 
                        AND IM.BRAND_MASTER_SID =? 
                    JOIN COMPANY_MASTER CM ON CM.COMPANY_MASTER_SID=CCP.COMPANY_MASTER_SID 
                        AND CM.COMPANY_MASTER_SID =?
                    JOIN CONTRACT_MASTER CTM ON CTM.CONTRACT_MASTER_SID=CCP.CONTRACT_MASTER_SID 
                        AND CTM.CONTRACT_TYPE =? ?;
		
    ]]> </query>
</entity>
<entity id="assumption.deleteRecord">
<query> <![CDATA[
		
                DELETE NMA  
                    FROM ST_NM_ASSUMPTIONS NMA 
                    JOIN PROJECTION_DETAILS PD ON NMA.PROJECTION_DETAILS_SID=PD.PROJECTION_DETAILS_SID 
                        AND NMA.PROJECTION_PERIOD=?
                        AND NMA.PARENT =0
                        AND PD.PROJECTION_MASTER_SID=? 
                        AND NMA.USER_ID='?' 
                        AND NMA.SESSION_ID='?' 
                        AND NMA.CAM_ID=?
                        AND NMA.SEGMENT = '?'
                        ? 
                        ?
                        AND NMA.NM_ASSUMPTIONS_SID=0 
                    JOIN CCP_DETAILS CCP ON PD.CCP_DETAILS_SID=CCP.CCP_DETAILS_SID 
                    JOIN ITEM_MASTER IM ON IM.ITEM_MASTER_SID=CCP.ITEM_MASTER_SID 
                        AND IM.BRAND_MASTER_SID =? 
                    JOIN COMPANY_MASTER CM ON CM.COMPANY_MASTER_SID=CCP.COMPANY_MASTER_SID 
                        AND CM.COMPANY_MASTER_SID =?
                    JOIN CONTRACT_MASTER CTM ON CTM.CONTRACT_MASTER_SID=CCP.CONTRACT_MASTER_SID 
                        AND CTM.CONTRACT_TYPE =? ?;
                
                UPDATE NMA SET NMA.SEGMENT = 'DeleteFromMain'  
                    FROM ST_NM_ASSUMPTIONS NMA 
                    JOIN PROJECTION_DETAILS PD ON NMA.PROJECTION_DETAILS_SID=PD.PROJECTION_DETAILS_SID 
                        AND NMA.PROJECTION_PERIOD=?
                        AND NMA.PARENT =0
                        AND PD.PROJECTION_MASTER_SID=? 
                        AND NMA.USER_ID='?' 
                        AND NMA.SESSION_ID='?' 
                        AND NMA.CAM_ID=?
                        AND NMA.SEGMENT = '?'
                        ? 
                        ?
                    JOIN CCP_DETAILS CCP ON PD.CCP_DETAILS_SID=CCP.CCP_DETAILS_SID 
                    JOIN ITEM_MASTER IM ON IM.ITEM_MASTER_SID=CCP.ITEM_MASTER_SID 
                        AND IM.BRAND_MASTER_SID =? 
                    JOIN COMPANY_MASTER CM ON CM.COMPANY_MASTER_SID=CCP.COMPANY_MASTER_SID 
                        AND CM.COMPANY_MASTER_SID =?
                    JOIN CONTRACT_MASTER CTM ON CTM.CONTRACT_MASTER_SID=CCP.CONTRACT_MASTER_SID 
                        AND CTM.CONTRACT_TYPE =? ?;
		
    ]]> </query>
</entity>
<entity id="assumption.totalCount.ForMandated">
<query> <![CDATA[
		
	    SELECT count(ST_M_ASSUMPTIONS_SID) ST_M_ASSUMPTIONS_SID FROM ST_M_ASSUMPTIONS WHERE USER_ID=? AND SESSION_ID=? AND CAM_ID<>1; 
		
    ]]> </query>
</entity>
</sql>
