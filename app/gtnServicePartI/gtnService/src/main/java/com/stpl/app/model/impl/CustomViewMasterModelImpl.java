/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.CustomViewMaster;
import com.stpl.app.model.CustomViewMasterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CustomViewMaster service. Represents a row in the &quot;CUSTOM_VIEW_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CustomViewMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomViewMasterImpl}.
 * </p>
 *
 * @author
 * @see CustomViewMasterImpl
 * @see CustomViewMaster
 * @see CustomViewMasterModel
 * @generated
 */
@ProviderType
public class CustomViewMasterModelImpl extends BaseModelImpl<CustomViewMaster>
	implements CustomViewMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a custom view master model instance should use the {@link CustomViewMaster} interface instead.
	 */
	public static final String TABLE_NAME = "CUSTOM_VIEW_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CUSTOM_VIEW_MASTER_SID", Types.INTEGER },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.INTEGER },
			{ "PROJECTION_MASTER_SID", Types.INTEGER },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "VIEW_NAME", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CUSTOM_VIEW_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PROJECTION_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("VIEW_NAME", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table CUSTOM_VIEW_MASTER (CUSTOM_VIEW_MASTER_SID INTEGER not null primary key IDENTITY,CREATED_DATE DATE null,CREATED_BY INTEGER,PROJECTION_MASTER_SID INTEGER,MODIFIED_BY INTEGER,MODIFIED_DATE DATE null,VIEW_NAME VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CUSTOM_VIEW_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY customViewMaster.customViewMasterSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CUSTOM_VIEW_MASTER.CUSTOM_VIEW_MASTER_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.CustomViewMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.CustomViewMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.CustomViewMaster"));

	public CustomViewMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _customViewMasterSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setCustomViewMasterSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _customViewMasterSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CustomViewMaster.class;
	}

	@Override
	public String getModelClassName() {
		return CustomViewMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("customViewMasterSid", getCustomViewMasterSid());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("projectionMasterSid", getProjectionMasterSid());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("viewName", getViewName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer customViewMasterSid = (Integer)attributes.get(
				"customViewMasterSid");

		if (customViewMasterSid != null) {
			setCustomViewMasterSid(customViewMasterSid);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Integer projectionMasterSid = (Integer)attributes.get(
				"projectionMasterSid");

		if (projectionMasterSid != null) {
			setProjectionMasterSid(projectionMasterSid);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String viewName = (String)attributes.get("viewName");

		if (viewName != null) {
			setViewName(viewName);
		}
	}

	@Override
	public int getCustomViewMasterSid() {
		return _customViewMasterSid;
	}

	@Override
	public void setCustomViewMasterSid(int customViewMasterSid) {
		_customViewMasterSid = customViewMasterSid;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public int getProjectionMasterSid() {
		return _projectionMasterSid;
	}

	@Override
	public void setProjectionMasterSid(int projectionMasterSid) {
		_projectionMasterSid = projectionMasterSid;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getViewName() {
		if (_viewName == null) {
			return StringPool.BLANK;
		}
		else {
			return _viewName;
		}
	}

	@Override
	public void setViewName(String viewName) {
		_viewName = viewName;
	}

	@Override
	public CustomViewMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CustomViewMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustomViewMasterImpl customViewMasterImpl = new CustomViewMasterImpl();

		customViewMasterImpl.setCustomViewMasterSid(getCustomViewMasterSid());
		customViewMasterImpl.setCreatedDate(getCreatedDate());
		customViewMasterImpl.setCreatedBy(getCreatedBy());
		customViewMasterImpl.setProjectionMasterSid(getProjectionMasterSid());
		customViewMasterImpl.setModifiedBy(getModifiedBy());
		customViewMasterImpl.setModifiedDate(getModifiedDate());
		customViewMasterImpl.setViewName(getViewName());

		customViewMasterImpl.resetOriginalValues();

		return customViewMasterImpl;
	}

	@Override
	public int compareTo(CustomViewMaster customViewMaster) {
		int primaryKey = customViewMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CustomViewMaster)) {
			return false;
		}

		CustomViewMaster customViewMaster = (CustomViewMaster)obj;

		int primaryKey = customViewMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<CustomViewMaster> toCacheModel() {
		CustomViewMasterCacheModel customViewMasterCacheModel = new CustomViewMasterCacheModel();

		customViewMasterCacheModel.customViewMasterSid = getCustomViewMasterSid();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			customViewMasterCacheModel.createdDate = createdDate.getTime();
		}
		else {
			customViewMasterCacheModel.createdDate = Long.MIN_VALUE;
		}

		customViewMasterCacheModel.createdBy = getCreatedBy();

		customViewMasterCacheModel.projectionMasterSid = getProjectionMasterSid();

		customViewMasterCacheModel.modifiedBy = getModifiedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			customViewMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			customViewMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		customViewMasterCacheModel.viewName = getViewName();

		String viewName = customViewMasterCacheModel.viewName;

		if ((viewName != null) && (viewName.length() == 0)) {
			customViewMasterCacheModel.viewName = null;
		}

		return customViewMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{customViewMasterSid=");
		sb.append(getCustomViewMasterSid());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", projectionMasterSid=");
		sb.append(getProjectionMasterSid());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", viewName=");
		sb.append(getViewName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.CustomViewMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>customViewMasterSid</column-name><column-value><![CDATA[");
		sb.append(getCustomViewMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionMasterSid</column-name><column-value><![CDATA[");
		sb.append(getProjectionMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewName</column-name><column-value><![CDATA[");
		sb.append(getViewName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CustomViewMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CustomViewMaster.class
		};
	private int _customViewMasterSid;
	private Date _createdDate;
	private int _createdBy;
	private int _projectionMasterSid;
	private int _modifiedBy;
	private Date _modifiedDate;
	private String _viewName;
	private CustomViewMaster _escapedModel;
}