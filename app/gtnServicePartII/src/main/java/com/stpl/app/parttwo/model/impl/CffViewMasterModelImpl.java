package com.stpl.app.parttwo.model.impl;

import com.stpl.app.parttwo.model.CffViewMaster;
import com.stpl.app.parttwo.model.CffViewMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CffViewMaster service. Represents a row in the &quot;CFF_VIEW_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.parttwo.model.CffViewMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CffViewMasterImpl}.
 * </p>
 *
 * @author
 * @see CffViewMasterImpl
 * @see com.stpl.app.parttwo.model.CffViewMaster
 * @see com.stpl.app.parttwo.model.CffViewMasterModel
 * @generated
 */
public class CffViewMasterModelImpl extends BaseModelImpl<CffViewMaster>
    implements CffViewMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a cff view master model instance should use the {@link com.stpl.app.parttwo.model.CffViewMaster} interface instead.
     */
    public static final String TABLE_NAME = "CFF_VIEW_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "CREATED_DATE", Types.TIMESTAMP },
            { "CREATED_BY", Types.VARCHAR },
            { "VIEW_TYPE", Types.VARCHAR },
            { "CFF_VIEW_MASTER_SID", Types.INTEGER },
            { "CFF_MASTER_SID", Types.INTEGER },
            { "MODIFIED_BY", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "VIEW_NAME", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table CFF_VIEW_MASTER (CREATED_DATE DATE null,CREATED_BY VARCHAR(75) null,VIEW_TYPE VARCHAR(75) null,CFF_VIEW_MASTER_SID INTEGER not null primary key IDENTITY,CFF_MASTER_SID INTEGER,MODIFIED_BY VARCHAR(75) null,MODIFIED_DATE DATE null,VIEW_NAME VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table CFF_VIEW_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY cffViewMaster.cffViewMasterSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY CFF_VIEW_MASTER.CFF_VIEW_MASTER_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.parttwo.model.CffViewMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.parttwo.model.CffViewMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.parttwo.model.CffViewMaster"));
    private static ClassLoader _classLoader = CffViewMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            CffViewMaster.class
        };
    private Date _createdDate;
    private String _createdBy;
    private String _viewType;
    private int _cffViewMasterSid;
    private int _cffMasterSid;
    private String _modifiedBy;
    private Date _modifiedDate;
    private String _viewName;
    private CffViewMaster _escapedModel;

    public CffViewMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _cffViewMasterSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setCffViewMasterSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _cffViewMasterSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return CffViewMaster.class;
    }

    @Override
    public String getModelClassName() {
        return CffViewMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("createdDate", getCreatedDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("viewType", getViewType());
        attributes.put("cffViewMasterSid", getCffViewMasterSid());
        attributes.put("cffMasterSid", getCffMasterSid());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("viewName", getViewName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String createdBy = (String) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        String viewType = (String) attributes.get("viewType");

        if (viewType != null) {
            setViewType(viewType);
        }

        Integer cffViewMasterSid = (Integer) attributes.get("cffViewMasterSid");

        if (cffViewMasterSid != null) {
            setCffViewMasterSid(cffViewMasterSid);
        }

        Integer cffMasterSid = (Integer) attributes.get("cffMasterSid");

        if (cffMasterSid != null) {
            setCffMasterSid(cffMasterSid);
        }

        String modifiedBy = (String) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String viewName = (String) attributes.get("viewName");

        if (viewName != null) {
            setViewName(viewName);
        }
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getCreatedBy() {
        if (_createdBy == null) {
            return StringPool.BLANK;
        } else {
            return _createdBy;
        }
    }

    @Override
    public void setCreatedBy(String createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public String getViewType() {
        if (_viewType == null) {
            return StringPool.BLANK;
        } else {
            return _viewType;
        }
    }

    @Override
    public void setViewType(String viewType) {
        _viewType = viewType;
    }

    @Override
    public int getCffViewMasterSid() {
        return _cffViewMasterSid;
    }

    @Override
    public void setCffViewMasterSid(int cffViewMasterSid) {
        _cffViewMasterSid = cffViewMasterSid;
    }

    @Override
    public int getCffMasterSid() {
        return _cffMasterSid;
    }

    @Override
    public void setCffMasterSid(int cffMasterSid) {
        _cffMasterSid = cffMasterSid;
    }

    @Override
    public String getModifiedBy() {
        if (_modifiedBy == null) {
            return StringPool.BLANK;
        } else {
            return _modifiedBy;
        }
    }

    @Override
    public void setModifiedBy(String modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getViewName() {
        if (_viewName == null) {
            return StringPool.BLANK;
        } else {
            return _viewName;
        }
    }

    @Override
    public void setViewName(String viewName) {
        _viewName = viewName;
    }

    @Override
    public CffViewMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (CffViewMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CffViewMasterImpl cffViewMasterImpl = new CffViewMasterImpl();

        cffViewMasterImpl.setCreatedDate(getCreatedDate());
        cffViewMasterImpl.setCreatedBy(getCreatedBy());
        cffViewMasterImpl.setViewType(getViewType());
        cffViewMasterImpl.setCffViewMasterSid(getCffViewMasterSid());
        cffViewMasterImpl.setCffMasterSid(getCffMasterSid());
        cffViewMasterImpl.setModifiedBy(getModifiedBy());
        cffViewMasterImpl.setModifiedDate(getModifiedDate());
        cffViewMasterImpl.setViewName(getViewName());

        cffViewMasterImpl.resetOriginalValues();

        return cffViewMasterImpl;
    }

    @Override
    public int compareTo(CffViewMaster cffViewMaster) {
        int primaryKey = cffViewMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof CffViewMaster)) {
            return false;
        }

        CffViewMaster cffViewMaster = (CffViewMaster) obj;

        int primaryKey = cffViewMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<CffViewMaster> toCacheModel() {
        CffViewMasterCacheModel cffViewMasterCacheModel = new CffViewMasterCacheModel();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            cffViewMasterCacheModel.createdDate = createdDate.getTime();
        } else {
            cffViewMasterCacheModel.createdDate = Long.MIN_VALUE;
        }

        cffViewMasterCacheModel.createdBy = getCreatedBy();

        String createdBy = cffViewMasterCacheModel.createdBy;

        if ((createdBy != null) && (createdBy.length() == 0)) {
            cffViewMasterCacheModel.createdBy = null;
        }

        cffViewMasterCacheModel.viewType = getViewType();

        String viewType = cffViewMasterCacheModel.viewType;

        if ((viewType != null) && (viewType.length() == 0)) {
            cffViewMasterCacheModel.viewType = null;
        }

        cffViewMasterCacheModel.cffViewMasterSid = getCffViewMasterSid();

        cffViewMasterCacheModel.cffMasterSid = getCffMasterSid();

        cffViewMasterCacheModel.modifiedBy = getModifiedBy();

        String modifiedBy = cffViewMasterCacheModel.modifiedBy;

        if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
            cffViewMasterCacheModel.modifiedBy = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            cffViewMasterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            cffViewMasterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        cffViewMasterCacheModel.viewName = getViewName();

        String viewName = cffViewMasterCacheModel.viewName;

        if ((viewName != null) && (viewName.length() == 0)) {
            cffViewMasterCacheModel.viewName = null;
        }

        return cffViewMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{createdDate=");
        sb.append(getCreatedDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", viewType=");
        sb.append(getViewType());
        sb.append(", cffViewMasterSid=");
        sb.append(getCffViewMasterSid());
        sb.append(", cffMasterSid=");
        sb.append(getCffMasterSid());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", viewName=");
        sb.append(getViewName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.parttwo.model.CffViewMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>viewType</column-name><column-value><![CDATA[");
        sb.append(getViewType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cffViewMasterSid</column-name><column-value><![CDATA[");
        sb.append(getCffViewMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cffMasterSid</column-name><column-value><![CDATA[");
        sb.append(getCffMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>viewName</column-name><column-value><![CDATA[");
        sb.append(getViewName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
