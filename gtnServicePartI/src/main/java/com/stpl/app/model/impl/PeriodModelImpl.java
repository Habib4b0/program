package com.stpl.app.model.impl;

import com.stpl.app.model.Period;
import com.stpl.app.model.PeriodModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Period service. Represents a row in the &quot;PERIOD&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.PeriodModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PeriodImpl}.
 * </p>
 *
 * @author
 * @see PeriodImpl
 * @see com.stpl.app.model.Period
 * @see com.stpl.app.model.PeriodModel
 * @generated
 */
public class PeriodModelImpl extends BaseModelImpl<Period>
    implements PeriodModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a period model instance should use the {@link com.stpl.app.model.Period} interface instead.
     */
    public static final String TABLE_NAME = "PERIOD";
    public static final Object[][] TABLE_COLUMNS = {
            { "PERIOD_SID", Types.INTEGER },
            { "PERIOD_DATE", Types.TIMESTAMP },
            { "QUARTER", Types.INTEGER },
            { "YEAR", Types.INTEGER },
            { "SEMI_ANNUAL", Types.INTEGER },
            { "MONTH", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table PERIOD (PERIOD_SID INTEGER not null primary key IDENTITY,PERIOD_DATE DATE null,QUARTER INTEGER,YEAR INTEGER,SEMI_ANNUAL INTEGER,MONTH INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table PERIOD";
    public static final String ORDER_BY_JPQL = " ORDER BY period.periodSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY PERIOD.PERIOD_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.Period"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.Period"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.Period"));
    private static ClassLoader _classLoader = Period.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Period.class };
    private int _periodSid;
    private Date _periodDate;
    private int _quarter;
    private int _year;
    private int _semiAnnual;
    private int _month;
    private Period _escapedModel;

    public PeriodModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _periodSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setPeriodSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _periodSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Period.class;
    }

    @Override
    public String getModelClassName() {
        return Period.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("periodSid", getPeriodSid());
        attributes.put("periodDate", getPeriodDate());
        attributes.put("quarter", getQuarter());
        attributes.put("year", getYear());
        attributes.put("semiAnnual", getSemiAnnual());
        attributes.put("month", getMonth());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer periodSid = (Integer) attributes.get("periodSid");

        if (periodSid != null) {
            setPeriodSid(periodSid);
        }

        Date periodDate = (Date) attributes.get("periodDate");

        if (periodDate != null) {
            setPeriodDate(periodDate);
        }

        Integer quarter = (Integer) attributes.get("quarter");

        if (quarter != null) {
            setQuarter(quarter);
        }

        Integer year = (Integer) attributes.get("year");

        if (year != null) {
            setYear(year);
        }

        Integer semiAnnual = (Integer) attributes.get("semiAnnual");

        if (semiAnnual != null) {
            setSemiAnnual(semiAnnual);
        }

        Integer month = (Integer) attributes.get("month");

        if (month != null) {
            setMonth(month);
        }
    }

    @Override
    public int getPeriodSid() {
        return _periodSid;
    }

    @Override
    public void setPeriodSid(int periodSid) {
        _periodSid = periodSid;
    }

    @Override
    public Date getPeriodDate() {
        return _periodDate;
    }

    @Override
    public void setPeriodDate(Date periodDate) {
        _periodDate = periodDate;
    }

    @Override
    public int getQuarter() {
        return _quarter;
    }

    @Override
    public void setQuarter(int quarter) {
        _quarter = quarter;
    }

    @Override
    public int getYear() {
        return _year;
    }

    @Override
    public void setYear(int year) {
        _year = year;
    }

    @Override
    public int getSemiAnnual() {
        return _semiAnnual;
    }

    @Override
    public void setSemiAnnual(int semiAnnual) {
        _semiAnnual = semiAnnual;
    }

    @Override
    public int getMonth() {
        return _month;
    }

    @Override
    public void setMonth(int month) {
        _month = month;
    }

    @Override
    public Period toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Period) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PeriodImpl periodImpl = new PeriodImpl();

        periodImpl.setPeriodSid(getPeriodSid());
        periodImpl.setPeriodDate(getPeriodDate());
        periodImpl.setQuarter(getQuarter());
        periodImpl.setYear(getYear());
        periodImpl.setSemiAnnual(getSemiAnnual());
        periodImpl.setMonth(getMonth());

        periodImpl.resetOriginalValues();

        return periodImpl;
    }

    @Override
    public int compareTo(Period period) {
        int primaryKey = period.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Period)) {
            return false;
        }

        Period period = (Period) obj;

        int primaryKey = period.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Period> toCacheModel() {
        PeriodCacheModel periodCacheModel = new PeriodCacheModel();

        periodCacheModel.periodSid = getPeriodSid();

        Date periodDate = getPeriodDate();

        if (periodDate != null) {
            periodCacheModel.periodDate = periodDate.getTime();
        } else {
            periodCacheModel.periodDate = Long.MIN_VALUE;
        }

        periodCacheModel.quarter = getQuarter();

        periodCacheModel.year = getYear();

        periodCacheModel.semiAnnual = getSemiAnnual();

        periodCacheModel.month = getMonth();

        return periodCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{periodSid=");
        sb.append(getPeriodSid());
        sb.append(", periodDate=");
        sb.append(getPeriodDate());
        sb.append(", quarter=");
        sb.append(getQuarter());
        sb.append(", year=");
        sb.append(getYear());
        sb.append(", semiAnnual=");
        sb.append(getSemiAnnual());
        sb.append(", month=");
        sb.append(getMonth());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.Period");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>periodSid</column-name><column-value><![CDATA[");
        sb.append(getPeriodSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>periodDate</column-name><column-value><![CDATA[");
        sb.append(getPeriodDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>quarter</column-name><column-value><![CDATA[");
        sb.append(getQuarter());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>year</column-name><column-value><![CDATA[");
        sb.append(getYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>semiAnnual</column-name><column-value><![CDATA[");
        sb.append(getSemiAnnual());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>month</column-name><column-value><![CDATA[");
        sb.append(getMonth());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
