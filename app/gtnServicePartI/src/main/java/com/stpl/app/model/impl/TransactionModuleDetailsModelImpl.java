package com.stpl.app.model.impl;

import com.stpl.app.model.TransactionModuleDetails;
import com.stpl.app.model.TransactionModuleDetailsModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TransactionModuleDetails service. Represents a row in the &quot;TRANSACTION_MODULE_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.TransactionModuleDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TransactionModuleDetailsImpl}.
 * </p>
 *
 * @author
 * @see TransactionModuleDetailsImpl
 * @see com.stpl.app.model.TransactionModuleDetails
 * @see com.stpl.app.model.TransactionModuleDetailsModel
 * @generated
 */
public class TransactionModuleDetailsModelImpl extends BaseModelImpl<TransactionModuleDetails>
    implements TransactionModuleDetailsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a transaction module details model instance should use the {@link com.stpl.app.model.TransactionModuleDetails} interface instead.
     */
    public static final String TABLE_NAME = "TRANSACTION_MODULE_DETAILS";
    public static final Object[][] TABLE_COLUMNS = {
            { "PROPERTY_INDEX", Types.DOUBLE },
            { "DISPLAY_NAME", Types.VARCHAR },
            { "TRANSACTION_MODULE_MASTER_SID", Types.INTEGER },
            { "CATEGORY_NAME", Types.VARCHAR },
            { "VALIDATION", Types.VARCHAR },
            { "PROPERTY_NAME", Types.VARCHAR },
            { "FLAG", Types.VARCHAR },
            { "TRANSACTION_MODULE_DETAILS_SID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table TRANSACTION_MODULE_DETAILS (PROPERTY_INDEX DOUBLE,DISPLAY_NAME VARCHAR(75) null,TRANSACTION_MODULE_MASTER_SID INTEGER,CATEGORY_NAME VARCHAR(75) null,VALIDATION VARCHAR(75) null,PROPERTY_NAME VARCHAR(75) null,FLAG VARCHAR(75) null,TRANSACTION_MODULE_DETAILS_SID INTEGER not null primary key IDENTITY)";
    public static final String TABLE_SQL_DROP = "drop table TRANSACTION_MODULE_DETAILS";
    public static final String ORDER_BY_JPQL = " ORDER BY transactionModuleDetails.transactionModuleDetailsSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY TRANSACTION_MODULE_DETAILS.TRANSACTION_MODULE_DETAILS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.TransactionModuleDetails"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.TransactionModuleDetails"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.TransactionModuleDetails"));
    private static ClassLoader _classLoader = TransactionModuleDetails.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            TransactionModuleDetails.class
        };
    private double _propertyIndex;
    private String _displayName;
    private int _transactionModuleMasterSid;
    private String _categoryName;
    private String _validation;
    private String _propertyName;
    private String _flag;
    private int _transactionModuleDetailsSid;
    private TransactionModuleDetails _escapedModel;

    public TransactionModuleDetailsModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _transactionModuleDetailsSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setTransactionModuleDetailsSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _transactionModuleDetailsSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return TransactionModuleDetails.class;
    }

    @Override
    public String getModelClassName() {
        return TransactionModuleDetails.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("propertyIndex", getPropertyIndex());
        attributes.put("displayName", getDisplayName());
        attributes.put("transactionModuleMasterSid",
            getTransactionModuleMasterSid());
        attributes.put("categoryName", getCategoryName());
        attributes.put("validation", getValidation());
        attributes.put("propertyName", getPropertyName());
        attributes.put("flag", getFlag());
        attributes.put("transactionModuleDetailsSid",
            getTransactionModuleDetailsSid());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Double propertyIndex = (Double) attributes.get("propertyIndex");

        if (propertyIndex != null) {
            setPropertyIndex(propertyIndex);
        }

        String displayName = (String) attributes.get("displayName");

        if (displayName != null) {
            setDisplayName(displayName);
        }

        Integer transactionModuleMasterSid = (Integer) attributes.get(
                "transactionModuleMasterSid");

        if (transactionModuleMasterSid != null) {
            setTransactionModuleMasterSid(transactionModuleMasterSid);
        }

        String categoryName = (String) attributes.get("categoryName");

        if (categoryName != null) {
            setCategoryName(categoryName);
        }

        String validation = (String) attributes.get("validation");

        if (validation != null) {
            setValidation(validation);
        }

        String propertyName = (String) attributes.get("propertyName");

        if (propertyName != null) {
            setPropertyName(propertyName);
        }

        String flag = (String) attributes.get("flag");

        if (flag != null) {
            setFlag(flag);
        }

        Integer transactionModuleDetailsSid = (Integer) attributes.get(
                "transactionModuleDetailsSid");

        if (transactionModuleDetailsSid != null) {
            setTransactionModuleDetailsSid(transactionModuleDetailsSid);
        }
    }

    @Override
    public double getPropertyIndex() {
        return _propertyIndex;
    }

    @Override
    public void setPropertyIndex(double propertyIndex) {
        _propertyIndex = propertyIndex;
    }

    @Override
    public String getDisplayName() {
        if (_displayName == null) {
            return StringPool.BLANK;
        } else {
            return _displayName;
        }
    }

    @Override
    public void setDisplayName(String displayName) {
        _displayName = displayName;
    }

    @Override
    public int getTransactionModuleMasterSid() {
        return _transactionModuleMasterSid;
    }

    @Override
    public void setTransactionModuleMasterSid(int transactionModuleMasterSid) {
        _transactionModuleMasterSid = transactionModuleMasterSid;
    }

    @Override
    public String getCategoryName() {
        if (_categoryName == null) {
            return StringPool.BLANK;
        } else {
            return _categoryName;
        }
    }

    @Override
    public void setCategoryName(String categoryName) {
        _categoryName = categoryName;
    }

    @Override
    public String getValidation() {
        if (_validation == null) {
            return StringPool.BLANK;
        } else {
            return _validation;
        }
    }

    @Override
    public void setValidation(String validation) {
        _validation = validation;
    }

    @Override
    public String getPropertyName() {
        if (_propertyName == null) {
            return StringPool.BLANK;
        } else {
            return _propertyName;
        }
    }

    @Override
    public void setPropertyName(String propertyName) {
        _propertyName = propertyName;
    }

    @Override
    public String getFlag() {
        if (_flag == null) {
            return StringPool.BLANK;
        } else {
            return _flag;
        }
    }

    @Override
    public void setFlag(String flag) {
        _flag = flag;
    }

    @Override
    public int getTransactionModuleDetailsSid() {
        return _transactionModuleDetailsSid;
    }

    @Override
    public void setTransactionModuleDetailsSid(int transactionModuleDetailsSid) {
        _transactionModuleDetailsSid = transactionModuleDetailsSid;
    }

    @Override
    public TransactionModuleDetails toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (TransactionModuleDetails) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        TransactionModuleDetailsImpl transactionModuleDetailsImpl = new TransactionModuleDetailsImpl();

        transactionModuleDetailsImpl.setPropertyIndex(getPropertyIndex());
        transactionModuleDetailsImpl.setDisplayName(getDisplayName());
        transactionModuleDetailsImpl.setTransactionModuleMasterSid(getTransactionModuleMasterSid());
        transactionModuleDetailsImpl.setCategoryName(getCategoryName());
        transactionModuleDetailsImpl.setValidation(getValidation());
        transactionModuleDetailsImpl.setPropertyName(getPropertyName());
        transactionModuleDetailsImpl.setFlag(getFlag());
        transactionModuleDetailsImpl.setTransactionModuleDetailsSid(getTransactionModuleDetailsSid());

        transactionModuleDetailsImpl.resetOriginalValues();

        return transactionModuleDetailsImpl;
    }

    @Override
    public int compareTo(TransactionModuleDetails transactionModuleDetails) {
        int primaryKey = transactionModuleDetails.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof TransactionModuleDetails)) {
            return false;
        }

        TransactionModuleDetails transactionModuleDetails = (TransactionModuleDetails) obj;

        int primaryKey = transactionModuleDetails.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<TransactionModuleDetails> toCacheModel() {
        TransactionModuleDetailsCacheModel transactionModuleDetailsCacheModel = new TransactionModuleDetailsCacheModel();

        transactionModuleDetailsCacheModel.propertyIndex = getPropertyIndex();

        transactionModuleDetailsCacheModel.displayName = getDisplayName();

        String displayName = transactionModuleDetailsCacheModel.displayName;

        if ((displayName != null) && (displayName.length() == 0)) {
            transactionModuleDetailsCacheModel.displayName = null;
        }

        transactionModuleDetailsCacheModel.transactionModuleMasterSid = getTransactionModuleMasterSid();

        transactionModuleDetailsCacheModel.categoryName = getCategoryName();

        String categoryName = transactionModuleDetailsCacheModel.categoryName;

        if ((categoryName != null) && (categoryName.length() == 0)) {
            transactionModuleDetailsCacheModel.categoryName = null;
        }

        transactionModuleDetailsCacheModel.validation = getValidation();

        String validation = transactionModuleDetailsCacheModel.validation;

        if ((validation != null) && (validation.length() == 0)) {
            transactionModuleDetailsCacheModel.validation = null;
        }

        transactionModuleDetailsCacheModel.propertyName = getPropertyName();

        String propertyName = transactionModuleDetailsCacheModel.propertyName;

        if ((propertyName != null) && (propertyName.length() == 0)) {
            transactionModuleDetailsCacheModel.propertyName = null;
        }

        transactionModuleDetailsCacheModel.flag = getFlag();

        String flag = transactionModuleDetailsCacheModel.flag;

        if ((flag != null) && (flag.length() == 0)) {
            transactionModuleDetailsCacheModel.flag = null;
        }

        transactionModuleDetailsCacheModel.transactionModuleDetailsSid = getTransactionModuleDetailsSid();

        return transactionModuleDetailsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{propertyIndex=");
        sb.append(getPropertyIndex());
        sb.append(", displayName=");
        sb.append(getDisplayName());
        sb.append(", transactionModuleMasterSid=");
        sb.append(getTransactionModuleMasterSid());
        sb.append(", categoryName=");
        sb.append(getCategoryName());
        sb.append(", validation=");
        sb.append(getValidation());
        sb.append(", propertyName=");
        sb.append(getPropertyName());
        sb.append(", flag=");
        sb.append(getFlag());
        sb.append(", transactionModuleDetailsSid=");
        sb.append(getTransactionModuleDetailsSid());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.TransactionModuleDetails");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>propertyIndex</column-name><column-value><![CDATA[");
        sb.append(getPropertyIndex());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>displayName</column-name><column-value><![CDATA[");
        sb.append(getDisplayName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>transactionModuleMasterSid</column-name><column-value><![CDATA[");
        sb.append(getTransactionModuleMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>categoryName</column-name><column-value><![CDATA[");
        sb.append(getCategoryName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>validation</column-name><column-value><![CDATA[");
        sb.append(getValidation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>propertyName</column-name><column-value><![CDATA[");
        sb.append(getPropertyName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>flag</column-name><column-value><![CDATA[");
        sb.append(getFlag());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>transactionModuleDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getTransactionModuleDetailsSid());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
