package com.stpl.app.model.impl;

import com.stpl.app.model.IvldCpi;
import com.stpl.app.model.IvldCpiModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the IvldCpi service. Represents a row in the &quot;IVLD_CPI&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.IvldCpiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IvldCpiImpl}.
 * </p>
 *
 * @author
 * @see IvldCpiImpl
 * @see com.stpl.app.model.IvldCpi
 * @see com.stpl.app.model.IvldCpiModel
 * @generated
 */
public class IvldCpiModelImpl extends BaseModelImpl<IvldCpi>
    implements IvldCpiModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ivld cpi model instance should use the {@link com.stpl.app.model.IvldCpi} interface instead.
     */
    public static final String TABLE_NAME = "IVLD_CPI";
    public static final Object[][] TABLE_COLUMNS = {
            { "EFFECTIVE_DATE", Types.VARCHAR },
            { "REASON_FOR_FAILURE", Types.VARCHAR },
            { "INDEX_TYPE", Types.VARCHAR },
            { "STATUS", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "CPI_INTFID", Types.VARCHAR },
            { "CREATED_BY", Types.VARCHAR },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "SOURCE", Types.VARCHAR },
            { "INDEX_VALUE", Types.VARCHAR },
            { "ADD_CHG_DEL_INDICATOR", Types.VARCHAR },
            { "BATCH_ID", Types.VARCHAR },
            { "IVLD_CPI_SID", Types.INTEGER },
            { "ERROR_FIELD", Types.VARCHAR },
            { "ERROR_CODE", Types.VARCHAR },
            { "INTF_INSERTED_DATE", Types.TIMESTAMP },
            { "MODIFIED_BY", Types.VARCHAR },
            { "REPROCESSED_FLAG", Types.VARCHAR },
            { "INDEX_ID", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table IVLD_CPI (EFFECTIVE_DATE VARCHAR(75) null,REASON_FOR_FAILURE VARCHAR(75) null,INDEX_TYPE VARCHAR(75) null,STATUS VARCHAR(75) null,MODIFIED_DATE DATE null,CPI_INTFID VARCHAR(75) null,CREATED_BY VARCHAR(75) null,CREATED_DATE DATE null,SOURCE VARCHAR(75) null,INDEX_VALUE VARCHAR(75) null,ADD_CHG_DEL_INDICATOR VARCHAR(75) null,BATCH_ID VARCHAR(75) null,IVLD_CPI_SID INTEGER not null primary key IDENTITY,ERROR_FIELD VARCHAR(75) null,ERROR_CODE VARCHAR(75) null,INTF_INSERTED_DATE DATE null,MODIFIED_BY VARCHAR(75) null,REPROCESSED_FLAG VARCHAR(75) null,INDEX_ID VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table IVLD_CPI";
    public static final String ORDER_BY_JPQL = " ORDER BY ivldCpi.ivldCpiSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY IVLD_CPI.IVLD_CPI_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.IvldCpi"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.IvldCpi"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.IvldCpi"));
    private static ClassLoader _classLoader = IvldCpi.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            IvldCpi.class
        };
    private String _effectiveDate;
    private String _reasonForFailure;
    private String _indexType;
    private String _status;
    private Date _modifiedDate;
    private String _cpiIntfid;
    private String _createdBy;
    private Date _createdDate;
    private String _source;
    private String _indexValue;
    private String _addChgDelIndicator;
    private String _batchId;
    private int _ivldCpiSid;
    private String _errorField;
    private String _errorCode;
    private Date _intfInsertedDate;
    private String _modifiedBy;
    private String _reprocessedFlag;
    private String _indexId;
    private IvldCpi _escapedModel;

    public IvldCpiModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _ivldCpiSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setIvldCpiSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _ivldCpiSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return IvldCpi.class;
    }

    @Override
    public String getModelClassName() {
        return IvldCpi.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("effectiveDate", getEffectiveDate());
        attributes.put("reasonForFailure", getReasonForFailure());
        attributes.put("indexType", getIndexType());
        attributes.put("status", getStatus());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("cpiIntfid", getCpiIntfid());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("source", getSource());
        attributes.put("indexValue", getIndexValue());
        attributes.put("addChgDelIndicator", getAddChgDelIndicator());
        attributes.put("batchId", getBatchId());
        attributes.put("ivldCpiSid", getIvldCpiSid());
        attributes.put("errorField", getErrorField());
        attributes.put("errorCode", getErrorCode());
        attributes.put("intfInsertedDate", getIntfInsertedDate());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("reprocessedFlag", getReprocessedFlag());
        attributes.put("indexId", getIndexId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String effectiveDate = (String) attributes.get("effectiveDate");

        if (effectiveDate != null) {
            setEffectiveDate(effectiveDate);
        }

        String reasonForFailure = (String) attributes.get("reasonForFailure");

        if (reasonForFailure != null) {
            setReasonForFailure(reasonForFailure);
        }

        String indexType = (String) attributes.get("indexType");

        if (indexType != null) {
            setIndexType(indexType);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String cpiIntfid = (String) attributes.get("cpiIntfid");

        if (cpiIntfid != null) {
            setCpiIntfid(cpiIntfid);
        }

        String createdBy = (String) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String indexValue = (String) attributes.get("indexValue");

        if (indexValue != null) {
            setIndexValue(indexValue);
        }

        String addChgDelIndicator = (String) attributes.get(
                "addChgDelIndicator");

        if (addChgDelIndicator != null) {
            setAddChgDelIndicator(addChgDelIndicator);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        Integer ivldCpiSid = (Integer) attributes.get("ivldCpiSid");

        if (ivldCpiSid != null) {
            setIvldCpiSid(ivldCpiSid);
        }

        String errorField = (String) attributes.get("errorField");

        if (errorField != null) {
            setErrorField(errorField);
        }

        String errorCode = (String) attributes.get("errorCode");

        if (errorCode != null) {
            setErrorCode(errorCode);
        }

        Date intfInsertedDate = (Date) attributes.get("intfInsertedDate");

        if (intfInsertedDate != null) {
            setIntfInsertedDate(intfInsertedDate);
        }

        String modifiedBy = (String) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String reprocessedFlag = (String) attributes.get("reprocessedFlag");

        if (reprocessedFlag != null) {
            setReprocessedFlag(reprocessedFlag);
        }

        String indexId = (String) attributes.get("indexId");

        if (indexId != null) {
            setIndexId(indexId);
        }
    }

    @Override
    public String getEffectiveDate() {
        if (_effectiveDate == null) {
            return StringPool.BLANK;
        } else {
            return _effectiveDate;
        }
    }

    @Override
    public void setEffectiveDate(String effectiveDate) {
        _effectiveDate = effectiveDate;
    }

    @Override
    public String getReasonForFailure() {
        if (_reasonForFailure == null) {
            return StringPool.BLANK;
        } else {
            return _reasonForFailure;
        }
    }

    @Override
    public void setReasonForFailure(String reasonForFailure) {
        _reasonForFailure = reasonForFailure;
    }

    @Override
    public String getIndexType() {
        if (_indexType == null) {
            return StringPool.BLANK;
        } else {
            return _indexType;
        }
    }

    @Override
    public void setIndexType(String indexType) {
        _indexType = indexType;
    }

    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _status = status;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getCpiIntfid() {
        if (_cpiIntfid == null) {
            return StringPool.BLANK;
        } else {
            return _cpiIntfid;
        }
    }

    @Override
    public void setCpiIntfid(String cpiIntfid) {
        _cpiIntfid = cpiIntfid;
    }

    @Override
    public String getCreatedBy() {
        if (_createdBy == null) {
            return StringPool.BLANK;
        } else {
            return _createdBy;
        }
    }

    @Override
    public void setCreatedBy(String createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getIndexValue() {
        if (_indexValue == null) {
            return StringPool.BLANK;
        } else {
            return _indexValue;
        }
    }

    @Override
    public void setIndexValue(String indexValue) {
        _indexValue = indexValue;
    }

    @Override
    public String getAddChgDelIndicator() {
        if (_addChgDelIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _addChgDelIndicator;
        }
    }

    @Override
    public void setAddChgDelIndicator(String addChgDelIndicator) {
        _addChgDelIndicator = addChgDelIndicator;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public int getIvldCpiSid() {
        return _ivldCpiSid;
    }

    @Override
    public void setIvldCpiSid(int ivldCpiSid) {
        _ivldCpiSid = ivldCpiSid;
    }

    @Override
    public String getErrorField() {
        if (_errorField == null) {
            return StringPool.BLANK;
        } else {
            return _errorField;
        }
    }

    @Override
    public void setErrorField(String errorField) {
        _errorField = errorField;
    }

    @Override
    public String getErrorCode() {
        if (_errorCode == null) {
            return StringPool.BLANK;
        } else {
            return _errorCode;
        }
    }

    @Override
    public void setErrorCode(String errorCode) {
        _errorCode = errorCode;
    }

    @Override
    public Date getIntfInsertedDate() {
        return _intfInsertedDate;
    }

    @Override
    public void setIntfInsertedDate(Date intfInsertedDate) {
        _intfInsertedDate = intfInsertedDate;
    }

    @Override
    public String getModifiedBy() {
        if (_modifiedBy == null) {
            return StringPool.BLANK;
        } else {
            return _modifiedBy;
        }
    }

    @Override
    public void setModifiedBy(String modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getReprocessedFlag() {
        if (_reprocessedFlag == null) {
            return StringPool.BLANK;
        } else {
            return _reprocessedFlag;
        }
    }

    @Override
    public void setReprocessedFlag(String reprocessedFlag) {
        _reprocessedFlag = reprocessedFlag;
    }

    @Override
    public String getIndexId() {
        if (_indexId == null) {
            return StringPool.BLANK;
        } else {
            return _indexId;
        }
    }

    @Override
    public void setIndexId(String indexId) {
        _indexId = indexId;
    }

    @Override
    public IvldCpi toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (IvldCpi) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        IvldCpiImpl ivldCpiImpl = new IvldCpiImpl();

        ivldCpiImpl.setEffectiveDate(getEffectiveDate());
        ivldCpiImpl.setReasonForFailure(getReasonForFailure());
        ivldCpiImpl.setIndexType(getIndexType());
        ivldCpiImpl.setStatus(getStatus());
        ivldCpiImpl.setModifiedDate(getModifiedDate());
        ivldCpiImpl.setCpiIntfid(getCpiIntfid());
        ivldCpiImpl.setCreatedBy(getCreatedBy());
        ivldCpiImpl.setCreatedDate(getCreatedDate());
        ivldCpiImpl.setSource(getSource());
        ivldCpiImpl.setIndexValue(getIndexValue());
        ivldCpiImpl.setAddChgDelIndicator(getAddChgDelIndicator());
        ivldCpiImpl.setBatchId(getBatchId());
        ivldCpiImpl.setIvldCpiSid(getIvldCpiSid());
        ivldCpiImpl.setErrorField(getErrorField());
        ivldCpiImpl.setErrorCode(getErrorCode());
        ivldCpiImpl.setIntfInsertedDate(getIntfInsertedDate());
        ivldCpiImpl.setModifiedBy(getModifiedBy());
        ivldCpiImpl.setReprocessedFlag(getReprocessedFlag());
        ivldCpiImpl.setIndexId(getIndexId());

        ivldCpiImpl.resetOriginalValues();

        return ivldCpiImpl;
    }

    @Override
    public int compareTo(IvldCpi ivldCpi) {
        int primaryKey = ivldCpi.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof IvldCpi)) {
            return false;
        }

        IvldCpi ivldCpi = (IvldCpi) obj;

        int primaryKey = ivldCpi.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<IvldCpi> toCacheModel() {
        IvldCpiCacheModel ivldCpiCacheModel = new IvldCpiCacheModel();

        ivldCpiCacheModel.effectiveDate = getEffectiveDate();

        String effectiveDate = ivldCpiCacheModel.effectiveDate;

        if ((effectiveDate != null) && (effectiveDate.length() == 0)) {
            ivldCpiCacheModel.effectiveDate = null;
        }

        ivldCpiCacheModel.reasonForFailure = getReasonForFailure();

        String reasonForFailure = ivldCpiCacheModel.reasonForFailure;

        if ((reasonForFailure != null) && (reasonForFailure.length() == 0)) {
            ivldCpiCacheModel.reasonForFailure = null;
        }

        ivldCpiCacheModel.indexType = getIndexType();

        String indexType = ivldCpiCacheModel.indexType;

        if ((indexType != null) && (indexType.length() == 0)) {
            ivldCpiCacheModel.indexType = null;
        }

        ivldCpiCacheModel.status = getStatus();

        String status = ivldCpiCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            ivldCpiCacheModel.status = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            ivldCpiCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            ivldCpiCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        ivldCpiCacheModel.cpiIntfid = getCpiIntfid();

        String cpiIntfid = ivldCpiCacheModel.cpiIntfid;

        if ((cpiIntfid != null) && (cpiIntfid.length() == 0)) {
            ivldCpiCacheModel.cpiIntfid = null;
        }

        ivldCpiCacheModel.createdBy = getCreatedBy();

        String createdBy = ivldCpiCacheModel.createdBy;

        if ((createdBy != null) && (createdBy.length() == 0)) {
            ivldCpiCacheModel.createdBy = null;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            ivldCpiCacheModel.createdDate = createdDate.getTime();
        } else {
            ivldCpiCacheModel.createdDate = Long.MIN_VALUE;
        }

        ivldCpiCacheModel.source = getSource();

        String source = ivldCpiCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            ivldCpiCacheModel.source = null;
        }

        ivldCpiCacheModel.indexValue = getIndexValue();

        String indexValue = ivldCpiCacheModel.indexValue;

        if ((indexValue != null) && (indexValue.length() == 0)) {
            ivldCpiCacheModel.indexValue = null;
        }

        ivldCpiCacheModel.addChgDelIndicator = getAddChgDelIndicator();

        String addChgDelIndicator = ivldCpiCacheModel.addChgDelIndicator;

        if ((addChgDelIndicator != null) && (addChgDelIndicator.length() == 0)) {
            ivldCpiCacheModel.addChgDelIndicator = null;
        }

        ivldCpiCacheModel.batchId = getBatchId();

        String batchId = ivldCpiCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            ivldCpiCacheModel.batchId = null;
        }

        ivldCpiCacheModel.ivldCpiSid = getIvldCpiSid();

        ivldCpiCacheModel.errorField = getErrorField();

        String errorField = ivldCpiCacheModel.errorField;

        if ((errorField != null) && (errorField.length() == 0)) {
            ivldCpiCacheModel.errorField = null;
        }

        ivldCpiCacheModel.errorCode = getErrorCode();

        String errorCode = ivldCpiCacheModel.errorCode;

        if ((errorCode != null) && (errorCode.length() == 0)) {
            ivldCpiCacheModel.errorCode = null;
        }

        Date intfInsertedDate = getIntfInsertedDate();

        if (intfInsertedDate != null) {
            ivldCpiCacheModel.intfInsertedDate = intfInsertedDate.getTime();
        } else {
            ivldCpiCacheModel.intfInsertedDate = Long.MIN_VALUE;
        }

        ivldCpiCacheModel.modifiedBy = getModifiedBy();

        String modifiedBy = ivldCpiCacheModel.modifiedBy;

        if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
            ivldCpiCacheModel.modifiedBy = null;
        }

        ivldCpiCacheModel.reprocessedFlag = getReprocessedFlag();

        String reprocessedFlag = ivldCpiCacheModel.reprocessedFlag;

        if ((reprocessedFlag != null) && (reprocessedFlag.length() == 0)) {
            ivldCpiCacheModel.reprocessedFlag = null;
        }

        ivldCpiCacheModel.indexId = getIndexId();

        String indexId = ivldCpiCacheModel.indexId;

        if ((indexId != null) && (indexId.length() == 0)) {
            ivldCpiCacheModel.indexId = null;
        }

        return ivldCpiCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(39);

        sb.append("{effectiveDate=");
        sb.append(getEffectiveDate());
        sb.append(", reasonForFailure=");
        sb.append(getReasonForFailure());
        sb.append(", indexType=");
        sb.append(getIndexType());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", cpiIntfid=");
        sb.append(getCpiIntfid());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", indexValue=");
        sb.append(getIndexValue());
        sb.append(", addChgDelIndicator=");
        sb.append(getAddChgDelIndicator());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", ivldCpiSid=");
        sb.append(getIvldCpiSid());
        sb.append(", errorField=");
        sb.append(getErrorField());
        sb.append(", errorCode=");
        sb.append(getErrorCode());
        sb.append(", intfInsertedDate=");
        sb.append(getIntfInsertedDate());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", reprocessedFlag=");
        sb.append(getReprocessedFlag());
        sb.append(", indexId=");
        sb.append(getIndexId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(61);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.IvldCpi");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>effectiveDate</column-name><column-value><![CDATA[");
        sb.append(getEffectiveDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reasonForFailure</column-name><column-value><![CDATA[");
        sb.append(getReasonForFailure());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>indexType</column-name><column-value><![CDATA[");
        sb.append(getIndexType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cpiIntfid</column-name><column-value><![CDATA[");
        sb.append(getCpiIntfid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>indexValue</column-name><column-value><![CDATA[");
        sb.append(getIndexValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>addChgDelIndicator</column-name><column-value><![CDATA[");
        sb.append(getAddChgDelIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ivldCpiSid</column-name><column-value><![CDATA[");
        sb.append(getIvldCpiSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>errorField</column-name><column-value><![CDATA[");
        sb.append(getErrorField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>errorCode</column-name><column-value><![CDATA[");
        sb.append(getErrorCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>intfInsertedDate</column-name><column-value><![CDATA[");
        sb.append(getIntfInsertedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reprocessedFlag</column-name><column-value><![CDATA[");
        sb.append(getReprocessedFlag());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>indexId</column-name><column-value><![CDATA[");
        sb.append(getIndexId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
