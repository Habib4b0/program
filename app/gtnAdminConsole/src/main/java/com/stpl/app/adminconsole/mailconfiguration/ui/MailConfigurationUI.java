/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stpl.app.adminconsole.mailconfiguration.ui;

import com.stpl.app.adminconsole.common.dto.SessionDTO;
import com.stpl.app.adminconsole.common.util.CommonUIUtil;
import com.stpl.app.adminconsole.mailconfiguration.ui.View.MailConfigurationView;
import com.stpl.app.adminconsole.util.AbstractNotificationUtils;
import com.stpl.app.adminconsole.util.ConstantsUtils;
import com.stpl.app.adminconsole.util.ErrorCodeUtil;
import com.stpl.app.adminconsole.util.ErrorCodes;
import com.stpl.portal.kernel.exception.PortalException;
import com.stpl.portal.kernel.exception.SystemException;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.Navigator;
import com.vaadin.server.VaadinPortletSession;
import com.vaadin.server.VaadinRequest;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.UI;
import org.jboss.logging.Logger;


/**
 *
 * @author manikandaprabu.g
 */
public class MailConfigurationUI extends UI {
 private final static Logger LOGGER = Logger.getLogger(MailConfigurationUI.class);

    @AutoGenerated
    Navigator navigator;
    SessionDTO sessionDTO=new SessionDTO();
           
    @Override
    protected void init(final VaadinRequest request) {
        
    if (VaadinSession.getCurrent() instanceof VaadinPortletSession) {
        try {
            LOGGER.info("Inside init Mail Configuration");
                addStyleName("bootstrap");
                addStyleName("bootstrap-bb");
                addStyleName("bootstrap-admin");
                addStyleName("bootstrap-adminConsole");	
                CommonUIUtil.beforeUnloadCloseUi(this,sessionDTO);
                final String userId = request.getRemoteUser();
                final String sessionId = request.getWrappedSession().getId();
                VaadinSession.getCurrent().setAttribute(ConstantsUtils.SESSION_ID, sessionId);
                sessionDTO.setUserId(userId);
                LOGGER.info("USER_ID: "+userId);
                LOGGER.info("SESSION_ID: "+sessionId);
                navigator = new Navigator(this, this);
                navigator.addView(MailConfigurationView.NAME, new MailConfigurationView(sessionDTO));
            } catch (SystemException e) {
                final String errorMsg = ErrorCodeUtil.getErrorMessage(e);
                LOGGER.error(e);
                AbstractNotificationUtils.getErrorNotification(ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1001), errorMsg);
            } catch (PortalException e) {
                LOGGER.error(e);
                AbstractNotificationUtils.getErrorNotification(ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1001), ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_4011));
            } catch (Exception e) {
                LOGGER.error(e);
                AbstractNotificationUtils.getErrorNotification(ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1001), ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_4011));
            }
            LOGGER.info("init method Ended");
        }
    }
}
