/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.AverageShelfLifeMaster;
import com.stpl.app.model.AverageShelfLifeMasterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AverageShelfLifeMaster service. Represents a row in the &quot;AVERAGE_SHELF_LIFE_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AverageShelfLifeMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AverageShelfLifeMasterImpl}.
 * </p>
 *
 * @author
 * @see AverageShelfLifeMasterImpl
 * @see AverageShelfLifeMaster
 * @see AverageShelfLifeMasterModel
 * @generated
 */
@ProviderType
public class AverageShelfLifeMasterModelImpl extends BaseModelImpl<AverageShelfLifeMaster>
	implements AverageShelfLifeMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a average shelf life master model instance should use the {@link AverageShelfLifeMaster} interface instead.
	 */
	public static final String TABLE_NAME = "AVERAGE_SHELF_LIFE_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CREATED_BY", Types.INTEGER },
			{ "AVERAGE_SHELF_LIFE_MASTER_SID", Types.INTEGER },
			{ "RECORD_LOCK_STATUS", Types.BOOLEAN },
			{ "ITEM_ID_TYPE", Types.VARCHAR },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "SOURCE", Types.VARCHAR },
			{ "ITEM_ID", Types.VARCHAR },
			{ "AVG_SHELF_LIFE", Types.VARCHAR },
			{ "BATCH_ID", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "INBOUND_STATUS", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("AVERAGE_SHELF_LIFE_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RECORD_LOCK_STATUS", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("ITEM_ID_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("AVG_SHELF_LIFE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table AVERAGE_SHELF_LIFE_MASTER (CREATED_BY INTEGER,AVERAGE_SHELF_LIFE_MASTER_SID INTEGER not null primary key IDENTITY,RECORD_LOCK_STATUS BOOLEAN,ITEM_ID_TYPE VARCHAR(75) null,MODIFIED_BY INTEGER,CREATED_DATE DATE null,SOURCE VARCHAR(75) null,ITEM_ID VARCHAR(75) null,AVG_SHELF_LIFE VARCHAR(75) null,BATCH_ID VARCHAR(75) null,MODIFIED_DATE DATE null,INBOUND_STATUS VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table AVERAGE_SHELF_LIFE_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY averageShelfLifeMaster.averageShelfLifeMasterSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY AVERAGE_SHELF_LIFE_MASTER.AVERAGE_SHELF_LIFE_MASTER_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.AverageShelfLifeMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.AverageShelfLifeMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.stpl.app.model.AverageShelfLifeMaster"),
			true);
	public static final long AVGSHELFLIFE_COLUMN_BITMASK = 1L;
	public static final long ITEMID_COLUMN_BITMASK = 2L;
	public static final long ITEMIDTYPE_COLUMN_BITMASK = 4L;
	public static final long AVERAGESHELFLIFEMASTERSID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.AverageShelfLifeMaster"));

	public AverageShelfLifeMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _averageShelfLifeMasterSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setAverageShelfLifeMasterSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _averageShelfLifeMasterSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AverageShelfLifeMaster.class;
	}

	@Override
	public String getModelClassName() {
		return AverageShelfLifeMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("createdBy", getCreatedBy());
		attributes.put("averageShelfLifeMasterSid",
			getAverageShelfLifeMasterSid());
		attributes.put("recordLockStatus", getRecordLockStatus());
		attributes.put("itemIdType", getItemIdType());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("source", getSource());
		attributes.put("itemId", getItemId());
		attributes.put("avgShelfLife", getAvgShelfLife());
		attributes.put("batchId", getBatchId());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("inboundStatus", getInboundStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Integer averageShelfLifeMasterSid = (Integer)attributes.get(
				"averageShelfLifeMasterSid");

		if (averageShelfLifeMasterSid != null) {
			setAverageShelfLifeMasterSid(averageShelfLifeMasterSid);
		}

		Boolean recordLockStatus = (Boolean)attributes.get("recordLockStatus");

		if (recordLockStatus != null) {
			setRecordLockStatus(recordLockStatus);
		}

		String itemIdType = (String)attributes.get("itemIdType");

		if (itemIdType != null) {
			setItemIdType(itemIdType);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String itemId = (String)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		String avgShelfLife = (String)attributes.get("avgShelfLife");

		if (avgShelfLife != null) {
			setAvgShelfLife(avgShelfLife);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public int getAverageShelfLifeMasterSid() {
		return _averageShelfLifeMasterSid;
	}

	@Override
	public void setAverageShelfLifeMasterSid(int averageShelfLifeMasterSid) {
		_averageShelfLifeMasterSid = averageShelfLifeMasterSid;
	}

	@Override
	public boolean getRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public boolean isRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public void setRecordLockStatus(boolean recordLockStatus) {
		_recordLockStatus = recordLockStatus;
	}

	@Override
	public String getItemIdType() {
		if (_itemIdType == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemIdType;
		}
	}

	@Override
	public void setItemIdType(String itemIdType) {
		_columnBitmask |= ITEMIDTYPE_COLUMN_BITMASK;

		if (_originalItemIdType == null) {
			_originalItemIdType = _itemIdType;
		}

		_itemIdType = itemIdType;
	}

	public String getOriginalItemIdType() {
		return GetterUtil.getString(_originalItemIdType);
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getItemId() {
		if (_itemId == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemId;
		}
	}

	@Override
	public void setItemId(String itemId) {
		_columnBitmask |= ITEMID_COLUMN_BITMASK;

		if (_originalItemId == null) {
			_originalItemId = _itemId;
		}

		_itemId = itemId;
	}

	public String getOriginalItemId() {
		return GetterUtil.getString(_originalItemId);
	}

	@Override
	public String getAvgShelfLife() {
		if (_avgShelfLife == null) {
			return StringPool.BLANK;
		}
		else {
			return _avgShelfLife;
		}
	}

	@Override
	public void setAvgShelfLife(String avgShelfLife) {
		_columnBitmask |= AVGSHELFLIFE_COLUMN_BITMASK;

		if (_originalAvgShelfLife == null) {
			_originalAvgShelfLife = _avgShelfLife;
		}

		_avgShelfLife = avgShelfLife;
	}

	public String getOriginalAvgShelfLife() {
		return GetterUtil.getString(_originalAvgShelfLife);
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public AverageShelfLifeMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AverageShelfLifeMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AverageShelfLifeMasterImpl averageShelfLifeMasterImpl = new AverageShelfLifeMasterImpl();

		averageShelfLifeMasterImpl.setCreatedBy(getCreatedBy());
		averageShelfLifeMasterImpl.setAverageShelfLifeMasterSid(getAverageShelfLifeMasterSid());
		averageShelfLifeMasterImpl.setRecordLockStatus(getRecordLockStatus());
		averageShelfLifeMasterImpl.setItemIdType(getItemIdType());
		averageShelfLifeMasterImpl.setModifiedBy(getModifiedBy());
		averageShelfLifeMasterImpl.setCreatedDate(getCreatedDate());
		averageShelfLifeMasterImpl.setSource(getSource());
		averageShelfLifeMasterImpl.setItemId(getItemId());
		averageShelfLifeMasterImpl.setAvgShelfLife(getAvgShelfLife());
		averageShelfLifeMasterImpl.setBatchId(getBatchId());
		averageShelfLifeMasterImpl.setModifiedDate(getModifiedDate());
		averageShelfLifeMasterImpl.setInboundStatus(getInboundStatus());

		averageShelfLifeMasterImpl.resetOriginalValues();

		return averageShelfLifeMasterImpl;
	}

	@Override
	public int compareTo(AverageShelfLifeMaster averageShelfLifeMaster) {
		int primaryKey = averageShelfLifeMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AverageShelfLifeMaster)) {
			return false;
		}

		AverageShelfLifeMaster averageShelfLifeMaster = (AverageShelfLifeMaster)obj;

		int primaryKey = averageShelfLifeMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AverageShelfLifeMasterModelImpl averageShelfLifeMasterModelImpl = this;

		averageShelfLifeMasterModelImpl._originalItemIdType = averageShelfLifeMasterModelImpl._itemIdType;

		averageShelfLifeMasterModelImpl._originalItemId = averageShelfLifeMasterModelImpl._itemId;

		averageShelfLifeMasterModelImpl._originalAvgShelfLife = averageShelfLifeMasterModelImpl._avgShelfLife;

		averageShelfLifeMasterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AverageShelfLifeMaster> toCacheModel() {
		AverageShelfLifeMasterCacheModel averageShelfLifeMasterCacheModel = new AverageShelfLifeMasterCacheModel();

		averageShelfLifeMasterCacheModel.createdBy = getCreatedBy();

		averageShelfLifeMasterCacheModel.averageShelfLifeMasterSid = getAverageShelfLifeMasterSid();

		averageShelfLifeMasterCacheModel.recordLockStatus = getRecordLockStatus();

		averageShelfLifeMasterCacheModel.itemIdType = getItemIdType();

		String itemIdType = averageShelfLifeMasterCacheModel.itemIdType;

		if ((itemIdType != null) && (itemIdType.length() == 0)) {
			averageShelfLifeMasterCacheModel.itemIdType = null;
		}

		averageShelfLifeMasterCacheModel.modifiedBy = getModifiedBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			averageShelfLifeMasterCacheModel.createdDate = createdDate.getTime();
		}
		else {
			averageShelfLifeMasterCacheModel.createdDate = Long.MIN_VALUE;
		}

		averageShelfLifeMasterCacheModel.source = getSource();

		String source = averageShelfLifeMasterCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			averageShelfLifeMasterCacheModel.source = null;
		}

		averageShelfLifeMasterCacheModel.itemId = getItemId();

		String itemId = averageShelfLifeMasterCacheModel.itemId;

		if ((itemId != null) && (itemId.length() == 0)) {
			averageShelfLifeMasterCacheModel.itemId = null;
		}

		averageShelfLifeMasterCacheModel.avgShelfLife = getAvgShelfLife();

		String avgShelfLife = averageShelfLifeMasterCacheModel.avgShelfLife;

		if ((avgShelfLife != null) && (avgShelfLife.length() == 0)) {
			averageShelfLifeMasterCacheModel.avgShelfLife = null;
		}

		averageShelfLifeMasterCacheModel.batchId = getBatchId();

		String batchId = averageShelfLifeMasterCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			averageShelfLifeMasterCacheModel.batchId = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			averageShelfLifeMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			averageShelfLifeMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		averageShelfLifeMasterCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = averageShelfLifeMasterCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			averageShelfLifeMasterCacheModel.inboundStatus = null;
		}

		return averageShelfLifeMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{createdBy=");
		sb.append(getCreatedBy());
		sb.append(", averageShelfLifeMasterSid=");
		sb.append(getAverageShelfLifeMasterSid());
		sb.append(", recordLockStatus=");
		sb.append(getRecordLockStatus());
		sb.append(", itemIdType=");
		sb.append(getItemIdType());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", itemId=");
		sb.append(getItemId());
		sb.append(", avgShelfLife=");
		sb.append(getAvgShelfLife());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.AverageShelfLifeMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>averageShelfLifeMasterSid</column-name><column-value><![CDATA[");
		sb.append(getAverageShelfLifeMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
		sb.append(getRecordLockStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemIdType</column-name><column-value><![CDATA[");
		sb.append(getItemIdType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>avgShelfLife</column-name><column-value><![CDATA[");
		sb.append(getAvgShelfLife());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AverageShelfLifeMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AverageShelfLifeMaster.class
		};
	private int _createdBy;
	private int _averageShelfLifeMasterSid;
	private boolean _recordLockStatus;
	private String _itemIdType;
	private String _originalItemIdType;
	private int _modifiedBy;
	private Date _createdDate;
	private String _source;
	private String _itemId;
	private String _originalItemId;
	private String _avgShelfLife;
	private String _originalAvgShelfLife;
	private String _batchId;
	private Date _modifiedDate;
	private String _inboundStatus;
	private long _columnBitmask;
	private AverageShelfLifeMaster _escapedModel;
}