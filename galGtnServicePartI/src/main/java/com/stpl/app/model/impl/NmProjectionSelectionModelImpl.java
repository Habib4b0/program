package com.stpl.app.model.impl;

import com.stpl.app.model.NmProjectionSelection;
import com.stpl.app.model.NmProjectionSelectionModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NmProjectionSelection service. Represents a row in the &quot;NM_PROJECTION_SELECTION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.NmProjectionSelectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NmProjectionSelectionImpl}.
 * </p>
 *
 * @author
 * @see NmProjectionSelectionImpl
 * @see com.stpl.app.model.NmProjectionSelection
 * @see com.stpl.app.model.NmProjectionSelectionModel
 * @generated
 */
public class NmProjectionSelectionModelImpl extends BaseModelImpl<NmProjectionSelection>
    implements NmProjectionSelectionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a nm projection selection model instance should use the {@link com.stpl.app.model.NmProjectionSelection} interface instead.
     */
    public static final String TABLE_NAME = "NM_PROJECTION_SELECTION";
    public static final Object[][] TABLE_COLUMNS = {
            { "SCREEN_NAME", Types.VARCHAR },
            { "NM_PROJECTION_SELECTION_SID", Types.INTEGER },
            { "FIELD_NAME", Types.VARCHAR },
            { "FIELD_VALUES", Types.VARCHAR },
            { "PROJECTION_MASTER_SID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table NM_PROJECTION_SELECTION (SCREEN_NAME VARCHAR(75) null,NM_PROJECTION_SELECTION_SID INTEGER not null primary key IDENTITY,FIELD_NAME VARCHAR(75) null,FIELD_VALUES VARCHAR(75) null,PROJECTION_MASTER_SID INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table NM_PROJECTION_SELECTION";
    public static final String ORDER_BY_JPQL = " ORDER BY nmProjectionSelection.nmProjectionSelectionSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY NM_PROJECTION_SELECTION.NM_PROJECTION_SELECTION_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.NmProjectionSelection"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.NmProjectionSelection"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.NmProjectionSelection"));
    private static ClassLoader _classLoader = NmProjectionSelection.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            NmProjectionSelection.class
        };
    private String _screenName;
    private int _nmProjectionSelectionSid;
    private String _fieldName;
    private String _fieldValues;
    private int _projectionMasterSid;
    private NmProjectionSelection _escapedModel;

    public NmProjectionSelectionModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _nmProjectionSelectionSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setNmProjectionSelectionSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _nmProjectionSelectionSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return NmProjectionSelection.class;
    }

    @Override
    public String getModelClassName() {
        return NmProjectionSelection.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("screenName", getScreenName());
        attributes.put("nmProjectionSelectionSid", getNmProjectionSelectionSid());
        attributes.put("fieldName", getFieldName());
        attributes.put("fieldValues", getFieldValues());
        attributes.put("projectionMasterSid", getProjectionMasterSid());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String screenName = (String) attributes.get("screenName");

        if (screenName != null) {
            setScreenName(screenName);
        }

        Integer nmProjectionSelectionSid = (Integer) attributes.get(
                "nmProjectionSelectionSid");

        if (nmProjectionSelectionSid != null) {
            setNmProjectionSelectionSid(nmProjectionSelectionSid);
        }

        String fieldName = (String) attributes.get("fieldName");

        if (fieldName != null) {
            setFieldName(fieldName);
        }

        String fieldValues = (String) attributes.get("fieldValues");

        if (fieldValues != null) {
            setFieldValues(fieldValues);
        }

        Integer projectionMasterSid = (Integer) attributes.get(
                "projectionMasterSid");

        if (projectionMasterSid != null) {
            setProjectionMasterSid(projectionMasterSid);
        }
    }

    @Override
    public String getScreenName() {
        if (_screenName == null) {
            return StringPool.BLANK;
        } else {
            return _screenName;
        }
    }

    @Override
    public void setScreenName(String screenName) {
        _screenName = screenName;
    }

    @Override
    public int getNmProjectionSelectionSid() {
        return _nmProjectionSelectionSid;
    }

    @Override
    public void setNmProjectionSelectionSid(int nmProjectionSelectionSid) {
        _nmProjectionSelectionSid = nmProjectionSelectionSid;
    }

    @Override
    public String getFieldName() {
        if (_fieldName == null) {
            return StringPool.BLANK;
        } else {
            return _fieldName;
        }
    }

    @Override
    public void setFieldName(String fieldName) {
        _fieldName = fieldName;
    }

    @Override
    public String getFieldValues() {
        if (_fieldValues == null) {
            return StringPool.BLANK;
        } else {
            return _fieldValues;
        }
    }

    @Override
    public void setFieldValues(String fieldValues) {
        _fieldValues = fieldValues;
    }

    @Override
    public int getProjectionMasterSid() {
        return _projectionMasterSid;
    }

    @Override
    public void setProjectionMasterSid(int projectionMasterSid) {
        _projectionMasterSid = projectionMasterSid;
    }

    @Override
    public NmProjectionSelection toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (NmProjectionSelection) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NmProjectionSelectionImpl nmProjectionSelectionImpl = new NmProjectionSelectionImpl();

        nmProjectionSelectionImpl.setScreenName(getScreenName());
        nmProjectionSelectionImpl.setNmProjectionSelectionSid(getNmProjectionSelectionSid());
        nmProjectionSelectionImpl.setFieldName(getFieldName());
        nmProjectionSelectionImpl.setFieldValues(getFieldValues());
        nmProjectionSelectionImpl.setProjectionMasterSid(getProjectionMasterSid());

        nmProjectionSelectionImpl.resetOriginalValues();

        return nmProjectionSelectionImpl;
    }

    @Override
    public int compareTo(NmProjectionSelection nmProjectionSelection) {
        int primaryKey = nmProjectionSelection.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof NmProjectionSelection)) {
            return false;
        }

        NmProjectionSelection nmProjectionSelection = (NmProjectionSelection) obj;

        int primaryKey = nmProjectionSelection.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<NmProjectionSelection> toCacheModel() {
        NmProjectionSelectionCacheModel nmProjectionSelectionCacheModel = new NmProjectionSelectionCacheModel();

        nmProjectionSelectionCacheModel.screenName = getScreenName();

        String screenName = nmProjectionSelectionCacheModel.screenName;

        if ((screenName != null) && (screenName.length() == 0)) {
            nmProjectionSelectionCacheModel.screenName = null;
        }

        nmProjectionSelectionCacheModel.nmProjectionSelectionSid = getNmProjectionSelectionSid();

        nmProjectionSelectionCacheModel.fieldName = getFieldName();

        String fieldName = nmProjectionSelectionCacheModel.fieldName;

        if ((fieldName != null) && (fieldName.length() == 0)) {
            nmProjectionSelectionCacheModel.fieldName = null;
        }

        nmProjectionSelectionCacheModel.fieldValues = getFieldValues();

        String fieldValues = nmProjectionSelectionCacheModel.fieldValues;

        if ((fieldValues != null) && (fieldValues.length() == 0)) {
            nmProjectionSelectionCacheModel.fieldValues = null;
        }

        nmProjectionSelectionCacheModel.projectionMasterSid = getProjectionMasterSid();

        return nmProjectionSelectionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{screenName=");
        sb.append(getScreenName());
        sb.append(", nmProjectionSelectionSid=");
        sb.append(getNmProjectionSelectionSid());
        sb.append(", fieldName=");
        sb.append(getFieldName());
        sb.append(", fieldValues=");
        sb.append(getFieldValues());
        sb.append(", projectionMasterSid=");
        sb.append(getProjectionMasterSid());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.NmProjectionSelection");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>screenName</column-name><column-value><![CDATA[");
        sb.append(getScreenName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nmProjectionSelectionSid</column-name><column-value><![CDATA[");
        sb.append(getNmProjectionSelectionSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fieldName</column-name><column-value><![CDATA[");
        sb.append(getFieldName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fieldValues</column-name><column-value><![CDATA[");
        sb.append(getFieldValues());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionMasterSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionMasterSid());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
