package com.stpl.app.model.impl;

import com.stpl.app.model.ItemQualifier;
import com.stpl.app.model.ItemQualifierModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ItemQualifier service. Represents a row in the &quot;ITEM_QUALIFIER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.ItemQualifierModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemQualifierImpl}.
 * </p>
 *
 * @author
 * @see ItemQualifierImpl
 * @see com.stpl.app.model.ItemQualifier
 * @see com.stpl.app.model.ItemQualifierModel
 * @generated
 */
public class ItemQualifierModelImpl extends BaseModelImpl<ItemQualifier>
    implements ItemQualifierModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a item qualifier model instance should use the {@link com.stpl.app.model.ItemQualifier} interface instead.
     */
    public static final String TABLE_NAME = "ITEM_QUALIFIER";
    public static final Object[][] TABLE_COLUMNS = {
            { "CREATED_BY", Types.INTEGER },
            { "ITEM_QUALIFIER_SID", Types.INTEGER },
            { "SPECIFIC_ENTITY_CODE", Types.VARCHAR },
            { "ITEM_QUALIFIER_NAME", Types.VARCHAR },
            { "MODIFIED_BY", Types.INTEGER },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "BATCH_ID", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "EFFECTIVE_DATES", Types.VARCHAR },
            { "NOTES", Types.VARCHAR },
            { "ITEM_QUALIFIER_VALUE", Types.VARCHAR },
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "SOURCE", Types.VARCHAR },
            { "INBOUND_STATUS", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table ITEM_QUALIFIER (CREATED_BY INTEGER,ITEM_QUALIFIER_SID INTEGER not null primary key IDENTITY,SPECIFIC_ENTITY_CODE VARCHAR(75) null,ITEM_QUALIFIER_NAME VARCHAR(75) null,MODIFIED_BY INTEGER,CREATED_DATE DATE null,BATCH_ID VARCHAR(75) null,MODIFIED_DATE DATE null,EFFECTIVE_DATES VARCHAR(75) null,NOTES VARCHAR(75) null,ITEM_QUALIFIER_VALUE VARCHAR(75) null,RECORD_LOCK_STATUS BOOLEAN,SOURCE VARCHAR(75) null,INBOUND_STATUS VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table ITEM_QUALIFIER";
    public static final String ORDER_BY_JPQL = " ORDER BY itemQualifier.itemQualifierSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ITEM_QUALIFIER.ITEM_QUALIFIER_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.ItemQualifier"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.ItemQualifier"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stpl.app.model.ItemQualifier"),
            true);
    public static long ITEMQUALIFIERNAME_COLUMN_BITMASK = 1L;
    public static long ITEMQUALIFIERVALUE_COLUMN_BITMASK = 2L;
    public static long ITEMQUALIFIERSID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.ItemQualifier"));
    private static ClassLoader _classLoader = ItemQualifier.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ItemQualifier.class
        };
    private int _createdBy;
    private int _itemQualifierSid;
    private String _specificEntityCode;
    private String _itemQualifierName;
    private String _originalItemQualifierName;
    private int _modifiedBy;
    private Date _createdDate;
    private String _batchId;
    private Date _modifiedDate;
    private String _effectiveDates;
    private String _notes;
    private String _itemQualifierValue;
    private String _originalItemQualifierValue;
    private boolean _recordLockStatus;
    private String _source;
    private String _inboundStatus;
    private long _columnBitmask;
    private ItemQualifier _escapedModel;

    public ItemQualifierModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _itemQualifierSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setItemQualifierSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _itemQualifierSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ItemQualifier.class;
    }

    @Override
    public String getModelClassName() {
        return ItemQualifier.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("createdBy", getCreatedBy());
        attributes.put("itemQualifierSid", getItemQualifierSid());
        attributes.put("specificEntityCode", getSpecificEntityCode());
        attributes.put("itemQualifierName", getItemQualifierName());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("batchId", getBatchId());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("effectiveDates", getEffectiveDates());
        attributes.put("notes", getNotes());
        attributes.put("itemQualifierValue", getItemQualifierValue());
        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("source", getSource());
        attributes.put("inboundStatus", getInboundStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Integer itemQualifierSid = (Integer) attributes.get("itemQualifierSid");

        if (itemQualifierSid != null) {
            setItemQualifierSid(itemQualifierSid);
        }

        String specificEntityCode = (String) attributes.get(
                "specificEntityCode");

        if (specificEntityCode != null) {
            setSpecificEntityCode(specificEntityCode);
        }

        String itemQualifierName = (String) attributes.get("itemQualifierName");

        if (itemQualifierName != null) {
            setItemQualifierName(itemQualifierName);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String effectiveDates = (String) attributes.get("effectiveDates");

        if (effectiveDates != null) {
            setEffectiveDates(effectiveDates);
        }

        String notes = (String) attributes.get("notes");

        if (notes != null) {
            setNotes(notes);
        }

        String itemQualifierValue = (String) attributes.get(
                "itemQualifierValue");

        if (itemQualifierValue != null) {
            setItemQualifierValue(itemQualifierValue);
        }

        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public int getItemQualifierSid() {
        return _itemQualifierSid;
    }

    @Override
    public void setItemQualifierSid(int itemQualifierSid) {
        _itemQualifierSid = itemQualifierSid;
    }

    @Override
    public String getSpecificEntityCode() {
        if (_specificEntityCode == null) {
            return StringPool.BLANK;
        } else {
            return _specificEntityCode;
        }
    }

    @Override
    public void setSpecificEntityCode(String specificEntityCode) {
        _specificEntityCode = specificEntityCode;
    }

    @Override
    public String getItemQualifierName() {
        if (_itemQualifierName == null) {
            return StringPool.BLANK;
        } else {
            return _itemQualifierName;
        }
    }

    @Override
    public void setItemQualifierName(String itemQualifierName) {
        _columnBitmask |= ITEMQUALIFIERNAME_COLUMN_BITMASK;

        if (_originalItemQualifierName == null) {
            _originalItemQualifierName = _itemQualifierName;
        }

        _itemQualifierName = itemQualifierName;
    }

    public String getOriginalItemQualifierName() {
        return GetterUtil.getString(_originalItemQualifierName);
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getEffectiveDates() {
        if (_effectiveDates == null) {
            return StringPool.BLANK;
        } else {
            return _effectiveDates;
        }
    }

    @Override
    public void setEffectiveDates(String effectiveDates) {
        _effectiveDates = effectiveDates;
    }

    @Override
    public String getNotes() {
        if (_notes == null) {
            return StringPool.BLANK;
        } else {
            return _notes;
        }
    }

    @Override
    public void setNotes(String notes) {
        _notes = notes;
    }

    @Override
    public String getItemQualifierValue() {
        if (_itemQualifierValue == null) {
            return StringPool.BLANK;
        } else {
            return _itemQualifierValue;
        }
    }

    @Override
    public void setItemQualifierValue(String itemQualifierValue) {
        _columnBitmask |= ITEMQUALIFIERVALUE_COLUMN_BITMASK;

        if (_originalItemQualifierValue == null) {
            _originalItemQualifierValue = _itemQualifierValue;
        }

        _itemQualifierValue = itemQualifierValue;
    }

    public String getOriginalItemQualifierValue() {
        return GetterUtil.getString(_originalItemQualifierValue);
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ItemQualifier toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ItemQualifier) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ItemQualifierImpl itemQualifierImpl = new ItemQualifierImpl();

        itemQualifierImpl.setCreatedBy(getCreatedBy());
        itemQualifierImpl.setItemQualifierSid(getItemQualifierSid());
        itemQualifierImpl.setSpecificEntityCode(getSpecificEntityCode());
        itemQualifierImpl.setItemQualifierName(getItemQualifierName());
        itemQualifierImpl.setModifiedBy(getModifiedBy());
        itemQualifierImpl.setCreatedDate(getCreatedDate());
        itemQualifierImpl.setBatchId(getBatchId());
        itemQualifierImpl.setModifiedDate(getModifiedDate());
        itemQualifierImpl.setEffectiveDates(getEffectiveDates());
        itemQualifierImpl.setNotes(getNotes());
        itemQualifierImpl.setItemQualifierValue(getItemQualifierValue());
        itemQualifierImpl.setRecordLockStatus(getRecordLockStatus());
        itemQualifierImpl.setSource(getSource());
        itemQualifierImpl.setInboundStatus(getInboundStatus());

        itemQualifierImpl.resetOriginalValues();

        return itemQualifierImpl;
    }

    @Override
    public int compareTo(ItemQualifier itemQualifier) {
        int primaryKey = itemQualifier.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ItemQualifier)) {
            return false;
        }

        ItemQualifier itemQualifier = (ItemQualifier) obj;

        int primaryKey = itemQualifier.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ItemQualifierModelImpl itemQualifierModelImpl = this;

        itemQualifierModelImpl._originalItemQualifierName = itemQualifierModelImpl._itemQualifierName;

        itemQualifierModelImpl._originalItemQualifierValue = itemQualifierModelImpl._itemQualifierValue;

        itemQualifierModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ItemQualifier> toCacheModel() {
        ItemQualifierCacheModel itemQualifierCacheModel = new ItemQualifierCacheModel();

        itemQualifierCacheModel.createdBy = getCreatedBy();

        itemQualifierCacheModel.itemQualifierSid = getItemQualifierSid();

        itemQualifierCacheModel.specificEntityCode = getSpecificEntityCode();

        String specificEntityCode = itemQualifierCacheModel.specificEntityCode;

        if ((specificEntityCode != null) && (specificEntityCode.length() == 0)) {
            itemQualifierCacheModel.specificEntityCode = null;
        }

        itemQualifierCacheModel.itemQualifierName = getItemQualifierName();

        String itemQualifierName = itemQualifierCacheModel.itemQualifierName;

        if ((itemQualifierName != null) && (itemQualifierName.length() == 0)) {
            itemQualifierCacheModel.itemQualifierName = null;
        }

        itemQualifierCacheModel.modifiedBy = getModifiedBy();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            itemQualifierCacheModel.createdDate = createdDate.getTime();
        } else {
            itemQualifierCacheModel.createdDate = Long.MIN_VALUE;
        }

        itemQualifierCacheModel.batchId = getBatchId();

        String batchId = itemQualifierCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            itemQualifierCacheModel.batchId = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            itemQualifierCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            itemQualifierCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        itemQualifierCacheModel.effectiveDates = getEffectiveDates();

        String effectiveDates = itemQualifierCacheModel.effectiveDates;

        if ((effectiveDates != null) && (effectiveDates.length() == 0)) {
            itemQualifierCacheModel.effectiveDates = null;
        }

        itemQualifierCacheModel.notes = getNotes();

        String notes = itemQualifierCacheModel.notes;

        if ((notes != null) && (notes.length() == 0)) {
            itemQualifierCacheModel.notes = null;
        }

        itemQualifierCacheModel.itemQualifierValue = getItemQualifierValue();

        String itemQualifierValue = itemQualifierCacheModel.itemQualifierValue;

        if ((itemQualifierValue != null) && (itemQualifierValue.length() == 0)) {
            itemQualifierCacheModel.itemQualifierValue = null;
        }

        itemQualifierCacheModel.recordLockStatus = getRecordLockStatus();

        itemQualifierCacheModel.source = getSource();

        String source = itemQualifierCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            itemQualifierCacheModel.source = null;
        }

        itemQualifierCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = itemQualifierCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            itemQualifierCacheModel.inboundStatus = null;
        }

        return itemQualifierCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(29);

        sb.append("{createdBy=");
        sb.append(getCreatedBy());
        sb.append(", itemQualifierSid=");
        sb.append(getItemQualifierSid());
        sb.append(", specificEntityCode=");
        sb.append(getSpecificEntityCode());
        sb.append(", itemQualifierName=");
        sb.append(getItemQualifierName());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", effectiveDates=");
        sb.append(getEffectiveDates());
        sb.append(", notes=");
        sb.append(getNotes());
        sb.append(", itemQualifierValue=");
        sb.append(getItemQualifierValue());
        sb.append(", recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(46);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.ItemQualifier");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemQualifierSid</column-name><column-value><![CDATA[");
        sb.append(getItemQualifierSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>specificEntityCode</column-name><column-value><![CDATA[");
        sb.append(getSpecificEntityCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemQualifierName</column-name><column-value><![CDATA[");
        sb.append(getItemQualifierName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>effectiveDates</column-name><column-value><![CDATA[");
        sb.append(getEffectiveDates());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>notes</column-name><column-value><![CDATA[");
        sb.append(getNotes());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemQualifierValue</column-name><column-value><![CDATA[");
        sb.append(getItemQualifierValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
