/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.CompanyQualifier;
import com.stpl.app.model.CompanyQualifierModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CompanyQualifier service. Represents a row in the &quot;COMPANY_QUALIFIER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CompanyQualifierModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CompanyQualifierImpl}.
 * </p>
 *
 * @author
 * @see CompanyQualifierImpl
 * @see CompanyQualifier
 * @see CompanyQualifierModel
 * @generated
 */
@ProviderType
public class CompanyQualifierModelImpl extends BaseModelImpl<CompanyQualifier>
	implements CompanyQualifierModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a company qualifier model instance should use the {@link CompanyQualifier} interface instead.
	 */
	public static final String TABLE_NAME = "COMPANY_QUALIFIER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "RECORD_LOCK_STATUS", Types.BOOLEAN },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.INTEGER },
			{ "SOURCE", Types.VARCHAR },
			{ "COMPANY_QUALIFIER_VALUE", Types.VARCHAR },
			{ "BATCH_ID", Types.VARCHAR },
			{ "COMPANY_QUALIFIER_SID", Types.INTEGER },
			{ "COMPANY_QUALIFIER_NAME", Types.VARCHAR },
			{ "EFFECTIVE_DATES", Types.VARCHAR },
			{ "NOTES", Types.VARCHAR },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "INBOUND_STATUS", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("RECORD_LOCK_STATUS", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COMPANY_QUALIFIER_VALUE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COMPANY_QUALIFIER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("COMPANY_QUALIFIER_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("EFFECTIVE_DATES", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NOTES", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table COMPANY_QUALIFIER (RECORD_LOCK_STATUS BOOLEAN,CREATED_DATE DATE null,CREATED_BY INTEGER,SOURCE VARCHAR(75) null,COMPANY_QUALIFIER_VALUE VARCHAR(75) null,BATCH_ID VARCHAR(75) null,COMPANY_QUALIFIER_SID INTEGER not null primary key IDENTITY,COMPANY_QUALIFIER_NAME VARCHAR(75) null,EFFECTIVE_DATES VARCHAR(75) null,NOTES VARCHAR(75) null,MODIFIED_BY INTEGER,INBOUND_STATUS VARCHAR(75) null,MODIFIED_DATE DATE null)";
	public static final String TABLE_SQL_DROP = "drop table COMPANY_QUALIFIER";
	public static final String ORDER_BY_JPQL = " ORDER BY companyQualifier.companyQualifierSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY COMPANY_QUALIFIER.COMPANY_QUALIFIER_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.CompanyQualifier"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.CompanyQualifier"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.stpl.app.model.CompanyQualifier"),
			true);
	public static final long COMPANYQUALIFIERNAME_COLUMN_BITMASK = 1L;
	public static final long COMPANYQUALIFIERSID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.CompanyQualifier"));

	public CompanyQualifierModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _companyQualifierSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setCompanyQualifierSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _companyQualifierSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CompanyQualifier.class;
	}

	@Override
	public String getModelClassName() {
		return CompanyQualifier.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("recordLockStatus", getRecordLockStatus());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("source", getSource());
		attributes.put("companyQualifierValue", getCompanyQualifierValue());
		attributes.put("batchId", getBatchId());
		attributes.put("companyQualifierSid", getCompanyQualifierSid());
		attributes.put("companyQualifierName", getCompanyQualifierName());
		attributes.put("effectiveDates", getEffectiveDates());
		attributes.put("notes", getNotes());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("inboundStatus", getInboundStatus());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Boolean recordLockStatus = (Boolean)attributes.get("recordLockStatus");

		if (recordLockStatus != null) {
			setRecordLockStatus(recordLockStatus);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String companyQualifierValue = (String)attributes.get(
				"companyQualifierValue");

		if (companyQualifierValue != null) {
			setCompanyQualifierValue(companyQualifierValue);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		Integer companyQualifierSid = (Integer)attributes.get(
				"companyQualifierSid");

		if (companyQualifierSid != null) {
			setCompanyQualifierSid(companyQualifierSid);
		}

		String companyQualifierName = (String)attributes.get(
				"companyQualifierName");

		if (companyQualifierName != null) {
			setCompanyQualifierName(companyQualifierName);
		}

		String effectiveDates = (String)attributes.get("effectiveDates");

		if (effectiveDates != null) {
			setEffectiveDates(effectiveDates);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public boolean getRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public boolean isRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public void setRecordLockStatus(boolean recordLockStatus) {
		_recordLockStatus = recordLockStatus;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getCompanyQualifierValue() {
		if (_companyQualifierValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyQualifierValue;
		}
	}

	@Override
	public void setCompanyQualifierValue(String companyQualifierValue) {
		_companyQualifierValue = companyQualifierValue;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public int getCompanyQualifierSid() {
		return _companyQualifierSid;
	}

	@Override
	public void setCompanyQualifierSid(int companyQualifierSid) {
		_companyQualifierSid = companyQualifierSid;
	}

	@Override
	public String getCompanyQualifierName() {
		if (_companyQualifierName == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyQualifierName;
		}
	}

	@Override
	public void setCompanyQualifierName(String companyQualifierName) {
		_columnBitmask |= COMPANYQUALIFIERNAME_COLUMN_BITMASK;

		if (_originalCompanyQualifierName == null) {
			_originalCompanyQualifierName = _companyQualifierName;
		}

		_companyQualifierName = companyQualifierName;
	}

	public String getOriginalCompanyQualifierName() {
		return GetterUtil.getString(_originalCompanyQualifierName);
	}

	@Override
	public String getEffectiveDates() {
		if (_effectiveDates == null) {
			return StringPool.BLANK;
		}
		else {
			return _effectiveDates;
		}
	}

	@Override
	public void setEffectiveDates(String effectiveDates) {
		_effectiveDates = effectiveDates;
	}

	@Override
	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public CompanyQualifier toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CompanyQualifier)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CompanyQualifierImpl companyQualifierImpl = new CompanyQualifierImpl();

		companyQualifierImpl.setRecordLockStatus(getRecordLockStatus());
		companyQualifierImpl.setCreatedDate(getCreatedDate());
		companyQualifierImpl.setCreatedBy(getCreatedBy());
		companyQualifierImpl.setSource(getSource());
		companyQualifierImpl.setCompanyQualifierValue(getCompanyQualifierValue());
		companyQualifierImpl.setBatchId(getBatchId());
		companyQualifierImpl.setCompanyQualifierSid(getCompanyQualifierSid());
		companyQualifierImpl.setCompanyQualifierName(getCompanyQualifierName());
		companyQualifierImpl.setEffectiveDates(getEffectiveDates());
		companyQualifierImpl.setNotes(getNotes());
		companyQualifierImpl.setModifiedBy(getModifiedBy());
		companyQualifierImpl.setInboundStatus(getInboundStatus());
		companyQualifierImpl.setModifiedDate(getModifiedDate());

		companyQualifierImpl.resetOriginalValues();

		return companyQualifierImpl;
	}

	@Override
	public int compareTo(CompanyQualifier companyQualifier) {
		int primaryKey = companyQualifier.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CompanyQualifier)) {
			return false;
		}

		CompanyQualifier companyQualifier = (CompanyQualifier)obj;

		int primaryKey = companyQualifier.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CompanyQualifierModelImpl companyQualifierModelImpl = this;

		companyQualifierModelImpl._originalCompanyQualifierName = companyQualifierModelImpl._companyQualifierName;

		companyQualifierModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CompanyQualifier> toCacheModel() {
		CompanyQualifierCacheModel companyQualifierCacheModel = new CompanyQualifierCacheModel();

		companyQualifierCacheModel.recordLockStatus = getRecordLockStatus();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			companyQualifierCacheModel.createdDate = createdDate.getTime();
		}
		else {
			companyQualifierCacheModel.createdDate = Long.MIN_VALUE;
		}

		companyQualifierCacheModel.createdBy = getCreatedBy();

		companyQualifierCacheModel.source = getSource();

		String source = companyQualifierCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			companyQualifierCacheModel.source = null;
		}

		companyQualifierCacheModel.companyQualifierValue = getCompanyQualifierValue();

		String companyQualifierValue = companyQualifierCacheModel.companyQualifierValue;

		if ((companyQualifierValue != null) &&
				(companyQualifierValue.length() == 0)) {
			companyQualifierCacheModel.companyQualifierValue = null;
		}

		companyQualifierCacheModel.batchId = getBatchId();

		String batchId = companyQualifierCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			companyQualifierCacheModel.batchId = null;
		}

		companyQualifierCacheModel.companyQualifierSid = getCompanyQualifierSid();

		companyQualifierCacheModel.companyQualifierName = getCompanyQualifierName();

		String companyQualifierName = companyQualifierCacheModel.companyQualifierName;

		if ((companyQualifierName != null) &&
				(companyQualifierName.length() == 0)) {
			companyQualifierCacheModel.companyQualifierName = null;
		}

		companyQualifierCacheModel.effectiveDates = getEffectiveDates();

		String effectiveDates = companyQualifierCacheModel.effectiveDates;

		if ((effectiveDates != null) && (effectiveDates.length() == 0)) {
			companyQualifierCacheModel.effectiveDates = null;
		}

		companyQualifierCacheModel.notes = getNotes();

		String notes = companyQualifierCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			companyQualifierCacheModel.notes = null;
		}

		companyQualifierCacheModel.modifiedBy = getModifiedBy();

		companyQualifierCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = companyQualifierCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			companyQualifierCacheModel.inboundStatus = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			companyQualifierCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			companyQualifierCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return companyQualifierCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{recordLockStatus=");
		sb.append(getRecordLockStatus());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", companyQualifierValue=");
		sb.append(getCompanyQualifierValue());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", companyQualifierSid=");
		sb.append(getCompanyQualifierSid());
		sb.append(", companyQualifierName=");
		sb.append(getCompanyQualifierName());
		sb.append(", effectiveDates=");
		sb.append(getEffectiveDates());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.CompanyQualifier");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
		sb.append(getRecordLockStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyQualifierValue</column-name><column-value><![CDATA[");
		sb.append(getCompanyQualifierValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyQualifierSid</column-name><column-value><![CDATA[");
		sb.append(getCompanyQualifierSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyQualifierName</column-name><column-value><![CDATA[");
		sb.append(getCompanyQualifierName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectiveDates</column-name><column-value><![CDATA[");
		sb.append(getEffectiveDates());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CompanyQualifier.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CompanyQualifier.class
		};
	private boolean _recordLockStatus;
	private Date _createdDate;
	private int _createdBy;
	private String _source;
	private String _companyQualifierValue;
	private String _batchId;
	private int _companyQualifierSid;
	private String _companyQualifierName;
	private String _originalCompanyQualifierName;
	private String _effectiveDates;
	private String _notes;
	private int _modifiedBy;
	private String _inboundStatus;
	private Date _modifiedDate;
	private long _columnBitmask;
	private CompanyQualifier _escapedModel;
}