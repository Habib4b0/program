/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.RelationshipBuilder;
import com.stpl.app.model.RelationshipBuilderModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RelationshipBuilder service. Represents a row in the &quot;RELATIONSHIP_BUILDER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RelationshipBuilderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RelationshipBuilderImpl}.
 * </p>
 *
 * @author
 * @see RelationshipBuilderImpl
 * @see RelationshipBuilder
 * @see RelationshipBuilderModel
 * @generated
 */
@ProviderType
public class RelationshipBuilderModelImpl extends BaseModelImpl<RelationshipBuilder>
	implements RelationshipBuilderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a relationship builder model instance should use the {@link RelationshipBuilder} interface instead.
	 */
	public static final String TABLE_NAME = "RELATIONSHIP_BUILDER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "START_DATE", Types.TIMESTAMP },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.INTEGER },
			{ "RELATIONSHIP_DESCRIPTION", Types.VARCHAR },
			{ "HIERARCHY_DEFINITION_SID", Types.INTEGER },
			{ "VERSION_NO", Types.INTEGER },
			{ "RELATIONSHIP_NAME", Types.VARCHAR },
			{ "RELATIONSHIP_BUILDER_SID", Types.INTEGER },
			{ "HIERARCHY_VERSION", Types.INTEGER },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "DEDUCTION_RELATION", Types.INTEGER },
			{ "RELATIONSHIP_TYPE", Types.INTEGER },
			{ "BUILD_TYPE", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RELATIONSHIP_DESCRIPTION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("HIERARCHY_DEFINITION_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("VERSION_NO", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RELATIONSHIP_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RELATIONSHIP_BUILDER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("HIERARCHY_VERSION", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("DEDUCTION_RELATION", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RELATIONSHIP_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BUILD_TYPE", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table RELATIONSHIP_BUILDER (START_DATE DATE null,CREATED_DATE DATE null,CREATED_BY INTEGER,RELATIONSHIP_DESCRIPTION VARCHAR(75) null,HIERARCHY_DEFINITION_SID INTEGER,VERSION_NO INTEGER,RELATIONSHIP_NAME VARCHAR(75) null,RELATIONSHIP_BUILDER_SID INTEGER not null primary key IDENTITY,HIERARCHY_VERSION INTEGER,MODIFIED_BY INTEGER,MODIFIED_DATE DATE null,DEDUCTION_RELATION INTEGER,RELATIONSHIP_TYPE INTEGER,BUILD_TYPE VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table RELATIONSHIP_BUILDER";
	public static final String ORDER_BY_JPQL = " ORDER BY relationshipBuilder.relationshipBuilderSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY RELATIONSHIP_BUILDER.RELATIONSHIP_BUILDER_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.RelationshipBuilder"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.RelationshipBuilder"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.RelationshipBuilder"));

	public RelationshipBuilderModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _relationshipBuilderSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setRelationshipBuilderSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _relationshipBuilderSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RelationshipBuilder.class;
	}

	@Override
	public String getModelClassName() {
		return RelationshipBuilder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("startDate", getStartDate());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("relationshipDescription", getRelationshipDescription());
		attributes.put("hierarchyDefinitionSid", getHierarchyDefinitionSid());
		attributes.put("versionNo", getVersionNo());
		attributes.put("relationshipName", getRelationshipName());
		attributes.put("relationshipBuilderSid", getRelationshipBuilderSid());
		attributes.put("hierarchyVersion", getHierarchyVersion());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("deductionRelation", getDeductionRelation());
		attributes.put("relationshipType", getRelationshipType());
		attributes.put("buildType", getBuildType());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String relationshipDescription = (String)attributes.get(
				"relationshipDescription");

		if (relationshipDescription != null) {
			setRelationshipDescription(relationshipDescription);
		}

		Integer hierarchyDefinitionSid = (Integer)attributes.get(
				"hierarchyDefinitionSid");

		if (hierarchyDefinitionSid != null) {
			setHierarchyDefinitionSid(hierarchyDefinitionSid);
		}

		Integer versionNo = (Integer)attributes.get("versionNo");

		if (versionNo != null) {
			setVersionNo(versionNo);
		}

		String relationshipName = (String)attributes.get("relationshipName");

		if (relationshipName != null) {
			setRelationshipName(relationshipName);
		}

		Integer relationshipBuilderSid = (Integer)attributes.get(
				"relationshipBuilderSid");

		if (relationshipBuilderSid != null) {
			setRelationshipBuilderSid(relationshipBuilderSid);
		}

		Integer hierarchyVersion = (Integer)attributes.get("hierarchyVersion");

		if (hierarchyVersion != null) {
			setHierarchyVersion(hierarchyVersion);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer deductionRelation = (Integer)attributes.get("deductionRelation");

		if (deductionRelation != null) {
			setDeductionRelation(deductionRelation);
		}

		Integer relationshipType = (Integer)attributes.get("relationshipType");

		if (relationshipType != null) {
			setRelationshipType(relationshipType);
		}

		String buildType = (String)attributes.get("buildType");

		if (buildType != null) {
			setBuildType(buildType);
		}
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getRelationshipDescription() {
		if (_relationshipDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _relationshipDescription;
		}
	}

	@Override
	public void setRelationshipDescription(String relationshipDescription) {
		_relationshipDescription = relationshipDescription;
	}

	@Override
	public int getHierarchyDefinitionSid() {
		return _hierarchyDefinitionSid;
	}

	@Override
	public void setHierarchyDefinitionSid(int hierarchyDefinitionSid) {
		_hierarchyDefinitionSid = hierarchyDefinitionSid;
	}

	@Override
	public int getVersionNo() {
		return _versionNo;
	}

	@Override
	public void setVersionNo(int versionNo) {
		_versionNo = versionNo;
	}

	@Override
	public String getRelationshipName() {
		if (_relationshipName == null) {
			return StringPool.BLANK;
		}
		else {
			return _relationshipName;
		}
	}

	@Override
	public void setRelationshipName(String relationshipName) {
		_relationshipName = relationshipName;
	}

	@Override
	public int getRelationshipBuilderSid() {
		return _relationshipBuilderSid;
	}

	@Override
	public void setRelationshipBuilderSid(int relationshipBuilderSid) {
		_relationshipBuilderSid = relationshipBuilderSid;
	}

	@Override
	public int getHierarchyVersion() {
		return _hierarchyVersion;
	}

	@Override
	public void setHierarchyVersion(int hierarchyVersion) {
		_hierarchyVersion = hierarchyVersion;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public int getDeductionRelation() {
		return _deductionRelation;
	}

	@Override
	public void setDeductionRelation(int deductionRelation) {
		_deductionRelation = deductionRelation;
	}

	@Override
	public int getRelationshipType() {
		return _relationshipType;
	}

	@Override
	public void setRelationshipType(int relationshipType) {
		_relationshipType = relationshipType;
	}

	@Override
	public String getBuildType() {
		if (_buildType == null) {
			return StringPool.BLANK;
		}
		else {
			return _buildType;
		}
	}

	@Override
	public void setBuildType(String buildType) {
		_buildType = buildType;
	}

	@Override
	public RelationshipBuilder toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RelationshipBuilder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RelationshipBuilderImpl relationshipBuilderImpl = new RelationshipBuilderImpl();

		relationshipBuilderImpl.setStartDate(getStartDate());
		relationshipBuilderImpl.setCreatedDate(getCreatedDate());
		relationshipBuilderImpl.setCreatedBy(getCreatedBy());
		relationshipBuilderImpl.setRelationshipDescription(getRelationshipDescription());
		relationshipBuilderImpl.setHierarchyDefinitionSid(getHierarchyDefinitionSid());
		relationshipBuilderImpl.setVersionNo(getVersionNo());
		relationshipBuilderImpl.setRelationshipName(getRelationshipName());
		relationshipBuilderImpl.setRelationshipBuilderSid(getRelationshipBuilderSid());
		relationshipBuilderImpl.setHierarchyVersion(getHierarchyVersion());
		relationshipBuilderImpl.setModifiedBy(getModifiedBy());
		relationshipBuilderImpl.setModifiedDate(getModifiedDate());
		relationshipBuilderImpl.setDeductionRelation(getDeductionRelation());
		relationshipBuilderImpl.setRelationshipType(getRelationshipType());
		relationshipBuilderImpl.setBuildType(getBuildType());

		relationshipBuilderImpl.resetOriginalValues();

		return relationshipBuilderImpl;
	}

	@Override
	public int compareTo(RelationshipBuilder relationshipBuilder) {
		int primaryKey = relationshipBuilder.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RelationshipBuilder)) {
			return false;
		}

		RelationshipBuilder relationshipBuilder = (RelationshipBuilder)obj;

		int primaryKey = relationshipBuilder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<RelationshipBuilder> toCacheModel() {
		RelationshipBuilderCacheModel relationshipBuilderCacheModel = new RelationshipBuilderCacheModel();

		Date startDate = getStartDate();

		if (startDate != null) {
			relationshipBuilderCacheModel.startDate = startDate.getTime();
		}
		else {
			relationshipBuilderCacheModel.startDate = Long.MIN_VALUE;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			relationshipBuilderCacheModel.createdDate = createdDate.getTime();
		}
		else {
			relationshipBuilderCacheModel.createdDate = Long.MIN_VALUE;
		}

		relationshipBuilderCacheModel.createdBy = getCreatedBy();

		relationshipBuilderCacheModel.relationshipDescription = getRelationshipDescription();

		String relationshipDescription = relationshipBuilderCacheModel.relationshipDescription;

		if ((relationshipDescription != null) &&
				(relationshipDescription.length() == 0)) {
			relationshipBuilderCacheModel.relationshipDescription = null;
		}

		relationshipBuilderCacheModel.hierarchyDefinitionSid = getHierarchyDefinitionSid();

		relationshipBuilderCacheModel.versionNo = getVersionNo();

		relationshipBuilderCacheModel.relationshipName = getRelationshipName();

		String relationshipName = relationshipBuilderCacheModel.relationshipName;

		if ((relationshipName != null) && (relationshipName.length() == 0)) {
			relationshipBuilderCacheModel.relationshipName = null;
		}

		relationshipBuilderCacheModel.relationshipBuilderSid = getRelationshipBuilderSid();

		relationshipBuilderCacheModel.hierarchyVersion = getHierarchyVersion();

		relationshipBuilderCacheModel.modifiedBy = getModifiedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			relationshipBuilderCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			relationshipBuilderCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		relationshipBuilderCacheModel.deductionRelation = getDeductionRelation();

		relationshipBuilderCacheModel.relationshipType = getRelationshipType();

		relationshipBuilderCacheModel.buildType = getBuildType();

		String buildType = relationshipBuilderCacheModel.buildType;

		if ((buildType != null) && (buildType.length() == 0)) {
			relationshipBuilderCacheModel.buildType = null;
		}

		return relationshipBuilderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{startDate=");
		sb.append(getStartDate());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", relationshipDescription=");
		sb.append(getRelationshipDescription());
		sb.append(", hierarchyDefinitionSid=");
		sb.append(getHierarchyDefinitionSid());
		sb.append(", versionNo=");
		sb.append(getVersionNo());
		sb.append(", relationshipName=");
		sb.append(getRelationshipName());
		sb.append(", relationshipBuilderSid=");
		sb.append(getRelationshipBuilderSid());
		sb.append(", hierarchyVersion=");
		sb.append(getHierarchyVersion());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", deductionRelation=");
		sb.append(getDeductionRelation());
		sb.append(", relationshipType=");
		sb.append(getRelationshipType());
		sb.append(", buildType=");
		sb.append(getBuildType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.RelationshipBuilder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relationshipDescription</column-name><column-value><![CDATA[");
		sb.append(getRelationshipDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hierarchyDefinitionSid</column-name><column-value><![CDATA[");
		sb.append(getHierarchyDefinitionSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionNo</column-name><column-value><![CDATA[");
		sb.append(getVersionNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relationshipName</column-name><column-value><![CDATA[");
		sb.append(getRelationshipName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relationshipBuilderSid</column-name><column-value><![CDATA[");
		sb.append(getRelationshipBuilderSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hierarchyVersion</column-name><column-value><![CDATA[");
		sb.append(getHierarchyVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionRelation</column-name><column-value><![CDATA[");
		sb.append(getDeductionRelation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relationshipType</column-name><column-value><![CDATA[");
		sb.append(getRelationshipType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>buildType</column-name><column-value><![CDATA[");
		sb.append(getBuildType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RelationshipBuilder.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RelationshipBuilder.class
		};
	private Date _startDate;
	private Date _createdDate;
	private int _createdBy;
	private String _relationshipDescription;
	private int _hierarchyDefinitionSid;
	private int _versionNo;
	private String _relationshipName;
	private int _relationshipBuilderSid;
	private int _hierarchyVersion;
	private int _modifiedBy;
	private Date _modifiedDate;
	private int _deductionRelation;
	private int _relationshipType;
	private String _buildType;
	private RelationshipBuilder _escapedModel;
}