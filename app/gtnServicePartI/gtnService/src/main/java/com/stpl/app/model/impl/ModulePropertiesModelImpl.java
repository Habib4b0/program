/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.ModuleProperties;
import com.stpl.app.model.ModulePropertiesModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ModuleProperties service. Represents a row in the &quot;MODULE_PROPERTIES&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ModulePropertiesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ModulePropertiesImpl}.
 * </p>
 *
 * @author
 * @see ModulePropertiesImpl
 * @see ModuleProperties
 * @see ModulePropertiesModel
 * @generated
 */
@ProviderType
public class ModulePropertiesModelImpl extends BaseModelImpl<ModuleProperties>
	implements ModulePropertiesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a module properties model instance should use the {@link ModuleProperties} interface instead.
	 */
	public static final String TABLE_NAME = "MODULE_PROPERTIES";
	public static final Object[][] TABLE_COLUMNS = {
			{ "MODULE_PROPERTY_SID", Types.INTEGER },
			{ "CREATED_BY", Types.INTEGER },
			{ "MODULE_NAME", Types.VARCHAR },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "NULL_FLAG", Types.VARCHAR },
			{ "VERSION_NO", Types.INTEGER },
			{ "MODULE_SUBMODULE_SID", Types.INTEGER },
			{ "CATEGORY_NAME", Types.VARCHAR },
			{ "PROPERTY_NAME", Types.VARCHAR },
			{ "DISPLAY_NAME", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("MODULE_PROPERTY_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODULE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("NULL_FLAG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VERSION_NO", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODULE_SUBMODULE_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CATEGORY_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROPERTY_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DISPLAY_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table MODULE_PROPERTIES (MODULE_PROPERTY_SID INTEGER not null primary key IDENTITY,CREATED_BY INTEGER,MODULE_NAME VARCHAR(75) null,MODIFIED_BY INTEGER,CREATED_DATE DATE null,NULL_FLAG VARCHAR(75) null,VERSION_NO INTEGER,MODULE_SUBMODULE_SID INTEGER,CATEGORY_NAME VARCHAR(75) null,PROPERTY_NAME VARCHAR(75) null,DISPLAY_NAME VARCHAR(75) null,MODIFIED_DATE DATE null)";
	public static final String TABLE_SQL_DROP = "drop table MODULE_PROPERTIES";
	public static final String ORDER_BY_JPQL = " ORDER BY moduleProperties.modulePropertySid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MODULE_PROPERTIES.MODULE_PROPERTY_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.ModuleProperties"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.ModuleProperties"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.ModuleProperties"));

	public ModulePropertiesModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _modulePropertySid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setModulePropertySid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _modulePropertySid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ModuleProperties.class;
	}

	@Override
	public String getModelClassName() {
		return ModuleProperties.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("modulePropertySid", getModulePropertySid());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("moduleName", getModuleName());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("nullFlag", getNullFlag());
		attributes.put("versionNo", getVersionNo());
		attributes.put("moduleSubmoduleSid", getModuleSubmoduleSid());
		attributes.put("categoryName", getCategoryName());
		attributes.put("propertyName", getPropertyName());
		attributes.put("displayName", getDisplayName());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer modulePropertySid = (Integer)attributes.get("modulePropertySid");

		if (modulePropertySid != null) {
			setModulePropertySid(modulePropertySid);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String moduleName = (String)attributes.get("moduleName");

		if (moduleName != null) {
			setModuleName(moduleName);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String nullFlag = (String)attributes.get("nullFlag");

		if (nullFlag != null) {
			setNullFlag(nullFlag);
		}

		Integer versionNo = (Integer)attributes.get("versionNo");

		if (versionNo != null) {
			setVersionNo(versionNo);
		}

		Integer moduleSubmoduleSid = (Integer)attributes.get(
				"moduleSubmoduleSid");

		if (moduleSubmoduleSid != null) {
			setModuleSubmoduleSid(moduleSubmoduleSid);
		}

		String categoryName = (String)attributes.get("categoryName");

		if (categoryName != null) {
			setCategoryName(categoryName);
		}

		String propertyName = (String)attributes.get("propertyName");

		if (propertyName != null) {
			setPropertyName(propertyName);
		}

		String displayName = (String)attributes.get("displayName");

		if (displayName != null) {
			setDisplayName(displayName);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public int getModulePropertySid() {
		return _modulePropertySid;
	}

	@Override
	public void setModulePropertySid(int modulePropertySid) {
		_modulePropertySid = modulePropertySid;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getModuleName() {
		if (_moduleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _moduleName;
		}
	}

	@Override
	public void setModuleName(String moduleName) {
		_moduleName = moduleName;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getNullFlag() {
		if (_nullFlag == null) {
			return StringPool.BLANK;
		}
		else {
			return _nullFlag;
		}
	}

	@Override
	public void setNullFlag(String nullFlag) {
		_nullFlag = nullFlag;
	}

	@Override
	public int getVersionNo() {
		return _versionNo;
	}

	@Override
	public void setVersionNo(int versionNo) {
		_versionNo = versionNo;
	}

	@Override
	public int getModuleSubmoduleSid() {
		return _moduleSubmoduleSid;
	}

	@Override
	public void setModuleSubmoduleSid(int moduleSubmoduleSid) {
		_moduleSubmoduleSid = moduleSubmoduleSid;
	}

	@Override
	public String getCategoryName() {
		if (_categoryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryName;
		}
	}

	@Override
	public void setCategoryName(String categoryName) {
		_categoryName = categoryName;
	}

	@Override
	public String getPropertyName() {
		if (_propertyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _propertyName;
		}
	}

	@Override
	public void setPropertyName(String propertyName) {
		_propertyName = propertyName;
	}

	@Override
	public String getDisplayName() {
		if (_displayName == null) {
			return StringPool.BLANK;
		}
		else {
			return _displayName;
		}
	}

	@Override
	public void setDisplayName(String displayName) {
		_displayName = displayName;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public ModuleProperties toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ModuleProperties)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ModulePropertiesImpl modulePropertiesImpl = new ModulePropertiesImpl();

		modulePropertiesImpl.setModulePropertySid(getModulePropertySid());
		modulePropertiesImpl.setCreatedBy(getCreatedBy());
		modulePropertiesImpl.setModuleName(getModuleName());
		modulePropertiesImpl.setModifiedBy(getModifiedBy());
		modulePropertiesImpl.setCreatedDate(getCreatedDate());
		modulePropertiesImpl.setNullFlag(getNullFlag());
		modulePropertiesImpl.setVersionNo(getVersionNo());
		modulePropertiesImpl.setModuleSubmoduleSid(getModuleSubmoduleSid());
		modulePropertiesImpl.setCategoryName(getCategoryName());
		modulePropertiesImpl.setPropertyName(getPropertyName());
		modulePropertiesImpl.setDisplayName(getDisplayName());
		modulePropertiesImpl.setModifiedDate(getModifiedDate());

		modulePropertiesImpl.resetOriginalValues();

		return modulePropertiesImpl;
	}

	@Override
	public int compareTo(ModuleProperties moduleProperties) {
		int primaryKey = moduleProperties.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ModuleProperties)) {
			return false;
		}

		ModuleProperties moduleProperties = (ModuleProperties)obj;

		int primaryKey = moduleProperties.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ModuleProperties> toCacheModel() {
		ModulePropertiesCacheModel modulePropertiesCacheModel = new ModulePropertiesCacheModel();

		modulePropertiesCacheModel.modulePropertySid = getModulePropertySid();

		modulePropertiesCacheModel.createdBy = getCreatedBy();

		modulePropertiesCacheModel.moduleName = getModuleName();

		String moduleName = modulePropertiesCacheModel.moduleName;

		if ((moduleName != null) && (moduleName.length() == 0)) {
			modulePropertiesCacheModel.moduleName = null;
		}

		modulePropertiesCacheModel.modifiedBy = getModifiedBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			modulePropertiesCacheModel.createdDate = createdDate.getTime();
		}
		else {
			modulePropertiesCacheModel.createdDate = Long.MIN_VALUE;
		}

		modulePropertiesCacheModel.nullFlag = getNullFlag();

		String nullFlag = modulePropertiesCacheModel.nullFlag;

		if ((nullFlag != null) && (nullFlag.length() == 0)) {
			modulePropertiesCacheModel.nullFlag = null;
		}

		modulePropertiesCacheModel.versionNo = getVersionNo();

		modulePropertiesCacheModel.moduleSubmoduleSid = getModuleSubmoduleSid();

		modulePropertiesCacheModel.categoryName = getCategoryName();

		String categoryName = modulePropertiesCacheModel.categoryName;

		if ((categoryName != null) && (categoryName.length() == 0)) {
			modulePropertiesCacheModel.categoryName = null;
		}

		modulePropertiesCacheModel.propertyName = getPropertyName();

		String propertyName = modulePropertiesCacheModel.propertyName;

		if ((propertyName != null) && (propertyName.length() == 0)) {
			modulePropertiesCacheModel.propertyName = null;
		}

		modulePropertiesCacheModel.displayName = getDisplayName();

		String displayName = modulePropertiesCacheModel.displayName;

		if ((displayName != null) && (displayName.length() == 0)) {
			modulePropertiesCacheModel.displayName = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			modulePropertiesCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			modulePropertiesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return modulePropertiesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{modulePropertySid=");
		sb.append(getModulePropertySid());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", moduleName=");
		sb.append(getModuleName());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", nullFlag=");
		sb.append(getNullFlag());
		sb.append(", versionNo=");
		sb.append(getVersionNo());
		sb.append(", moduleSubmoduleSid=");
		sb.append(getModuleSubmoduleSid());
		sb.append(", categoryName=");
		sb.append(getCategoryName());
		sb.append(", propertyName=");
		sb.append(getPropertyName());
		sb.append(", displayName=");
		sb.append(getDisplayName());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.ModuleProperties");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>modulePropertySid</column-name><column-value><![CDATA[");
		sb.append(getModulePropertySid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moduleName</column-name><column-value><![CDATA[");
		sb.append(getModuleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nullFlag</column-name><column-value><![CDATA[");
		sb.append(getNullFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionNo</column-name><column-value><![CDATA[");
		sb.append(getVersionNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moduleSubmoduleSid</column-name><column-value><![CDATA[");
		sb.append(getModuleSubmoduleSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryName</column-name><column-value><![CDATA[");
		sb.append(getCategoryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>propertyName</column-name><column-value><![CDATA[");
		sb.append(getPropertyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayName</column-name><column-value><![CDATA[");
		sb.append(getDisplayName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ModuleProperties.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ModuleProperties.class
		};
	private int _modulePropertySid;
	private int _createdBy;
	private String _moduleName;
	private int _modifiedBy;
	private Date _createdDate;
	private String _nullFlag;
	private int _versionNo;
	private int _moduleSubmoduleSid;
	private String _categoryName;
	private String _propertyName;
	private String _displayName;
	private Date _modifiedDate;
	private ModuleProperties _escapedModel;
}