package com.stpl.app.parttwo.model.impl;

import com.stpl.app.parttwo.model.VwIvldAdjDemandForeActual;
import com.stpl.app.parttwo.model.VwIvldAdjDemandForeActualModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VwIvldAdjDemandForeActual service. Represents a row in the &quot;VW_IVLD_ADJ_DEMAND_FORE_ACTUAL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.parttwo.model.VwIvldAdjDemandForeActualModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VwIvldAdjDemandForeActualImpl}.
 * </p>
 *
 * @author
 * @see VwIvldAdjDemandForeActualImpl
 * @see com.stpl.app.parttwo.model.VwIvldAdjDemandForeActual
 * @see com.stpl.app.parttwo.model.VwIvldAdjDemandForeActualModel
 * @generated
 */
public class VwIvldAdjDemandForeActualModelImpl extends BaseModelImpl<VwIvldAdjDemandForeActual>
    implements VwIvldAdjDemandForeActualModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a vw ivld adj demand fore actual model instance should use the {@link com.stpl.app.parttwo.model.VwIvldAdjDemandForeActual} interface instead.
     */
    public static final String TABLE_NAME = "VW_IVLD_ADJ_DEMAND_FORE_ACTUAL";
    public static final Object[][] TABLE_COLUMNS = {
            { "FORECAST_VERSION", Types.VARCHAR },
            { "GROSS_UNITS", Types.VARCHAR },
            { "BUSINESS_UNIT_NO", Types.VARCHAR },
            { "YEAR", Types.VARCHAR },
            { "ITEM_ID", Types.VARCHAR },
            { "BRAND_NAME", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "ORGANIZATION_KEY", Types.VARCHAR },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "CREATED_BY", Types.VARCHAR },
            { "SOURCE", Types.VARCHAR },
            { "MARKET_SHARE_RATIO", Types.VARCHAR },
            { "BUSINESS_UNIT_NAME", Types.VARCHAR },
            { "ADD_CHG_DEL_INDICATOR", Types.VARCHAR },
            { "ITEM_IDENTIFIER", Types.VARCHAR },
            { "ERROR_CODE", Types.VARCHAR },
            { "MODIFIED_BY", Types.VARCHAR },
            { "MARKET_SHARE_UNITS", Types.VARCHAR },
            { "MONTH", Types.VARCHAR },
            { "INVENTORY_UNIT_CHANGE", Types.VARCHAR },
            { "REPROCESSED_FLAG", Types.VARCHAR },
            { "UNCAPTURED_UNITS_RATIO", Types.VARCHAR },
            { "REASON_FOR_FAILURE", Types.VARCHAR },
            { "ADJUSTED_DEMAND_FORECAST_INTF_ID", Types.VARCHAR },
            { "COUNTRY", Types.VARCHAR },
            { "FORECAST_TYPE", Types.VARCHAR },
            { "TOTAL_ADJUSTED_DEMAND_UNITS", Types.VARCHAR },
            { "BRAND_ID", Types.VARCHAR },
            { "IS_FORECAST", Types.VARCHAR },
            { "TOTAL_ADJUSTED_DEMAND_AMOUNT", Types.VARCHAR },
            { "UNCAPTURED_UNITS", Types.VARCHAR },
            { "GROSS_PRICE", Types.VARCHAR },
            { "GROSS_AMOUNT", Types.VARCHAR },
            { "ITEM_IDENTIFIER_CODE_QUALIFIER", Types.VARCHAR },
            { "BATCH_ID", Types.VARCHAR },
            { "ITEM_NAME", Types.VARCHAR },
            { "ERROR_FIELD", Types.VARCHAR },
            { "NET_SALES_PRICE", Types.VARCHAR },
            { "NET_SALES_AMOUNT", Types.VARCHAR },
            { "SEGMENT", Types.VARCHAR },
            { "FORECAST_NAME", Types.VARCHAR },
            { "IVLD_ADJUSTED_DEMAND_FORECAST_SID", Types.INTEGER },
            { "MARKET_SIZE_UNITS", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table VW_IVLD_ADJ_DEMAND_FORE_ACTUAL (FORECAST_VERSION VARCHAR(75) null,GROSS_UNITS VARCHAR(75) null,BUSINESS_UNIT_NO VARCHAR(75) null,YEAR VARCHAR(75) null,ITEM_ID VARCHAR(75) null,BRAND_NAME VARCHAR(75) null,MODIFIED_DATE DATE null,ORGANIZATION_KEY VARCHAR(75) null,CREATED_DATE DATE null,CREATED_BY VARCHAR(75) null,SOURCE VARCHAR(75) null,MARKET_SHARE_RATIO VARCHAR(75) null,BUSINESS_UNIT_NAME VARCHAR(75) null,ADD_CHG_DEL_INDICATOR VARCHAR(75) null,ITEM_IDENTIFIER VARCHAR(75) null,ERROR_CODE VARCHAR(75) null,MODIFIED_BY VARCHAR(75) null,MARKET_SHARE_UNITS VARCHAR(75) null,MONTH VARCHAR(75) null,INVENTORY_UNIT_CHANGE VARCHAR(75) null,REPROCESSED_FLAG VARCHAR(75) null,UNCAPTURED_UNITS_RATIO VARCHAR(75) null,REASON_FOR_FAILURE VARCHAR(75) null,ADJUSTED_DEMAND_FORECAST_INTF_ID VARCHAR(75) null,COUNTRY VARCHAR(75) null,FORECAST_TYPE VARCHAR(75) null,TOTAL_ADJUSTED_DEMAND_UNITS VARCHAR(75) null,BRAND_ID VARCHAR(75) null,IS_FORECAST VARCHAR(75) null,TOTAL_ADJUSTED_DEMAND_AMOUNT VARCHAR(75) null,UNCAPTURED_UNITS VARCHAR(75) null,GROSS_PRICE VARCHAR(75) null,GROSS_AMOUNT VARCHAR(75) null,ITEM_IDENTIFIER_CODE_QUALIFIER VARCHAR(75) null,BATCH_ID VARCHAR(75) null,ITEM_NAME VARCHAR(75) null,ERROR_FIELD VARCHAR(75) null,NET_SALES_PRICE VARCHAR(75) null,NET_SALES_AMOUNT VARCHAR(75) null,SEGMENT VARCHAR(75) null,FORECAST_NAME VARCHAR(75) null,IVLD_ADJUSTED_DEMAND_FORECAST_SID INTEGER not null primary key,MARKET_SIZE_UNITS VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table VW_IVLD_ADJ_DEMAND_FORE_ACTUAL";
    public static final String ORDER_BY_JPQL = " ORDER BY vwIvldAdjDemandForeActual.ivldAdjustedDemandForecastSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY VW_IVLD_ADJ_DEMAND_FORE_ACTUAL.IVLD_ADJUSTED_DEMAND_FORECAST_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.parttwo.model.VwIvldAdjDemandForeActual"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.parttwo.model.VwIvldAdjDemandForeActual"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.parttwo.model.VwIvldAdjDemandForeActual"));
    private static ClassLoader _classLoader = VwIvldAdjDemandForeActual.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            VwIvldAdjDemandForeActual.class
        };
    private String _forecastVersion;
    private String _grossUnits;
    private String _businessUnitNo;
    private String _year;
    private String _itemId;
    private String _brandName;
    private Date _modifiedDate;
    private String _organizationKey;
    private Date _createdDate;
    private String _createdBy;
    private String _source;
    private String _marketShareRatio;
    private String _businessUnitName;
    private String _addChgDelIndicator;
    private String _itemIdentifier;
    private String _errorCode;
    private String _modifiedBy;
    private String _marketShareUnits;
    private String _month;
    private String _inventoryUnitChange;
    private String _reprocessedFlag;
    private String _uncapturedUnitsRatio;
    private String _reasonForFailure;
    private String _adjustedDemandForecastIntfId;
    private String _country;
    private String _forecastType;
    private String _totalAdjustedDemandUnits;
    private String _brandId;
    private String _isForecast;
    private String _totalAdjustedDemandAmount;
    private String _uncapturedUnits;
    private String _grossPrice;
    private String _grossAmount;
    private String _itemIdentifierCodeQualifier;
    private String _batchId;
    private String _itemName;
    private String _errorField;
    private String _netSalesPrice;
    private String _netSalesAmount;
    private String _segment;
    private String _forecastName;
    private int _ivldAdjustedDemandForecastSid;
    private String _marketSizeUnits;
    private VwIvldAdjDemandForeActual _escapedModel;

    public VwIvldAdjDemandForeActualModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _ivldAdjustedDemandForecastSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setIvldAdjustedDemandForecastSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _ivldAdjustedDemandForecastSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return VwIvldAdjDemandForeActual.class;
    }

    @Override
    public String getModelClassName() {
        return VwIvldAdjDemandForeActual.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("forecastVersion", getForecastVersion());
        attributes.put("grossUnits", getGrossUnits());
        attributes.put("businessUnitNo", getBusinessUnitNo());
        attributes.put("year", getYear());
        attributes.put("itemId", getItemId());
        attributes.put("brandName", getBrandName());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("organizationKey", getOrganizationKey());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("source", getSource());
        attributes.put("marketShareRatio", getMarketShareRatio());
        attributes.put("businessUnitName", getBusinessUnitName());
        attributes.put("addChgDelIndicator", getAddChgDelIndicator());
        attributes.put("itemIdentifier", getItemIdentifier());
        attributes.put("errorCode", getErrorCode());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("marketShareUnits", getMarketShareUnits());
        attributes.put("month", getMonth());
        attributes.put("inventoryUnitChange", getInventoryUnitChange());
        attributes.put("reprocessedFlag", getReprocessedFlag());
        attributes.put("uncapturedUnitsRatio", getUncapturedUnitsRatio());
        attributes.put("reasonForFailure", getReasonForFailure());
        attributes.put("adjustedDemandForecastIntfId",
            getAdjustedDemandForecastIntfId());
        attributes.put("country", getCountry());
        attributes.put("forecastType", getForecastType());
        attributes.put("totalAdjustedDemandUnits", getTotalAdjustedDemandUnits());
        attributes.put("brandId", getBrandId());
        attributes.put("isForecast", getIsForecast());
        attributes.put("totalAdjustedDemandAmount",
            getTotalAdjustedDemandAmount());
        attributes.put("uncapturedUnits", getUncapturedUnits());
        attributes.put("grossPrice", getGrossPrice());
        attributes.put("grossAmount", getGrossAmount());
        attributes.put("itemIdentifierCodeQualifier",
            getItemIdentifierCodeQualifier());
        attributes.put("batchId", getBatchId());
        attributes.put("itemName", getItemName());
        attributes.put("errorField", getErrorField());
        attributes.put("netSalesPrice", getNetSalesPrice());
        attributes.put("netSalesAmount", getNetSalesAmount());
        attributes.put("segment", getSegment());
        attributes.put("forecastName", getForecastName());
        attributes.put("ivldAdjustedDemandForecastSid",
            getIvldAdjustedDemandForecastSid());
        attributes.put("marketSizeUnits", getMarketSizeUnits());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String forecastVersion = (String) attributes.get("forecastVersion");

        if (forecastVersion != null) {
            setForecastVersion(forecastVersion);
        }

        String grossUnits = (String) attributes.get("grossUnits");

        if (grossUnits != null) {
            setGrossUnits(grossUnits);
        }

        String businessUnitNo = (String) attributes.get("businessUnitNo");

        if (businessUnitNo != null) {
            setBusinessUnitNo(businessUnitNo);
        }

        String year = (String) attributes.get("year");

        if (year != null) {
            setYear(year);
        }

        String itemId = (String) attributes.get("itemId");

        if (itemId != null) {
            setItemId(itemId);
        }

        String brandName = (String) attributes.get("brandName");

        if (brandName != null) {
            setBrandName(brandName);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String organizationKey = (String) attributes.get("organizationKey");

        if (organizationKey != null) {
            setOrganizationKey(organizationKey);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String createdBy = (String) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String marketShareRatio = (String) attributes.get("marketShareRatio");

        if (marketShareRatio != null) {
            setMarketShareRatio(marketShareRatio);
        }

        String businessUnitName = (String) attributes.get("businessUnitName");

        if (businessUnitName != null) {
            setBusinessUnitName(businessUnitName);
        }

        String addChgDelIndicator = (String) attributes.get(
                "addChgDelIndicator");

        if (addChgDelIndicator != null) {
            setAddChgDelIndicator(addChgDelIndicator);
        }

        String itemIdentifier = (String) attributes.get("itemIdentifier");

        if (itemIdentifier != null) {
            setItemIdentifier(itemIdentifier);
        }

        String errorCode = (String) attributes.get("errorCode");

        if (errorCode != null) {
            setErrorCode(errorCode);
        }

        String modifiedBy = (String) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String marketShareUnits = (String) attributes.get("marketShareUnits");

        if (marketShareUnits != null) {
            setMarketShareUnits(marketShareUnits);
        }

        String month = (String) attributes.get("month");

        if (month != null) {
            setMonth(month);
        }

        String inventoryUnitChange = (String) attributes.get(
                "inventoryUnitChange");

        if (inventoryUnitChange != null) {
            setInventoryUnitChange(inventoryUnitChange);
        }

        String reprocessedFlag = (String) attributes.get("reprocessedFlag");

        if (reprocessedFlag != null) {
            setReprocessedFlag(reprocessedFlag);
        }

        String uncapturedUnitsRatio = (String) attributes.get(
                "uncapturedUnitsRatio");

        if (uncapturedUnitsRatio != null) {
            setUncapturedUnitsRatio(uncapturedUnitsRatio);
        }

        String reasonForFailure = (String) attributes.get("reasonForFailure");

        if (reasonForFailure != null) {
            setReasonForFailure(reasonForFailure);
        }

        String adjustedDemandForecastIntfId = (String) attributes.get(
                "adjustedDemandForecastIntfId");

        if (adjustedDemandForecastIntfId != null) {
            setAdjustedDemandForecastIntfId(adjustedDemandForecastIntfId);
        }

        String country = (String) attributes.get("country");

        if (country != null) {
            setCountry(country);
        }

        String forecastType = (String) attributes.get("forecastType");

        if (forecastType != null) {
            setForecastType(forecastType);
        }

        String totalAdjustedDemandUnits = (String) attributes.get(
                "totalAdjustedDemandUnits");

        if (totalAdjustedDemandUnits != null) {
            setTotalAdjustedDemandUnits(totalAdjustedDemandUnits);
        }

        String brandId = (String) attributes.get("brandId");

        if (brandId != null) {
            setBrandId(brandId);
        }

        String isForecast = (String) attributes.get("isForecast");

        if (isForecast != null) {
            setIsForecast(isForecast);
        }

        String totalAdjustedDemandAmount = (String) attributes.get(
                "totalAdjustedDemandAmount");

        if (totalAdjustedDemandAmount != null) {
            setTotalAdjustedDemandAmount(totalAdjustedDemandAmount);
        }

        String uncapturedUnits = (String) attributes.get("uncapturedUnits");

        if (uncapturedUnits != null) {
            setUncapturedUnits(uncapturedUnits);
        }

        String grossPrice = (String) attributes.get("grossPrice");

        if (grossPrice != null) {
            setGrossPrice(grossPrice);
        }

        String grossAmount = (String) attributes.get("grossAmount");

        if (grossAmount != null) {
            setGrossAmount(grossAmount);
        }

        String itemIdentifierCodeQualifier = (String) attributes.get(
                "itemIdentifierCodeQualifier");

        if (itemIdentifierCodeQualifier != null) {
            setItemIdentifierCodeQualifier(itemIdentifierCodeQualifier);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        String itemName = (String) attributes.get("itemName");

        if (itemName != null) {
            setItemName(itemName);
        }

        String errorField = (String) attributes.get("errorField");

        if (errorField != null) {
            setErrorField(errorField);
        }

        String netSalesPrice = (String) attributes.get("netSalesPrice");

        if (netSalesPrice != null) {
            setNetSalesPrice(netSalesPrice);
        }

        String netSalesAmount = (String) attributes.get("netSalesAmount");

        if (netSalesAmount != null) {
            setNetSalesAmount(netSalesAmount);
        }

        String segment = (String) attributes.get("segment");

        if (segment != null) {
            setSegment(segment);
        }

        String forecastName = (String) attributes.get("forecastName");

        if (forecastName != null) {
            setForecastName(forecastName);
        }

        Integer ivldAdjustedDemandForecastSid = (Integer) attributes.get(
                "ivldAdjustedDemandForecastSid");

        if (ivldAdjustedDemandForecastSid != null) {
            setIvldAdjustedDemandForecastSid(ivldAdjustedDemandForecastSid);
        }

        String marketSizeUnits = (String) attributes.get("marketSizeUnits");

        if (marketSizeUnits != null) {
            setMarketSizeUnits(marketSizeUnits);
        }
    }

    @Override
    public String getForecastVersion() {
        if (_forecastVersion == null) {
            return StringPool.BLANK;
        } else {
            return _forecastVersion;
        }
    }

    @Override
    public void setForecastVersion(String forecastVersion) {
        _forecastVersion = forecastVersion;
    }

    @Override
    public String getGrossUnits() {
        if (_grossUnits == null) {
            return StringPool.BLANK;
        } else {
            return _grossUnits;
        }
    }

    @Override
    public void setGrossUnits(String grossUnits) {
        _grossUnits = grossUnits;
    }

    @Override
    public String getBusinessUnitNo() {
        if (_businessUnitNo == null) {
            return StringPool.BLANK;
        } else {
            return _businessUnitNo;
        }
    }

    @Override
    public void setBusinessUnitNo(String businessUnitNo) {
        _businessUnitNo = businessUnitNo;
    }

    @Override
    public String getYear() {
        if (_year == null) {
            return StringPool.BLANK;
        } else {
            return _year;
        }
    }

    @Override
    public void setYear(String year) {
        _year = year;
    }

    @Override
    public String getItemId() {
        if (_itemId == null) {
            return StringPool.BLANK;
        } else {
            return _itemId;
        }
    }

    @Override
    public void setItemId(String itemId) {
        _itemId = itemId;
    }

    @Override
    public String getBrandName() {
        if (_brandName == null) {
            return StringPool.BLANK;
        } else {
            return _brandName;
        }
    }

    @Override
    public void setBrandName(String brandName) {
        _brandName = brandName;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getOrganizationKey() {
        if (_organizationKey == null) {
            return StringPool.BLANK;
        } else {
            return _organizationKey;
        }
    }

    @Override
    public void setOrganizationKey(String organizationKey) {
        _organizationKey = organizationKey;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getCreatedBy() {
        if (_createdBy == null) {
            return StringPool.BLANK;
        } else {
            return _createdBy;
        }
    }

    @Override
    public void setCreatedBy(String createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getMarketShareRatio() {
        if (_marketShareRatio == null) {
            return StringPool.BLANK;
        } else {
            return _marketShareRatio;
        }
    }

    @Override
    public void setMarketShareRatio(String marketShareRatio) {
        _marketShareRatio = marketShareRatio;
    }

    @Override
    public String getBusinessUnitName() {
        if (_businessUnitName == null) {
            return StringPool.BLANK;
        } else {
            return _businessUnitName;
        }
    }

    @Override
    public void setBusinessUnitName(String businessUnitName) {
        _businessUnitName = businessUnitName;
    }

    @Override
    public String getAddChgDelIndicator() {
        if (_addChgDelIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _addChgDelIndicator;
        }
    }

    @Override
    public void setAddChgDelIndicator(String addChgDelIndicator) {
        _addChgDelIndicator = addChgDelIndicator;
    }

    @Override
    public String getItemIdentifier() {
        if (_itemIdentifier == null) {
            return StringPool.BLANK;
        } else {
            return _itemIdentifier;
        }
    }

    @Override
    public void setItemIdentifier(String itemIdentifier) {
        _itemIdentifier = itemIdentifier;
    }

    @Override
    public String getErrorCode() {
        if (_errorCode == null) {
            return StringPool.BLANK;
        } else {
            return _errorCode;
        }
    }

    @Override
    public void setErrorCode(String errorCode) {
        _errorCode = errorCode;
    }

    @Override
    public String getModifiedBy() {
        if (_modifiedBy == null) {
            return StringPool.BLANK;
        } else {
            return _modifiedBy;
        }
    }

    @Override
    public void setModifiedBy(String modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getMarketShareUnits() {
        if (_marketShareUnits == null) {
            return StringPool.BLANK;
        } else {
            return _marketShareUnits;
        }
    }

    @Override
    public void setMarketShareUnits(String marketShareUnits) {
        _marketShareUnits = marketShareUnits;
    }

    @Override
    public String getMonth() {
        if (_month == null) {
            return StringPool.BLANK;
        } else {
            return _month;
        }
    }

    @Override
    public void setMonth(String month) {
        _month = month;
    }

    @Override
    public String getInventoryUnitChange() {
        if (_inventoryUnitChange == null) {
            return StringPool.BLANK;
        } else {
            return _inventoryUnitChange;
        }
    }

    @Override
    public void setInventoryUnitChange(String inventoryUnitChange) {
        _inventoryUnitChange = inventoryUnitChange;
    }

    @Override
    public String getReprocessedFlag() {
        if (_reprocessedFlag == null) {
            return StringPool.BLANK;
        } else {
            return _reprocessedFlag;
        }
    }

    @Override
    public void setReprocessedFlag(String reprocessedFlag) {
        _reprocessedFlag = reprocessedFlag;
    }

    @Override
    public String getUncapturedUnitsRatio() {
        if (_uncapturedUnitsRatio == null) {
            return StringPool.BLANK;
        } else {
            return _uncapturedUnitsRatio;
        }
    }

    @Override
    public void setUncapturedUnitsRatio(String uncapturedUnitsRatio) {
        _uncapturedUnitsRatio = uncapturedUnitsRatio;
    }

    @Override
    public String getReasonForFailure() {
        if (_reasonForFailure == null) {
            return StringPool.BLANK;
        } else {
            return _reasonForFailure;
        }
    }

    @Override
    public void setReasonForFailure(String reasonForFailure) {
        _reasonForFailure = reasonForFailure;
    }

    @Override
    public String getAdjustedDemandForecastIntfId() {
        if (_adjustedDemandForecastIntfId == null) {
            return StringPool.BLANK;
        } else {
            return _adjustedDemandForecastIntfId;
        }
    }

    @Override
    public void setAdjustedDemandForecastIntfId(
        String adjustedDemandForecastIntfId) {
        _adjustedDemandForecastIntfId = adjustedDemandForecastIntfId;
    }

    @Override
    public String getCountry() {
        if (_country == null) {
            return StringPool.BLANK;
        } else {
            return _country;
        }
    }

    @Override
    public void setCountry(String country) {
        _country = country;
    }

    @Override
    public String getForecastType() {
        if (_forecastType == null) {
            return StringPool.BLANK;
        } else {
            return _forecastType;
        }
    }

    @Override
    public void setForecastType(String forecastType) {
        _forecastType = forecastType;
    }

    @Override
    public String getTotalAdjustedDemandUnits() {
        if (_totalAdjustedDemandUnits == null) {
            return StringPool.BLANK;
        } else {
            return _totalAdjustedDemandUnits;
        }
    }

    @Override
    public void setTotalAdjustedDemandUnits(String totalAdjustedDemandUnits) {
        _totalAdjustedDemandUnits = totalAdjustedDemandUnits;
    }

    @Override
    public String getBrandId() {
        if (_brandId == null) {
            return StringPool.BLANK;
        } else {
            return _brandId;
        }
    }

    @Override
    public void setBrandId(String brandId) {
        _brandId = brandId;
    }

    @Override
    public String getIsForecast() {
        if (_isForecast == null) {
            return StringPool.BLANK;
        } else {
            return _isForecast;
        }
    }

    @Override
    public void setIsForecast(String isForecast) {
        _isForecast = isForecast;
    }

    @Override
    public String getTotalAdjustedDemandAmount() {
        if (_totalAdjustedDemandAmount == null) {
            return StringPool.BLANK;
        } else {
            return _totalAdjustedDemandAmount;
        }
    }

    @Override
    public void setTotalAdjustedDemandAmount(String totalAdjustedDemandAmount) {
        _totalAdjustedDemandAmount = totalAdjustedDemandAmount;
    }

    @Override
    public String getUncapturedUnits() {
        if (_uncapturedUnits == null) {
            return StringPool.BLANK;
        } else {
            return _uncapturedUnits;
        }
    }

    @Override
    public void setUncapturedUnits(String uncapturedUnits) {
        _uncapturedUnits = uncapturedUnits;
    }

    @Override
    public String getGrossPrice() {
        if (_grossPrice == null) {
            return StringPool.BLANK;
        } else {
            return _grossPrice;
        }
    }

    @Override
    public void setGrossPrice(String grossPrice) {
        _grossPrice = grossPrice;
    }

    @Override
    public String getGrossAmount() {
        if (_grossAmount == null) {
            return StringPool.BLANK;
        } else {
            return _grossAmount;
        }
    }

    @Override
    public void setGrossAmount(String grossAmount) {
        _grossAmount = grossAmount;
    }

    @Override
    public String getItemIdentifierCodeQualifier() {
        if (_itemIdentifierCodeQualifier == null) {
            return StringPool.BLANK;
        } else {
            return _itemIdentifierCodeQualifier;
        }
    }

    @Override
    public void setItemIdentifierCodeQualifier(
        String itemIdentifierCodeQualifier) {
        _itemIdentifierCodeQualifier = itemIdentifierCodeQualifier;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public String getItemName() {
        if (_itemName == null) {
            return StringPool.BLANK;
        } else {
            return _itemName;
        }
    }

    @Override
    public void setItemName(String itemName) {
        _itemName = itemName;
    }

    @Override
    public String getErrorField() {
        if (_errorField == null) {
            return StringPool.BLANK;
        } else {
            return _errorField;
        }
    }

    @Override
    public void setErrorField(String errorField) {
        _errorField = errorField;
    }

    @Override
    public String getNetSalesPrice() {
        if (_netSalesPrice == null) {
            return StringPool.BLANK;
        } else {
            return _netSalesPrice;
        }
    }

    @Override
    public void setNetSalesPrice(String netSalesPrice) {
        _netSalesPrice = netSalesPrice;
    }

    @Override
    public String getNetSalesAmount() {
        if (_netSalesAmount == null) {
            return StringPool.BLANK;
        } else {
            return _netSalesAmount;
        }
    }

    @Override
    public void setNetSalesAmount(String netSalesAmount) {
        _netSalesAmount = netSalesAmount;
    }

    @Override
    public String getSegment() {
        if (_segment == null) {
            return StringPool.BLANK;
        } else {
            return _segment;
        }
    }

    @Override
    public void setSegment(String segment) {
        _segment = segment;
    }

    @Override
    public String getForecastName() {
        if (_forecastName == null) {
            return StringPool.BLANK;
        } else {
            return _forecastName;
        }
    }

    @Override
    public void setForecastName(String forecastName) {
        _forecastName = forecastName;
    }

    @Override
    public int getIvldAdjustedDemandForecastSid() {
        return _ivldAdjustedDemandForecastSid;
    }

    @Override
    public void setIvldAdjustedDemandForecastSid(
        int ivldAdjustedDemandForecastSid) {
        _ivldAdjustedDemandForecastSid = ivldAdjustedDemandForecastSid;
    }

    @Override
    public String getMarketSizeUnits() {
        if (_marketSizeUnits == null) {
            return StringPool.BLANK;
        } else {
            return _marketSizeUnits;
        }
    }

    @Override
    public void setMarketSizeUnits(String marketSizeUnits) {
        _marketSizeUnits = marketSizeUnits;
    }

    @Override
    public VwIvldAdjDemandForeActual toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (VwIvldAdjDemandForeActual) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        VwIvldAdjDemandForeActualImpl vwIvldAdjDemandForeActualImpl = new VwIvldAdjDemandForeActualImpl();

        vwIvldAdjDemandForeActualImpl.setForecastVersion(getForecastVersion());
        vwIvldAdjDemandForeActualImpl.setGrossUnits(getGrossUnits());
        vwIvldAdjDemandForeActualImpl.setBusinessUnitNo(getBusinessUnitNo());
        vwIvldAdjDemandForeActualImpl.setYear(getYear());
        vwIvldAdjDemandForeActualImpl.setItemId(getItemId());
        vwIvldAdjDemandForeActualImpl.setBrandName(getBrandName());
        vwIvldAdjDemandForeActualImpl.setModifiedDate(getModifiedDate());
        vwIvldAdjDemandForeActualImpl.setOrganizationKey(getOrganizationKey());
        vwIvldAdjDemandForeActualImpl.setCreatedDate(getCreatedDate());
        vwIvldAdjDemandForeActualImpl.setCreatedBy(getCreatedBy());
        vwIvldAdjDemandForeActualImpl.setSource(getSource());
        vwIvldAdjDemandForeActualImpl.setMarketShareRatio(getMarketShareRatio());
        vwIvldAdjDemandForeActualImpl.setBusinessUnitName(getBusinessUnitName());
        vwIvldAdjDemandForeActualImpl.setAddChgDelIndicator(getAddChgDelIndicator());
        vwIvldAdjDemandForeActualImpl.setItemIdentifier(getItemIdentifier());
        vwIvldAdjDemandForeActualImpl.setErrorCode(getErrorCode());
        vwIvldAdjDemandForeActualImpl.setModifiedBy(getModifiedBy());
        vwIvldAdjDemandForeActualImpl.setMarketShareUnits(getMarketShareUnits());
        vwIvldAdjDemandForeActualImpl.setMonth(getMonth());
        vwIvldAdjDemandForeActualImpl.setInventoryUnitChange(getInventoryUnitChange());
        vwIvldAdjDemandForeActualImpl.setReprocessedFlag(getReprocessedFlag());
        vwIvldAdjDemandForeActualImpl.setUncapturedUnitsRatio(getUncapturedUnitsRatio());
        vwIvldAdjDemandForeActualImpl.setReasonForFailure(getReasonForFailure());
        vwIvldAdjDemandForeActualImpl.setAdjustedDemandForecastIntfId(getAdjustedDemandForecastIntfId());
        vwIvldAdjDemandForeActualImpl.setCountry(getCountry());
        vwIvldAdjDemandForeActualImpl.setForecastType(getForecastType());
        vwIvldAdjDemandForeActualImpl.setTotalAdjustedDemandUnits(getTotalAdjustedDemandUnits());
        vwIvldAdjDemandForeActualImpl.setBrandId(getBrandId());
        vwIvldAdjDemandForeActualImpl.setIsForecast(getIsForecast());
        vwIvldAdjDemandForeActualImpl.setTotalAdjustedDemandAmount(getTotalAdjustedDemandAmount());
        vwIvldAdjDemandForeActualImpl.setUncapturedUnits(getUncapturedUnits());
        vwIvldAdjDemandForeActualImpl.setGrossPrice(getGrossPrice());
        vwIvldAdjDemandForeActualImpl.setGrossAmount(getGrossAmount());
        vwIvldAdjDemandForeActualImpl.setItemIdentifierCodeQualifier(getItemIdentifierCodeQualifier());
        vwIvldAdjDemandForeActualImpl.setBatchId(getBatchId());
        vwIvldAdjDemandForeActualImpl.setItemName(getItemName());
        vwIvldAdjDemandForeActualImpl.setErrorField(getErrorField());
        vwIvldAdjDemandForeActualImpl.setNetSalesPrice(getNetSalesPrice());
        vwIvldAdjDemandForeActualImpl.setNetSalesAmount(getNetSalesAmount());
        vwIvldAdjDemandForeActualImpl.setSegment(getSegment());
        vwIvldAdjDemandForeActualImpl.setForecastName(getForecastName());
        vwIvldAdjDemandForeActualImpl.setIvldAdjustedDemandForecastSid(getIvldAdjustedDemandForecastSid());
        vwIvldAdjDemandForeActualImpl.setMarketSizeUnits(getMarketSizeUnits());

        vwIvldAdjDemandForeActualImpl.resetOriginalValues();

        return vwIvldAdjDemandForeActualImpl;
    }

    @Override
    public int compareTo(VwIvldAdjDemandForeActual vwIvldAdjDemandForeActual) {
        int primaryKey = vwIvldAdjDemandForeActual.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof VwIvldAdjDemandForeActual)) {
            return false;
        }

        VwIvldAdjDemandForeActual vwIvldAdjDemandForeActual = (VwIvldAdjDemandForeActual) obj;

        int primaryKey = vwIvldAdjDemandForeActual.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<VwIvldAdjDemandForeActual> toCacheModel() {
        VwIvldAdjDemandForeActualCacheModel vwIvldAdjDemandForeActualCacheModel = new VwIvldAdjDemandForeActualCacheModel();

        vwIvldAdjDemandForeActualCacheModel.forecastVersion = getForecastVersion();

        String forecastVersion = vwIvldAdjDemandForeActualCacheModel.forecastVersion;

        if ((forecastVersion != null) && (forecastVersion.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.forecastVersion = null;
        }

        vwIvldAdjDemandForeActualCacheModel.grossUnits = getGrossUnits();

        String grossUnits = vwIvldAdjDemandForeActualCacheModel.grossUnits;

        if ((grossUnits != null) && (grossUnits.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.grossUnits = null;
        }

        vwIvldAdjDemandForeActualCacheModel.businessUnitNo = getBusinessUnitNo();

        String businessUnitNo = vwIvldAdjDemandForeActualCacheModel.businessUnitNo;

        if ((businessUnitNo != null) && (businessUnitNo.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.businessUnitNo = null;
        }

        vwIvldAdjDemandForeActualCacheModel.year = getYear();

        String year = vwIvldAdjDemandForeActualCacheModel.year;

        if ((year != null) && (year.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.year = null;
        }

        vwIvldAdjDemandForeActualCacheModel.itemId = getItemId();

        String itemId = vwIvldAdjDemandForeActualCacheModel.itemId;

        if ((itemId != null) && (itemId.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.itemId = null;
        }

        vwIvldAdjDemandForeActualCacheModel.brandName = getBrandName();

        String brandName = vwIvldAdjDemandForeActualCacheModel.brandName;

        if ((brandName != null) && (brandName.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.brandName = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            vwIvldAdjDemandForeActualCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            vwIvldAdjDemandForeActualCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        vwIvldAdjDemandForeActualCacheModel.organizationKey = getOrganizationKey();

        String organizationKey = vwIvldAdjDemandForeActualCacheModel.organizationKey;

        if ((organizationKey != null) && (organizationKey.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.organizationKey = null;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            vwIvldAdjDemandForeActualCacheModel.createdDate = createdDate.getTime();
        } else {
            vwIvldAdjDemandForeActualCacheModel.createdDate = Long.MIN_VALUE;
        }

        vwIvldAdjDemandForeActualCacheModel.createdBy = getCreatedBy();

        String createdBy = vwIvldAdjDemandForeActualCacheModel.createdBy;

        if ((createdBy != null) && (createdBy.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.createdBy = null;
        }

        vwIvldAdjDemandForeActualCacheModel.source = getSource();

        String source = vwIvldAdjDemandForeActualCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.source = null;
        }

        vwIvldAdjDemandForeActualCacheModel.marketShareRatio = getMarketShareRatio();

        String marketShareRatio = vwIvldAdjDemandForeActualCacheModel.marketShareRatio;

        if ((marketShareRatio != null) && (marketShareRatio.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.marketShareRatio = null;
        }

        vwIvldAdjDemandForeActualCacheModel.businessUnitName = getBusinessUnitName();

        String businessUnitName = vwIvldAdjDemandForeActualCacheModel.businessUnitName;

        if ((businessUnitName != null) && (businessUnitName.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.businessUnitName = null;
        }

        vwIvldAdjDemandForeActualCacheModel.addChgDelIndicator = getAddChgDelIndicator();

        String addChgDelIndicator = vwIvldAdjDemandForeActualCacheModel.addChgDelIndicator;

        if ((addChgDelIndicator != null) && (addChgDelIndicator.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.addChgDelIndicator = null;
        }

        vwIvldAdjDemandForeActualCacheModel.itemIdentifier = getItemIdentifier();

        String itemIdentifier = vwIvldAdjDemandForeActualCacheModel.itemIdentifier;

        if ((itemIdentifier != null) && (itemIdentifier.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.itemIdentifier = null;
        }

        vwIvldAdjDemandForeActualCacheModel.errorCode = getErrorCode();

        String errorCode = vwIvldAdjDemandForeActualCacheModel.errorCode;

        if ((errorCode != null) && (errorCode.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.errorCode = null;
        }

        vwIvldAdjDemandForeActualCacheModel.modifiedBy = getModifiedBy();

        String modifiedBy = vwIvldAdjDemandForeActualCacheModel.modifiedBy;

        if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.modifiedBy = null;
        }

        vwIvldAdjDemandForeActualCacheModel.marketShareUnits = getMarketShareUnits();

        String marketShareUnits = vwIvldAdjDemandForeActualCacheModel.marketShareUnits;

        if ((marketShareUnits != null) && (marketShareUnits.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.marketShareUnits = null;
        }

        vwIvldAdjDemandForeActualCacheModel.month = getMonth();

        String month = vwIvldAdjDemandForeActualCacheModel.month;

        if ((month != null) && (month.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.month = null;
        }

        vwIvldAdjDemandForeActualCacheModel.inventoryUnitChange = getInventoryUnitChange();

        String inventoryUnitChange = vwIvldAdjDemandForeActualCacheModel.inventoryUnitChange;

        if ((inventoryUnitChange != null) &&
                (inventoryUnitChange.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.inventoryUnitChange = null;
        }

        vwIvldAdjDemandForeActualCacheModel.reprocessedFlag = getReprocessedFlag();

        String reprocessedFlag = vwIvldAdjDemandForeActualCacheModel.reprocessedFlag;

        if ((reprocessedFlag != null) && (reprocessedFlag.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.reprocessedFlag = null;
        }

        vwIvldAdjDemandForeActualCacheModel.uncapturedUnitsRatio = getUncapturedUnitsRatio();

        String uncapturedUnitsRatio = vwIvldAdjDemandForeActualCacheModel.uncapturedUnitsRatio;

        if ((uncapturedUnitsRatio != null) &&
                (uncapturedUnitsRatio.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.uncapturedUnitsRatio = null;
        }

        vwIvldAdjDemandForeActualCacheModel.reasonForFailure = getReasonForFailure();

        String reasonForFailure = vwIvldAdjDemandForeActualCacheModel.reasonForFailure;

        if ((reasonForFailure != null) && (reasonForFailure.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.reasonForFailure = null;
        }

        vwIvldAdjDemandForeActualCacheModel.adjustedDemandForecastIntfId = getAdjustedDemandForecastIntfId();

        String adjustedDemandForecastIntfId = vwIvldAdjDemandForeActualCacheModel.adjustedDemandForecastIntfId;

        if ((adjustedDemandForecastIntfId != null) &&
                (adjustedDemandForecastIntfId.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.adjustedDemandForecastIntfId = null;
        }

        vwIvldAdjDemandForeActualCacheModel.country = getCountry();

        String country = vwIvldAdjDemandForeActualCacheModel.country;

        if ((country != null) && (country.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.country = null;
        }

        vwIvldAdjDemandForeActualCacheModel.forecastType = getForecastType();

        String forecastType = vwIvldAdjDemandForeActualCacheModel.forecastType;

        if ((forecastType != null) && (forecastType.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.forecastType = null;
        }

        vwIvldAdjDemandForeActualCacheModel.totalAdjustedDemandUnits = getTotalAdjustedDemandUnits();

        String totalAdjustedDemandUnits = vwIvldAdjDemandForeActualCacheModel.totalAdjustedDemandUnits;

        if ((totalAdjustedDemandUnits != null) &&
                (totalAdjustedDemandUnits.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.totalAdjustedDemandUnits = null;
        }

        vwIvldAdjDemandForeActualCacheModel.brandId = getBrandId();

        String brandId = vwIvldAdjDemandForeActualCacheModel.brandId;

        if ((brandId != null) && (brandId.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.brandId = null;
        }

        vwIvldAdjDemandForeActualCacheModel.isForecast = getIsForecast();

        String isForecast = vwIvldAdjDemandForeActualCacheModel.isForecast;

        if ((isForecast != null) && (isForecast.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.isForecast = null;
        }

        vwIvldAdjDemandForeActualCacheModel.totalAdjustedDemandAmount = getTotalAdjustedDemandAmount();

        String totalAdjustedDemandAmount = vwIvldAdjDemandForeActualCacheModel.totalAdjustedDemandAmount;

        if ((totalAdjustedDemandAmount != null) &&
                (totalAdjustedDemandAmount.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.totalAdjustedDemandAmount = null;
        }

        vwIvldAdjDemandForeActualCacheModel.uncapturedUnits = getUncapturedUnits();

        String uncapturedUnits = vwIvldAdjDemandForeActualCacheModel.uncapturedUnits;

        if ((uncapturedUnits != null) && (uncapturedUnits.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.uncapturedUnits = null;
        }

        vwIvldAdjDemandForeActualCacheModel.grossPrice = getGrossPrice();

        String grossPrice = vwIvldAdjDemandForeActualCacheModel.grossPrice;

        if ((grossPrice != null) && (grossPrice.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.grossPrice = null;
        }

        vwIvldAdjDemandForeActualCacheModel.grossAmount = getGrossAmount();

        String grossAmount = vwIvldAdjDemandForeActualCacheModel.grossAmount;

        if ((grossAmount != null) && (grossAmount.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.grossAmount = null;
        }

        vwIvldAdjDemandForeActualCacheModel.itemIdentifierCodeQualifier = getItemIdentifierCodeQualifier();

        String itemIdentifierCodeQualifier = vwIvldAdjDemandForeActualCacheModel.itemIdentifierCodeQualifier;

        if ((itemIdentifierCodeQualifier != null) &&
                (itemIdentifierCodeQualifier.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.itemIdentifierCodeQualifier = null;
        }

        vwIvldAdjDemandForeActualCacheModel.batchId = getBatchId();

        String batchId = vwIvldAdjDemandForeActualCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.batchId = null;
        }

        vwIvldAdjDemandForeActualCacheModel.itemName = getItemName();

        String itemName = vwIvldAdjDemandForeActualCacheModel.itemName;

        if ((itemName != null) && (itemName.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.itemName = null;
        }

        vwIvldAdjDemandForeActualCacheModel.errorField = getErrorField();

        String errorField = vwIvldAdjDemandForeActualCacheModel.errorField;

        if ((errorField != null) && (errorField.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.errorField = null;
        }

        vwIvldAdjDemandForeActualCacheModel.netSalesPrice = getNetSalesPrice();

        String netSalesPrice = vwIvldAdjDemandForeActualCacheModel.netSalesPrice;

        if ((netSalesPrice != null) && (netSalesPrice.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.netSalesPrice = null;
        }

        vwIvldAdjDemandForeActualCacheModel.netSalesAmount = getNetSalesAmount();

        String netSalesAmount = vwIvldAdjDemandForeActualCacheModel.netSalesAmount;

        if ((netSalesAmount != null) && (netSalesAmount.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.netSalesAmount = null;
        }

        vwIvldAdjDemandForeActualCacheModel.segment = getSegment();

        String segment = vwIvldAdjDemandForeActualCacheModel.segment;

        if ((segment != null) && (segment.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.segment = null;
        }

        vwIvldAdjDemandForeActualCacheModel.forecastName = getForecastName();

        String forecastName = vwIvldAdjDemandForeActualCacheModel.forecastName;

        if ((forecastName != null) && (forecastName.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.forecastName = null;
        }

        vwIvldAdjDemandForeActualCacheModel.ivldAdjustedDemandForecastSid = getIvldAdjustedDemandForecastSid();

        vwIvldAdjDemandForeActualCacheModel.marketSizeUnits = getMarketSizeUnits();

        String marketSizeUnits = vwIvldAdjDemandForeActualCacheModel.marketSizeUnits;

        if ((marketSizeUnits != null) && (marketSizeUnits.length() == 0)) {
            vwIvldAdjDemandForeActualCacheModel.marketSizeUnits = null;
        }

        return vwIvldAdjDemandForeActualCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(87);

        sb.append("{forecastVersion=");
        sb.append(getForecastVersion());
        sb.append(", grossUnits=");
        sb.append(getGrossUnits());
        sb.append(", businessUnitNo=");
        sb.append(getBusinessUnitNo());
        sb.append(", year=");
        sb.append(getYear());
        sb.append(", itemId=");
        sb.append(getItemId());
        sb.append(", brandName=");
        sb.append(getBrandName());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", organizationKey=");
        sb.append(getOrganizationKey());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", marketShareRatio=");
        sb.append(getMarketShareRatio());
        sb.append(", businessUnitName=");
        sb.append(getBusinessUnitName());
        sb.append(", addChgDelIndicator=");
        sb.append(getAddChgDelIndicator());
        sb.append(", itemIdentifier=");
        sb.append(getItemIdentifier());
        sb.append(", errorCode=");
        sb.append(getErrorCode());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", marketShareUnits=");
        sb.append(getMarketShareUnits());
        sb.append(", month=");
        sb.append(getMonth());
        sb.append(", inventoryUnitChange=");
        sb.append(getInventoryUnitChange());
        sb.append(", reprocessedFlag=");
        sb.append(getReprocessedFlag());
        sb.append(", uncapturedUnitsRatio=");
        sb.append(getUncapturedUnitsRatio());
        sb.append(", reasonForFailure=");
        sb.append(getReasonForFailure());
        sb.append(", adjustedDemandForecastIntfId=");
        sb.append(getAdjustedDemandForecastIntfId());
        sb.append(", country=");
        sb.append(getCountry());
        sb.append(", forecastType=");
        sb.append(getForecastType());
        sb.append(", totalAdjustedDemandUnits=");
        sb.append(getTotalAdjustedDemandUnits());
        sb.append(", brandId=");
        sb.append(getBrandId());
        sb.append(", isForecast=");
        sb.append(getIsForecast());
        sb.append(", totalAdjustedDemandAmount=");
        sb.append(getTotalAdjustedDemandAmount());
        sb.append(", uncapturedUnits=");
        sb.append(getUncapturedUnits());
        sb.append(", grossPrice=");
        sb.append(getGrossPrice());
        sb.append(", grossAmount=");
        sb.append(getGrossAmount());
        sb.append(", itemIdentifierCodeQualifier=");
        sb.append(getItemIdentifierCodeQualifier());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", itemName=");
        sb.append(getItemName());
        sb.append(", errorField=");
        sb.append(getErrorField());
        sb.append(", netSalesPrice=");
        sb.append(getNetSalesPrice());
        sb.append(", netSalesAmount=");
        sb.append(getNetSalesAmount());
        sb.append(", segment=");
        sb.append(getSegment());
        sb.append(", forecastName=");
        sb.append(getForecastName());
        sb.append(", ivldAdjustedDemandForecastSid=");
        sb.append(getIvldAdjustedDemandForecastSid());
        sb.append(", marketSizeUnits=");
        sb.append(getMarketSizeUnits());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(133);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.parttwo.model.VwIvldAdjDemandForeActual");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>forecastVersion</column-name><column-value><![CDATA[");
        sb.append(getForecastVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grossUnits</column-name><column-value><![CDATA[");
        sb.append(getGrossUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>businessUnitNo</column-name><column-value><![CDATA[");
        sb.append(getBusinessUnitNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>year</column-name><column-value><![CDATA[");
        sb.append(getYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemId</column-name><column-value><![CDATA[");
        sb.append(getItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandName</column-name><column-value><![CDATA[");
        sb.append(getBrandName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationKey</column-name><column-value><![CDATA[");
        sb.append(getOrganizationKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketShareRatio</column-name><column-value><![CDATA[");
        sb.append(getMarketShareRatio());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>businessUnitName</column-name><column-value><![CDATA[");
        sb.append(getBusinessUnitName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>addChgDelIndicator</column-name><column-value><![CDATA[");
        sb.append(getAddChgDelIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemIdentifier</column-name><column-value><![CDATA[");
        sb.append(getItemIdentifier());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>errorCode</column-name><column-value><![CDATA[");
        sb.append(getErrorCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketShareUnits</column-name><column-value><![CDATA[");
        sb.append(getMarketShareUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>month</column-name><column-value><![CDATA[");
        sb.append(getMonth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inventoryUnitChange</column-name><column-value><![CDATA[");
        sb.append(getInventoryUnitChange());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reprocessedFlag</column-name><column-value><![CDATA[");
        sb.append(getReprocessedFlag());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>uncapturedUnitsRatio</column-name><column-value><![CDATA[");
        sb.append(getUncapturedUnitsRatio());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reasonForFailure</column-name><column-value><![CDATA[");
        sb.append(getReasonForFailure());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustedDemandForecastIntfId</column-name><column-value><![CDATA[");
        sb.append(getAdjustedDemandForecastIntfId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>country</column-name><column-value><![CDATA[");
        sb.append(getCountry());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastType</column-name><column-value><![CDATA[");
        sb.append(getForecastType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>totalAdjustedDemandUnits</column-name><column-value><![CDATA[");
        sb.append(getTotalAdjustedDemandUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandId</column-name><column-value><![CDATA[");
        sb.append(getBrandId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isForecast</column-name><column-value><![CDATA[");
        sb.append(getIsForecast());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>totalAdjustedDemandAmount</column-name><column-value><![CDATA[");
        sb.append(getTotalAdjustedDemandAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>uncapturedUnits</column-name><column-value><![CDATA[");
        sb.append(getUncapturedUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grossPrice</column-name><column-value><![CDATA[");
        sb.append(getGrossPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grossAmount</column-name><column-value><![CDATA[");
        sb.append(getGrossAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemIdentifierCodeQualifier</column-name><column-value><![CDATA[");
        sb.append(getItemIdentifierCodeQualifier());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemName</column-name><column-value><![CDATA[");
        sb.append(getItemName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>errorField</column-name><column-value><![CDATA[");
        sb.append(getErrorField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>netSalesPrice</column-name><column-value><![CDATA[");
        sb.append(getNetSalesPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>netSalesAmount</column-name><column-value><![CDATA[");
        sb.append(getNetSalesAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>segment</column-name><column-value><![CDATA[");
        sb.append(getSegment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastName</column-name><column-value><![CDATA[");
        sb.append(getForecastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ivldAdjustedDemandForecastSid</column-name><column-value><![CDATA[");
        sb.append(getIvldAdjustedDemandForecastSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketSizeUnits</column-name><column-value><![CDATA[");
        sb.append(getMarketSizeUnits());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
