/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.DocDetails;
import com.stpl.app.model.DocDetailsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DocDetails service. Represents a row in the &quot;DOC_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DocDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DocDetailsImpl}.
 * </p>
 *
 * @author
 * @see DocDetailsImpl
 * @see DocDetails
 * @see DocDetailsModel
 * @generated
 */
@ProviderType
public class DocDetailsModelImpl extends BaseModelImpl<DocDetails>
	implements DocDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a doc details model instance should use the {@link DocDetails} interface instead.
	 */
	public static final String TABLE_NAME = "DOC_DETAILS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "FILE_NAME", Types.VARCHAR },
			{ "FILE_TYPE", Types.VARCHAR },
			{ "UPLOADED_BY", Types.VARCHAR },
			{ "FORECAST_TYPE", Types.VARCHAR },
			{ "PROJECTION_ID", Types.INTEGER },
			{ "DOC_DETAILS_ID", Types.INTEGER },
			{ "UPLOADED_DATE", Types.TIMESTAMP },
			{ "FILE_SIZE", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("FILE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FILE_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UPLOADED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECTION_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("DOC_DETAILS_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UPLOADED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("FILE_SIZE", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table DOC_DETAILS (FILE_NAME VARCHAR(75) null,FILE_TYPE VARCHAR(75) null,UPLOADED_BY VARCHAR(75) null,FORECAST_TYPE VARCHAR(75) null,PROJECTION_ID INTEGER,DOC_DETAILS_ID INTEGER not null primary key IDENTITY,UPLOADED_DATE DATE null,FILE_SIZE VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DOC_DETAILS";
	public static final String ORDER_BY_JPQL = " ORDER BY docDetails.docDetailsId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DOC_DETAILS.DOC_DETAILS_ID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.DocDetails"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.DocDetails"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.DocDetails"));

	public DocDetailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _docDetailsId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setDocDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _docDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DocDetails.class;
	}

	@Override
	public String getModelClassName() {
		return DocDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("fileName", getFileName());
		attributes.put("fileType", getFileType());
		attributes.put("uploadedBy", getUploadedBy());
		attributes.put("forecastType", getForecastType());
		attributes.put("projectionId", getProjectionId());
		attributes.put("docDetailsId", getDocDetailsId());
		attributes.put("uploadedDate", getUploadedDate());
		attributes.put("fileSize", getFileSize());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String fileName = (String)attributes.get("fileName");

		if (fileName != null) {
			setFileName(fileName);
		}

		String fileType = (String)attributes.get("fileType");

		if (fileType != null) {
			setFileType(fileType);
		}

		String uploadedBy = (String)attributes.get("uploadedBy");

		if (uploadedBy != null) {
			setUploadedBy(uploadedBy);
		}

		String forecastType = (String)attributes.get("forecastType");

		if (forecastType != null) {
			setForecastType(forecastType);
		}

		Integer projectionId = (Integer)attributes.get("projectionId");

		if (projectionId != null) {
			setProjectionId(projectionId);
		}

		Integer docDetailsId = (Integer)attributes.get("docDetailsId");

		if (docDetailsId != null) {
			setDocDetailsId(docDetailsId);
		}

		Date uploadedDate = (Date)attributes.get("uploadedDate");

		if (uploadedDate != null) {
			setUploadedDate(uploadedDate);
		}

		String fileSize = (String)attributes.get("fileSize");

		if (fileSize != null) {
			setFileSize(fileSize);
		}
	}

	@Override
	public String getFileName() {
		if (_fileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileName;
		}
	}

	@Override
	public void setFileName(String fileName) {
		_fileName = fileName;
	}

	@Override
	public String getFileType() {
		if (_fileType == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileType;
		}
	}

	@Override
	public void setFileType(String fileType) {
		_fileType = fileType;
	}

	@Override
	public String getUploadedBy() {
		if (_uploadedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _uploadedBy;
		}
	}

	@Override
	public void setUploadedBy(String uploadedBy) {
		_uploadedBy = uploadedBy;
	}

	@Override
	public String getForecastType() {
		if (_forecastType == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastType;
		}
	}

	@Override
	public void setForecastType(String forecastType) {
		_forecastType = forecastType;
	}

	@Override
	public int getProjectionId() {
		return _projectionId;
	}

	@Override
	public void setProjectionId(int projectionId) {
		_projectionId = projectionId;
	}

	@Override
	public int getDocDetailsId() {
		return _docDetailsId;
	}

	@Override
	public void setDocDetailsId(int docDetailsId) {
		_docDetailsId = docDetailsId;
	}

	@Override
	public Date getUploadedDate() {
		return _uploadedDate;
	}

	@Override
	public void setUploadedDate(Date uploadedDate) {
		_uploadedDate = uploadedDate;
	}

	@Override
	public String getFileSize() {
		if (_fileSize == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileSize;
		}
	}

	@Override
	public void setFileSize(String fileSize) {
		_fileSize = fileSize;
	}

	@Override
	public DocDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DocDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DocDetailsImpl docDetailsImpl = new DocDetailsImpl();

		docDetailsImpl.setFileName(getFileName());
		docDetailsImpl.setFileType(getFileType());
		docDetailsImpl.setUploadedBy(getUploadedBy());
		docDetailsImpl.setForecastType(getForecastType());
		docDetailsImpl.setProjectionId(getProjectionId());
		docDetailsImpl.setDocDetailsId(getDocDetailsId());
		docDetailsImpl.setUploadedDate(getUploadedDate());
		docDetailsImpl.setFileSize(getFileSize());

		docDetailsImpl.resetOriginalValues();

		return docDetailsImpl;
	}

	@Override
	public int compareTo(DocDetails docDetails) {
		int primaryKey = docDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DocDetails)) {
			return false;
		}

		DocDetails docDetails = (DocDetails)obj;

		int primaryKey = docDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DocDetails> toCacheModel() {
		DocDetailsCacheModel docDetailsCacheModel = new DocDetailsCacheModel();

		docDetailsCacheModel.fileName = getFileName();

		String fileName = docDetailsCacheModel.fileName;

		if ((fileName != null) && (fileName.length() == 0)) {
			docDetailsCacheModel.fileName = null;
		}

		docDetailsCacheModel.fileType = getFileType();

		String fileType = docDetailsCacheModel.fileType;

		if ((fileType != null) && (fileType.length() == 0)) {
			docDetailsCacheModel.fileType = null;
		}

		docDetailsCacheModel.uploadedBy = getUploadedBy();

		String uploadedBy = docDetailsCacheModel.uploadedBy;

		if ((uploadedBy != null) && (uploadedBy.length() == 0)) {
			docDetailsCacheModel.uploadedBy = null;
		}

		docDetailsCacheModel.forecastType = getForecastType();

		String forecastType = docDetailsCacheModel.forecastType;

		if ((forecastType != null) && (forecastType.length() == 0)) {
			docDetailsCacheModel.forecastType = null;
		}

		docDetailsCacheModel.projectionId = getProjectionId();

		docDetailsCacheModel.docDetailsId = getDocDetailsId();

		Date uploadedDate = getUploadedDate();

		if (uploadedDate != null) {
			docDetailsCacheModel.uploadedDate = uploadedDate.getTime();
		}
		else {
			docDetailsCacheModel.uploadedDate = Long.MIN_VALUE;
		}

		docDetailsCacheModel.fileSize = getFileSize();

		String fileSize = docDetailsCacheModel.fileSize;

		if ((fileSize != null) && (fileSize.length() == 0)) {
			docDetailsCacheModel.fileSize = null;
		}

		return docDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{fileName=");
		sb.append(getFileName());
		sb.append(", fileType=");
		sb.append(getFileType());
		sb.append(", uploadedBy=");
		sb.append(getUploadedBy());
		sb.append(", forecastType=");
		sb.append(getForecastType());
		sb.append(", projectionId=");
		sb.append(getProjectionId());
		sb.append(", docDetailsId=");
		sb.append(getDocDetailsId());
		sb.append(", uploadedDate=");
		sb.append(getUploadedDate());
		sb.append(", fileSize=");
		sb.append(getFileSize());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.DocDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>fileName</column-name><column-value><![CDATA[");
		sb.append(getFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileType</column-name><column-value><![CDATA[");
		sb.append(getFileType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uploadedBy</column-name><column-value><![CDATA[");
		sb.append(getUploadedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastType</column-name><column-value><![CDATA[");
		sb.append(getForecastType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionId</column-name><column-value><![CDATA[");
		sb.append(getProjectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>docDetailsId</column-name><column-value><![CDATA[");
		sb.append(getDocDetailsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uploadedDate</column-name><column-value><![CDATA[");
		sb.append(getUploadedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileSize</column-name><column-value><![CDATA[");
		sb.append(getFileSize());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DocDetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DocDetails.class
		};
	private String _fileName;
	private String _fileType;
	private String _uploadedBy;
	private String _forecastType;
	private int _projectionId;
	private int _docDetailsId;
	private Date _uploadedDate;
	private String _fileSize;
	private DocDetails _escapedModel;
}