package com.stpl.app.model.impl;

import com.stpl.app.model.FileManagement;
import com.stpl.app.model.FileManagementModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FileManagement service. Represents a row in the &quot;FILE_MANAGEMENT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.FileManagementModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FileManagementImpl}.
 * </p>
 *
 * @author
 * @see FileManagementImpl
 * @see com.stpl.app.model.FileManagement
 * @see com.stpl.app.model.FileManagementModel
 * @generated
 */
public class FileManagementModelImpl extends BaseModelImpl<FileManagement>
    implements FileManagementModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a file management model instance should use the {@link com.stpl.app.model.FileManagement} interface instead.
     */
    public static final String TABLE_NAME = "FILE_MANAGEMENT";
    public static final Object[][] TABLE_COLUMNS = {
            { "COUNTRY", Types.INTEGER },
            { "FROM_PERIOD", Types.TIMESTAMP },
            { "VERSION_NO", Types.INTEGER },
            { "FORECAST_SOURCE", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "CREATED_BY", Types.INTEGER },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "VERSION", Types.VARCHAR },
            { "FILE_SOURCE", Types.VARCHAR },
            { "TO_PERIOD", Types.TIMESTAMP },
            { "MODIFIED_BY", Types.INTEGER },
            { "FILE_MANAGEMENT_SID", Types.INTEGER },
            { "FORECAST_NAME", Types.VARCHAR },
            { "FILE_TYPE", Types.INTEGER },
            { "BUSINESS_UNIT", Types.VARCHAR },
            { "COMPANY", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table FILE_MANAGEMENT (COUNTRY INTEGER,FROM_PERIOD DATE null,VERSION_NO INTEGER,FORECAST_SOURCE VARCHAR(75) null,MODIFIED_DATE DATE null,CREATED_BY INTEGER,CREATED_DATE DATE null,VERSION VARCHAR(75) null,FILE_SOURCE VARCHAR(75) null,TO_PERIOD DATE null,MODIFIED_BY INTEGER,FILE_MANAGEMENT_SID INTEGER not null primary key IDENTITY,FORECAST_NAME VARCHAR(75) null,FILE_TYPE INTEGER,BUSINESS_UNIT VARCHAR(75) null,COMPANY INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table FILE_MANAGEMENT";
    public static final String ORDER_BY_JPQL = " ORDER BY fileManagement.fileManagementSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY FILE_MANAGEMENT.FILE_MANAGEMENT_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.FileManagement"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.FileManagement"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.FileManagement"));
    private static ClassLoader _classLoader = FileManagement.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            FileManagement.class
        };
    private int _country;
    private Date _fromPeriod;
    private int _versionNo;
    private String _forecastSource;
    private Date _modifiedDate;
    private int _createdBy;
    private Date _createdDate;
    private String _version;
    private String _fileSource;
    private Date _toPeriod;
    private int _modifiedBy;
    private int _fileManagementSid;
    private String _forecastName;
    private int _fileType;
    private String _businessUnit;
    private int _company;
    private FileManagement _escapedModel;

    public FileManagementModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _fileManagementSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setFileManagementSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _fileManagementSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return FileManagement.class;
    }

    @Override
    public String getModelClassName() {
        return FileManagement.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("country", getCountry());
        attributes.put("fromPeriod", getFromPeriod());
        attributes.put("versionNo", getVersionNo());
        attributes.put("forecastSource", getForecastSource());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("version", getVersion());
        attributes.put("fileSource", getFileSource());
        attributes.put("toPeriod", getToPeriod());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("fileManagementSid", getFileManagementSid());
        attributes.put("forecastName", getForecastName());
        attributes.put("fileType", getFileType());
        attributes.put("businessUnit", getBusinessUnit());
        attributes.put("company", getCompany());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer country = (Integer) attributes.get("country");

        if (country != null) {
            setCountry(country);
        }

        Date fromPeriod = (Date) attributes.get("fromPeriod");

        if (fromPeriod != null) {
            setFromPeriod(fromPeriod);
        }

        Integer versionNo = (Integer) attributes.get("versionNo");

        if (versionNo != null) {
            setVersionNo(versionNo);
        }

        String forecastSource = (String) attributes.get("forecastSource");

        if (forecastSource != null) {
            setForecastSource(forecastSource);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String version = (String) attributes.get("version");

        if (version != null) {
            setVersion(version);
        }

        String fileSource = (String) attributes.get("fileSource");

        if (fileSource != null) {
            setFileSource(fileSource);
        }

        Date toPeriod = (Date) attributes.get("toPeriod");

        if (toPeriod != null) {
            setToPeriod(toPeriod);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        Integer fileManagementSid = (Integer) attributes.get(
                "fileManagementSid");

        if (fileManagementSid != null) {
            setFileManagementSid(fileManagementSid);
        }

        String forecastName = (String) attributes.get("forecastName");

        if (forecastName != null) {
            setForecastName(forecastName);
        }

        Integer fileType = (Integer) attributes.get("fileType");

        if (fileType != null) {
            setFileType(fileType);
        }

        String businessUnit = (String) attributes.get("businessUnit");

        if (businessUnit != null) {
            setBusinessUnit(businessUnit);
        }

        Integer company = (Integer) attributes.get("company");

        if (company != null) {
            setCompany(company);
        }
    }

    @Override
    public int getCountry() {
        return _country;
    }

    @Override
    public void setCountry(int country) {
        _country = country;
    }

    @Override
    public Date getFromPeriod() {
        return _fromPeriod;
    }

    @Override
    public void setFromPeriod(Date fromPeriod) {
        _fromPeriod = fromPeriod;
    }

    @Override
    public int getVersionNo() {
        return _versionNo;
    }

    @Override
    public void setVersionNo(int versionNo) {
        _versionNo = versionNo;
    }

    @Override
    public String getForecastSource() {
        if (_forecastSource == null) {
            return StringPool.BLANK;
        } else {
            return _forecastSource;
        }
    }

    @Override
    public void setForecastSource(String forecastSource) {
        _forecastSource = forecastSource;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getVersion() {
        if (_version == null) {
            return StringPool.BLANK;
        } else {
            return _version;
        }
    }

    @Override
    public void setVersion(String version) {
        _version = version;
    }

    @Override
    public String getFileSource() {
        if (_fileSource == null) {
            return StringPool.BLANK;
        } else {
            return _fileSource;
        }
    }

    @Override
    public void setFileSource(String fileSource) {
        _fileSource = fileSource;
    }

    @Override
    public Date getToPeriod() {
        return _toPeriod;
    }

    @Override
    public void setToPeriod(Date toPeriod) {
        _toPeriod = toPeriod;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public int getFileManagementSid() {
        return _fileManagementSid;
    }

    @Override
    public void setFileManagementSid(int fileManagementSid) {
        _fileManagementSid = fileManagementSid;
    }

    @Override
    public String getForecastName() {
        if (_forecastName == null) {
            return StringPool.BLANK;
        } else {
            return _forecastName;
        }
    }

    @Override
    public void setForecastName(String forecastName) {
        _forecastName = forecastName;
    }

    @Override
    public int getFileType() {
        return _fileType;
    }

    @Override
    public void setFileType(int fileType) {
        _fileType = fileType;
    }

    @Override
    public String getBusinessUnit() {
        return _businessUnit;
    }

    @Override
    public void setBusinessUnit(String businessUnit) {
        _businessUnit = businessUnit;
    }

    @Override
    public int getCompany() {
        return _company;
    }

    @Override
    public void setCompany(int company) {
        _company = company;
    }

    @Override
    public FileManagement toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (FileManagement) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FileManagementImpl fileManagementImpl = new FileManagementImpl();

        fileManagementImpl.setCountry(getCountry());
        fileManagementImpl.setFromPeriod(getFromPeriod());
        fileManagementImpl.setVersionNo(getVersionNo());
        fileManagementImpl.setForecastSource(getForecastSource());
        fileManagementImpl.setModifiedDate(getModifiedDate());
        fileManagementImpl.setCreatedBy(getCreatedBy());
        fileManagementImpl.setCreatedDate(getCreatedDate());
        fileManagementImpl.setVersion(getVersion());
        fileManagementImpl.setFileSource(getFileSource());
        fileManagementImpl.setToPeriod(getToPeriod());
        fileManagementImpl.setModifiedBy(getModifiedBy());
        fileManagementImpl.setFileManagementSid(getFileManagementSid());
        fileManagementImpl.setForecastName(getForecastName());
        fileManagementImpl.setFileType(getFileType());
        fileManagementImpl.setBusinessUnit(getBusinessUnit());
        fileManagementImpl.setCompany(getCompany());

        fileManagementImpl.resetOriginalValues();

        return fileManagementImpl;
    }

    @Override
    public int compareTo(FileManagement fileManagement) {
        int primaryKey = fileManagement.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof FileManagement)) {
            return false;
        }

        FileManagement fileManagement = (FileManagement) obj;

        int primaryKey = fileManagement.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<FileManagement> toCacheModel() {
        FileManagementCacheModel fileManagementCacheModel = new FileManagementCacheModel();

        fileManagementCacheModel.country = getCountry();

        Date fromPeriod = getFromPeriod();

        if (fromPeriod != null) {
            fileManagementCacheModel.fromPeriod = fromPeriod.getTime();
        } else {
            fileManagementCacheModel.fromPeriod = Long.MIN_VALUE;
        }

        fileManagementCacheModel.versionNo = getVersionNo();

        fileManagementCacheModel.forecastSource = getForecastSource();

        String forecastSource = fileManagementCacheModel.forecastSource;

        if ((forecastSource != null) && (forecastSource.length() == 0)) {
            fileManagementCacheModel.forecastSource = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            fileManagementCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            fileManagementCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        fileManagementCacheModel.createdBy = getCreatedBy();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            fileManagementCacheModel.createdDate = createdDate.getTime();
        } else {
            fileManagementCacheModel.createdDate = Long.MIN_VALUE;
        }

        fileManagementCacheModel.version = getVersion();

        String version = fileManagementCacheModel.version;

        if ((version != null) && (version.length() == 0)) {
            fileManagementCacheModel.version = null;
        }

        fileManagementCacheModel.fileSource = getFileSource();

        String fileSource = fileManagementCacheModel.fileSource;

        if ((fileSource != null) && (fileSource.length() == 0)) {
            fileManagementCacheModel.fileSource = null;
        }

        Date toPeriod = getToPeriod();

        if (toPeriod != null) {
            fileManagementCacheModel.toPeriod = toPeriod.getTime();
        } else {
            fileManagementCacheModel.toPeriod = Long.MIN_VALUE;
        }

        fileManagementCacheModel.modifiedBy = getModifiedBy();

        fileManagementCacheModel.fileManagementSid = getFileManagementSid();

        fileManagementCacheModel.forecastName = getForecastName();

        String forecastName = fileManagementCacheModel.forecastName;

        if ((forecastName != null) && (forecastName.length() == 0)) {
            fileManagementCacheModel.forecastName = null;
        }

        fileManagementCacheModel.fileType = getFileType();

        fileManagementCacheModel.businessUnit = getBusinessUnit();

        String businessUnit = fileManagementCacheModel.businessUnit;

        if ((businessUnit != null) && (businessUnit.length() == 0)) {
            fileManagementCacheModel.businessUnit = null;
        }

        fileManagementCacheModel.company = getCompany();

        return fileManagementCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(33);

        sb.append("{country=");
        sb.append(getCountry());
        sb.append(", fromPeriod=");
        sb.append(getFromPeriod());
        sb.append(", versionNo=");
        sb.append(getVersionNo());
        sb.append(", forecastSource=");
        sb.append(getForecastSource());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", version=");
        sb.append(getVersion());
        sb.append(", fileSource=");
        sb.append(getFileSource());
        sb.append(", toPeriod=");
        sb.append(getToPeriod());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", fileManagementSid=");
        sb.append(getFileManagementSid());
        sb.append(", forecastName=");
        sb.append(getForecastName());
        sb.append(", fileType=");
        sb.append(getFileType());
        sb.append(", businessUnit=");
        sb.append(getBusinessUnit());
        sb.append(", company=");
        sb.append(getCompany());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(52);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.FileManagement");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>country</column-name><column-value><![CDATA[");
        sb.append(getCountry());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fromPeriod</column-name><column-value><![CDATA[");
        sb.append(getFromPeriod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>versionNo</column-name><column-value><![CDATA[");
        sb.append(getVersionNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastSource</column-name><column-value><![CDATA[");
        sb.append(getForecastSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>version</column-name><column-value><![CDATA[");
        sb.append(getVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fileSource</column-name><column-value><![CDATA[");
        sb.append(getFileSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>toPeriod</column-name><column-value><![CDATA[");
        sb.append(getToPeriod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fileManagementSid</column-name><column-value><![CDATA[");
        sb.append(getFileManagementSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastName</column-name><column-value><![CDATA[");
        sb.append(getForecastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fileType</column-name><column-value><![CDATA[");
        sb.append(getFileType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>businessUnit</column-name><column-value><![CDATA[");
        sb.append(getBusinessUnit());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>company</column-name><column-value><![CDATA[");
        sb.append(getCompany());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
