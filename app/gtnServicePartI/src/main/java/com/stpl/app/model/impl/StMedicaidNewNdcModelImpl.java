package com.stpl.app.model.impl;

import com.stpl.app.model.StMedicaidNewNdc;
import com.stpl.app.model.StMedicaidNewNdcModel;
import com.stpl.app.service.persistence.StMedicaidNewNdcPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StMedicaidNewNdc service. Represents a row in the &quot;ST_MEDICAID_NEW_NDC&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.StMedicaidNewNdcModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StMedicaidNewNdcImpl}.
 * </p>
 *
 * @author
 * @see StMedicaidNewNdcImpl
 * @see com.stpl.app.model.StMedicaidNewNdc
 * @see com.stpl.app.model.StMedicaidNewNdcModel
 * @generated
 */
public class StMedicaidNewNdcModelImpl extends BaseModelImpl<StMedicaidNewNdc>
    implements StMedicaidNewNdcModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a st medicaid new ndc model instance should use the {@link com.stpl.app.model.StMedicaidNewNdc} interface instead.
     */
    public static final String TABLE_NAME = "ST_MEDICAID_NEW_NDC";
    public static final Object[][] TABLE_COLUMNS = {
            { "FORECAST_AMP", Types.DOUBLE },
            { "FORECAST_BESTPRICE", Types.DOUBLE },
            { "BASE_YEAR_CPI", Types.DOUBLE },
            { "NDC9", Types.VARCHAR },
            { "USER_ID", Types.INTEGER },
            { "LAST_MODIFIED_DATE", Types.TIMESTAMP },
            { "WAC_PRICE", Types.DOUBLE },
            { "BASE_YEAR_AMP", Types.DOUBLE },
            { "SESSION_ID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table ST_MEDICAID_NEW_NDC (FORECAST_AMP DOUBLE,FORECAST_BESTPRICE DOUBLE,BASE_YEAR_CPI DOUBLE,NDC9 VARCHAR(75) not null,USER_ID INTEGER not null,LAST_MODIFIED_DATE DATE null,WAC_PRICE DOUBLE,BASE_YEAR_AMP DOUBLE,SESSION_ID INTEGER not null,primary key (NDC9, USER_ID, SESSION_ID))";
    public static final String TABLE_SQL_DROP = "drop table ST_MEDICAID_NEW_NDC";
    public static final String ORDER_BY_JPQL = " ORDER BY stMedicaidNewNdc.id.ndc9 ASC, stMedicaidNewNdc.id.userId ASC, stMedicaidNewNdc.id.sessionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ST_MEDICAID_NEW_NDC.NDC9 ASC, ST_MEDICAID_NEW_NDC.USER_ID ASC, ST_MEDICAID_NEW_NDC.SESSION_ID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.StMedicaidNewNdc"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.StMedicaidNewNdc"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.StMedicaidNewNdc"));
    private static ClassLoader _classLoader = StMedicaidNewNdc.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            StMedicaidNewNdc.class
        };
    private double _forecastAmp;
    private double _forecastBestprice;
    private double _baseYearCpi;
    private String _ndc9;
    private int _userId;
    private Date _lastModifiedDate;
    private double _wacPrice;
    private double _baseYearAmp;
    private int _sessionId;
    private StMedicaidNewNdc _escapedModel;

    public StMedicaidNewNdcModelImpl() {
    }

    @Override
    public StMedicaidNewNdcPK getPrimaryKey() {
        return new StMedicaidNewNdcPK(_ndc9, _userId, _sessionId);
    }

    @Override
    public void setPrimaryKey(StMedicaidNewNdcPK primaryKey) {
        setNdc9(primaryKey.ndc9);
        setUserId(primaryKey.userId);
        setSessionId(primaryKey.sessionId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new StMedicaidNewNdcPK(_ndc9, _userId, _sessionId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((StMedicaidNewNdcPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return StMedicaidNewNdc.class;
    }

    @Override
    public String getModelClassName() {
        return StMedicaidNewNdc.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("forecastAmp", getForecastAmp());
        attributes.put("forecastBestprice", getForecastBestprice());
        attributes.put("baseYearCpi", getBaseYearCpi());
        attributes.put("ndc9", getNdc9());
        attributes.put("userId", getUserId());
        attributes.put("lastModifiedDate", getLastModifiedDate());
        attributes.put("wacPrice", getWacPrice());
        attributes.put("baseYearAmp", getBaseYearAmp());
        attributes.put("sessionId", getSessionId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Double forecastAmp = (Double) attributes.get("forecastAmp");

        if (forecastAmp != null) {
            setForecastAmp(forecastAmp);
        }

        Double forecastBestprice = (Double) attributes.get("forecastBestprice");

        if (forecastBestprice != null) {
            setForecastBestprice(forecastBestprice);
        }

        Double baseYearCpi = (Double) attributes.get("baseYearCpi");

        if (baseYearCpi != null) {
            setBaseYearCpi(baseYearCpi);
        }

        String ndc9 = (String) attributes.get("ndc9");

        if (ndc9 != null) {
            setNdc9(ndc9);
        }

        Integer userId = (Integer) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date lastModifiedDate = (Date) attributes.get("lastModifiedDate");

        if (lastModifiedDate != null) {
            setLastModifiedDate(lastModifiedDate);
        }

        Double wacPrice = (Double) attributes.get("wacPrice");

        if (wacPrice != null) {
            setWacPrice(wacPrice);
        }

        Double baseYearAmp = (Double) attributes.get("baseYearAmp");

        if (baseYearAmp != null) {
            setBaseYearAmp(baseYearAmp);
        }

        Integer sessionId = (Integer) attributes.get("sessionId");

        if (sessionId != null) {
            setSessionId(sessionId);
        }
    }

    @Override
    public double getForecastAmp() {
        return _forecastAmp;
    }

    @Override
    public void setForecastAmp(double forecastAmp) {
        _forecastAmp = forecastAmp;
    }

    @Override
    public double getForecastBestprice() {
        return _forecastBestprice;
    }

    @Override
    public void setForecastBestprice(double forecastBestprice) {
        _forecastBestprice = forecastBestprice;
    }

    @Override
    public double getBaseYearCpi() {
        return _baseYearCpi;
    }

    @Override
    public void setBaseYearCpi(double baseYearCpi) {
        _baseYearCpi = baseYearCpi;
    }

    @Override
    public String getNdc9() {
        if (_ndc9 == null) {
            return StringPool.BLANK;
        } else {
            return _ndc9;
        }
    }

    @Override
    public void setNdc9(String ndc9) {
        _ndc9 = ndc9;
    }

    @Override
    public int getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(int userId) {
        _userId = userId;
    }

    @Override
    public Date getLastModifiedDate() {
        return _lastModifiedDate;
    }

    @Override
    public void setLastModifiedDate(Date lastModifiedDate) {
        _lastModifiedDate = lastModifiedDate;
    }

    @Override
    public double getWacPrice() {
        return _wacPrice;
    }

    @Override
    public void setWacPrice(double wacPrice) {
        _wacPrice = wacPrice;
    }

    @Override
    public double getBaseYearAmp() {
        return _baseYearAmp;
    }

    @Override
    public void setBaseYearAmp(double baseYearAmp) {
        _baseYearAmp = baseYearAmp;
    }

    @Override
    public int getSessionId() {
        return _sessionId;
    }

    @Override
    public void setSessionId(int sessionId) {
        _sessionId = sessionId;
    }

    @Override
    public StMedicaidNewNdc toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (StMedicaidNewNdc) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        StMedicaidNewNdcImpl stMedicaidNewNdcImpl = new StMedicaidNewNdcImpl();

        stMedicaidNewNdcImpl.setForecastAmp(getForecastAmp());
        stMedicaidNewNdcImpl.setForecastBestprice(getForecastBestprice());
        stMedicaidNewNdcImpl.setBaseYearCpi(getBaseYearCpi());
        stMedicaidNewNdcImpl.setNdc9(getNdc9());
        stMedicaidNewNdcImpl.setUserId(getUserId());
        stMedicaidNewNdcImpl.setLastModifiedDate(getLastModifiedDate());
        stMedicaidNewNdcImpl.setWacPrice(getWacPrice());
        stMedicaidNewNdcImpl.setBaseYearAmp(getBaseYearAmp());
        stMedicaidNewNdcImpl.setSessionId(getSessionId());

        stMedicaidNewNdcImpl.resetOriginalValues();

        return stMedicaidNewNdcImpl;
    }

    @Override
    public int compareTo(StMedicaidNewNdc stMedicaidNewNdc) {
        StMedicaidNewNdcPK primaryKey = stMedicaidNewNdc.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof StMedicaidNewNdc)) {
            return false;
        }

        StMedicaidNewNdc stMedicaidNewNdc = (StMedicaidNewNdc) obj;

        StMedicaidNewNdcPK primaryKey = stMedicaidNewNdc.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<StMedicaidNewNdc> toCacheModel() {
        StMedicaidNewNdcCacheModel stMedicaidNewNdcCacheModel = new StMedicaidNewNdcCacheModel();

        stMedicaidNewNdcCacheModel.forecastAmp = getForecastAmp();

        stMedicaidNewNdcCacheModel.forecastBestprice = getForecastBestprice();

        stMedicaidNewNdcCacheModel.baseYearCpi = getBaseYearCpi();

        stMedicaidNewNdcCacheModel.ndc9 = getNdc9();

        String ndc9 = stMedicaidNewNdcCacheModel.ndc9;

        if ((ndc9 != null) && (ndc9.length() == 0)) {
            stMedicaidNewNdcCacheModel.ndc9 = null;
        }

        stMedicaidNewNdcCacheModel.userId = getUserId();

        Date lastModifiedDate = getLastModifiedDate();

        if (lastModifiedDate != null) {
            stMedicaidNewNdcCacheModel.lastModifiedDate = lastModifiedDate.getTime();
        } else {
            stMedicaidNewNdcCacheModel.lastModifiedDate = Long.MIN_VALUE;
        }

        stMedicaidNewNdcCacheModel.wacPrice = getWacPrice();

        stMedicaidNewNdcCacheModel.baseYearAmp = getBaseYearAmp();

        stMedicaidNewNdcCacheModel.sessionId = getSessionId();

        return stMedicaidNewNdcCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{forecastAmp=");
        sb.append(getForecastAmp());
        sb.append(", forecastBestprice=");
        sb.append(getForecastBestprice());
        sb.append(", baseYearCpi=");
        sb.append(getBaseYearCpi());
        sb.append(", ndc9=");
        sb.append(getNdc9());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", lastModifiedDate=");
        sb.append(getLastModifiedDate());
        sb.append(", wacPrice=");
        sb.append(getWacPrice());
        sb.append(", baseYearAmp=");
        sb.append(getBaseYearAmp());
        sb.append(", sessionId=");
        sb.append(getSessionId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.StMedicaidNewNdc");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>forecastAmp</column-name><column-value><![CDATA[");
        sb.append(getForecastAmp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastBestprice</column-name><column-value><![CDATA[");
        sb.append(getForecastBestprice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baseYearCpi</column-name><column-value><![CDATA[");
        sb.append(getBaseYearCpi());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ndc9</column-name><column-value><![CDATA[");
        sb.append(getNdc9());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
        sb.append(getLastModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>wacPrice</column-name><column-value><![CDATA[");
        sb.append(getWacPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baseYearAmp</column-name><column-value><![CDATA[");
        sb.append(getBaseYearAmp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sessionId</column-name><column-value><![CDATA[");
        sb.append(getSessionId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
