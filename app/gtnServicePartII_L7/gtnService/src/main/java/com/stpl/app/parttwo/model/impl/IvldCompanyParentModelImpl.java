/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.parttwo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.parttwo.model.IvldCompanyParent;
import com.stpl.app.parttwo.model.IvldCompanyParentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the IvldCompanyParent service. Represents a row in the &quot;IVLD_COMPANY_PARENT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link IvldCompanyParentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IvldCompanyParentImpl}.
 * </p>
 *
 * @author
 * @see IvldCompanyParentImpl
 * @see IvldCompanyParent
 * @see IvldCompanyParentModel
 * @generated
 */
@ProviderType
public class IvldCompanyParentModelImpl extends BaseModelImpl<IvldCompanyParent>
	implements IvldCompanyParentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ivld company parent model instance should use the {@link IvldCompanyParent} interface instead.
	 */
	public static final String TABLE_NAME = "IVLD_COMPANY_PARENT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PARENT_COMPANY_ID", Types.VARCHAR },
			{ "PRIOR_PARENT_COMPANY_ID", Types.VARCHAR },
			{ "REASON_FOR_FAILURE", Types.VARCHAR },
			{ "COMPANY_ID", Types.VARCHAR },
			{ "LAST_UPDATED_DATE", Types.VARCHAR },
			{ "PARENT_END_DATE", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "PARENT_DETAILS_INTFID", Types.VARCHAR },
			{ "PRIOR_PARENT_START_DATE", Types.VARCHAR },
			{ "SOURCE", Types.VARCHAR },
			{ "CREATED_BY", Types.VARCHAR },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "ADD_CHG_DEL_INDICATOR", Types.VARCHAR },
			{ "BATCH_ID", Types.VARCHAR },
			{ "IVLD_COMPANY_PARENT_SID", Types.INTEGER },
			{ "ERROR_FIELD", Types.VARCHAR },
			{ "ERROR_CODE", Types.VARCHAR },
			{ "INTF_INSERTED_DATE", Types.TIMESTAMP },
			{ "MODIFIED_BY", Types.VARCHAR },
			{ "REPROCESSED_FLAG", Types.VARCHAR },
			{ "PARENT_START_DATE", Types.VARCHAR },
			{ "CHECK_RECORD", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PARENT_COMPANY_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PRIOR_PARENT_COMPANY_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REASON_FOR_FAILURE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COMPANY_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LAST_UPDATED_DATE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PARENT_END_DATE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PARENT_DETAILS_INTFID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PRIOR_PARENT_START_DATE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ADD_CHG_DEL_INDICATOR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IVLD_COMPANY_PARENT_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ERROR_FIELD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ERROR_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INTF_INSERTED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REPROCESSED_FLAG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PARENT_START_DATE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CHECK_RECORD", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table IVLD_COMPANY_PARENT (PARENT_COMPANY_ID VARCHAR(75) null,PRIOR_PARENT_COMPANY_ID VARCHAR(75) null,REASON_FOR_FAILURE VARCHAR(75) null,COMPANY_ID VARCHAR(75) null,LAST_UPDATED_DATE VARCHAR(75) null,PARENT_END_DATE VARCHAR(75) null,MODIFIED_DATE DATE null,PARENT_DETAILS_INTFID VARCHAR(75) null,PRIOR_PARENT_START_DATE VARCHAR(75) null,SOURCE VARCHAR(75) null,CREATED_BY VARCHAR(75) null,CREATED_DATE DATE null,ADD_CHG_DEL_INDICATOR VARCHAR(75) null,BATCH_ID VARCHAR(75) null,IVLD_COMPANY_PARENT_SID INTEGER not null primary key,ERROR_FIELD VARCHAR(75) null,ERROR_CODE VARCHAR(75) null,INTF_INSERTED_DATE DATE null,MODIFIED_BY VARCHAR(75) null,REPROCESSED_FLAG VARCHAR(75) null,PARENT_START_DATE VARCHAR(75) null,CHECK_RECORD BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table IVLD_COMPANY_PARENT";
	public static final String ORDER_BY_JPQL = " ORDER BY ivldCompanyParent.ivldCompanyParentSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY IVLD_COMPANY_PARENT.IVLD_COMPANY_PARENT_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.parttwo.model.IvldCompanyParent"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.parttwo.model.IvldCompanyParent"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.parttwo.model.IvldCompanyParent"));

	public IvldCompanyParentModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _ivldCompanyParentSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setIvldCompanyParentSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ivldCompanyParentSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return IvldCompanyParent.class;
	}

	@Override
	public String getModelClassName() {
		return IvldCompanyParent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("parentcompanyId", getParentcompanyId());
		attributes.put("priorParentcompanyId", getPriorParentcompanyId());
		attributes.put("reasonForFailure", getReasonForFailure());
		attributes.put("companyId", getCompanyId());
		attributes.put("lastUpdatedDate", getLastUpdatedDate());
		attributes.put("parentEndDate", getParentEndDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("parentDetailsIntfid", getParentDetailsIntfid());
		attributes.put("priorParentStartDate", getPriorParentStartDate());
		attributes.put("source", getSource());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("addChgDelIndicator", getAddChgDelIndicator());
		attributes.put("batchId", getBatchId());
		attributes.put("ivldCompanyParentSid", getIvldCompanyParentSid());
		attributes.put("errorField", getErrorField());
		attributes.put("errorCode", getErrorCode());
		attributes.put("intfInsertedDate", getIntfInsertedDate());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("reprocessedFlag", getReprocessedFlag());
		attributes.put("parentStartDate", getParentStartDate());
		attributes.put("checkRecord", getCheckRecord());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String parentcompanyId = (String)attributes.get("parentcompanyId");

		if (parentcompanyId != null) {
			setParentcompanyId(parentcompanyId);
		}

		String priorParentcompanyId = (String)attributes.get(
				"priorParentcompanyId");

		if (priorParentcompanyId != null) {
			setPriorParentcompanyId(priorParentcompanyId);
		}

		String reasonForFailure = (String)attributes.get("reasonForFailure");

		if (reasonForFailure != null) {
			setReasonForFailure(reasonForFailure);
		}

		String companyId = (String)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String lastUpdatedDate = (String)attributes.get("lastUpdatedDate");

		if (lastUpdatedDate != null) {
			setLastUpdatedDate(lastUpdatedDate);
		}

		String parentEndDate = (String)attributes.get("parentEndDate");

		if (parentEndDate != null) {
			setParentEndDate(parentEndDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String parentDetailsIntfid = (String)attributes.get(
				"parentDetailsIntfid");

		if (parentDetailsIntfid != null) {
			setParentDetailsIntfid(parentDetailsIntfid);
		}

		String priorParentStartDate = (String)attributes.get(
				"priorParentStartDate");

		if (priorParentStartDate != null) {
			setPriorParentStartDate(priorParentStartDate);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String addChgDelIndicator = (String)attributes.get("addChgDelIndicator");

		if (addChgDelIndicator != null) {
			setAddChgDelIndicator(addChgDelIndicator);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		Integer ivldCompanyParentSid = (Integer)attributes.get(
				"ivldCompanyParentSid");

		if (ivldCompanyParentSid != null) {
			setIvldCompanyParentSid(ivldCompanyParentSid);
		}

		String errorField = (String)attributes.get("errorField");

		if (errorField != null) {
			setErrorField(errorField);
		}

		String errorCode = (String)attributes.get("errorCode");

		if (errorCode != null) {
			setErrorCode(errorCode);
		}

		Date intfInsertedDate = (Date)attributes.get("intfInsertedDate");

		if (intfInsertedDate != null) {
			setIntfInsertedDate(intfInsertedDate);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		String reprocessedFlag = (String)attributes.get("reprocessedFlag");

		if (reprocessedFlag != null) {
			setReprocessedFlag(reprocessedFlag);
		}

		String parentStartDate = (String)attributes.get("parentStartDate");

		if (parentStartDate != null) {
			setParentStartDate(parentStartDate);
		}

		Boolean checkRecord = (Boolean)attributes.get("checkRecord");

		if (checkRecord != null) {
			setCheckRecord(checkRecord);
		}
	}

	@Override
	public String getParentcompanyId() {
		if (_parentcompanyId == null) {
			return StringPool.BLANK;
		}
		else {
			return _parentcompanyId;
		}
	}

	@Override
	public void setParentcompanyId(String parentcompanyId) {
		_parentcompanyId = parentcompanyId;
	}

	@Override
	public String getPriorParentcompanyId() {
		if (_priorParentcompanyId == null) {
			return StringPool.BLANK;
		}
		else {
			return _priorParentcompanyId;
		}
	}

	@Override
	public void setPriorParentcompanyId(String priorParentcompanyId) {
		_priorParentcompanyId = priorParentcompanyId;
	}

	@Override
	public String getReasonForFailure() {
		if (_reasonForFailure == null) {
			return StringPool.BLANK;
		}
		else {
			return _reasonForFailure;
		}
	}

	@Override
	public void setReasonForFailure(String reasonForFailure) {
		_reasonForFailure = reasonForFailure;
	}

	@Override
	public String getCompanyId() {
		if (_companyId == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyId;
		}
	}

	@Override
	public void setCompanyId(String companyId) {
		_companyId = companyId;
	}

	@Override
	public String getLastUpdatedDate() {
		if (_lastUpdatedDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastUpdatedDate;
		}
	}

	@Override
	public void setLastUpdatedDate(String lastUpdatedDate) {
		_lastUpdatedDate = lastUpdatedDate;
	}

	@Override
	public String getParentEndDate() {
		if (_parentEndDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _parentEndDate;
		}
	}

	@Override
	public void setParentEndDate(String parentEndDate) {
		_parentEndDate = parentEndDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getParentDetailsIntfid() {
		if (_parentDetailsIntfid == null) {
			return StringPool.BLANK;
		}
		else {
			return _parentDetailsIntfid;
		}
	}

	@Override
	public void setParentDetailsIntfid(String parentDetailsIntfid) {
		_parentDetailsIntfid = parentDetailsIntfid;
	}

	@Override
	public String getPriorParentStartDate() {
		if (_priorParentStartDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _priorParentStartDate;
		}
	}

	@Override
	public void setPriorParentStartDate(String priorParentStartDate) {
		_priorParentStartDate = priorParentStartDate;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getAddChgDelIndicator() {
		if (_addChgDelIndicator == null) {
			return StringPool.BLANK;
		}
		else {
			return _addChgDelIndicator;
		}
	}

	@Override
	public void setAddChgDelIndicator(String addChgDelIndicator) {
		_addChgDelIndicator = addChgDelIndicator;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public int getIvldCompanyParentSid() {
		return _ivldCompanyParentSid;
	}

	@Override
	public void setIvldCompanyParentSid(int ivldCompanyParentSid) {
		_ivldCompanyParentSid = ivldCompanyParentSid;
	}

	@Override
	public String getErrorField() {
		if (_errorField == null) {
			return StringPool.BLANK;
		}
		else {
			return _errorField;
		}
	}

	@Override
	public void setErrorField(String errorField) {
		_errorField = errorField;
	}

	@Override
	public String getErrorCode() {
		if (_errorCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _errorCode;
		}
	}

	@Override
	public void setErrorCode(String errorCode) {
		_errorCode = errorCode;
	}

	@Override
	public Date getIntfInsertedDate() {
		return _intfInsertedDate;
	}

	@Override
	public void setIntfInsertedDate(Date intfInsertedDate) {
		_intfInsertedDate = intfInsertedDate;
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public String getReprocessedFlag() {
		if (_reprocessedFlag == null) {
			return StringPool.BLANK;
		}
		else {
			return _reprocessedFlag;
		}
	}

	@Override
	public void setReprocessedFlag(String reprocessedFlag) {
		_reprocessedFlag = reprocessedFlag;
	}

	@Override
	public String getParentStartDate() {
		if (_parentStartDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _parentStartDate;
		}
	}

	@Override
	public void setParentStartDate(String parentStartDate) {
		_parentStartDate = parentStartDate;
	}

	@Override
	public boolean getCheckRecord() {
		return _checkRecord;
	}

	@Override
	public boolean isCheckRecord() {
		return _checkRecord;
	}

	@Override
	public void setCheckRecord(boolean checkRecord) {
		_checkRecord = checkRecord;
	}

	@Override
	public IvldCompanyParent toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (IvldCompanyParent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IvldCompanyParentImpl ivldCompanyParentImpl = new IvldCompanyParentImpl();

		ivldCompanyParentImpl.setParentcompanyId(getParentcompanyId());
		ivldCompanyParentImpl.setPriorParentcompanyId(getPriorParentcompanyId());
		ivldCompanyParentImpl.setReasonForFailure(getReasonForFailure());
		ivldCompanyParentImpl.setCompanyId(getCompanyId());
		ivldCompanyParentImpl.setLastUpdatedDate(getLastUpdatedDate());
		ivldCompanyParentImpl.setParentEndDate(getParentEndDate());
		ivldCompanyParentImpl.setModifiedDate(getModifiedDate());
		ivldCompanyParentImpl.setParentDetailsIntfid(getParentDetailsIntfid());
		ivldCompanyParentImpl.setPriorParentStartDate(getPriorParentStartDate());
		ivldCompanyParentImpl.setSource(getSource());
		ivldCompanyParentImpl.setCreatedBy(getCreatedBy());
		ivldCompanyParentImpl.setCreatedDate(getCreatedDate());
		ivldCompanyParentImpl.setAddChgDelIndicator(getAddChgDelIndicator());
		ivldCompanyParentImpl.setBatchId(getBatchId());
		ivldCompanyParentImpl.setIvldCompanyParentSid(getIvldCompanyParentSid());
		ivldCompanyParentImpl.setErrorField(getErrorField());
		ivldCompanyParentImpl.setErrorCode(getErrorCode());
		ivldCompanyParentImpl.setIntfInsertedDate(getIntfInsertedDate());
		ivldCompanyParentImpl.setModifiedBy(getModifiedBy());
		ivldCompanyParentImpl.setReprocessedFlag(getReprocessedFlag());
		ivldCompanyParentImpl.setParentStartDate(getParentStartDate());
		ivldCompanyParentImpl.setCheckRecord(getCheckRecord());

		ivldCompanyParentImpl.resetOriginalValues();

		return ivldCompanyParentImpl;
	}

	@Override
	public int compareTo(IvldCompanyParent ivldCompanyParent) {
		int primaryKey = ivldCompanyParent.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof IvldCompanyParent)) {
			return false;
		}

		IvldCompanyParent ivldCompanyParent = (IvldCompanyParent)obj;

		int primaryKey = ivldCompanyParent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<IvldCompanyParent> toCacheModel() {
		IvldCompanyParentCacheModel ivldCompanyParentCacheModel = new IvldCompanyParentCacheModel();

		ivldCompanyParentCacheModel.parentcompanyId = getParentcompanyId();

		String parentcompanyId = ivldCompanyParentCacheModel.parentcompanyId;

		if ((parentcompanyId != null) && (parentcompanyId.length() == 0)) {
			ivldCompanyParentCacheModel.parentcompanyId = null;
		}

		ivldCompanyParentCacheModel.priorParentcompanyId = getPriorParentcompanyId();

		String priorParentcompanyId = ivldCompanyParentCacheModel.priorParentcompanyId;

		if ((priorParentcompanyId != null) &&
				(priorParentcompanyId.length() == 0)) {
			ivldCompanyParentCacheModel.priorParentcompanyId = null;
		}

		ivldCompanyParentCacheModel.reasonForFailure = getReasonForFailure();

		String reasonForFailure = ivldCompanyParentCacheModel.reasonForFailure;

		if ((reasonForFailure != null) && (reasonForFailure.length() == 0)) {
			ivldCompanyParentCacheModel.reasonForFailure = null;
		}

		ivldCompanyParentCacheModel.companyId = getCompanyId();

		String companyId = ivldCompanyParentCacheModel.companyId;

		if ((companyId != null) && (companyId.length() == 0)) {
			ivldCompanyParentCacheModel.companyId = null;
		}

		ivldCompanyParentCacheModel.lastUpdatedDate = getLastUpdatedDate();

		String lastUpdatedDate = ivldCompanyParentCacheModel.lastUpdatedDate;

		if ((lastUpdatedDate != null) && (lastUpdatedDate.length() == 0)) {
			ivldCompanyParentCacheModel.lastUpdatedDate = null;
		}

		ivldCompanyParentCacheModel.parentEndDate = getParentEndDate();

		String parentEndDate = ivldCompanyParentCacheModel.parentEndDate;

		if ((parentEndDate != null) && (parentEndDate.length() == 0)) {
			ivldCompanyParentCacheModel.parentEndDate = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ivldCompanyParentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ivldCompanyParentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ivldCompanyParentCacheModel.parentDetailsIntfid = getParentDetailsIntfid();

		String parentDetailsIntfid = ivldCompanyParentCacheModel.parentDetailsIntfid;

		if ((parentDetailsIntfid != null) &&
				(parentDetailsIntfid.length() == 0)) {
			ivldCompanyParentCacheModel.parentDetailsIntfid = null;
		}

		ivldCompanyParentCacheModel.priorParentStartDate = getPriorParentStartDate();

		String priorParentStartDate = ivldCompanyParentCacheModel.priorParentStartDate;

		if ((priorParentStartDate != null) &&
				(priorParentStartDate.length() == 0)) {
			ivldCompanyParentCacheModel.priorParentStartDate = null;
		}

		ivldCompanyParentCacheModel.source = getSource();

		String source = ivldCompanyParentCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			ivldCompanyParentCacheModel.source = null;
		}

		ivldCompanyParentCacheModel.createdBy = getCreatedBy();

		String createdBy = ivldCompanyParentCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			ivldCompanyParentCacheModel.createdBy = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			ivldCompanyParentCacheModel.createdDate = createdDate.getTime();
		}
		else {
			ivldCompanyParentCacheModel.createdDate = Long.MIN_VALUE;
		}

		ivldCompanyParentCacheModel.addChgDelIndicator = getAddChgDelIndicator();

		String addChgDelIndicator = ivldCompanyParentCacheModel.addChgDelIndicator;

		if ((addChgDelIndicator != null) && (addChgDelIndicator.length() == 0)) {
			ivldCompanyParentCacheModel.addChgDelIndicator = null;
		}

		ivldCompanyParentCacheModel.batchId = getBatchId();

		String batchId = ivldCompanyParentCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			ivldCompanyParentCacheModel.batchId = null;
		}

		ivldCompanyParentCacheModel.ivldCompanyParentSid = getIvldCompanyParentSid();

		ivldCompanyParentCacheModel.errorField = getErrorField();

		String errorField = ivldCompanyParentCacheModel.errorField;

		if ((errorField != null) && (errorField.length() == 0)) {
			ivldCompanyParentCacheModel.errorField = null;
		}

		ivldCompanyParentCacheModel.errorCode = getErrorCode();

		String errorCode = ivldCompanyParentCacheModel.errorCode;

		if ((errorCode != null) && (errorCode.length() == 0)) {
			ivldCompanyParentCacheModel.errorCode = null;
		}

		Date intfInsertedDate = getIntfInsertedDate();

		if (intfInsertedDate != null) {
			ivldCompanyParentCacheModel.intfInsertedDate = intfInsertedDate.getTime();
		}
		else {
			ivldCompanyParentCacheModel.intfInsertedDate = Long.MIN_VALUE;
		}

		ivldCompanyParentCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = ivldCompanyParentCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			ivldCompanyParentCacheModel.modifiedBy = null;
		}

		ivldCompanyParentCacheModel.reprocessedFlag = getReprocessedFlag();

		String reprocessedFlag = ivldCompanyParentCacheModel.reprocessedFlag;

		if ((reprocessedFlag != null) && (reprocessedFlag.length() == 0)) {
			ivldCompanyParentCacheModel.reprocessedFlag = null;
		}

		ivldCompanyParentCacheModel.parentStartDate = getParentStartDate();

		String parentStartDate = ivldCompanyParentCacheModel.parentStartDate;

		if ((parentStartDate != null) && (parentStartDate.length() == 0)) {
			ivldCompanyParentCacheModel.parentStartDate = null;
		}

		ivldCompanyParentCacheModel.checkRecord = getCheckRecord();

		return ivldCompanyParentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(45);

		sb.append("{parentcompanyId=");
		sb.append(getParentcompanyId());
		sb.append(", priorParentcompanyId=");
		sb.append(getPriorParentcompanyId());
		sb.append(", reasonForFailure=");
		sb.append(getReasonForFailure());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", lastUpdatedDate=");
		sb.append(getLastUpdatedDate());
		sb.append(", parentEndDate=");
		sb.append(getParentEndDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", parentDetailsIntfid=");
		sb.append(getParentDetailsIntfid());
		sb.append(", priorParentStartDate=");
		sb.append(getPriorParentStartDate());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", addChgDelIndicator=");
		sb.append(getAddChgDelIndicator());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", ivldCompanyParentSid=");
		sb.append(getIvldCompanyParentSid());
		sb.append(", errorField=");
		sb.append(getErrorField());
		sb.append(", errorCode=");
		sb.append(getErrorCode());
		sb.append(", intfInsertedDate=");
		sb.append(getIntfInsertedDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", reprocessedFlag=");
		sb.append(getReprocessedFlag());
		sb.append(", parentStartDate=");
		sb.append(getParentStartDate());
		sb.append(", checkRecord=");
		sb.append(getCheckRecord());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(70);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.parttwo.model.IvldCompanyParent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>parentcompanyId</column-name><column-value><![CDATA[");
		sb.append(getParentcompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priorParentcompanyId</column-name><column-value><![CDATA[");
		sb.append(getPriorParentcompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reasonForFailure</column-name><column-value><![CDATA[");
		sb.append(getReasonForFailure());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastUpdatedDate</column-name><column-value><![CDATA[");
		sb.append(getLastUpdatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentEndDate</column-name><column-value><![CDATA[");
		sb.append(getParentEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentDetailsIntfid</column-name><column-value><![CDATA[");
		sb.append(getParentDetailsIntfid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priorParentStartDate</column-name><column-value><![CDATA[");
		sb.append(getPriorParentStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addChgDelIndicator</column-name><column-value><![CDATA[");
		sb.append(getAddChgDelIndicator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ivldCompanyParentSid</column-name><column-value><![CDATA[");
		sb.append(getIvldCompanyParentSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorField</column-name><column-value><![CDATA[");
		sb.append(getErrorField());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorCode</column-name><column-value><![CDATA[");
		sb.append(getErrorCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>intfInsertedDate</column-name><column-value><![CDATA[");
		sb.append(getIntfInsertedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reprocessedFlag</column-name><column-value><![CDATA[");
		sb.append(getReprocessedFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentStartDate</column-name><column-value><![CDATA[");
		sb.append(getParentStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkRecord</column-name><column-value><![CDATA[");
		sb.append(getCheckRecord());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = IvldCompanyParent.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			IvldCompanyParent.class
		};
	private String _parentcompanyId;
	private String _priorParentcompanyId;
	private String _reasonForFailure;
	private String _companyId;
	private String _lastUpdatedDate;
	private String _parentEndDate;
	private Date _modifiedDate;
	private String _parentDetailsIntfid;
	private String _priorParentStartDate;
	private String _source;
	private String _createdBy;
	private Date _createdDate;
	private String _addChgDelIndicator;
	private String _batchId;
	private int _ivldCompanyParentSid;
	private String _errorField;
	private String _errorCode;
	private Date _intfInsertedDate;
	private String _modifiedBy;
	private String _reprocessedFlag;
	private String _parentStartDate;
	private boolean _checkRecord;
	private IvldCompanyParent _escapedModel;
}