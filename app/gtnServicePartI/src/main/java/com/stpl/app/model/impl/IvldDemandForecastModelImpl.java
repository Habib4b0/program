package com.stpl.app.model.impl;

import com.stpl.app.model.IvldDemandForecast;
import com.stpl.app.model.IvldDemandForecastModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the IvldDemandForecast service. Represents a row in the &quot;IVLD_DEMAND_FORECAST&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.IvldDemandForecastModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IvldDemandForecastImpl}.
 * </p>
 *
 * @author
 * @see IvldDemandForecastImpl
 * @see com.stpl.app.model.IvldDemandForecast
 * @see com.stpl.app.model.IvldDemandForecastModel
 * @generated
 */
public class IvldDemandForecastModelImpl extends BaseModelImpl<IvldDemandForecast>
    implements IvldDemandForecastModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ivld demand forecast model instance should use the {@link com.stpl.app.model.IvldDemandForecast} interface instead.
     */
    public static final String TABLE_NAME = "IVLD_DEMAND_FORECAST";
    public static final Object[][] TABLE_COLUMNS = {
            { "FORECAST_YEAR", Types.VARCHAR },
            { "GROSS_UNITS", Types.VARCHAR },
            { "TOTAL_DEMAND_UNITS", Types.VARCHAR },
            { "ITEM_ID", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "ORGANIZATION_KEY", Types.VARCHAR },
            { "IVLD_DEMAND_FORECAST_SID", Types.INTEGER },
            { "SOURCE", Types.VARCHAR },
            { "MARKET_SHARE_RATIO", Types.VARCHAR },
            { "CREATED_BY", Types.VARCHAR },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "ADD_CHG_DEL_INDICATOR", Types.VARCHAR },
            { "ITEM_IDENTIFIER", Types.VARCHAR },
            { "ERROR_CODE", Types.VARCHAR },
            { "INTF_INSERTED_DATE", Types.VARCHAR },
            { "MODIFIED_BY", Types.VARCHAR },
            { "MARKET_SHARE_UNITS", Types.VARCHAR },
            { "INVENTORY_UNIT_CHANGE", Types.VARCHAR },
            { "REPROCESSED_FLAG", Types.VARCHAR },
            { "UNCAPTURED_UNITS_RATIO", Types.VARCHAR },
            { "REASON_FOR_FAILURE", Types.VARCHAR },
            { "COUNTRY", Types.VARCHAR },
            { "FORECAST_TYPE", Types.VARCHAR },
            { "BRAND_ID", Types.VARCHAR },
            { "DEMAND_FORECAST_INTERFACE_ID", Types.VARCHAR },
            { "UNCAPTURED_UNITS", Types.VARCHAR },
            { "GROSS_PRICE", Types.VARCHAR },
            { "GROSS_AMOUNT", Types.VARCHAR },
            { "ITEM_IDENTIFIER_CODE_QUALIFIER", Types.VARCHAR },
            { "FORECAST_VER", Types.VARCHAR },
            { "BATCH_ID", Types.VARCHAR },
            { "FORECAST_MONTH", Types.VARCHAR },
            { "ERROR_FIELD", Types.VARCHAR },
            { "NET_SALES_PRICE", Types.VARCHAR },
            { "NET_SALES_AMOUNT", Types.VARCHAR },
            { "SEGMENT", Types.VARCHAR },
            { "TOTAL_DEMAND_AMOUNT", Types.VARCHAR },
            { "FORECAST_NAME", Types.VARCHAR },
            { "MARKET_SIZE_UNITS", Types.VARCHAR },
            { "CHECK_RECORD", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table IVLD_DEMAND_FORECAST (FORECAST_YEAR VARCHAR(75) null,GROSS_UNITS VARCHAR(75) null,TOTAL_DEMAND_UNITS VARCHAR(75) null,ITEM_ID VARCHAR(75) null,MODIFIED_DATE DATE null,ORGANIZATION_KEY VARCHAR(75) null,IVLD_DEMAND_FORECAST_SID INTEGER not null primary key IDENTITY,SOURCE VARCHAR(75) null,MARKET_SHARE_RATIO VARCHAR(75) null,CREATED_BY VARCHAR(75) null,CREATED_DATE DATE null,ADD_CHG_DEL_INDICATOR VARCHAR(75) null,ITEM_IDENTIFIER VARCHAR(75) null,ERROR_CODE VARCHAR(75) null,INTF_INSERTED_DATE VARCHAR(75) null,MODIFIED_BY VARCHAR(75) null,MARKET_SHARE_UNITS VARCHAR(75) null,INVENTORY_UNIT_CHANGE VARCHAR(75) null,REPROCESSED_FLAG VARCHAR(75) null,UNCAPTURED_UNITS_RATIO VARCHAR(75) null,REASON_FOR_FAILURE VARCHAR(75) null,COUNTRY VARCHAR(75) null,FORECAST_TYPE VARCHAR(75) null,BRAND_ID VARCHAR(75) null,DEMAND_FORECAST_INTERFACE_ID VARCHAR(75) null,UNCAPTURED_UNITS VARCHAR(75) null,GROSS_PRICE VARCHAR(75) null,GROSS_AMOUNT VARCHAR(75) null,ITEM_IDENTIFIER_CODE_QUALIFIER VARCHAR(75) null,FORECAST_VER VARCHAR(75) null,BATCH_ID VARCHAR(75) null,FORECAST_MONTH VARCHAR(75) null,ERROR_FIELD VARCHAR(75) null,NET_SALES_PRICE VARCHAR(75) null,NET_SALES_AMOUNT VARCHAR(75) null,SEGMENT VARCHAR(75) null,TOTAL_DEMAND_AMOUNT VARCHAR(75) null,FORECAST_NAME VARCHAR(75) null,MARKET_SIZE_UNITS VARCHAR(75) null,CHECK_RECORD BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table IVLD_DEMAND_FORECAST";
    public static final String ORDER_BY_JPQL = " ORDER BY ivldDemandForecast.ivldDemandForecastSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY IVLD_DEMAND_FORECAST.IVLD_DEMAND_FORECAST_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.IvldDemandForecast"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.IvldDemandForecast"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.IvldDemandForecast"));
    private static ClassLoader _classLoader = IvldDemandForecast.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            IvldDemandForecast.class
        };
    private String _forecastYear;
    private String _grossUnits;
    private String _totalDemandUnits;
    private String _itemId;
    private Date _modifiedDate;
    private String _organizationKey;
    private int _ivldDemandForecastSid;
    private String _source;
    private String _marketShareRatio;
    private String _createdBy;
    private Date _createdDate;
    private String _addChgDelIndicator;
    private String _itemIdentifier;
    private String _errorCode;
    private String _intfInsertedDate;
    private String _modifiedBy;
    private String _marketShareUnits;
    private String _inventoryUnitChange;
    private String _reprocessedFlag;
    private String _uncapturedUnitsRatio;
    private String _reasonForFailure;
    private String _country;
    private String _forecastType;
    private String _brandId;
    private String _demandForecastInterfaceId;
    private String _uncapturedUnits;
    private String _grossPrice;
    private String _grossAmount;
    private String _itemIdentifierCodeQualifier;
    private String _forecastVer;
    private String _batchId;
    private String _forecastMonth;
    private String _errorField;
    private String _netSalesPrice;
    private String _netSalesAmount;
    private String _segment;
    private String _totalDemandAmount;
    private String _forecastName;
    private String _marketSizeUnits;
    private boolean _checkRecord;
    private IvldDemandForecast _escapedModel;

    public IvldDemandForecastModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _ivldDemandForecastSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setIvldDemandForecastSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _ivldDemandForecastSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return IvldDemandForecast.class;
    }

    @Override
    public String getModelClassName() {
        return IvldDemandForecast.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("forecastYear", getForecastYear());
        attributes.put("grossUnits", getGrossUnits());
        attributes.put("totalDemandUnits", getTotalDemandUnits());
        attributes.put("itemId", getItemId());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("organizationKey", getOrganizationKey());
        attributes.put("ivldDemandForecastSid", getIvldDemandForecastSid());
        attributes.put("source", getSource());
        attributes.put("marketShareRatio", getMarketShareRatio());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("addChgDelIndicator", getAddChgDelIndicator());
        attributes.put("itemIdentifier", getItemIdentifier());
        attributes.put("errorCode", getErrorCode());
        attributes.put("intfInsertedDate", getIntfInsertedDate());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("marketShareUnits", getMarketShareUnits());
        attributes.put("inventoryUnitChange", getInventoryUnitChange());
        attributes.put("reprocessedFlag", getReprocessedFlag());
        attributes.put("uncapturedUnitsRatio", getUncapturedUnitsRatio());
        attributes.put("reasonForFailure", getReasonForFailure());
        attributes.put("country", getCountry());
        attributes.put("forecastType", getForecastType());
        attributes.put("brandId", getBrandId());
        attributes.put("demandForecastInterfaceId",
            getDemandForecastInterfaceId());
        attributes.put("uncapturedUnits", getUncapturedUnits());
        attributes.put("grossPrice", getGrossPrice());
        attributes.put("grossAmount", getGrossAmount());
        attributes.put("itemIdentifierCodeQualifier",
            getItemIdentifierCodeQualifier());
        attributes.put("forecastVer", getForecastVer());
        attributes.put("batchId", getBatchId());
        attributes.put("forecastMonth", getForecastMonth());
        attributes.put("errorField", getErrorField());
        attributes.put("netSalesPrice", getNetSalesPrice());
        attributes.put("netSalesAmount", getNetSalesAmount());
        attributes.put("segment", getSegment());
        attributes.put("totalDemandAmount", getTotalDemandAmount());
        attributes.put("forecastName", getForecastName());
        attributes.put("marketSizeUnits", getMarketSizeUnits());
        attributes.put("checkRecord", getCheckRecord());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String forecastYear = (String) attributes.get("forecastYear");

        if (forecastYear != null) {
            setForecastYear(forecastYear);
        }

        String grossUnits = (String) attributes.get("grossUnits");

        if (grossUnits != null) {
            setGrossUnits(grossUnits);
        }

        String totalDemandUnits = (String) attributes.get("totalDemandUnits");

        if (totalDemandUnits != null) {
            setTotalDemandUnits(totalDemandUnits);
        }

        String itemId = (String) attributes.get("itemId");

        if (itemId != null) {
            setItemId(itemId);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String organizationKey = (String) attributes.get("organizationKey");

        if (organizationKey != null) {
            setOrganizationKey(organizationKey);
        }

        Integer ivldDemandForecastSid = (Integer) attributes.get(
                "ivldDemandForecastSid");

        if (ivldDemandForecastSid != null) {
            setIvldDemandForecastSid(ivldDemandForecastSid);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String marketShareRatio = (String) attributes.get("marketShareRatio");

        if (marketShareRatio != null) {
            setMarketShareRatio(marketShareRatio);
        }

        String createdBy = (String) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String addChgDelIndicator = (String) attributes.get(
                "addChgDelIndicator");

        if (addChgDelIndicator != null) {
            setAddChgDelIndicator(addChgDelIndicator);
        }

        String itemIdentifier = (String) attributes.get("itemIdentifier");

        if (itemIdentifier != null) {
            setItemIdentifier(itemIdentifier);
        }

        String errorCode = (String) attributes.get("errorCode");

        if (errorCode != null) {
            setErrorCode(errorCode);
        }

        String intfInsertedDate = (String) attributes.get("intfInsertedDate");

        if (intfInsertedDate != null) {
            setIntfInsertedDate(intfInsertedDate);
        }

        String modifiedBy = (String) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String marketShareUnits = (String) attributes.get("marketShareUnits");

        if (marketShareUnits != null) {
            setMarketShareUnits(marketShareUnits);
        }

        String inventoryUnitChange = (String) attributes.get(
                "inventoryUnitChange");

        if (inventoryUnitChange != null) {
            setInventoryUnitChange(inventoryUnitChange);
        }

        String reprocessedFlag = (String) attributes.get("reprocessedFlag");

        if (reprocessedFlag != null) {
            setReprocessedFlag(reprocessedFlag);
        }

        String uncapturedUnitsRatio = (String) attributes.get(
                "uncapturedUnitsRatio");

        if (uncapturedUnitsRatio != null) {
            setUncapturedUnitsRatio(uncapturedUnitsRatio);
        }

        String reasonForFailure = (String) attributes.get("reasonForFailure");

        if (reasonForFailure != null) {
            setReasonForFailure(reasonForFailure);
        }

        String country = (String) attributes.get("country");

        if (country != null) {
            setCountry(country);
        }

        String forecastType = (String) attributes.get("forecastType");

        if (forecastType != null) {
            setForecastType(forecastType);
        }

        String brandId = (String) attributes.get("brandId");

        if (brandId != null) {
            setBrandId(brandId);
        }

        String demandForecastInterfaceId = (String) attributes.get(
                "demandForecastInterfaceId");

        if (demandForecastInterfaceId != null) {
            setDemandForecastInterfaceId(demandForecastInterfaceId);
        }

        String uncapturedUnits = (String) attributes.get("uncapturedUnits");

        if (uncapturedUnits != null) {
            setUncapturedUnits(uncapturedUnits);
        }

        String grossPrice = (String) attributes.get("grossPrice");

        if (grossPrice != null) {
            setGrossPrice(grossPrice);
        }

        String grossAmount = (String) attributes.get("grossAmount");

        if (grossAmount != null) {
            setGrossAmount(grossAmount);
        }

        String itemIdentifierCodeQualifier = (String) attributes.get(
                "itemIdentifierCodeQualifier");

        if (itemIdentifierCodeQualifier != null) {
            setItemIdentifierCodeQualifier(itemIdentifierCodeQualifier);
        }

        String forecastVer = (String) attributes.get("forecastVer");

        if (forecastVer != null) {
            setForecastVer(forecastVer);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        String forecastMonth = (String) attributes.get("forecastMonth");

        if (forecastMonth != null) {
            setForecastMonth(forecastMonth);
        }

        String errorField = (String) attributes.get("errorField");

        if (errorField != null) {
            setErrorField(errorField);
        }

        String netSalesPrice = (String) attributes.get("netSalesPrice");

        if (netSalesPrice != null) {
            setNetSalesPrice(netSalesPrice);
        }

        String netSalesAmount = (String) attributes.get("netSalesAmount");

        if (netSalesAmount != null) {
            setNetSalesAmount(netSalesAmount);
        }

        String segment = (String) attributes.get("segment");

        if (segment != null) {
            setSegment(segment);
        }

        String totalDemandAmount = (String) attributes.get("totalDemandAmount");

        if (totalDemandAmount != null) {
            setTotalDemandAmount(totalDemandAmount);
        }

        String forecastName = (String) attributes.get("forecastName");

        if (forecastName != null) {
            setForecastName(forecastName);
        }

        String marketSizeUnits = (String) attributes.get("marketSizeUnits");

        if (marketSizeUnits != null) {
            setMarketSizeUnits(marketSizeUnits);
        }

        Boolean checkRecord = (Boolean) attributes.get("checkRecord");

        if (checkRecord != null) {
            setCheckRecord(checkRecord);
        }
    }

    @Override
    public String getForecastYear() {
        if (_forecastYear == null) {
            return StringPool.BLANK;
        } else {
            return _forecastYear;
        }
    }

    @Override
    public void setForecastYear(String forecastYear) {
        _forecastYear = forecastYear;
    }

    @Override
    public String getGrossUnits() {
        if (_grossUnits == null) {
            return StringPool.BLANK;
        } else {
            return _grossUnits;
        }
    }

    @Override
    public void setGrossUnits(String grossUnits) {
        _grossUnits = grossUnits;
    }

    @Override
    public String getTotalDemandUnits() {
        if (_totalDemandUnits == null) {
            return StringPool.BLANK;
        } else {
            return _totalDemandUnits;
        }
    }

    @Override
    public void setTotalDemandUnits(String totalDemandUnits) {
        _totalDemandUnits = totalDemandUnits;
    }

    @Override
    public String getItemId() {
        if (_itemId == null) {
            return StringPool.BLANK;
        } else {
            return _itemId;
        }
    }

    @Override
    public void setItemId(String itemId) {
        _itemId = itemId;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getOrganizationKey() {
        if (_organizationKey == null) {
            return StringPool.BLANK;
        } else {
            return _organizationKey;
        }
    }

    @Override
    public void setOrganizationKey(String organizationKey) {
        _organizationKey = organizationKey;
    }

    @Override
    public int getIvldDemandForecastSid() {
        return _ivldDemandForecastSid;
    }

    @Override
    public void setIvldDemandForecastSid(int ivldDemandForecastSid) {
        _ivldDemandForecastSid = ivldDemandForecastSid;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getMarketShareRatio() {
        if (_marketShareRatio == null) {
            return StringPool.BLANK;
        } else {
            return _marketShareRatio;
        }
    }

    @Override
    public void setMarketShareRatio(String marketShareRatio) {
        _marketShareRatio = marketShareRatio;
    }

    @Override
    public String getCreatedBy() {
        if (_createdBy == null) {
            return StringPool.BLANK;
        } else {
            return _createdBy;
        }
    }

    @Override
    public void setCreatedBy(String createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getAddChgDelIndicator() {
        if (_addChgDelIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _addChgDelIndicator;
        }
    }

    @Override
    public void setAddChgDelIndicator(String addChgDelIndicator) {
        _addChgDelIndicator = addChgDelIndicator;
    }

    @Override
    public String getItemIdentifier() {
        if (_itemIdentifier == null) {
            return StringPool.BLANK;
        } else {
            return _itemIdentifier;
        }
    }

    @Override
    public void setItemIdentifier(String itemIdentifier) {
        _itemIdentifier = itemIdentifier;
    }

    @Override
    public String getErrorCode() {
        if (_errorCode == null) {
            return StringPool.BLANK;
        } else {
            return _errorCode;
        }
    }

    @Override
    public void setErrorCode(String errorCode) {
        _errorCode = errorCode;
    }

    @Override
    public String getIntfInsertedDate() {
        if (_intfInsertedDate == null) {
            return StringPool.BLANK;
        } else {
            return _intfInsertedDate;
        }
    }

    @Override
    public void setIntfInsertedDate(String intfInsertedDate) {
        _intfInsertedDate = intfInsertedDate;
    }

    @Override
    public String getModifiedBy() {
        if (_modifiedBy == null) {
            return StringPool.BLANK;
        } else {
            return _modifiedBy;
        }
    }

    @Override
    public void setModifiedBy(String modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getMarketShareUnits() {
        if (_marketShareUnits == null) {
            return StringPool.BLANK;
        } else {
            return _marketShareUnits;
        }
    }

    @Override
    public void setMarketShareUnits(String marketShareUnits) {
        _marketShareUnits = marketShareUnits;
    }

    @Override
    public String getInventoryUnitChange() {
        if (_inventoryUnitChange == null) {
            return StringPool.BLANK;
        } else {
            return _inventoryUnitChange;
        }
    }

    @Override
    public void setInventoryUnitChange(String inventoryUnitChange) {
        _inventoryUnitChange = inventoryUnitChange;
    }

    @Override
    public String getReprocessedFlag() {
        if (_reprocessedFlag == null) {
            return StringPool.BLANK;
        } else {
            return _reprocessedFlag;
        }
    }

    @Override
    public void setReprocessedFlag(String reprocessedFlag) {
        _reprocessedFlag = reprocessedFlag;
    }

    @Override
    public String getUncapturedUnitsRatio() {
        if (_uncapturedUnitsRatio == null) {
            return StringPool.BLANK;
        } else {
            return _uncapturedUnitsRatio;
        }
    }

    @Override
    public void setUncapturedUnitsRatio(String uncapturedUnitsRatio) {
        _uncapturedUnitsRatio = uncapturedUnitsRatio;
    }

    @Override
    public String getReasonForFailure() {
        if (_reasonForFailure == null) {
            return StringPool.BLANK;
        } else {
            return _reasonForFailure;
        }
    }

    @Override
    public void setReasonForFailure(String reasonForFailure) {
        _reasonForFailure = reasonForFailure;
    }

    @Override
    public String getCountry() {
        if (_country == null) {
            return StringPool.BLANK;
        } else {
            return _country;
        }
    }

    @Override
    public void setCountry(String country) {
        _country = country;
    }

    @Override
    public String getForecastType() {
        if (_forecastType == null) {
            return StringPool.BLANK;
        } else {
            return _forecastType;
        }
    }

    @Override
    public void setForecastType(String forecastType) {
        _forecastType = forecastType;
    }

    @Override
    public String getBrandId() {
        if (_brandId == null) {
            return StringPool.BLANK;
        } else {
            return _brandId;
        }
    }

    @Override
    public void setBrandId(String brandId) {
        _brandId = brandId;
    }

    @Override
    public String getDemandForecastInterfaceId() {
        if (_demandForecastInterfaceId == null) {
            return StringPool.BLANK;
        } else {
            return _demandForecastInterfaceId;
        }
    }

    @Override
    public void setDemandForecastInterfaceId(String demandForecastInterfaceId) {
        _demandForecastInterfaceId = demandForecastInterfaceId;
    }

    @Override
    public String getUncapturedUnits() {
        if (_uncapturedUnits == null) {
            return StringPool.BLANK;
        } else {
            return _uncapturedUnits;
        }
    }

    @Override
    public void setUncapturedUnits(String uncapturedUnits) {
        _uncapturedUnits = uncapturedUnits;
    }

    @Override
    public String getGrossPrice() {
        if (_grossPrice == null) {
            return StringPool.BLANK;
        } else {
            return _grossPrice;
        }
    }

    @Override
    public void setGrossPrice(String grossPrice) {
        _grossPrice = grossPrice;
    }

    @Override
    public String getGrossAmount() {
        if (_grossAmount == null) {
            return StringPool.BLANK;
        } else {
            return _grossAmount;
        }
    }

    @Override
    public void setGrossAmount(String grossAmount) {
        _grossAmount = grossAmount;
    }

    @Override
    public String getItemIdentifierCodeQualifier() {
        if (_itemIdentifierCodeQualifier == null) {
            return StringPool.BLANK;
        } else {
            return _itemIdentifierCodeQualifier;
        }
    }

    @Override
    public void setItemIdentifierCodeQualifier(
        String itemIdentifierCodeQualifier) {
        _itemIdentifierCodeQualifier = itemIdentifierCodeQualifier;
    }

    @Override
    public String getForecastVer() {
        if (_forecastVer == null) {
            return StringPool.BLANK;
        } else {
            return _forecastVer;
        }
    }

    @Override
    public void setForecastVer(String forecastVer) {
        _forecastVer = forecastVer;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public String getForecastMonth() {
        if (_forecastMonth == null) {
            return StringPool.BLANK;
        } else {
            return _forecastMonth;
        }
    }

    @Override
    public void setForecastMonth(String forecastMonth) {
        _forecastMonth = forecastMonth;
    }

    @Override
    public String getErrorField() {
        if (_errorField == null) {
            return StringPool.BLANK;
        } else {
            return _errorField;
        }
    }

    @Override
    public void setErrorField(String errorField) {
        _errorField = errorField;
    }

    @Override
    public String getNetSalesPrice() {
        if (_netSalesPrice == null) {
            return StringPool.BLANK;
        } else {
            return _netSalesPrice;
        }
    }

    @Override
    public void setNetSalesPrice(String netSalesPrice) {
        _netSalesPrice = netSalesPrice;
    }

    @Override
    public String getNetSalesAmount() {
        if (_netSalesAmount == null) {
            return StringPool.BLANK;
        } else {
            return _netSalesAmount;
        }
    }

    @Override
    public void setNetSalesAmount(String netSalesAmount) {
        _netSalesAmount = netSalesAmount;
    }

    @Override
    public String getSegment() {
        if (_segment == null) {
            return StringPool.BLANK;
        } else {
            return _segment;
        }
    }

    @Override
    public void setSegment(String segment) {
        _segment = segment;
    }

    @Override
    public String getTotalDemandAmount() {
        if (_totalDemandAmount == null) {
            return StringPool.BLANK;
        } else {
            return _totalDemandAmount;
        }
    }

    @Override
    public void setTotalDemandAmount(String totalDemandAmount) {
        _totalDemandAmount = totalDemandAmount;
    }

    @Override
    public String getForecastName() {
        if (_forecastName == null) {
            return StringPool.BLANK;
        } else {
            return _forecastName;
        }
    }

    @Override
    public void setForecastName(String forecastName) {
        _forecastName = forecastName;
    }

    @Override
    public String getMarketSizeUnits() {
        if (_marketSizeUnits == null) {
            return StringPool.BLANK;
        } else {
            return _marketSizeUnits;
        }
    }

    @Override
    public void setMarketSizeUnits(String marketSizeUnits) {
        _marketSizeUnits = marketSizeUnits;
    }

    @Override
    public boolean getCheckRecord() {
        return _checkRecord;
    }

    @Override
    public boolean isCheckRecord() {
        return _checkRecord;
    }

    @Override
    public void setCheckRecord(boolean checkRecord) {
        _checkRecord = checkRecord;
    }

    @Override
    public IvldDemandForecast toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (IvldDemandForecast) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        IvldDemandForecastImpl ivldDemandForecastImpl = new IvldDemandForecastImpl();

        ivldDemandForecastImpl.setForecastYear(getForecastYear());
        ivldDemandForecastImpl.setGrossUnits(getGrossUnits());
        ivldDemandForecastImpl.setTotalDemandUnits(getTotalDemandUnits());
        ivldDemandForecastImpl.setItemId(getItemId());
        ivldDemandForecastImpl.setModifiedDate(getModifiedDate());
        ivldDemandForecastImpl.setOrganizationKey(getOrganizationKey());
        ivldDemandForecastImpl.setIvldDemandForecastSid(getIvldDemandForecastSid());
        ivldDemandForecastImpl.setSource(getSource());
        ivldDemandForecastImpl.setMarketShareRatio(getMarketShareRatio());
        ivldDemandForecastImpl.setCreatedBy(getCreatedBy());
        ivldDemandForecastImpl.setCreatedDate(getCreatedDate());
        ivldDemandForecastImpl.setAddChgDelIndicator(getAddChgDelIndicator());
        ivldDemandForecastImpl.setItemIdentifier(getItemIdentifier());
        ivldDemandForecastImpl.setErrorCode(getErrorCode());
        ivldDemandForecastImpl.setIntfInsertedDate(getIntfInsertedDate());
        ivldDemandForecastImpl.setModifiedBy(getModifiedBy());
        ivldDemandForecastImpl.setMarketShareUnits(getMarketShareUnits());
        ivldDemandForecastImpl.setInventoryUnitChange(getInventoryUnitChange());
        ivldDemandForecastImpl.setReprocessedFlag(getReprocessedFlag());
        ivldDemandForecastImpl.setUncapturedUnitsRatio(getUncapturedUnitsRatio());
        ivldDemandForecastImpl.setReasonForFailure(getReasonForFailure());
        ivldDemandForecastImpl.setCountry(getCountry());
        ivldDemandForecastImpl.setForecastType(getForecastType());
        ivldDemandForecastImpl.setBrandId(getBrandId());
        ivldDemandForecastImpl.setDemandForecastInterfaceId(getDemandForecastInterfaceId());
        ivldDemandForecastImpl.setUncapturedUnits(getUncapturedUnits());
        ivldDemandForecastImpl.setGrossPrice(getGrossPrice());
        ivldDemandForecastImpl.setGrossAmount(getGrossAmount());
        ivldDemandForecastImpl.setItemIdentifierCodeQualifier(getItemIdentifierCodeQualifier());
        ivldDemandForecastImpl.setForecastVer(getForecastVer());
        ivldDemandForecastImpl.setBatchId(getBatchId());
        ivldDemandForecastImpl.setForecastMonth(getForecastMonth());
        ivldDemandForecastImpl.setErrorField(getErrorField());
        ivldDemandForecastImpl.setNetSalesPrice(getNetSalesPrice());
        ivldDemandForecastImpl.setNetSalesAmount(getNetSalesAmount());
        ivldDemandForecastImpl.setSegment(getSegment());
        ivldDemandForecastImpl.setTotalDemandAmount(getTotalDemandAmount());
        ivldDemandForecastImpl.setForecastName(getForecastName());
        ivldDemandForecastImpl.setMarketSizeUnits(getMarketSizeUnits());
        ivldDemandForecastImpl.setCheckRecord(getCheckRecord());

        ivldDemandForecastImpl.resetOriginalValues();

        return ivldDemandForecastImpl;
    }

    @Override
    public int compareTo(IvldDemandForecast ivldDemandForecast) {
        int primaryKey = ivldDemandForecast.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof IvldDemandForecast)) {
            return false;
        }

        IvldDemandForecast ivldDemandForecast = (IvldDemandForecast) obj;

        int primaryKey = ivldDemandForecast.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<IvldDemandForecast> toCacheModel() {
        IvldDemandForecastCacheModel ivldDemandForecastCacheModel = new IvldDemandForecastCacheModel();

        ivldDemandForecastCacheModel.forecastYear = getForecastYear();

        String forecastYear = ivldDemandForecastCacheModel.forecastYear;

        if ((forecastYear != null) && (forecastYear.length() == 0)) {
            ivldDemandForecastCacheModel.forecastYear = null;
        }

        ivldDemandForecastCacheModel.grossUnits = getGrossUnits();

        String grossUnits = ivldDemandForecastCacheModel.grossUnits;

        if ((grossUnits != null) && (grossUnits.length() == 0)) {
            ivldDemandForecastCacheModel.grossUnits = null;
        }

        ivldDemandForecastCacheModel.totalDemandUnits = getTotalDemandUnits();

        String totalDemandUnits = ivldDemandForecastCacheModel.totalDemandUnits;

        if ((totalDemandUnits != null) && (totalDemandUnits.length() == 0)) {
            ivldDemandForecastCacheModel.totalDemandUnits = null;
        }

        ivldDemandForecastCacheModel.itemId = getItemId();

        String itemId = ivldDemandForecastCacheModel.itemId;

        if ((itemId != null) && (itemId.length() == 0)) {
            ivldDemandForecastCacheModel.itemId = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            ivldDemandForecastCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            ivldDemandForecastCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        ivldDemandForecastCacheModel.organizationKey = getOrganizationKey();

        String organizationKey = ivldDemandForecastCacheModel.organizationKey;

        if ((organizationKey != null) && (organizationKey.length() == 0)) {
            ivldDemandForecastCacheModel.organizationKey = null;
        }

        ivldDemandForecastCacheModel.ivldDemandForecastSid = getIvldDemandForecastSid();

        ivldDemandForecastCacheModel.source = getSource();

        String source = ivldDemandForecastCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            ivldDemandForecastCacheModel.source = null;
        }

        ivldDemandForecastCacheModel.marketShareRatio = getMarketShareRatio();

        String marketShareRatio = ivldDemandForecastCacheModel.marketShareRatio;

        if ((marketShareRatio != null) && (marketShareRatio.length() == 0)) {
            ivldDemandForecastCacheModel.marketShareRatio = null;
        }

        ivldDemandForecastCacheModel.createdBy = getCreatedBy();

        String createdBy = ivldDemandForecastCacheModel.createdBy;

        if ((createdBy != null) && (createdBy.length() == 0)) {
            ivldDemandForecastCacheModel.createdBy = null;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            ivldDemandForecastCacheModel.createdDate = createdDate.getTime();
        } else {
            ivldDemandForecastCacheModel.createdDate = Long.MIN_VALUE;
        }

        ivldDemandForecastCacheModel.addChgDelIndicator = getAddChgDelIndicator();

        String addChgDelIndicator = ivldDemandForecastCacheModel.addChgDelIndicator;

        if ((addChgDelIndicator != null) && (addChgDelIndicator.length() == 0)) {
            ivldDemandForecastCacheModel.addChgDelIndicator = null;
        }

        ivldDemandForecastCacheModel.itemIdentifier = getItemIdentifier();

        String itemIdentifier = ivldDemandForecastCacheModel.itemIdentifier;

        if ((itemIdentifier != null) && (itemIdentifier.length() == 0)) {
            ivldDemandForecastCacheModel.itemIdentifier = null;
        }

        ivldDemandForecastCacheModel.errorCode = getErrorCode();

        String errorCode = ivldDemandForecastCacheModel.errorCode;

        if ((errorCode != null) && (errorCode.length() == 0)) {
            ivldDemandForecastCacheModel.errorCode = null;
        }

        ivldDemandForecastCacheModel.intfInsertedDate = getIntfInsertedDate();

        String intfInsertedDate = ivldDemandForecastCacheModel.intfInsertedDate;

        if ((intfInsertedDate != null) && (intfInsertedDate.length() == 0)) {
            ivldDemandForecastCacheModel.intfInsertedDate = null;
        }

        ivldDemandForecastCacheModel.modifiedBy = getModifiedBy();

        String modifiedBy = ivldDemandForecastCacheModel.modifiedBy;

        if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
            ivldDemandForecastCacheModel.modifiedBy = null;
        }

        ivldDemandForecastCacheModel.marketShareUnits = getMarketShareUnits();

        String marketShareUnits = ivldDemandForecastCacheModel.marketShareUnits;

        if ((marketShareUnits != null) && (marketShareUnits.length() == 0)) {
            ivldDemandForecastCacheModel.marketShareUnits = null;
        }

        ivldDemandForecastCacheModel.inventoryUnitChange = getInventoryUnitChange();

        String inventoryUnitChange = ivldDemandForecastCacheModel.inventoryUnitChange;

        if ((inventoryUnitChange != null) &&
                (inventoryUnitChange.length() == 0)) {
            ivldDemandForecastCacheModel.inventoryUnitChange = null;
        }

        ivldDemandForecastCacheModel.reprocessedFlag = getReprocessedFlag();

        String reprocessedFlag = ivldDemandForecastCacheModel.reprocessedFlag;

        if ((reprocessedFlag != null) && (reprocessedFlag.length() == 0)) {
            ivldDemandForecastCacheModel.reprocessedFlag = null;
        }

        ivldDemandForecastCacheModel.uncapturedUnitsRatio = getUncapturedUnitsRatio();

        String uncapturedUnitsRatio = ivldDemandForecastCacheModel.uncapturedUnitsRatio;

        if ((uncapturedUnitsRatio != null) &&
                (uncapturedUnitsRatio.length() == 0)) {
            ivldDemandForecastCacheModel.uncapturedUnitsRatio = null;
        }

        ivldDemandForecastCacheModel.reasonForFailure = getReasonForFailure();

        String reasonForFailure = ivldDemandForecastCacheModel.reasonForFailure;

        if ((reasonForFailure != null) && (reasonForFailure.length() == 0)) {
            ivldDemandForecastCacheModel.reasonForFailure = null;
        }

        ivldDemandForecastCacheModel.country = getCountry();

        String country = ivldDemandForecastCacheModel.country;

        if ((country != null) && (country.length() == 0)) {
            ivldDemandForecastCacheModel.country = null;
        }

        ivldDemandForecastCacheModel.forecastType = getForecastType();

        String forecastType = ivldDemandForecastCacheModel.forecastType;

        if ((forecastType != null) && (forecastType.length() == 0)) {
            ivldDemandForecastCacheModel.forecastType = null;
        }

        ivldDemandForecastCacheModel.brandId = getBrandId();

        String brandId = ivldDemandForecastCacheModel.brandId;

        if ((brandId != null) && (brandId.length() == 0)) {
            ivldDemandForecastCacheModel.brandId = null;
        }

        ivldDemandForecastCacheModel.demandForecastInterfaceId = getDemandForecastInterfaceId();

        String demandForecastInterfaceId = ivldDemandForecastCacheModel.demandForecastInterfaceId;

        if ((demandForecastInterfaceId != null) &&
                (demandForecastInterfaceId.length() == 0)) {
            ivldDemandForecastCacheModel.demandForecastInterfaceId = null;
        }

        ivldDemandForecastCacheModel.uncapturedUnits = getUncapturedUnits();

        String uncapturedUnits = ivldDemandForecastCacheModel.uncapturedUnits;

        if ((uncapturedUnits != null) && (uncapturedUnits.length() == 0)) {
            ivldDemandForecastCacheModel.uncapturedUnits = null;
        }

        ivldDemandForecastCacheModel.grossPrice = getGrossPrice();

        String grossPrice = ivldDemandForecastCacheModel.grossPrice;

        if ((grossPrice != null) && (grossPrice.length() == 0)) {
            ivldDemandForecastCacheModel.grossPrice = null;
        }

        ivldDemandForecastCacheModel.grossAmount = getGrossAmount();

        String grossAmount = ivldDemandForecastCacheModel.grossAmount;

        if ((grossAmount != null) && (grossAmount.length() == 0)) {
            ivldDemandForecastCacheModel.grossAmount = null;
        }

        ivldDemandForecastCacheModel.itemIdentifierCodeQualifier = getItemIdentifierCodeQualifier();

        String itemIdentifierCodeQualifier = ivldDemandForecastCacheModel.itemIdentifierCodeQualifier;

        if ((itemIdentifierCodeQualifier != null) &&
                (itemIdentifierCodeQualifier.length() == 0)) {
            ivldDemandForecastCacheModel.itemIdentifierCodeQualifier = null;
        }

        ivldDemandForecastCacheModel.forecastVer = getForecastVer();

        String forecastVer = ivldDemandForecastCacheModel.forecastVer;

        if ((forecastVer != null) && (forecastVer.length() == 0)) {
            ivldDemandForecastCacheModel.forecastVer = null;
        }

        ivldDemandForecastCacheModel.batchId = getBatchId();

        String batchId = ivldDemandForecastCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            ivldDemandForecastCacheModel.batchId = null;
        }

        ivldDemandForecastCacheModel.forecastMonth = getForecastMonth();

        String forecastMonth = ivldDemandForecastCacheModel.forecastMonth;

        if ((forecastMonth != null) && (forecastMonth.length() == 0)) {
            ivldDemandForecastCacheModel.forecastMonth = null;
        }

        ivldDemandForecastCacheModel.errorField = getErrorField();

        String errorField = ivldDemandForecastCacheModel.errorField;

        if ((errorField != null) && (errorField.length() == 0)) {
            ivldDemandForecastCacheModel.errorField = null;
        }

        ivldDemandForecastCacheModel.netSalesPrice = getNetSalesPrice();

        String netSalesPrice = ivldDemandForecastCacheModel.netSalesPrice;

        if ((netSalesPrice != null) && (netSalesPrice.length() == 0)) {
            ivldDemandForecastCacheModel.netSalesPrice = null;
        }

        ivldDemandForecastCacheModel.netSalesAmount = getNetSalesAmount();

        String netSalesAmount = ivldDemandForecastCacheModel.netSalesAmount;

        if ((netSalesAmount != null) && (netSalesAmount.length() == 0)) {
            ivldDemandForecastCacheModel.netSalesAmount = null;
        }

        ivldDemandForecastCacheModel.segment = getSegment();

        String segment = ivldDemandForecastCacheModel.segment;

        if ((segment != null) && (segment.length() == 0)) {
            ivldDemandForecastCacheModel.segment = null;
        }

        ivldDemandForecastCacheModel.totalDemandAmount = getTotalDemandAmount();

        String totalDemandAmount = ivldDemandForecastCacheModel.totalDemandAmount;

        if ((totalDemandAmount != null) && (totalDemandAmount.length() == 0)) {
            ivldDemandForecastCacheModel.totalDemandAmount = null;
        }

        ivldDemandForecastCacheModel.forecastName = getForecastName();

        String forecastName = ivldDemandForecastCacheModel.forecastName;

        if ((forecastName != null) && (forecastName.length() == 0)) {
            ivldDemandForecastCacheModel.forecastName = null;
        }

        ivldDemandForecastCacheModel.marketSizeUnits = getMarketSizeUnits();

        String marketSizeUnits = ivldDemandForecastCacheModel.marketSizeUnits;

        if ((marketSizeUnits != null) && (marketSizeUnits.length() == 0)) {
            ivldDemandForecastCacheModel.marketSizeUnits = null;
        }

        ivldDemandForecastCacheModel.checkRecord = getCheckRecord();

        return ivldDemandForecastCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(81);

        sb.append("{forecastYear=");
        sb.append(getForecastYear());
        sb.append(", grossUnits=");
        sb.append(getGrossUnits());
        sb.append(", totalDemandUnits=");
        sb.append(getTotalDemandUnits());
        sb.append(", itemId=");
        sb.append(getItemId());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", organizationKey=");
        sb.append(getOrganizationKey());
        sb.append(", ivldDemandForecastSid=");
        sb.append(getIvldDemandForecastSid());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", marketShareRatio=");
        sb.append(getMarketShareRatio());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", addChgDelIndicator=");
        sb.append(getAddChgDelIndicator());
        sb.append(", itemIdentifier=");
        sb.append(getItemIdentifier());
        sb.append(", errorCode=");
        sb.append(getErrorCode());
        sb.append(", intfInsertedDate=");
        sb.append(getIntfInsertedDate());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", marketShareUnits=");
        sb.append(getMarketShareUnits());
        sb.append(", inventoryUnitChange=");
        sb.append(getInventoryUnitChange());
        sb.append(", reprocessedFlag=");
        sb.append(getReprocessedFlag());
        sb.append(", uncapturedUnitsRatio=");
        sb.append(getUncapturedUnitsRatio());
        sb.append(", reasonForFailure=");
        sb.append(getReasonForFailure());
        sb.append(", country=");
        sb.append(getCountry());
        sb.append(", forecastType=");
        sb.append(getForecastType());
        sb.append(", brandId=");
        sb.append(getBrandId());
        sb.append(", demandForecastInterfaceId=");
        sb.append(getDemandForecastInterfaceId());
        sb.append(", uncapturedUnits=");
        sb.append(getUncapturedUnits());
        sb.append(", grossPrice=");
        sb.append(getGrossPrice());
        sb.append(", grossAmount=");
        sb.append(getGrossAmount());
        sb.append(", itemIdentifierCodeQualifier=");
        sb.append(getItemIdentifierCodeQualifier());
        sb.append(", forecastVer=");
        sb.append(getForecastVer());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", forecastMonth=");
        sb.append(getForecastMonth());
        sb.append(", errorField=");
        sb.append(getErrorField());
        sb.append(", netSalesPrice=");
        sb.append(getNetSalesPrice());
        sb.append(", netSalesAmount=");
        sb.append(getNetSalesAmount());
        sb.append(", segment=");
        sb.append(getSegment());
        sb.append(", totalDemandAmount=");
        sb.append(getTotalDemandAmount());
        sb.append(", forecastName=");
        sb.append(getForecastName());
        sb.append(", marketSizeUnits=");
        sb.append(getMarketSizeUnits());
        sb.append(", checkRecord=");
        sb.append(getCheckRecord());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(124);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.IvldDemandForecast");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>forecastYear</column-name><column-value><![CDATA[");
        sb.append(getForecastYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grossUnits</column-name><column-value><![CDATA[");
        sb.append(getGrossUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>totalDemandUnits</column-name><column-value><![CDATA[");
        sb.append(getTotalDemandUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemId</column-name><column-value><![CDATA[");
        sb.append(getItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationKey</column-name><column-value><![CDATA[");
        sb.append(getOrganizationKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ivldDemandForecastSid</column-name><column-value><![CDATA[");
        sb.append(getIvldDemandForecastSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketShareRatio</column-name><column-value><![CDATA[");
        sb.append(getMarketShareRatio());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>addChgDelIndicator</column-name><column-value><![CDATA[");
        sb.append(getAddChgDelIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemIdentifier</column-name><column-value><![CDATA[");
        sb.append(getItemIdentifier());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>errorCode</column-name><column-value><![CDATA[");
        sb.append(getErrorCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>intfInsertedDate</column-name><column-value><![CDATA[");
        sb.append(getIntfInsertedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketShareUnits</column-name><column-value><![CDATA[");
        sb.append(getMarketShareUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inventoryUnitChange</column-name><column-value><![CDATA[");
        sb.append(getInventoryUnitChange());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reprocessedFlag</column-name><column-value><![CDATA[");
        sb.append(getReprocessedFlag());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>uncapturedUnitsRatio</column-name><column-value><![CDATA[");
        sb.append(getUncapturedUnitsRatio());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reasonForFailure</column-name><column-value><![CDATA[");
        sb.append(getReasonForFailure());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>country</column-name><column-value><![CDATA[");
        sb.append(getCountry());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastType</column-name><column-value><![CDATA[");
        sb.append(getForecastType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandId</column-name><column-value><![CDATA[");
        sb.append(getBrandId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>demandForecastInterfaceId</column-name><column-value><![CDATA[");
        sb.append(getDemandForecastInterfaceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>uncapturedUnits</column-name><column-value><![CDATA[");
        sb.append(getUncapturedUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grossPrice</column-name><column-value><![CDATA[");
        sb.append(getGrossPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grossAmount</column-name><column-value><![CDATA[");
        sb.append(getGrossAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemIdentifierCodeQualifier</column-name><column-value><![CDATA[");
        sb.append(getItemIdentifierCodeQualifier());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastVer</column-name><column-value><![CDATA[");
        sb.append(getForecastVer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastMonth</column-name><column-value><![CDATA[");
        sb.append(getForecastMonth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>errorField</column-name><column-value><![CDATA[");
        sb.append(getErrorField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>netSalesPrice</column-name><column-value><![CDATA[");
        sb.append(getNetSalesPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>netSalesAmount</column-name><column-value><![CDATA[");
        sb.append(getNetSalesAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>segment</column-name><column-value><![CDATA[");
        sb.append(getSegment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>totalDemandAmount</column-name><column-value><![CDATA[");
        sb.append(getTotalDemandAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastName</column-name><column-value><![CDATA[");
        sb.append(getForecastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketSizeUnits</column-name><column-value><![CDATA[");
        sb.append(getMarketSizeUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>checkRecord</column-name><column-value><![CDATA[");
        sb.append(getCheckRecord());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
