/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.PsContractDetails;
import com.stpl.app.model.PsContractDetailsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PsContractDetails service. Represents a row in the &quot;PS_CONTRACT_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PsContractDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PsContractDetailsImpl}.
 * </p>
 *
 * @author
 * @see PsContractDetailsImpl
 * @see PsContractDetails
 * @see PsContractDetailsModel
 * @generated
 */
@ProviderType
public class PsContractDetailsModelImpl extends BaseModelImpl<PsContractDetails>
	implements PsContractDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ps contract details model instance should use the {@link PsContractDetails} interface instead.
	 */
	public static final String TABLE_NAME = "PS_CONTRACT_DETAILS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PRICE", Types.DOUBLE },
			{ "ITEM_MASTER_SID", Types.INTEGER },
			{ "PRICE_PROTECTION_START_DATE", Types.TIMESTAMP },
			{ "BASE_PRICE", Types.DOUBLE },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "REVISION_DATE", Types.TIMESTAMP },
			{ "PRICE_TOLERANCE", Types.DOUBLE },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "SOURCE", Types.VARCHAR },
			{ "CREATED_BY", Types.INTEGER },
			{ "SUGGESTED_PRICE", Types.DOUBLE },
			{ "PS_CONTRACT_ATTACHED_DATE", Types.TIMESTAMP },
			{ "PS_CONTRACT_DETAILS_SID", Types.INTEGER },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "INBOUND_STATUS", Types.VARCHAR },
			{ "CONTRACT_PRICE", Types.DOUBLE },
			{ "PRICE_TOLERANCE_TYPE", Types.INTEGER },
			{ "ITEM_PRICING_QUALIFIER_SID", Types.INTEGER },
			{ "CONTRACT_PRICE_END_DATE", Types.TIMESTAMP },
			{ "PRICE_TOLERANCE_FREQUENCY", Types.INTEGER },
			{ "CONTRACT_PRICE_START_DATE", Types.TIMESTAMP },
			{ "PS_CONTRACT_SID", Types.INTEGER },
			{ "PRICE_PROTECTION_END_DATE", Types.TIMESTAMP },
			{ "PS_CONTRACT_ATTACHED_STATUS", Types.INTEGER },
			{ "RECORD_LOCK_STATUS", Types.BOOLEAN },
			{ "BATCH_ID", Types.VARCHAR },
			{ "PRICE_TOLERANCE_INTERVAL", Types.INTEGER },
			{ "PRICE_REVISION", Types.DOUBLE },
			{ "BRAND_MASTER_SID", Types.VARCHAR },
			{ "NEP", Types.DOUBLE },
			{ "PRICE_PROTECTION_STATUS", Types.INTEGER },
			{ "PRICE_PROTECTION_PRICE_TYPE", Types.INTEGER },
			{ "NEP_FORMULA", Types.INTEGER },
			{ "MAX_INCREMENTAL_CHANGE", Types.DOUBLE },
			{ "RESET_ELIGIBLE", Types.INTEGER },
			{ "RESET_TYPE", Types.INTEGER },
			{ "RESET_DATE", Types.TIMESTAMP },
			{ "RESET_INTERVAL", Types.INTEGER },
			{ "RESET_FREQUENCY", Types.INTEGER },
			{ "NET_PRICE_TYPE", Types.INTEGER },
			{ "NET_PRICE_TYPE_FORMULA", Types.VARCHAR },
			{ "BASE_PRICE_TYPE", Types.INTEGER },
			{ "BASE_PRICE_ENTRY", Types.DOUBLE },
			{ "BASE_PRICE_DATE", Types.TIMESTAMP },
			{ "BASE_PRICE_DDLB", Types.INTEGER },
			{ "NET_BASE_PRICE", Types.INTEGER },
			{ "NET_BASE_PRICE_FORMULA_ID", Types.INTEGER },
			{ "SUBSEQUENT_PERIOD_PRICE_TYPE", Types.INTEGER },
			{ "NET_SUBSEQUENT_PERIOD_PRICE", Types.INTEGER },
			{ "NET_SUBSEQUENT_PRICE_FORMULA_ID", Types.INTEGER },
			{ "RESET_PRICE_TYPE", Types.INTEGER },
			{ "NET_RESET_PRICE_TYPE", Types.INTEGER },
			{ "NET_RESET_PRICE_FORMULA_ID", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ITEM_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE_PROTECTION_START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("BASE_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("REVISION_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PRICE_TOLERANCE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SUGGESTED_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PS_CONTRACT_ATTACHED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PS_CONTRACT_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CONTRACT_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PRICE_TOLERANCE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ITEM_PRICING_QUALIFIER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CONTRACT_PRICE_END_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PRICE_TOLERANCE_FREQUENCY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CONTRACT_PRICE_START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PS_CONTRACT_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE_PROTECTION_END_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PS_CONTRACT_ATTACHED_STATUS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RECORD_LOCK_STATUS", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PRICE_TOLERANCE_INTERVAL", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE_REVISION", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("BRAND_MASTER_SID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NEP", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PRICE_PROTECTION_STATUS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE_PROTECTION_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NEP_FORMULA", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MAX_INCREMENTAL_CHANGE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("RESET_ELIGIBLE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RESET_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RESET_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("RESET_INTERVAL", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RESET_FREQUENCY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_PRICE_TYPE_FORMULA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BASE_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BASE_PRICE_ENTRY", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("BASE_PRICE_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("BASE_PRICE_DDLB", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_BASE_PRICE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_BASE_PRICE_FORMULA_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SUBSEQUENT_PERIOD_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_SUBSEQUENT_PERIOD_PRICE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_SUBSEQUENT_PRICE_FORMULA_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RESET_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_RESET_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_RESET_PRICE_FORMULA_ID", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table PS_CONTRACT_DETAILS (PRICE DOUBLE,ITEM_MASTER_SID INTEGER,PRICE_PROTECTION_START_DATE DATE null,BASE_PRICE DOUBLE,MODIFIED_DATE DATE null,REVISION_DATE DATE null,PRICE_TOLERANCE DOUBLE,CREATED_DATE DATE null,SOURCE VARCHAR(75) null,CREATED_BY INTEGER,SUGGESTED_PRICE DOUBLE,PS_CONTRACT_ATTACHED_DATE DATE null,PS_CONTRACT_DETAILS_SID INTEGER not null primary key IDENTITY,MODIFIED_BY INTEGER,INBOUND_STATUS VARCHAR(75) null,CONTRACT_PRICE DOUBLE,PRICE_TOLERANCE_TYPE INTEGER,ITEM_PRICING_QUALIFIER_SID INTEGER,CONTRACT_PRICE_END_DATE DATE null,PRICE_TOLERANCE_FREQUENCY INTEGER,CONTRACT_PRICE_START_DATE DATE null,PS_CONTRACT_SID INTEGER,PRICE_PROTECTION_END_DATE DATE null,PS_CONTRACT_ATTACHED_STATUS INTEGER,RECORD_LOCK_STATUS BOOLEAN,BATCH_ID VARCHAR(75) null,PRICE_TOLERANCE_INTERVAL INTEGER,PRICE_REVISION DOUBLE,BRAND_MASTER_SID VARCHAR(75) null,NEP DOUBLE,PRICE_PROTECTION_STATUS INTEGER,PRICE_PROTECTION_PRICE_TYPE INTEGER,NEP_FORMULA INTEGER,MAX_INCREMENTAL_CHANGE DOUBLE,RESET_ELIGIBLE INTEGER,RESET_TYPE INTEGER,RESET_DATE DATE null,RESET_INTERVAL INTEGER,RESET_FREQUENCY INTEGER,NET_PRICE_TYPE INTEGER,NET_PRICE_TYPE_FORMULA VARCHAR(75) null,BASE_PRICE_TYPE INTEGER,BASE_PRICE_ENTRY DOUBLE,BASE_PRICE_DATE DATE null,BASE_PRICE_DDLB INTEGER,NET_BASE_PRICE INTEGER,NET_BASE_PRICE_FORMULA_ID INTEGER,SUBSEQUENT_PERIOD_PRICE_TYPE INTEGER,NET_SUBSEQUENT_PERIOD_PRICE INTEGER,NET_SUBSEQUENT_PRICE_FORMULA_ID INTEGER,RESET_PRICE_TYPE INTEGER,NET_RESET_PRICE_TYPE INTEGER,NET_RESET_PRICE_FORMULA_ID INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table PS_CONTRACT_DETAILS";
	public static final String ORDER_BY_JPQL = " ORDER BY psContractDetails.psContractDetailsSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PS_CONTRACT_DETAILS.PS_CONTRACT_DETAILS_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.PsContractDetails"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.PsContractDetails"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.PsContractDetails"));

	public PsContractDetailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _psContractDetailsSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setPsContractDetailsSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _psContractDetailsSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PsContractDetails.class;
	}

	@Override
	public String getModelClassName() {
		return PsContractDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("price", getPrice());
		attributes.put("itemMasterSid", getItemMasterSid());
		attributes.put("priceProtectionStartDate", getPriceProtectionStartDate());
		attributes.put("basePrice", getBasePrice());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("revisionDate", getRevisionDate());
		attributes.put("priceTolerance", getPriceTolerance());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("source", getSource());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("suggestedPrice", getSuggestedPrice());
		attributes.put("psContractAttachedDate", getPsContractAttachedDate());
		attributes.put("psContractDetailsSid", getPsContractDetailsSid());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("inboundStatus", getInboundStatus());
		attributes.put("contractPrice", getContractPrice());
		attributes.put("priceToleranceType", getPriceToleranceType());
		attributes.put("itemPricingQualifierSid", getItemPricingQualifierSid());
		attributes.put("contractPriceEndDate", getContractPriceEndDate());
		attributes.put("priceToleranceFrequency", getPriceToleranceFrequency());
		attributes.put("contractPriceStartDate", getContractPriceStartDate());
		attributes.put("psContractSid", getPsContractSid());
		attributes.put("priceProtectionEndDate", getPriceProtectionEndDate());
		attributes.put("psContractAttachedStatus", getPsContractAttachedStatus());
		attributes.put("recordLockStatus", getRecordLockStatus());
		attributes.put("batchId", getBatchId());
		attributes.put("priceToleranceInterval", getPriceToleranceInterval());
		attributes.put("priceRevision", getPriceRevision());
		attributes.put("brandMasterSid", getBrandMasterSid());
		attributes.put("nep", getNep());
		attributes.put("priceProtectionStatus", getPriceProtectionStatus());
		attributes.put("priceProtectionPriceType", getPriceProtectionPriceType());
		attributes.put("nepFormula", getNepFormula());
		attributes.put("maxIncrementalChange", getMaxIncrementalChange());
		attributes.put("resetEligible", getResetEligible());
		attributes.put("resetType", getResetType());
		attributes.put("resetDate", getResetDate());
		attributes.put("resetInterval", getResetInterval());
		attributes.put("resetFrequency", getResetFrequency());
		attributes.put("netPriceType", getNetPriceType());
		attributes.put("netPriceTypeFormula", getNetPriceTypeFormula());
		attributes.put("basePriceType", getBasePriceType());
		attributes.put("basePriceEntry", getBasePriceEntry());
		attributes.put("basePriceDate", getBasePriceDate());
		attributes.put("basePriceDdlb", getBasePriceDdlb());
		attributes.put("netBasePrice", getNetBasePrice());
		attributes.put("netBasePriceFormulaId", getNetBasePriceFormulaId());
		attributes.put("subsequentPeriodPriceType",
			getSubsequentPeriodPriceType());
		attributes.put("netSubsequentPeriodPrice", getNetSubsequentPeriodPrice());
		attributes.put("netSubsequentPriceFormulaId",
			getNetSubsequentPriceFormulaId());
		attributes.put("resetPriceType", getResetPriceType());
		attributes.put("netResetPriceType", getNetResetPriceType());
		attributes.put("netResetPriceFormulaId", getNetResetPriceFormulaId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Double price = (Double)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		Integer itemMasterSid = (Integer)attributes.get("itemMasterSid");

		if (itemMasterSid != null) {
			setItemMasterSid(itemMasterSid);
		}

		Date priceProtectionStartDate = (Date)attributes.get(
				"priceProtectionStartDate");

		if (priceProtectionStartDate != null) {
			setPriceProtectionStartDate(priceProtectionStartDate);
		}

		Double basePrice = (Double)attributes.get("basePrice");

		if (basePrice != null) {
			setBasePrice(basePrice);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date revisionDate = (Date)attributes.get("revisionDate");

		if (revisionDate != null) {
			setRevisionDate(revisionDate);
		}

		Double priceTolerance = (Double)attributes.get("priceTolerance");

		if (priceTolerance != null) {
			setPriceTolerance(priceTolerance);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Double suggestedPrice = (Double)attributes.get("suggestedPrice");

		if (suggestedPrice != null) {
			setSuggestedPrice(suggestedPrice);
		}

		Date psContractAttachedDate = (Date)attributes.get(
				"psContractAttachedDate");

		if (psContractAttachedDate != null) {
			setPsContractAttachedDate(psContractAttachedDate);
		}

		Integer psContractDetailsSid = (Integer)attributes.get(
				"psContractDetailsSid");

		if (psContractDetailsSid != null) {
			setPsContractDetailsSid(psContractDetailsSid);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}

		Double contractPrice = (Double)attributes.get("contractPrice");

		if (contractPrice != null) {
			setContractPrice(contractPrice);
		}

		Integer priceToleranceType = (Integer)attributes.get(
				"priceToleranceType");

		if (priceToleranceType != null) {
			setPriceToleranceType(priceToleranceType);
		}

		Integer itemPricingQualifierSid = (Integer)attributes.get(
				"itemPricingQualifierSid");

		if (itemPricingQualifierSid != null) {
			setItemPricingQualifierSid(itemPricingQualifierSid);
		}

		Date contractPriceEndDate = (Date)attributes.get("contractPriceEndDate");

		if (contractPriceEndDate != null) {
			setContractPriceEndDate(contractPriceEndDate);
		}

		Integer priceToleranceFrequency = (Integer)attributes.get(
				"priceToleranceFrequency");

		if (priceToleranceFrequency != null) {
			setPriceToleranceFrequency(priceToleranceFrequency);
		}

		Date contractPriceStartDate = (Date)attributes.get(
				"contractPriceStartDate");

		if (contractPriceStartDate != null) {
			setContractPriceStartDate(contractPriceStartDate);
		}

		Integer psContractSid = (Integer)attributes.get("psContractSid");

		if (psContractSid != null) {
			setPsContractSid(psContractSid);
		}

		Date priceProtectionEndDate = (Date)attributes.get(
				"priceProtectionEndDate");

		if (priceProtectionEndDate != null) {
			setPriceProtectionEndDate(priceProtectionEndDate);
		}

		Integer psContractAttachedStatus = (Integer)attributes.get(
				"psContractAttachedStatus");

		if (psContractAttachedStatus != null) {
			setPsContractAttachedStatus(psContractAttachedStatus);
		}

		Boolean recordLockStatus = (Boolean)attributes.get("recordLockStatus");

		if (recordLockStatus != null) {
			setRecordLockStatus(recordLockStatus);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		Integer priceToleranceInterval = (Integer)attributes.get(
				"priceToleranceInterval");

		if (priceToleranceInterval != null) {
			setPriceToleranceInterval(priceToleranceInterval);
		}

		Double priceRevision = (Double)attributes.get("priceRevision");

		if (priceRevision != null) {
			setPriceRevision(priceRevision);
		}

		String brandMasterSid = (String)attributes.get("brandMasterSid");

		if (brandMasterSid != null) {
			setBrandMasterSid(brandMasterSid);
		}

		Double nep = (Double)attributes.get("nep");

		if (nep != null) {
			setNep(nep);
		}

		Integer priceProtectionStatus = (Integer)attributes.get(
				"priceProtectionStatus");

		if (priceProtectionStatus != null) {
			setPriceProtectionStatus(priceProtectionStatus);
		}

		Integer priceProtectionPriceType = (Integer)attributes.get(
				"priceProtectionPriceType");

		if (priceProtectionPriceType != null) {
			setPriceProtectionPriceType(priceProtectionPriceType);
		}

		Integer nepFormula = (Integer)attributes.get("nepFormula");

		if (nepFormula != null) {
			setNepFormula(nepFormula);
		}

		Double maxIncrementalChange = (Double)attributes.get(
				"maxIncrementalChange");

		if (maxIncrementalChange != null) {
			setMaxIncrementalChange(maxIncrementalChange);
		}

		Integer resetEligible = (Integer)attributes.get("resetEligible");

		if (resetEligible != null) {
			setResetEligible(resetEligible);
		}

		Integer resetType = (Integer)attributes.get("resetType");

		if (resetType != null) {
			setResetType(resetType);
		}

		Date resetDate = (Date)attributes.get("resetDate");

		if (resetDate != null) {
			setResetDate(resetDate);
		}

		Integer resetInterval = (Integer)attributes.get("resetInterval");

		if (resetInterval != null) {
			setResetInterval(resetInterval);
		}

		Integer resetFrequency = (Integer)attributes.get("resetFrequency");

		if (resetFrequency != null) {
			setResetFrequency(resetFrequency);
		}

		Integer netPriceType = (Integer)attributes.get("netPriceType");

		if (netPriceType != null) {
			setNetPriceType(netPriceType);
		}

		String netPriceTypeFormula = (String)attributes.get(
				"netPriceTypeFormula");

		if (netPriceTypeFormula != null) {
			setNetPriceTypeFormula(netPriceTypeFormula);
		}

		Integer basePriceType = (Integer)attributes.get("basePriceType");

		if (basePriceType != null) {
			setBasePriceType(basePriceType);
		}

		Double basePriceEntry = (Double)attributes.get("basePriceEntry");

		if (basePriceEntry != null) {
			setBasePriceEntry(basePriceEntry);
		}

		Date basePriceDate = (Date)attributes.get("basePriceDate");

		if (basePriceDate != null) {
			setBasePriceDate(basePriceDate);
		}

		Integer basePriceDdlb = (Integer)attributes.get("basePriceDdlb");

		if (basePriceDdlb != null) {
			setBasePriceDdlb(basePriceDdlb);
		}

		Integer netBasePrice = (Integer)attributes.get("netBasePrice");

		if (netBasePrice != null) {
			setNetBasePrice(netBasePrice);
		}

		Integer netBasePriceFormulaId = (Integer)attributes.get(
				"netBasePriceFormulaId");

		if (netBasePriceFormulaId != null) {
			setNetBasePriceFormulaId(netBasePriceFormulaId);
		}

		Integer subsequentPeriodPriceType = (Integer)attributes.get(
				"subsequentPeriodPriceType");

		if (subsequentPeriodPriceType != null) {
			setSubsequentPeriodPriceType(subsequentPeriodPriceType);
		}

		Integer netSubsequentPeriodPrice = (Integer)attributes.get(
				"netSubsequentPeriodPrice");

		if (netSubsequentPeriodPrice != null) {
			setNetSubsequentPeriodPrice(netSubsequentPeriodPrice);
		}

		Integer netSubsequentPriceFormulaId = (Integer)attributes.get(
				"netSubsequentPriceFormulaId");

		if (netSubsequentPriceFormulaId != null) {
			setNetSubsequentPriceFormulaId(netSubsequentPriceFormulaId);
		}

		Integer resetPriceType = (Integer)attributes.get("resetPriceType");

		if (resetPriceType != null) {
			setResetPriceType(resetPriceType);
		}

		Integer netResetPriceType = (Integer)attributes.get("netResetPriceType");

		if (netResetPriceType != null) {
			setNetResetPriceType(netResetPriceType);
		}

		Integer netResetPriceFormulaId = (Integer)attributes.get(
				"netResetPriceFormulaId");

		if (netResetPriceFormulaId != null) {
			setNetResetPriceFormulaId(netResetPriceFormulaId);
		}
	}

	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	@Override
	public int getItemMasterSid() {
		return _itemMasterSid;
	}

	@Override
	public void setItemMasterSid(int itemMasterSid) {
		_itemMasterSid = itemMasterSid;
	}

	@Override
	public Date getPriceProtectionStartDate() {
		return _priceProtectionStartDate;
	}

	@Override
	public void setPriceProtectionStartDate(Date priceProtectionStartDate) {
		_priceProtectionStartDate = priceProtectionStartDate;
	}

	@Override
	public double getBasePrice() {
		return _basePrice;
	}

	@Override
	public void setBasePrice(double basePrice) {
		_basePrice = basePrice;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getRevisionDate() {
		return _revisionDate;
	}

	@Override
	public void setRevisionDate(Date revisionDate) {
		_revisionDate = revisionDate;
	}

	@Override
	public double getPriceTolerance() {
		return _priceTolerance;
	}

	@Override
	public void setPriceTolerance(double priceTolerance) {
		_priceTolerance = priceTolerance;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public double getSuggestedPrice() {
		return _suggestedPrice;
	}

	@Override
	public void setSuggestedPrice(double suggestedPrice) {
		_suggestedPrice = suggestedPrice;
	}

	@Override
	public Date getPsContractAttachedDate() {
		return _psContractAttachedDate;
	}

	@Override
	public void setPsContractAttachedDate(Date psContractAttachedDate) {
		_psContractAttachedDate = psContractAttachedDate;
	}

	@Override
	public int getPsContractDetailsSid() {
		return _psContractDetailsSid;
	}

	@Override
	public void setPsContractDetailsSid(int psContractDetailsSid) {
		_psContractDetailsSid = psContractDetailsSid;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	@Override
	public double getContractPrice() {
		return _contractPrice;
	}

	@Override
	public void setContractPrice(double contractPrice) {
		_contractPrice = contractPrice;
	}

	@Override
	public int getPriceToleranceType() {
		return _priceToleranceType;
	}

	@Override
	public void setPriceToleranceType(int priceToleranceType) {
		_priceToleranceType = priceToleranceType;
	}

	@Override
	public int getItemPricingQualifierSid() {
		return _itemPricingQualifierSid;
	}

	@Override
	public void setItemPricingQualifierSid(int itemPricingQualifierSid) {
		_itemPricingQualifierSid = itemPricingQualifierSid;
	}

	@Override
	public Date getContractPriceEndDate() {
		return _contractPriceEndDate;
	}

	@Override
	public void setContractPriceEndDate(Date contractPriceEndDate) {
		_contractPriceEndDate = contractPriceEndDate;
	}

	@Override
	public int getPriceToleranceFrequency() {
		return _priceToleranceFrequency;
	}

	@Override
	public void setPriceToleranceFrequency(int priceToleranceFrequency) {
		_priceToleranceFrequency = priceToleranceFrequency;
	}

	@Override
	public Date getContractPriceStartDate() {
		return _contractPriceStartDate;
	}

	@Override
	public void setContractPriceStartDate(Date contractPriceStartDate) {
		_contractPriceStartDate = contractPriceStartDate;
	}

	@Override
	public int getPsContractSid() {
		return _psContractSid;
	}

	@Override
	public void setPsContractSid(int psContractSid) {
		_psContractSid = psContractSid;
	}

	@Override
	public Date getPriceProtectionEndDate() {
		return _priceProtectionEndDate;
	}

	@Override
	public void setPriceProtectionEndDate(Date priceProtectionEndDate) {
		_priceProtectionEndDate = priceProtectionEndDate;
	}

	@Override
	public int getPsContractAttachedStatus() {
		return _psContractAttachedStatus;
	}

	@Override
	public void setPsContractAttachedStatus(int psContractAttachedStatus) {
		_psContractAttachedStatus = psContractAttachedStatus;
	}

	@Override
	public boolean getRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public boolean isRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public void setRecordLockStatus(boolean recordLockStatus) {
		_recordLockStatus = recordLockStatus;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public int getPriceToleranceInterval() {
		return _priceToleranceInterval;
	}

	@Override
	public void setPriceToleranceInterval(int priceToleranceInterval) {
		_priceToleranceInterval = priceToleranceInterval;
	}

	@Override
	public double getPriceRevision() {
		return _priceRevision;
	}

	@Override
	public void setPriceRevision(double priceRevision) {
		_priceRevision = priceRevision;
	}

	@Override
	public String getBrandMasterSid() {
		return _brandMasterSid;
	}

	@Override
	public void setBrandMasterSid(String brandMasterSid) {
		_brandMasterSid = brandMasterSid;
	}

	@Override
	public double getNep() {
		return _nep;
	}

	@Override
	public void setNep(double nep) {
		_nep = nep;
	}

	@Override
	public int getPriceProtectionStatus() {
		return _priceProtectionStatus;
	}

	@Override
	public void setPriceProtectionStatus(int priceProtectionStatus) {
		_priceProtectionStatus = priceProtectionStatus;
	}

	@Override
	public int getPriceProtectionPriceType() {
		return _priceProtectionPriceType;
	}

	@Override
	public void setPriceProtectionPriceType(int priceProtectionPriceType) {
		_priceProtectionPriceType = priceProtectionPriceType;
	}

	@Override
	public int getNepFormula() {
		return _nepFormula;
	}

	@Override
	public void setNepFormula(int nepFormula) {
		_nepFormula = nepFormula;
	}

	@Override
	public double getMaxIncrementalChange() {
		return _maxIncrementalChange;
	}

	@Override
	public void setMaxIncrementalChange(double maxIncrementalChange) {
		_maxIncrementalChange = maxIncrementalChange;
	}

	@Override
	public int getResetEligible() {
		return _resetEligible;
	}

	@Override
	public void setResetEligible(int resetEligible) {
		_resetEligible = resetEligible;
	}

	@Override
	public int getResetType() {
		return _resetType;
	}

	@Override
	public void setResetType(int resetType) {
		_resetType = resetType;
	}

	@Override
	public Date getResetDate() {
		return _resetDate;
	}

	@Override
	public void setResetDate(Date resetDate) {
		_resetDate = resetDate;
	}

	@Override
	public int getResetInterval() {
		return _resetInterval;
	}

	@Override
	public void setResetInterval(int resetInterval) {
		_resetInterval = resetInterval;
	}

	@Override
	public int getResetFrequency() {
		return _resetFrequency;
	}

	@Override
	public void setResetFrequency(int resetFrequency) {
		_resetFrequency = resetFrequency;
	}

	@Override
	public int getNetPriceType() {
		return _netPriceType;
	}

	@Override
	public void setNetPriceType(int netPriceType) {
		_netPriceType = netPriceType;
	}

	@Override
	public String getNetPriceTypeFormula() {
		return _netPriceTypeFormula;
	}

	@Override
	public void setNetPriceTypeFormula(String netPriceTypeFormula) {
		_netPriceTypeFormula = netPriceTypeFormula;
	}

	@Override
	public int getBasePriceType() {
		return _basePriceType;
	}

	@Override
	public void setBasePriceType(int basePriceType) {
		_basePriceType = basePriceType;
	}

	@Override
	public double getBasePriceEntry() {
		return _basePriceEntry;
	}

	@Override
	public void setBasePriceEntry(double basePriceEntry) {
		_basePriceEntry = basePriceEntry;
	}

	@Override
	public Date getBasePriceDate() {
		return _basePriceDate;
	}

	@Override
	public void setBasePriceDate(Date basePriceDate) {
		_basePriceDate = basePriceDate;
	}

	@Override
	public int getBasePriceDdlb() {
		return _basePriceDdlb;
	}

	@Override
	public void setBasePriceDdlb(int basePriceDdlb) {
		_basePriceDdlb = basePriceDdlb;
	}

	@Override
	public int getNetBasePrice() {
		return _netBasePrice;
	}

	@Override
	public void setNetBasePrice(int netBasePrice) {
		_netBasePrice = netBasePrice;
	}

	@Override
	public int getNetBasePriceFormulaId() {
		return _netBasePriceFormulaId;
	}

	@Override
	public void setNetBasePriceFormulaId(int netBasePriceFormulaId) {
		_netBasePriceFormulaId = netBasePriceFormulaId;
	}

	@Override
	public int getSubsequentPeriodPriceType() {
		return _subsequentPeriodPriceType;
	}

	@Override
	public void setSubsequentPeriodPriceType(int subsequentPeriodPriceType) {
		_subsequentPeriodPriceType = subsequentPeriodPriceType;
	}

	@Override
	public int getNetSubsequentPeriodPrice() {
		return _netSubsequentPeriodPrice;
	}

	@Override
	public void setNetSubsequentPeriodPrice(int netSubsequentPeriodPrice) {
		_netSubsequentPeriodPrice = netSubsequentPeriodPrice;
	}

	@Override
	public int getNetSubsequentPriceFormulaId() {
		return _netSubsequentPriceFormulaId;
	}

	@Override
	public void setNetSubsequentPriceFormulaId(int netSubsequentPriceFormulaId) {
		_netSubsequentPriceFormulaId = netSubsequentPriceFormulaId;
	}

	@Override
	public int getResetPriceType() {
		return _resetPriceType;
	}

	@Override
	public void setResetPriceType(int resetPriceType) {
		_resetPriceType = resetPriceType;
	}

	@Override
	public int getNetResetPriceType() {
		return _netResetPriceType;
	}

	@Override
	public void setNetResetPriceType(int netResetPriceType) {
		_netResetPriceType = netResetPriceType;
	}

	@Override
	public int getNetResetPriceFormulaId() {
		return _netResetPriceFormulaId;
	}

	@Override
	public void setNetResetPriceFormulaId(int netResetPriceFormulaId) {
		_netResetPriceFormulaId = netResetPriceFormulaId;
	}

	@Override
	public PsContractDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PsContractDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PsContractDetailsImpl psContractDetailsImpl = new PsContractDetailsImpl();

		psContractDetailsImpl.setPrice(getPrice());
		psContractDetailsImpl.setItemMasterSid(getItemMasterSid());
		psContractDetailsImpl.setPriceProtectionStartDate(getPriceProtectionStartDate());
		psContractDetailsImpl.setBasePrice(getBasePrice());
		psContractDetailsImpl.setModifiedDate(getModifiedDate());
		psContractDetailsImpl.setRevisionDate(getRevisionDate());
		psContractDetailsImpl.setPriceTolerance(getPriceTolerance());
		psContractDetailsImpl.setCreatedDate(getCreatedDate());
		psContractDetailsImpl.setSource(getSource());
		psContractDetailsImpl.setCreatedBy(getCreatedBy());
		psContractDetailsImpl.setSuggestedPrice(getSuggestedPrice());
		psContractDetailsImpl.setPsContractAttachedDate(getPsContractAttachedDate());
		psContractDetailsImpl.setPsContractDetailsSid(getPsContractDetailsSid());
		psContractDetailsImpl.setModifiedBy(getModifiedBy());
		psContractDetailsImpl.setInboundStatus(getInboundStatus());
		psContractDetailsImpl.setContractPrice(getContractPrice());
		psContractDetailsImpl.setPriceToleranceType(getPriceToleranceType());
		psContractDetailsImpl.setItemPricingQualifierSid(getItemPricingQualifierSid());
		psContractDetailsImpl.setContractPriceEndDate(getContractPriceEndDate());
		psContractDetailsImpl.setPriceToleranceFrequency(getPriceToleranceFrequency());
		psContractDetailsImpl.setContractPriceStartDate(getContractPriceStartDate());
		psContractDetailsImpl.setPsContractSid(getPsContractSid());
		psContractDetailsImpl.setPriceProtectionEndDate(getPriceProtectionEndDate());
		psContractDetailsImpl.setPsContractAttachedStatus(getPsContractAttachedStatus());
		psContractDetailsImpl.setRecordLockStatus(getRecordLockStatus());
		psContractDetailsImpl.setBatchId(getBatchId());
		psContractDetailsImpl.setPriceToleranceInterval(getPriceToleranceInterval());
		psContractDetailsImpl.setPriceRevision(getPriceRevision());
		psContractDetailsImpl.setBrandMasterSid(getBrandMasterSid());
		psContractDetailsImpl.setNep(getNep());
		psContractDetailsImpl.setPriceProtectionStatus(getPriceProtectionStatus());
		psContractDetailsImpl.setPriceProtectionPriceType(getPriceProtectionPriceType());
		psContractDetailsImpl.setNepFormula(getNepFormula());
		psContractDetailsImpl.setMaxIncrementalChange(getMaxIncrementalChange());
		psContractDetailsImpl.setResetEligible(getResetEligible());
		psContractDetailsImpl.setResetType(getResetType());
		psContractDetailsImpl.setResetDate(getResetDate());
		psContractDetailsImpl.setResetInterval(getResetInterval());
		psContractDetailsImpl.setResetFrequency(getResetFrequency());
		psContractDetailsImpl.setNetPriceType(getNetPriceType());
		psContractDetailsImpl.setNetPriceTypeFormula(getNetPriceTypeFormula());
		psContractDetailsImpl.setBasePriceType(getBasePriceType());
		psContractDetailsImpl.setBasePriceEntry(getBasePriceEntry());
		psContractDetailsImpl.setBasePriceDate(getBasePriceDate());
		psContractDetailsImpl.setBasePriceDdlb(getBasePriceDdlb());
		psContractDetailsImpl.setNetBasePrice(getNetBasePrice());
		psContractDetailsImpl.setNetBasePriceFormulaId(getNetBasePriceFormulaId());
		psContractDetailsImpl.setSubsequentPeriodPriceType(getSubsequentPeriodPriceType());
		psContractDetailsImpl.setNetSubsequentPeriodPrice(getNetSubsequentPeriodPrice());
		psContractDetailsImpl.setNetSubsequentPriceFormulaId(getNetSubsequentPriceFormulaId());
		psContractDetailsImpl.setResetPriceType(getResetPriceType());
		psContractDetailsImpl.setNetResetPriceType(getNetResetPriceType());
		psContractDetailsImpl.setNetResetPriceFormulaId(getNetResetPriceFormulaId());

		psContractDetailsImpl.resetOriginalValues();

		return psContractDetailsImpl;
	}

	@Override
	public int compareTo(PsContractDetails psContractDetails) {
		int primaryKey = psContractDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PsContractDetails)) {
			return false;
		}

		PsContractDetails psContractDetails = (PsContractDetails)obj;

		int primaryKey = psContractDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<PsContractDetails> toCacheModel() {
		PsContractDetailsCacheModel psContractDetailsCacheModel = new PsContractDetailsCacheModel();

		psContractDetailsCacheModel.price = getPrice();

		psContractDetailsCacheModel.itemMasterSid = getItemMasterSid();

		Date priceProtectionStartDate = getPriceProtectionStartDate();

		if (priceProtectionStartDate != null) {
			psContractDetailsCacheModel.priceProtectionStartDate = priceProtectionStartDate.getTime();
		}
		else {
			psContractDetailsCacheModel.priceProtectionStartDate = Long.MIN_VALUE;
		}

		psContractDetailsCacheModel.basePrice = getBasePrice();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			psContractDetailsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			psContractDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date revisionDate = getRevisionDate();

		if (revisionDate != null) {
			psContractDetailsCacheModel.revisionDate = revisionDate.getTime();
		}
		else {
			psContractDetailsCacheModel.revisionDate = Long.MIN_VALUE;
		}

		psContractDetailsCacheModel.priceTolerance = getPriceTolerance();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			psContractDetailsCacheModel.createdDate = createdDate.getTime();
		}
		else {
			psContractDetailsCacheModel.createdDate = Long.MIN_VALUE;
		}

		psContractDetailsCacheModel.source = getSource();

		String source = psContractDetailsCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			psContractDetailsCacheModel.source = null;
		}

		psContractDetailsCacheModel.createdBy = getCreatedBy();

		psContractDetailsCacheModel.suggestedPrice = getSuggestedPrice();

		Date psContractAttachedDate = getPsContractAttachedDate();

		if (psContractAttachedDate != null) {
			psContractDetailsCacheModel.psContractAttachedDate = psContractAttachedDate.getTime();
		}
		else {
			psContractDetailsCacheModel.psContractAttachedDate = Long.MIN_VALUE;
		}

		psContractDetailsCacheModel.psContractDetailsSid = getPsContractDetailsSid();

		psContractDetailsCacheModel.modifiedBy = getModifiedBy();

		psContractDetailsCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = psContractDetailsCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			psContractDetailsCacheModel.inboundStatus = null;
		}

		psContractDetailsCacheModel.contractPrice = getContractPrice();

		psContractDetailsCacheModel.priceToleranceType = getPriceToleranceType();

		psContractDetailsCacheModel.itemPricingQualifierSid = getItemPricingQualifierSid();

		Date contractPriceEndDate = getContractPriceEndDate();

		if (contractPriceEndDate != null) {
			psContractDetailsCacheModel.contractPriceEndDate = contractPriceEndDate.getTime();
		}
		else {
			psContractDetailsCacheModel.contractPriceEndDate = Long.MIN_VALUE;
		}

		psContractDetailsCacheModel.priceToleranceFrequency = getPriceToleranceFrequency();

		Date contractPriceStartDate = getContractPriceStartDate();

		if (contractPriceStartDate != null) {
			psContractDetailsCacheModel.contractPriceStartDate = contractPriceStartDate.getTime();
		}
		else {
			psContractDetailsCacheModel.contractPriceStartDate = Long.MIN_VALUE;
		}

		psContractDetailsCacheModel.psContractSid = getPsContractSid();

		Date priceProtectionEndDate = getPriceProtectionEndDate();

		if (priceProtectionEndDate != null) {
			psContractDetailsCacheModel.priceProtectionEndDate = priceProtectionEndDate.getTime();
		}
		else {
			psContractDetailsCacheModel.priceProtectionEndDate = Long.MIN_VALUE;
		}

		psContractDetailsCacheModel.psContractAttachedStatus = getPsContractAttachedStatus();

		psContractDetailsCacheModel.recordLockStatus = getRecordLockStatus();

		psContractDetailsCacheModel.batchId = getBatchId();

		String batchId = psContractDetailsCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			psContractDetailsCacheModel.batchId = null;
		}

		psContractDetailsCacheModel.priceToleranceInterval = getPriceToleranceInterval();

		psContractDetailsCacheModel.priceRevision = getPriceRevision();

		psContractDetailsCacheModel.brandMasterSid = getBrandMasterSid();

		String brandMasterSid = psContractDetailsCacheModel.brandMasterSid;

		if ((brandMasterSid != null) && (brandMasterSid.length() == 0)) {
			psContractDetailsCacheModel.brandMasterSid = null;
		}

		psContractDetailsCacheModel.nep = getNep();

		psContractDetailsCacheModel.priceProtectionStatus = getPriceProtectionStatus();

		psContractDetailsCacheModel.priceProtectionPriceType = getPriceProtectionPriceType();

		psContractDetailsCacheModel.nepFormula = getNepFormula();

		psContractDetailsCacheModel.maxIncrementalChange = getMaxIncrementalChange();

		psContractDetailsCacheModel.resetEligible = getResetEligible();

		psContractDetailsCacheModel.resetType = getResetType();

		Date resetDate = getResetDate();

		if (resetDate != null) {
			psContractDetailsCacheModel.resetDate = resetDate.getTime();
		}
		else {
			psContractDetailsCacheModel.resetDate = Long.MIN_VALUE;
		}

		psContractDetailsCacheModel.resetInterval = getResetInterval();

		psContractDetailsCacheModel.resetFrequency = getResetFrequency();

		psContractDetailsCacheModel.netPriceType = getNetPriceType();

		psContractDetailsCacheModel.netPriceTypeFormula = getNetPriceTypeFormula();

		String netPriceTypeFormula = psContractDetailsCacheModel.netPriceTypeFormula;

		if ((netPriceTypeFormula != null) &&
				(netPriceTypeFormula.length() == 0)) {
			psContractDetailsCacheModel.netPriceTypeFormula = null;
		}

		psContractDetailsCacheModel.basePriceType = getBasePriceType();

		psContractDetailsCacheModel.basePriceEntry = getBasePriceEntry();

		Date basePriceDate = getBasePriceDate();

		if (basePriceDate != null) {
			psContractDetailsCacheModel.basePriceDate = basePriceDate.getTime();
		}
		else {
			psContractDetailsCacheModel.basePriceDate = Long.MIN_VALUE;
		}

		psContractDetailsCacheModel.basePriceDdlb = getBasePriceDdlb();

		psContractDetailsCacheModel.netBasePrice = getNetBasePrice();

		psContractDetailsCacheModel.netBasePriceFormulaId = getNetBasePriceFormulaId();

		psContractDetailsCacheModel.subsequentPeriodPriceType = getSubsequentPeriodPriceType();

		psContractDetailsCacheModel.netSubsequentPeriodPrice = getNetSubsequentPeriodPrice();

		psContractDetailsCacheModel.netSubsequentPriceFormulaId = getNetSubsequentPriceFormulaId();

		psContractDetailsCacheModel.resetPriceType = getResetPriceType();

		psContractDetailsCacheModel.netResetPriceType = getNetResetPriceType();

		psContractDetailsCacheModel.netResetPriceFormulaId = getNetResetPriceFormulaId();

		return psContractDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(107);

		sb.append("{price=");
		sb.append(getPrice());
		sb.append(", itemMasterSid=");
		sb.append(getItemMasterSid());
		sb.append(", priceProtectionStartDate=");
		sb.append(getPriceProtectionStartDate());
		sb.append(", basePrice=");
		sb.append(getBasePrice());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", revisionDate=");
		sb.append(getRevisionDate());
		sb.append(", priceTolerance=");
		sb.append(getPriceTolerance());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", suggestedPrice=");
		sb.append(getSuggestedPrice());
		sb.append(", psContractAttachedDate=");
		sb.append(getPsContractAttachedDate());
		sb.append(", psContractDetailsSid=");
		sb.append(getPsContractDetailsSid());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append(", contractPrice=");
		sb.append(getContractPrice());
		sb.append(", priceToleranceType=");
		sb.append(getPriceToleranceType());
		sb.append(", itemPricingQualifierSid=");
		sb.append(getItemPricingQualifierSid());
		sb.append(", contractPriceEndDate=");
		sb.append(getContractPriceEndDate());
		sb.append(", priceToleranceFrequency=");
		sb.append(getPriceToleranceFrequency());
		sb.append(", contractPriceStartDate=");
		sb.append(getContractPriceStartDate());
		sb.append(", psContractSid=");
		sb.append(getPsContractSid());
		sb.append(", priceProtectionEndDate=");
		sb.append(getPriceProtectionEndDate());
		sb.append(", psContractAttachedStatus=");
		sb.append(getPsContractAttachedStatus());
		sb.append(", recordLockStatus=");
		sb.append(getRecordLockStatus());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", priceToleranceInterval=");
		sb.append(getPriceToleranceInterval());
		sb.append(", priceRevision=");
		sb.append(getPriceRevision());
		sb.append(", brandMasterSid=");
		sb.append(getBrandMasterSid());
		sb.append(", nep=");
		sb.append(getNep());
		sb.append(", priceProtectionStatus=");
		sb.append(getPriceProtectionStatus());
		sb.append(", priceProtectionPriceType=");
		sb.append(getPriceProtectionPriceType());
		sb.append(", nepFormula=");
		sb.append(getNepFormula());
		sb.append(", maxIncrementalChange=");
		sb.append(getMaxIncrementalChange());
		sb.append(", resetEligible=");
		sb.append(getResetEligible());
		sb.append(", resetType=");
		sb.append(getResetType());
		sb.append(", resetDate=");
		sb.append(getResetDate());
		sb.append(", resetInterval=");
		sb.append(getResetInterval());
		sb.append(", resetFrequency=");
		sb.append(getResetFrequency());
		sb.append(", netPriceType=");
		sb.append(getNetPriceType());
		sb.append(", netPriceTypeFormula=");
		sb.append(getNetPriceTypeFormula());
		sb.append(", basePriceType=");
		sb.append(getBasePriceType());
		sb.append(", basePriceEntry=");
		sb.append(getBasePriceEntry());
		sb.append(", basePriceDate=");
		sb.append(getBasePriceDate());
		sb.append(", basePriceDdlb=");
		sb.append(getBasePriceDdlb());
		sb.append(", netBasePrice=");
		sb.append(getNetBasePrice());
		sb.append(", netBasePriceFormulaId=");
		sb.append(getNetBasePriceFormulaId());
		sb.append(", subsequentPeriodPriceType=");
		sb.append(getSubsequentPeriodPriceType());
		sb.append(", netSubsequentPeriodPrice=");
		sb.append(getNetSubsequentPeriodPrice());
		sb.append(", netSubsequentPriceFormulaId=");
		sb.append(getNetSubsequentPriceFormulaId());
		sb.append(", resetPriceType=");
		sb.append(getResetPriceType());
		sb.append(", netResetPriceType=");
		sb.append(getNetResetPriceType());
		sb.append(", netResetPriceFormulaId=");
		sb.append(getNetResetPriceFormulaId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(163);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.PsContractDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
		sb.append(getItemMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceProtectionStartDate</column-name><column-value><![CDATA[");
		sb.append(getPriceProtectionStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePrice</column-name><column-value><![CDATA[");
		sb.append(getBasePrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>revisionDate</column-name><column-value><![CDATA[");
		sb.append(getRevisionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceTolerance</column-name><column-value><![CDATA[");
		sb.append(getPriceTolerance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>suggestedPrice</column-name><column-value><![CDATA[");
		sb.append(getSuggestedPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>psContractAttachedDate</column-name><column-value><![CDATA[");
		sb.append(getPsContractAttachedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>psContractDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getPsContractDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractPrice</column-name><column-value><![CDATA[");
		sb.append(getContractPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceToleranceType</column-name><column-value><![CDATA[");
		sb.append(getPriceToleranceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemPricingQualifierSid</column-name><column-value><![CDATA[");
		sb.append(getItemPricingQualifierSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractPriceEndDate</column-name><column-value><![CDATA[");
		sb.append(getContractPriceEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceToleranceFrequency</column-name><column-value><![CDATA[");
		sb.append(getPriceToleranceFrequency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractPriceStartDate</column-name><column-value><![CDATA[");
		sb.append(getContractPriceStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>psContractSid</column-name><column-value><![CDATA[");
		sb.append(getPsContractSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceProtectionEndDate</column-name><column-value><![CDATA[");
		sb.append(getPriceProtectionEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>psContractAttachedStatus</column-name><column-value><![CDATA[");
		sb.append(getPsContractAttachedStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
		sb.append(getRecordLockStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceToleranceInterval</column-name><column-value><![CDATA[");
		sb.append(getPriceToleranceInterval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceRevision</column-name><column-value><![CDATA[");
		sb.append(getPriceRevision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brandMasterSid</column-name><column-value><![CDATA[");
		sb.append(getBrandMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nep</column-name><column-value><![CDATA[");
		sb.append(getNep());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceProtectionStatus</column-name><column-value><![CDATA[");
		sb.append(getPriceProtectionStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceProtectionPriceType</column-name><column-value><![CDATA[");
		sb.append(getPriceProtectionPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nepFormula</column-name><column-value><![CDATA[");
		sb.append(getNepFormula());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxIncrementalChange</column-name><column-value><![CDATA[");
		sb.append(getMaxIncrementalChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetEligible</column-name><column-value><![CDATA[");
		sb.append(getResetEligible());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetType</column-name><column-value><![CDATA[");
		sb.append(getResetType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetDate</column-name><column-value><![CDATA[");
		sb.append(getResetDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetInterval</column-name><column-value><![CDATA[");
		sb.append(getResetInterval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetFrequency</column-name><column-value><![CDATA[");
		sb.append(getResetFrequency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netPriceType</column-name><column-value><![CDATA[");
		sb.append(getNetPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netPriceTypeFormula</column-name><column-value><![CDATA[");
		sb.append(getNetPriceTypeFormula());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePriceType</column-name><column-value><![CDATA[");
		sb.append(getBasePriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePriceEntry</column-name><column-value><![CDATA[");
		sb.append(getBasePriceEntry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePriceDate</column-name><column-value><![CDATA[");
		sb.append(getBasePriceDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePriceDdlb</column-name><column-value><![CDATA[");
		sb.append(getBasePriceDdlb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netBasePrice</column-name><column-value><![CDATA[");
		sb.append(getNetBasePrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netBasePriceFormulaId</column-name><column-value><![CDATA[");
		sb.append(getNetBasePriceFormulaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subsequentPeriodPriceType</column-name><column-value><![CDATA[");
		sb.append(getSubsequentPeriodPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSubsequentPeriodPrice</column-name><column-value><![CDATA[");
		sb.append(getNetSubsequentPeriodPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSubsequentPriceFormulaId</column-name><column-value><![CDATA[");
		sb.append(getNetSubsequentPriceFormulaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetPriceType</column-name><column-value><![CDATA[");
		sb.append(getResetPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netResetPriceType</column-name><column-value><![CDATA[");
		sb.append(getNetResetPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netResetPriceFormulaId</column-name><column-value><![CDATA[");
		sb.append(getNetResetPriceFormulaId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = PsContractDetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			PsContractDetails.class
		};
	private double _price;
	private int _itemMasterSid;
	private Date _priceProtectionStartDate;
	private double _basePrice;
	private Date _modifiedDate;
	private Date _revisionDate;
	private double _priceTolerance;
	private Date _createdDate;
	private String _source;
	private int _createdBy;
	private double _suggestedPrice;
	private Date _psContractAttachedDate;
	private int _psContractDetailsSid;
	private int _modifiedBy;
	private String _inboundStatus;
	private double _contractPrice;
	private int _priceToleranceType;
	private int _itemPricingQualifierSid;
	private Date _contractPriceEndDate;
	private int _priceToleranceFrequency;
	private Date _contractPriceStartDate;
	private int _psContractSid;
	private Date _priceProtectionEndDate;
	private int _psContractAttachedStatus;
	private boolean _recordLockStatus;
	private String _batchId;
	private int _priceToleranceInterval;
	private double _priceRevision;
	private String _brandMasterSid;
	private double _nep;
	private int _priceProtectionStatus;
	private int _priceProtectionPriceType;
	private int _nepFormula;
	private double _maxIncrementalChange;
	private int _resetEligible;
	private int _resetType;
	private Date _resetDate;
	private int _resetInterval;
	private int _resetFrequency;
	private int _netPriceType;
	private String _netPriceTypeFormula;
	private int _basePriceType;
	private double _basePriceEntry;
	private Date _basePriceDate;
	private int _basePriceDdlb;
	private int _netBasePrice;
	private int _netBasePriceFormulaId;
	private int _subsequentPeriodPriceType;
	private int _netSubsequentPeriodPrice;
	private int _netSubsequentPriceFormulaId;
	private int _resetPriceType;
	private int _netResetPriceType;
	private int _netResetPriceFormulaId;
	private PsContractDetails _escapedModel;
}