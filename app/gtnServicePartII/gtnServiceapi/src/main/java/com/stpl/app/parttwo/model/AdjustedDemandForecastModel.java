/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.parttwo.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the AdjustedDemandForecast service. Represents a row in the &quot;ADJUSTED_DEMAND_FORECAST&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.stpl.app.parttwo.model.impl.AdjustedDemandForecastModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.stpl.app.parttwo.model.impl.AdjustedDemandForecastImpl}.
 * </p>
 *
 * @author
 * @see AdjustedDemandForecast
 * @see com.stpl.app.parttwo.model.impl.AdjustedDemandForecastImpl
 * @see com.stpl.app.parttwo.model.impl.AdjustedDemandForecastModelImpl
 * @generated
 */
@ProviderType
public interface AdjustedDemandForecastModel extends BaseModel<AdjustedDemandForecast> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a adjusted demand forecast model instance should use the {@link AdjustedDemandForecast} interface instead.
	 */

	/**
	 * Returns the primary key of this adjusted demand forecast.
	 *
	 * @return the primary key of this adjusted demand forecast
	 */
	public int getPrimaryKey();

	/**
	 * Sets the primary key of this adjusted demand forecast.
	 *
	 * @param primaryKey the primary key of this adjusted demand forecast
	 */
	public void setPrimaryKey(int primaryKey);

	/**
	 * Returns the item master sid of this adjusted demand forecast.
	 *
	 * @return the item master sid of this adjusted demand forecast
	 */
	public int getItemMasterSid();

	/**
	 * Sets the item master sid of this adjusted demand forecast.
	 *
	 * @param itemMasterSid the item master sid of this adjusted demand forecast
	 */
	public void setItemMasterSid(int itemMasterSid);

	/**
	 * Returns the adjusted demand forecast sid of this adjusted demand forecast.
	 *
	 * @return the adjusted demand forecast sid of this adjusted demand forecast
	 */
	public int getAdjustedDemandForecastSid();

	/**
	 * Sets the adjusted demand forecast sid of this adjusted demand forecast.
	 *
	 * @param adjustedDemandForecastSid the adjusted demand forecast sid of this adjusted demand forecast
	 */
	public void setAdjustedDemandForecastSid(int adjustedDemandForecastSid);

	/**
	 * Returns the gross units of this adjusted demand forecast.
	 *
	 * @return the gross units of this adjusted demand forecast
	 */
	public double getGrossUnits();

	/**
	 * Sets the gross units of this adjusted demand forecast.
	 *
	 * @param grossUnits the gross units of this adjusted demand forecast
	 */
	public void setGrossUnits(double grossUnits);

	/**
	 * Returns the total demand units of this adjusted demand forecast.
	 *
	 * @return the total demand units of this adjusted demand forecast
	 */
	public double getTotalDemandUnits();

	/**
	 * Sets the total demand units of this adjusted demand forecast.
	 *
	 * @param totalDemandUnits the total demand units of this adjusted demand forecast
	 */
	public void setTotalDemandUnits(double totalDemandUnits);

	/**
	 * Returns the year of this adjusted demand forecast.
	 *
	 * @return the year of this adjusted demand forecast
	 */
	@AutoEscape
	public String getYear();

	/**
	 * Sets the year of this adjusted demand forecast.
	 *
	 * @param year the year of this adjusted demand forecast
	 */
	public void setYear(String year);

	/**
	 * Returns the item ID of this adjusted demand forecast.
	 *
	 * @return the item ID of this adjusted demand forecast
	 */
	@AutoEscape
	public String getItemId();

	/**
	 * Sets the item ID of this adjusted demand forecast.
	 *
	 * @param itemId the item ID of this adjusted demand forecast
	 */
	public void setItemId(String itemId);

	/**
	 * Returns the modified date of this adjusted demand forecast.
	 *
	 * @return the modified date of this adjusted demand forecast
	 */
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this adjusted demand forecast.
	 *
	 * @param modifiedDate the modified date of this adjusted demand forecast
	 */
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the brand master sid of this adjusted demand forecast.
	 *
	 * @return the brand master sid of this adjusted demand forecast
	 */
	public int getBrandMasterSid();

	/**
	 * Sets the brand master sid of this adjusted demand forecast.
	 *
	 * @param brandMasterSid the brand master sid of this adjusted demand forecast
	 */
	public void setBrandMasterSid(int brandMasterSid);

	/**
	 * Returns the organization key of this adjusted demand forecast.
	 *
	 * @return the organization key of this adjusted demand forecast
	 */
	@AutoEscape
	public String getOrganizationKey();

	/**
	 * Sets the organization key of this adjusted demand forecast.
	 *
	 * @param organizationKey the organization key of this adjusted demand forecast
	 */
	public void setOrganizationKey(String organizationKey);

	/**
	 * Returns the source of this adjusted demand forecast.
	 *
	 * @return the source of this adjusted demand forecast
	 */
	@AutoEscape
	public String getSource();

	/**
	 * Sets the source of this adjusted demand forecast.
	 *
	 * @param source the source of this adjusted demand forecast
	 */
	public void setSource(String source);

	/**
	 * Returns the created date of this adjusted demand forecast.
	 *
	 * @return the created date of this adjusted demand forecast
	 */
	public Date getCreatedDate();

	/**
	 * Sets the created date of this adjusted demand forecast.
	 *
	 * @param createdDate the created date of this adjusted demand forecast
	 */
	public void setCreatedDate(Date createdDate);

	/**
	 * Returns the created by of this adjusted demand forecast.
	 *
	 * @return the created by of this adjusted demand forecast
	 */
	@AutoEscape
	public String getCreatedBy();

	/**
	 * Sets the created by of this adjusted demand forecast.
	 *
	 * @param createdBy the created by of this adjusted demand forecast
	 */
	public void setCreatedBy(String createdBy);

	/**
	 * Returns the market share ratio of this adjusted demand forecast.
	 *
	 * @return the market share ratio of this adjusted demand forecast
	 */
	@AutoEscape
	public String getMarketShareRatio();

	/**
	 * Sets the market share ratio of this adjusted demand forecast.
	 *
	 * @param marketShareRatio the market share ratio of this adjusted demand forecast
	 */
	public void setMarketShareRatio(String marketShareRatio);

	/**
	 * Returns the item identifier of this adjusted demand forecast.
	 *
	 * @return the item identifier of this adjusted demand forecast
	 */
	@AutoEscape
	public String getItemIdentifier();

	/**
	 * Sets the item identifier of this adjusted demand forecast.
	 *
	 * @param itemIdentifier the item identifier of this adjusted demand forecast
	 */
	public void setItemIdentifier(String itemIdentifier);

	/**
	 * Returns the inbound status of this adjusted demand forecast.
	 *
	 * @return the inbound status of this adjusted demand forecast
	 */
	@AutoEscape
	public String getInboundStatus();

	/**
	 * Sets the inbound status of this adjusted demand forecast.
	 *
	 * @param inboundStatus the inbound status of this adjusted demand forecast
	 */
	public void setInboundStatus(String inboundStatus);

	/**
	 * Returns the modified by of this adjusted demand forecast.
	 *
	 * @return the modified by of this adjusted demand forecast
	 */
	@AutoEscape
	public String getModifiedBy();

	/**
	 * Sets the modified by of this adjusted demand forecast.
	 *
	 * @param modifiedBy the modified by of this adjusted demand forecast
	 */
	public void setModifiedBy(String modifiedBy);

	/**
	 * Returns the market share units of this adjusted demand forecast.
	 *
	 * @return the market share units of this adjusted demand forecast
	 */
	public double getMarketShareUnits();

	/**
	 * Sets the market share units of this adjusted demand forecast.
	 *
	 * @param marketShareUnits the market share units of this adjusted demand forecast
	 */
	public void setMarketShareUnits(double marketShareUnits);

	/**
	 * Returns the month of this adjusted demand forecast.
	 *
	 * @return the month of this adjusted demand forecast
	 */
	@AutoEscape
	public String getMonth();

	/**
	 * Sets the month of this adjusted demand forecast.
	 *
	 * @param month the month of this adjusted demand forecast
	 */
	public void setMonth(String month);

	/**
	 * Returns the inventory unit change of this adjusted demand forecast.
	 *
	 * @return the inventory unit change of this adjusted demand forecast
	 */
	public double getInventoryUnitChange();

	/**
	 * Sets the inventory unit change of this adjusted demand forecast.
	 *
	 * @param inventoryUnitChange the inventory unit change of this adjusted demand forecast
	 */
	public void setInventoryUnitChange(double inventoryUnitChange);

	/**
	 * Returns the uncaptured units ratio of this adjusted demand forecast.
	 *
	 * @return the uncaptured units ratio of this adjusted demand forecast
	 */
	@AutoEscape
	public String getUncapturedUnitsRatio();

	/**
	 * Sets the uncaptured units ratio of this adjusted demand forecast.
	 *
	 * @param uncapturedUnitsRatio the uncaptured units ratio of this adjusted demand forecast
	 */
	public void setUncapturedUnitsRatio(String uncapturedUnitsRatio);

	/**
	 * Returns the country of this adjusted demand forecast.
	 *
	 * @return the country of this adjusted demand forecast
	 */
	@AutoEscape
	public String getCountry();

	/**
	 * Sets the country of this adjusted demand forecast.
	 *
	 * @param country the country of this adjusted demand forecast
	 */
	public void setCountry(String country);

	/**
	 * Returns the forecast type of this adjusted demand forecast.
	 *
	 * @return the forecast type of this adjusted demand forecast
	 */
	@AutoEscape
	public String getForecastType();

	/**
	 * Sets the forecast type of this adjusted demand forecast.
	 *
	 * @param forecastType the forecast type of this adjusted demand forecast
	 */
	public void setForecastType(String forecastType);

	/**
	 * Returns the brand ID of this adjusted demand forecast.
	 *
	 * @return the brand ID of this adjusted demand forecast
	 */
	@AutoEscape
	public String getBrandId();

	/**
	 * Sets the brand ID of this adjusted demand forecast.
	 *
	 * @param brandId the brand ID of this adjusted demand forecast
	 */
	public void setBrandId(String brandId);

	/**
	 * Returns the uncaptured units of this adjusted demand forecast.
	 *
	 * @return the uncaptured units of this adjusted demand forecast
	 */
	public double getUncapturedUnits();

	/**
	 * Sets the uncaptured units of this adjusted demand forecast.
	 *
	 * @param uncapturedUnits the uncaptured units of this adjusted demand forecast
	 */
	public void setUncapturedUnits(double uncapturedUnits);

	/**
	 * Returns the gross price of this adjusted demand forecast.
	 *
	 * @return the gross price of this adjusted demand forecast
	 */
	public double getGrossPrice();

	/**
	 * Sets the gross price of this adjusted demand forecast.
	 *
	 * @param grossPrice the gross price of this adjusted demand forecast
	 */
	public void setGrossPrice(double grossPrice);

	/**
	 * Returns the record lock status of this adjusted demand forecast.
	 *
	 * @return the record lock status of this adjusted demand forecast
	 */
	public boolean getRecordLockStatus();

	/**
	 * Returns <code>true</code> if this adjusted demand forecast is record lock status.
	 *
	 * @return <code>true</code> if this adjusted demand forecast is record lock status; <code>false</code> otherwise
	 */
	public boolean isRecordLockStatus();

	/**
	 * Sets whether this adjusted demand forecast is record lock status.
	 *
	 * @param recordLockStatus the record lock status of this adjusted demand forecast
	 */
	public void setRecordLockStatus(boolean recordLockStatus);

	/**
	 * Returns the gross amount of this adjusted demand forecast.
	 *
	 * @return the gross amount of this adjusted demand forecast
	 */
	public double getGrossAmount();

	/**
	 * Sets the gross amount of this adjusted demand forecast.
	 *
	 * @param grossAmount the gross amount of this adjusted demand forecast
	 */
	public void setGrossAmount(double grossAmount);

	/**
	 * Returns the item identifier code qualifier of this adjusted demand forecast.
	 *
	 * @return the item identifier code qualifier of this adjusted demand forecast
	 */
	@AutoEscape
	public String getItemIdentifierCodeQualifier();

	/**
	 * Sets the item identifier code qualifier of this adjusted demand forecast.
	 *
	 * @param itemIdentifierCodeQualifier the item identifier code qualifier of this adjusted demand forecast
	 */
	public void setItemIdentifierCodeQualifier(
		String itemIdentifierCodeQualifier);

	/**
	 * Returns the forecast ver of this adjusted demand forecast.
	 *
	 * @return the forecast ver of this adjusted demand forecast
	 */
	@AutoEscape
	public String getForecastVer();

	/**
	 * Sets the forecast ver of this adjusted demand forecast.
	 *
	 * @param forecastVer the forecast ver of this adjusted demand forecast
	 */
	public void setForecastVer(String forecastVer);

	/**
	 * Returns the batch ID of this adjusted demand forecast.
	 *
	 * @return the batch ID of this adjusted demand forecast
	 */
	@AutoEscape
	public String getBatchId();

	/**
	 * Sets the batch ID of this adjusted demand forecast.
	 *
	 * @param batchId the batch ID of this adjusted demand forecast
	 */
	public void setBatchId(String batchId);

	/**
	 * Returns the net sales price of this adjusted demand forecast.
	 *
	 * @return the net sales price of this adjusted demand forecast
	 */
	public double getNetSalesPrice();

	/**
	 * Sets the net sales price of this adjusted demand forecast.
	 *
	 * @param netSalesPrice the net sales price of this adjusted demand forecast
	 */
	public void setNetSalesPrice(double netSalesPrice);

	/**
	 * Returns the net sales amount of this adjusted demand forecast.
	 *
	 * @return the net sales amount of this adjusted demand forecast
	 */
	public double getNetSalesAmount();

	/**
	 * Sets the net sales amount of this adjusted demand forecast.
	 *
	 * @param netSalesAmount the net sales amount of this adjusted demand forecast
	 */
	public void setNetSalesAmount(double netSalesAmount);

	/**
	 * Returns the segment of this adjusted demand forecast.
	 *
	 * @return the segment of this adjusted demand forecast
	 */
	@AutoEscape
	public String getSegment();

	/**
	 * Sets the segment of this adjusted demand forecast.
	 *
	 * @param segment the segment of this adjusted demand forecast
	 */
	public void setSegment(String segment);

	/**
	 * Returns the total demand amount of this adjusted demand forecast.
	 *
	 * @return the total demand amount of this adjusted demand forecast
	 */
	public double getTotalDemandAmount();

	/**
	 * Sets the total demand amount of this adjusted demand forecast.
	 *
	 * @param totalDemandAmount the total demand amount of this adjusted demand forecast
	 */
	public void setTotalDemandAmount(double totalDemandAmount);

	/**
	 * Returns the forecast name of this adjusted demand forecast.
	 *
	 * @return the forecast name of this adjusted demand forecast
	 */
	@AutoEscape
	public String getForecastName();

	/**
	 * Sets the forecast name of this adjusted demand forecast.
	 *
	 * @param forecastName the forecast name of this adjusted demand forecast
	 */
	public void setForecastName(String forecastName);

	/**
	 * Returns the market size units of this adjusted demand forecast.
	 *
	 * @return the market size units of this adjusted demand forecast
	 */
	public double getMarketSizeUnits();

	/**
	 * Sets the market size units of this adjusted demand forecast.
	 *
	 * @param marketSizeUnits the market size units of this adjusted demand forecast
	 */
	public void setMarketSizeUnits(double marketSizeUnits);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(AdjustedDemandForecast adjustedDemandForecast);

	@Override
	public int hashCode();

	@Override
	public CacheModel<AdjustedDemandForecast> toCacheModel();

	@Override
	public AdjustedDemandForecast toEscapedModel();

	@Override
	public AdjustedDemandForecast toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}