package com.stpl.app.model.impl;

import com.stpl.app.model.ContractMaster;
import com.stpl.app.model.ContractMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ContractMaster service. Represents a row in the &quot;CONTRACT_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.ContractMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContractMasterImpl}.
 * </p>
 *
 * @author
 * @see ContractMasterImpl
 * @see com.stpl.app.model.ContractMaster
 * @see com.stpl.app.model.ContractMasterModel
 * @generated
 */
public class ContractMasterModelImpl extends BaseModelImpl<ContractMaster>
    implements ContractMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contract master model instance should use the {@link com.stpl.app.model.ContractMaster} interface instead.
     */
    public static final String TABLE_NAME = "CONTRACT_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "PROPOSAL_END_DATE", Types.TIMESTAMP },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "RENEGOTIATION_END_DATE", Types.TIMESTAMP },
            { "OUTSIDE_ADDITIONAL_NAME", Types.VARCHAR },
            { "END_DATE", Types.TIMESTAMP },
            { "MANF_COMPANY_MASTER_SID", Types.VARCHAR },
            { "RENEGOTIATION_START_DATE", Types.TIMESTAMP },
            { "INSIDE_AUTHOR", Types.VARCHAR },
            { "ADVANCE_NOTICE_DAYS", Types.DOUBLE },
            { "OUTSIDE_OWNER", Types.VARCHAR },
            { "MOST_FAVORED_NATION", Types.VARCHAR },
            { "INSIDE_ADDITIONAL_PHONE", Types.VARCHAR },
            { "ORIGINAL_START_DATE", Types.TIMESTAMP },
            { "CREATED_BY", Types.INTEGER },
            { "PROPOSAL_START_DATE", Types.TIMESTAMP },
            { "CONTRACT_TRADE_CLASS", Types.INTEGER },
            { "OUTSIDE_ADDITIONAL", Types.VARCHAR },
            { "PROCESS_STATUS", Types.BOOLEAN },
            { "INSIDE_ADDITIONAL_NAME", Types.VARCHAR },
            { "CONTRACT_MASTER_SID", Types.INTEGER },
            { "CONTRACT_STATUS", Types.INTEGER },
            { "CONTRACT_ID", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "CONTRACT_TYPE", Types.INTEGER },
            { "AWARD_STATUS", Types.INTEGER },
            { "INSIDE_OWNER", Types.VARCHAR },
            { "SOURCE", Types.VARCHAR },
            { "SHIPPING_TERMS", Types.VARCHAR },
            { "PRICE_ESCALATION_CLAUSE", Types.VARCHAR },
            { "MODIFIED_BY", Types.INTEGER },
            { "OUTSIDE_ADDITIONAL_PHONE", Types.VARCHAR },
            { "TERM", Types.INTEGER },
            { "CONTRACT_NO", Types.VARCHAR },
            { "BATCH_ID", Types.VARCHAR },
            { "DOCUMENT_CLASS", Types.INTEGER },
            { "ORIGINAL_END_DATE", Types.TIMESTAMP },
            { "PAYMENT_TERMS", Types.INTEGER },
            { "INSIDE_ADDITIONAL", Types.VARCHAR },
            { "AFFILIATED_CONTRACT_INFO", Types.VARCHAR },
            { "CATEGORY", Types.VARCHAR },
            { "OUTSIDE_PHONE", Types.VARCHAR },
            { "PRICEPROTECTION_START_DATE", Types.TIMESTAMP },
            { "PRICEPROTECTION_END_DATE", Types.TIMESTAMP },
            { "DOCUMENT_TYPE", Types.INTEGER },
            { "EXEMPT_FROM_LOW_PRICE", Types.VARCHAR },
            { "ORGANIZATION_KEY", Types.VARCHAR },
            { "CURRENCY", Types.VARCHAR },
            { "INSIDE_PHONE", Types.VARCHAR },
            { "BUNIT_COMPANY_MASTER_SID", Types.VARCHAR },
            { "OUTSIDE_AUTHOR", Types.VARCHAR },
            { "CONT_HOLD_COMPANY_MASTER_SID", Types.VARCHAR },
            { "START_DATE", Types.TIMESTAMP },
            { "CONTRACT_NAME", Types.VARCHAR },
            { "LAST_UPDATED_DATE", Types.TIMESTAMP },
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "PRICE_RESET_INDICATOR", Types.VARCHAR },
            { "MINIMUM_ORDER", Types.VARCHAR },
            { "CANCELLATION_CLAUSE", Types.VARCHAR },
            { "INBOUND_STATUS", Types.VARCHAR },
            { "INTERNAL_NOTES", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table CONTRACT_MASTER (PROPOSAL_END_DATE DATE null,CREATED_DATE DATE null,RENEGOTIATION_END_DATE DATE null,OUTSIDE_ADDITIONAL_NAME VARCHAR(75) null,END_DATE DATE null,MANF_COMPANY_MASTER_SID VARCHAR(75) null,RENEGOTIATION_START_DATE DATE null,INSIDE_AUTHOR VARCHAR(75) null,ADVANCE_NOTICE_DAYS DOUBLE,OUTSIDE_OWNER VARCHAR(75) null,MOST_FAVORED_NATION VARCHAR(75) null,INSIDE_ADDITIONAL_PHONE VARCHAR(75) null,ORIGINAL_START_DATE DATE null,CREATED_BY INTEGER,PROPOSAL_START_DATE DATE null,CONTRACT_TRADE_CLASS INTEGER,OUTSIDE_ADDITIONAL VARCHAR(75) null,PROCESS_STATUS BOOLEAN,INSIDE_ADDITIONAL_NAME VARCHAR(75) null,CONTRACT_MASTER_SID INTEGER not null primary key IDENTITY,CONTRACT_STATUS INTEGER,CONTRACT_ID VARCHAR(75) null,MODIFIED_DATE DATE null,CONTRACT_TYPE INTEGER,AWARD_STATUS INTEGER,INSIDE_OWNER VARCHAR(75) null,SOURCE VARCHAR(75) null,SHIPPING_TERMS VARCHAR(75) null,PRICE_ESCALATION_CLAUSE VARCHAR(75) null,MODIFIED_BY INTEGER,OUTSIDE_ADDITIONAL_PHONE VARCHAR(75) null,TERM INTEGER,CONTRACT_NO VARCHAR(75) null,BATCH_ID VARCHAR(75) null,DOCUMENT_CLASS INTEGER,ORIGINAL_END_DATE DATE null,PAYMENT_TERMS INTEGER,INSIDE_ADDITIONAL VARCHAR(75) null,AFFILIATED_CONTRACT_INFO VARCHAR(75) null,CATEGORY VARCHAR(75) null,OUTSIDE_PHONE VARCHAR(75) null,PRICEPROTECTION_START_DATE DATE null,PRICEPROTECTION_END_DATE DATE null,DOCUMENT_TYPE INTEGER,EXEMPT_FROM_LOW_PRICE VARCHAR(75) null,ORGANIZATION_KEY VARCHAR(75) null,CURRENCY VARCHAR(75) null,INSIDE_PHONE VARCHAR(75) null,BUNIT_COMPANY_MASTER_SID VARCHAR(75) null,OUTSIDE_AUTHOR VARCHAR(75) null,CONT_HOLD_COMPANY_MASTER_SID VARCHAR(75) null,START_DATE DATE null,CONTRACT_NAME VARCHAR(75) null,LAST_UPDATED_DATE DATE null,RECORD_LOCK_STATUS BOOLEAN,PRICE_RESET_INDICATOR VARCHAR(75) null,MINIMUM_ORDER VARCHAR(75) null,CANCELLATION_CLAUSE VARCHAR(75) null,INBOUND_STATUS VARCHAR(75) null,INTERNAL_NOTES VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table CONTRACT_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY contractMaster.contractMasterSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY CONTRACT_MASTER.CONTRACT_MASTER_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.ContractMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.ContractMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.ContractMaster"));
    private static ClassLoader _classLoader = ContractMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ContractMaster.class
        };
    private Date _proposalEndDate;
    private Date _createdDate;
    private Date _renegotiationEndDate;
    private String _outsideAdditionalName;
    private Date _endDate;
    private String _manfCompanyMasterSid;
    private Date _renegotiationStartDate;
    private String _insideAuthor;
    private double _advanceNoticeDays;
    private String _outsideOwner;
    private String _mostFavoredNation;
    private String _insideAdditionalPhone;
    private Date _originalStartDate;
    private int _createdBy;
    private Date _proposalStartDate;
    private int _contractTradeClass;
    private String _outsideAdditional;
    private boolean _processStatus;
    private String _insideAdditionalName;
    private int _contractMasterSid;
    private int _contractStatus;
    private String _contractId;
    private Date _modifiedDate;
    private int _contractType;
    private int _awardStatus;
    private String _insideOwner;
    private String _source;
    private String _shippingTerms;
    private String _priceEscalationClause;
    private int _modifiedBy;
    private String _outsideAdditionalPhone;
    private int _term;
    private String _contractNo;
    private String _batchId;
    private int _documentClass;
    private Date _originalEndDate;
    private int _paymentTerms;
    private String _insideAdditional;
    private String _affiliatedContractInfo;
    private String _category;
    private String _outsidePhone;
    private Date _priceprotectionStartDate;
    private Date _priceprotectionEndDate;
    private int _documentType;
    private String _exemptFromLowPrice;
    private String _organizationKey;
    private String _currency;
    private String _insidePhone;
    private String _bunitCompanyMasterSid;
    private String _outsideAuthor;
    private String _contHoldCompanyMasterSid;
    private Date _startDate;
    private String _contractName;
    private Date _lastUpdatedDate;
    private boolean _recordLockStatus;
    private String _priceResetIndicator;
    private String _minimumOrder;
    private String _cancellationClause;
    private String _inboundStatus;
    private String _internalNotes;
    private ContractMaster _escapedModel;

    public ContractMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _contractMasterSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setContractMasterSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _contractMasterSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ContractMaster.class;
    }

    @Override
    public String getModelClassName() {
        return ContractMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("proposalEndDate", getProposalEndDate());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("renegotiationEndDate", getRenegotiationEndDate());
        attributes.put("outsideAdditionalName", getOutsideAdditionalName());
        attributes.put("endDate", getEndDate());
        attributes.put("manfCompanyMasterSid", getManfCompanyMasterSid());
        attributes.put("renegotiationStartDate", getRenegotiationStartDate());
        attributes.put("insideAuthor", getInsideAuthor());
        attributes.put("advanceNoticeDays", getAdvanceNoticeDays());
        attributes.put("outsideOwner", getOutsideOwner());
        attributes.put("mostFavoredNation", getMostFavoredNation());
        attributes.put("insideAdditionalPhone", getInsideAdditionalPhone());
        attributes.put("originalStartDate", getOriginalStartDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("proposalStartDate", getProposalStartDate());
        attributes.put("contractTradeClass", getContractTradeClass());
        attributes.put("outsideAdditional", getOutsideAdditional());
        attributes.put("processStatus", getProcessStatus());
        attributes.put("insideAdditionalName", getInsideAdditionalName());
        attributes.put("contractMasterSid", getContractMasterSid());
        attributes.put("contractStatus", getContractStatus());
        attributes.put("contractId", getContractId());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("contractType", getContractType());
        attributes.put("awardStatus", getAwardStatus());
        attributes.put("insideOwner", getInsideOwner());
        attributes.put("source", getSource());
        attributes.put("shippingTerms", getShippingTerms());
        attributes.put("priceEscalationClause", getPriceEscalationClause());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("outsideAdditionalPhone", getOutsideAdditionalPhone());
        attributes.put("term", getTerm());
        attributes.put("contractNo", getContractNo());
        attributes.put("batchId", getBatchId());
        attributes.put("documentClass", getDocumentClass());
        attributes.put("originalEndDate", getOriginalEndDate());
        attributes.put("paymentTerms", getPaymentTerms());
        attributes.put("insideAdditional", getInsideAdditional());
        attributes.put("affiliatedContractInfo", getAffiliatedContractInfo());
        attributes.put("category", getCategory());
        attributes.put("outsidePhone", getOutsidePhone());
        attributes.put("priceprotectionStartDate", getPriceprotectionStartDate());
        attributes.put("priceprotectionEndDate", getPriceprotectionEndDate());
        attributes.put("documentType", getDocumentType());
        attributes.put("exemptFromLowPrice", getExemptFromLowPrice());
        attributes.put("organizationKey", getOrganizationKey());
        attributes.put("currency", getCurrency());
        attributes.put("insidePhone", getInsidePhone());
        attributes.put("bunitCompanyMasterSid", getBunitCompanyMasterSid());
        attributes.put("outsideAuthor", getOutsideAuthor());
        attributes.put("contHoldCompanyMasterSid", getContHoldCompanyMasterSid());
        attributes.put("startDate", getStartDate());
        attributes.put("contractName", getContractName());
        attributes.put("lastUpdatedDate", getLastUpdatedDate());
        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("priceResetIndicator", getPriceResetIndicator());
        attributes.put("minimumOrder", getMinimumOrder());
        attributes.put("cancellationClause", getCancellationClause());
        attributes.put("inboundStatus", getInboundStatus());
        attributes.put("internalNotes", getInternalNotes());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Date proposalEndDate = (Date) attributes.get("proposalEndDate");

        if (proposalEndDate != null) {
            setProposalEndDate(proposalEndDate);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Date renegotiationEndDate = (Date) attributes.get(
                "renegotiationEndDate");

        if (renegotiationEndDate != null) {
            setRenegotiationEndDate(renegotiationEndDate);
        }

        String outsideAdditionalName = (String) attributes.get(
                "outsideAdditionalName");

        if (outsideAdditionalName != null) {
            setOutsideAdditionalName(outsideAdditionalName);
        }

        Date endDate = (Date) attributes.get("endDate");

        if (endDate != null) {
            setEndDate(endDate);
        }

        String manfCompanyMasterSid = (String) attributes.get(
                "manfCompanyMasterSid");

        if (manfCompanyMasterSid != null) {
            setManfCompanyMasterSid(manfCompanyMasterSid);
        }

        Date renegotiationStartDate = (Date) attributes.get(
                "renegotiationStartDate");

        if (renegotiationStartDate != null) {
            setRenegotiationStartDate(renegotiationStartDate);
        }

        String insideAuthor = (String) attributes.get("insideAuthor");

        if (insideAuthor != null) {
            setInsideAuthor(insideAuthor);
        }

        Double advanceNoticeDays = (Double) attributes.get("advanceNoticeDays");

        if (advanceNoticeDays != null) {
            setAdvanceNoticeDays(advanceNoticeDays);
        }

        String outsideOwner = (String) attributes.get("outsideOwner");

        if (outsideOwner != null) {
            setOutsideOwner(outsideOwner);
        }

        String mostFavoredNation = (String) attributes.get("mostFavoredNation");

        if (mostFavoredNation != null) {
            setMostFavoredNation(mostFavoredNation);
        }

        String insideAdditionalPhone = (String) attributes.get(
                "insideAdditionalPhone");

        if (insideAdditionalPhone != null) {
            setInsideAdditionalPhone(insideAdditionalPhone);
        }

        Date originalStartDate = (Date) attributes.get("originalStartDate");

        if (originalStartDate != null) {
            setOriginalStartDate(originalStartDate);
        }

        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Date proposalStartDate = (Date) attributes.get("proposalStartDate");

        if (proposalStartDate != null) {
            setProposalStartDate(proposalStartDate);
        }

        Integer contractTradeClass = (Integer) attributes.get(
                "contractTradeClass");

        if (contractTradeClass != null) {
            setContractTradeClass(contractTradeClass);
        }

        String outsideAdditional = (String) attributes.get("outsideAdditional");

        if (outsideAdditional != null) {
            setOutsideAdditional(outsideAdditional);
        }

        Boolean processStatus = (Boolean) attributes.get("processStatus");

        if (processStatus != null) {
            setProcessStatus(processStatus);
        }

        String insideAdditionalName = (String) attributes.get(
                "insideAdditionalName");

        if (insideAdditionalName != null) {
            setInsideAdditionalName(insideAdditionalName);
        }

        Integer contractMasterSid = (Integer) attributes.get(
                "contractMasterSid");

        if (contractMasterSid != null) {
            setContractMasterSid(contractMasterSid);
        }

        Integer contractStatus = (Integer) attributes.get("contractStatus");

        if (contractStatus != null) {
            setContractStatus(contractStatus);
        }

        String contractId = (String) attributes.get("contractId");

        if (contractId != null) {
            setContractId(contractId);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer contractType = (Integer) attributes.get("contractType");

        if (contractType != null) {
            setContractType(contractType);
        }

        Integer awardStatus = (Integer) attributes.get("awardStatus");

        if (awardStatus != null) {
            setAwardStatus(awardStatus);
        }

        String insideOwner = (String) attributes.get("insideOwner");

        if (insideOwner != null) {
            setInsideOwner(insideOwner);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String shippingTerms = (String) attributes.get("shippingTerms");

        if (shippingTerms != null) {
            setShippingTerms(shippingTerms);
        }

        String priceEscalationClause = (String) attributes.get(
                "priceEscalationClause");

        if (priceEscalationClause != null) {
            setPriceEscalationClause(priceEscalationClause);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String outsideAdditionalPhone = (String) attributes.get(
                "outsideAdditionalPhone");

        if (outsideAdditionalPhone != null) {
            setOutsideAdditionalPhone(outsideAdditionalPhone);
        }

        Integer term = (Integer) attributes.get("term");

        if (term != null) {
            setTerm(term);
        }

        String contractNo = (String) attributes.get("contractNo");

        if (contractNo != null) {
            setContractNo(contractNo);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        Integer documentClass = (Integer) attributes.get("documentClass");

        if (documentClass != null) {
            setDocumentClass(documentClass);
        }

        Date originalEndDate = (Date) attributes.get("originalEndDate");

        if (originalEndDate != null) {
            setOriginalEndDate(originalEndDate);
        }

        Integer paymentTerms = (Integer) attributes.get("paymentTerms");

        if (paymentTerms != null) {
            setPaymentTerms(paymentTerms);
        }

        String insideAdditional = (String) attributes.get("insideAdditional");

        if (insideAdditional != null) {
            setInsideAdditional(insideAdditional);
        }

        String affiliatedContractInfo = (String) attributes.get(
                "affiliatedContractInfo");

        if (affiliatedContractInfo != null) {
            setAffiliatedContractInfo(affiliatedContractInfo);
        }

        String category = (String) attributes.get("category");

        if (category != null) {
            setCategory(category);
        }

        String outsidePhone = (String) attributes.get("outsidePhone");

        if (outsidePhone != null) {
            setOutsidePhone(outsidePhone);
        }

        Date priceprotectionStartDate = (Date) attributes.get(
                "priceprotectionStartDate");

        if (priceprotectionStartDate != null) {
            setPriceprotectionStartDate(priceprotectionStartDate);
        }

        Date priceprotectionEndDate = (Date) attributes.get(
                "priceprotectionEndDate");

        if (priceprotectionEndDate != null) {
            setPriceprotectionEndDate(priceprotectionEndDate);
        }

        Integer documentType = (Integer) attributes.get("documentType");

        if (documentType != null) {
            setDocumentType(documentType);
        }

        String exemptFromLowPrice = (String) attributes.get(
                "exemptFromLowPrice");

        if (exemptFromLowPrice != null) {
            setExemptFromLowPrice(exemptFromLowPrice);
        }

        String organizationKey = (String) attributes.get("organizationKey");

        if (organizationKey != null) {
            setOrganizationKey(organizationKey);
        }

        String currency = (String) attributes.get("currency");

        if (currency != null) {
            setCurrency(currency);
        }

        String insidePhone = (String) attributes.get("insidePhone");

        if (insidePhone != null) {
            setInsidePhone(insidePhone);
        }

        String bunitCompanyMasterSid = (String) attributes.get(
                "bunitCompanyMasterSid");

        if (bunitCompanyMasterSid != null) {
            setBunitCompanyMasterSid(bunitCompanyMasterSid);
        }

        String outsideAuthor = (String) attributes.get("outsideAuthor");

        if (outsideAuthor != null) {
            setOutsideAuthor(outsideAuthor);
        }

        String contHoldCompanyMasterSid = (String) attributes.get(
                "contHoldCompanyMasterSid");

        if (contHoldCompanyMasterSid != null) {
            setContHoldCompanyMasterSid(contHoldCompanyMasterSid);
        }

        Date startDate = (Date) attributes.get("startDate");

        if (startDate != null) {
            setStartDate(startDate);
        }

        String contractName = (String) attributes.get("contractName");

        if (contractName != null) {
            setContractName(contractName);
        }

        Date lastUpdatedDate = (Date) attributes.get("lastUpdatedDate");

        if (lastUpdatedDate != null) {
            setLastUpdatedDate(lastUpdatedDate);
        }

        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        String priceResetIndicator = (String) attributes.get(
                "priceResetIndicator");

        if (priceResetIndicator != null) {
            setPriceResetIndicator(priceResetIndicator);
        }

        String minimumOrder = (String) attributes.get("minimumOrder");

        if (minimumOrder != null) {
            setMinimumOrder(minimumOrder);
        }

        String cancellationClause = (String) attributes.get(
                "cancellationClause");

        if (cancellationClause != null) {
            setCancellationClause(cancellationClause);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }

        String internalNotes = (String) attributes.get("internalNotes");

        if (internalNotes != null) {
            setInternalNotes(internalNotes);
        }
    }

    @Override
    public Date getProposalEndDate() {
        return _proposalEndDate;
    }

    @Override
    public void setProposalEndDate(Date proposalEndDate) {
        _proposalEndDate = proposalEndDate;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public Date getRenegotiationEndDate() {
        return _renegotiationEndDate;
    }

    @Override
    public void setRenegotiationEndDate(Date renegotiationEndDate) {
        _renegotiationEndDate = renegotiationEndDate;
    }

    @Override
    public String getOutsideAdditionalName() {
        if (_outsideAdditionalName == null) {
            return StringPool.BLANK;
        } else {
            return _outsideAdditionalName;
        }
    }

    @Override
    public void setOutsideAdditionalName(String outsideAdditionalName) {
        _outsideAdditionalName = outsideAdditionalName;
    }

    @Override
    public Date getEndDate() {
        return _endDate;
    }

    @Override
    public void setEndDate(Date endDate) {
        _endDate = endDate;
    }

    @Override
    public String getManfCompanyMasterSid() {
        return _manfCompanyMasterSid;
    }

    @Override
    public void setManfCompanyMasterSid(String manfCompanyMasterSid) {
        _manfCompanyMasterSid = manfCompanyMasterSid;
    }

    @Override
    public Date getRenegotiationStartDate() {
        return _renegotiationStartDate;
    }

    @Override
    public void setRenegotiationStartDate(Date renegotiationStartDate) {
        _renegotiationStartDate = renegotiationStartDate;
    }

    @Override
    public String getInsideAuthor() {
        if (_insideAuthor == null) {
            return StringPool.BLANK;
        } else {
            return _insideAuthor;
        }
    }

    @Override
    public void setInsideAuthor(String insideAuthor) {
        _insideAuthor = insideAuthor;
    }

    @Override
    public double getAdvanceNoticeDays() {
        return _advanceNoticeDays;
    }

    @Override
    public void setAdvanceNoticeDays(double advanceNoticeDays) {
        _advanceNoticeDays = advanceNoticeDays;
    }

    @Override
    public String getOutsideOwner() {
        if (_outsideOwner == null) {
            return StringPool.BLANK;
        } else {
            return _outsideOwner;
        }
    }

    @Override
    public void setOutsideOwner(String outsideOwner) {
        _outsideOwner = outsideOwner;
    }

    @Override
    public String getMostFavoredNation() {
        if (_mostFavoredNation == null) {
            return StringPool.BLANK;
        } else {
            return _mostFavoredNation;
        }
    }

    @Override
    public void setMostFavoredNation(String mostFavoredNation) {
        _mostFavoredNation = mostFavoredNation;
    }

    @Override
    public String getInsideAdditionalPhone() {
        if (_insideAdditionalPhone == null) {
            return StringPool.BLANK;
        } else {
            return _insideAdditionalPhone;
        }
    }

    @Override
    public void setInsideAdditionalPhone(String insideAdditionalPhone) {
        _insideAdditionalPhone = insideAdditionalPhone;
    }

    @Override
    public Date getOriginalStartDate() {
        return _originalStartDate;
    }

    @Override
    public void setOriginalStartDate(Date originalStartDate) {
        _originalStartDate = originalStartDate;
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public Date getProposalStartDate() {
        return _proposalStartDate;
    }

    @Override
    public void setProposalStartDate(Date proposalStartDate) {
        _proposalStartDate = proposalStartDate;
    }

    @Override
    public int getContractTradeClass() {
        return _contractTradeClass;
    }

    @Override
    public void setContractTradeClass(int contractTradeClass) {
        _contractTradeClass = contractTradeClass;
    }

    @Override
    public String getOutsideAdditional() {
        if (_outsideAdditional == null) {
            return StringPool.BLANK;
        } else {
            return _outsideAdditional;
        }
    }

    @Override
    public void setOutsideAdditional(String outsideAdditional) {
        _outsideAdditional = outsideAdditional;
    }

    @Override
    public boolean getProcessStatus() {
        return _processStatus;
    }

    @Override
    public boolean isProcessStatus() {
        return _processStatus;
    }

    @Override
    public void setProcessStatus(boolean processStatus) {
        _processStatus = processStatus;
    }

    @Override
    public String getInsideAdditionalName() {
        if (_insideAdditionalName == null) {
            return StringPool.BLANK;
        } else {
            return _insideAdditionalName;
        }
    }

    @Override
    public void setInsideAdditionalName(String insideAdditionalName) {
        _insideAdditionalName = insideAdditionalName;
    }

    @Override
    public int getContractMasterSid() {
        return _contractMasterSid;
    }

    @Override
    public void setContractMasterSid(int contractMasterSid) {
        _contractMasterSid = contractMasterSid;
    }

    @Override
    public int getContractStatus() {
        return _contractStatus;
    }

    @Override
    public void setContractStatus(int contractStatus) {
        _contractStatus = contractStatus;
    }

    @Override
    public String getContractId() {
        if (_contractId == null) {
            return StringPool.BLANK;
        } else {
            return _contractId;
        }
    }

    @Override
    public void setContractId(String contractId) {
        _contractId = contractId;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public int getContractType() {
        return _contractType;
    }

    @Override
    public void setContractType(int contractType) {
        _contractType = contractType;
    }

    @Override
    public int getAwardStatus() {
        return _awardStatus;
    }

    @Override
    public void setAwardStatus(int awardStatus) {
        _awardStatus = awardStatus;
    }

    @Override
    public String getInsideOwner() {
        if (_insideOwner == null) {
            return StringPool.BLANK;
        } else {
            return _insideOwner;
        }
    }

    @Override
    public void setInsideOwner(String insideOwner) {
        _insideOwner = insideOwner;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getShippingTerms() {
        if (_shippingTerms == null) {
            return StringPool.BLANK;
        } else {
            return _shippingTerms;
        }
    }

    @Override
    public void setShippingTerms(String shippingTerms) {
        _shippingTerms = shippingTerms;
    }

    @Override
    public String getPriceEscalationClause() {
        if (_priceEscalationClause == null) {
            return StringPool.BLANK;
        } else {
            return _priceEscalationClause;
        }
    }

    @Override
    public void setPriceEscalationClause(String priceEscalationClause) {
        _priceEscalationClause = priceEscalationClause;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getOutsideAdditionalPhone() {
        if (_outsideAdditionalPhone == null) {
            return StringPool.BLANK;
        } else {
            return _outsideAdditionalPhone;
        }
    }

    @Override
    public void setOutsideAdditionalPhone(String outsideAdditionalPhone) {
        _outsideAdditionalPhone = outsideAdditionalPhone;
    }

    @Override
    public int getTerm() {
        return _term;
    }

    @Override
    public void setTerm(int term) {
        _term = term;
    }

    @Override
    public String getContractNo() {
        if (_contractNo == null) {
            return StringPool.BLANK;
        } else {
            return _contractNo;
        }
    }

    @Override
    public void setContractNo(String contractNo) {
        _contractNo = contractNo;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public int getDocumentClass() {
        return _documentClass;
    }

    @Override
    public void setDocumentClass(int documentClass) {
        _documentClass = documentClass;
    }

    @Override
    public Date getOriginalEndDate() {
        return _originalEndDate;
    }

    @Override
    public void setOriginalEndDate(Date originalEndDate) {
        _originalEndDate = originalEndDate;
    }

    @Override
    public int getPaymentTerms() {
        return _paymentTerms;
    }

    @Override
    public void setPaymentTerms(int paymentTerms) {
        _paymentTerms = paymentTerms;
    }

    @Override
    public String getInsideAdditional() {
        if (_insideAdditional == null) {
            return StringPool.BLANK;
        } else {
            return _insideAdditional;
        }
    }

    @Override
    public void setInsideAdditional(String insideAdditional) {
        _insideAdditional = insideAdditional;
    }

    @Override
    public String getAffiliatedContractInfo() {
        if (_affiliatedContractInfo == null) {
            return StringPool.BLANK;
        } else {
            return _affiliatedContractInfo;
        }
    }

    @Override
    public void setAffiliatedContractInfo(String affiliatedContractInfo) {
        _affiliatedContractInfo = affiliatedContractInfo;
    }

    @Override
    public String getCategory() {
        if (_category == null) {
            return StringPool.BLANK;
        } else {
            return _category;
        }
    }

    @Override
    public void setCategory(String category) {
        _category = category;
    }

    @Override
    public String getOutsidePhone() {
        if (_outsidePhone == null) {
            return StringPool.BLANK;
        } else {
            return _outsidePhone;
        }
    }

    @Override
    public void setOutsidePhone(String outsidePhone) {
        _outsidePhone = outsidePhone;
    }

    @Override
    public Date getPriceprotectionStartDate() {
        return _priceprotectionStartDate;
    }

    @Override
    public void setPriceprotectionStartDate(Date priceprotectionStartDate) {
        _priceprotectionStartDate = priceprotectionStartDate;
    }

    @Override
    public Date getPriceprotectionEndDate() {
        return _priceprotectionEndDate;
    }

    @Override
    public void setPriceprotectionEndDate(Date priceprotectionEndDate) {
        _priceprotectionEndDate = priceprotectionEndDate;
    }

    @Override
    public int getDocumentType() {
        return _documentType;
    }

    @Override
    public void setDocumentType(int documentType) {
        _documentType = documentType;
    }

    @Override
    public String getExemptFromLowPrice() {
        if (_exemptFromLowPrice == null) {
            return StringPool.BLANK;
        } else {
            return _exemptFromLowPrice;
        }
    }

    @Override
    public void setExemptFromLowPrice(String exemptFromLowPrice) {
        _exemptFromLowPrice = exemptFromLowPrice;
    }

    @Override
    public String getOrganizationKey() {
        if (_organizationKey == null) {
            return StringPool.BLANK;
        } else {
            return _organizationKey;
        }
    }

    @Override
    public void setOrganizationKey(String organizationKey) {
        _organizationKey = organizationKey;
    }

    @Override
    public String getCurrency() {
        if (_currency == null) {
            return StringPool.BLANK;
        } else {
            return _currency;
        }
    }

    @Override
    public void setCurrency(String currency) {
        _currency = currency;
    }

    @Override
    public String getInsidePhone() {
        if (_insidePhone == null) {
            return StringPool.BLANK;
        } else {
            return _insidePhone;
        }
    }

    @Override
    public void setInsidePhone(String insidePhone) {
        _insidePhone = insidePhone;
    }

    @Override
    public String getBunitCompanyMasterSid() {
        return _bunitCompanyMasterSid;
    }

    @Override
    public void setBunitCompanyMasterSid(String bunitCompanyMasterSid) {
        _bunitCompanyMasterSid = bunitCompanyMasterSid;
    }

    @Override
    public String getOutsideAuthor() {
        if (_outsideAuthor == null) {
            return StringPool.BLANK;
        } else {
            return _outsideAuthor;
        }
    }

    @Override
    public void setOutsideAuthor(String outsideAuthor) {
        _outsideAuthor = outsideAuthor;
    }

    @Override
    public String getContHoldCompanyMasterSid() {
        return _contHoldCompanyMasterSid;
    }

    @Override
    public void setContHoldCompanyMasterSid(String contHoldCompanyMasterSid) {
        _contHoldCompanyMasterSid = contHoldCompanyMasterSid;
    }

    @Override
    public Date getStartDate() {
        return _startDate;
    }

    @Override
    public void setStartDate(Date startDate) {
        _startDate = startDate;
    }

    @Override
    public String getContractName() {
        if (_contractName == null) {
            return StringPool.BLANK;
        } else {
            return _contractName;
        }
    }

    @Override
    public void setContractName(String contractName) {
        _contractName = contractName;
    }

    @Override
    public Date getLastUpdatedDate() {
        return _lastUpdatedDate;
    }

    @Override
    public void setLastUpdatedDate(Date lastUpdatedDate) {
        _lastUpdatedDate = lastUpdatedDate;
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public String getPriceResetIndicator() {
        if (_priceResetIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _priceResetIndicator;
        }
    }

    @Override
    public void setPriceResetIndicator(String priceResetIndicator) {
        _priceResetIndicator = priceResetIndicator;
    }

    @Override
    public String getMinimumOrder() {
        if (_minimumOrder == null) {
            return StringPool.BLANK;
        } else {
            return _minimumOrder;
        }
    }

    @Override
    public void setMinimumOrder(String minimumOrder) {
        _minimumOrder = minimumOrder;
    }

    @Override
    public String getCancellationClause() {
        if (_cancellationClause == null) {
            return StringPool.BLANK;
        } else {
            return _cancellationClause;
        }
    }

    @Override
    public void setCancellationClause(String cancellationClause) {
        _cancellationClause = cancellationClause;
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    @Override
    public String getInternalNotes() {
        if (_internalNotes == null) {
            return StringPool.BLANK;
        } else {
            return _internalNotes;
        }
    }

    @Override
    public void setInternalNotes(String internalNotes) {
        _internalNotes = internalNotes;
    }

    @Override
    public ContractMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ContractMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ContractMasterImpl contractMasterImpl = new ContractMasterImpl();

        contractMasterImpl.setProposalEndDate(getProposalEndDate());
        contractMasterImpl.setCreatedDate(getCreatedDate());
        contractMasterImpl.setRenegotiationEndDate(getRenegotiationEndDate());
        contractMasterImpl.setOutsideAdditionalName(getOutsideAdditionalName());
        contractMasterImpl.setEndDate(getEndDate());
        contractMasterImpl.setManfCompanyMasterSid(getManfCompanyMasterSid());
        contractMasterImpl.setRenegotiationStartDate(getRenegotiationStartDate());
        contractMasterImpl.setInsideAuthor(getInsideAuthor());
        contractMasterImpl.setAdvanceNoticeDays(getAdvanceNoticeDays());
        contractMasterImpl.setOutsideOwner(getOutsideOwner());
        contractMasterImpl.setMostFavoredNation(getMostFavoredNation());
        contractMasterImpl.setInsideAdditionalPhone(getInsideAdditionalPhone());
        contractMasterImpl.setOriginalStartDate(getOriginalStartDate());
        contractMasterImpl.setCreatedBy(getCreatedBy());
        contractMasterImpl.setProposalStartDate(getProposalStartDate());
        contractMasterImpl.setContractTradeClass(getContractTradeClass());
        contractMasterImpl.setOutsideAdditional(getOutsideAdditional());
        contractMasterImpl.setProcessStatus(getProcessStatus());
        contractMasterImpl.setInsideAdditionalName(getInsideAdditionalName());
        contractMasterImpl.setContractMasterSid(getContractMasterSid());
        contractMasterImpl.setContractStatus(getContractStatus());
        contractMasterImpl.setContractId(getContractId());
        contractMasterImpl.setModifiedDate(getModifiedDate());
        contractMasterImpl.setContractType(getContractType());
        contractMasterImpl.setAwardStatus(getAwardStatus());
        contractMasterImpl.setInsideOwner(getInsideOwner());
        contractMasterImpl.setSource(getSource());
        contractMasterImpl.setShippingTerms(getShippingTerms());
        contractMasterImpl.setPriceEscalationClause(getPriceEscalationClause());
        contractMasterImpl.setModifiedBy(getModifiedBy());
        contractMasterImpl.setOutsideAdditionalPhone(getOutsideAdditionalPhone());
        contractMasterImpl.setTerm(getTerm());
        contractMasterImpl.setContractNo(getContractNo());
        contractMasterImpl.setBatchId(getBatchId());
        contractMasterImpl.setDocumentClass(getDocumentClass());
        contractMasterImpl.setOriginalEndDate(getOriginalEndDate());
        contractMasterImpl.setPaymentTerms(getPaymentTerms());
        contractMasterImpl.setInsideAdditional(getInsideAdditional());
        contractMasterImpl.setAffiliatedContractInfo(getAffiliatedContractInfo());
        contractMasterImpl.setCategory(getCategory());
        contractMasterImpl.setOutsidePhone(getOutsidePhone());
        contractMasterImpl.setPriceprotectionStartDate(getPriceprotectionStartDate());
        contractMasterImpl.setPriceprotectionEndDate(getPriceprotectionEndDate());
        contractMasterImpl.setDocumentType(getDocumentType());
        contractMasterImpl.setExemptFromLowPrice(getExemptFromLowPrice());
        contractMasterImpl.setOrganizationKey(getOrganizationKey());
        contractMasterImpl.setCurrency(getCurrency());
        contractMasterImpl.setInsidePhone(getInsidePhone());
        contractMasterImpl.setBunitCompanyMasterSid(getBunitCompanyMasterSid());
        contractMasterImpl.setOutsideAuthor(getOutsideAuthor());
        contractMasterImpl.setContHoldCompanyMasterSid(getContHoldCompanyMasterSid());
        contractMasterImpl.setStartDate(getStartDate());
        contractMasterImpl.setContractName(getContractName());
        contractMasterImpl.setLastUpdatedDate(getLastUpdatedDate());
        contractMasterImpl.setRecordLockStatus(getRecordLockStatus());
        contractMasterImpl.setPriceResetIndicator(getPriceResetIndicator());
        contractMasterImpl.setMinimumOrder(getMinimumOrder());
        contractMasterImpl.setCancellationClause(getCancellationClause());
        contractMasterImpl.setInboundStatus(getInboundStatus());
        contractMasterImpl.setInternalNotes(getInternalNotes());

        contractMasterImpl.resetOriginalValues();

        return contractMasterImpl;
    }

    @Override
    public int compareTo(ContractMaster contractMaster) {
        int primaryKey = contractMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ContractMaster)) {
            return false;
        }

        ContractMaster contractMaster = (ContractMaster) obj;

        int primaryKey = contractMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ContractMaster> toCacheModel() {
        ContractMasterCacheModel contractMasterCacheModel = new ContractMasterCacheModel();

        Date proposalEndDate = getProposalEndDate();

        if (proposalEndDate != null) {
            contractMasterCacheModel.proposalEndDate = proposalEndDate.getTime();
        } else {
            contractMasterCacheModel.proposalEndDate = Long.MIN_VALUE;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            contractMasterCacheModel.createdDate = createdDate.getTime();
        } else {
            contractMasterCacheModel.createdDate = Long.MIN_VALUE;
        }

        Date renegotiationEndDate = getRenegotiationEndDate();

        if (renegotiationEndDate != null) {
            contractMasterCacheModel.renegotiationEndDate = renegotiationEndDate.getTime();
        } else {
            contractMasterCacheModel.renegotiationEndDate = Long.MIN_VALUE;
        }

        contractMasterCacheModel.outsideAdditionalName = getOutsideAdditionalName();

        String outsideAdditionalName = contractMasterCacheModel.outsideAdditionalName;

        if ((outsideAdditionalName != null) &&
                (outsideAdditionalName.length() == 0)) {
            contractMasterCacheModel.outsideAdditionalName = null;
        }

        Date endDate = getEndDate();

        if (endDate != null) {
            contractMasterCacheModel.endDate = endDate.getTime();
        } else {
            contractMasterCacheModel.endDate = Long.MIN_VALUE;
        }

        contractMasterCacheModel.manfCompanyMasterSid = getManfCompanyMasterSid();

        String manfCompanyMasterSid = contractMasterCacheModel.manfCompanyMasterSid;

        if ((manfCompanyMasterSid != null) &&
                (manfCompanyMasterSid.length() == 0)) {
            contractMasterCacheModel.manfCompanyMasterSid = null;
        }

        Date renegotiationStartDate = getRenegotiationStartDate();

        if (renegotiationStartDate != null) {
            contractMasterCacheModel.renegotiationStartDate = renegotiationStartDate.getTime();
        } else {
            contractMasterCacheModel.renegotiationStartDate = Long.MIN_VALUE;
        }

        contractMasterCacheModel.insideAuthor = getInsideAuthor();

        String insideAuthor = contractMasterCacheModel.insideAuthor;

        if ((insideAuthor != null) && (insideAuthor.length() == 0)) {
            contractMasterCacheModel.insideAuthor = null;
        }

        contractMasterCacheModel.advanceNoticeDays = getAdvanceNoticeDays();

        contractMasterCacheModel.outsideOwner = getOutsideOwner();

        String outsideOwner = contractMasterCacheModel.outsideOwner;

        if ((outsideOwner != null) && (outsideOwner.length() == 0)) {
            contractMasterCacheModel.outsideOwner = null;
        }

        contractMasterCacheModel.mostFavoredNation = getMostFavoredNation();

        String mostFavoredNation = contractMasterCacheModel.mostFavoredNation;

        if ((mostFavoredNation != null) && (mostFavoredNation.length() == 0)) {
            contractMasterCacheModel.mostFavoredNation = null;
        }

        contractMasterCacheModel.insideAdditionalPhone = getInsideAdditionalPhone();

        String insideAdditionalPhone = contractMasterCacheModel.insideAdditionalPhone;

        if ((insideAdditionalPhone != null) &&
                (insideAdditionalPhone.length() == 0)) {
            contractMasterCacheModel.insideAdditionalPhone = null;
        }

        Date originalStartDate = getOriginalStartDate();

        if (originalStartDate != null) {
            contractMasterCacheModel.originalStartDate = originalStartDate.getTime();
        } else {
            contractMasterCacheModel.originalStartDate = Long.MIN_VALUE;
        }

        contractMasterCacheModel.createdBy = getCreatedBy();

        Date proposalStartDate = getProposalStartDate();

        if (proposalStartDate != null) {
            contractMasterCacheModel.proposalStartDate = proposalStartDate.getTime();
        } else {
            contractMasterCacheModel.proposalStartDate = Long.MIN_VALUE;
        }

        contractMasterCacheModel.contractTradeClass = getContractTradeClass();

        contractMasterCacheModel.outsideAdditional = getOutsideAdditional();

        String outsideAdditional = contractMasterCacheModel.outsideAdditional;

        if ((outsideAdditional != null) && (outsideAdditional.length() == 0)) {
            contractMasterCacheModel.outsideAdditional = null;
        }

        contractMasterCacheModel.processStatus = getProcessStatus();

        contractMasterCacheModel.insideAdditionalName = getInsideAdditionalName();

        String insideAdditionalName = contractMasterCacheModel.insideAdditionalName;

        if ((insideAdditionalName != null) &&
                (insideAdditionalName.length() == 0)) {
            contractMasterCacheModel.insideAdditionalName = null;
        }

        contractMasterCacheModel.contractMasterSid = getContractMasterSid();

        contractMasterCacheModel.contractStatus = getContractStatus();

        contractMasterCacheModel.contractId = getContractId();

        String contractId = contractMasterCacheModel.contractId;

        if ((contractId != null) && (contractId.length() == 0)) {
            contractMasterCacheModel.contractId = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            contractMasterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            contractMasterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        contractMasterCacheModel.contractType = getContractType();

        contractMasterCacheModel.awardStatus = getAwardStatus();

        contractMasterCacheModel.insideOwner = getInsideOwner();

        String insideOwner = contractMasterCacheModel.insideOwner;

        if ((insideOwner != null) && (insideOwner.length() == 0)) {
            contractMasterCacheModel.insideOwner = null;
        }

        contractMasterCacheModel.source = getSource();

        String source = contractMasterCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            contractMasterCacheModel.source = null;
        }

        contractMasterCacheModel.shippingTerms = getShippingTerms();

        String shippingTerms = contractMasterCacheModel.shippingTerms;

        if ((shippingTerms != null) && (shippingTerms.length() == 0)) {
            contractMasterCacheModel.shippingTerms = null;
        }

        contractMasterCacheModel.priceEscalationClause = getPriceEscalationClause();

        String priceEscalationClause = contractMasterCacheModel.priceEscalationClause;

        if ((priceEscalationClause != null) &&
                (priceEscalationClause.length() == 0)) {
            contractMasterCacheModel.priceEscalationClause = null;
        }

        contractMasterCacheModel.modifiedBy = getModifiedBy();

        contractMasterCacheModel.outsideAdditionalPhone = getOutsideAdditionalPhone();

        String outsideAdditionalPhone = contractMasterCacheModel.outsideAdditionalPhone;

        if ((outsideAdditionalPhone != null) &&
                (outsideAdditionalPhone.length() == 0)) {
            contractMasterCacheModel.outsideAdditionalPhone = null;
        }

        contractMasterCacheModel.term = getTerm();

        contractMasterCacheModel.contractNo = getContractNo();

        String contractNo = contractMasterCacheModel.contractNo;

        if ((contractNo != null) && (contractNo.length() == 0)) {
            contractMasterCacheModel.contractNo = null;
        }

        contractMasterCacheModel.batchId = getBatchId();

        String batchId = contractMasterCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            contractMasterCacheModel.batchId = null;
        }

        contractMasterCacheModel.documentClass = getDocumentClass();

        Date originalEndDate = getOriginalEndDate();

        if (originalEndDate != null) {
            contractMasterCacheModel.originalEndDate = originalEndDate.getTime();
        } else {
            contractMasterCacheModel.originalEndDate = Long.MIN_VALUE;
        }

        contractMasterCacheModel.paymentTerms = getPaymentTerms();

        contractMasterCacheModel.insideAdditional = getInsideAdditional();

        String insideAdditional = contractMasterCacheModel.insideAdditional;

        if ((insideAdditional != null) && (insideAdditional.length() == 0)) {
            contractMasterCacheModel.insideAdditional = null;
        }

        contractMasterCacheModel.affiliatedContractInfo = getAffiliatedContractInfo();

        String affiliatedContractInfo = contractMasterCacheModel.affiliatedContractInfo;

        if ((affiliatedContractInfo != null) &&
                (affiliatedContractInfo.length() == 0)) {
            contractMasterCacheModel.affiliatedContractInfo = null;
        }

        contractMasterCacheModel.category = getCategory();

        String category = contractMasterCacheModel.category;

        if ((category != null) && (category.length() == 0)) {
            contractMasterCacheModel.category = null;
        }

        contractMasterCacheModel.outsidePhone = getOutsidePhone();

        String outsidePhone = contractMasterCacheModel.outsidePhone;

        if ((outsidePhone != null) && (outsidePhone.length() == 0)) {
            contractMasterCacheModel.outsidePhone = null;
        }

        Date priceprotectionStartDate = getPriceprotectionStartDate();

        if (priceprotectionStartDate != null) {
            contractMasterCacheModel.priceprotectionStartDate = priceprotectionStartDate.getTime();
        } else {
            contractMasterCacheModel.priceprotectionStartDate = Long.MIN_VALUE;
        }

        Date priceprotectionEndDate = getPriceprotectionEndDate();

        if (priceprotectionEndDate != null) {
            contractMasterCacheModel.priceprotectionEndDate = priceprotectionEndDate.getTime();
        } else {
            contractMasterCacheModel.priceprotectionEndDate = Long.MIN_VALUE;
        }

        contractMasterCacheModel.documentType = getDocumentType();

        contractMasterCacheModel.exemptFromLowPrice = getExemptFromLowPrice();

        String exemptFromLowPrice = contractMasterCacheModel.exemptFromLowPrice;

        if ((exemptFromLowPrice != null) && (exemptFromLowPrice.length() == 0)) {
            contractMasterCacheModel.exemptFromLowPrice = null;
        }

        contractMasterCacheModel.organizationKey = getOrganizationKey();

        String organizationKey = contractMasterCacheModel.organizationKey;

        if ((organizationKey != null) && (organizationKey.length() == 0)) {
            contractMasterCacheModel.organizationKey = null;
        }

        contractMasterCacheModel.currency = getCurrency();

        String currency = contractMasterCacheModel.currency;

        if ((currency != null) && (currency.length() == 0)) {
            contractMasterCacheModel.currency = null;
        }

        contractMasterCacheModel.insidePhone = getInsidePhone();

        String insidePhone = contractMasterCacheModel.insidePhone;

        if ((insidePhone != null) && (insidePhone.length() == 0)) {
            contractMasterCacheModel.insidePhone = null;
        }

        contractMasterCacheModel.bunitCompanyMasterSid = getBunitCompanyMasterSid();

        String bunitCompanyMasterSid = contractMasterCacheModel.bunitCompanyMasterSid;

        if ((bunitCompanyMasterSid != null) &&
                (bunitCompanyMasterSid.length() == 0)) {
            contractMasterCacheModel.bunitCompanyMasterSid = null;
        }

        contractMasterCacheModel.outsideAuthor = getOutsideAuthor();

        String outsideAuthor = contractMasterCacheModel.outsideAuthor;

        if ((outsideAuthor != null) && (outsideAuthor.length() == 0)) {
            contractMasterCacheModel.outsideAuthor = null;
        }

        contractMasterCacheModel.contHoldCompanyMasterSid = getContHoldCompanyMasterSid();

        String contHoldCompanyMasterSid = contractMasterCacheModel.contHoldCompanyMasterSid;

        if ((contHoldCompanyMasterSid != null) &&
                (contHoldCompanyMasterSid.length() == 0)) {
            contractMasterCacheModel.contHoldCompanyMasterSid = null;
        }

        Date startDate = getStartDate();

        if (startDate != null) {
            contractMasterCacheModel.startDate = startDate.getTime();
        } else {
            contractMasterCacheModel.startDate = Long.MIN_VALUE;
        }

        contractMasterCacheModel.contractName = getContractName();

        String contractName = contractMasterCacheModel.contractName;

        if ((contractName != null) && (contractName.length() == 0)) {
            contractMasterCacheModel.contractName = null;
        }

        Date lastUpdatedDate = getLastUpdatedDate();

        if (lastUpdatedDate != null) {
            contractMasterCacheModel.lastUpdatedDate = lastUpdatedDate.getTime();
        } else {
            contractMasterCacheModel.lastUpdatedDate = Long.MIN_VALUE;
        }

        contractMasterCacheModel.recordLockStatus = getRecordLockStatus();

        contractMasterCacheModel.priceResetIndicator = getPriceResetIndicator();

        String priceResetIndicator = contractMasterCacheModel.priceResetIndicator;

        if ((priceResetIndicator != null) &&
                (priceResetIndicator.length() == 0)) {
            contractMasterCacheModel.priceResetIndicator = null;
        }

        contractMasterCacheModel.minimumOrder = getMinimumOrder();

        String minimumOrder = contractMasterCacheModel.minimumOrder;

        if ((minimumOrder != null) && (minimumOrder.length() == 0)) {
            contractMasterCacheModel.minimumOrder = null;
        }

        contractMasterCacheModel.cancellationClause = getCancellationClause();

        String cancellationClause = contractMasterCacheModel.cancellationClause;

        if ((cancellationClause != null) && (cancellationClause.length() == 0)) {
            contractMasterCacheModel.cancellationClause = null;
        }

        contractMasterCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = contractMasterCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            contractMasterCacheModel.inboundStatus = null;
        }

        contractMasterCacheModel.internalNotes = getInternalNotes();

        String internalNotes = contractMasterCacheModel.internalNotes;

        if ((internalNotes != null) && (internalNotes.length() == 0)) {
            contractMasterCacheModel.internalNotes = null;
        }

        return contractMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(121);

        sb.append("{proposalEndDate=");
        sb.append(getProposalEndDate());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", renegotiationEndDate=");
        sb.append(getRenegotiationEndDate());
        sb.append(", outsideAdditionalName=");
        sb.append(getOutsideAdditionalName());
        sb.append(", endDate=");
        sb.append(getEndDate());
        sb.append(", manfCompanyMasterSid=");
        sb.append(getManfCompanyMasterSid());
        sb.append(", renegotiationStartDate=");
        sb.append(getRenegotiationStartDate());
        sb.append(", insideAuthor=");
        sb.append(getInsideAuthor());
        sb.append(", advanceNoticeDays=");
        sb.append(getAdvanceNoticeDays());
        sb.append(", outsideOwner=");
        sb.append(getOutsideOwner());
        sb.append(", mostFavoredNation=");
        sb.append(getMostFavoredNation());
        sb.append(", insideAdditionalPhone=");
        sb.append(getInsideAdditionalPhone());
        sb.append(", originalStartDate=");
        sb.append(getOriginalStartDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", proposalStartDate=");
        sb.append(getProposalStartDate());
        sb.append(", contractTradeClass=");
        sb.append(getContractTradeClass());
        sb.append(", outsideAdditional=");
        sb.append(getOutsideAdditional());
        sb.append(", processStatus=");
        sb.append(getProcessStatus());
        sb.append(", insideAdditionalName=");
        sb.append(getInsideAdditionalName());
        sb.append(", contractMasterSid=");
        sb.append(getContractMasterSid());
        sb.append(", contractStatus=");
        sb.append(getContractStatus());
        sb.append(", contractId=");
        sb.append(getContractId());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", contractType=");
        sb.append(getContractType());
        sb.append(", awardStatus=");
        sb.append(getAwardStatus());
        sb.append(", insideOwner=");
        sb.append(getInsideOwner());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", shippingTerms=");
        sb.append(getShippingTerms());
        sb.append(", priceEscalationClause=");
        sb.append(getPriceEscalationClause());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", outsideAdditionalPhone=");
        sb.append(getOutsideAdditionalPhone());
        sb.append(", term=");
        sb.append(getTerm());
        sb.append(", contractNo=");
        sb.append(getContractNo());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", documentClass=");
        sb.append(getDocumentClass());
        sb.append(", originalEndDate=");
        sb.append(getOriginalEndDate());
        sb.append(", paymentTerms=");
        sb.append(getPaymentTerms());
        sb.append(", insideAdditional=");
        sb.append(getInsideAdditional());
        sb.append(", affiliatedContractInfo=");
        sb.append(getAffiliatedContractInfo());
        sb.append(", category=");
        sb.append(getCategory());
        sb.append(", outsidePhone=");
        sb.append(getOutsidePhone());
        sb.append(", priceprotectionStartDate=");
        sb.append(getPriceprotectionStartDate());
        sb.append(", priceprotectionEndDate=");
        sb.append(getPriceprotectionEndDate());
        sb.append(", documentType=");
        sb.append(getDocumentType());
        sb.append(", exemptFromLowPrice=");
        sb.append(getExemptFromLowPrice());
        sb.append(", organizationKey=");
        sb.append(getOrganizationKey());
        sb.append(", currency=");
        sb.append(getCurrency());
        sb.append(", insidePhone=");
        sb.append(getInsidePhone());
        sb.append(", bunitCompanyMasterSid=");
        sb.append(getBunitCompanyMasterSid());
        sb.append(", outsideAuthor=");
        sb.append(getOutsideAuthor());
        sb.append(", contHoldCompanyMasterSid=");
        sb.append(getContHoldCompanyMasterSid());
        sb.append(", startDate=");
        sb.append(getStartDate());
        sb.append(", contractName=");
        sb.append(getContractName());
        sb.append(", lastUpdatedDate=");
        sb.append(getLastUpdatedDate());
        sb.append(", recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", priceResetIndicator=");
        sb.append(getPriceResetIndicator());
        sb.append(", minimumOrder=");
        sb.append(getMinimumOrder());
        sb.append(", cancellationClause=");
        sb.append(getCancellationClause());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append(", internalNotes=");
        sb.append(getInternalNotes());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(184);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.ContractMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>proposalEndDate</column-name><column-value><![CDATA[");
        sb.append(getProposalEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>renegotiationEndDate</column-name><column-value><![CDATA[");
        sb.append(getRenegotiationEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>outsideAdditionalName</column-name><column-value><![CDATA[");
        sb.append(getOutsideAdditionalName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>endDate</column-name><column-value><![CDATA[");
        sb.append(getEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>manfCompanyMasterSid</column-name><column-value><![CDATA[");
        sb.append(getManfCompanyMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>renegotiationStartDate</column-name><column-value><![CDATA[");
        sb.append(getRenegotiationStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>insideAuthor</column-name><column-value><![CDATA[");
        sb.append(getInsideAuthor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>advanceNoticeDays</column-name><column-value><![CDATA[");
        sb.append(getAdvanceNoticeDays());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>outsideOwner</column-name><column-value><![CDATA[");
        sb.append(getOutsideOwner());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mostFavoredNation</column-name><column-value><![CDATA[");
        sb.append(getMostFavoredNation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>insideAdditionalPhone</column-name><column-value><![CDATA[");
        sb.append(getInsideAdditionalPhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>originalStartDate</column-name><column-value><![CDATA[");
        sb.append(getOriginalStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>proposalStartDate</column-name><column-value><![CDATA[");
        sb.append(getProposalStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contractTradeClass</column-name><column-value><![CDATA[");
        sb.append(getContractTradeClass());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>outsideAdditional</column-name><column-value><![CDATA[");
        sb.append(getOutsideAdditional());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>processStatus</column-name><column-value><![CDATA[");
        sb.append(getProcessStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>insideAdditionalName</column-name><column-value><![CDATA[");
        sb.append(getInsideAdditionalName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contractMasterSid</column-name><column-value><![CDATA[");
        sb.append(getContractMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contractStatus</column-name><column-value><![CDATA[");
        sb.append(getContractStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contractId</column-name><column-value><![CDATA[");
        sb.append(getContractId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contractType</column-name><column-value><![CDATA[");
        sb.append(getContractType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>awardStatus</column-name><column-value><![CDATA[");
        sb.append(getAwardStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>insideOwner</column-name><column-value><![CDATA[");
        sb.append(getInsideOwner());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shippingTerms</column-name><column-value><![CDATA[");
        sb.append(getShippingTerms());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceEscalationClause</column-name><column-value><![CDATA[");
        sb.append(getPriceEscalationClause());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>outsideAdditionalPhone</column-name><column-value><![CDATA[");
        sb.append(getOutsideAdditionalPhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>term</column-name><column-value><![CDATA[");
        sb.append(getTerm());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contractNo</column-name><column-value><![CDATA[");
        sb.append(getContractNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>documentClass</column-name><column-value><![CDATA[");
        sb.append(getDocumentClass());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>originalEndDate</column-name><column-value><![CDATA[");
        sb.append(getOriginalEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>paymentTerms</column-name><column-value><![CDATA[");
        sb.append(getPaymentTerms());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>insideAdditional</column-name><column-value><![CDATA[");
        sb.append(getInsideAdditional());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>affiliatedContractInfo</column-name><column-value><![CDATA[");
        sb.append(getAffiliatedContractInfo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>category</column-name><column-value><![CDATA[");
        sb.append(getCategory());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>outsidePhone</column-name><column-value><![CDATA[");
        sb.append(getOutsidePhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceprotectionStartDate</column-name><column-value><![CDATA[");
        sb.append(getPriceprotectionStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceprotectionEndDate</column-name><column-value><![CDATA[");
        sb.append(getPriceprotectionEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>documentType</column-name><column-value><![CDATA[");
        sb.append(getDocumentType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>exemptFromLowPrice</column-name><column-value><![CDATA[");
        sb.append(getExemptFromLowPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationKey</column-name><column-value><![CDATA[");
        sb.append(getOrganizationKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>currency</column-name><column-value><![CDATA[");
        sb.append(getCurrency());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>insidePhone</column-name><column-value><![CDATA[");
        sb.append(getInsidePhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bunitCompanyMasterSid</column-name><column-value><![CDATA[");
        sb.append(getBunitCompanyMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>outsideAuthor</column-name><column-value><![CDATA[");
        sb.append(getOutsideAuthor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contHoldCompanyMasterSid</column-name><column-value><![CDATA[");
        sb.append(getContHoldCompanyMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startDate</column-name><column-value><![CDATA[");
        sb.append(getStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contractName</column-name><column-value><![CDATA[");
        sb.append(getContractName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdatedDate</column-name><column-value><![CDATA[");
        sb.append(getLastUpdatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceResetIndicator</column-name><column-value><![CDATA[");
        sb.append(getPriceResetIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>minimumOrder</column-name><column-value><![CDATA[");
        sb.append(getMinimumOrder());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cancellationClause</column-name><column-value><![CDATA[");
        sb.append(getCancellationClause());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>internalNotes</column-name><column-value><![CDATA[");
        sb.append(getInternalNotes());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
