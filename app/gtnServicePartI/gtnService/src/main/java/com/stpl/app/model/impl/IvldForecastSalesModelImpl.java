/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.IvldForecastSales;
import com.stpl.app.model.IvldForecastSalesModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the IvldForecastSales service. Represents a row in the &quot;IVLD_FORECAST_SALES&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link IvldForecastSalesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IvldForecastSalesImpl}.
 * </p>
 *
 * @author
 * @see IvldForecastSalesImpl
 * @see IvldForecastSales
 * @see IvldForecastSalesModel
 * @generated
 */
@ProviderType
public class IvldForecastSalesModelImpl extends BaseModelImpl<IvldForecastSales>
	implements IvldForecastSalesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ivld forecast sales model instance should use the {@link IvldForecastSales} interface instead.
	 */
	public static final String TABLE_NAME = "IVLD_FORECAST_SALES";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PRICE", Types.VARCHAR },
			{ "FORECAST_YEAR", Types.VARCHAR },
			{ "FORECAST_DATE", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "FORECAST_VALUE", Types.VARCHAR },
			{ "FORECAST_INTFID", Types.VARCHAR },
			{ "DOLLARS", Types.VARCHAR },
			{ "NDC", Types.VARCHAR },
			{ "ACTUAL_SALES_PERCENTAGE", Types.VARCHAR },
			{ "SOURCE", Types.VARCHAR },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.VARCHAR },
			{ "ADD_CHG_DEL_INDICATOR", Types.VARCHAR },
			{ "ACTUAL_SALES_PERCENTAGE_MONTH", Types.VARCHAR },
			{ "ERROR_CODE", Types.VARCHAR },
			{ "INTF_INSERTED_DATE", Types.TIMESTAMP },
			{ "MODIFIED_BY", Types.VARCHAR },
			{ "REPROCESSED_FLAG", Types.VARCHAR },
			{ "PERCENTAGE_ESTIMATE", Types.VARCHAR },
			{ "PERCENTAGE_ESTIMATE_YEAR", Types.VARCHAR },
			{ "UNITS", Types.VARCHAR },
			{ "REASON_FOR_FAILURE", Types.VARCHAR },
			{ "FORECAST_START_DATE", Types.VARCHAR },
			{ "FORECAST_VALUE_TYPE", Types.VARCHAR },
			{ "FORECASTED_SALES_PERCENT_MONTH", Types.VARCHAR },
			{ "COUNTRY", Types.VARCHAR },
			{ "PRODUCT", Types.VARCHAR },
			{ "BATCH_ID", Types.VARCHAR },
			{ "FORECAST_VER", Types.VARCHAR },
			{ "FORECAST_MONTH", Types.VARCHAR },
			{ "IVLD_FORECAST_SALES_SID", Types.INTEGER },
			{ "ERROR_FIELD", Types.VARCHAR },
			{ "SEGMENT", Types.VARCHAR },
			{ "BRAND", Types.VARCHAR },
			{ "FORECASTED_SALES_PERCENTAGE", Types.VARCHAR },
			{ "FORECAST_NAME", Types.VARCHAR },
			{ "CHECK_RECORD", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PRICE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_YEAR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_DATE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("FORECAST_VALUE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_INTFID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DOLLARS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NDC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACTUAL_SALES_PERCENTAGE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ADD_CHG_DEL_INDICATOR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACTUAL_SALES_PERCENTAGE_MONTH", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ERROR_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INTF_INSERTED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REPROCESSED_FLAG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PERCENTAGE_ESTIMATE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PERCENTAGE_ESTIMATE_YEAR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UNITS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REASON_FOR_FAILURE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_START_DATE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_VALUE_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECASTED_SALES_PERCENT_MONTH", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COUNTRY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PRODUCT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_VER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_MONTH", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IVLD_FORECAST_SALES_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ERROR_FIELD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SEGMENT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BRAND", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECASTED_SALES_PERCENTAGE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CHECK_RECORD", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table IVLD_FORECAST_SALES (PRICE VARCHAR(75) null,FORECAST_YEAR VARCHAR(75) null,FORECAST_DATE VARCHAR(75) null,MODIFIED_DATE DATE null,FORECAST_VALUE VARCHAR(75) null,FORECAST_INTFID VARCHAR(75) null,DOLLARS VARCHAR(75) null,NDC VARCHAR(75) null,ACTUAL_SALES_PERCENTAGE VARCHAR(75) null,SOURCE VARCHAR(75) null,CREATED_DATE DATE null,CREATED_BY VARCHAR(75) null,ADD_CHG_DEL_INDICATOR VARCHAR(75) null,ACTUAL_SALES_PERCENTAGE_MONTH VARCHAR(75) null,ERROR_CODE VARCHAR(75) null,INTF_INSERTED_DATE DATE null,MODIFIED_BY VARCHAR(75) null,REPROCESSED_FLAG VARCHAR(75) null,PERCENTAGE_ESTIMATE VARCHAR(75) null,PERCENTAGE_ESTIMATE_YEAR VARCHAR(75) null,UNITS VARCHAR(75) null,REASON_FOR_FAILURE VARCHAR(75) null,FORECAST_START_DATE VARCHAR(75) null,FORECAST_VALUE_TYPE VARCHAR(75) null,FORECASTED_SALES_PERCENT_MONTH VARCHAR(75) null,COUNTRY VARCHAR(75) null,PRODUCT VARCHAR(75) null,BATCH_ID VARCHAR(75) null,FORECAST_VER VARCHAR(75) null,FORECAST_MONTH VARCHAR(75) null,IVLD_FORECAST_SALES_SID INTEGER not null primary key IDENTITY,ERROR_FIELD VARCHAR(75) null,SEGMENT VARCHAR(75) null,BRAND VARCHAR(75) null,FORECASTED_SALES_PERCENTAGE VARCHAR(75) null,FORECAST_NAME VARCHAR(75) null,CHECK_RECORD BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table IVLD_FORECAST_SALES";
	public static final String ORDER_BY_JPQL = " ORDER BY ivldForecastSales.ivldForecastSalesSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY IVLD_FORECAST_SALES.IVLD_FORECAST_SALES_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.IvldForecastSales"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.IvldForecastSales"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.IvldForecastSales"));

	public IvldForecastSalesModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _ivldForecastSalesSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setIvldForecastSalesSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ivldForecastSalesSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return IvldForecastSales.class;
	}

	@Override
	public String getModelClassName() {
		return IvldForecastSales.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("price", getPrice());
		attributes.put("forecastYear", getForecastYear());
		attributes.put("forecastDate", getForecastDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("forecastValue", getForecastValue());
		attributes.put("forecastIntfid", getForecastIntfid());
		attributes.put("dollars", getDollars());
		attributes.put("ndc", getNdc());
		attributes.put("actualSalesPercentage", getActualSalesPercentage());
		attributes.put("source", getSource());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("addChgDelIndicator", getAddChgDelIndicator());
		attributes.put("actualSalesPercentageMonth",
			getActualSalesPercentageMonth());
		attributes.put("errorCode", getErrorCode());
		attributes.put("intfInsertedDate", getIntfInsertedDate());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("reprocessedFlag", getReprocessedFlag());
		attributes.put("percentageEstimate", getPercentageEstimate());
		attributes.put("percentageEstimateYear", getPercentageEstimateYear());
		attributes.put("units", getUnits());
		attributes.put("reasonForFailure", getReasonForFailure());
		attributes.put("forecastStartDate", getForecastStartDate());
		attributes.put("forecastValueType", getForecastValueType());
		attributes.put("forecastedSalesPercentMonth",
			getForecastedSalesPercentMonth());
		attributes.put("country", getCountry());
		attributes.put("product", getProduct());
		attributes.put("batchId", getBatchId());
		attributes.put("forecastVer", getForecastVer());
		attributes.put("forecastMonth", getForecastMonth());
		attributes.put("ivldForecastSalesSid", getIvldForecastSalesSid());
		attributes.put("errorField", getErrorField());
		attributes.put("segment", getSegment());
		attributes.put("brand", getBrand());
		attributes.put("forecastedSalesPercentage",
			getForecastedSalesPercentage());
		attributes.put("forecastName", getForecastName());
		attributes.put("checkRecord", getCheckRecord());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String price = (String)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		String forecastYear = (String)attributes.get("forecastYear");

		if (forecastYear != null) {
			setForecastYear(forecastYear);
		}

		String forecastDate = (String)attributes.get("forecastDate");

		if (forecastDate != null) {
			setForecastDate(forecastDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String forecastValue = (String)attributes.get("forecastValue");

		if (forecastValue != null) {
			setForecastValue(forecastValue);
		}

		String forecastIntfid = (String)attributes.get("forecastIntfid");

		if (forecastIntfid != null) {
			setForecastIntfid(forecastIntfid);
		}

		String dollars = (String)attributes.get("dollars");

		if (dollars != null) {
			setDollars(dollars);
		}

		String ndc = (String)attributes.get("ndc");

		if (ndc != null) {
			setNdc(ndc);
		}

		String actualSalesPercentage = (String)attributes.get(
				"actualSalesPercentage");

		if (actualSalesPercentage != null) {
			setActualSalesPercentage(actualSalesPercentage);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String addChgDelIndicator = (String)attributes.get("addChgDelIndicator");

		if (addChgDelIndicator != null) {
			setAddChgDelIndicator(addChgDelIndicator);
		}

		String actualSalesPercentageMonth = (String)attributes.get(
				"actualSalesPercentageMonth");

		if (actualSalesPercentageMonth != null) {
			setActualSalesPercentageMonth(actualSalesPercentageMonth);
		}

		String errorCode = (String)attributes.get("errorCode");

		if (errorCode != null) {
			setErrorCode(errorCode);
		}

		Date intfInsertedDate = (Date)attributes.get("intfInsertedDate");

		if (intfInsertedDate != null) {
			setIntfInsertedDate(intfInsertedDate);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		String reprocessedFlag = (String)attributes.get("reprocessedFlag");

		if (reprocessedFlag != null) {
			setReprocessedFlag(reprocessedFlag);
		}

		String percentageEstimate = (String)attributes.get("percentageEstimate");

		if (percentageEstimate != null) {
			setPercentageEstimate(percentageEstimate);
		}

		String percentageEstimateYear = (String)attributes.get(
				"percentageEstimateYear");

		if (percentageEstimateYear != null) {
			setPercentageEstimateYear(percentageEstimateYear);
		}

		String units = (String)attributes.get("units");

		if (units != null) {
			setUnits(units);
		}

		String reasonForFailure = (String)attributes.get("reasonForFailure");

		if (reasonForFailure != null) {
			setReasonForFailure(reasonForFailure);
		}

		String forecastStartDate = (String)attributes.get("forecastStartDate");

		if (forecastStartDate != null) {
			setForecastStartDate(forecastStartDate);
		}

		String forecastValueType = (String)attributes.get("forecastValueType");

		if (forecastValueType != null) {
			setForecastValueType(forecastValueType);
		}

		String forecastedSalesPercentMonth = (String)attributes.get(
				"forecastedSalesPercentMonth");

		if (forecastedSalesPercentMonth != null) {
			setForecastedSalesPercentMonth(forecastedSalesPercentMonth);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		String product = (String)attributes.get("product");

		if (product != null) {
			setProduct(product);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		String forecastVer = (String)attributes.get("forecastVer");

		if (forecastVer != null) {
			setForecastVer(forecastVer);
		}

		String forecastMonth = (String)attributes.get("forecastMonth");

		if (forecastMonth != null) {
			setForecastMonth(forecastMonth);
		}

		Integer ivldForecastSalesSid = (Integer)attributes.get(
				"ivldForecastSalesSid");

		if (ivldForecastSalesSid != null) {
			setIvldForecastSalesSid(ivldForecastSalesSid);
		}

		String errorField = (String)attributes.get("errorField");

		if (errorField != null) {
			setErrorField(errorField);
		}

		String segment = (String)attributes.get("segment");

		if (segment != null) {
			setSegment(segment);
		}

		String brand = (String)attributes.get("brand");

		if (brand != null) {
			setBrand(brand);
		}

		String forecastedSalesPercentage = (String)attributes.get(
				"forecastedSalesPercentage");

		if (forecastedSalesPercentage != null) {
			setForecastedSalesPercentage(forecastedSalesPercentage);
		}

		String forecastName = (String)attributes.get("forecastName");

		if (forecastName != null) {
			setForecastName(forecastName);
		}

		Boolean checkRecord = (Boolean)attributes.get("checkRecord");

		if (checkRecord != null) {
			setCheckRecord(checkRecord);
		}
	}

	@Override
	public String getPrice() {
		if (_price == null) {
			return StringPool.BLANK;
		}
		else {
			return _price;
		}
	}

	@Override
	public void setPrice(String price) {
		_price = price;
	}

	@Override
	public String getForecastYear() {
		if (_forecastYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastYear;
		}
	}

	@Override
	public void setForecastYear(String forecastYear) {
		_forecastYear = forecastYear;
	}

	@Override
	public String getForecastDate() {
		if (_forecastDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastDate;
		}
	}

	@Override
	public void setForecastDate(String forecastDate) {
		_forecastDate = forecastDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getForecastValue() {
		if (_forecastValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastValue;
		}
	}

	@Override
	public void setForecastValue(String forecastValue) {
		_forecastValue = forecastValue;
	}

	@Override
	public String getForecastIntfid() {
		if (_forecastIntfid == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastIntfid;
		}
	}

	@Override
	public void setForecastIntfid(String forecastIntfid) {
		_forecastIntfid = forecastIntfid;
	}

	@Override
	public String getDollars() {
		if (_dollars == null) {
			return StringPool.BLANK;
		}
		else {
			return _dollars;
		}
	}

	@Override
	public void setDollars(String dollars) {
		_dollars = dollars;
	}

	@Override
	public String getNdc() {
		if (_ndc == null) {
			return StringPool.BLANK;
		}
		else {
			return _ndc;
		}
	}

	@Override
	public void setNdc(String ndc) {
		_ndc = ndc;
	}

	@Override
	public String getActualSalesPercentage() {
		if (_actualSalesPercentage == null) {
			return StringPool.BLANK;
		}
		else {
			return _actualSalesPercentage;
		}
	}

	@Override
	public void setActualSalesPercentage(String actualSalesPercentage) {
		_actualSalesPercentage = actualSalesPercentage;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getAddChgDelIndicator() {
		if (_addChgDelIndicator == null) {
			return StringPool.BLANK;
		}
		else {
			return _addChgDelIndicator;
		}
	}

	@Override
	public void setAddChgDelIndicator(String addChgDelIndicator) {
		_addChgDelIndicator = addChgDelIndicator;
	}

	@Override
	public String getActualSalesPercentageMonth() {
		if (_actualSalesPercentageMonth == null) {
			return StringPool.BLANK;
		}
		else {
			return _actualSalesPercentageMonth;
		}
	}

	@Override
	public void setActualSalesPercentageMonth(String actualSalesPercentageMonth) {
		_actualSalesPercentageMonth = actualSalesPercentageMonth;
	}

	@Override
	public String getErrorCode() {
		if (_errorCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _errorCode;
		}
	}

	@Override
	public void setErrorCode(String errorCode) {
		_errorCode = errorCode;
	}

	@Override
	public Date getIntfInsertedDate() {
		return _intfInsertedDate;
	}

	@Override
	public void setIntfInsertedDate(Date intfInsertedDate) {
		_intfInsertedDate = intfInsertedDate;
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public String getReprocessedFlag() {
		if (_reprocessedFlag == null) {
			return StringPool.BLANK;
		}
		else {
			return _reprocessedFlag;
		}
	}

	@Override
	public void setReprocessedFlag(String reprocessedFlag) {
		_reprocessedFlag = reprocessedFlag;
	}

	@Override
	public String getPercentageEstimate() {
		if (_percentageEstimate == null) {
			return StringPool.BLANK;
		}
		else {
			return _percentageEstimate;
		}
	}

	@Override
	public void setPercentageEstimate(String percentageEstimate) {
		_percentageEstimate = percentageEstimate;
	}

	@Override
	public String getPercentageEstimateYear() {
		if (_percentageEstimateYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _percentageEstimateYear;
		}
	}

	@Override
	public void setPercentageEstimateYear(String percentageEstimateYear) {
		_percentageEstimateYear = percentageEstimateYear;
	}

	@Override
	public String getUnits() {
		if (_units == null) {
			return StringPool.BLANK;
		}
		else {
			return _units;
		}
	}

	@Override
	public void setUnits(String units) {
		_units = units;
	}

	@Override
	public String getReasonForFailure() {
		if (_reasonForFailure == null) {
			return StringPool.BLANK;
		}
		else {
			return _reasonForFailure;
		}
	}

	@Override
	public void setReasonForFailure(String reasonForFailure) {
		_reasonForFailure = reasonForFailure;
	}

	@Override
	public String getForecastStartDate() {
		if (_forecastStartDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastStartDate;
		}
	}

	@Override
	public void setForecastStartDate(String forecastStartDate) {
		_forecastStartDate = forecastStartDate;
	}

	@Override
	public String getForecastValueType() {
		if (_forecastValueType == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastValueType;
		}
	}

	@Override
	public void setForecastValueType(String forecastValueType) {
		_forecastValueType = forecastValueType;
	}

	@Override
	public String getForecastedSalesPercentMonth() {
		if (_forecastedSalesPercentMonth == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastedSalesPercentMonth;
		}
	}

	@Override
	public void setForecastedSalesPercentMonth(
		String forecastedSalesPercentMonth) {
		_forecastedSalesPercentMonth = forecastedSalesPercentMonth;
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public String getProduct() {
		if (_product == null) {
			return StringPool.BLANK;
		}
		else {
			return _product;
		}
	}

	@Override
	public void setProduct(String product) {
		_product = product;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public String getForecastVer() {
		if (_forecastVer == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastVer;
		}
	}

	@Override
	public void setForecastVer(String forecastVer) {
		_forecastVer = forecastVer;
	}

	@Override
	public String getForecastMonth() {
		if (_forecastMonth == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastMonth;
		}
	}

	@Override
	public void setForecastMonth(String forecastMonth) {
		_forecastMonth = forecastMonth;
	}

	@Override
	public int getIvldForecastSalesSid() {
		return _ivldForecastSalesSid;
	}

	@Override
	public void setIvldForecastSalesSid(int ivldForecastSalesSid) {
		_ivldForecastSalesSid = ivldForecastSalesSid;
	}

	@Override
	public String getErrorField() {
		if (_errorField == null) {
			return StringPool.BLANK;
		}
		else {
			return _errorField;
		}
	}

	@Override
	public void setErrorField(String errorField) {
		_errorField = errorField;
	}

	@Override
	public String getSegment() {
		if (_segment == null) {
			return StringPool.BLANK;
		}
		else {
			return _segment;
		}
	}

	@Override
	public void setSegment(String segment) {
		_segment = segment;
	}

	@Override
	public String getBrand() {
		if (_brand == null) {
			return StringPool.BLANK;
		}
		else {
			return _brand;
		}
	}

	@Override
	public void setBrand(String brand) {
		_brand = brand;
	}

	@Override
	public String getForecastedSalesPercentage() {
		if (_forecastedSalesPercentage == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastedSalesPercentage;
		}
	}

	@Override
	public void setForecastedSalesPercentage(String forecastedSalesPercentage) {
		_forecastedSalesPercentage = forecastedSalesPercentage;
	}

	@Override
	public String getForecastName() {
		if (_forecastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastName;
		}
	}

	@Override
	public void setForecastName(String forecastName) {
		_forecastName = forecastName;
	}

	@Override
	public boolean getCheckRecord() {
		return _checkRecord;
	}

	@Override
	public boolean isCheckRecord() {
		return _checkRecord;
	}

	@Override
	public void setCheckRecord(boolean checkRecord) {
		_checkRecord = checkRecord;
	}

	@Override
	public IvldForecastSales toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (IvldForecastSales)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IvldForecastSalesImpl ivldForecastSalesImpl = new IvldForecastSalesImpl();

		ivldForecastSalesImpl.setPrice(getPrice());
		ivldForecastSalesImpl.setForecastYear(getForecastYear());
		ivldForecastSalesImpl.setForecastDate(getForecastDate());
		ivldForecastSalesImpl.setModifiedDate(getModifiedDate());
		ivldForecastSalesImpl.setForecastValue(getForecastValue());
		ivldForecastSalesImpl.setForecastIntfid(getForecastIntfid());
		ivldForecastSalesImpl.setDollars(getDollars());
		ivldForecastSalesImpl.setNdc(getNdc());
		ivldForecastSalesImpl.setActualSalesPercentage(getActualSalesPercentage());
		ivldForecastSalesImpl.setSource(getSource());
		ivldForecastSalesImpl.setCreatedDate(getCreatedDate());
		ivldForecastSalesImpl.setCreatedBy(getCreatedBy());
		ivldForecastSalesImpl.setAddChgDelIndicator(getAddChgDelIndicator());
		ivldForecastSalesImpl.setActualSalesPercentageMonth(getActualSalesPercentageMonth());
		ivldForecastSalesImpl.setErrorCode(getErrorCode());
		ivldForecastSalesImpl.setIntfInsertedDate(getIntfInsertedDate());
		ivldForecastSalesImpl.setModifiedBy(getModifiedBy());
		ivldForecastSalesImpl.setReprocessedFlag(getReprocessedFlag());
		ivldForecastSalesImpl.setPercentageEstimate(getPercentageEstimate());
		ivldForecastSalesImpl.setPercentageEstimateYear(getPercentageEstimateYear());
		ivldForecastSalesImpl.setUnits(getUnits());
		ivldForecastSalesImpl.setReasonForFailure(getReasonForFailure());
		ivldForecastSalesImpl.setForecastStartDate(getForecastStartDate());
		ivldForecastSalesImpl.setForecastValueType(getForecastValueType());
		ivldForecastSalesImpl.setForecastedSalesPercentMonth(getForecastedSalesPercentMonth());
		ivldForecastSalesImpl.setCountry(getCountry());
		ivldForecastSalesImpl.setProduct(getProduct());
		ivldForecastSalesImpl.setBatchId(getBatchId());
		ivldForecastSalesImpl.setForecastVer(getForecastVer());
		ivldForecastSalesImpl.setForecastMonth(getForecastMonth());
		ivldForecastSalesImpl.setIvldForecastSalesSid(getIvldForecastSalesSid());
		ivldForecastSalesImpl.setErrorField(getErrorField());
		ivldForecastSalesImpl.setSegment(getSegment());
		ivldForecastSalesImpl.setBrand(getBrand());
		ivldForecastSalesImpl.setForecastedSalesPercentage(getForecastedSalesPercentage());
		ivldForecastSalesImpl.setForecastName(getForecastName());
		ivldForecastSalesImpl.setCheckRecord(getCheckRecord());

		ivldForecastSalesImpl.resetOriginalValues();

		return ivldForecastSalesImpl;
	}

	@Override
	public int compareTo(IvldForecastSales ivldForecastSales) {
		int primaryKey = ivldForecastSales.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof IvldForecastSales)) {
			return false;
		}

		IvldForecastSales ivldForecastSales = (IvldForecastSales)obj;

		int primaryKey = ivldForecastSales.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<IvldForecastSales> toCacheModel() {
		IvldForecastSalesCacheModel ivldForecastSalesCacheModel = new IvldForecastSalesCacheModel();

		ivldForecastSalesCacheModel.price = getPrice();

		String price = ivldForecastSalesCacheModel.price;

		if ((price != null) && (price.length() == 0)) {
			ivldForecastSalesCacheModel.price = null;
		}

		ivldForecastSalesCacheModel.forecastYear = getForecastYear();

		String forecastYear = ivldForecastSalesCacheModel.forecastYear;

		if ((forecastYear != null) && (forecastYear.length() == 0)) {
			ivldForecastSalesCacheModel.forecastYear = null;
		}

		ivldForecastSalesCacheModel.forecastDate = getForecastDate();

		String forecastDate = ivldForecastSalesCacheModel.forecastDate;

		if ((forecastDate != null) && (forecastDate.length() == 0)) {
			ivldForecastSalesCacheModel.forecastDate = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ivldForecastSalesCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ivldForecastSalesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ivldForecastSalesCacheModel.forecastValue = getForecastValue();

		String forecastValue = ivldForecastSalesCacheModel.forecastValue;

		if ((forecastValue != null) && (forecastValue.length() == 0)) {
			ivldForecastSalesCacheModel.forecastValue = null;
		}

		ivldForecastSalesCacheModel.forecastIntfid = getForecastIntfid();

		String forecastIntfid = ivldForecastSalesCacheModel.forecastIntfid;

		if ((forecastIntfid != null) && (forecastIntfid.length() == 0)) {
			ivldForecastSalesCacheModel.forecastIntfid = null;
		}

		ivldForecastSalesCacheModel.dollars = getDollars();

		String dollars = ivldForecastSalesCacheModel.dollars;

		if ((dollars != null) && (dollars.length() == 0)) {
			ivldForecastSalesCacheModel.dollars = null;
		}

		ivldForecastSalesCacheModel.ndc = getNdc();

		String ndc = ivldForecastSalesCacheModel.ndc;

		if ((ndc != null) && (ndc.length() == 0)) {
			ivldForecastSalesCacheModel.ndc = null;
		}

		ivldForecastSalesCacheModel.actualSalesPercentage = getActualSalesPercentage();

		String actualSalesPercentage = ivldForecastSalesCacheModel.actualSalesPercentage;

		if ((actualSalesPercentage != null) &&
				(actualSalesPercentage.length() == 0)) {
			ivldForecastSalesCacheModel.actualSalesPercentage = null;
		}

		ivldForecastSalesCacheModel.source = getSource();

		String source = ivldForecastSalesCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			ivldForecastSalesCacheModel.source = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			ivldForecastSalesCacheModel.createdDate = createdDate.getTime();
		}
		else {
			ivldForecastSalesCacheModel.createdDate = Long.MIN_VALUE;
		}

		ivldForecastSalesCacheModel.createdBy = getCreatedBy();

		String createdBy = ivldForecastSalesCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			ivldForecastSalesCacheModel.createdBy = null;
		}

		ivldForecastSalesCacheModel.addChgDelIndicator = getAddChgDelIndicator();

		String addChgDelIndicator = ivldForecastSalesCacheModel.addChgDelIndicator;

		if ((addChgDelIndicator != null) && (addChgDelIndicator.length() == 0)) {
			ivldForecastSalesCacheModel.addChgDelIndicator = null;
		}

		ivldForecastSalesCacheModel.actualSalesPercentageMonth = getActualSalesPercentageMonth();

		String actualSalesPercentageMonth = ivldForecastSalesCacheModel.actualSalesPercentageMonth;

		if ((actualSalesPercentageMonth != null) &&
				(actualSalesPercentageMonth.length() == 0)) {
			ivldForecastSalesCacheModel.actualSalesPercentageMonth = null;
		}

		ivldForecastSalesCacheModel.errorCode = getErrorCode();

		String errorCode = ivldForecastSalesCacheModel.errorCode;

		if ((errorCode != null) && (errorCode.length() == 0)) {
			ivldForecastSalesCacheModel.errorCode = null;
		}

		Date intfInsertedDate = getIntfInsertedDate();

		if (intfInsertedDate != null) {
			ivldForecastSalesCacheModel.intfInsertedDate = intfInsertedDate.getTime();
		}
		else {
			ivldForecastSalesCacheModel.intfInsertedDate = Long.MIN_VALUE;
		}

		ivldForecastSalesCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = ivldForecastSalesCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			ivldForecastSalesCacheModel.modifiedBy = null;
		}

		ivldForecastSalesCacheModel.reprocessedFlag = getReprocessedFlag();

		String reprocessedFlag = ivldForecastSalesCacheModel.reprocessedFlag;

		if ((reprocessedFlag != null) && (reprocessedFlag.length() == 0)) {
			ivldForecastSalesCacheModel.reprocessedFlag = null;
		}

		ivldForecastSalesCacheModel.percentageEstimate = getPercentageEstimate();

		String percentageEstimate = ivldForecastSalesCacheModel.percentageEstimate;

		if ((percentageEstimate != null) && (percentageEstimate.length() == 0)) {
			ivldForecastSalesCacheModel.percentageEstimate = null;
		}

		ivldForecastSalesCacheModel.percentageEstimateYear = getPercentageEstimateYear();

		String percentageEstimateYear = ivldForecastSalesCacheModel.percentageEstimateYear;

		if ((percentageEstimateYear != null) &&
				(percentageEstimateYear.length() == 0)) {
			ivldForecastSalesCacheModel.percentageEstimateYear = null;
		}

		ivldForecastSalesCacheModel.units = getUnits();

		String units = ivldForecastSalesCacheModel.units;

		if ((units != null) && (units.length() == 0)) {
			ivldForecastSalesCacheModel.units = null;
		}

		ivldForecastSalesCacheModel.reasonForFailure = getReasonForFailure();

		String reasonForFailure = ivldForecastSalesCacheModel.reasonForFailure;

		if ((reasonForFailure != null) && (reasonForFailure.length() == 0)) {
			ivldForecastSalesCacheModel.reasonForFailure = null;
		}

		ivldForecastSalesCacheModel.forecastStartDate = getForecastStartDate();

		String forecastStartDate = ivldForecastSalesCacheModel.forecastStartDate;

		if ((forecastStartDate != null) && (forecastStartDate.length() == 0)) {
			ivldForecastSalesCacheModel.forecastStartDate = null;
		}

		ivldForecastSalesCacheModel.forecastValueType = getForecastValueType();

		String forecastValueType = ivldForecastSalesCacheModel.forecastValueType;

		if ((forecastValueType != null) && (forecastValueType.length() == 0)) {
			ivldForecastSalesCacheModel.forecastValueType = null;
		}

		ivldForecastSalesCacheModel.forecastedSalesPercentMonth = getForecastedSalesPercentMonth();

		String forecastedSalesPercentMonth = ivldForecastSalesCacheModel.forecastedSalesPercentMonth;

		if ((forecastedSalesPercentMonth != null) &&
				(forecastedSalesPercentMonth.length() == 0)) {
			ivldForecastSalesCacheModel.forecastedSalesPercentMonth = null;
		}

		ivldForecastSalesCacheModel.country = getCountry();

		String country = ivldForecastSalesCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			ivldForecastSalesCacheModel.country = null;
		}

		ivldForecastSalesCacheModel.product = getProduct();

		String product = ivldForecastSalesCacheModel.product;

		if ((product != null) && (product.length() == 0)) {
			ivldForecastSalesCacheModel.product = null;
		}

		ivldForecastSalesCacheModel.batchId = getBatchId();

		String batchId = ivldForecastSalesCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			ivldForecastSalesCacheModel.batchId = null;
		}

		ivldForecastSalesCacheModel.forecastVer = getForecastVer();

		String forecastVer = ivldForecastSalesCacheModel.forecastVer;

		if ((forecastVer != null) && (forecastVer.length() == 0)) {
			ivldForecastSalesCacheModel.forecastVer = null;
		}

		ivldForecastSalesCacheModel.forecastMonth = getForecastMonth();

		String forecastMonth = ivldForecastSalesCacheModel.forecastMonth;

		if ((forecastMonth != null) && (forecastMonth.length() == 0)) {
			ivldForecastSalesCacheModel.forecastMonth = null;
		}

		ivldForecastSalesCacheModel.ivldForecastSalesSid = getIvldForecastSalesSid();

		ivldForecastSalesCacheModel.errorField = getErrorField();

		String errorField = ivldForecastSalesCacheModel.errorField;

		if ((errorField != null) && (errorField.length() == 0)) {
			ivldForecastSalesCacheModel.errorField = null;
		}

		ivldForecastSalesCacheModel.segment = getSegment();

		String segment = ivldForecastSalesCacheModel.segment;

		if ((segment != null) && (segment.length() == 0)) {
			ivldForecastSalesCacheModel.segment = null;
		}

		ivldForecastSalesCacheModel.brand = getBrand();

		String brand = ivldForecastSalesCacheModel.brand;

		if ((brand != null) && (brand.length() == 0)) {
			ivldForecastSalesCacheModel.brand = null;
		}

		ivldForecastSalesCacheModel.forecastedSalesPercentage = getForecastedSalesPercentage();

		String forecastedSalesPercentage = ivldForecastSalesCacheModel.forecastedSalesPercentage;

		if ((forecastedSalesPercentage != null) &&
				(forecastedSalesPercentage.length() == 0)) {
			ivldForecastSalesCacheModel.forecastedSalesPercentage = null;
		}

		ivldForecastSalesCacheModel.forecastName = getForecastName();

		String forecastName = ivldForecastSalesCacheModel.forecastName;

		if ((forecastName != null) && (forecastName.length() == 0)) {
			ivldForecastSalesCacheModel.forecastName = null;
		}

		ivldForecastSalesCacheModel.checkRecord = getCheckRecord();

		return ivldForecastSalesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(75);

		sb.append("{price=");
		sb.append(getPrice());
		sb.append(", forecastYear=");
		sb.append(getForecastYear());
		sb.append(", forecastDate=");
		sb.append(getForecastDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", forecastValue=");
		sb.append(getForecastValue());
		sb.append(", forecastIntfid=");
		sb.append(getForecastIntfid());
		sb.append(", dollars=");
		sb.append(getDollars());
		sb.append(", ndc=");
		sb.append(getNdc());
		sb.append(", actualSalesPercentage=");
		sb.append(getActualSalesPercentage());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", addChgDelIndicator=");
		sb.append(getAddChgDelIndicator());
		sb.append(", actualSalesPercentageMonth=");
		sb.append(getActualSalesPercentageMonth());
		sb.append(", errorCode=");
		sb.append(getErrorCode());
		sb.append(", intfInsertedDate=");
		sb.append(getIntfInsertedDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", reprocessedFlag=");
		sb.append(getReprocessedFlag());
		sb.append(", percentageEstimate=");
		sb.append(getPercentageEstimate());
		sb.append(", percentageEstimateYear=");
		sb.append(getPercentageEstimateYear());
		sb.append(", units=");
		sb.append(getUnits());
		sb.append(", reasonForFailure=");
		sb.append(getReasonForFailure());
		sb.append(", forecastStartDate=");
		sb.append(getForecastStartDate());
		sb.append(", forecastValueType=");
		sb.append(getForecastValueType());
		sb.append(", forecastedSalesPercentMonth=");
		sb.append(getForecastedSalesPercentMonth());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", product=");
		sb.append(getProduct());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", forecastVer=");
		sb.append(getForecastVer());
		sb.append(", forecastMonth=");
		sb.append(getForecastMonth());
		sb.append(", ivldForecastSalesSid=");
		sb.append(getIvldForecastSalesSid());
		sb.append(", errorField=");
		sb.append(getErrorField());
		sb.append(", segment=");
		sb.append(getSegment());
		sb.append(", brand=");
		sb.append(getBrand());
		sb.append(", forecastedSalesPercentage=");
		sb.append(getForecastedSalesPercentage());
		sb.append(", forecastName=");
		sb.append(getForecastName());
		sb.append(", checkRecord=");
		sb.append(getCheckRecord());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(115);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.IvldForecastSales");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastYear</column-name><column-value><![CDATA[");
		sb.append(getForecastYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastDate</column-name><column-value><![CDATA[");
		sb.append(getForecastDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastValue</column-name><column-value><![CDATA[");
		sb.append(getForecastValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastIntfid</column-name><column-value><![CDATA[");
		sb.append(getForecastIntfid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dollars</column-name><column-value><![CDATA[");
		sb.append(getDollars());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ndc</column-name><column-value><![CDATA[");
		sb.append(getNdc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualSalesPercentage</column-name><column-value><![CDATA[");
		sb.append(getActualSalesPercentage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addChgDelIndicator</column-name><column-value><![CDATA[");
		sb.append(getAddChgDelIndicator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualSalesPercentageMonth</column-name><column-value><![CDATA[");
		sb.append(getActualSalesPercentageMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorCode</column-name><column-value><![CDATA[");
		sb.append(getErrorCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>intfInsertedDate</column-name><column-value><![CDATA[");
		sb.append(getIntfInsertedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reprocessedFlag</column-name><column-value><![CDATA[");
		sb.append(getReprocessedFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percentageEstimate</column-name><column-value><![CDATA[");
		sb.append(getPercentageEstimate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percentageEstimateYear</column-name><column-value><![CDATA[");
		sb.append(getPercentageEstimateYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>units</column-name><column-value><![CDATA[");
		sb.append(getUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reasonForFailure</column-name><column-value><![CDATA[");
		sb.append(getReasonForFailure());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastStartDate</column-name><column-value><![CDATA[");
		sb.append(getForecastStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastValueType</column-name><column-value><![CDATA[");
		sb.append(getForecastValueType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastedSalesPercentMonth</column-name><column-value><![CDATA[");
		sb.append(getForecastedSalesPercentMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>product</column-name><column-value><![CDATA[");
		sb.append(getProduct());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastVer</column-name><column-value><![CDATA[");
		sb.append(getForecastVer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastMonth</column-name><column-value><![CDATA[");
		sb.append(getForecastMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ivldForecastSalesSid</column-name><column-value><![CDATA[");
		sb.append(getIvldForecastSalesSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorField</column-name><column-value><![CDATA[");
		sb.append(getErrorField());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>segment</column-name><column-value><![CDATA[");
		sb.append(getSegment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brand</column-name><column-value><![CDATA[");
		sb.append(getBrand());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastedSalesPercentage</column-name><column-value><![CDATA[");
		sb.append(getForecastedSalesPercentage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastName</column-name><column-value><![CDATA[");
		sb.append(getForecastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkRecord</column-name><column-value><![CDATA[");
		sb.append(getCheckRecord());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = IvldForecastSales.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			IvldForecastSales.class
		};
	private String _price;
	private String _forecastYear;
	private String _forecastDate;
	private Date _modifiedDate;
	private String _forecastValue;
	private String _forecastIntfid;
	private String _dollars;
	private String _ndc;
	private String _actualSalesPercentage;
	private String _source;
	private Date _createdDate;
	private String _createdBy;
	private String _addChgDelIndicator;
	private String _actualSalesPercentageMonth;
	private String _errorCode;
	private Date _intfInsertedDate;
	private String _modifiedBy;
	private String _reprocessedFlag;
	private String _percentageEstimate;
	private String _percentageEstimateYear;
	private String _units;
	private String _reasonForFailure;
	private String _forecastStartDate;
	private String _forecastValueType;
	private String _forecastedSalesPercentMonth;
	private String _country;
	private String _product;
	private String _batchId;
	private String _forecastVer;
	private String _forecastMonth;
	private int _ivldForecastSalesSid;
	private String _errorField;
	private String _segment;
	private String _brand;
	private String _forecastedSalesPercentage;
	private String _forecastName;
	private boolean _checkRecord;
	private IvldForecastSales _escapedModel;
}