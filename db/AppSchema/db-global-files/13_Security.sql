-------------------------------------BUSINESSROLE_MODULE-------------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'BUSINESSROLE_MODULE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[BUSINESSROLE_MODULE]
        (
           [BUSINESSROLE_MODULE_SID] INT IDENTITY(1, 1) NOT NULL,
           [BUSINESSROLE_MASTER_SID] INT NULL,
           [SUBMODULE_PROPERTY_ID]   INT NULL,
           [ACCESS_MODULE]           CHAR(1) NULL,
           [ADD_FLAG]                CHAR(1) NULL,
           [EDIT_FLAG]               CHAR(1) NULL,
           [VIEW_FLAG]               CHAR(1) NULL,
           [CREATED_BY]              INT NOT NULL,
           [CREATED_DATE]            DATETIME NOT NULL,
           [MODIFIED_BY]             INT NOT NULL,
           [MODIFIED_DATE]           DATETIME NOT NULL,
           [VERSION_NO]              INT NOT NULL
        )
  END

GO

IF NOT EXISTS(SELECT 'X'
              FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE  CONSTRAINT_NAME = 'PK_BUSINESSROLE_MODULE_BUSINESSROLE_MODULE_SID'
                     AND TABLE_NAME = 'BUSINESSROLE_MODULE')
  ALTER TABLE BUSINESSROLE_MODULE
    ADD CONSTRAINT PK_BUSINESSROLE_MODULE_BUSINESSROLE_MODULE_SID PRIMARY KEY(BUSINESSROLE_MODULE_SID)

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('BUSINESSROLE_MODULE')
                      AND NAME = 'DF_BUSINESSROLE_MODULE_CREATED_BY')
  BEGIN
      ALTER TABLE [DBO].[BUSINESSROLE_MODULE]
        ADD CONSTRAINT [DF_BUSINESSROLE_MODULE_CREATED_BY] DEFAULT (1) FOR CREATED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.BUSINESSROLE_MODULE')
                      AND NAME = 'DF_BUSINESSROLE_MODULE_CREATED_DATE')
  BEGIN
      ALTER TABLE [DBO].[BUSINESSROLE_MODULE]
        ADD CONSTRAINT [DF_BUSINESSROLE_MODULE_CREATED_DATE] DEFAULT (GETDATE()) FOR CREATED_DATE
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.BUSINESSROLE_MODULE')
                      AND NAME = 'DF_BUSINESSROLE_MODULE_MODIFIED_BY')
  BEGIN
      ALTER TABLE [DBO].[BUSINESSROLE_MODULE]
        ADD CONSTRAINT [DF_BUSINESSROLE_MODULE_MODIFIED_BY] DEFAULT (1) FOR MODIFIED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.BUSINESSROLE_MODULE')
                      AND NAME = 'DF_BUSINESSROLE_MODULE_MODIFIED_DATE')
  BEGIN
      ALTER TABLE [DBO].[BUSINESSROLE_MODULE]
        ADD CONSTRAINT [DF_BUSINESSROLE_MODULE_MODIFIED_DATE] DEFAULT (GETDATE()) FOR MODIFIED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'BUSINESSROLE_MODULE'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

--------------------------------------HIST_BUSINESSROLE_MODULE---------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'HIST_BUSINESSROLE_MODULE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[HIST_BUSINESSROLE_MODULE]
        (
           [BUSINESSROLE_MODULE_SID] INT NOT NULL,
           [BUSINESSROLE_MASTER_SID] INT NULL,
           [SUBMODULE_PROPERTY_ID]   INT NULL,
           [ACCESS_MODULE]           CHAR(1) NULL,
           [ADD_FLAG]                CHAR(1) NULL,
           [EDIT_FLAG]               CHAR(1) NULL,
           [VIEW_FLAG]               CHAR(1) NULL,
           [CREATED_BY]              INT NOT NULL,
           [CREATED_DATE]            DATETIME NOT NULL,
           [MODIFIED_BY]             INT NOT NULL,
           [MODIFIED_DATE]           DATETIME NOT NULL,
           [VERSION_NO]              INT NOT NULL,
           [ACTION_FLAG]             CHAR(1) NOT NULL,
           [ACTION_DATE]             DATETIME NOT NULL
        )
  END

GO

IF EXISTS(SELECT 'X'
          FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
          WHERE  CONSTRAINT_NAME = 'PK_HIST_BUSINESSROLE_MODULE_BUSINESSROLE_MODULE_SID_VERSION_NO'
                 AND TABLE_NAME = 'HIST_BUSINESSROLE_MODULE')
BEGIN
  ALTER TABLE [HIST_BUSINESSROLE_MODULE]
    DROP CONSTRAINT PK_HIST_BUSINESSROLE_MODULE_BUSINESSROLE_MODULE_SID_VERSION_NO
END

GO 

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.HIST_BUSINESSROLE_MODULE')
                      AND NAME = 'DF_HIST_BUSINESSROLE_MODULE_ACTION_DATE')
  BEGIN
      ALTER TABLE [DBO].[HIST_BUSINESSROLE_MODULE]
        ADD CONSTRAINT [DF_HIST_BUSINESSROLE_MODULE_ACTION_DATE] DEFAULT (GETDATE()) FOR ACTION_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'HIST_BUSINESSROLE_MODULE'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

-------------------------------------------BUSINESSROLE_MODULE TRIGGER--------------------------------------------
IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_BUSINESSROLE_MODULE_UPD')
  BEGIN
      DROP TRIGGER DBO.TRG_BUSINESSROLE_MODULE_UPD
  END

GO

CREATE TRIGGER [DBO].[TRG_BUSINESSROLE_MODULE_UPD]
ON [DBO].[BUSINESSROLE_MODULE]
AFTER UPDATE
AS
  BEGIN
      SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   INSERTED)
         AND EXISTS(SELECT *
                    FROM   DELETED)
        INSERT INTO HIST_BUSINESSROLE_MODULE
                    ([BUSINESSROLE_MODULE_SID],
                     [BUSINESSROLE_MASTER_SID],
                     [SUBMODULE_PROPERTY_ID],
                     [ACCESS_MODULE],
                     [ADD_FLAG],
                     [EDIT_FLAG],
                     [VIEW_FLAG],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     ACTION_FLAG)
        SELECT [BUSINESSROLE_MODULE_SID],
               [BUSINESSROLE_MASTER_SID],
               [SUBMODULE_PROPERTY_ID],
               [ACCESS_MODULE],
               [ADD_FLAG],
               [EDIT_FLAG],
               [VIEW_FLAG],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'C'
        FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_BUSINESSROLE_MODULE_INS')
  BEGIN
      DROP TRIGGER DBO.TRG_BUSINESSROLE_MODULE_INS
  END

GO

CREATE TRIGGER [DBO].[TRG_BUSINESSROLE_MODULE_INS]
ON [DBO].[BUSINESSROLE_MODULE]
AFTER INSERT
AS
  BEGIN
      SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   INSERTED)
        INSERT INTO HIST_BUSINESSROLE_MODULE
                    ([BUSINESSROLE_MODULE_SID],
                     [BUSINESSROLE_MASTER_SID],
                     [SUBMODULE_PROPERTY_ID],
                     [ACCESS_MODULE],
                     [ADD_FLAG],
                     [EDIT_FLAG],
                     [VIEW_FLAG],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     ACTION_FLAG)
        SELECT [BUSINESSROLE_MODULE_SID],
               [BUSINESSROLE_MASTER_SID],
               [SUBMODULE_PROPERTY_ID],
               [ACCESS_MODULE],
               [ADD_FLAG],
               [EDIT_FLAG],
               [VIEW_FLAG],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'A'
        FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_BUSINESSROLE_MODULE_DEL')
  BEGIN
      DROP TRIGGER DBO.TRG_BUSINESSROLE_MODULE_DEL
  END

GO

CREATE TRIGGER [DBO].[TRG_BUSINESSROLE_MODULE_DEL]
ON [DBO].[BUSINESSROLE_MODULE]
AFTER DELETE
AS
  BEGIN
      SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   DELETED)
        INSERT INTO HIST_BUSINESSROLE_MODULE
                    ([BUSINESSROLE_MODULE_SID],
                     [BUSINESSROLE_MASTER_SID],
                     [SUBMODULE_PROPERTY_ID],
                     [ACCESS_MODULE],
                     [ADD_FLAG],
                     [EDIT_FLAG],
                     [VIEW_FLAG],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     ACTION_FLAG)
        SELECT [BUSINESSROLE_MODULE_SID],
               [BUSINESSROLE_MASTER_SID],
               [SUBMODULE_PROPERTY_ID],
               [ACCESS_MODULE],
               [ADD_FLAG],
               [EDIT_FLAG],
               [VIEW_FLAG],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'D'
        FROM   DELETED
  END

GO 

----------------------------------------BUSINESSROLE_MASTER-------------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'BUSINESSROLE_MASTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[BUSINESSROLE_MASTER]
        (
           [BUSINESSROLE_MASTER_SID] INT IDENTITY(1, 1) NOT NULL,
           [BUSINESSROLE_NAME]       VARCHAR(100) NULL,
           [BUSINESSROLE_DESC]       VARCHAR(500) NULL,
           [HIERARCHY_LEVEL]         INT NULL,
           [IS_ACTIVE]               CHAR(1) NULL,
           [USERS_SID]               INT NULL,
           [PROCESSED]               CHAR(1) NULL,
           [CREATED_BY]              INT NOT NULL,
           [CREATED_DATE]            DATETIME NOT NULL,
           [MODIFIED_BY]             INT NOT NULL,
           [MODIFIED_DATE]           DATETIME NOT NULL,
           [VERSION_NO]              INT NOT NULL
        )
  END

GO

IF NOT EXISTS(SELECT 'X'
              FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE  CONSTRAINT_NAME = 'PK_BUSINESSROLE_MASTER_BUSINESSROLE_MASTER_SID'
                     AND TABLE_NAME = 'BUSINESSROLE_MASTER')
  ALTER TABLE BUSINESSROLE_MASTER
    ADD CONSTRAINT PK_BUSINESSROLE_MASTER_BUSINESSROLE_MASTER_SID PRIMARY KEY(BUSINESSROLE_MASTER_SID)

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('BUSINESSROLE_MASTER')
                      AND NAME = 'DF_BUSINESSROLE_MASTER_CREATED_BY')
  BEGIN
      ALTER TABLE [DBO].[BUSINESSROLE_MASTER]
        ADD CONSTRAINT [DF_BUSINESSROLE_MASTER_CREATED_BY] DEFAULT (1) FOR CREATED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.BUSINESSROLE_MASTER')
                      AND NAME = 'DF_BUSINESSROLE_MASTER_CREATED_DATE')
  BEGIN
      ALTER TABLE [DBO].[BUSINESSROLE_MASTER]
        ADD CONSTRAINT [DF_BUSINESSROLE_MASTER_CREATED_DATE] DEFAULT (GETDATE()) FOR CREATED_DATE
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.BUSINESSROLE_MASTER')
                      AND NAME = 'DF_BUSINESSROLE_MASTER_MODIFIED_BY')
  BEGIN
      ALTER TABLE [DBO].[BUSINESSROLE_MASTER]
        ADD CONSTRAINT [DF_BUSINESSROLE_MASTER_MODIFIED_BY] DEFAULT (1) FOR MODIFIED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.BUSINESSROLE_MASTER')
                      AND NAME = 'DF_BUSINESSROLE_MASTER_MODIFIED_DATE')
  BEGIN
      ALTER TABLE [DBO].[BUSINESSROLE_MASTER]
        ADD CONSTRAINT [DF_BUSINESSROLE_MASTER_MODIFIED_DATE] DEFAULT (GETDATE()) FOR MODIFIED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'BUSINESSROLE_MASTER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

---------------------------------------HIST_BUSINESSROLE_MASTER------------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'HIST_BUSINESSROLE_MASTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[HIST_BUSINESSROLE_MASTER]
        (
           [BUSINESSROLE_MASTER_SID] INT NOT NULL,
           [BUSINESSROLE_NAME]       VARCHAR(100) NULL,
           [BUSINESSROLE_DESC]       VARCHAR(500) NULL,
           [HIERARCHY_LEVEL]         INT NULL,
           [IS_ACTIVE]               CHAR(1) NULL,
           [USERS_SID]               INT NULL,
           [PROCESSED]               CHAR(1) NULL,
           [CREATED_BY]              INT NOT NULL,
           [CREATED_DATE]            DATETIME NOT NULL,
           [MODIFIED_BY]             INT NOT NULL,
           [MODIFIED_DATE]           DATETIME NOT NULL,
           [VERSION_NO]              INT NOT NULL,
           [ACTION_FLAG]             CHAR(1) NOT NULL,
           [ACTION_DATE]             DATETIME NOT NULL
        )
  END

GO

IF EXISTS(SELECT 'X'
          FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
          WHERE  CONSTRAINT_NAME = 'PK_HIST_BUSINESSROLE_MASTER_BUSINESSROLE_MASTER_SID_VERSION_NO'
                 AND TABLE_NAME = 'HIST_BUSINESSROLE_MASTER')
  ALTER TABLE  [HIST_BUSINESSROLE_MASTER]
    DROP CONSTRAINT PK_HIST_BUSINESSROLE_MASTER_BUSINESSROLE_MASTER_SID_VERSION_NO

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.HIST_BUSINESSROLE_MASTER')
                      AND NAME = 'DF_HIST_BUSINESSROLE_MASTER_ACTION_DATE')
  BEGIN
      ALTER TABLE [DBO].[HIST_BUSINESSROLE_MASTER]
        ADD CONSTRAINT [DF_HIST_BUSINESSROLE_MASTER_ACTION_DATE] DEFAULT (GETDATE()) FOR ACTION_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'HIST_BUSINESSROLE_MASTER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

---------------------------------------BUSINESSROLE_MASTER TRIGGER------------------------------------------------
IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_BUSINESSROLE_MASTER_UPD')
  BEGIN
      DROP TRIGGER DBO.TRG_BUSINESSROLE_MASTER_UPD
  END

GO

CREATE TRIGGER [DBO].[TRG_BUSINESSROLE_MASTER_UPD]
ON [DBO].[BUSINESSROLE_MASTER]
AFTER UPDATE
AS
  BEGIN
      SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   INSERTED)
         AND EXISTS(SELECT *
                    FROM   DELETED)
        INSERT INTO HIST_BUSINESSROLE_MASTER
                    ([BUSINESSROLE_MASTER_SID],
                     [BUSINESSROLE_NAME],
                     [BUSINESSROLE_DESC],
                     [HIERARCHY_LEVEL],
                     [IS_ACTIVE],
                     [USERS_SID],
                     [PROCESSED],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     ACTION_FLAG)
        SELECT [BUSINESSROLE_MASTER_SID],
               [BUSINESSROLE_NAME],
               [BUSINESSROLE_DESC],
               [HIERARCHY_LEVEL],
               [IS_ACTIVE],
               [USERS_SID],
               [PROCESSED],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'C'
        FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_BUSINESSROLE_MASTER_INS')
  BEGIN
      DROP TRIGGER DBO.TRG_BUSINESSROLE_MASTER_INS
  END

GO

CREATE TRIGGER [DBO].[TRG_BUSINESSROLE_MASTER_INS]
ON [DBO].[BUSINESSROLE_MASTER]
AFTER INSERT
AS
  BEGIN
  SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   INSERTED)
        INSERT INTO HIST_BUSINESSROLE_MASTER
                    ([BUSINESSROLE_MASTER_SID],
                     [BUSINESSROLE_NAME],
                     [BUSINESSROLE_DESC],
                     [HIERARCHY_LEVEL],
                     [IS_ACTIVE],
                     [USERS_SID],
                     [PROCESSED],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     ACTION_FLAG)
        SELECT [BUSINESSROLE_MASTER_SID],
               [BUSINESSROLE_NAME],
               [BUSINESSROLE_DESC],
               [HIERARCHY_LEVEL],
               [IS_ACTIVE],
               [USERS_SID],
               [PROCESSED],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'A'
        FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_BUSINESSROLE_MASTER_DEL')
  BEGIN
      DROP TRIGGER DBO.TRG_BUSINESSROLE_MASTER_DEL
  END

GO

CREATE TRIGGER [DBO].[TRG_BUSINESSROLE_MASTER_DEL]
ON [DBO].[BUSINESSROLE_MASTER]
AFTER DELETE
AS
  BEGIN
  SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   DELETED)
        INSERT INTO HIST_BUSINESSROLE_MASTER
                    ([BUSINESSROLE_MASTER_SID],
                     [BUSINESSROLE_NAME],
                     [BUSINESSROLE_DESC],
                     [HIERARCHY_LEVEL],
                     [IS_ACTIVE],
                     [USERS_SID],
                     [PROCESSED],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     ACTION_FLAG)
        SELECT [BUSINESSROLE_MASTER_SID],
               [BUSINESSROLE_NAME],
               [BUSINESSROLE_DESC],
               [HIERARCHY_LEVEL],
               [IS_ACTIVE],
               [USERS_SID],
               [PROCESSED],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'D'
        FROM   DELETED
  END

GO

---------------------------------------------MODULE_PROPERTIES--------------------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'MODULE_PROPERTIES'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[MODULE_PROPERTIES]
        (
           [MODULE_PROPERTY_SID]  INT IDENTITY(1, 1) NOT NULL,
           [MODULE_SUBMODULE_SID] INT NULL,
           [MODULE_NAME]          VARCHAR(75) NULL,
           [PROPERTY_NAME]        VARCHAR(75) NULL,
           [DISPLAY_NAME]         VARCHAR(100) NULL,
           [CATEGORY_NAME]        VARCHAR(30) NULL,
           [VALIDATION]           VARCHAR(100) NULL,
           TAB_NAME               VARCHAR(100) NULL,
           [NULL_FLAG]            VARCHAR(1) NULL,
           [CREATED_BY]           INT NOT NULL,
           [CREATED_DATE]         DATETIME NOT NULL,
           [MODIFIED_BY]          INT NOT NULL,
           [MODIFIED_DATE]        DATETIME NOT NULL,
           [VERSION_NO]           INT NOT NULL
        )
  END

GO

--------------------------------COLUMN ADDITION-------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'MODULE_PROPERTIES'
                      AND COLUMN_NAME = 'VALIDATION'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE MODULE_PROPERTIES
        ADD [VALIDATION] VARCHAR(100)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'MODULE_PROPERTIES'
                      AND COLUMN_NAME = 'TAB_NAME'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE MODULE_PROPERTIES
        ADD TAB_NAME VARCHAR(100)
  END

GO

IF NOT EXISTS(SELECT 'X'
              FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE  CONSTRAINT_NAME = 'PK_MODULE_PROPERTIES_MODULE_PROPERTY_SID'
                     AND TABLE_NAME = 'MODULE_PROPERTIES')
  ALTER TABLE MODULE_PROPERTIES
    ADD CONSTRAINT PK_MODULE_PROPERTIES_MODULE_PROPERTY_SID PRIMARY KEY(MODULE_PROPERTY_SID)

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('MODULE_PROPERTIES')
                      AND NAME = 'DF_MODULE_PROPERTIES_CREATED_BY')
  BEGIN
      ALTER TABLE [DBO].[MODULE_PROPERTIES]
        ADD CONSTRAINT [DF_MODULE_PROPERTIES_CREATED_BY] DEFAULT (1) FOR CREATED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.MODULE_PROPERTIES')
                      AND NAME = 'DF_MODULE_PROPERTIES_CREATED_DATE')
  BEGIN
      ALTER TABLE [DBO].[MODULE_PROPERTIES]
        ADD CONSTRAINT [DF_MODULE_PROPERTIES_CREATED_DATE] DEFAULT (GETDATE()) FOR CREATED_DATE
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.MODULE_PROPERTIES')
                      AND NAME = 'DF_MODULE_PROPERTIES_MODIFIED_BY')
  BEGIN
      ALTER TABLE [DBO].[MODULE_PROPERTIES]
        ADD CONSTRAINT [DF_MODULE_PROPERTIES_MODIFIED_BY] DEFAULT (1) FOR MODIFIED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.MODULE_PROPERTIES')
                      AND NAME = 'DF_MODULE_PROPERTIES_MODIFIED_DATE')
  BEGIN
      ALTER TABLE [DBO].[MODULE_PROPERTIES]
        ADD CONSTRAINT [DF_MODULE_PROPERTIES_MODIFIED_DATE] DEFAULT (GETDATE()) FOR MODIFIED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'MODULE_PROPERTIES'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

-------------------------------------HIST_MODULE_PROPERTIES----------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'HIST_MODULE_PROPERTIES'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[HIST_MODULE_PROPERTIES]
        (
           [MODULE_PROPERTY_SID]  INT NOT NULL,
           [MODULE_SUBMODULE_SID] INT NULL,
           [MODULE_NAME]          VARCHAR(75) NULL,
           [PROPERTY_NAME]        VARCHAR(75) NULL,
           [DISPLAY_NAME]         VARCHAR(100) NULL,
           [CATEGORY_NAME]        VARCHAR(30) NULL,
           [VALIDATION]           VARCHAR(100) NULL,
           TAB_NAME               VARCHAR(100),
           [NULL_FLAG]            VARCHAR(1) NULL,
           [CREATED_BY]           INT NOT NULL,
           [CREATED_DATE]         DATETIME NOT NULL,
           [MODIFIED_BY]          INT NOT NULL,
           [MODIFIED_DATE]        DATETIME NOT NULL,
           [VERSION_NO]           INT NOT NULL,
           [ACTION_FLAG]          CHAR(1) NOT NULL,
           [ACTION_DATE]          DATETIME NOT NULL
        )
  END

GO

---------------------------COLUMN ADDITION------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'HIST_MODULE_PROPERTIES'
                      AND COLUMN_NAME = 'VALIDATION'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE HIST_MODULE_PROPERTIES
        ADD [VALIDATION] VARCHAR(100)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'HIST_MODULE_PROPERTIES'
                      AND COLUMN_NAME = 'TAB_NAME'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE HIST_MODULE_PROPERTIES
        ADD TAB_NAME VARCHAR(100)
  END

GO


IF EXISTS(SELECT 'X'
          FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
          WHERE  CONSTRAINT_NAME = 'PK_HIST_MODULE_PROPERTIES_MODULE_PROPERTY_SID_VERSION_NO'
                 AND TABLE_NAME = 'HIST_MODULE_PROPERTIES')
  ALTER TABLE [HIST_MODULE_PROPERTIES]
    DROP CONSTRAINT PK_HIST_MODULE_PROPERTIES_MODULE_PROPERTY_SID_VERSION_NO

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.HIST_MODULE_PROPERTIES')
                      AND NAME = 'DF_HIST_MODULE_PROPERTIES_ACTION_DATE')
  BEGIN
      ALTER TABLE [DBO].[HIST_MODULE_PROPERTIES]
        ADD CONSTRAINT [DF_HIST_MODULE_PROPERTIES_ACTION_DATE] DEFAULT (GETDATE()) FOR ACTION_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'HIST_MODULE_PROPERTIES'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

---------------------------------------MODULE_PROPERTIES TRIGGER-----------------------------------------

IF EXISTS (
		SELECT 1
		FROM (
			SELECT *
				,ROW_NUMBER() OVER (
					PARTITION BY SUBMODULE_PROPERTY_ID
					,BUSINESSROLE_MASTER_SID ORDER BY SUBMODULE_PROPERTY_ID
						,BUSINESSROLE_MASTER_SID
						,MODIFIED_DATE DESC
					) RN
			FROM BUSINESSROLE_MODULE
			) A
		WHERE RN <> 1
		)
BEGIN
	DELETE
	FROM BUSINESSROLE_MODULE
	WHERE BUSINESSROLE_MODULE_SID IN (
			SELECT BUSINESSROLE_MODULE_SID
			FROM (
				SELECT *
					,ROW_NUMBER() OVER (
						PARTITION BY SUBMODULE_PROPERTY_ID
						,BUSINESSROLE_MASTER_SID ORDER BY SUBMODULE_PROPERTY_ID
							,BUSINESSROLE_MASTER_SID
							,MODIFIED_DATE DESC
						) RN
				FROM BUSINESSROLE_MODULE
				) A
			WHERE RN <> 1
			)
END

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TR_BUSINESS_ROLE_MODULE_ARIUD')
  BEGIN
      DROP TRIGGER DBO.TR_BUSINESS_ROLE_MODULE_ARIUD
  END

GO

CREATE TRIGGER [dbo].[TR_BUSINESS_ROLE_MODULE_ARIUD] ON [dbo].[MODULE_PROPERTIES]
AFTER INSERT
AS
    SET NOCOUNT ON
    DECLARE @SUBMODULE_PROPERTY_ID NUMERIC(38)
	,@BUSINESSROLE_ID NUMERIC(38)

BEGIN
	DECLARE BUS_CUR CURSOR FORWARD_ONLY READ_ONLY
	FOR
	SELECT BUSINESSROLE_MASTER_SID
		,MODULE_PROPERTY_SID
	FROM BUSINESSROLE_MASTER B
	CROSS JOIN (
		SELECT MODULE_PROPERTY_SID
		FROM INSERTED
		) A
	WHERE BUSINESSROLE_NAME = 'Business Admin'
	AND NOT EXISTS(SELECT 1 FROM BUSINESSROLE_MODULE C
	WHERE B.BUSINESSROLE_MASTER_SID=C.BUSINESSROLE_MASTER_SID
	AND A.MODULE_PROPERTY_SID=C.SUBMODULE_PROPERTY_ID)

	OPEN BUS_CUR

	FETCH BUS_CUR
	INTO @BUSINESSROLE_ID
		,@SUBMODULE_PROPERTY_ID

	WHILE (@@FETCH_STATUS = 0)
	BEGIN
		INSERT INTO BUSINESSROLE_MODULE (
			SUBMODULE_PROPERTY_ID
			,ACCESS_MODULE
			,BUSINESSROLE_MASTER_SID
			,ADD_FLAG
			,EDIT_FLAG
			,VIEW_FLAG
			,CREATED_BY
			,CREATED_DATE
			,VERSION_NO
			)
		VALUES (
			@SUBMODULE_PROPERTY_ID
			,'1'
			,@BUSINESSROLE_ID
			,'1'
			,'1'
			,'1'
			,16601
			,GETDATE()
			,1
			)

		FETCH NEXT
		FROM BUS_CUR
		INTO @BUSINESSROLE_ID
			,@SUBMODULE_PROPERTY_ID
	END

	CLOSE BUS_CUR

	DEALLOCATE BUS_CUR
END
GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_MODULE_PROPERTIES_INS')
  BEGIN
      DROP TRIGGER DBO.TRG_MODULE_PROPERTIES_INS
  END

GO

CREATE TRIGGER [DBO].[TRG_MODULE_PROPERTIES_INS]
ON [DBO].[MODULE_PROPERTIES]
AFTER INSERT
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_MODULE_PROPERTIES
                  (MODULE_PROPERTY_SID,
                   MODULE_SUBMODULE_SID,
                   MODULE_NAME,
                   PROPERTY_NAME,
                   DISPLAY_NAME,
                   CATEGORY_NAME,
                   [VALIDATION],
                   TAB_NAME,
                   NULL_FLAG,
                   CREATED_BY,
                   CREATED_DATE,
                   MODIFIED_BY,
                   MODIFIED_DATE,
                   VERSION_NO,
                   ACTION_FLAG)
      SELECT MODULE_PROPERTY_SID,
             MODULE_SUBMODULE_SID,
             MODULE_NAME,
             PROPERTY_NAME,
             DISPLAY_NAME,
             CATEGORY_NAME,
             [VALIDATION],
             TAB_NAME,
             NULL_FLAG,
             CREATED_BY,
             CREATED_DATE,
             MODIFIED_BY,
             MODIFIED_DATE,
             VERSION_NO,
             'A'
      FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_MODULE_PROPERTIES_UPD')
  BEGIN
      DROP TRIGGER DBO.TRG_MODULE_PROPERTIES_UPD
  END

GO

CREATE TRIGGER [DBO].[TRG_MODULE_PROPERTIES_UPD]
ON [DBO].[MODULE_PROPERTIES]
AFTER UPDATE
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_MODULE_PROPERTIES
                  (MODULE_PROPERTY_SID,
                   MODULE_SUBMODULE_SID,
                   MODULE_NAME,
                   PROPERTY_NAME,
                   DISPLAY_NAME,
                   CATEGORY_NAME,
                   [VALIDATION],
                   TAB_NAME,
                   NULL_FLAG,
                   CREATED_BY,
                   CREATED_DATE,
                   MODIFIED_BY,
                   MODIFIED_DATE,
                   VERSION_NO,
                   ACTION_FLAG)
      SELECT MODULE_PROPERTY_SID,
             MODULE_SUBMODULE_SID,
             MODULE_NAME,
             PROPERTY_NAME,
             DISPLAY_NAME,
             CATEGORY_NAME,
             [VALIDATION],
             TAB_NAME,
             NULL_FLAG,
             CREATED_BY,
             CREATED_DATE,
             MODIFIED_BY,
             MODIFIED_DATE,
             VERSION_NO,
             'C'
      FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_MODULE_PROPERTIES_DEL')
  BEGIN
      DROP TRIGGER DBO.TRG_MODULE_PROPERTIES_DEL
  END

GO

CREATE TRIGGER [DBO].[TRG_MODULE_PROPERTIES_DEL]
ON [DBO].[MODULE_PROPERTIES]
AFTER DELETE
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_MODULE_PROPERTIES
                  (MODULE_PROPERTY_SID,
                   MODULE_SUBMODULE_SID,
                   MODULE_NAME,
                   PROPERTY_NAME,
                   DISPLAY_NAME,
                   CATEGORY_NAME,
                   [VALIDATION],
                   TAB_NAME,
                   NULL_FLAG,
                   CREATED_BY,
                   CREATED_DATE,
                   MODIFIED_BY,
                   MODIFIED_DATE,
                   VERSION_NO,
                   ACTION_FLAG)
      SELECT MODULE_PROPERTY_SID,
             MODULE_SUBMODULE_SID,
             MODULE_NAME,
             PROPERTY_NAME,
             DISPLAY_NAME,
             CATEGORY_NAME,
             [VALIDATION],
             TAB_NAME,
             NULL_FLAG,
             CREATED_BY,
             CREATED_DATE,
             MODIFIED_BY,
             MODIFIED_DATE,
             VERSION_NO,
             'D'
      FROM   DELETED
  END

GO

--------------------------------MODULE_SUBMODULE_MASTER------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'MODULE_SUBMODULE_MASTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[MODULE_SUBMODULE_MASTER]
        (
           [MODULE_SUBMODULE_SID] INT IDENTITY(1, 1) NOT NULL,
           [MODULE_NAME]          VARCHAR(50) NULL,
           [SUBMODULE_NAME]       VARCHAR(50) NULL,
           [CATEGORY]             VARCHAR(15) NULL,
           TABLE_NAME             VARCHAR(100) NULL,
           [CREATED_BY]           INT NOT NULL,
           [CREATED_DATE]         DATETIME NOT NULL,
           [MODIFIED_BY]          INT NOT NULL,
           [MODIFIED_DATE]        DATETIME NOT NULL,
           [VERSION_NO]           INT NOT NULL
        )
  END

GO

-------------------COLUMN ADDITION-----------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'MODULE_SUBMODULE_MASTER'
                      AND COLUMN_NAME = 'TABLE_NAME'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE MODULE_SUBMODULE_MASTER
        ADD TABLE_NAME VARCHAR(100)
  END

GO

IF NOT EXISTS(SELECT 'X'
              FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE  CONSTRAINT_NAME = 'PK_MODULE_SUBMODULE_MASTER_MODULE_SUBMODULE_SID'
                     AND TABLE_NAME = 'MODULE_SUBMODULE_MASTER')
  ALTER TABLE MODULE_SUBMODULE_MASTER
    ADD CONSTRAINT PK_MODULE_SUBMODULE_MASTER_MODULE_SUBMODULE_SID PRIMARY KEY(MODULE_SUBMODULE_SID)

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('MODULE_SUBMODULE_MASTER')
                      AND NAME = 'DF_MODULE_SUBMODULE_MASTER_CREATED_BY')
  BEGIN
      ALTER TABLE [DBO].[MODULE_SUBMODULE_MASTER]
        ADD CONSTRAINT [DF_MODULE_SUBMODULE_MASTER_CREATED_BY] DEFAULT (1) FOR CREATED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.MODULE_SUBMODULE_MASTER')
                      AND NAME = 'DF_MODULE_SUBMODULE_MASTER_CREATED_DATE')
  BEGIN
      ALTER TABLE [DBO].[MODULE_SUBMODULE_MASTER]
        ADD CONSTRAINT [DF_MODULE_SUBMODULE_MASTER_CREATED_DATE] DEFAULT (GETDATE()) FOR CREATED_DATE
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.MODULE_SUBMODULE_MASTER')
                      AND NAME = 'DF_MODULE_SUBMODULE_MASTER_MODIFIED_BY')
  BEGIN
      ALTER TABLE [DBO].[MODULE_SUBMODULE_MASTER]
        ADD CONSTRAINT [DF_MODULE_SUBMODULE_MASTER_MODIFIED_BY] DEFAULT (1) FOR MODIFIED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.MODULE_SUBMODULE_MASTER')
                      AND NAME = 'DF_MODULE_SUBMODULE_MASTER_MODIFIED_DATE')
  BEGIN
      ALTER TABLE [DBO].[MODULE_SUBMODULE_MASTER]
        ADD CONSTRAINT [DF_MODULE_SUBMODULE_MASTER_MODIFIED_DATE] DEFAULT (GETDATE()) FOR MODIFIED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'MODULE_SUBMODULE_MASTER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

----------------------------------HIST_MODULE_SUBMODULE_MASTER--------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'HIST_MODULE_SUBMODULE_MASTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[HIST_MODULE_SUBMODULE_MASTER]
        (
           [MODULE_SUBMODULE_SID] INT NOT NULL,
           [MODULE_NAME]          VARCHAR(50) NULL,
           [SUBMODULE_NAME]       VARCHAR(50) NULL,
           [CATEGORY]             VARCHAR(15) NULL,
           TABLE_NAME             VARCHAR(100) NULL,
           [CREATED_BY]           INT NOT NULL,
           [CREATED_DATE]         DATETIME NOT NULL,
           [MODIFIED_BY]          INT NOT NULL,
           [MODIFIED_DATE]        DATETIME NOT NULL,
           [VERSION_NO]           INT NOT NULL,
           [ACTION_FLAG]          CHAR(1) NOT NULL,
           [ACTION_DATE]          DATETIME NOT NULL
        )
  END

GO

-------------------------COLUMN ADDITION---------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'HIST_MODULE_SUBMODULE_MASTER'
                      AND COLUMN_NAME = 'TABLE_NAME'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE HIST_MODULE_SUBMODULE_MASTER
        ADD TABLE_NAME VARCHAR(100)
  END

GO

IF EXISTS(SELECT 'X'
          FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
          WHERE  CONSTRAINT_NAME = 'PK_HIST_MODULE_SUBMODULE_MASTER_MODULE_SUBMODULE_SID_VERSION_NO'
                 AND TABLE_NAME = 'HIST_MODULE_SUBMODULE_MASTER')
BEGIN
  ALTER TABLE [HIST_MODULE_SUBMODULE_MASTER]
    DROP CONSTRAINT PK_HIST_MODULE_SUBMODULE_MASTER_MODULE_SUBMODULE_SID_VERSION_NO
END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.HIST_MODULE_SUBMODULE_MASTER')
                      AND NAME = 'DF_HIST_MODULE_SUBMODULE_MASTER_ACTION_DATE')
  BEGIN
      ALTER TABLE [DBO].[HIST_MODULE_SUBMODULE_MASTER]
        ADD CONSTRAINT [DF_HIST_MODULE_SUBMODULE_MASTER_ACTION_DATE] DEFAULT (GETDATE()) FOR ACTION_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'HIST_MODULE_SUBMODULE_MASTER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

--------------------------------------MODULE_SUBMODULE_MASTER TRIGGER-------------------------------------
IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_MODULE_SUBMODULE_MASTER_UPD')
  BEGIN
      DROP TRIGGER DBO.TRG_MODULE_SUBMODULE_MASTER_UPD
  END

GO

CREATE TRIGGER [DBO].[TRG_MODULE_SUBMODULE_MASTER_UPD]
ON [DBO].MODULE_SUBMODULE_MASTER
--INSTEAD OF UPDATE
AFTER UPDATE
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_MODULE_SUBMODULE_MASTER
                  ([MODULE_SUBMODULE_SID],
                   [MODULE_NAME],
                   [SUBMODULE_NAME],
                   [CATEGORY],
                   TABLE_NAME,
                   [CREATED_BY],
                   [CREATED_DATE],
                   [MODIFIED_BY],
                   [MODIFIED_DATE],
                   [VERSION_NO],
                   [ACTION_FLAG])
      SELECT [MODULE_SUBMODULE_SID],
             [MODULE_NAME],
             [SUBMODULE_NAME],
             [CATEGORY],
             TABLE_NAME,
             [CREATED_BY],
             [CREATED_DATE],
             [MODIFIED_BY],
             [MODIFIED_DATE],
             VERSION_NO,
             'C'
      FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_MODULE_SUBMODULE_MASTER_INS')
  BEGIN
      DROP TRIGGER DBO.[TRG_MODULE_SUBMODULE_MASTER_INS]
  END

GO

CREATE TRIGGER [DBO].[TRG_MODULE_SUBMODULE_MASTER_INS]
ON [DBO].MODULE_SUBMODULE_MASTER
AFTER INSERT
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_MODULE_SUBMODULE_MASTER
                  ([MODULE_SUBMODULE_SID],
                   [MODULE_NAME],
                   [SUBMODULE_NAME],
                   [CATEGORY],
                   TABLE_NAME,
                   [CREATED_BY],
                   [CREATED_DATE],
                   [MODIFIED_BY],
                   [MODIFIED_DATE],
                   [VERSION_NO],
                   [ACTION_FLAG])
      SELECT [MODULE_SUBMODULE_SID],
             [MODULE_NAME],
             [SUBMODULE_NAME],
             [CATEGORY],
             TABLE_NAME,
             [CREATED_BY],
             [CREATED_DATE],
             [MODIFIED_BY],
             [MODIFIED_DATE],
             VERSION_NO,
             'A'
      FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_MODULE_SUBMODULE_MASTER_DEL')
  BEGIN
      DROP TRIGGER DBO.[TRG_MODULE_SUBMODULE_MASTER_DEL]
  END

GO

CREATE TRIGGER [DBO].[TRG_MODULE_SUBMODULE_MASTER_DEL]
ON [DBO].MODULE_SUBMODULE_MASTER
AFTER DELETE
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_MODULE_SUBMODULE_MASTER
                  ([MODULE_SUBMODULE_SID],
                   [MODULE_NAME],
                   [SUBMODULE_NAME],
                   [CATEGORY],
                   TABLE_NAME,
                   [CREATED_BY],
                   [CREATED_DATE],
                   [MODIFIED_BY],
                   [MODIFIED_DATE],
                   [VERSION_NO],
                   [ACTION_FLAG])
      SELECT [MODULE_SUBMODULE_SID],
             [MODULE_NAME],
             [SUBMODULE_NAME],
             [CATEGORY],
             TABLE_NAME,
             [CREATED_BY],
             [CREATED_DATE],
             [MODIFIED_BY],
             [MODIFIED_DATE],
             VERSION_NO,
             'D'
      FROM   DELETED
  END

GO

--------------------------------------USER_PREFERENCES-------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'USER_PREFERENCES'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[USER_PREFERENCES]
        (
           [USER_PREFERENCES_SID] BIGINT IDENTITY(1, 1) NOT NULL,
           [PREFERED_QUESTION]    VARCHAR(200) NULL,
           [PREFERED_ANSWER]      VARCHAR(200) NULL,
           [CREATED_BY]           INT NOT NULL,
           [CREATED_DATE]         DATETIME NOT NULL,
           [MODIFIED_BY]          INT NOT NULL,
           [MODIFIED_DATE]        DATETIME NOT NULL,
           [VERSION_NO]           INT NOT NULL
        )
  END

GO

IF NOT EXISTS(SELECT 'X'
              FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE  CONSTRAINT_NAME = 'PK_USER_PREFERENCES_USER_PREFERENCES_SID'
                     AND TABLE_NAME = 'USER_PREFERENCES')
  ALTER TABLE USER_PREFERENCES
    ADD CONSTRAINT PK_USER_PREFERENCES_USER_PREFERENCES_SID PRIMARY KEY(USER_PREFERENCES_SID)

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('USER_PREFERENCES')
                      AND NAME = 'DF_USER_PREFERENCES_CREATED_BY')
  BEGIN
      ALTER TABLE [DBO].[USER_PREFERENCES]
        ADD CONSTRAINT [DF_USER_PREFERENCES_CREATED_BY] DEFAULT (1) FOR CREATED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.USER_PREFERENCES')
                      AND NAME = 'DF_USER_PREFERENCES_CREATED_DATE')
  BEGIN
      ALTER TABLE [DBO].[USER_PREFERENCES]
        ADD CONSTRAINT [DF_USER_PREFERENCES_CREATED_DATE] DEFAULT (GETDATE()) FOR CREATED_DATE
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.USER_PREFERENCES')
                      AND NAME = 'DF_USER_PREFERENCES_MODIFIED_BY')
  BEGIN
      ALTER TABLE [DBO].[USER_PREFERENCES]
        ADD CONSTRAINT [DF_USER_PREFERENCES_MODIFIED_BY] DEFAULT (1) FOR MODIFIED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.USER_PREFERENCES')
                      AND NAME = 'DF_USER_PREFERENCES_MODIFIED_DATE')
  BEGIN
      ALTER TABLE [DBO].[USER_PREFERENCES]
        ADD CONSTRAINT [DF_USER_PREFERENCES_MODIFIED_DATE] DEFAULT (GETDATE()) FOR MODIFIED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'USER_PREFERENCES'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

----------------------------------HIST_USER_PREFERENCES----------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'HIST_USER_PREFERENCES'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[HIST_USER_PREFERENCES]
        (
           [USER_PREFERENCES_SID] BIGINT NOT NULL,
           [PREFERED_QUESTION]    VARCHAR(200) NULL,
           [PREFERED_ANSWER]      VARCHAR(200) NULL,
           [CREATED_BY]           INT NOT NULL,
           [CREATED_DATE]         DATETIME NOT NULL,
           [MODIFIED_BY]          INT NOT NULL,
           [MODIFIED_DATE]        DATETIME NOT NULL,
           [VERSION_NO]           INT NOT NULL,
           [ACTION_FLAG]          CHAR(1) NOT NULL,
           [ACTION_DATE]          DATETIME NOT NULL
        )
  END

GO

IF EXISTS(SELECT 'X'
          FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
          WHERE  CONSTRAINT_NAME = 'PK_HIST_USER_PREFERENCES_USER_PREFERENCES_SID_VERSION_NO'
                 AND TABLE_NAME = 'HIST_USER_PREFERENCES')
  ALTER TABLE [HIST_USER_PREFERENCES]
    DROP CONSTRAINT PK_HIST_USER_PREFERENCES_USER_PREFERENCES_SID_VERSION_NO

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.HIST_USER_PREFERENCES')
                      AND NAME = 'DF_HIST_USER_PREFERENCES_ACTION_DATE')
  BEGIN
      ALTER TABLE [DBO].[HIST_USER_PREFERENCES]
        ADD CONSTRAINT [DF_HIST_USER_PREFERENCES_ACTION_DATE] DEFAULT (GETDATE()) FOR ACTION_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'HIST_USER_PREFERENCES'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

---------------------------------------USER_PREFERENCES TRIGGER------------------------------------------
IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_USER_PREFERENCES_UPD')
  BEGIN
      DROP TRIGGER DBO.TRG_USER_PREFERENCES_UPD
  END

GO

CREATE TRIGGER [DBO].[TRG_USER_PREFERENCES_UPD]
ON [DBO].USER_PREFERENCES
--INSTEAD OF UPDATE
AFTER UPDATE
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_USER_PREFERENCES
                  ([USER_PREFERENCES_SID],
                   [PREFERED_QUESTION],
                   [PREFERED_ANSWER],
                   [CREATED_BY],
                   [CREATED_DATE],
                   [MODIFIED_BY],
                   [MODIFIED_DATE],
                   [VERSION_NO],
                   [ACTION_FLAG])
      SELECT [USER_PREFERENCES_SID],
             [PREFERED_QUESTION],
             [PREFERED_ANSWER],
             [CREATED_BY],
             [CREATED_DATE],
             [MODIFIED_BY],
             [MODIFIED_DATE],
             VERSION_NO,
             'C'
      FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_USER_PREFERENCES_INS')
  BEGIN
      DROP TRIGGER DBO.[TRG_USER_PREFERENCES_INS]
  END

GO

CREATE TRIGGER [DBO].[TRG_USER_PREFERENCES_INS]
ON [DBO].USER_PREFERENCES
AFTER INSERT
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_USER_PREFERENCES
                  ([USER_PREFERENCES_SID],
                   [PREFERED_QUESTION],
                   [PREFERED_ANSWER],
                   [CREATED_BY],
                   [CREATED_DATE],
                   [MODIFIED_BY],
                   [MODIFIED_DATE],
                   [VERSION_NO],
                   [ACTION_FLAG])
      SELECT [USER_PREFERENCES_SID],
             [PREFERED_QUESTION],
             [PREFERED_ANSWER],
             [CREATED_BY],
             [CREATED_DATE],
             [MODIFIED_BY],
             [MODIFIED_DATE],
             VERSION_NO,
             'A'
      FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_USER_PREFERENCES_DEL')
  BEGIN
      DROP TRIGGER DBO.[TRG_USER_PREFERENCES_DEL]
  END

GO

CREATE TRIGGER [DBO].[TRG_USER_PREFERENCES_DEL]
ON [DBO].USER_PREFERENCES
AFTER DELETE
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_USER_PREFERENCES
                  ([USER_PREFERENCES_SID],
                   [PREFERED_QUESTION],
                   [PREFERED_ANSWER],
                   [CREATED_BY],
                   [CREATED_DATE],
                   [MODIFIED_BY],
                   [MODIFIED_DATE],
                   [VERSION_NO],
                   [ACTION_FLAG])
      SELECT [USER_PREFERENCES_SID],
             [PREFERED_QUESTION],
             [PREFERED_ANSWER],
             [CREATED_BY],
             [CREATED_DATE],
             [MODIFIED_BY],
             [MODIFIED_DATE],
             VERSION_NO,
             'D'
      FROM   DELETED
  END

GO

---------------------------------------USERGROUP_BUSINESSROLE------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'USERGROUP_BUSINESSROLE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[USERGROUP_BUSINESSROLE]
        (
           [USERGROUP_BUSINESSROLE_SID] INT IDENTITY(1, 1) NOT NULL,
           [USERGROUP_ID]               INT NULL,
           [BUSINESSROLE_MASTER_SID]    INT NULL,
           [IS_ACTIVE]                  CHAR(1) NULL,
           [USERS_SID]                  INT NULL,
           [PROCESSED]                  CHAR(1) NULL,
           [CREATED_BY]                 INT NOT NULL,
           [CREATED_DATE]               DATETIME NOT NULL,
           [MODIFIED_BY]                INT NOT NULL,
           [MODIFIED_DATE]              DATETIME NOT NULL,
           [VERSION_NO]                 INT NOT NULL
        )
  END

GO

IF NOT EXISTS(SELECT 'X'
              FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE  CONSTRAINT_NAME = 'PK_USERGROUP_BUSINESSROLE_USERGROUP_BUSINESSROLE_SID'
                     AND TABLE_NAME = 'USERGROUP_BUSINESSROLE')
  ALTER TABLE USERGROUP_BUSINESSROLE
    ADD CONSTRAINT PK_USERGROUP_BUSINESSROLE_USERGROUP_BUSINESSROLE_SID PRIMARY KEY(USERGROUP_BUSINESSROLE_SID)

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('USERGROUP_BUSINESSROLE')
                      AND NAME = 'DF_USERGROUP_BUSINESSROLE_CREATED_BY')
  BEGIN
      ALTER TABLE [DBO].[USERGROUP_BUSINESSROLE]
        ADD CONSTRAINT [DF_USERGROUP_BUSINESSROLE_CREATED_BY] DEFAULT (1) FOR CREATED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.USERGROUP_BUSINESSROLE')
                      AND NAME = 'DF_USERGROUP_BUSINESSROLE_CREATED_DATE')
  BEGIN
      ALTER TABLE [DBO].[USERGROUP_BUSINESSROLE]
        ADD CONSTRAINT [DF_USERGROUP_BUSINESSROLE_CREATED_DATE] DEFAULT (GETDATE()) FOR CREATED_DATE
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.USERGROUP_BUSINESSROLE')
                      AND NAME = 'DF_USERGROUP_BUSINESSROLE_MODIFIED_BY')
  BEGIN
      ALTER TABLE [DBO].[USERGROUP_BUSINESSROLE]
        ADD CONSTRAINT [DF_USERGROUP_BUSINESSROLE_MODIFIED_BY] DEFAULT (1) FOR MODIFIED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.USERGROUP_BUSINESSROLE')
                      AND NAME = 'DF_USERGROUP_BUSINESSROLE_MODIFIED_DATE')
  BEGIN
      ALTER TABLE [DBO].[USERGROUP_BUSINESSROLE]
        ADD CONSTRAINT [DF_USERGROUP_BUSINESSROLE_MODIFIED_DATE] DEFAULT (GETDATE()) FOR MODIFIED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'USERGROUP_BUSINESSROLE'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

------------------------------------HIST_USERGROUP_BUSINESSROLE-------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'HIST_USERGROUP_BUSINESSROLE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[HIST_USERGROUP_BUSINESSROLE]
        (
           [USERGROUP_BUSINESSROLE_SID] INT NOT NULL,
           [USERGROUP_ID]               INT NULL,
           [BUSINESSROLE_MASTER_SID]    INT NULL,
           [IS_ACTIVE]                  CHAR(1) NULL,
           [USERS_SID]                  INT NULL,
           [PROCESSED]                  CHAR(1) NULL,
           [CREATED_BY]                 INT NOT NULL,
           [CREATED_DATE]               DATETIME NOT NULL,
           [MODIFIED_BY]                INT NOT NULL,
           [MODIFIED_DATE]              DATETIME NOT NULL,
           [VERSION_NO]                 INT NOT NULL,
           [ACTION_FLAG]                CHAR(1) NOT NULL,
           [ACTION_DATE]                DATETIME NOT NULL
        )
  END

GO


IF EXISTS(SELECT 'X'
          FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
          WHERE  CONSTRAINT_NAME = 'PK_HIST_USERGROUP_BUSINESSROLE_USERGROUP_BUSINESSROLE_SID_VERSION_NO'
                 AND TABLE_NAME = 'HIST_USERGROUP_BUSINESSROLE')
BEGIN
  ALTER TABLE [HIST_USERGROUP_BUSINESSROLE]
    DROP CONSTRAINT PK_HIST_USERGROUP_BUSINESSROLE_USERGROUP_BUSINESSROLE_SID_VERSION_NO
END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.HIST_USERGROUP_BUSINESSROLE')
                      AND NAME = 'DF_HIST_USERGROUP_BUSINESSROLE_ACTION_DATE')
  BEGIN
      ALTER TABLE [DBO].[HIST_USERGROUP_BUSINESSROLE]
        ADD CONSTRAINT [DF_HIST_USERGROUP_BUSINESSROLE_ACTION_DATE] DEFAULT (GETDATE()) FOR ACTION_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'HIST_USERGROUP_BUSINESSROLE'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

--------------------------------------USERGROUP_BUSINESSROLE TRIGGER-------------------------------------
IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_USERGROUP_BUSINESSROLE_UPD')
  BEGIN
      DROP TRIGGER DBO.TRG_USERGROUP_BUSINESSROLE_UPD
  END

GO

CREATE TRIGGER [DBO].[TRG_USERGROUP_BUSINESSROLE_UPD]
ON [DBO].USERGROUP_BUSINESSROLE
--INSTEAD OF UPDATE
AFTER UPDATE
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_USERGROUP_BUSINESSROLE
                  ([USERGROUP_BUSINESSROLE_SID],
                   [USERGROUP_ID],
                   [BUSINESSROLE_MASTER_SID],
                   [IS_ACTIVE],
                   [USERS_SID],
                   [PROCESSED],
                   [CREATED_BY],
                   [CREATED_DATE],
                   [MODIFIED_BY],
                   [MODIFIED_DATE],
                   [VERSION_NO],
                   [ACTION_FLAG])
      SELECT [USERGROUP_BUSINESSROLE_SID],
             [USERGROUP_ID],
             [BUSINESSROLE_MASTER_SID],
             [IS_ACTIVE],
             [USERS_SID],
             [PROCESSED],
             [CREATED_BY],
             [CREATED_DATE],
             [MODIFIED_BY],
             [MODIFIED_DATE],
             VERSION_NO,
             'C'
      FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_USERGROUP_BUSINESSROLE_INS')
  BEGIN
      DROP TRIGGER DBO.[TRG_USERGROUP_BUSINESSROLE_INS]
  END

GO

CREATE TRIGGER [DBO].[TRG_USERGROUP_BUSINESSROLE_INS]
ON [DBO].USERGROUP_BUSINESSROLE
AFTER INSERT
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_USERGROUP_BUSINESSROLE
                  ([USERGROUP_BUSINESSROLE_SID],
                   [USERGROUP_ID],
                   [BUSINESSROLE_MASTER_SID],
                   [IS_ACTIVE],
                   [USERS_SID],
                   [PROCESSED],
                   [CREATED_BY],
                   [CREATED_DATE],
                   [MODIFIED_BY],
                   [MODIFIED_DATE],
                   [VERSION_NO],
                   [ACTION_FLAG])
      SELECT [USERGROUP_BUSINESSROLE_SID],
             [USERGROUP_ID],
             [BUSINESSROLE_MASTER_SID],
             [IS_ACTIVE],
             [USERS_SID],
             [PROCESSED],
             [CREATED_BY],
             [CREATED_DATE],
             [MODIFIED_BY],
             [MODIFIED_DATE],
             VERSION_NO,
             'A'
      FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_USERGROUP_BUSINESSROLE_DEL')
  BEGIN
      DROP TRIGGER DBO.[TRG_USERGROUP_BUSINESSROLE_DEL]
  END

GO

CREATE TRIGGER [DBO].[TRG_USERGROUP_BUSINESSROLE_DEL]
ON [DBO].USERGROUP_BUSINESSROLE
AFTER DELETE
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_USERGROUP_BUSINESSROLE
                  ([USERGROUP_BUSINESSROLE_SID],
                   [USERGROUP_ID],
                   [BUSINESSROLE_MASTER_SID],
                   [IS_ACTIVE],
                   [USERS_SID],
                   [PROCESSED],
                   [CREATED_BY],
                   [CREATED_DATE],
                   [MODIFIED_BY],
                   [MODIFIED_DATE],
                   [VERSION_NO],
                   [ACTION_FLAG])
      SELECT [USERGROUP_BUSINESSROLE_SID],
             [USERGROUP_ID],
             [BUSINESSROLE_MASTER_SID],
             [IS_ACTIVE],
             [USERS_SID],
             [PROCESSED],
             [CREATED_BY],
             [CREATED_DATE],
             [MODIFIED_BY],
             [MODIFIED_DATE],
             VERSION_NO,
             'D'
      FROM   DELETED
  END

GO

-----------------------------------USERGROUP_DOMAIN_MASTER----------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'USERGROUP_DOMAIN_MASTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[USERGROUP_DOMAIN_MASTER]
        (
           [USERGROUP_DOMAIN_SID] INT IDENTITY(1, 1) NOT NULL,
           [USERGROUP_ID]         INT NULL,
           [DOMAIN_ID]            INT NULL,
           [IS_ACTIVE]            CHAR(1) NULL,
           [USERS_SID]            INT NULL,
           [PROCESSED]            CHAR(1) NULL,
           [CREATED_BY]           INT NOT NULL,
           [CREATED_DATE]         DATETIME NOT NULL,
           [MODIFIED_BY]          INT NOT NULL,
           [MODIFIED_DATE]        DATETIME NOT NULL,
           [VERSION_NO]           INT NOT NULL
        )
  END

GO

IF NOT EXISTS(SELECT 'X'
              FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE  CONSTRAINT_NAME = 'PK_USERGROUP_DOMAIN_MASTER_USERGROUP_DOMAIN_SID'
                     AND TABLE_NAME = 'USERGROUP_DOMAIN_MASTER')
BEGIN
  ALTER TABLE USERGROUP_DOMAIN_MASTER
    ADD CONSTRAINT PK_USERGROUP_DOMAIN_MASTER_USERGROUP_DOMAIN_SID PRIMARY KEY(USERGROUP_DOMAIN_SID)
END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('USERGROUP_DOMAIN_MASTER')
                      AND NAME = 'DF_USERGROUP_DOMAIN_MASTER_CREATED_BY')
  BEGIN
      ALTER TABLE [DBO].[USERGROUP_DOMAIN_MASTER]
        ADD CONSTRAINT [DF_USERGROUP_DOMAIN_MASTER_CREATED_BY] DEFAULT (1) FOR CREATED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.USERGROUP_DOMAIN_MASTER')
                      AND NAME = 'DF_USERGROUP_DOMAIN_MASTER_CREATED_DATE')
  BEGIN
      ALTER TABLE [DBO].[USERGROUP_DOMAIN_MASTER]
        ADD CONSTRAINT [DF_USERGROUP_DOMAIN_MASTER_CREATED_DATE] DEFAULT (GETDATE()) FOR CREATED_DATE
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.USERGROUP_DOMAIN_MASTER')
                      AND NAME = 'DF_USERGROUP_DOMAIN_MASTER_MODIFIED_BY')
  BEGIN
      ALTER TABLE [DBO].[USERGROUP_DOMAIN_MASTER]
        ADD CONSTRAINT [DF_USERGROUP_DOMAIN_MASTER_MODIFIED_BY] DEFAULT (1) FOR MODIFIED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.USERGROUP_DOMAIN_MASTER')
                      AND NAME = 'DF_USERGROUP_DOMAIN_MASTER_MODIFIED_DATE')
  BEGIN
      ALTER TABLE [DBO].[USERGROUP_DOMAIN_MASTER]
        ADD CONSTRAINT [DF_USERGROUP_DOMAIN_MASTER_MODIFIED_DATE] DEFAULT (GETDATE()) FOR MODIFIED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'USERGROUP_DOMAIN_MASTER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

--------------------------------HIST_USERGROUP_DOMAIN_MASTER------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'HIST_USERGROUP_DOMAIN_MASTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[HIST_USERGROUP_DOMAIN_MASTER]
        (
           [USERGROUP_DOMAIN_SID] INT NOT NULL,
           [USERGROUP_ID]         INT NULL,
           [DOMAIN_ID]            INT NULL,
           [IS_ACTIVE]            CHAR(1) NULL,
           [USERS_SID]            INT NULL,
           [PROCESSED]            CHAR(1) NULL,
           [CREATED_BY]           INT NOT NULL,
           [CREATED_DATE]         DATETIME NOT NULL,
           [MODIFIED_BY]          INT NOT NULL,
           [MODIFIED_DATE]        DATETIME NOT NULL,
           [VERSION_NO]           INT NOT NULL,
           [ACTION_FLAG]          CHAR(1) NOT NULL,
           [ACTION_DATE]          DATETIME NOT NULL
        )
  END

GO

IF EXISTS(SELECT 'X'
          FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
          WHERE  CONSTRAINT_NAME = 'PK_HIST_USERGROUP_DOMAIN_MASTER_USERGROUP_DOMAIN_SID_VERSION_NO'
                 AND TABLE_NAME = 'HIST_USERGROUP_DOMAIN_MASTER')
BEGIN
  ALTER TABLE [HIST_USERGROUP_DOMAIN_MASTER]
    DROP CONSTRAINT PK_HIST_USERGROUP_DOMAIN_MASTER_USERGROUP_DOMAIN_SID_VERSION_NO
END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.HIST_USERGROUP_DOMAIN_MASTER')
                      AND NAME = 'DF_HIST_USERGROUP_DOMAIN_MASTER_ACTION_DATE')
  BEGIN
      ALTER TABLE [DBO].[HIST_USERGROUP_DOMAIN_MASTER]
        ADD CONSTRAINT [DF_HIST_USERGROUP_DOMAIN_MASTER_ACTION_DATE] DEFAULT (GETDATE()) FOR ACTION_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'HIST_USERGROUP_DOMAIN_MASTER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

-------------------------------------USERGROUP_DOMAIN_MASTER TRIGGER-----------------------------------------------
IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_USERGROUP_DOMAIN_MASTER_UPD')
  BEGIN
      DROP TRIGGER DBO.TRG_USERGROUP_DOMAIN_MASTER_UPD
  END

GO

CREATE TRIGGER [DBO].[TRG_USERGROUP_DOMAIN_MASTER_UPD]
ON [DBO].[USERGROUP_DOMAIN_MASTER]
AFTER UPDATE
AS
  BEGIN
      SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   INSERTED)
         AND EXISTS(SELECT *
                    FROM   DELETED)
        INSERT INTO HIST_USERGROUP_DOMAIN_MASTER
                    ([USERGROUP_DOMAIN_SID],
                     [USERGROUP_ID],
                     [DOMAIN_ID],
                     [IS_ACTIVE],
                     [USERS_SID],
                     [PROCESSED],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     [ACTION_FLAG])
        SELECT [USERGROUP_DOMAIN_SID],
               [USERGROUP_ID],
               [DOMAIN_ID],
               [IS_ACTIVE],
               [USERS_SID],
               [PROCESSED],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'C'
        FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_USERGROUP_DOMAIN_MASTER_INS')
  BEGIN
      DROP TRIGGER DBO.TRG_USERGROUP_DOMAIN_MASTER_INS
  END

GO

CREATE TRIGGER [DBO].[TRG_USERGROUP_DOMAIN_MASTER_INS]
ON [DBO].[USERGROUP_DOMAIN_MASTER]
AFTER INSERT
AS
  BEGIN
      SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   INSERTED)
        INSERT INTO HIST_USERGROUP_DOMAIN_MASTER
                    ([USERGROUP_DOMAIN_SID],
                     [USERGROUP_ID],
                     [DOMAIN_ID],
                     [IS_ACTIVE],
                     [USERS_SID],
                     [PROCESSED],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     [ACTION_FLAG])
        SELECT [USERGROUP_DOMAIN_SID],
               [USERGROUP_ID],
               [DOMAIN_ID],
               [IS_ACTIVE],
               [USERS_SID],
               [PROCESSED],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'A'
        FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_USERGROUP_DOMAIN_MASTER_DEL')
  BEGIN
      DROP TRIGGER DBO.TRG_USERGROUP_DOMAIN_MASTER_DEL
  END

GO

CREATE TRIGGER [DBO].[TRG_USERGROUP_DOMAIN_MASTER_DEL]
ON [DBO].[USERGROUP_DOMAIN_MASTER]
AFTER DELETE
AS
  BEGIN 
      SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   DELETED)
        INSERT INTO HIST_USERGROUP_DOMAIN_MASTER
                    ([USERGROUP_DOMAIN_SID],
                     [USERGROUP_ID],
                     [DOMAIN_ID],
                     [IS_ACTIVE],
                     [USERS_SID],
                     [PROCESSED],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     [ACTION_FLAG])
        SELECT [USERGROUP_DOMAIN_SID],
               [USERGROUP_ID],
               [DOMAIN_ID],
               [IS_ACTIVE],
               [USERS_SID],
               [PROCESSED],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'D'
        FROM   DELETED
  END

GO

---------------------------------------USERS---------------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'USERS'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[USERS]
        (
           [USERS_SID]         BIGINT IDENTITY(1, 1) NOT NULL,
           [USERS_CREATED_DT]  DATETIME NULL,
           [USERS_ENABLED]     TINYINT NULL,
           [USERS_ENCRYPTED]   VARCHAR(20) NULL,
           [USERS_FIRST_NAME]  VARCHAR(20) NULL,
           [USERS_LAST_NAME]   VARCHAR(20) NULL,
           [USERS_MODIFIED_DT] DATETIME NULL,
           [USERS_PASSWORD]    VARCHAR(200) NULL,
           [USERS_USERNAME]    VARCHAR(25) NULL,
           [CREATED_BY]        INT NOT NULL,
           [CREATED_DATE]      DATETIME NOT NULL,
           [MODIFIED_BY]       INT NOT NULL,
           [MODIFIED_DATE]     DATETIME NOT NULL,
           [VERSION_NO]        INT NOT NULL
        )
  END

GO

IF NOT EXISTS(SELECT 'X'
              FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE  CONSTRAINT_NAME = 'PK_USERS_USERS_SID'
                     AND TABLE_NAME = 'USERS')
BEGIN
  ALTER TABLE USERS
    ADD CONSTRAINT PK_USERS_USERS_SID PRIMARY KEY(USERS_SID)
END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.USERS')
                      AND NAME = 'DF_USERS_USERS_ENABLED')
  BEGIN
      ALTER TABLE [DBO].[USERS]
        ADD CONSTRAINT [DF_USERS_USERS_ENABLED] DEFAULT (1) FOR USERS_ENABLED
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('USERS')
                      AND NAME = 'DF_USERS_CREATED_BY')
  BEGIN
      ALTER TABLE [DBO].[USERS]
        ADD CONSTRAINT [DF_USERS_CREATED_BY] DEFAULT (1) FOR CREATED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.USERS')
                      AND NAME = 'DF_USERS_CREATED_DATE')
  BEGIN
      ALTER TABLE [DBO].[USERS]
        ADD CONSTRAINT [DF_USERS_CREATED_DATE] DEFAULT (GETDATE()) FOR CREATED_DATE
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.USERS')
                      AND NAME = 'DF_USERS_MODIFIED_BY')
  BEGIN
      ALTER TABLE [DBO].[USERS]
        ADD CONSTRAINT [DF_USERS_MODIFIED_BY] DEFAULT (1) FOR MODIFIED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.USERS')
                      AND NAME = 'DF_USERS_MODIFIED_DATE')
  BEGIN
      ALTER TABLE [DBO].[USERS]
        ADD CONSTRAINT [DF_USERS_MODIFIED_DATE] DEFAULT (GETDATE()) FOR MODIFIED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'USERS'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

--------------------------------------------HIST_USERS------------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'HIST_USERS'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[HIST_USERS]
        (
           [USERS_SID]         BIGINT NOT NULL,
           [USERS_CREATED_DT]  DATETIME NULL,
           [USERS_ENABLED]     TINYINT NULL,
           [USERS_ENCRYPTED]   VARCHAR(20) NULL,
           [USERS_FIRST_NAME]  VARCHAR(20) NULL,
           [USERS_LAST_NAME]   VARCHAR(20) NULL,
           [USERS_MODIFIED_DT] DATETIME NULL,
           [USERS_PASSWORD]    VARCHAR(200) NULL,
           [USERS_USERNAME]    VARCHAR(25) NULL,
           [CREATED_BY]        INT NOT NULL,
           [CREATED_DATE]      DATETIME NOT NULL,
           [MODIFIED_BY]       INT NOT NULL,
           [MODIFIED_DATE]     DATETIME NOT NULL,
           [VERSION_NO]        INT NOT NULL,
           [ACTION_FLAG]       CHAR(1) NOT NULL,
           [ACTION_DATE]       DATETIME NOT NULL
        )
  END

GO

IF EXISTS(SELECT 'X'
          FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
          WHERE  CONSTRAINT_NAME = 'PK_HIST_USERS_USERS_SID_VERSION_NO'
                 AND TABLE_NAME = 'HIST_USERS')
BEGIN
  ALTER TABLE [HIST_USERS]
    DROP CONSTRAINT PK_HIST_USERS_USERS_SID_VERSION_NO
END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.HIST_USERS')
                      AND NAME = 'DF_HIST_USERS_ACTION_DATE')
  BEGIN
      ALTER TABLE [DBO].[HIST_USERS]
        ADD CONSTRAINT [DF_HIST_USERS_ACTION_DATE] DEFAULT (GETDATE()) FOR ACTION_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'HIST_USERS'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

-------------------------------------------USERS TRIGGER-----------------------------------------
IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_USERS_UPD')
  BEGIN
      DROP TRIGGER DBO.TRG_USERS_UPD
  END

GO

CREATE TRIGGER [DBO].[TRG_USERS_UPD]
ON [DBO].[USERS]
AFTER UPDATE
AS
  BEGIN
      SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   INSERTED)
         AND EXISTS(SELECT *
                    FROM   DELETED)
        INSERT INTO [HIST_USERS]
                    ([USERS_SID],
                     [USERS_CREATED_DT],
                     [USERS_ENABLED],
                     [USERS_ENCRYPTED],
                     [USERS_FIRST_NAME],
                     [USERS_LAST_NAME],
                     [USERS_MODIFIED_DT],
                     [USERS_PASSWORD],
                     [USERS_USERNAME],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     [ACTION_FLAG])
        SELECT [USERS_SID],
               [USERS_CREATED_DT],
               [USERS_ENABLED],
               [USERS_ENCRYPTED],
               [USERS_FIRST_NAME],
               [USERS_LAST_NAME],
               [USERS_MODIFIED_DT],
               [USERS_PASSWORD],
               [USERS_USERNAME],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'C'
        FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_USERS_INS')
  BEGIN
      DROP TRIGGER DBO.TRG_USERS_INS
  END

GO

CREATE TRIGGER [DBO].[TRG_USERS_INS]
ON [DBO].[USERS]
AFTER INSERT
AS
  BEGIN
      SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   INSERTED)
        INSERT INTO [HIST_USERS]
                    ([USERS_SID],
                     [USERS_CREATED_DT],
                     [USERS_ENABLED],
                     [USERS_ENCRYPTED],
                     [USERS_FIRST_NAME],
                     [USERS_LAST_NAME],
                     [USERS_MODIFIED_DT],
                     [USERS_PASSWORD],
                     [USERS_USERNAME],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     [ACTION_FLAG])
        SELECT [USERS_SID],
               [USERS_CREATED_DT],
               [USERS_ENABLED],
               [USERS_ENCRYPTED],
               [USERS_FIRST_NAME],
               [USERS_LAST_NAME],
               [USERS_MODIFIED_DT],
               [USERS_PASSWORD],
               [USERS_USERNAME],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'A'
        FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_USERS_DEL')
  BEGIN
      DROP TRIGGER DBO.TRG_USERS_DEL
  END

GO

CREATE TRIGGER [DBO].[TRG_USERS_DEL]
ON [DBO].[USERS]
AFTER DELETE
AS
  BEGIN
      SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   DELETED)
        INSERT INTO [HIST_USERS]
                    ([USERS_SID],
                     [USERS_CREATED_DT],
                     [USERS_ENABLED],
                     [USERS_ENCRYPTED],
                     [USERS_FIRST_NAME],
                     [USERS_LAST_NAME],
                     [USERS_MODIFIED_DT],
                     [USERS_PASSWORD],
                     [USERS_USERNAME],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     [ACTION_FLAG])
        SELECT [USERS_SID],
               [USERS_CREATED_DT],
               [USERS_ENABLED],
               [USERS_ENCRYPTED],
               [USERS_FIRST_NAME],
               [USERS_LAST_NAME],
               [USERS_MODIFIED_DT],
               [USERS_PASSWORD],
               [USERS_USERNAME],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'D'
        FROM   DELETED
  END

GO

----------------------------------ROLE_ASSOCIATE------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'ROLE_ASSOCIATE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[ROLE_ASSOCIATE]
        (
           [ROLE_ASSOCIATE_SID]     INT IDENTITY(1, 1) NOT NULL,
           [USERS_SID]              INT NULL,
           [SESSION_ID]             VARCHAR(500) NULL,
           [BUSINESSROLE_MASTER_ID] INT NULL,
           [CREATED_BY]             INT NOT NULL,
           [CREATED_DATE]           DATETIME NOT NULL,
           [MODIFIED_BY]            INT NOT NULL,
           [MODIFIED_DATE]          DATETIME NOT NULL,
           [VERSION_NO]             INT NOT NULL
        )
  END

GO

IF NOT EXISTS(SELECT 'X'
              FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE  CONSTRAINT_NAME = 'PK_ROLE_ASSOCIATE_ROLE_ASSOCIATE_SID'
                     AND TABLE_NAME = 'ROLE_ASSOCIATE')
BEGIN
  ALTER TABLE ROLE_ASSOCIATE
    ADD CONSTRAINT PK_ROLE_ASSOCIATE_ROLE_ASSOCIATE_SID PRIMARY KEY(ROLE_ASSOCIATE_SID)
END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('ROLE_ASSOCIATE')
                      AND NAME = 'DF_ROLE_ASSOCIATE_CREATED_BY')
  BEGIN
      ALTER TABLE [DBO].[ROLE_ASSOCIATE]
        ADD CONSTRAINT [DF_ROLE_ASSOCIATE_CREATED_BY] DEFAULT (1) FOR CREATED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.ROLE_ASSOCIATE')
                      AND NAME = 'DF_ROLE_ASSOCIATE_CREATED_DATE')
  BEGIN
      ALTER TABLE [DBO].[ROLE_ASSOCIATE]
        ADD CONSTRAINT [DF_ROLE_ASSOCIATE_CREATED_DATE] DEFAULT (GETDATE()) FOR CREATED_DATE
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.ROLE_ASSOCIATE')
                      AND NAME = 'DF_ROLE_ASSOCIATE_MODIFIED_BY')
  BEGIN
      ALTER TABLE [DBO].[ROLE_ASSOCIATE]
        ADD CONSTRAINT [DF_ROLE_ASSOCIATE_MODIFIED_BY] DEFAULT (1) FOR MODIFIED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.ROLE_ASSOCIATE')
                      AND NAME = 'DF_ROLE_ASSOCIATE_MODIFIED_DATE')
  BEGIN
      ALTER TABLE [DBO].[ROLE_ASSOCIATE]
        ADD CONSTRAINT [DF_ROLE_ASSOCIATE_MODIFIED_DATE] DEFAULT (GETDATE()) FOR MODIFIED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'ROLE_ASSOCIATE'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

--------------------------------------HIST_ROLE_ASSOCIATE--------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'HIST_ROLE_ASSOCIATE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[HIST_ROLE_ASSOCIATE]
        (
           [ROLE_ASSOCIATE_SID]     INT NOT NULL,
           [USERS_SID]              INT NULL,
           [SESSION_ID]             VARCHAR(500) NULL,
           [BUSINESSROLE_MASTER_ID] INT NULL,
           [CREATED_BY]             INT NOT NULL,
           [CREATED_DATE]           DATETIME NOT NULL,
           [MODIFIED_BY]            INT NOT NULL,
           [MODIFIED_DATE]          DATETIME NOT NULL,
           [VERSION_NO]             INT NOT NULL,
           [ACTION_FLAG]            CHAR(1) NOT NULL,
           [ACTION_DATE]            DATETIME NOT NULL
        )
  END

GO

IF EXISTS(SELECT 'X'
          FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
          WHERE  CONSTRAINT_NAME = 'PK_HIST_ROLE_ASSOCIATE_ROLE_ASSOCIATE_SID_VERSION_NO'
                 AND TABLE_NAME = 'HIST_ROLE_ASSOCIATE')
BEGIN
  ALTER TABLE [HIST_ROLE_ASSOCIATE]
    DROP CONSTRAINT PK_HIST_ROLE_ASSOCIATE_ROLE_ASSOCIATE_SID_VERSION_NO
END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.HIST_ROLE_ASSOCIATE')
                      AND NAME = 'DF_HIST_ROLE_ASSOCIATE_ACTION_DATE')
  BEGIN
      ALTER TABLE [DBO].[HIST_ROLE_ASSOCIATE]
        ADD CONSTRAINT [DF_HIST_ROLE_ASSOCIATE_ACTION_DATE] DEFAULT (GETDATE()) FOR ACTION_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'HIST_ROLE_ASSOCIATE'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

------------------------------------------ROLE_ASSOCIATE TRIGGER-------------------------------------
IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_ROLE_ASSOCIATE_UPD')
  BEGIN
      DROP TRIGGER DBO.TRG_ROLE_ASSOCIATE_UPD
  END

GO

CREATE TRIGGER [DBO].[TRG_ROLE_ASSOCIATE_UPD]
ON [DBO].ROLE_ASSOCIATE
--INSTEAD OF UPDATE
AFTER UPDATE
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_ROLE_ASSOCIATE
                  ([ROLE_ASSOCIATE_SID],
                   [USERS_SID],
                   [SESSION_ID],
                   [BUSINESSROLE_MASTER_ID],
                   [CREATED_BY],
                   [CREATED_DATE],
                   [MODIFIED_BY],
                   [MODIFIED_DATE],
                   [VERSION_NO],
                   [ACTION_FLAG])
      SELECT [ROLE_ASSOCIATE_SID],
             [USERS_SID],
             [SESSION_ID],
             [BUSINESSROLE_MASTER_ID],
             [CREATED_BY],
             [CREATED_DATE],
             [MODIFIED_BY],
             [MODIFIED_DATE],
             VERSION_NO,
             'C'
      FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_ROLE_ASSOCIATE_INS')
  BEGIN
      DROP TRIGGER DBO.[TRG_ROLE_ASSOCIATE_INS]
  END

GO

CREATE TRIGGER [DBO].[TRG_ROLE_ASSOCIATE_INS]
ON [DBO].ROLE_ASSOCIATE
AFTER INSERT
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_ROLE_ASSOCIATE
                  ([ROLE_ASSOCIATE_SID],
                   [USERS_SID],
                   [SESSION_ID],
                   [BUSINESSROLE_MASTER_ID],
                   [CREATED_BY],
                   [CREATED_DATE],
                   [MODIFIED_BY],
                   [MODIFIED_DATE],
                   [VERSION_NO],
                   [ACTION_FLAG])
      SELECT [ROLE_ASSOCIATE_SID],
             [USERS_SID],
             [SESSION_ID],
             [BUSINESSROLE_MASTER_ID],
             [CREATED_BY],
             [CREATED_DATE],
             [MODIFIED_BY],
             [MODIFIED_DATE],
             VERSION_NO,
             'A'
      FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_ROLE_ASSOCIATE_DEL')
  BEGIN
      DROP TRIGGER DBO.[TRG_ROLE_ASSOCIATE_DEL]
  END

GO

CREATE TRIGGER [DBO].[TRG_ROLE_ASSOCIATE_DEL]
ON [DBO].ROLE_ASSOCIATE
AFTER DELETE
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_ROLE_ASSOCIATE
                  ([ROLE_ASSOCIATE_SID],
                   [USERS_SID],
                   [SESSION_ID],
                   [BUSINESSROLE_MASTER_ID],
                   [CREATED_BY],
                   [CREATED_DATE],
                   [MODIFIED_BY],
                   [MODIFIED_DATE],
                   [VERSION_NO],
                   [ACTION_FLAG])
      SELECT [ROLE_ASSOCIATE_SID],
             [USERS_SID],
             [SESSION_ID],
             [BUSINESSROLE_MASTER_ID],
             [CREATED_BY],
             [CREATED_DATE],
             [MODIFIED_BY],
             [MODIFIED_DATE],
             VERSION_NO,
             'D'
      FROM   DELETED
  END

GO

------------------------------------------DOMAIN_MASTER---------------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'DOMAIN_MASTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[DOMAIN_MASTER]
        (
           [DOMAIN_MASTER_SID]  INT IDENTITY(1, 1) NOT NULL,
           [DOMAIN_NAME]        VARCHAR(100) NULL,
           [DOMAIN_DESCRIPTION] VARCHAR(500) NULL,
           [IS_ACTIVE]          CHAR(1) NULL,
           [USERS_SID]          INT NULL,
           [PROCESSED]          CHAR(1) NULL,
           [CREATED_BY]         INT NOT NULL,
           [CREATED_DATE]       DATETIME NOT NULL,
           [MODIFIED_BY]        INT NOT NULL,
           [MODIFIED_DATE]      DATETIME NOT NULL,
           [VERSION_NO]         INT NOT NULL
        )
  END

GO

IF NOT EXISTS(SELECT 'X'
              FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE  CONSTRAINT_NAME = 'PK_DOMAIN_MASTER_DOMAIN_MASTER_SID'
                     AND TABLE_NAME = 'DOMAIN_MASTER')
BEGIN
  ALTER TABLE DOMAIN_MASTER
    ADD CONSTRAINT PK_DOMAIN_MASTER_DOMAIN_MASTER_SID PRIMARY KEY(DOMAIN_MASTER_SID)
END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DOMAIN_MASTER')
                      AND NAME = 'DF_DOMAIN_MASTER_CREATED_BY')
  BEGIN
      ALTER TABLE [DBO].[DOMAIN_MASTER]
        ADD CONSTRAINT [DF_DOMAIN_MASTER_CREATED_BY] DEFAULT (1) FOR CREATED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.DOMAIN_MASTER')
                      AND NAME = 'DF_DOMAIN_MASTER_CREATED_DATE')
  BEGIN
      ALTER TABLE [DBO].[DOMAIN_MASTER]
        ADD CONSTRAINT [DF_DOMAIN_MASTER_CREATED_DATE] DEFAULT (GETDATE()) FOR CREATED_DATE
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.DOMAIN_MASTER')
                      AND NAME = 'DF_DOMAIN_MASTER_MODIFIED_BY')
  BEGIN
      ALTER TABLE [DBO].[DOMAIN_MASTER]
        ADD CONSTRAINT [DF_DOMAIN_MASTER_MODIFIED_BY] DEFAULT (1) FOR MODIFIED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.DOMAIN_MASTER')
                      AND NAME = 'DF_DOMAIN_MASTER_MODIFIED_DATE')
  BEGIN
      ALTER TABLE [DBO].[DOMAIN_MASTER]
        ADD CONSTRAINT [DF_DOMAIN_MASTER_MODIFIED_DATE] DEFAULT (GETDATE()) FOR MODIFIED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'DOMAIN_MASTER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

-------------------------------------HIST_DOMAIN_MASTER-----------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'HIST_DOMAIN_MASTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[HIST_DOMAIN_MASTER]
        (
           [DOMAIN_MASTER_SID]  INT NOT NULL,
           [DOMAIN_NAME]        VARCHAR(100) NULL,
           [DOMAIN_DESCRIPTION] VARCHAR(500) NULL,
           [IS_ACTIVE]          CHAR(1) NULL,
           [USERS_SID]          INT NULL,
           [PROCESSED]          CHAR(1) NULL,
           [CREATED_BY]         INT NOT NULL,
           [CREATED_DATE]       DATETIME NOT NULL,
           [MODIFIED_BY]        INT NOT NULL,
           [MODIFIED_DATE]      DATETIME NOT NULL,
           [VERSION_NO]         INT NOT NULL,
           [ACTION_FLAG]        CHAR(1) NOT NULL,
           [ACTION_DATE]        DATETIME NOT NULL
        )
  END

GO

IF EXISTS(SELECT 'X'
          FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
          WHERE  CONSTRAINT_NAME = 'PK_HIST_DOMAIN_MASTER_DOMAIN_MASTER_SID_VERSION_NO'
                 AND TABLE_NAME = 'HIST_DOMAIN_MASTER')
BEGIN
  ALTER TABLE [HIST_DOMAIN_MASTER]
    DROP CONSTRAINT PK_HIST_DOMAIN_MASTER_DOMAIN_MASTER_SID_VERSION_NO
END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.HIST_DOMAIN_MASTER')
                      AND NAME = 'DF_HIST_DOMAIN_MASTER_ACTION_DATE')
  BEGIN
      ALTER TABLE [DBO].[HIST_DOMAIN_MASTER]
        ADD CONSTRAINT [DF_HIST_DOMAIN_MASTER_ACTION_DATE] DEFAULT (GETDATE()) FOR ACTION_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'HIST_DOMAIN_MASTER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

-----------------------------------DOMAIN_MASTER TRIGGER--------------------------------------
IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_DOMAIN_MASTER_INS')
  BEGIN
      DROP TRIGGER DBO.TRG_DOMAIN_MASTER_INS
  END

GO

CREATE TRIGGER [DBO].[TRG_DOMAIN_MASTER_INS]
ON [DBO].DOMAIN_MASTER
AFTER INSERT
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_DOMAIN_MASTER
                  (DOMAIN_MASTER_SID,
                   DOMAIN_NAME,
                   DOMAIN_DESCRIPTION,
                   IS_ACTIVE,
                   USERS_SID,
                   PROCESSED,
                   CREATED_BY,
                   CREATED_DATE,
                   MODIFIED_BY,
                   MODIFIED_DATE,
                   VERSION_NO,
                   ACTION_FLAG)
      SELECT DOMAIN_MASTER_SID,
             DOMAIN_NAME,
             DOMAIN_DESCRIPTION,
             IS_ACTIVE,
             USERS_SID,
             PROCESSED,
             CREATED_BY,
             CREATED_DATE,
             MODIFIED_BY,
             MODIFIED_DATE,
             VERSION_NO,
             'A'
      FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_DOMAIN_MASTER_UPD')
  BEGIN
      DROP TRIGGER DBO.TRG_DOMAIN_MASTER_UPD
  END

GO

CREATE TRIGGER [DBO].[TRG_DOMAIN_MASTER_UPD]
ON [DBO].DOMAIN_MASTER
AFTER UPDATE
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_DOMAIN_MASTER
                  (DOMAIN_MASTER_SID,
                   DOMAIN_NAME,
                   DOMAIN_DESCRIPTION,
                   IS_ACTIVE,
                   USERS_SID,
                   PROCESSED,
                   CREATED_BY,
                   CREATED_DATE,
                   MODIFIED_BY,
                   MODIFIED_DATE,
                   VERSION_NO,
                   ACTION_FLAG)
      SELECT DOMAIN_MASTER_SID,
             DOMAIN_NAME,
             DOMAIN_DESCRIPTION,
             IS_ACTIVE,
             USERS_SID,
             PROCESSED,
             CREATED_BY,
             CREATED_DATE,
             MODIFIED_BY,
             MODIFIED_DATE,
             VERSION_NO,
             'C'
      FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_DOMAIN_MASTER_DEL')
  BEGIN
      DROP TRIGGER DBO.TRG_DOMAIN_MASTER_DEL
  END

GO

CREATE TRIGGER [DBO].[TRG_DOMAIN_MASTER_DEL]
ON [DBO].DOMAIN_MASTER
AFTER DELETE
AS
  BEGIN
      SET NOCOUNT ON
      INSERT INTO HIST_DOMAIN_MASTER
                  (DOMAIN_MASTER_SID,
                   DOMAIN_NAME,
                   DOMAIN_DESCRIPTION,
                   IS_ACTIVE,
                   USERS_SID,
                   PROCESSED,
                   CREATED_BY,
                   CREATED_DATE,
                   MODIFIED_BY,
                   MODIFIED_DATE,
                   VERSION_NO,
                   ACTION_FLAG)
      SELECT DOMAIN_MASTER_SID,
             DOMAIN_NAME,
             DOMAIN_DESCRIPTION,
             IS_ACTIVE,
             USERS_SID,
             PROCESSED,
             CREATED_BY,
             CREATED_DATE,
             MODIFIED_BY,
             MODIFIED_DATE,
             VERSION_NO,
             'D'
      FROM   DELETED
  END

GO

--------------------------------------DOMAIN_DETAILS-------------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'DOMAIN_DETAILS'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[DOMAIN_DETAILS]
        (
           [DOMAIN_DETAIL_SID] INT IDENTITY(1, 1) NOT NULL,
           [DOMAIN_MASTER_SID] INT NULL,
           [MARKET_ID]         INT NULL,
           [IS_ACTIVE]         CHAR(1) NULL,
           [USERS_SID]         INT NULL,
           [PROCESSED]         CHAR(1) NULL,
           [COMPANY_ID]        INT NULL,
           [DIVISION_ID]       INT NULL,
           [CREATED_BY]        INT NOT NULL,
           [CREATED_DATE]      DATETIME NOT NULL,
           [MODIFIED_BY]       INT NOT NULL,
           [MODIFIED_DATE]     DATETIME NOT NULL,
           [VERSION_NO]        INT NOT NULL
        )
  END

GO

IF NOT EXISTS(SELECT 'X'
              FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE  CONSTRAINT_NAME = 'PK_DOMAIN_DETAILS_DOMAIN_DETAIL_SID'
                     AND TABLE_NAME = 'DOMAIN_DETAILS')
BEGIN
  ALTER TABLE DOMAIN_DETAILS
    ADD CONSTRAINT PK_DOMAIN_DETAILS_DOMAIN_DETAIL_SID PRIMARY KEY(DOMAIN_DETAIL_SID)
END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DOMAIN_DETAILS')
                      AND NAME = 'DF_DOMAIN_DETAILS_CREATED_BY')
  BEGIN
      ALTER TABLE [DBO].[DOMAIN_DETAILS]
        ADD CONSTRAINT [DF_DOMAIN_DETAILS_CREATED_BY] DEFAULT (1) FOR CREATED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.DOMAIN_DETAILS')
                      AND NAME = 'DF_DOMAIN_DETAILS_CREATED_DATE')
  BEGIN
      ALTER TABLE [DBO].[DOMAIN_DETAILS]
        ADD CONSTRAINT [DF_DOMAIN_DETAILS_CREATED_DATE] DEFAULT (GETDATE()) FOR CREATED_DATE
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.DOMAIN_DETAILS')
                      AND NAME = 'DF_DOMAIN_DETAILS_MODIFIED_BY')
  BEGIN
      ALTER TABLE [DBO].[DOMAIN_DETAILS]
        ADD CONSTRAINT [DF_DOMAIN_DETAILS_MODIFIED_BY] DEFAULT (1) FOR MODIFIED_BY
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.DOMAIN_DETAILS')
                      AND NAME = 'DF_DOMAIN_DETAILS_MODIFIED_DATE')
  BEGIN
      ALTER TABLE [DBO].[DOMAIN_DETAILS]
        ADD CONSTRAINT [DF_DOMAIN_DETAILS_MODIFIED_DATE] DEFAULT (GETDATE()) FOR MODIFIED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'DOMAIN_DETAILS'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

-------------------------------------HIST_DOMAIN_DETAILS----------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'HIST_DOMAIN_DETAILS'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[HIST_DOMAIN_DETAILS]
        (
           [DOMAIN_DETAIL_SID] INT NOT NULL,
           [DOMAIN_MASTER_SID] INT NULL,
           [MARKET_ID]         INT NULL,
           [IS_ACTIVE]         CHAR(1) NULL,
           [USERS_SID]         INT NULL,
           [PROCESSED]         CHAR(1) NULL,
           [COMPANY_ID]        INT NULL,
           [DIVISION_ID]       INT NULL,
           [CREATED_BY]        INT NOT NULL,
           [CREATED_DATE]      DATETIME NOT NULL,
           [MODIFIED_BY]       INT NOT NULL,
           [MODIFIED_DATE]     DATETIME NOT NULL,
           [VERSION_NO]        INT NOT NULL,
           [ACTION_FLAG]       CHAR(1) NOT NULL,
           [ACTION_DATE]       DATETIME NOT NULL
        )
  END

GO

IF EXISTS(SELECT 'X'
          FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
          WHERE  CONSTRAINT_NAME = 'PK_HIST_DOMAIN_DETAILS_DOMAIN_DETAIL_SID_VERSION_NO'
                 AND TABLE_NAME = 'HIST_DOMAIN_DETAILS')
BEGIN
  ALTER TABLE [HIST_DOMAIN_DETAILS]
    DROP CONSTRAINT PK_HIST_DOMAIN_DETAILS_DOMAIN_DETAIL_SID_VERSION_NO
END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.HIST_DOMAIN_DETAILS')
                      AND NAME = 'DF_HIST_DOMAIN_DETAILS_ACTION_DATE')
  BEGIN
      ALTER TABLE [DBO].[HIST_DOMAIN_DETAILS]
        ADD CONSTRAINT [DF_HIST_DOMAIN_DETAILS_ACTION_DATE] DEFAULT (GETDATE()) FOR ACTION_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'HIST_DOMAIN_DETAILS'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

------------------------------------------DOMAIN_DETAILS TRIGGER--------------------------------------------
IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_DOMAIN_DETAILS_UPD')
  BEGIN
      DROP TRIGGER DBO.TRG_DOMAIN_DETAILS_UPD
  END

GO

CREATE TRIGGER [DBO].[TRG_DOMAIN_DETAILS_UPD]
ON [DBO].[DOMAIN_DETAILS]
AFTER UPDATE
AS
  BEGIN
      SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   INSERTED)
         AND EXISTS(SELECT *
                    FROM   DELETED)
        INSERT INTO HIST_DOMAIN_DETAILS
                    ([DOMAIN_DETAIL_SID],
                     [DOMAIN_MASTER_SID],
                     [MARKET_ID],
                     [IS_ACTIVE],
                     [USERS_SID],
                     [PROCESSED],
                     [COMPANY_ID],
                     [DIVISION_ID],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     ACTION_FLAG)
        SELECT [DOMAIN_DETAIL_SID],
               [DOMAIN_MASTER_SID],
               [MARKET_ID],
               [IS_ACTIVE],
               [USERS_SID],
               [PROCESSED],
               [COMPANY_ID],
               [DIVISION_ID],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'C'
        FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_DOMAIN_DETAILS_INS')
  BEGIN
      DROP TRIGGER DBO.TRG_DOMAIN_DETAILS_INS
  END

GO

CREATE TRIGGER [DBO].[TRG_DOMAIN_DETAILS_INS]
ON [DBO].[DOMAIN_DETAILS]
AFTER INSERT
AS
  BEGIN
      SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   INSERTED)
        INSERT INTO HIST_DOMAIN_DETAILS
                    ([DOMAIN_DETAIL_SID],
                     [DOMAIN_MASTER_SID],
                     [MARKET_ID],
                     [IS_ACTIVE],
                     [USERS_SID],
                     [PROCESSED],
                     [COMPANY_ID],
                     [DIVISION_ID],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     ACTION_FLAG)
        SELECT [DOMAIN_DETAIL_SID],
               [DOMAIN_MASTER_SID],
               [MARKET_ID],
               [IS_ACTIVE],
               [USERS_SID],
               [PROCESSED],
               [COMPANY_ID],
               [DIVISION_ID],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'A'
        FROM   INSERTED
  END

GO

IF EXISTS (SELECT 'X'
           FROM   SYS.TRIGGERS
           WHERE  [NAME] = N'TRG_DOMAIN_DETAILS_DEL')
  BEGIN
      DROP TRIGGER DBO.TRG_DOMAIN_DETAILS_DEL
  END

GO

CREATE TRIGGER [DBO].[TRG_DOMAIN_DETAILS_DEL]
ON [DBO].[DOMAIN_DETAILS]
AFTER DELETE
AS
  BEGIN
      SET NOCOUNT ON
      IF EXISTS(SELECT *
                FROM   DELETED)
        INSERT INTO HIST_DOMAIN_DETAILS
                    ([DOMAIN_DETAIL_SID],
                     [DOMAIN_MASTER_SID],
                     [MARKET_ID],
                     [IS_ACTIVE],
                     [USERS_SID],
                     [PROCESSED],
                     [COMPANY_ID],
                     [DIVISION_ID],
                     [CREATED_BY],
                     [CREATED_DATE],
                     [MODIFIED_BY],
                     [MODIFIED_DATE],
                     [VERSION_NO],
                     ACTION_FLAG)
        SELECT [DOMAIN_DETAIL_SID],
               [DOMAIN_MASTER_SID],
               [MARKET_ID],
               [IS_ACTIVE],
               [USERS_SID],
               [PROCESSED],
               [COMPANY_ID],
               [DIVISION_ID],
               [CREATED_BY],
               [CREATED_DATE],
               [MODIFIED_BY],
               [MODIFIED_DATE],
               [VERSION_NO],
               'D'
        FROM   DELETED
  END

GO


-----------------------------------TRANSACTION_MODULE_MASTER-----------------------------------

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'TRANSACTION_MODULE_MASTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[TRANSACTION_MODULE_MASTER]
        (
           TRANSACTION_MODULE_MASTER_SID  INT IDENTITY(1, 1) NOT NULL,
           MODULE_NAME VARCHAR(100),
           TABLE_NAME    VARCHAR(100),
		   TAB_NAME VARCHAR(100)
        )
  END

GO


IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'TRANSACTION_MODULE_MASTER'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'PK_TRANSACTION_MODULE_MASTER_TRANSACTION_MODULE_MASTER_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE [DBO].[TRANSACTION_MODULE_MASTER]
        ADD CONSTRAINT PK_TRANSACTION_MODULE_MASTER_TRANSACTION_MODULE_MASTER_SID PRIMARY KEY (TRANSACTION_MODULE_MASTER_SID)
  END

GO 

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'TRANSACTION_MODULE_MASTER'
                      AND COLUMN_NAME = 'TAB_NAME'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE TRANSACTION_MODULE_MASTER
        ADD TAB_NAME VARCHAR(100)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'TRANSACTION_MODULE_MASTER'
                      AND COLUMN_NAME = 'INVALID_TABLE_NAME'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE TRANSACTION_MODULE_MASTER
        ADD INVALID_TABLE_NAME VARCHAR(100)
  END

GO 


-----------------------------------TRANSACTION_MODULE_DETAILS-----------------------------------

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'TRANSACTION_MODULE_DETAILS'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[TRANSACTION_MODULE_DETAILS]
        (
           TRANSACTION_MODULE_DETAILS_SID   INT IDENTITY(1, 1) NOT NULL,
           TRANSACTION_MODULE_MASTER_SID    INT,
           PROPERTY_NAME					VARCHAR(100),
           CATEGORY_NAME					VARCHAR(100),
           DISPLAY_NAME						VARCHAR(100),
		   VALIDATION						VARCHAR(100),
		   PROPERTY_INDEX					NUMERIC(22,6)
        )
  END

GO

---------------------------- column rename
IF EXISTS (SELECT 1
           FROM   INFORMATION_SCHEMA.COLUMNS
           WHERE  COLUMN_NAME = 'INDEX'
                  AND TABLE_NAME = 'TRANSACTION_MODULE_DETAILS')
  BEGIN
      EXEC Sp_rename
        'TRANSACTION_MODULE_DETAILS.INDEX',
        'PROPERTY_INDEX',
        'COLUMN'
  END

GO 

---------------------------------------------- Column Addition

IF NOT EXISTS (SELECT 1
           FROM   INFORMATION_SCHEMA.COLUMNS
           WHERE  TABLE_NAME = 'TRANSACTION_MODULE_DETAILS'
                  AND COLUMN_NAME = 'PROPERTY_INDEX'
                  AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE TRANSACTION_MODULE_DETAILS
        ADD PROPERTY_INDEX NUMERIC(22,6)
  END

GO	

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'TRANSACTION_MODULE_DETAILS'
                      AND COLUMN_NAME = 'FLAG')
  BEGIN
      ALTER TABLE TRANSACTION_MODULE_DETAILS
        ADD FLAG CHAR(1)
  END 


GO


IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'TRANSACTION_MODULE_DETAILS'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'PK_TRANSACTION_MODULE_DETAILS_TRANSACTION_MODULE_DETAILS_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE [DBO].[TRANSACTION_MODULE_DETAILS]
        ADD CONSTRAINT PK_TRANSACTION_MODULE_DETAILS_TRANSACTION_MODULE_DETAILS_SID PRIMARY KEY (TRANSACTION_MODULE_DETAILS_SID)
  END

GO

