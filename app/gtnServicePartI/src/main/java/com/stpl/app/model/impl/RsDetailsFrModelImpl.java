package com.stpl.app.model.impl;

import com.stpl.app.model.RsDetailsFr;
import com.stpl.app.model.RsDetailsFrModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RsDetailsFr service. Represents a row in the &quot;RS_DETAILS_FR&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.RsDetailsFrModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RsDetailsFrImpl}.
 * </p>
 *
 * @author
 * @see RsDetailsFrImpl
 * @see com.stpl.app.model.RsDetailsFr
 * @see com.stpl.app.model.RsDetailsFrModel
 * @generated
 */
public class RsDetailsFrModelImpl extends BaseModelImpl<RsDetailsFr>
    implements RsDetailsFrModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a rs details fr model instance should use the {@link com.stpl.app.model.RsDetailsFr} interface instead.
     */
    public static final String TABLE_NAME = "RS_DETAILS_FR";
    public static final Object[][] TABLE_COLUMNS = {
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "CREATED_BY", Types.INTEGER },
            { "SOURCE", Types.VARCHAR },
            { "FORMULA_METHOD_ID", Types.VARCHAR },
            { "BATCH_ID", Types.VARCHAR },
            { "MODIFIED_BY", Types.INTEGER },
            { "INBOUND_STATUS", Types.VARCHAR },
            { "FORMULA_ID", Types.INTEGER },
            { "ITEM_MASTER_SID", Types.INTEGER },
            { "RS_DETAILS_SID", Types.INTEGER },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "RS_DETAILS_FR_SID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table RS_DETAILS_FR (RECORD_LOCK_STATUS BOOLEAN,CREATED_DATE DATE null,CREATED_BY INTEGER,SOURCE VARCHAR(75) null,FORMULA_METHOD_ID VARCHAR(75) null,BATCH_ID VARCHAR(75) null,MODIFIED_BY INTEGER,INBOUND_STATUS VARCHAR(75) null,FORMULA_ID INTEGER,ITEM_MASTER_SID INTEGER,RS_DETAILS_SID INTEGER,MODIFIED_DATE DATE null,RS_DETAILS_FR_SID INTEGER not null primary key IDENTITY)";
    public static final String TABLE_SQL_DROP = "drop table RS_DETAILS_FR";
    public static final String ORDER_BY_JPQL = " ORDER BY rsDetailsFr.rsDetailsFrSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY RS_DETAILS_FR.RS_DETAILS_FR_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.RsDetailsFr"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.RsDetailsFr"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.RsDetailsFr"));
    private static ClassLoader _classLoader = RsDetailsFr.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            RsDetailsFr.class
        };
    private boolean _recordLockStatus;
    private Date _createdDate;
    private int _createdBy;
    private String _source;
    private String _formulaMethodId;
    private String _batchId;
    private int _modifiedBy;
    private String _inboundStatus;
    private int _formulaId;
    private int _itemMasterSid;
    private int _rsDetailsSid;
    private Date _modifiedDate;
    private int _rsDetailsFrSid;
    private RsDetailsFr _escapedModel;

    public RsDetailsFrModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _rsDetailsFrSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setRsDetailsFrSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _rsDetailsFrSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return RsDetailsFr.class;
    }

    @Override
    public String getModelClassName() {
        return RsDetailsFr.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("source", getSource());
        attributes.put("formulaMethodId", getFormulaMethodId());
        attributes.put("batchId", getBatchId());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("inboundStatus", getInboundStatus());
        attributes.put("formulaId", getFormulaId());
        attributes.put("itemMasterSid", getItemMasterSid());
        attributes.put("rsDetailsSid", getRsDetailsSid());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("rsDetailsFrSid", getRsDetailsFrSid());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String formulaMethodId = (String) attributes.get("formulaMethodId");

        if (formulaMethodId != null) {
            setFormulaMethodId(formulaMethodId);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }

        Integer formulaId = (Integer) attributes.get("formulaId");

        if (formulaId != null) {
            setFormulaId(formulaId);
        }

        Integer itemMasterSid = (Integer) attributes.get("itemMasterSid");

        if (itemMasterSid != null) {
            setItemMasterSid(itemMasterSid);
        }

        Integer rsDetailsSid = (Integer) attributes.get("rsDetailsSid");

        if (rsDetailsSid != null) {
            setRsDetailsSid(rsDetailsSid);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer rsDetailsFrSid = (Integer) attributes.get("rsDetailsFrSid");

        if (rsDetailsFrSid != null) {
            setRsDetailsFrSid(rsDetailsFrSid);
        }
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getFormulaMethodId() {
        if (_formulaMethodId == null) {
            return StringPool.BLANK;
        } else {
            return _formulaMethodId;
        }
    }

    @Override
    public void setFormulaMethodId(String formulaMethodId) {
        _formulaMethodId = formulaMethodId;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    @Override
    public int getFormulaId() {
        return _formulaId;
    }

    @Override
    public void setFormulaId(int formulaId) {
        _formulaId = formulaId;
    }

    @Override
    public int getItemMasterSid() {
        return _itemMasterSid;
    }

    @Override
    public void setItemMasterSid(int itemMasterSid) {
        _itemMasterSid = itemMasterSid;
    }

    @Override
    public int getRsDetailsSid() {
        return _rsDetailsSid;
    }

    @Override
    public void setRsDetailsSid(int rsDetailsSid) {
        _rsDetailsSid = rsDetailsSid;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public int getRsDetailsFrSid() {
        return _rsDetailsFrSid;
    }

    @Override
    public void setRsDetailsFrSid(int rsDetailsFrSid) {
        _rsDetailsFrSid = rsDetailsFrSid;
    }

    @Override
    public RsDetailsFr toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (RsDetailsFr) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        RsDetailsFrImpl rsDetailsFrImpl = new RsDetailsFrImpl();

        rsDetailsFrImpl.setRecordLockStatus(getRecordLockStatus());
        rsDetailsFrImpl.setCreatedDate(getCreatedDate());
        rsDetailsFrImpl.setCreatedBy(getCreatedBy());
        rsDetailsFrImpl.setSource(getSource());
        rsDetailsFrImpl.setFormulaMethodId(getFormulaMethodId());
        rsDetailsFrImpl.setBatchId(getBatchId());
        rsDetailsFrImpl.setModifiedBy(getModifiedBy());
        rsDetailsFrImpl.setInboundStatus(getInboundStatus());
        rsDetailsFrImpl.setFormulaId(getFormulaId());
        rsDetailsFrImpl.setItemMasterSid(getItemMasterSid());
        rsDetailsFrImpl.setRsDetailsSid(getRsDetailsSid());
        rsDetailsFrImpl.setModifiedDate(getModifiedDate());
        rsDetailsFrImpl.setRsDetailsFrSid(getRsDetailsFrSid());

        rsDetailsFrImpl.resetOriginalValues();

        return rsDetailsFrImpl;
    }

    @Override
    public int compareTo(RsDetailsFr rsDetailsFr) {
        int primaryKey = rsDetailsFr.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof RsDetailsFr)) {
            return false;
        }

        RsDetailsFr rsDetailsFr = (RsDetailsFr) obj;

        int primaryKey = rsDetailsFr.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<RsDetailsFr> toCacheModel() {
        RsDetailsFrCacheModel rsDetailsFrCacheModel = new RsDetailsFrCacheModel();

        rsDetailsFrCacheModel.recordLockStatus = getRecordLockStatus();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            rsDetailsFrCacheModel.createdDate = createdDate.getTime();
        } else {
            rsDetailsFrCacheModel.createdDate = Long.MIN_VALUE;
        }

        rsDetailsFrCacheModel.createdBy = getCreatedBy();

        rsDetailsFrCacheModel.source = getSource();

        String source = rsDetailsFrCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            rsDetailsFrCacheModel.source = null;
        }

        rsDetailsFrCacheModel.formulaMethodId = getFormulaMethodId();

        String formulaMethodId = rsDetailsFrCacheModel.formulaMethodId;

        if ((formulaMethodId != null) && (formulaMethodId.length() == 0)) {
            rsDetailsFrCacheModel.formulaMethodId = null;
        }

        rsDetailsFrCacheModel.batchId = getBatchId();

        String batchId = rsDetailsFrCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            rsDetailsFrCacheModel.batchId = null;
        }

        rsDetailsFrCacheModel.modifiedBy = getModifiedBy();

        rsDetailsFrCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = rsDetailsFrCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            rsDetailsFrCacheModel.inboundStatus = null;
        }

        rsDetailsFrCacheModel.formulaId = getFormulaId();

        rsDetailsFrCacheModel.itemMasterSid = getItemMasterSid();

        rsDetailsFrCacheModel.rsDetailsSid = getRsDetailsSid();

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            rsDetailsFrCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            rsDetailsFrCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        rsDetailsFrCacheModel.rsDetailsFrSid = getRsDetailsFrSid();

        return rsDetailsFrCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", formulaMethodId=");
        sb.append(getFormulaMethodId());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append(", formulaId=");
        sb.append(getFormulaId());
        sb.append(", itemMasterSid=");
        sb.append(getItemMasterSid());
        sb.append(", rsDetailsSid=");
        sb.append(getRsDetailsSid());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", rsDetailsFrSid=");
        sb.append(getRsDetailsFrSid());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.RsDetailsFr");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>formulaMethodId</column-name><column-value><![CDATA[");
        sb.append(getFormulaMethodId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>formulaId</column-name><column-value><![CDATA[");
        sb.append(getFormulaId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
        sb.append(getItemMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rsDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getRsDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rsDetailsFrSid</column-name><column-value><![CDATA[");
        sb.append(getRsDetailsFrSid());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
