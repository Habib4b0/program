package com.stpl.app.model.impl;

import com.stpl.app.model.AuditMasterInbound;
import com.stpl.app.model.AuditMasterInboundModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AuditMasterInbound service. Represents a row in the &quot;AUDIT_MASTER_INBOUND&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.AuditMasterInboundModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AuditMasterInboundImpl}.
 * </p>
 *
 * @author
 * @see AuditMasterInboundImpl
 * @see com.stpl.app.model.AuditMasterInbound
 * @see com.stpl.app.model.AuditMasterInboundModel
 * @generated
 */
public class AuditMasterInboundModelImpl extends BaseModelImpl<AuditMasterInbound>
    implements AuditMasterInboundModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a audit master inbound model instance should use the {@link com.stpl.app.model.AuditMasterInbound} interface instead.
     */
    public static final String TABLE_NAME = "AUDIT_MASTER_INBOUND";
    public static final Object[][] TABLE_COLUMNS = {
            { "RECEIVED_RECORD_AMOUNT_ATTR", Types.VARCHAR },
            { "MODIFIED_BY", Types.INTEGER },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "INTERFACE_RUN_END_DATE", Types.TIMESTAMP },
            { "APPLICATION_PROCESS", Types.VARCHAR },
            { "DISCREPANCY_AMOUNT", Types.DOUBLE },
            { "BATCH_ID", Types.VARCHAR },
            { "FILE_NAME", Types.VARCHAR },
            { "SENT_RECORD_AMOUNT_ATTRIBUTE", Types.VARCHAR },
            { "STATUS", Types.VARCHAR },
            { "RECEIVED_RECORD_AMOUNT", Types.DOUBLE },
            { "VALID_RECORD_AMOUNT", Types.DOUBLE },
            { "INVALID_RECORD_COUNT", Types.INTEGER },
            { "RECEIVED_RECORD_COUNT", Types.INTEGER },
            { "CREATED_BY", Types.INTEGER },
            { "CHANGE_COUNT", Types.INTEGER },
            { "UNPROCESSED_RECORDS", Types.VARCHAR },
            { "DELETE_COUNT", Types.INTEGER },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "AUDIT_INBOUND_SID", Types.INTEGER },
            { "SENT_RECORD_AMOUNT", Types.DOUBLE },
            { "SENT_RECORD_COUNT", Types.INTEGER },
            { "ADD_COUNT", Types.INTEGER },
            { "SOURCE", Types.VARCHAR },
            { "INVALID_RECORD_AMOUNT", Types.DOUBLE },
            { "INTERFACE_RUN_START_DATE", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table AUDIT_MASTER_INBOUND (RECEIVED_RECORD_AMOUNT_ATTR VARCHAR(75) null,MODIFIED_BY INTEGER,CREATED_DATE DATE null,INTERFACE_RUN_END_DATE DATE null,APPLICATION_PROCESS VARCHAR(75) null,DISCREPANCY_AMOUNT DOUBLE,BATCH_ID VARCHAR(75) null,FILE_NAME VARCHAR(75) null,SENT_RECORD_AMOUNT_ATTRIBUTE VARCHAR(75) null,STATUS VARCHAR(75) null,RECEIVED_RECORD_AMOUNT DOUBLE,VALID_RECORD_AMOUNT DOUBLE,INVALID_RECORD_COUNT INTEGER,RECEIVED_RECORD_COUNT INTEGER,CREATED_BY INTEGER,CHANGE_COUNT INTEGER,UNPROCESSED_RECORDS VARCHAR(75) null,DELETE_COUNT INTEGER,MODIFIED_DATE DATE null,AUDIT_INBOUND_SID INTEGER not null primary key IDENTITY,SENT_RECORD_AMOUNT DOUBLE,SENT_RECORD_COUNT INTEGER,ADD_COUNT INTEGER,SOURCE VARCHAR(75) null,INVALID_RECORD_AMOUNT DOUBLE,INTERFACE_RUN_START_DATE DATE null)";
    public static final String TABLE_SQL_DROP = "drop table AUDIT_MASTER_INBOUND";
    public static final String ORDER_BY_JPQL = " ORDER BY auditMasterInbound.auditInboundSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY AUDIT_MASTER_INBOUND.AUDIT_INBOUND_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.AuditMasterInbound"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.AuditMasterInbound"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.AuditMasterInbound"));
    private static ClassLoader _classLoader = AuditMasterInbound.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            AuditMasterInbound.class
        };
    private String _receivedRecordAmountAttr;
    private int _modifiedBy;
    private Date _createdDate;
    private Date _interfaceRunEndDate;
    private String _applicationProcess;
    private double _discrepancyAmount;
    private String _batchId;
    private String _fileName;
    private String _sentRecordAmountAttribute;
    private String _status;
    private double _receivedRecordAmount;
    private double _validRecordAmount;
    private int _invalidRecordCount;
    private int _receivedRecordCount;
    private int _createdBy;
    private int _changeCount;
    private String _unprocessedRecords;
    private int _deleteCount;
    private Date _modifiedDate;
    private int _auditInboundSid;
    private double _sentRecordAmount;
    private int _sentRecordCount;
    private int _addCount;
    private String _source;
    private double _invalidRecordAmount;
    private Date _interfaceRunStartDate;
    private AuditMasterInbound _escapedModel;

    public AuditMasterInboundModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _auditInboundSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setAuditInboundSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _auditInboundSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return AuditMasterInbound.class;
    }

    @Override
    public String getModelClassName() {
        return AuditMasterInbound.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("receivedRecordAmountAttr", getReceivedRecordAmountAttr());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("interfaceRunEndDate", getInterfaceRunEndDate());
        attributes.put("applicationProcess", getApplicationProcess());
        attributes.put("discrepancyAmount", getDiscrepancyAmount());
        attributes.put("batchId", getBatchId());
        attributes.put("fileName", getFileName());
        attributes.put("sentRecordAmountAttribute",
            getSentRecordAmountAttribute());
        attributes.put("status", getStatus());
        attributes.put("receivedRecordAmount", getReceivedRecordAmount());
        attributes.put("validRecordAmount", getValidRecordAmount());
        attributes.put("invalidRecordCount", getInvalidRecordCount());
        attributes.put("receivedRecordCount", getReceivedRecordCount());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("changeCount", getChangeCount());
        attributes.put("unprocessedRecords", getUnprocessedRecords());
        attributes.put("deleteCount", getDeleteCount());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("auditInboundSid", getAuditInboundSid());
        attributes.put("sentRecordAmount", getSentRecordAmount());
        attributes.put("sentRecordCount", getSentRecordCount());
        attributes.put("addCount", getAddCount());
        attributes.put("source", getSource());
        attributes.put("invalidRecordAmount", getInvalidRecordAmount());
        attributes.put("interfaceRunStartDate", getInterfaceRunStartDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String receivedRecordAmountAttr = (String) attributes.get(
                "receivedRecordAmountAttr");

        if (receivedRecordAmountAttr != null) {
            setReceivedRecordAmountAttr(receivedRecordAmountAttr);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Date interfaceRunEndDate = (Date) attributes.get("interfaceRunEndDate");

        if (interfaceRunEndDate != null) {
            setInterfaceRunEndDate(interfaceRunEndDate);
        }

        String applicationProcess = (String) attributes.get(
                "applicationProcess");

        if (applicationProcess != null) {
            setApplicationProcess(applicationProcess);
        }

        Double discrepancyAmount = (Double) attributes.get("discrepancyAmount");

        if (discrepancyAmount != null) {
            setDiscrepancyAmount(discrepancyAmount);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        String fileName = (String) attributes.get("fileName");

        if (fileName != null) {
            setFileName(fileName);
        }

        String sentRecordAmountAttribute = (String) attributes.get(
                "sentRecordAmountAttribute");

        if (sentRecordAmountAttribute != null) {
            setSentRecordAmountAttribute(sentRecordAmountAttribute);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Double receivedRecordAmount = (Double) attributes.get(
                "receivedRecordAmount");

        if (receivedRecordAmount != null) {
            setReceivedRecordAmount(receivedRecordAmount);
        }

        Double validRecordAmount = (Double) attributes.get("validRecordAmount");

        if (validRecordAmount != null) {
            setValidRecordAmount(validRecordAmount);
        }

        Integer invalidRecordCount = (Integer) attributes.get(
                "invalidRecordCount");

        if (invalidRecordCount != null) {
            setInvalidRecordCount(invalidRecordCount);
        }

        Integer receivedRecordCount = (Integer) attributes.get(
                "receivedRecordCount");

        if (receivedRecordCount != null) {
            setReceivedRecordCount(receivedRecordCount);
        }

        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Integer changeCount = (Integer) attributes.get("changeCount");

        if (changeCount != null) {
            setChangeCount(changeCount);
        }

        String unprocessedRecords = (String) attributes.get(
                "unprocessedRecords");

        if (unprocessedRecords != null) {
            setUnprocessedRecords(unprocessedRecords);
        }

        Integer deleteCount = (Integer) attributes.get("deleteCount");

        if (deleteCount != null) {
            setDeleteCount(deleteCount);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer auditInboundSid = (Integer) attributes.get("auditInboundSid");

        if (auditInboundSid != null) {
            setAuditInboundSid(auditInboundSid);
        }

        Double sentRecordAmount = (Double) attributes.get("sentRecordAmount");

        if (sentRecordAmount != null) {
            setSentRecordAmount(sentRecordAmount);
        }

        Integer sentRecordCount = (Integer) attributes.get("sentRecordCount");

        if (sentRecordCount != null) {
            setSentRecordCount(sentRecordCount);
        }

        Integer addCount = (Integer) attributes.get("addCount");

        if (addCount != null) {
            setAddCount(addCount);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        Double invalidRecordAmount = (Double) attributes.get(
                "invalidRecordAmount");

        if (invalidRecordAmount != null) {
            setInvalidRecordAmount(invalidRecordAmount);
        }

        Date interfaceRunStartDate = (Date) attributes.get(
                "interfaceRunStartDate");

        if (interfaceRunStartDate != null) {
            setInterfaceRunStartDate(interfaceRunStartDate);
        }
    }

    @Override
    public String getReceivedRecordAmountAttr() {
        if (_receivedRecordAmountAttr == null) {
            return StringPool.BLANK;
        } else {
            return _receivedRecordAmountAttr;
        }
    }

    @Override
    public void setReceivedRecordAmountAttr(String receivedRecordAmountAttr) {
        _receivedRecordAmountAttr = receivedRecordAmountAttr;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public Date getInterfaceRunEndDate() {
        return _interfaceRunEndDate;
    }

    @Override
    public void setInterfaceRunEndDate(Date interfaceRunEndDate) {
        _interfaceRunEndDate = interfaceRunEndDate;
    }

    @Override
    public String getApplicationProcess() {
        if (_applicationProcess == null) {
            return StringPool.BLANK;
        } else {
            return _applicationProcess;
        }
    }

    @Override
    public void setApplicationProcess(String applicationProcess) {
        _applicationProcess = applicationProcess;
    }

    @Override
    public double getDiscrepancyAmount() {
        return _discrepancyAmount;
    }

    @Override
    public void setDiscrepancyAmount(double discrepancyAmount) {
        _discrepancyAmount = discrepancyAmount;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public String getFileName() {
        if (_fileName == null) {
            return StringPool.BLANK;
        } else {
            return _fileName;
        }
    }

    @Override
    public void setFileName(String fileName) {
        _fileName = fileName;
    }

    @Override
    public String getSentRecordAmountAttribute() {
        if (_sentRecordAmountAttribute == null) {
            return StringPool.BLANK;
        } else {
            return _sentRecordAmountAttribute;
        }
    }

    @Override
    public void setSentRecordAmountAttribute(String sentRecordAmountAttribute) {
        _sentRecordAmountAttribute = sentRecordAmountAttribute;
    }

    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _status = status;
    }

    @Override
    public double getReceivedRecordAmount() {
        return _receivedRecordAmount;
    }

    @Override
    public void setReceivedRecordAmount(double receivedRecordAmount) {
        _receivedRecordAmount = receivedRecordAmount;
    }

    @Override
    public double getValidRecordAmount() {
        return _validRecordAmount;
    }

    @Override
    public void setValidRecordAmount(double validRecordAmount) {
        _validRecordAmount = validRecordAmount;
    }

    @Override
    public int getInvalidRecordCount() {
        return _invalidRecordCount;
    }

    @Override
    public void setInvalidRecordCount(int invalidRecordCount) {
        _invalidRecordCount = invalidRecordCount;
    }

    @Override
    public int getReceivedRecordCount() {
        return _receivedRecordCount;
    }

    @Override
    public void setReceivedRecordCount(int receivedRecordCount) {
        _receivedRecordCount = receivedRecordCount;
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public int getChangeCount() {
        return _changeCount;
    }

    @Override
    public void setChangeCount(int changeCount) {
        _changeCount = changeCount;
    }

    @Override
    public String getUnprocessedRecords() {
        if (_unprocessedRecords == null) {
            return StringPool.BLANK;
        } else {
            return _unprocessedRecords;
        }
    }

    @Override
    public void setUnprocessedRecords(String unprocessedRecords) {
        _unprocessedRecords = unprocessedRecords;
    }

    @Override
    public int getDeleteCount() {
        return _deleteCount;
    }

    @Override
    public void setDeleteCount(int deleteCount) {
        _deleteCount = deleteCount;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public int getAuditInboundSid() {
        return _auditInboundSid;
    }

    @Override
    public void setAuditInboundSid(int auditInboundSid) {
        _auditInboundSid = auditInboundSid;
    }

    @Override
    public double getSentRecordAmount() {
        return _sentRecordAmount;
    }

    @Override
    public void setSentRecordAmount(double sentRecordAmount) {
        _sentRecordAmount = sentRecordAmount;
    }

    @Override
    public int getSentRecordCount() {
        return _sentRecordCount;
    }

    @Override
    public void setSentRecordCount(int sentRecordCount) {
        _sentRecordCount = sentRecordCount;
    }

    @Override
    public int getAddCount() {
        return _addCount;
    }

    @Override
    public void setAddCount(int addCount) {
        _addCount = addCount;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public double getInvalidRecordAmount() {
        return _invalidRecordAmount;
    }

    @Override
    public void setInvalidRecordAmount(double invalidRecordAmount) {
        _invalidRecordAmount = invalidRecordAmount;
    }

    @Override
    public Date getInterfaceRunStartDate() {
        return _interfaceRunStartDate;
    }

    @Override
    public void setInterfaceRunStartDate(Date interfaceRunStartDate) {
        _interfaceRunStartDate = interfaceRunStartDate;
    }

    @Override
    public AuditMasterInbound toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (AuditMasterInbound) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AuditMasterInboundImpl auditMasterInboundImpl = new AuditMasterInboundImpl();

        auditMasterInboundImpl.setReceivedRecordAmountAttr(getReceivedRecordAmountAttr());
        auditMasterInboundImpl.setModifiedBy(getModifiedBy());
        auditMasterInboundImpl.setCreatedDate(getCreatedDate());
        auditMasterInboundImpl.setInterfaceRunEndDate(getInterfaceRunEndDate());
        auditMasterInboundImpl.setApplicationProcess(getApplicationProcess());
        auditMasterInboundImpl.setDiscrepancyAmount(getDiscrepancyAmount());
        auditMasterInboundImpl.setBatchId(getBatchId());
        auditMasterInboundImpl.setFileName(getFileName());
        auditMasterInboundImpl.setSentRecordAmountAttribute(getSentRecordAmountAttribute());
        auditMasterInboundImpl.setStatus(getStatus());
        auditMasterInboundImpl.setReceivedRecordAmount(getReceivedRecordAmount());
        auditMasterInboundImpl.setValidRecordAmount(getValidRecordAmount());
        auditMasterInboundImpl.setInvalidRecordCount(getInvalidRecordCount());
        auditMasterInboundImpl.setReceivedRecordCount(getReceivedRecordCount());
        auditMasterInboundImpl.setCreatedBy(getCreatedBy());
        auditMasterInboundImpl.setChangeCount(getChangeCount());
        auditMasterInboundImpl.setUnprocessedRecords(getUnprocessedRecords());
        auditMasterInboundImpl.setDeleteCount(getDeleteCount());
        auditMasterInboundImpl.setModifiedDate(getModifiedDate());
        auditMasterInboundImpl.setAuditInboundSid(getAuditInboundSid());
        auditMasterInboundImpl.setSentRecordAmount(getSentRecordAmount());
        auditMasterInboundImpl.setSentRecordCount(getSentRecordCount());
        auditMasterInboundImpl.setAddCount(getAddCount());
        auditMasterInboundImpl.setSource(getSource());
        auditMasterInboundImpl.setInvalidRecordAmount(getInvalidRecordAmount());
        auditMasterInboundImpl.setInterfaceRunStartDate(getInterfaceRunStartDate());

        auditMasterInboundImpl.resetOriginalValues();

        return auditMasterInboundImpl;
    }

    @Override
    public int compareTo(AuditMasterInbound auditMasterInbound) {
        int primaryKey = auditMasterInbound.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AuditMasterInbound)) {
            return false;
        }

        AuditMasterInbound auditMasterInbound = (AuditMasterInbound) obj;

        int primaryKey = auditMasterInbound.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<AuditMasterInbound> toCacheModel() {
        AuditMasterInboundCacheModel auditMasterInboundCacheModel = new AuditMasterInboundCacheModel();

        auditMasterInboundCacheModel.receivedRecordAmountAttr = getReceivedRecordAmountAttr();

        String receivedRecordAmountAttr = auditMasterInboundCacheModel.receivedRecordAmountAttr;

        if ((receivedRecordAmountAttr != null) &&
                (receivedRecordAmountAttr.length() == 0)) {
            auditMasterInboundCacheModel.receivedRecordAmountAttr = null;
        }

        auditMasterInboundCacheModel.modifiedBy = getModifiedBy();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            auditMasterInboundCacheModel.createdDate = createdDate.getTime();
        } else {
            auditMasterInboundCacheModel.createdDate = Long.MIN_VALUE;
        }

        Date interfaceRunEndDate = getInterfaceRunEndDate();

        if (interfaceRunEndDate != null) {
            auditMasterInboundCacheModel.interfaceRunEndDate = interfaceRunEndDate.getTime();
        } else {
            auditMasterInboundCacheModel.interfaceRunEndDate = Long.MIN_VALUE;
        }

        auditMasterInboundCacheModel.applicationProcess = getApplicationProcess();

        String applicationProcess = auditMasterInboundCacheModel.applicationProcess;

        if ((applicationProcess != null) && (applicationProcess.length() == 0)) {
            auditMasterInboundCacheModel.applicationProcess = null;
        }

        auditMasterInboundCacheModel.discrepancyAmount = getDiscrepancyAmount();

        auditMasterInboundCacheModel.batchId = getBatchId();

        String batchId = auditMasterInboundCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            auditMasterInboundCacheModel.batchId = null;
        }

        auditMasterInboundCacheModel.fileName = getFileName();

        String fileName = auditMasterInboundCacheModel.fileName;

        if ((fileName != null) && (fileName.length() == 0)) {
            auditMasterInboundCacheModel.fileName = null;
        }

        auditMasterInboundCacheModel.sentRecordAmountAttribute = getSentRecordAmountAttribute();

        String sentRecordAmountAttribute = auditMasterInboundCacheModel.sentRecordAmountAttribute;

        if ((sentRecordAmountAttribute != null) &&
                (sentRecordAmountAttribute.length() == 0)) {
            auditMasterInboundCacheModel.sentRecordAmountAttribute = null;
        }

        auditMasterInboundCacheModel.status = getStatus();

        String status = auditMasterInboundCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            auditMasterInboundCacheModel.status = null;
        }

        auditMasterInboundCacheModel.receivedRecordAmount = getReceivedRecordAmount();

        auditMasterInboundCacheModel.validRecordAmount = getValidRecordAmount();

        auditMasterInboundCacheModel.invalidRecordCount = getInvalidRecordCount();

        auditMasterInboundCacheModel.receivedRecordCount = getReceivedRecordCount();

        auditMasterInboundCacheModel.createdBy = getCreatedBy();

        auditMasterInboundCacheModel.changeCount = getChangeCount();

        auditMasterInboundCacheModel.unprocessedRecords = getUnprocessedRecords();

        String unprocessedRecords = auditMasterInboundCacheModel.unprocessedRecords;

        if ((unprocessedRecords != null) && (unprocessedRecords.length() == 0)) {
            auditMasterInboundCacheModel.unprocessedRecords = null;
        }

        auditMasterInboundCacheModel.deleteCount = getDeleteCount();

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            auditMasterInboundCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            auditMasterInboundCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        auditMasterInboundCacheModel.auditInboundSid = getAuditInboundSid();

        auditMasterInboundCacheModel.sentRecordAmount = getSentRecordAmount();

        auditMasterInboundCacheModel.sentRecordCount = getSentRecordCount();

        auditMasterInboundCacheModel.addCount = getAddCount();

        auditMasterInboundCacheModel.source = getSource();

        String source = auditMasterInboundCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            auditMasterInboundCacheModel.source = null;
        }

        auditMasterInboundCacheModel.invalidRecordAmount = getInvalidRecordAmount();

        Date interfaceRunStartDate = getInterfaceRunStartDate();

        if (interfaceRunStartDate != null) {
            auditMasterInboundCacheModel.interfaceRunStartDate = interfaceRunStartDate.getTime();
        } else {
            auditMasterInboundCacheModel.interfaceRunStartDate = Long.MIN_VALUE;
        }

        return auditMasterInboundCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(53);

        sb.append("{receivedRecordAmountAttr=");
        sb.append(getReceivedRecordAmountAttr());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", interfaceRunEndDate=");
        sb.append(getInterfaceRunEndDate());
        sb.append(", applicationProcess=");
        sb.append(getApplicationProcess());
        sb.append(", discrepancyAmount=");
        sb.append(getDiscrepancyAmount());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", fileName=");
        sb.append(getFileName());
        sb.append(", sentRecordAmountAttribute=");
        sb.append(getSentRecordAmountAttribute());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", receivedRecordAmount=");
        sb.append(getReceivedRecordAmount());
        sb.append(", validRecordAmount=");
        sb.append(getValidRecordAmount());
        sb.append(", invalidRecordCount=");
        sb.append(getInvalidRecordCount());
        sb.append(", receivedRecordCount=");
        sb.append(getReceivedRecordCount());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", changeCount=");
        sb.append(getChangeCount());
        sb.append(", unprocessedRecords=");
        sb.append(getUnprocessedRecords());
        sb.append(", deleteCount=");
        sb.append(getDeleteCount());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", auditInboundSid=");
        sb.append(getAuditInboundSid());
        sb.append(", sentRecordAmount=");
        sb.append(getSentRecordAmount());
        sb.append(", sentRecordCount=");
        sb.append(getSentRecordCount());
        sb.append(", addCount=");
        sb.append(getAddCount());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", invalidRecordAmount=");
        sb.append(getInvalidRecordAmount());
        sb.append(", interfaceRunStartDate=");
        sb.append(getInterfaceRunStartDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(82);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.AuditMasterInbound");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>receivedRecordAmountAttr</column-name><column-value><![CDATA[");
        sb.append(getReceivedRecordAmountAttr());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>interfaceRunEndDate</column-name><column-value><![CDATA[");
        sb.append(getInterfaceRunEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>applicationProcess</column-name><column-value><![CDATA[");
        sb.append(getApplicationProcess());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discrepancyAmount</column-name><column-value><![CDATA[");
        sb.append(getDiscrepancyAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fileName</column-name><column-value><![CDATA[");
        sb.append(getFileName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sentRecordAmountAttribute</column-name><column-value><![CDATA[");
        sb.append(getSentRecordAmountAttribute());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>receivedRecordAmount</column-name><column-value><![CDATA[");
        sb.append(getReceivedRecordAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>validRecordAmount</column-name><column-value><![CDATA[");
        sb.append(getValidRecordAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>invalidRecordCount</column-name><column-value><![CDATA[");
        sb.append(getInvalidRecordCount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>receivedRecordCount</column-name><column-value><![CDATA[");
        sb.append(getReceivedRecordCount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>changeCount</column-name><column-value><![CDATA[");
        sb.append(getChangeCount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>unprocessedRecords</column-name><column-value><![CDATA[");
        sb.append(getUnprocessedRecords());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>deleteCount</column-name><column-value><![CDATA[");
        sb.append(getDeleteCount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>auditInboundSid</column-name><column-value><![CDATA[");
        sb.append(getAuditInboundSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sentRecordAmount</column-name><column-value><![CDATA[");
        sb.append(getSentRecordAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sentRecordCount</column-name><column-value><![CDATA[");
        sb.append(getSentRecordCount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>addCount</column-name><column-value><![CDATA[");
        sb.append(getAddCount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>invalidRecordAmount</column-name><column-value><![CDATA[");
        sb.append(getInvalidRecordAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>interfaceRunStartDate</column-name><column-value><![CDATA[");
        sb.append(getInterfaceRunStartDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
