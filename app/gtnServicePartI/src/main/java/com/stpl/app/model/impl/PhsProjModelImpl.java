package com.stpl.app.model.impl;

import com.stpl.app.model.PhsProj;
import com.stpl.app.model.PhsProjModel;
import com.stpl.app.service.persistence.PhsProjPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PhsProj service. Represents a row in the &quot;PHS_PROJ&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.PhsProjModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PhsProjImpl}.
 * </p>
 *
 * @author
 * @see PhsProjImpl
 * @see com.stpl.app.model.PhsProj
 * @see com.stpl.app.model.PhsProjModel
 * @generated
 */
public class PhsProjModelImpl extends BaseModelImpl<PhsProj>
    implements PhsProjModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a phs proj model instance should use the {@link com.stpl.app.model.PhsProj} interface instead.
     */
    public static final String TABLE_NAME = "PHS_PROJ";
    public static final Object[][] TABLE_COLUMNS = {
            { "ADJUSTMENT", Types.DOUBLE },
            { "PERIOD_SID", Types.INTEGER },
            { "PRICE_TYPE", Types.VARCHAR },
            { "PROJECTION_PRICE", Types.DOUBLE },
            { "NOTES", Types.VARCHAR },
            { "NA_PROJ_DETAILS_SID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table PHS_PROJ (ADJUSTMENT DOUBLE,PERIOD_SID INTEGER not null IDENTITY,PRICE_TYPE VARCHAR(75) not null IDENTITY,PROJECTION_PRICE DOUBLE,NOTES VARCHAR(75) null,NA_PROJ_DETAILS_SID INTEGER not null IDENTITY,primary key (PERIOD_SID, PRICE_TYPE, NA_PROJ_DETAILS_SID))";
    public static final String TABLE_SQL_DROP = "drop table PHS_PROJ";
    public static final String ORDER_BY_JPQL = " ORDER BY phsProj.id.periodSid ASC, phsProj.id.priceType ASC, phsProj.id.naProjDetailsSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY PHS_PROJ.PERIOD_SID ASC, PHS_PROJ.PRICE_TYPE ASC, PHS_PROJ.NA_PROJ_DETAILS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.PhsProj"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.PhsProj"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.PhsProj"));
    private static ClassLoader _classLoader = PhsProj.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PhsProj.class
        };
    private double _adjustment;
    private int _periodSid;
    private String _priceType;
    private double _projectionPrice;
    private String _notes;
    private int _naProjDetailsSid;
    private PhsProj _escapedModel;

    public PhsProjModelImpl() {
    }

    @Override
    public PhsProjPK getPrimaryKey() {
        return new PhsProjPK(_periodSid, _priceType, _naProjDetailsSid);
    }

    @Override
    public void setPrimaryKey(PhsProjPK primaryKey) {
        setPeriodSid(primaryKey.periodSid);
        setPriceType(primaryKey.priceType);
        setNaProjDetailsSid(primaryKey.naProjDetailsSid);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new PhsProjPK(_periodSid, _priceType, _naProjDetailsSid);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((PhsProjPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return PhsProj.class;
    }

    @Override
    public String getModelClassName() {
        return PhsProj.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("adjustment", getAdjustment());
        attributes.put("periodSid", getPeriodSid());
        attributes.put("priceType", getPriceType());
        attributes.put("projectionPrice", getProjectionPrice());
        attributes.put("notes", getNotes());
        attributes.put("naProjDetailsSid", getNaProjDetailsSid());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Double adjustment = (Double) attributes.get("adjustment");

        if (adjustment != null) {
            setAdjustment(adjustment);
        }

        Integer periodSid = (Integer) attributes.get("periodSid");

        if (periodSid != null) {
            setPeriodSid(periodSid);
        }

        String priceType = (String) attributes.get("priceType");

        if (priceType != null) {
            setPriceType(priceType);
        }

        Double projectionPrice = (Double) attributes.get("projectionPrice");

        if (projectionPrice != null) {
            setProjectionPrice(projectionPrice);
        }

        String notes = (String) attributes.get("notes");

        if (notes != null) {
            setNotes(notes);
        }

        Integer naProjDetailsSid = (Integer) attributes.get("naProjDetailsSid");

        if (naProjDetailsSid != null) {
            setNaProjDetailsSid(naProjDetailsSid);
        }
    }

    @Override
    public double getAdjustment() {
        return _adjustment;
    }

    @Override
    public void setAdjustment(double adjustment) {
        _adjustment = adjustment;
    }

    @Override
    public int getPeriodSid() {
        return _periodSid;
    }

    @Override
    public void setPeriodSid(int periodSid) {
        _periodSid = periodSid;
    }

    @Override
    public String getPriceType() {
        if (_priceType == null) {
            return StringPool.BLANK;
        } else {
            return _priceType;
        }
    }

    @Override
    public void setPriceType(String priceType) {
        _priceType = priceType;
    }

    @Override
    public double getProjectionPrice() {
        return _projectionPrice;
    }

    @Override
    public void setProjectionPrice(double projectionPrice) {
        _projectionPrice = projectionPrice;
    }

    @Override
    public String getNotes() {
        if (_notes == null) {
            return StringPool.BLANK;
        } else {
            return _notes;
        }
    }

    @Override
    public void setNotes(String notes) {
        _notes = notes;
    }

    @Override
    public int getNaProjDetailsSid() {
        return _naProjDetailsSid;
    }

    @Override
    public void setNaProjDetailsSid(int naProjDetailsSid) {
        _naProjDetailsSid = naProjDetailsSid;
    }

    @Override
    public PhsProj toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PhsProj) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PhsProjImpl phsProjImpl = new PhsProjImpl();

        phsProjImpl.setAdjustment(getAdjustment());
        phsProjImpl.setPeriodSid(getPeriodSid());
        phsProjImpl.setPriceType(getPriceType());
        phsProjImpl.setProjectionPrice(getProjectionPrice());
        phsProjImpl.setNotes(getNotes());
        phsProjImpl.setNaProjDetailsSid(getNaProjDetailsSid());

        phsProjImpl.resetOriginalValues();

        return phsProjImpl;
    }

    @Override
    public int compareTo(PhsProj phsProj) {
        PhsProjPK primaryKey = phsProj.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PhsProj)) {
            return false;
        }

        PhsProj phsProj = (PhsProj) obj;

        PhsProjPK primaryKey = phsProj.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<PhsProj> toCacheModel() {
        PhsProjCacheModel phsProjCacheModel = new PhsProjCacheModel();

        phsProjCacheModel.adjustment = getAdjustment();

        phsProjCacheModel.periodSid = getPeriodSid();

        phsProjCacheModel.priceType = getPriceType();

        String priceType = phsProjCacheModel.priceType;

        if ((priceType != null) && (priceType.length() == 0)) {
            phsProjCacheModel.priceType = null;
        }

        phsProjCacheModel.projectionPrice = getProjectionPrice();

        phsProjCacheModel.notes = getNotes();

        String notes = phsProjCacheModel.notes;

        if ((notes != null) && (notes.length() == 0)) {
            phsProjCacheModel.notes = null;
        }

        phsProjCacheModel.naProjDetailsSid = getNaProjDetailsSid();

        return phsProjCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{adjustment=");
        sb.append(getAdjustment());
        sb.append(", periodSid=");
        sb.append(getPeriodSid());
        sb.append(", priceType=");
        sb.append(getPriceType());
        sb.append(", projectionPrice=");
        sb.append(getProjectionPrice());
        sb.append(", notes=");
        sb.append(getNotes());
        sb.append(", naProjDetailsSid=");
        sb.append(getNaProjDetailsSid());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.PhsProj");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>adjustment</column-name><column-value><![CDATA[");
        sb.append(getAdjustment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>periodSid</column-name><column-value><![CDATA[");
        sb.append(getPeriodSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceType</column-name><column-value><![CDATA[");
        sb.append(getPriceType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionPrice</column-name><column-value><![CDATA[");
        sb.append(getProjectionPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>notes</column-name><column-value><![CDATA[");
        sb.append(getNotes());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>naProjDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getNaProjDetailsSid());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
