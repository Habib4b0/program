/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.parttwo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.parttwo.model.SlaCalendarMaster;
import com.stpl.app.parttwo.model.SlaCalendarMasterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SlaCalendarMaster service. Represents a row in the &quot;SLA_CALENDAR_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SlaCalendarMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SlaCalendarMasterImpl}.
 * </p>
 *
 * @author
 * @see SlaCalendarMasterImpl
 * @see SlaCalendarMaster
 * @see SlaCalendarMasterModel
 * @generated
 */
@ProviderType
public class SlaCalendarMasterModelImpl extends BaseModelImpl<SlaCalendarMaster>
	implements SlaCalendarMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sla calendar master model instance should use the {@link SlaCalendarMaster} interface instead.
	 */
	public static final String TABLE_NAME = "SLA_CALENDAR_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CREATED_BY", Types.INTEGER },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "SLA_CALENDAR_MASTER_SID", Types.INTEGER },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "DEFAULT_HOLIDAYS", Types.BOOLEAN },
			{ "CALENDAR_NAME", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "INBOUND_STATUS", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SLA_CALENDAR_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("DEFAULT_HOLIDAYS", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("CALENDAR_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table SLA_CALENDAR_MASTER (CREATED_BY INTEGER,MODIFIED_BY INTEGER,SLA_CALENDAR_MASTER_SID INTEGER not null primary key IDENTITY,CREATED_DATE DATE null,DEFAULT_HOLIDAYS BOOLEAN,CALENDAR_NAME VARCHAR(75) null,MODIFIED_DATE DATE null,INBOUND_STATUS VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SLA_CALENDAR_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY slaCalendarMaster.slaCalendarMasterSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SLA_CALENDAR_MASTER.SLA_CALENDAR_MASTER_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.parttwo.model.SlaCalendarMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.parttwo.model.SlaCalendarMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.parttwo.model.SlaCalendarMaster"));

	public SlaCalendarMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _slaCalendarMasterSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setSlaCalendarMasterSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _slaCalendarMasterSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SlaCalendarMaster.class;
	}

	@Override
	public String getModelClassName() {
		return SlaCalendarMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("slaCalendarMasterSid", getSlaCalendarMasterSid());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("defaultHolidays", getDefaultHolidays());
		attributes.put("calendarName", getCalendarName());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("inboundStatus", getInboundStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Integer slaCalendarMasterSid = (Integer)attributes.get(
				"slaCalendarMasterSid");

		if (slaCalendarMasterSid != null) {
			setSlaCalendarMasterSid(slaCalendarMasterSid);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Boolean defaultHolidays = (Boolean)attributes.get("defaultHolidays");

		if (defaultHolidays != null) {
			setDefaultHolidays(defaultHolidays);
		}

		String calendarName = (String)attributes.get("calendarName");

		if (calendarName != null) {
			setCalendarName(calendarName);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public int getSlaCalendarMasterSid() {
		return _slaCalendarMasterSid;
	}

	@Override
	public void setSlaCalendarMasterSid(int slaCalendarMasterSid) {
		_slaCalendarMasterSid = slaCalendarMasterSid;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public boolean getDefaultHolidays() {
		return _defaultHolidays;
	}

	@Override
	public boolean isDefaultHolidays() {
		return _defaultHolidays;
	}

	@Override
	public void setDefaultHolidays(boolean defaultHolidays) {
		_defaultHolidays = defaultHolidays;
	}

	@Override
	public String getCalendarName() {
		if (_calendarName == null) {
			return StringPool.BLANK;
		}
		else {
			return _calendarName;
		}
	}

	@Override
	public void setCalendarName(String calendarName) {
		_calendarName = calendarName;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	@Override
	public SlaCalendarMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SlaCalendarMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SlaCalendarMasterImpl slaCalendarMasterImpl = new SlaCalendarMasterImpl();

		slaCalendarMasterImpl.setCreatedBy(getCreatedBy());
		slaCalendarMasterImpl.setModifiedBy(getModifiedBy());
		slaCalendarMasterImpl.setSlaCalendarMasterSid(getSlaCalendarMasterSid());
		slaCalendarMasterImpl.setCreatedDate(getCreatedDate());
		slaCalendarMasterImpl.setDefaultHolidays(getDefaultHolidays());
		slaCalendarMasterImpl.setCalendarName(getCalendarName());
		slaCalendarMasterImpl.setModifiedDate(getModifiedDate());
		slaCalendarMasterImpl.setInboundStatus(getInboundStatus());

		slaCalendarMasterImpl.resetOriginalValues();

		return slaCalendarMasterImpl;
	}

	@Override
	public int compareTo(SlaCalendarMaster slaCalendarMaster) {
		int primaryKey = slaCalendarMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SlaCalendarMaster)) {
			return false;
		}

		SlaCalendarMaster slaCalendarMaster = (SlaCalendarMaster)obj;

		int primaryKey = slaCalendarMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SlaCalendarMaster> toCacheModel() {
		SlaCalendarMasterCacheModel slaCalendarMasterCacheModel = new SlaCalendarMasterCacheModel();

		slaCalendarMasterCacheModel.createdBy = getCreatedBy();

		slaCalendarMasterCacheModel.modifiedBy = getModifiedBy();

		slaCalendarMasterCacheModel.slaCalendarMasterSid = getSlaCalendarMasterSid();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			slaCalendarMasterCacheModel.createdDate = createdDate.getTime();
		}
		else {
			slaCalendarMasterCacheModel.createdDate = Long.MIN_VALUE;
		}

		slaCalendarMasterCacheModel.defaultHolidays = getDefaultHolidays();

		slaCalendarMasterCacheModel.calendarName = getCalendarName();

		String calendarName = slaCalendarMasterCacheModel.calendarName;

		if ((calendarName != null) && (calendarName.length() == 0)) {
			slaCalendarMasterCacheModel.calendarName = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			slaCalendarMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			slaCalendarMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		slaCalendarMasterCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = slaCalendarMasterCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			slaCalendarMasterCacheModel.inboundStatus = null;
		}

		return slaCalendarMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", slaCalendarMasterSid=");
		sb.append(getSlaCalendarMasterSid());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", defaultHolidays=");
		sb.append(getDefaultHolidays());
		sb.append(", calendarName=");
		sb.append(getCalendarName());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.parttwo.model.SlaCalendarMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>slaCalendarMasterSid</column-name><column-value><![CDATA[");
		sb.append(getSlaCalendarMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultHolidays</column-name><column-value><![CDATA[");
		sb.append(getDefaultHolidays());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calendarName</column-name><column-value><![CDATA[");
		sb.append(getCalendarName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SlaCalendarMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SlaCalendarMaster.class
		};
	private int _createdBy;
	private int _modifiedBy;
	private int _slaCalendarMasterSid;
	private Date _createdDate;
	private boolean _defaultHolidays;
	private String _calendarName;
	private Date _modifiedDate;
	private String _inboundStatus;
	private SlaCalendarMaster _escapedModel;
}