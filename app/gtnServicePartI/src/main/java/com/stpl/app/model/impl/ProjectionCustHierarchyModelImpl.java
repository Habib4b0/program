package com.stpl.app.model.impl;

import com.stpl.app.model.ProjectionCustHierarchy;
import com.stpl.app.model.ProjectionCustHierarchyModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ProjectionCustHierarchy service. Represents a row in the &quot;PROJECTION_CUST_HIERARCHY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.ProjectionCustHierarchyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectionCustHierarchyImpl}.
 * </p>
 *
 * @author
 * @see ProjectionCustHierarchyImpl
 * @see com.stpl.app.model.ProjectionCustHierarchy
 * @see com.stpl.app.model.ProjectionCustHierarchyModel
 * @generated
 */
public class ProjectionCustHierarchyModelImpl extends BaseModelImpl<ProjectionCustHierarchy>
    implements ProjectionCustHierarchyModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a projection cust hierarchy model instance should use the {@link com.stpl.app.model.ProjectionCustHierarchy} interface instead.
     */
    public static final String TABLE_NAME = "PROJECTION_CUST_HIERARCHY";
    public static final Object[][] TABLE_COLUMNS = {
            { "PROJECTION_MASTER_SID", Types.INTEGER },
            { "PROJECTION_CUST_HIERARCHY_SID", Types.INTEGER },
            { "RELATIONSHIP_LEVEL_SID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table PROJECTION_CUST_HIERARCHY (PROJECTION_MASTER_SID INTEGER,PROJECTION_CUST_HIERARCHY_SID INTEGER not null primary key IDENTITY,RELATIONSHIP_LEVEL_SID INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table PROJECTION_CUST_HIERARCHY";
    public static final String ORDER_BY_JPQL = " ORDER BY projectionCustHierarchy.projectionCustHierarchySid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY PROJECTION_CUST_HIERARCHY.PROJECTION_CUST_HIERARCHY_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.ProjectionCustHierarchy"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.ProjectionCustHierarchy"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.ProjectionCustHierarchy"));
    private static ClassLoader _classLoader = ProjectionCustHierarchy.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ProjectionCustHierarchy.class
        };
    private int _projectionMasterSid;
    private int _projectionCustHierarchySid;
    private int _relationshipLevelSid;
    private ProjectionCustHierarchy _escapedModel;

    public ProjectionCustHierarchyModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _projectionCustHierarchySid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setProjectionCustHierarchySid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _projectionCustHierarchySid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ProjectionCustHierarchy.class;
    }

    @Override
    public String getModelClassName() {
        return ProjectionCustHierarchy.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("projectionMasterSid", getProjectionMasterSid());
        attributes.put("projectionCustHierarchySid",
            getProjectionCustHierarchySid());
        attributes.put("relationshipLevelSid", getRelationshipLevelSid());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer projectionMasterSid = (Integer) attributes.get(
                "projectionMasterSid");

        if (projectionMasterSid != null) {
            setProjectionMasterSid(projectionMasterSid);
        }

        Integer projectionCustHierarchySid = (Integer) attributes.get(
                "projectionCustHierarchySid");

        if (projectionCustHierarchySid != null) {
            setProjectionCustHierarchySid(projectionCustHierarchySid);
        }

        Integer relationshipLevelSid = (Integer) attributes.get(
                "relationshipLevelSid");

        if (relationshipLevelSid != null) {
            setRelationshipLevelSid(relationshipLevelSid);
        }
    }

    @Override
    public int getProjectionMasterSid() {
        return _projectionMasterSid;
    }

    @Override
    public void setProjectionMasterSid(int projectionMasterSid) {
        _projectionMasterSid = projectionMasterSid;
    }

    @Override
    public int getProjectionCustHierarchySid() {
        return _projectionCustHierarchySid;
    }

    @Override
    public void setProjectionCustHierarchySid(int projectionCustHierarchySid) {
        _projectionCustHierarchySid = projectionCustHierarchySid;
    }

    @Override
    public int getRelationshipLevelSid() {
        return _relationshipLevelSid;
    }

    @Override
    public void setRelationshipLevelSid(int relationshipLevelSid) {
        _relationshipLevelSid = relationshipLevelSid;
    }

    @Override
    public ProjectionCustHierarchy toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ProjectionCustHierarchy) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ProjectionCustHierarchyImpl projectionCustHierarchyImpl = new ProjectionCustHierarchyImpl();

        projectionCustHierarchyImpl.setProjectionMasterSid(getProjectionMasterSid());
        projectionCustHierarchyImpl.setProjectionCustHierarchySid(getProjectionCustHierarchySid());
        projectionCustHierarchyImpl.setRelationshipLevelSid(getRelationshipLevelSid());

        projectionCustHierarchyImpl.resetOriginalValues();

        return projectionCustHierarchyImpl;
    }

    @Override
    public int compareTo(ProjectionCustHierarchy projectionCustHierarchy) {
        int primaryKey = projectionCustHierarchy.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ProjectionCustHierarchy)) {
            return false;
        }

        ProjectionCustHierarchy projectionCustHierarchy = (ProjectionCustHierarchy) obj;

        int primaryKey = projectionCustHierarchy.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ProjectionCustHierarchy> toCacheModel() {
        ProjectionCustHierarchyCacheModel projectionCustHierarchyCacheModel = new ProjectionCustHierarchyCacheModel();

        projectionCustHierarchyCacheModel.projectionMasterSid = getProjectionMasterSid();

        projectionCustHierarchyCacheModel.projectionCustHierarchySid = getProjectionCustHierarchySid();

        projectionCustHierarchyCacheModel.relationshipLevelSid = getRelationshipLevelSid();

        return projectionCustHierarchyCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{projectionMasterSid=");
        sb.append(getProjectionMasterSid());
        sb.append(", projectionCustHierarchySid=");
        sb.append(getProjectionCustHierarchySid());
        sb.append(", relationshipLevelSid=");
        sb.append(getRelationshipLevelSid());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.ProjectionCustHierarchy");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>projectionMasterSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionCustHierarchySid</column-name><column-value><![CDATA[");
        sb.append(getProjectionCustHierarchySid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>relationshipLevelSid</column-name><column-value><![CDATA[");
        sb.append(getRelationshipLevelSid());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
