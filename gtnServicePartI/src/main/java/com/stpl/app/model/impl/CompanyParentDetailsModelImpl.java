package com.stpl.app.model.impl;

import com.stpl.app.model.CompanyParentDetails;
import com.stpl.app.model.CompanyParentDetailsModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CompanyParentDetails service. Represents a row in the &quot;COMPANY_PARENT_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.CompanyParentDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CompanyParentDetailsImpl}.
 * </p>
 *
 * @author
 * @see CompanyParentDetailsImpl
 * @see com.stpl.app.model.CompanyParentDetails
 * @see com.stpl.app.model.CompanyParentDetailsModel
 * @generated
 */
public class CompanyParentDetailsModelImpl extends BaseModelImpl<CompanyParentDetails>
    implements CompanyParentDetailsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a company parent details model instance should use the {@link com.stpl.app.model.CompanyParentDetails} interface instead.
     */
    public static final String TABLE_NAME = "COMPANY_PARENT_DETAILS";
    public static final Object[][] TABLE_COLUMNS = {
            { "LAST_UPDATED_DATE", Types.TIMESTAMP },
            { "PARENT_END_DATE", Types.TIMESTAMP },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "PARENT_COMPANY_MASTER_SID", Types.INTEGER },
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "PRIOR_PARENT_START_DATE", Types.TIMESTAMP },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "SOURCE", Types.VARCHAR },
            { "CREATED_BY", Types.INTEGER },
            { "COMPANY_PARENT_DETAILS_SID", Types.INTEGER },
            { "PRIOR_PARENT_CMPY_MASTER_SID", Types.VARCHAR },
            { "BATCH_ID", Types.VARCHAR },
            { "MODIFIED_BY", Types.INTEGER },
            { "INBOUND_STATUS", Types.VARCHAR },
            { "COMPANY_MASTER_SID", Types.INTEGER },
            { "PARENT_START_DATE", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table COMPANY_PARENT_DETAILS (LAST_UPDATED_DATE DATE null,PARENT_END_DATE DATE null,MODIFIED_DATE DATE null,PARENT_COMPANY_MASTER_SID INTEGER,RECORD_LOCK_STATUS BOOLEAN,PRIOR_PARENT_START_DATE DATE null,CREATED_DATE DATE null,SOURCE VARCHAR(75) null,CREATED_BY INTEGER,COMPANY_PARENT_DETAILS_SID INTEGER not null primary key IDENTITY,PRIOR_PARENT_CMPY_MASTER_SID VARCHAR(75) null,BATCH_ID VARCHAR(75) null,MODIFIED_BY INTEGER,INBOUND_STATUS VARCHAR(75) null,COMPANY_MASTER_SID INTEGER,PARENT_START_DATE DATE null)";
    public static final String TABLE_SQL_DROP = "drop table COMPANY_PARENT_DETAILS";
    public static final String ORDER_BY_JPQL = " ORDER BY companyParentDetails.companyParentDetailsSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY COMPANY_PARENT_DETAILS.COMPANY_PARENT_DETAILS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.CompanyParentDetails"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.CompanyParentDetails"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.CompanyParentDetails"));
    private static ClassLoader _classLoader = CompanyParentDetails.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            CompanyParentDetails.class
        };
    private Date _lastUpdatedDate;
    private Date _parentEndDate;
    private Date _modifiedDate;
    private int _parentCompanyMasterSid;
    private boolean _recordLockStatus;
    private Date _priorParentStartDate;
    private Date _createdDate;
    private String _source;
    private int _createdBy;
    private int _companyParentDetailsSid;
    private String _priorParentCmpyMasterSid;
    private String _batchId;
    private int _modifiedBy;
    private String _inboundStatus;
    private int _companyMasterSid;
    private Date _parentStartDate;
    private CompanyParentDetails _escapedModel;

    public CompanyParentDetailsModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _companyParentDetailsSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setCompanyParentDetailsSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _companyParentDetailsSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return CompanyParentDetails.class;
    }

    @Override
    public String getModelClassName() {
        return CompanyParentDetails.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("lastUpdatedDate", getLastUpdatedDate());
        attributes.put("parentEndDate", getParentEndDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("parentCompanyMasterSid", getParentCompanyMasterSid());
        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("priorParentStartDate", getPriorParentStartDate());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("source", getSource());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("companyParentDetailsSid", getCompanyParentDetailsSid());
        attributes.put("priorParentCmpyMasterSid", getPriorParentCmpyMasterSid());
        attributes.put("batchId", getBatchId());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("inboundStatus", getInboundStatus());
        attributes.put("companyMasterSid", getCompanyMasterSid());
        attributes.put("parentStartDate", getParentStartDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Date lastUpdatedDate = (Date) attributes.get("lastUpdatedDate");

        if (lastUpdatedDate != null) {
            setLastUpdatedDate(lastUpdatedDate);
        }

        Date parentEndDate = (Date) attributes.get("parentEndDate");

        if (parentEndDate != null) {
            setParentEndDate(parentEndDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer parentCompanyMasterSid = (Integer) attributes.get(
                "parentCompanyMasterSid");

        if (parentCompanyMasterSid != null) {
            setParentCompanyMasterSid(parentCompanyMasterSid);
        }

        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        Date priorParentStartDate = (Date) attributes.get(
                "priorParentStartDate");

        if (priorParentStartDate != null) {
            setPriorParentStartDate(priorParentStartDate);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Integer companyParentDetailsSid = (Integer) attributes.get(
                "companyParentDetailsSid");

        if (companyParentDetailsSid != null) {
            setCompanyParentDetailsSid(companyParentDetailsSid);
        }

        String priorParentCmpyMasterSid = (String) attributes.get(
                "priorParentCmpyMasterSid");

        if (priorParentCmpyMasterSid != null) {
            setPriorParentCmpyMasterSid(priorParentCmpyMasterSid);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }

        Integer companyMasterSid = (Integer) attributes.get("companyMasterSid");

        if (companyMasterSid != null) {
            setCompanyMasterSid(companyMasterSid);
        }

        Date parentStartDate = (Date) attributes.get("parentStartDate");

        if (parentStartDate != null) {
            setParentStartDate(parentStartDate);
        }
    }

    @Override
    public Date getLastUpdatedDate() {
        return _lastUpdatedDate;
    }

    @Override
    public void setLastUpdatedDate(Date lastUpdatedDate) {
        _lastUpdatedDate = lastUpdatedDate;
    }

    @Override
    public Date getParentEndDate() {
        return _parentEndDate;
    }

    @Override
    public void setParentEndDate(Date parentEndDate) {
        _parentEndDate = parentEndDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public int getParentCompanyMasterSid() {
        return _parentCompanyMasterSid;
    }

    @Override
    public void setParentCompanyMasterSid(int parentCompanyMasterSid) {
        _parentCompanyMasterSid = parentCompanyMasterSid;
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public Date getPriorParentStartDate() {
        return _priorParentStartDate;
    }

    @Override
    public void setPriorParentStartDate(Date priorParentStartDate) {
        _priorParentStartDate = priorParentStartDate;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public int getCompanyParentDetailsSid() {
        return _companyParentDetailsSid;
    }

    @Override
    public void setCompanyParentDetailsSid(int companyParentDetailsSid) {
        _companyParentDetailsSid = companyParentDetailsSid;
    }

    @Override
    public String getPriorParentCmpyMasterSid() {
        return _priorParentCmpyMasterSid;
    }

    @Override
    public void setPriorParentCmpyMasterSid(String priorParentCmpyMasterSid) {
        _priorParentCmpyMasterSid = priorParentCmpyMasterSid;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    @Override
    public int getCompanyMasterSid() {
        return _companyMasterSid;
    }

    @Override
    public void setCompanyMasterSid(int companyMasterSid) {
        _companyMasterSid = companyMasterSid;
    }

    @Override
    public Date getParentStartDate() {
        return _parentStartDate;
    }

    @Override
    public void setParentStartDate(Date parentStartDate) {
        _parentStartDate = parentStartDate;
    }

    @Override
    public CompanyParentDetails toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (CompanyParentDetails) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CompanyParentDetailsImpl companyParentDetailsImpl = new CompanyParentDetailsImpl();

        companyParentDetailsImpl.setLastUpdatedDate(getLastUpdatedDate());
        companyParentDetailsImpl.setParentEndDate(getParentEndDate());
        companyParentDetailsImpl.setModifiedDate(getModifiedDate());
        companyParentDetailsImpl.setParentCompanyMasterSid(getParentCompanyMasterSid());
        companyParentDetailsImpl.setRecordLockStatus(getRecordLockStatus());
        companyParentDetailsImpl.setPriorParentStartDate(getPriorParentStartDate());
        companyParentDetailsImpl.setCreatedDate(getCreatedDate());
        companyParentDetailsImpl.setSource(getSource());
        companyParentDetailsImpl.setCreatedBy(getCreatedBy());
        companyParentDetailsImpl.setCompanyParentDetailsSid(getCompanyParentDetailsSid());
        companyParentDetailsImpl.setPriorParentCmpyMasterSid(getPriorParentCmpyMasterSid());
        companyParentDetailsImpl.setBatchId(getBatchId());
        companyParentDetailsImpl.setModifiedBy(getModifiedBy());
        companyParentDetailsImpl.setInboundStatus(getInboundStatus());
        companyParentDetailsImpl.setCompanyMasterSid(getCompanyMasterSid());
        companyParentDetailsImpl.setParentStartDate(getParentStartDate());

        companyParentDetailsImpl.resetOriginalValues();

        return companyParentDetailsImpl;
    }

    @Override
    public int compareTo(CompanyParentDetails companyParentDetails) {
        int primaryKey = companyParentDetails.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof CompanyParentDetails)) {
            return false;
        }

        CompanyParentDetails companyParentDetails = (CompanyParentDetails) obj;

        int primaryKey = companyParentDetails.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<CompanyParentDetails> toCacheModel() {
        CompanyParentDetailsCacheModel companyParentDetailsCacheModel = new CompanyParentDetailsCacheModel();

        Date lastUpdatedDate = getLastUpdatedDate();

        if (lastUpdatedDate != null) {
            companyParentDetailsCacheModel.lastUpdatedDate = lastUpdatedDate.getTime();
        } else {
            companyParentDetailsCacheModel.lastUpdatedDate = Long.MIN_VALUE;
        }

        Date parentEndDate = getParentEndDate();

        if (parentEndDate != null) {
            companyParentDetailsCacheModel.parentEndDate = parentEndDate.getTime();
        } else {
            companyParentDetailsCacheModel.parentEndDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            companyParentDetailsCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            companyParentDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        companyParentDetailsCacheModel.parentCompanyMasterSid = getParentCompanyMasterSid();

        companyParentDetailsCacheModel.recordLockStatus = getRecordLockStatus();

        Date priorParentStartDate = getPriorParentStartDate();

        if (priorParentStartDate != null) {
            companyParentDetailsCacheModel.priorParentStartDate = priorParentStartDate.getTime();
        } else {
            companyParentDetailsCacheModel.priorParentStartDate = Long.MIN_VALUE;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            companyParentDetailsCacheModel.createdDate = createdDate.getTime();
        } else {
            companyParentDetailsCacheModel.createdDate = Long.MIN_VALUE;
        }

        companyParentDetailsCacheModel.source = getSource();

        String source = companyParentDetailsCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            companyParentDetailsCacheModel.source = null;
        }

        companyParentDetailsCacheModel.createdBy = getCreatedBy();

        companyParentDetailsCacheModel.companyParentDetailsSid = getCompanyParentDetailsSid();

        companyParentDetailsCacheModel.priorParentCmpyMasterSid = getPriorParentCmpyMasterSid();

        String priorParentCmpyMasterSid = companyParentDetailsCacheModel.priorParentCmpyMasterSid;

        if ((priorParentCmpyMasterSid != null) &&
                (priorParentCmpyMasterSid.length() == 0)) {
            companyParentDetailsCacheModel.priorParentCmpyMasterSid = null;
        }

        companyParentDetailsCacheModel.batchId = getBatchId();

        String batchId = companyParentDetailsCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            companyParentDetailsCacheModel.batchId = null;
        }

        companyParentDetailsCacheModel.modifiedBy = getModifiedBy();

        companyParentDetailsCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = companyParentDetailsCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            companyParentDetailsCacheModel.inboundStatus = null;
        }

        companyParentDetailsCacheModel.companyMasterSid = getCompanyMasterSid();

        Date parentStartDate = getParentStartDate();

        if (parentStartDate != null) {
            companyParentDetailsCacheModel.parentStartDate = parentStartDate.getTime();
        } else {
            companyParentDetailsCacheModel.parentStartDate = Long.MIN_VALUE;
        }

        return companyParentDetailsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(33);

        sb.append("{lastUpdatedDate=");
        sb.append(getLastUpdatedDate());
        sb.append(", parentEndDate=");
        sb.append(getParentEndDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", parentCompanyMasterSid=");
        sb.append(getParentCompanyMasterSid());
        sb.append(", recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", priorParentStartDate=");
        sb.append(getPriorParentStartDate());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", companyParentDetailsSid=");
        sb.append(getCompanyParentDetailsSid());
        sb.append(", priorParentCmpyMasterSid=");
        sb.append(getPriorParentCmpyMasterSid());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append(", companyMasterSid=");
        sb.append(getCompanyMasterSid());
        sb.append(", parentStartDate=");
        sb.append(getParentStartDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(52);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.CompanyParentDetails");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>lastUpdatedDate</column-name><column-value><![CDATA[");
        sb.append(getLastUpdatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentEndDate</column-name><column-value><![CDATA[");
        sb.append(getParentEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentCompanyMasterSid</column-name><column-value><![CDATA[");
        sb.append(getParentCompanyMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priorParentStartDate</column-name><column-value><![CDATA[");
        sb.append(getPriorParentStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyParentDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getCompanyParentDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priorParentCmpyMasterSid</column-name><column-value><![CDATA[");
        sb.append(getPriorParentCmpyMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyMasterSid</column-name><column-value><![CDATA[");
        sb.append(getCompanyMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentStartDate</column-name><column-value><![CDATA[");
        sb.append(getParentStartDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
