package com.stpl.app.global.ifp.ui;

import com.stpl.app.global.abstractsearch.util.ConstantUtil;
import com.stpl.app.global.abstractsearch.view.AbstractSearchView;
import com.stpl.app.global.common.util.HelperListUtil;
import com.stpl.app.global.common.dto.SessionDTO;
import com.stpl.app.global.ifp.ui.view.IFPAddView;
import com.stpl.app.security.StplSecurity;
import com.stpl.app.ui.DateToStringConverterFactory;
import com.stpl.app.util.CommonUIUtils;
import com.stpl.app.util.ConstantsUtils;
import com.stpl.app.util.ErrorCodeUtil;
import com.stpl.app.util.ErrorCodes;
import com.stpl.portal.kernel.exception.PortalException;
import com.stpl.portal.kernel.exception.SystemException;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.Navigator;
import com.vaadin.server.VaadinRequest;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.UI;
import de.steinwedel.messagebox.ButtonId;
import de.steinwedel.messagebox.Icon;
import de.steinwedel.messagebox.MessageBox;
import de.steinwedel.messagebox.MessageBoxListener;
import org.jboss.logging.Logger;

/**
 * The Class ItemFamilyPlanUI.
 */
@SuppressWarnings("serial")
// @PreserveOnRefresh
public class ItemFamilyPlanUI extends UI {

	/**
	 * The Constant LOGGER.
	 */
	private static final Logger LOGGER = Logger.getLogger(ItemFamilyPlanUI.class);
        SessionDTO sessionDTO=new SessionDTO();

	/**
	 * Initial method for ItemFamilyPlanUI.
	 *
	 * @param request
	 *            the request
	 */
        @AutoGenerated
        Navigator navigator;
	@Override
	protected void init(final VaadinRequest request) {
                    LOGGER.info("Inside ItemFamilyPlanUI INIT() : ");
		try {
                    setStyleName("bootstrap-company-ui");
                    addStyleName(ConstantsUtils.BOOTSTRAP);
                    addStyleName(ConstantsUtils.BOOTSTRAP_BB);
                    final String userId = request.getRemoteUser();
                    VaadinSession.getCurrent().setAttribute(ConstantsUtils.USER_ID, userId);
                    final String sessionId = request.getWrappedSession().getId();
                    VaadinSession.getCurrent().setAttribute(ConstantsUtils.SESSION_ID, sessionId);


                    CommonUIUtils.beforeUnloadCloseUi(this,sessionDTO,ConstantUtil.ITEM_FAMILY_PLAN);

                    VaadinSession.getCurrent().setConverterFactory(new DateToStringConverterFactory());
                    StplSecurity.getUserName();
                    LOGGER.info("USER_ID: "+userId);
                    LOGGER.info("SESSION_ID: "+sessionId);
                    /**
                     * The navigator.
                     */
                    navigator = new Navigator(this, this);
                    HelperListUtil helperListUtil = HelperListUtil.getInstance();
                    helperListUtil.loadValuesWithListName("itemFamilyPlan");
                    AbstractSearchView abstractSearchView=new AbstractSearchView(ConstantUtil.ITEM_FAMILY_PLAN,sessionDTO);
                    navigator.addView(AbstractSearchView.NAME, abstractSearchView);
                    IFPAddView ifpAddView=new IFPAddView(sessionDTO);
                    navigator.addView(IFPAddView.NAME, ifpAddView);

			navigator.setErrorView(new AbstractSearchView(ConstantUtil.ITEM_FAMILY_PLAN));

		} catch (SystemException ex) {
                        final  String errorMsg = ErrorCodeUtil.getErrorMessage(ex);
                        LOGGER.error(errorMsg);
                        final MessageBox msg = MessageBox.showPlain(Icon.ERROR, ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1001), errorMsg, new MessageBoxListener() {    
                                        /**              
                                         * The method is triggered when a button of the message box is       
                                         * pressed .        
                                         *                
                                         * @param buttonId The buttonId of the pressed button.       
                                         */             
                                        @SuppressWarnings("PMD")        
                                        public void buttonClicked(final ButtonId buttonId) {      
                                            // Do Nothing     
                                        }           
                                    }, ButtonId.OK);      
                                    msg.getButton(ButtonId.OK).focus();
                } catch (PortalException pe) {
			LOGGER.error(pe);
			final MessageBox msg = MessageBox.showPlain(Icon.ERROR, ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1001), ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1010), new MessageBoxListener() {    
                            /**              
                             * The method is triggered when a button of the message box is       
                             * pressed .        
                             *                
                             * @param buttonId The buttonId of the pressed button.       
                             */             
                            @SuppressWarnings("PMD")        
                            public void buttonClicked(final ButtonId buttonId) {      
                                // Do Nothing     
                            }           
                        }, ButtonId.OK);      
                        msg.getButton(ButtonId.OK).focus();
		} catch (Exception e) {
			LOGGER.error(e);
			final MessageBox msg = MessageBox.showPlain(Icon.ERROR, ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1001), ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1010), new MessageBoxListener() {  
                            /**             
                             * The method is triggered when a button of the message box is     
                             * pressed .      
                             *            
                             * @param buttonId The buttonId of the pressed button.         
                             */           
                            @SuppressWarnings("PMD")    
                            public void buttonClicked(final ButtonId buttonId) {  
                                // Do Nothing           
                            }    
                        }, ButtonId.OK);  
                        msg.getButton(ButtonId.OK).focus();
		}
                 LOGGER.info("Ends ItemFamilyPlanUI INIT() : ");
	}
}
