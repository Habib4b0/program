package com.stpl.app.model.impl;

import com.stpl.app.model.StMSupplementalDiscMaster;
import com.stpl.app.model.StMSupplementalDiscMasterModel;
import com.stpl.app.service.persistence.StMSupplementalDiscMasterPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StMSupplementalDiscMaster service. Represents a row in the &quot;ST_M_SUPPLEMENTAL_DISC_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.StMSupplementalDiscMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StMSupplementalDiscMasterImpl}.
 * </p>
 *
 * @author
 * @see StMSupplementalDiscMasterImpl
 * @see com.stpl.app.model.StMSupplementalDiscMaster
 * @see com.stpl.app.model.StMSupplementalDiscMasterModel
 * @generated
 */
public class StMSupplementalDiscMasterModelImpl extends BaseModelImpl<StMSupplementalDiscMaster>
    implements StMSupplementalDiscMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a st m supplemental disc master model instance should use the {@link com.stpl.app.model.StMSupplementalDiscMaster} interface instead.
     */
    public static final String TABLE_NAME = "ST_M_SUPPLEMENTAL_DISC_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "ACTUAL_DISCOUNT_RATE2", Types.DOUBLE },
            { "ACTUAL_DISCOUNT_RATE1", Types.DOUBLE },
            { "MARKET_TYPE", Types.VARCHAR },
            { "ACTUAL_METHODOLOGY", Types.VARCHAR },
            { "ACTUAL_CONTRACT_PRICE", Types.DOUBLE },
            { "USER_ID", Types.INTEGER },
            { "LAST_MODIFIED_DATE", Types.TIMESTAMP },
            { "PROJECTION_DETAILS_SID", Types.INTEGER },
            { "ACTUAL_DISCOUNT", Types.DOUBLE },
            { "SESSION_ID", Types.INTEGER },
            { "CHECK_RECORD", Types.INTEGER },
            { "CONTRACT_END_DATE", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table ST_M_SUPPLEMENTAL_DISC_MASTER (ACTUAL_DISCOUNT_RATE2 DOUBLE,ACTUAL_DISCOUNT_RATE1 DOUBLE,MARKET_TYPE VARCHAR(75) null,ACTUAL_METHODOLOGY VARCHAR(75) null,ACTUAL_CONTRACT_PRICE DOUBLE,USER_ID INTEGER not null IDENTITY,LAST_MODIFIED_DATE DATE null,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,ACTUAL_DISCOUNT DOUBLE,SESSION_ID INTEGER not null IDENTITY,CHECK_RECORD INTEGER,CONTRACT_END_DATE DATE null,primary key (USER_ID, PROJECTION_DETAILS_SID, SESSION_ID))";
    public static final String TABLE_SQL_DROP = "drop table ST_M_SUPPLEMENTAL_DISC_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY stMSupplementalDiscMaster.id.userId ASC, stMSupplementalDiscMaster.id.projectionDetailsSid ASC, stMSupplementalDiscMaster.id.sessionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ST_M_SUPPLEMENTAL_DISC_MASTER.USER_ID ASC, ST_M_SUPPLEMENTAL_DISC_MASTER.PROJECTION_DETAILS_SID ASC, ST_M_SUPPLEMENTAL_DISC_MASTER.SESSION_ID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.StMSupplementalDiscMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.StMSupplementalDiscMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.StMSupplementalDiscMaster"));
    private static ClassLoader _classLoader = StMSupplementalDiscMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            StMSupplementalDiscMaster.class
        };
    private double _actualDiscountRate2;
    private double _actualDiscountRate1;
    private String _marketType;
    private String _actualMethodology;
    private double _actualContractPrice;
    private int _userId;
    private Date _lastModifiedDate;
    private int _projectionDetailsSid;
    private double _actualDiscount;
    private int _sessionId;
    private int _checkRecord;
    private Date _contractEndDate;
    private StMSupplementalDiscMaster _escapedModel;

    public StMSupplementalDiscMasterModelImpl() {
    }

    @Override
    public StMSupplementalDiscMasterPK getPrimaryKey() {
        return new StMSupplementalDiscMasterPK(_userId, _projectionDetailsSid,
            _sessionId);
    }

    @Override
    public void setPrimaryKey(StMSupplementalDiscMasterPK primaryKey) {
        setUserId(primaryKey.userId);
        setProjectionDetailsSid(primaryKey.projectionDetailsSid);
        setSessionId(primaryKey.sessionId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new StMSupplementalDiscMasterPK(_userId, _projectionDetailsSid,
            _sessionId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((StMSupplementalDiscMasterPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return StMSupplementalDiscMaster.class;
    }

    @Override
    public String getModelClassName() {
        return StMSupplementalDiscMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("actualDiscountRate2", getActualDiscountRate2());
        attributes.put("actualDiscountRate1", getActualDiscountRate1());
        attributes.put("marketType", getMarketType());
        attributes.put("actualMethodology", getActualMethodology());
        attributes.put("actualContractPrice", getActualContractPrice());
        attributes.put("userId", getUserId());
        attributes.put("lastModifiedDate", getLastModifiedDate());
        attributes.put("projectionDetailsSid", getProjectionDetailsSid());
        attributes.put("actualDiscount", getActualDiscount());
        attributes.put("sessionId", getSessionId());
        attributes.put("checkRecord", getCheckRecord());
        attributes.put("contractEndDate", getContractEndDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Double actualDiscountRate2 = (Double) attributes.get(
                "actualDiscountRate2");

        if (actualDiscountRate2 != null) {
            setActualDiscountRate2(actualDiscountRate2);
        }

        Double actualDiscountRate1 = (Double) attributes.get(
                "actualDiscountRate1");

        if (actualDiscountRate1 != null) {
            setActualDiscountRate1(actualDiscountRate1);
        }

        String marketType = (String) attributes.get("marketType");

        if (marketType != null) {
            setMarketType(marketType);
        }

        String actualMethodology = (String) attributes.get("actualMethodology");

        if (actualMethodology != null) {
            setActualMethodology(actualMethodology);
        }

        Double actualContractPrice = (Double) attributes.get(
                "actualContractPrice");

        if (actualContractPrice != null) {
            setActualContractPrice(actualContractPrice);
        }

        Integer userId = (Integer) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date lastModifiedDate = (Date) attributes.get("lastModifiedDate");

        if (lastModifiedDate != null) {
            setLastModifiedDate(lastModifiedDate);
        }

        Integer projectionDetailsSid = (Integer) attributes.get(
                "projectionDetailsSid");

        if (projectionDetailsSid != null) {
            setProjectionDetailsSid(projectionDetailsSid);
        }

        Double actualDiscount = (Double) attributes.get("actualDiscount");

        if (actualDiscount != null) {
            setActualDiscount(actualDiscount);
        }

        Integer sessionId = (Integer) attributes.get("sessionId");

        if (sessionId != null) {
            setSessionId(sessionId);
        }

        Integer checkRecord = (Integer) attributes.get("checkRecord");

        if (checkRecord != null) {
            setCheckRecord(checkRecord);
        }

        Date contractEndDate = (Date) attributes.get("contractEndDate");

        if (contractEndDate != null) {
            setContractEndDate(contractEndDate);
        }
    }

    @Override
    public double getActualDiscountRate2() {
        return _actualDiscountRate2;
    }

    @Override
    public void setActualDiscountRate2(double actualDiscountRate2) {
        _actualDiscountRate2 = actualDiscountRate2;
    }

    @Override
    public double getActualDiscountRate1() {
        return _actualDiscountRate1;
    }

    @Override
    public void setActualDiscountRate1(double actualDiscountRate1) {
        _actualDiscountRate1 = actualDiscountRate1;
    }

    @Override
    public String getMarketType() {
        if (_marketType == null) {
            return StringPool.BLANK;
        } else {
            return _marketType;
        }
    }

    @Override
    public void setMarketType(String marketType) {
        _marketType = marketType;
    }

    @Override
    public String getActualMethodology() {
        if (_actualMethodology == null) {
            return StringPool.BLANK;
        } else {
            return _actualMethodology;
        }
    }

    @Override
    public void setActualMethodology(String actualMethodology) {
        _actualMethodology = actualMethodology;
    }

    @Override
    public double getActualContractPrice() {
        return _actualContractPrice;
    }

    @Override
    public void setActualContractPrice(double actualContractPrice) {
        _actualContractPrice = actualContractPrice;
    }

    @Override
    public int getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(int userId) {
        _userId = userId;
    }

    @Override
    public Date getLastModifiedDate() {
        return _lastModifiedDate;
    }

    @Override
    public void setLastModifiedDate(Date lastModifiedDate) {
        _lastModifiedDate = lastModifiedDate;
    }

    @Override
    public int getProjectionDetailsSid() {
        return _projectionDetailsSid;
    }

    @Override
    public void setProjectionDetailsSid(int projectionDetailsSid) {
        _projectionDetailsSid = projectionDetailsSid;
    }

    @Override
    public double getActualDiscount() {
        return _actualDiscount;
    }

    @Override
    public void setActualDiscount(double actualDiscount) {
        _actualDiscount = actualDiscount;
    }

    @Override
    public int getSessionId() {
        return _sessionId;
    }

    @Override
    public void setSessionId(int sessionId) {
        _sessionId = sessionId;
    }

    @Override
    public int getCheckRecord() {
        return _checkRecord;
    }

    @Override
    public void setCheckRecord(int checkRecord) {
        _checkRecord = checkRecord;
    }

    @Override
    public Date getContractEndDate() {
        return _contractEndDate;
    }

    @Override
    public void setContractEndDate(Date contractEndDate) {
        _contractEndDate = contractEndDate;
    }

    @Override
    public StMSupplementalDiscMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (StMSupplementalDiscMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        StMSupplementalDiscMasterImpl stMSupplementalDiscMasterImpl = new StMSupplementalDiscMasterImpl();

        stMSupplementalDiscMasterImpl.setActualDiscountRate2(getActualDiscountRate2());
        stMSupplementalDiscMasterImpl.setActualDiscountRate1(getActualDiscountRate1());
        stMSupplementalDiscMasterImpl.setMarketType(getMarketType());
        stMSupplementalDiscMasterImpl.setActualMethodology(getActualMethodology());
        stMSupplementalDiscMasterImpl.setActualContractPrice(getActualContractPrice());
        stMSupplementalDiscMasterImpl.setUserId(getUserId());
        stMSupplementalDiscMasterImpl.setLastModifiedDate(getLastModifiedDate());
        stMSupplementalDiscMasterImpl.setProjectionDetailsSid(getProjectionDetailsSid());
        stMSupplementalDiscMasterImpl.setActualDiscount(getActualDiscount());
        stMSupplementalDiscMasterImpl.setSessionId(getSessionId());
        stMSupplementalDiscMasterImpl.setCheckRecord(getCheckRecord());
        stMSupplementalDiscMasterImpl.setContractEndDate(getContractEndDate());

        stMSupplementalDiscMasterImpl.resetOriginalValues();

        return stMSupplementalDiscMasterImpl;
    }

    @Override
    public int compareTo(StMSupplementalDiscMaster stMSupplementalDiscMaster) {
        StMSupplementalDiscMasterPK primaryKey = stMSupplementalDiscMaster.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof StMSupplementalDiscMaster)) {
            return false;
        }

        StMSupplementalDiscMaster stMSupplementalDiscMaster = (StMSupplementalDiscMaster) obj;

        StMSupplementalDiscMasterPK primaryKey = stMSupplementalDiscMaster.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<StMSupplementalDiscMaster> toCacheModel() {
        StMSupplementalDiscMasterCacheModel stMSupplementalDiscMasterCacheModel = new StMSupplementalDiscMasterCacheModel();

        stMSupplementalDiscMasterCacheModel.actualDiscountRate2 = getActualDiscountRate2();

        stMSupplementalDiscMasterCacheModel.actualDiscountRate1 = getActualDiscountRate1();

        stMSupplementalDiscMasterCacheModel.marketType = getMarketType();

        String marketType = stMSupplementalDiscMasterCacheModel.marketType;

        if ((marketType != null) && (marketType.length() == 0)) {
            stMSupplementalDiscMasterCacheModel.marketType = null;
        }

        stMSupplementalDiscMasterCacheModel.actualMethodology = getActualMethodology();

        String actualMethodology = stMSupplementalDiscMasterCacheModel.actualMethodology;

        if ((actualMethodology != null) && (actualMethodology.length() == 0)) {
            stMSupplementalDiscMasterCacheModel.actualMethodology = null;
        }

        stMSupplementalDiscMasterCacheModel.actualContractPrice = getActualContractPrice();

        stMSupplementalDiscMasterCacheModel.userId = getUserId();

        Date lastModifiedDate = getLastModifiedDate();

        if (lastModifiedDate != null) {
            stMSupplementalDiscMasterCacheModel.lastModifiedDate = lastModifiedDate.getTime();
        } else {
            stMSupplementalDiscMasterCacheModel.lastModifiedDate = Long.MIN_VALUE;
        }

        stMSupplementalDiscMasterCacheModel.projectionDetailsSid = getProjectionDetailsSid();

        stMSupplementalDiscMasterCacheModel.actualDiscount = getActualDiscount();

        stMSupplementalDiscMasterCacheModel.sessionId = getSessionId();

        stMSupplementalDiscMasterCacheModel.checkRecord = getCheckRecord();

        Date contractEndDate = getContractEndDate();

        if (contractEndDate != null) {
            stMSupplementalDiscMasterCacheModel.contractEndDate = contractEndDate.getTime();
        } else {
            stMSupplementalDiscMasterCacheModel.contractEndDate = Long.MIN_VALUE;
        }

        return stMSupplementalDiscMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{actualDiscountRate2=");
        sb.append(getActualDiscountRate2());
        sb.append(", actualDiscountRate1=");
        sb.append(getActualDiscountRate1());
        sb.append(", marketType=");
        sb.append(getMarketType());
        sb.append(", actualMethodology=");
        sb.append(getActualMethodology());
        sb.append(", actualContractPrice=");
        sb.append(getActualContractPrice());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", lastModifiedDate=");
        sb.append(getLastModifiedDate());
        sb.append(", projectionDetailsSid=");
        sb.append(getProjectionDetailsSid());
        sb.append(", actualDiscount=");
        sb.append(getActualDiscount());
        sb.append(", sessionId=");
        sb.append(getSessionId());
        sb.append(", checkRecord=");
        sb.append(getCheckRecord());
        sb.append(", contractEndDate=");
        sb.append(getContractEndDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.StMSupplementalDiscMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>actualDiscountRate2</column-name><column-value><![CDATA[");
        sb.append(getActualDiscountRate2());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>actualDiscountRate1</column-name><column-value><![CDATA[");
        sb.append(getActualDiscountRate1());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketType</column-name><column-value><![CDATA[");
        sb.append(getMarketType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>actualMethodology</column-name><column-value><![CDATA[");
        sb.append(getActualMethodology());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>actualContractPrice</column-name><column-value><![CDATA[");
        sb.append(getActualContractPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
        sb.append(getLastModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>actualDiscount</column-name><column-value><![CDATA[");
        sb.append(getActualDiscount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sessionId</column-name><column-value><![CDATA[");
        sb.append(getSessionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>checkRecord</column-name><column-value><![CDATA[");
        sb.append(getCheckRecord());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contractEndDate</column-name><column-value><![CDATA[");
        sb.append(getContractEndDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
