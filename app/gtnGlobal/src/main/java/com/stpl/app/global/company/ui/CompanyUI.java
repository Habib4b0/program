package com.stpl.app.global.company.ui;

import com.stpl.app.global.abstractsearch.util.ConstantUtil;
import com.stpl.app.global.abstractsearch.view.AbstractSearchView;
import com.stpl.app.global.common.dto.SessionDTO;
import com.stpl.app.global.common.util.HelperListUtil;
import com.stpl.app.global.company.ui.view.CompanyAddView;
import com.stpl.app.security.StplSecurity;
import com.stpl.app.ui.DateToStringConverterFactory;
import com.stpl.app.util.CommonUIUtils;
import com.stpl.app.util.ConstantsUtils;
import com.stpl.app.util.ErrorCodeUtil;
import com.stpl.app.util.ErrorCodes;
import com.stpl.portal.kernel.exception.PortalException;
import com.stpl.portal.kernel.exception.SystemException;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.Navigator;
import com.vaadin.server.VaadinRequest;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.UI;
import de.steinwedel.messagebox.ButtonId;
import de.steinwedel.messagebox.Icon;
import de.steinwedel.messagebox.MessageBox;
import de.steinwedel.messagebox.MessageBoxListener;
import javax.portlet.PortletMode;
import org.jboss.logging.Logger;

/**
 * The Class CompanyUI to get the company User Interface.
 */
@SuppressWarnings("serial")
//@PreserveOnRefresh
public class CompanyUI extends UI {

    /**
     * The Constant LOGGER to track CompanyUI.
     */
    private final static Logger LOGGER = Logger.getLogger(CompanyUI.class);
    /**
     * The SessionDTO
     */
    SessionDTO sessionDTO = new SessionDTO();

    /**
     * To initialize the UI.
     *
     * @param request
     */
    @AutoGenerated
    /**
     * The navigator
     */
    Navigator navigator;
    PortletMode customMode;

    @Override
    public void init(final VaadinRequest request) {
        try {
            LOGGER.info("inside init company");
            CommonUIUtils.beforeUnloadCloseUi(this, sessionDTO, ConstantUtil.COMPANY_MAST);
            addStyleName(ConstantsUtils.BOOTSTRAP);
            addStyleName(ConstantsUtils.BOOTSTRAP_BB);
            final String userId = request.getRemoteUser();
            final String sessionId = request.getWrappedSession().getId();
            VaadinSession.getCurrent().setAttribute(ConstantsUtils.SESSION_ID, sessionId);
            VaadinSession.getCurrent().setAttribute(ConstantsUtils.USER_ID, userId);
            VaadinSession.getCurrent().setAttribute("parentCompanySystemId", 0);
            VaadinSession.getCurrent().setConverterFactory(new DateToStringConverterFactory());
            navigator = new Navigator(this, this);
            VaadinSession.getCurrent().setAttribute("lockStatus", "N");
            VaadinSession.getCurrent().setAttribute("saveNotif", "N");
            StplSecurity.getUserName();
            HelperListUtil helperListUtil = HelperListUtil.getInstance();
            helperListUtil.loadValuesWithListName("companyMaster");
            AbstractSearchView abstractSearchView = new AbstractSearchView(ConstantUtil.COMPANY_MAST, sessionDTO);
            LOGGER.info("USER_ID: " + userId);
            LOGGER.info("SESSION_ID: " + sessionId);
            navigator.addView(AbstractSearchView.NAME, abstractSearchView);
            CompanyAddView companyAddView = new CompanyAddView(sessionDTO);
            navigator.addView(CompanyAddView.NAME, companyAddView);
            customMode = new PortletMode("config");

        }catch (SystemException ex) {
            LOGGER.error(ex);
            final String errorMsg = ErrorCodeUtil.getErrorMessage(ex);
            LOGGER.error(errorMsg);
            final MessageBox msg = MessageBox.showPlain(Icon.ERROR, ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1001), errorMsg, new MessageBoxListener() {
                /**
                 * The method is triggered when a button of the message box is
                 * pressed .
                 *
                 * @param buttonId The buttonId of the pressed button.
                 */
                @SuppressWarnings("PMD")
                public void buttonClicked(final ButtonId buttonId) {
                    // Do Nothing
                }
            }, ButtonId.OK);
            msg.getButton(ButtonId.OK).focus();
        }
        /**
         * The method is triggered when a button of the message box is
         * pressed .
         *
         * @param buttonId The buttonId of the pressed button.
         */
        // Do Nothing
         catch (Exception e) {
            LOGGER.error(e);
            final MessageBox msg = MessageBox.showPlain(Icon.ERROR, ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1001), ErrorCodeUtil.getEC(ErrorCodes.ERROR_CODE_1010), new MessageBoxListener() {
                /**
                 * The method is triggered when a button of the message box is
                 * pressed .
                 *
                 * @param buttonId The buttonId of the pressed button.
                 */
                @SuppressWarnings("PMD")
                public void buttonClicked(final ButtonId buttonId) {
                    // Do Nothing
                }
            }, ButtonId.OK);
            msg.getButton(ButtonId.OK).focus();
        }
    }
}
