package com.stpl.app.model.impl;

import com.stpl.app.model.ChActualSales;
import com.stpl.app.model.ChActualSalesModel;
import com.stpl.app.service.persistence.ChActualSalesPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ChActualSales service. Represents a row in the &quot;CH_ACTUAL_SALES&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.ChActualSalesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChActualSalesImpl}.
 * </p>
 *
 * @author
 * @see ChActualSalesImpl
 * @see com.stpl.app.model.ChActualSales
 * @see com.stpl.app.model.ChActualSalesModel
 * @generated
 */
public class ChActualSalesModelImpl extends BaseModelImpl<ChActualSales>
    implements ChActualSalesModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ch actual sales model instance should use the {@link com.stpl.app.model.ChActualSales} interface instead.
     */
    public static final String TABLE_NAME = "CH_ACTUAL_SALES";
    public static final Object[][] TABLE_COLUMNS = {
            { "CONTRACT_UNITS", Types.DOUBLE },
            { "PER_OF_BUSINESS", Types.DOUBLE },
            { "PERIOD_SID", Types.INTEGER },
            { "CONTRACT_SALES", Types.DOUBLE },
            { "PROJECTION_DETAILS_SID", Types.INTEGER },
            { "GTS_SALES", Types.DOUBLE }
        };
    public static final String TABLE_SQL_CREATE = "create table CH_ACTUAL_SALES (CONTRACT_UNITS DOUBLE,PER_OF_BUSINESS DOUBLE,PERIOD_SID INTEGER not null IDENTITY,CONTRACT_SALES DOUBLE,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,GTS_SALES DOUBLE,primary key (PERIOD_SID, PROJECTION_DETAILS_SID))";
    public static final String TABLE_SQL_DROP = "drop table CH_ACTUAL_SALES";
    public static final String ORDER_BY_JPQL = " ORDER BY chActualSales.id.periodSid ASC, chActualSales.id.projectionDetailsSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY CH_ACTUAL_SALES.PERIOD_SID ASC, CH_ACTUAL_SALES.PROJECTION_DETAILS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.ChActualSales"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.ChActualSales"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.ChActualSales"));
    private static ClassLoader _classLoader = ChActualSales.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ChActualSales.class
        };
    private double _contractUnits;
    private double _perOfBusiness;
    private int _periodSid;
    private double _contractSales;
    private int _projectionDetailsSid;
    private double _gtsSales;
    private ChActualSales _escapedModel;

    public ChActualSalesModelImpl() {
    }

    @Override
    public ChActualSalesPK getPrimaryKey() {
        return new ChActualSalesPK(_periodSid, _projectionDetailsSid);
    }

    @Override
    public void setPrimaryKey(ChActualSalesPK primaryKey) {
        setPeriodSid(primaryKey.periodSid);
        setProjectionDetailsSid(primaryKey.projectionDetailsSid);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new ChActualSalesPK(_periodSid, _projectionDetailsSid);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((ChActualSalesPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return ChActualSales.class;
    }

    @Override
    public String getModelClassName() {
        return ChActualSales.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("contractUnits", getContractUnits());
        attributes.put("perOfBusiness", getPerOfBusiness());
        attributes.put("periodSid", getPeriodSid());
        attributes.put("contractSales", getContractSales());
        attributes.put("projectionDetailsSid", getProjectionDetailsSid());
        attributes.put("gtsSales", getGtsSales());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Double contractUnits = (Double) attributes.get("contractUnits");

        if (contractUnits != null) {
            setContractUnits(contractUnits);
        }

        Double perOfBusiness = (Double) attributes.get("perOfBusiness");

        if (perOfBusiness != null) {
            setPerOfBusiness(perOfBusiness);
        }

        Integer periodSid = (Integer) attributes.get("periodSid");

        if (periodSid != null) {
            setPeriodSid(periodSid);
        }

        Double contractSales = (Double) attributes.get("contractSales");

        if (contractSales != null) {
            setContractSales(contractSales);
        }

        Integer projectionDetailsSid = (Integer) attributes.get(
                "projectionDetailsSid");

        if (projectionDetailsSid != null) {
            setProjectionDetailsSid(projectionDetailsSid);
        }

        Double gtsSales = (Double) attributes.get("gtsSales");

        if (gtsSales != null) {
            setGtsSales(gtsSales);
        }
    }

    @Override
    public double getContractUnits() {
        return _contractUnits;
    }

    @Override
    public void setContractUnits(double contractUnits) {
        _contractUnits = contractUnits;
    }

    @Override
    public double getPerOfBusiness() {
        return _perOfBusiness;
    }

    @Override
    public void setPerOfBusiness(double perOfBusiness) {
        _perOfBusiness = perOfBusiness;
    }

    @Override
    public int getPeriodSid() {
        return _periodSid;
    }

    @Override
    public void setPeriodSid(int periodSid) {
        _periodSid = periodSid;
    }

    @Override
    public double getContractSales() {
        return _contractSales;
    }

    @Override
    public void setContractSales(double contractSales) {
        _contractSales = contractSales;
    }

    @Override
    public int getProjectionDetailsSid() {
        return _projectionDetailsSid;
    }

    @Override
    public void setProjectionDetailsSid(int projectionDetailsSid) {
        _projectionDetailsSid = projectionDetailsSid;
    }

    @Override
    public double getGtsSales() {
        return _gtsSales;
    }

    @Override
    public void setGtsSales(double gtsSales) {
        _gtsSales = gtsSales;
    }

    @Override
    public ChActualSales toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ChActualSales) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ChActualSalesImpl chActualSalesImpl = new ChActualSalesImpl();

        chActualSalesImpl.setContractUnits(getContractUnits());
        chActualSalesImpl.setPerOfBusiness(getPerOfBusiness());
        chActualSalesImpl.setPeriodSid(getPeriodSid());
        chActualSalesImpl.setContractSales(getContractSales());
        chActualSalesImpl.setProjectionDetailsSid(getProjectionDetailsSid());
        chActualSalesImpl.setGtsSales(getGtsSales());

        chActualSalesImpl.resetOriginalValues();

        return chActualSalesImpl;
    }

    @Override
    public int compareTo(ChActualSales chActualSales) {
        ChActualSalesPK primaryKey = chActualSales.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ChActualSales)) {
            return false;
        }

        ChActualSales chActualSales = (ChActualSales) obj;

        ChActualSalesPK primaryKey = chActualSales.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ChActualSales> toCacheModel() {
        ChActualSalesCacheModel chActualSalesCacheModel = new ChActualSalesCacheModel();

        chActualSalesCacheModel.contractUnits = getContractUnits();

        chActualSalesCacheModel.perOfBusiness = getPerOfBusiness();

        chActualSalesCacheModel.periodSid = getPeriodSid();

        chActualSalesCacheModel.contractSales = getContractSales();

        chActualSalesCacheModel.projectionDetailsSid = getProjectionDetailsSid();

        chActualSalesCacheModel.gtsSales = getGtsSales();

        return chActualSalesCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{contractUnits=");
        sb.append(getContractUnits());
        sb.append(", perOfBusiness=");
        sb.append(getPerOfBusiness());
        sb.append(", periodSid=");
        sb.append(getPeriodSid());
        sb.append(", contractSales=");
        sb.append(getContractSales());
        sb.append(", projectionDetailsSid=");
        sb.append(getProjectionDetailsSid());
        sb.append(", gtsSales=");
        sb.append(getGtsSales());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.ChActualSales");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>contractUnits</column-name><column-value><![CDATA[");
        sb.append(getContractUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>perOfBusiness</column-name><column-value><![CDATA[");
        sb.append(getPerOfBusiness());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>periodSid</column-name><column-value><![CDATA[");
        sb.append(getPeriodSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contractSales</column-name><column-value><![CDATA[");
        sb.append(getContractSales());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>gtsSales</column-name><column-value><![CDATA[");
        sb.append(getGtsSales());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
