package com.stpl.app.model.impl;

import com.stpl.app.model.ChDiscountProjMaster;
import com.stpl.app.model.ChDiscountProjMasterModel;
import com.stpl.app.service.persistence.ChDiscountProjMasterPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ChDiscountProjMaster service. Represents a row in the &quot;CH_DISCOUNT_PROJ_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.ChDiscountProjMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChDiscountProjMasterImpl}.
 * </p>
 *
 * @author
 * @see ChDiscountProjMasterImpl
 * @see com.stpl.app.model.ChDiscountProjMaster
 * @see com.stpl.app.model.ChDiscountProjMasterModel
 * @generated
 */
public class ChDiscountProjMasterModelImpl extends BaseModelImpl<ChDiscountProjMaster>
    implements ChDiscountProjMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ch discount proj master model instance should use the {@link com.stpl.app.model.ChDiscountProjMaster} interface instead.
     */
    public static final String TABLE_NAME = "CH_DISCOUNT_PROJ_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "SELECTED_PERIODS", Types.VARCHAR },
            { "CHECK_RECORD", Types.BOOLEAN },
            { "PRICE_GROUP_TYPE", Types.VARCHAR },
            { "PROJECTION_DETAILS_SID", Types.INTEGER },
            { "BASELINE_PERIODS", Types.VARCHAR },
            { "NET_FLAG", Types.VARCHAR },
            { "METHODOLOGY", Types.VARCHAR },
            { "RS_MODEL_SID", Types.INTEGER },
            { "DISCOUNT_TYPE", Types.VARCHAR },
            { "PROJECTED_TYPE", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table CH_DISCOUNT_PROJ_MASTER (SELECTED_PERIODS VARCHAR(75) null,CHECK_RECORD BOOLEAN,PRICE_GROUP_TYPE VARCHAR(75) null,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,BASELINE_PERIODS VARCHAR(75) null,NET_FLAG VARCHAR(75) null,METHODOLOGY VARCHAR(75) null,RS_MODEL_SID INTEGER not null IDENTITY,DISCOUNT_TYPE VARCHAR(75) null,PROJECTED_TYPE VARCHAR(75) null,primary key (PROJECTION_DETAILS_SID, RS_MODEL_SID))";
    public static final String TABLE_SQL_DROP = "drop table CH_DISCOUNT_PROJ_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY chDiscountProjMaster.id.projectionDetailsSid ASC, chDiscountProjMaster.id.rsModelSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY CH_DISCOUNT_PROJ_MASTER.PROJECTION_DETAILS_SID ASC, CH_DISCOUNT_PROJ_MASTER.RS_MODEL_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.ChDiscountProjMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.ChDiscountProjMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.ChDiscountProjMaster"));
    private static ClassLoader _classLoader = ChDiscountProjMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ChDiscountProjMaster.class
        };
    private String _selectedPeriods;
    private boolean _checkRecord;
    private String _priceGroupType;
    private int _projectionDetailsSid;
    private String _baselinePeriods;
    private String _netFlag;
    private String _methodology;
    private int _rsModelSid;
    private String _discountType;
    private String _projectedType;
    private ChDiscountProjMaster _escapedModel;

    public ChDiscountProjMasterModelImpl() {
    }

    @Override
    public ChDiscountProjMasterPK getPrimaryKey() {
        return new ChDiscountProjMasterPK(_projectionDetailsSid, _rsModelSid);
    }

    @Override
    public void setPrimaryKey(ChDiscountProjMasterPK primaryKey) {
        setProjectionDetailsSid(primaryKey.projectionDetailsSid);
        setRsModelSid(primaryKey.rsModelSid);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new ChDiscountProjMasterPK(_projectionDetailsSid, _rsModelSid);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((ChDiscountProjMasterPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return ChDiscountProjMaster.class;
    }

    @Override
    public String getModelClassName() {
        return ChDiscountProjMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("selectedPeriods", getSelectedPeriods());
        attributes.put("checkRecord", getCheckRecord());
        attributes.put("priceGroupType", getPriceGroupType());
        attributes.put("projectionDetailsSid", getProjectionDetailsSid());
        attributes.put("baselinePeriods", getBaselinePeriods());
        attributes.put("netFlag", getNetFlag());
        attributes.put("methodology", getMethodology());
        attributes.put("rsModelSid", getRsModelSid());
        attributes.put("discountType", getDiscountType());
        attributes.put("projectedType", getProjectedType());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String selectedPeriods = (String) attributes.get("selectedPeriods");

        if (selectedPeriods != null) {
            setSelectedPeriods(selectedPeriods);
        }

        Boolean checkRecord = (Boolean) attributes.get("checkRecord");

        if (checkRecord != null) {
            setCheckRecord(checkRecord);
        }

        String priceGroupType = (String) attributes.get("priceGroupType");

        if (priceGroupType != null) {
            setPriceGroupType(priceGroupType);
        }

        Integer projectionDetailsSid = (Integer) attributes.get(
                "projectionDetailsSid");

        if (projectionDetailsSid != null) {
            setProjectionDetailsSid(projectionDetailsSid);
        }

        String baselinePeriods = (String) attributes.get("baselinePeriods");

        if (baselinePeriods != null) {
            setBaselinePeriods(baselinePeriods);
        }

        String netFlag = (String) attributes.get("netFlag");

        if (netFlag != null) {
            setNetFlag(netFlag);
        }

        String methodology = (String) attributes.get("methodology");

        if (methodology != null) {
            setMethodology(methodology);
        }

        Integer rsModelSid = (Integer) attributes.get("rsModelSid");

        if (rsModelSid != null) {
            setRsModelSid(rsModelSid);
        }

        String discountType = (String) attributes.get("discountType");

        if (discountType != null) {
            setDiscountType(discountType);
        }

        String projectedType = (String) attributes.get("projectedType");

        if (projectedType != null) {
            setProjectedType(projectedType);
        }
    }

    @Override
    public String getSelectedPeriods() {
        if (_selectedPeriods == null) {
            return StringPool.BLANK;
        } else {
            return _selectedPeriods;
        }
    }

    @Override
    public void setSelectedPeriods(String selectedPeriods) {
        _selectedPeriods = selectedPeriods;
    }

    @Override
    public boolean getCheckRecord() {
        return _checkRecord;
    }

    @Override
    public boolean isCheckRecord() {
        return _checkRecord;
    }

    @Override
    public void setCheckRecord(boolean checkRecord) {
        _checkRecord = checkRecord;
    }

    @Override
    public String getPriceGroupType() {
        if (_priceGroupType == null) {
            return StringPool.BLANK;
        } else {
            return _priceGroupType;
        }
    }

    @Override
    public void setPriceGroupType(String priceGroupType) {
        _priceGroupType = priceGroupType;
    }

    @Override
    public int getProjectionDetailsSid() {
        return _projectionDetailsSid;
    }

    @Override
    public void setProjectionDetailsSid(int projectionDetailsSid) {
        _projectionDetailsSid = projectionDetailsSid;
    }

    @Override
    public String getBaselinePeriods() {
        if (_baselinePeriods == null) {
            return StringPool.BLANK;
        } else {
            return _baselinePeriods;
        }
    }

    @Override
    public void setBaselinePeriods(String baselinePeriods) {
        _baselinePeriods = baselinePeriods;
    }

    @Override
    public String getNetFlag() {
        if (_netFlag == null) {
            return StringPool.BLANK;
        } else {
            return _netFlag;
        }
    }

    @Override
    public void setNetFlag(String netFlag) {
        _netFlag = netFlag;
    }

    @Override
    public String getMethodology() {
        if (_methodology == null) {
            return StringPool.BLANK;
        } else {
            return _methodology;
        }
    }

    @Override
    public void setMethodology(String methodology) {
        _methodology = methodology;
    }

    @Override
    public int getRsModelSid() {
        return _rsModelSid;
    }

    @Override
    public void setRsModelSid(int rsModelSid) {
        _rsModelSid = rsModelSid;
    }

    @Override
    public String getDiscountType() {
        if (_discountType == null) {
            return StringPool.BLANK;
        } else {
            return _discountType;
        }
    }

    @Override
    public void setDiscountType(String discountType) {
        _discountType = discountType;
    }

    @Override
    public String getProjectedType() {
        if (_projectedType == null) {
            return StringPool.BLANK;
        } else {
            return _projectedType;
        }
    }

    @Override
    public void setProjectedType(String projectedType) {
        _projectedType = projectedType;
    }

    @Override
    public ChDiscountProjMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ChDiscountProjMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ChDiscountProjMasterImpl chDiscountProjMasterImpl = new ChDiscountProjMasterImpl();

        chDiscountProjMasterImpl.setSelectedPeriods(getSelectedPeriods());
        chDiscountProjMasterImpl.setCheckRecord(getCheckRecord());
        chDiscountProjMasterImpl.setPriceGroupType(getPriceGroupType());
        chDiscountProjMasterImpl.setProjectionDetailsSid(getProjectionDetailsSid());
        chDiscountProjMasterImpl.setBaselinePeriods(getBaselinePeriods());
        chDiscountProjMasterImpl.setNetFlag(getNetFlag());
        chDiscountProjMasterImpl.setMethodology(getMethodology());
        chDiscountProjMasterImpl.setRsModelSid(getRsModelSid());
        chDiscountProjMasterImpl.setDiscountType(getDiscountType());
        chDiscountProjMasterImpl.setProjectedType(getProjectedType());

        chDiscountProjMasterImpl.resetOriginalValues();

        return chDiscountProjMasterImpl;
    }

    @Override
    public int compareTo(ChDiscountProjMaster chDiscountProjMaster) {
        ChDiscountProjMasterPK primaryKey = chDiscountProjMaster.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ChDiscountProjMaster)) {
            return false;
        }

        ChDiscountProjMaster chDiscountProjMaster = (ChDiscountProjMaster) obj;

        ChDiscountProjMasterPK primaryKey = chDiscountProjMaster.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ChDiscountProjMaster> toCacheModel() {
        ChDiscountProjMasterCacheModel chDiscountProjMasterCacheModel = new ChDiscountProjMasterCacheModel();

        chDiscountProjMasterCacheModel.selectedPeriods = getSelectedPeriods();

        String selectedPeriods = chDiscountProjMasterCacheModel.selectedPeriods;

        if ((selectedPeriods != null) && (selectedPeriods.length() == 0)) {
            chDiscountProjMasterCacheModel.selectedPeriods = null;
        }

        chDiscountProjMasterCacheModel.checkRecord = getCheckRecord();

        chDiscountProjMasterCacheModel.priceGroupType = getPriceGroupType();

        String priceGroupType = chDiscountProjMasterCacheModel.priceGroupType;

        if ((priceGroupType != null) && (priceGroupType.length() == 0)) {
            chDiscountProjMasterCacheModel.priceGroupType = null;
        }

        chDiscountProjMasterCacheModel.projectionDetailsSid = getProjectionDetailsSid();

        chDiscountProjMasterCacheModel.baselinePeriods = getBaselinePeriods();

        String baselinePeriods = chDiscountProjMasterCacheModel.baselinePeriods;

        if ((baselinePeriods != null) && (baselinePeriods.length() == 0)) {
            chDiscountProjMasterCacheModel.baselinePeriods = null;
        }

        chDiscountProjMasterCacheModel.netFlag = getNetFlag();

        String netFlag = chDiscountProjMasterCacheModel.netFlag;

        if ((netFlag != null) && (netFlag.length() == 0)) {
            chDiscountProjMasterCacheModel.netFlag = null;
        }

        chDiscountProjMasterCacheModel.methodology = getMethodology();

        String methodology = chDiscountProjMasterCacheModel.methodology;

        if ((methodology != null) && (methodology.length() == 0)) {
            chDiscountProjMasterCacheModel.methodology = null;
        }

        chDiscountProjMasterCacheModel.rsModelSid = getRsModelSid();

        chDiscountProjMasterCacheModel.discountType = getDiscountType();

        String discountType = chDiscountProjMasterCacheModel.discountType;

        if ((discountType != null) && (discountType.length() == 0)) {
            chDiscountProjMasterCacheModel.discountType = null;
        }

        chDiscountProjMasterCacheModel.projectedType = getProjectedType();

        String projectedType = chDiscountProjMasterCacheModel.projectedType;

        if ((projectedType != null) && (projectedType.length() == 0)) {
            chDiscountProjMasterCacheModel.projectedType = null;
        }

        return chDiscountProjMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{selectedPeriods=");
        sb.append(getSelectedPeriods());
        sb.append(", checkRecord=");
        sb.append(getCheckRecord());
        sb.append(", priceGroupType=");
        sb.append(getPriceGroupType());
        sb.append(", projectionDetailsSid=");
        sb.append(getProjectionDetailsSid());
        sb.append(", baselinePeriods=");
        sb.append(getBaselinePeriods());
        sb.append(", netFlag=");
        sb.append(getNetFlag());
        sb.append(", methodology=");
        sb.append(getMethodology());
        sb.append(", rsModelSid=");
        sb.append(getRsModelSid());
        sb.append(", discountType=");
        sb.append(getDiscountType());
        sb.append(", projectedType=");
        sb.append(getProjectedType());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.ChDiscountProjMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>selectedPeriods</column-name><column-value><![CDATA[");
        sb.append(getSelectedPeriods());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>checkRecord</column-name><column-value><![CDATA[");
        sb.append(getCheckRecord());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceGroupType</column-name><column-value><![CDATA[");
        sb.append(getPriceGroupType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baselinePeriods</column-name><column-value><![CDATA[");
        sb.append(getBaselinePeriods());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>netFlag</column-name><column-value><![CDATA[");
        sb.append(getNetFlag());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>methodology</column-name><column-value><![CDATA[");
        sb.append(getMethodology());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rsModelSid</column-name><column-value><![CDATA[");
        sb.append(getRsModelSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discountType</column-name><column-value><![CDATA[");
        sb.append(getDiscountType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectedType</column-name><column-value><![CDATA[");
        sb.append(getProjectedType());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
