/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.parttwo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.parttwo.model.IvldCustomerGtsActual;
import com.stpl.app.parttwo.model.IvldCustomerGtsActualModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the IvldCustomerGtsActual service. Represents a row in the &quot;IVLD_CUSTOMER_GTS_ACTUAL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link IvldCustomerGtsActualModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IvldCustomerGtsActualImpl}.
 * </p>
 *
 * @author
 * @see IvldCustomerGtsActualImpl
 * @see IvldCustomerGtsActual
 * @see IvldCustomerGtsActualModel
 * @generated
 */
@ProviderType
public class IvldCustomerGtsActualModelImpl extends BaseModelImpl<IvldCustomerGtsActual>
	implements IvldCustomerGtsActualModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ivld customer gts actual model instance should use the {@link IvldCustomerGtsActual} interface instead.
	 */
	public static final String TABLE_NAME = "IVLD_CUSTOMER_GTS_ACTUAL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PARENT_ACCOUNT_ID", Types.VARCHAR },
			{ "IVLD_CUSTOMER_GTS_ACTUAL_SID", Types.INTEGER },
			{ "ACCOUNT_ID", Types.VARCHAR },
			{ "ITEM_ID", Types.VARCHAR },
			{ "ORDER_RECEIVED_DATE", Types.TIMESTAMP },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "ORDER_NUMBER", Types.VARCHAR },
			{ "ORGANIZATION_KEY", Types.VARCHAR },
			{ "SOURCE", Types.VARCHAR },
			{ "CREATED_BY", Types.VARCHAR },
			{ "CREATED_DATE", Types.VARCHAR },
			{ "ADD_CHG_DEL_INDICATOR", Types.VARCHAR },
			{ "ERROR_CODE", Types.VARCHAR },
			{ "ITEM_UOM", Types.VARCHAR },
			{ "INVOICE_NUMBER", Types.VARCHAR },
			{ "MODIFIED_BY", Types.VARCHAR },
			{ "INTF_INSERTED_DATE", Types.TIMESTAMP },
			{ "LOT_NO", Types.VARCHAR },
			{ "REPROCESSED_FLAG", Types.VARCHAR },
			{ "QUANTITY", Types.VARCHAR },
			{ "INVOICE_LINE_NUMBER", Types.VARCHAR },
			{ "CONTRACT_ID", Types.VARCHAR },
			{ "REASON_FOR_FAILURE", Types.VARCHAR },
			{ "AMOUNT", Types.VARCHAR },
			{ "INVOICE_DATE", Types.TIMESTAMP },
			{ "CUSTOMER_GTS_ACTUAL_INTF_ID", Types.VARCHAR },
			{ "BATCH_ID", Types.VARCHAR },
			{ "SALES_ID", Types.VARCHAR },
			{ "ERROR_FIELD", Types.VARCHAR },
			{ "CHECK_RECORD", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PARENT_ACCOUNT_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IVLD_CUSTOMER_GTS_ACTUAL_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ACCOUNT_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ORDER_RECEIVED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ORDER_NUMBER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ORGANIZATION_KEY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ADD_CHG_DEL_INDICATOR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ERROR_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_UOM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INVOICE_NUMBER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INTF_INSERTED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("LOT_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REPROCESSED_FLAG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("QUANTITY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INVOICE_LINE_NUMBER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CONTRACT_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REASON_FOR_FAILURE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("AMOUNT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INVOICE_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CUSTOMER_GTS_ACTUAL_INTF_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SALES_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ERROR_FIELD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CHECK_RECORD", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table IVLD_CUSTOMER_GTS_ACTUAL (PARENT_ACCOUNT_ID VARCHAR(75) null,IVLD_CUSTOMER_GTS_ACTUAL_SID INTEGER not null primary key IDENTITY,ACCOUNT_ID VARCHAR(75) null,ITEM_ID VARCHAR(75) null,ORDER_RECEIVED_DATE DATE null,MODIFIED_DATE DATE null,ORDER_NUMBER VARCHAR(75) null,ORGANIZATION_KEY VARCHAR(75) null,SOURCE VARCHAR(75) null,CREATED_BY VARCHAR(75) null,CREATED_DATE VARCHAR(75) null,ADD_CHG_DEL_INDICATOR VARCHAR(75) null,ERROR_CODE VARCHAR(75) null,ITEM_UOM VARCHAR(75) null,INVOICE_NUMBER VARCHAR(75) null,MODIFIED_BY VARCHAR(75) null,INTF_INSERTED_DATE DATE null,LOT_NO VARCHAR(75) null,REPROCESSED_FLAG VARCHAR(75) null,QUANTITY VARCHAR(75) null,INVOICE_LINE_NUMBER VARCHAR(75) null,CONTRACT_ID VARCHAR(75) null,REASON_FOR_FAILURE VARCHAR(75) null,AMOUNT VARCHAR(75) null,INVOICE_DATE DATE null,CUSTOMER_GTS_ACTUAL_INTF_ID VARCHAR(75) null,BATCH_ID VARCHAR(75) null,SALES_ID VARCHAR(75) null,ERROR_FIELD VARCHAR(75) null,CHECK_RECORD BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table IVLD_CUSTOMER_GTS_ACTUAL";
	public static final String ORDER_BY_JPQL = " ORDER BY ivldCustomerGtsActual.ivldCustomerGtsActualSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY IVLD_CUSTOMER_GTS_ACTUAL.IVLD_CUSTOMER_GTS_ACTUAL_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.parttwo.model.IvldCustomerGtsActual"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.parttwo.model.IvldCustomerGtsActual"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.parttwo.model.IvldCustomerGtsActual"));

	public IvldCustomerGtsActualModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _ivldCustomerGtsActualSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setIvldCustomerGtsActualSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ivldCustomerGtsActualSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return IvldCustomerGtsActual.class;
	}

	@Override
	public String getModelClassName() {
		return IvldCustomerGtsActual.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("parentAccountId", getParentAccountId());
		attributes.put("ivldCustomerGtsActualSid", getIvldCustomerGtsActualSid());
		attributes.put("accountId", getAccountId());
		attributes.put("itemId", getItemId());
		attributes.put("orderReceivedDate", getOrderReceivedDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("orderNumber", getOrderNumber());
		attributes.put("organizationKey", getOrganizationKey());
		attributes.put("source", getSource());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("addChgDelIndicator", getAddChgDelIndicator());
		attributes.put("errorCode", getErrorCode());
		attributes.put("itemUom", getItemUom());
		attributes.put("invoiceNumber", getInvoiceNumber());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("intfInsertedDate", getIntfInsertedDate());
		attributes.put("lotNo", getLotNo());
		attributes.put("reprocessedFlag", getReprocessedFlag());
		attributes.put("quantity", getQuantity());
		attributes.put("invoiceLineNumber", getInvoiceLineNumber());
		attributes.put("contractId", getContractId());
		attributes.put("reasonForFailure", getReasonForFailure());
		attributes.put("amount", getAmount());
		attributes.put("invoiceDate", getInvoiceDate());
		attributes.put("customerGtsActualIntfId", getCustomerGtsActualIntfId());
		attributes.put("batchId", getBatchId());
		attributes.put("salesId", getSalesId());
		attributes.put("errorField", getErrorField());
		attributes.put("checkRecord", getCheckRecord());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String parentAccountId = (String)attributes.get("parentAccountId");

		if (parentAccountId != null) {
			setParentAccountId(parentAccountId);
		}

		Integer ivldCustomerGtsActualSid = (Integer)attributes.get(
				"ivldCustomerGtsActualSid");

		if (ivldCustomerGtsActualSid != null) {
			setIvldCustomerGtsActualSid(ivldCustomerGtsActualSid);
		}

		String accountId = (String)attributes.get("accountId");

		if (accountId != null) {
			setAccountId(accountId);
		}

		String itemId = (String)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		Date orderReceivedDate = (Date)attributes.get("orderReceivedDate");

		if (orderReceivedDate != null) {
			setOrderReceivedDate(orderReceivedDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String orderNumber = (String)attributes.get("orderNumber");

		if (orderNumber != null) {
			setOrderNumber(orderNumber);
		}

		String organizationKey = (String)attributes.get("organizationKey");

		if (organizationKey != null) {
			setOrganizationKey(organizationKey);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String createdDate = (String)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String addChgDelIndicator = (String)attributes.get("addChgDelIndicator");

		if (addChgDelIndicator != null) {
			setAddChgDelIndicator(addChgDelIndicator);
		}

		String errorCode = (String)attributes.get("errorCode");

		if (errorCode != null) {
			setErrorCode(errorCode);
		}

		String itemUom = (String)attributes.get("itemUom");

		if (itemUom != null) {
			setItemUom(itemUom);
		}

		String invoiceNumber = (String)attributes.get("invoiceNumber");

		if (invoiceNumber != null) {
			setInvoiceNumber(invoiceNumber);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date intfInsertedDate = (Date)attributes.get("intfInsertedDate");

		if (intfInsertedDate != null) {
			setIntfInsertedDate(intfInsertedDate);
		}

		String lotNo = (String)attributes.get("lotNo");

		if (lotNo != null) {
			setLotNo(lotNo);
		}

		String reprocessedFlag = (String)attributes.get("reprocessedFlag");

		if (reprocessedFlag != null) {
			setReprocessedFlag(reprocessedFlag);
		}

		String quantity = (String)attributes.get("quantity");

		if (quantity != null) {
			setQuantity(quantity);
		}

		String invoiceLineNumber = (String)attributes.get("invoiceLineNumber");

		if (invoiceLineNumber != null) {
			setInvoiceLineNumber(invoiceLineNumber);
		}

		String contractId = (String)attributes.get("contractId");

		if (contractId != null) {
			setContractId(contractId);
		}

		String reasonForFailure = (String)attributes.get("reasonForFailure");

		if (reasonForFailure != null) {
			setReasonForFailure(reasonForFailure);
		}

		String amount = (String)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		Date invoiceDate = (Date)attributes.get("invoiceDate");

		if (invoiceDate != null) {
			setInvoiceDate(invoiceDate);
		}

		String customerGtsActualIntfId = (String)attributes.get(
				"customerGtsActualIntfId");

		if (customerGtsActualIntfId != null) {
			setCustomerGtsActualIntfId(customerGtsActualIntfId);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		String salesId = (String)attributes.get("salesId");

		if (salesId != null) {
			setSalesId(salesId);
		}

		String errorField = (String)attributes.get("errorField");

		if (errorField != null) {
			setErrorField(errorField);
		}

		Boolean checkRecord = (Boolean)attributes.get("checkRecord");

		if (checkRecord != null) {
			setCheckRecord(checkRecord);
		}
	}

	@Override
	public String getParentAccountId() {
		if (_parentAccountId == null) {
			return StringPool.BLANK;
		}
		else {
			return _parentAccountId;
		}
	}

	@Override
	public void setParentAccountId(String parentAccountId) {
		_parentAccountId = parentAccountId;
	}

	@Override
	public int getIvldCustomerGtsActualSid() {
		return _ivldCustomerGtsActualSid;
	}

	@Override
	public void setIvldCustomerGtsActualSid(int ivldCustomerGtsActualSid) {
		_ivldCustomerGtsActualSid = ivldCustomerGtsActualSid;
	}

	@Override
	public String getAccountId() {
		if (_accountId == null) {
			return StringPool.BLANK;
		}
		else {
			return _accountId;
		}
	}

	@Override
	public void setAccountId(String accountId) {
		_accountId = accountId;
	}

	@Override
	public String getItemId() {
		if (_itemId == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemId;
		}
	}

	@Override
	public void setItemId(String itemId) {
		_itemId = itemId;
	}

	@Override
	public Date getOrderReceivedDate() {
		return _orderReceivedDate;
	}

	@Override
	public void setOrderReceivedDate(Date orderReceivedDate) {
		_orderReceivedDate = orderReceivedDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getOrderNumber() {
		if (_orderNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _orderNumber;
		}
	}

	@Override
	public void setOrderNumber(String orderNumber) {
		_orderNumber = orderNumber;
	}

	@Override
	public String getOrganizationKey() {
		if (_organizationKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _organizationKey;
		}
	}

	@Override
	public void setOrganizationKey(String organizationKey) {
		_organizationKey = organizationKey;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getCreatedDate() {
		if (_createdDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdDate;
		}
	}

	@Override
	public void setCreatedDate(String createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getAddChgDelIndicator() {
		if (_addChgDelIndicator == null) {
			return StringPool.BLANK;
		}
		else {
			return _addChgDelIndicator;
		}
	}

	@Override
	public void setAddChgDelIndicator(String addChgDelIndicator) {
		_addChgDelIndicator = addChgDelIndicator;
	}

	@Override
	public String getErrorCode() {
		if (_errorCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _errorCode;
		}
	}

	@Override
	public void setErrorCode(String errorCode) {
		_errorCode = errorCode;
	}

	@Override
	public String getItemUom() {
		if (_itemUom == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemUom;
		}
	}

	@Override
	public void setItemUom(String itemUom) {
		_itemUom = itemUom;
	}

	@Override
	public String getInvoiceNumber() {
		if (_invoiceNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _invoiceNumber;
		}
	}

	@Override
	public void setInvoiceNumber(String invoiceNumber) {
		_invoiceNumber = invoiceNumber;
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getIntfInsertedDate() {
		return _intfInsertedDate;
	}

	@Override
	public void setIntfInsertedDate(Date intfInsertedDate) {
		_intfInsertedDate = intfInsertedDate;
	}

	@Override
	public String getLotNo() {
		if (_lotNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _lotNo;
		}
	}

	@Override
	public void setLotNo(String lotNo) {
		_lotNo = lotNo;
	}

	@Override
	public String getReprocessedFlag() {
		if (_reprocessedFlag == null) {
			return StringPool.BLANK;
		}
		else {
			return _reprocessedFlag;
		}
	}

	@Override
	public void setReprocessedFlag(String reprocessedFlag) {
		_reprocessedFlag = reprocessedFlag;
	}

	@Override
	public String getQuantity() {
		if (_quantity == null) {
			return StringPool.BLANK;
		}
		else {
			return _quantity;
		}
	}

	@Override
	public void setQuantity(String quantity) {
		_quantity = quantity;
	}

	@Override
	public String getInvoiceLineNumber() {
		if (_invoiceLineNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _invoiceLineNumber;
		}
	}

	@Override
	public void setInvoiceLineNumber(String invoiceLineNumber) {
		_invoiceLineNumber = invoiceLineNumber;
	}

	@Override
	public String getContractId() {
		if (_contractId == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractId;
		}
	}

	@Override
	public void setContractId(String contractId) {
		_contractId = contractId;
	}

	@Override
	public String getReasonForFailure() {
		if (_reasonForFailure == null) {
			return StringPool.BLANK;
		}
		else {
			return _reasonForFailure;
		}
	}

	@Override
	public void setReasonForFailure(String reasonForFailure) {
		_reasonForFailure = reasonForFailure;
	}

	@Override
	public String getAmount() {
		if (_amount == null) {
			return StringPool.BLANK;
		}
		else {
			return _amount;
		}
	}

	@Override
	public void setAmount(String amount) {
		_amount = amount;
	}

	@Override
	public Date getInvoiceDate() {
		return _invoiceDate;
	}

	@Override
	public void setInvoiceDate(Date invoiceDate) {
		_invoiceDate = invoiceDate;
	}

	@Override
	public String getCustomerGtsActualIntfId() {
		if (_customerGtsActualIntfId == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerGtsActualIntfId;
		}
	}

	@Override
	public void setCustomerGtsActualIntfId(String customerGtsActualIntfId) {
		_customerGtsActualIntfId = customerGtsActualIntfId;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public String getSalesId() {
		if (_salesId == null) {
			return StringPool.BLANK;
		}
		else {
			return _salesId;
		}
	}

	@Override
	public void setSalesId(String salesId) {
		_salesId = salesId;
	}

	@Override
	public String getErrorField() {
		if (_errorField == null) {
			return StringPool.BLANK;
		}
		else {
			return _errorField;
		}
	}

	@Override
	public void setErrorField(String errorField) {
		_errorField = errorField;
	}

	@Override
	public boolean getCheckRecord() {
		return _checkRecord;
	}

	@Override
	public boolean isCheckRecord() {
		return _checkRecord;
	}

	@Override
	public void setCheckRecord(boolean checkRecord) {
		_checkRecord = checkRecord;
	}

	@Override
	public IvldCustomerGtsActual toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (IvldCustomerGtsActual)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IvldCustomerGtsActualImpl ivldCustomerGtsActualImpl = new IvldCustomerGtsActualImpl();

		ivldCustomerGtsActualImpl.setParentAccountId(getParentAccountId());
		ivldCustomerGtsActualImpl.setIvldCustomerGtsActualSid(getIvldCustomerGtsActualSid());
		ivldCustomerGtsActualImpl.setAccountId(getAccountId());
		ivldCustomerGtsActualImpl.setItemId(getItemId());
		ivldCustomerGtsActualImpl.setOrderReceivedDate(getOrderReceivedDate());
		ivldCustomerGtsActualImpl.setModifiedDate(getModifiedDate());
		ivldCustomerGtsActualImpl.setOrderNumber(getOrderNumber());
		ivldCustomerGtsActualImpl.setOrganizationKey(getOrganizationKey());
		ivldCustomerGtsActualImpl.setSource(getSource());
		ivldCustomerGtsActualImpl.setCreatedBy(getCreatedBy());
		ivldCustomerGtsActualImpl.setCreatedDate(getCreatedDate());
		ivldCustomerGtsActualImpl.setAddChgDelIndicator(getAddChgDelIndicator());
		ivldCustomerGtsActualImpl.setErrorCode(getErrorCode());
		ivldCustomerGtsActualImpl.setItemUom(getItemUom());
		ivldCustomerGtsActualImpl.setInvoiceNumber(getInvoiceNumber());
		ivldCustomerGtsActualImpl.setModifiedBy(getModifiedBy());
		ivldCustomerGtsActualImpl.setIntfInsertedDate(getIntfInsertedDate());
		ivldCustomerGtsActualImpl.setLotNo(getLotNo());
		ivldCustomerGtsActualImpl.setReprocessedFlag(getReprocessedFlag());
		ivldCustomerGtsActualImpl.setQuantity(getQuantity());
		ivldCustomerGtsActualImpl.setInvoiceLineNumber(getInvoiceLineNumber());
		ivldCustomerGtsActualImpl.setContractId(getContractId());
		ivldCustomerGtsActualImpl.setReasonForFailure(getReasonForFailure());
		ivldCustomerGtsActualImpl.setAmount(getAmount());
		ivldCustomerGtsActualImpl.setInvoiceDate(getInvoiceDate());
		ivldCustomerGtsActualImpl.setCustomerGtsActualIntfId(getCustomerGtsActualIntfId());
		ivldCustomerGtsActualImpl.setBatchId(getBatchId());
		ivldCustomerGtsActualImpl.setSalesId(getSalesId());
		ivldCustomerGtsActualImpl.setErrorField(getErrorField());
		ivldCustomerGtsActualImpl.setCheckRecord(getCheckRecord());

		ivldCustomerGtsActualImpl.resetOriginalValues();

		return ivldCustomerGtsActualImpl;
	}

	@Override
	public int compareTo(IvldCustomerGtsActual ivldCustomerGtsActual) {
		int primaryKey = ivldCustomerGtsActual.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof IvldCustomerGtsActual)) {
			return false;
		}

		IvldCustomerGtsActual ivldCustomerGtsActual = (IvldCustomerGtsActual)obj;

		int primaryKey = ivldCustomerGtsActual.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<IvldCustomerGtsActual> toCacheModel() {
		IvldCustomerGtsActualCacheModel ivldCustomerGtsActualCacheModel = new IvldCustomerGtsActualCacheModel();

		ivldCustomerGtsActualCacheModel.parentAccountId = getParentAccountId();

		String parentAccountId = ivldCustomerGtsActualCacheModel.parentAccountId;

		if ((parentAccountId != null) && (parentAccountId.length() == 0)) {
			ivldCustomerGtsActualCacheModel.parentAccountId = null;
		}

		ivldCustomerGtsActualCacheModel.ivldCustomerGtsActualSid = getIvldCustomerGtsActualSid();

		ivldCustomerGtsActualCacheModel.accountId = getAccountId();

		String accountId = ivldCustomerGtsActualCacheModel.accountId;

		if ((accountId != null) && (accountId.length() == 0)) {
			ivldCustomerGtsActualCacheModel.accountId = null;
		}

		ivldCustomerGtsActualCacheModel.itemId = getItemId();

		String itemId = ivldCustomerGtsActualCacheModel.itemId;

		if ((itemId != null) && (itemId.length() == 0)) {
			ivldCustomerGtsActualCacheModel.itemId = null;
		}

		Date orderReceivedDate = getOrderReceivedDate();

		if (orderReceivedDate != null) {
			ivldCustomerGtsActualCacheModel.orderReceivedDate = orderReceivedDate.getTime();
		}
		else {
			ivldCustomerGtsActualCacheModel.orderReceivedDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ivldCustomerGtsActualCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ivldCustomerGtsActualCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ivldCustomerGtsActualCacheModel.orderNumber = getOrderNumber();

		String orderNumber = ivldCustomerGtsActualCacheModel.orderNumber;

		if ((orderNumber != null) && (orderNumber.length() == 0)) {
			ivldCustomerGtsActualCacheModel.orderNumber = null;
		}

		ivldCustomerGtsActualCacheModel.organizationKey = getOrganizationKey();

		String organizationKey = ivldCustomerGtsActualCacheModel.organizationKey;

		if ((organizationKey != null) && (organizationKey.length() == 0)) {
			ivldCustomerGtsActualCacheModel.organizationKey = null;
		}

		ivldCustomerGtsActualCacheModel.source = getSource();

		String source = ivldCustomerGtsActualCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			ivldCustomerGtsActualCacheModel.source = null;
		}

		ivldCustomerGtsActualCacheModel.createdBy = getCreatedBy();

		String createdBy = ivldCustomerGtsActualCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			ivldCustomerGtsActualCacheModel.createdBy = null;
		}

		ivldCustomerGtsActualCacheModel.createdDate = getCreatedDate();

		String createdDate = ivldCustomerGtsActualCacheModel.createdDate;

		if ((createdDate != null) && (createdDate.length() == 0)) {
			ivldCustomerGtsActualCacheModel.createdDate = null;
		}

		ivldCustomerGtsActualCacheModel.addChgDelIndicator = getAddChgDelIndicator();

		String addChgDelIndicator = ivldCustomerGtsActualCacheModel.addChgDelIndicator;

		if ((addChgDelIndicator != null) && (addChgDelIndicator.length() == 0)) {
			ivldCustomerGtsActualCacheModel.addChgDelIndicator = null;
		}

		ivldCustomerGtsActualCacheModel.errorCode = getErrorCode();

		String errorCode = ivldCustomerGtsActualCacheModel.errorCode;

		if ((errorCode != null) && (errorCode.length() == 0)) {
			ivldCustomerGtsActualCacheModel.errorCode = null;
		}

		ivldCustomerGtsActualCacheModel.itemUom = getItemUom();

		String itemUom = ivldCustomerGtsActualCacheModel.itemUom;

		if ((itemUom != null) && (itemUom.length() == 0)) {
			ivldCustomerGtsActualCacheModel.itemUom = null;
		}

		ivldCustomerGtsActualCacheModel.invoiceNumber = getInvoiceNumber();

		String invoiceNumber = ivldCustomerGtsActualCacheModel.invoiceNumber;

		if ((invoiceNumber != null) && (invoiceNumber.length() == 0)) {
			ivldCustomerGtsActualCacheModel.invoiceNumber = null;
		}

		ivldCustomerGtsActualCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = ivldCustomerGtsActualCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			ivldCustomerGtsActualCacheModel.modifiedBy = null;
		}

		Date intfInsertedDate = getIntfInsertedDate();

		if (intfInsertedDate != null) {
			ivldCustomerGtsActualCacheModel.intfInsertedDate = intfInsertedDate.getTime();
		}
		else {
			ivldCustomerGtsActualCacheModel.intfInsertedDate = Long.MIN_VALUE;
		}

		ivldCustomerGtsActualCacheModel.lotNo = getLotNo();

		String lotNo = ivldCustomerGtsActualCacheModel.lotNo;

		if ((lotNo != null) && (lotNo.length() == 0)) {
			ivldCustomerGtsActualCacheModel.lotNo = null;
		}

		ivldCustomerGtsActualCacheModel.reprocessedFlag = getReprocessedFlag();

		String reprocessedFlag = ivldCustomerGtsActualCacheModel.reprocessedFlag;

		if ((reprocessedFlag != null) && (reprocessedFlag.length() == 0)) {
			ivldCustomerGtsActualCacheModel.reprocessedFlag = null;
		}

		ivldCustomerGtsActualCacheModel.quantity = getQuantity();

		String quantity = ivldCustomerGtsActualCacheModel.quantity;

		if ((quantity != null) && (quantity.length() == 0)) {
			ivldCustomerGtsActualCacheModel.quantity = null;
		}

		ivldCustomerGtsActualCacheModel.invoiceLineNumber = getInvoiceLineNumber();

		String invoiceLineNumber = ivldCustomerGtsActualCacheModel.invoiceLineNumber;

		if ((invoiceLineNumber != null) && (invoiceLineNumber.length() == 0)) {
			ivldCustomerGtsActualCacheModel.invoiceLineNumber = null;
		}

		ivldCustomerGtsActualCacheModel.contractId = getContractId();

		String contractId = ivldCustomerGtsActualCacheModel.contractId;

		if ((contractId != null) && (contractId.length() == 0)) {
			ivldCustomerGtsActualCacheModel.contractId = null;
		}

		ivldCustomerGtsActualCacheModel.reasonForFailure = getReasonForFailure();

		String reasonForFailure = ivldCustomerGtsActualCacheModel.reasonForFailure;

		if ((reasonForFailure != null) && (reasonForFailure.length() == 0)) {
			ivldCustomerGtsActualCacheModel.reasonForFailure = null;
		}

		ivldCustomerGtsActualCacheModel.amount = getAmount();

		String amount = ivldCustomerGtsActualCacheModel.amount;

		if ((amount != null) && (amount.length() == 0)) {
			ivldCustomerGtsActualCacheModel.amount = null;
		}

		Date invoiceDate = getInvoiceDate();

		if (invoiceDate != null) {
			ivldCustomerGtsActualCacheModel.invoiceDate = invoiceDate.getTime();
		}
		else {
			ivldCustomerGtsActualCacheModel.invoiceDate = Long.MIN_VALUE;
		}

		ivldCustomerGtsActualCacheModel.customerGtsActualIntfId = getCustomerGtsActualIntfId();

		String customerGtsActualIntfId = ivldCustomerGtsActualCacheModel.customerGtsActualIntfId;

		if ((customerGtsActualIntfId != null) &&
				(customerGtsActualIntfId.length() == 0)) {
			ivldCustomerGtsActualCacheModel.customerGtsActualIntfId = null;
		}

		ivldCustomerGtsActualCacheModel.batchId = getBatchId();

		String batchId = ivldCustomerGtsActualCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			ivldCustomerGtsActualCacheModel.batchId = null;
		}

		ivldCustomerGtsActualCacheModel.salesId = getSalesId();

		String salesId = ivldCustomerGtsActualCacheModel.salesId;

		if ((salesId != null) && (salesId.length() == 0)) {
			ivldCustomerGtsActualCacheModel.salesId = null;
		}

		ivldCustomerGtsActualCacheModel.errorField = getErrorField();

		String errorField = ivldCustomerGtsActualCacheModel.errorField;

		if ((errorField != null) && (errorField.length() == 0)) {
			ivldCustomerGtsActualCacheModel.errorField = null;
		}

		ivldCustomerGtsActualCacheModel.checkRecord = getCheckRecord();

		return ivldCustomerGtsActualCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(61);

		sb.append("{parentAccountId=");
		sb.append(getParentAccountId());
		sb.append(", ivldCustomerGtsActualSid=");
		sb.append(getIvldCustomerGtsActualSid());
		sb.append(", accountId=");
		sb.append(getAccountId());
		sb.append(", itemId=");
		sb.append(getItemId());
		sb.append(", orderReceivedDate=");
		sb.append(getOrderReceivedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", orderNumber=");
		sb.append(getOrderNumber());
		sb.append(", organizationKey=");
		sb.append(getOrganizationKey());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", addChgDelIndicator=");
		sb.append(getAddChgDelIndicator());
		sb.append(", errorCode=");
		sb.append(getErrorCode());
		sb.append(", itemUom=");
		sb.append(getItemUom());
		sb.append(", invoiceNumber=");
		sb.append(getInvoiceNumber());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", intfInsertedDate=");
		sb.append(getIntfInsertedDate());
		sb.append(", lotNo=");
		sb.append(getLotNo());
		sb.append(", reprocessedFlag=");
		sb.append(getReprocessedFlag());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append(", invoiceLineNumber=");
		sb.append(getInvoiceLineNumber());
		sb.append(", contractId=");
		sb.append(getContractId());
		sb.append(", reasonForFailure=");
		sb.append(getReasonForFailure());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", invoiceDate=");
		sb.append(getInvoiceDate());
		sb.append(", customerGtsActualIntfId=");
		sb.append(getCustomerGtsActualIntfId());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", salesId=");
		sb.append(getSalesId());
		sb.append(", errorField=");
		sb.append(getErrorField());
		sb.append(", checkRecord=");
		sb.append(getCheckRecord());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(94);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.parttwo.model.IvldCustomerGtsActual");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>parentAccountId</column-name><column-value><![CDATA[");
		sb.append(getParentAccountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ivldCustomerGtsActualSid</column-name><column-value><![CDATA[");
		sb.append(getIvldCustomerGtsActualSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accountId</column-name><column-value><![CDATA[");
		sb.append(getAccountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderReceivedDate</column-name><column-value><![CDATA[");
		sb.append(getOrderReceivedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderNumber</column-name><column-value><![CDATA[");
		sb.append(getOrderNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationKey</column-name><column-value><![CDATA[");
		sb.append(getOrganizationKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addChgDelIndicator</column-name><column-value><![CDATA[");
		sb.append(getAddChgDelIndicator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorCode</column-name><column-value><![CDATA[");
		sb.append(getErrorCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemUom</column-name><column-value><![CDATA[");
		sb.append(getItemUom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>invoiceNumber</column-name><column-value><![CDATA[");
		sb.append(getInvoiceNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>intfInsertedDate</column-name><column-value><![CDATA[");
		sb.append(getIntfInsertedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lotNo</column-name><column-value><![CDATA[");
		sb.append(getLotNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reprocessedFlag</column-name><column-value><![CDATA[");
		sb.append(getReprocessedFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>invoiceLineNumber</column-name><column-value><![CDATA[");
		sb.append(getInvoiceLineNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractId</column-name><column-value><![CDATA[");
		sb.append(getContractId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reasonForFailure</column-name><column-value><![CDATA[");
		sb.append(getReasonForFailure());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>invoiceDate</column-name><column-value><![CDATA[");
		sb.append(getInvoiceDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerGtsActualIntfId</column-name><column-value><![CDATA[");
		sb.append(getCustomerGtsActualIntfId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>salesId</column-name><column-value><![CDATA[");
		sb.append(getSalesId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorField</column-name><column-value><![CDATA[");
		sb.append(getErrorField());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkRecord</column-name><column-value><![CDATA[");
		sb.append(getCheckRecord());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = IvldCustomerGtsActual.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			IvldCustomerGtsActual.class
		};
	private String _parentAccountId;
	private int _ivldCustomerGtsActualSid;
	private String _accountId;
	private String _itemId;
	private Date _orderReceivedDate;
	private Date _modifiedDate;
	private String _orderNumber;
	private String _organizationKey;
	private String _source;
	private String _createdBy;
	private String _createdDate;
	private String _addChgDelIndicator;
	private String _errorCode;
	private String _itemUom;
	private String _invoiceNumber;
	private String _modifiedBy;
	private Date _intfInsertedDate;
	private String _lotNo;
	private String _reprocessedFlag;
	private String _quantity;
	private String _invoiceLineNumber;
	private String _contractId;
	private String _reasonForFailure;
	private String _amount;
	private Date _invoiceDate;
	private String _customerGtsActualIntfId;
	private String _batchId;
	private String _salesId;
	private String _errorField;
	private boolean _checkRecord;
	private IvldCustomerGtsActual _escapedModel;
}