/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.parttwo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.parttwo.model.IvldItemIdentifier;
import com.stpl.app.parttwo.model.IvldItemIdentifierModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the IvldItemIdentifier service. Represents a row in the &quot;IVLD_ITEM_IDENTIFIER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link IvldItemIdentifierModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IvldItemIdentifierImpl}.
 * </p>
 *
 * @author
 * @see IvldItemIdentifierImpl
 * @see IvldItemIdentifier
 * @see IvldItemIdentifierModel
 * @generated
 */
@ProviderType
public class IvldItemIdentifierModelImpl extends BaseModelImpl<IvldItemIdentifier>
	implements IvldItemIdentifierModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ivld item identifier model instance should use the {@link IvldItemIdentifier} interface instead.
	 */
	public static final String TABLE_NAME = "IVLD_ITEM_IDENTIFIER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CREATED_BY", Types.VARCHAR },
			{ "IDENTIFIER_CODE_QUALIFIER_NAME", Types.VARCHAR },
			{ "IVLD_ITEM_IDENTIFIER_SID", Types.INTEGER },
			{ "ITEM_NO", Types.VARCHAR },
			{ "MODIFIED_BY", Types.VARCHAR },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "IDENTIFIER_CODE_QUALIFIER", Types.VARCHAR },
			{ "ITEM_ID", Types.VARCHAR },
			{ "END_DATE", Types.VARCHAR },
			{ "ERROR_FIELD", Types.VARCHAR },
			{ "START_DATE", Types.VARCHAR },
			{ "BATCH_ID", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "ITEM_NAME", Types.VARCHAR },
			{ "ERROR_CODE", Types.VARCHAR },
			{ "REPROCESSED_FLAG", Types.VARCHAR },
			{ "ITEM_IDENTIFIER", Types.VARCHAR },
			{ "ITEM_STATUS", Types.VARCHAR },
			{ "REASON_FOR_FAILURE", Types.VARCHAR },
			{ "SOURCE", Types.VARCHAR },
			{ "ADD_CHG_DEL_INDICATOR", Types.VARCHAR },
			{ "ENTITY_CODE", Types.VARCHAR },
			{ "ITEM_IDENTIFIER_INTFID", Types.VARCHAR },
			{ "INTF_INSERTED_DATE", Types.TIMESTAMP },
			{ "CHECK_RECORD", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IDENTIFIER_CODE_QUALIFIER_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IVLD_ITEM_IDENTIFIER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ITEM_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("IDENTIFIER_CODE_QUALIFIER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("END_DATE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ERROR_FIELD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("START_DATE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ITEM_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ERROR_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REPROCESSED_FLAG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_IDENTIFIER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REASON_FOR_FAILURE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ADD_CHG_DEL_INDICATOR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ENTITY_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_IDENTIFIER_INTFID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INTF_INSERTED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CHECK_RECORD", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table IVLD_ITEM_IDENTIFIER (CREATED_BY VARCHAR(75) null,IDENTIFIER_CODE_QUALIFIER_NAME VARCHAR(75) null,IVLD_ITEM_IDENTIFIER_SID INTEGER not null primary key IDENTITY,ITEM_NO VARCHAR(75) null,MODIFIED_BY VARCHAR(75) null,CREATED_DATE DATE null,IDENTIFIER_CODE_QUALIFIER VARCHAR(75) null,ITEM_ID VARCHAR(75) null,END_DATE VARCHAR(75) null,ERROR_FIELD VARCHAR(75) null,START_DATE VARCHAR(75) null,BATCH_ID VARCHAR(75) null,MODIFIED_DATE DATE null,ITEM_NAME VARCHAR(75) null,ERROR_CODE VARCHAR(75) null,REPROCESSED_FLAG VARCHAR(75) null,ITEM_IDENTIFIER VARCHAR(75) null,ITEM_STATUS VARCHAR(75) null,REASON_FOR_FAILURE VARCHAR(75) null,SOURCE VARCHAR(75) null,ADD_CHG_DEL_INDICATOR VARCHAR(75) null,ENTITY_CODE VARCHAR(75) null,ITEM_IDENTIFIER_INTFID VARCHAR(75) null,INTF_INSERTED_DATE DATE null,CHECK_RECORD BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table IVLD_ITEM_IDENTIFIER";
	public static final String ORDER_BY_JPQL = " ORDER BY ivldItemIdentifier.ivldItemIdentifierSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY IVLD_ITEM_IDENTIFIER.IVLD_ITEM_IDENTIFIER_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.parttwo.model.IvldItemIdentifier"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.parttwo.model.IvldItemIdentifier"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.parttwo.model.IvldItemIdentifier"));

	public IvldItemIdentifierModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _ivldItemIdentifierSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setIvldItemIdentifierSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ivldItemIdentifierSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return IvldItemIdentifier.class;
	}

	@Override
	public String getModelClassName() {
		return IvldItemIdentifier.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("createdBy", getCreatedBy());
		attributes.put("identifierCodeQualifierName",
			getIdentifierCodeQualifierName());
		attributes.put("ivldItemIdentifierSid", getIvldItemIdentifierSid());
		attributes.put("itemNo", getItemNo());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("identifierCodeQualifier", getIdentifierCodeQualifier());
		attributes.put("itemId", getItemId());
		attributes.put("endDate", getEndDate());
		attributes.put("errorField", getErrorField());
		attributes.put("startDate", getStartDate());
		attributes.put("batchId", getBatchId());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("itemName", getItemName());
		attributes.put("errorCode", getErrorCode());
		attributes.put("reprocessedFlag", getReprocessedFlag());
		attributes.put("itemIdentifier", getItemIdentifier());
		attributes.put("itemStatus", getItemStatus());
		attributes.put("reasonForFailure", getReasonForFailure());
		attributes.put("source", getSource());
		attributes.put("addChgDelIndicator", getAddChgDelIndicator());
		attributes.put("entityCode", getEntityCode());
		attributes.put("itemIdentifierIntfid", getItemIdentifierIntfid());
		attributes.put("intfInsertedDate", getIntfInsertedDate());
		attributes.put("checkRecord", getCheckRecord());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String identifierCodeQualifierName = (String)attributes.get(
				"identifierCodeQualifierName");

		if (identifierCodeQualifierName != null) {
			setIdentifierCodeQualifierName(identifierCodeQualifierName);
		}

		Integer ivldItemIdentifierSid = (Integer)attributes.get(
				"ivldItemIdentifierSid");

		if (ivldItemIdentifierSid != null) {
			setIvldItemIdentifierSid(ivldItemIdentifierSid);
		}

		String itemNo = (String)attributes.get("itemNo");

		if (itemNo != null) {
			setItemNo(itemNo);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String identifierCodeQualifier = (String)attributes.get(
				"identifierCodeQualifier");

		if (identifierCodeQualifier != null) {
			setIdentifierCodeQualifier(identifierCodeQualifier);
		}

		String itemId = (String)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		String endDate = (String)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String errorField = (String)attributes.get("errorField");

		if (errorField != null) {
			setErrorField(errorField);
		}

		String startDate = (String)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String itemName = (String)attributes.get("itemName");

		if (itemName != null) {
			setItemName(itemName);
		}

		String errorCode = (String)attributes.get("errorCode");

		if (errorCode != null) {
			setErrorCode(errorCode);
		}

		String reprocessedFlag = (String)attributes.get("reprocessedFlag");

		if (reprocessedFlag != null) {
			setReprocessedFlag(reprocessedFlag);
		}

		String itemIdentifier = (String)attributes.get("itemIdentifier");

		if (itemIdentifier != null) {
			setItemIdentifier(itemIdentifier);
		}

		String itemStatus = (String)attributes.get("itemStatus");

		if (itemStatus != null) {
			setItemStatus(itemStatus);
		}

		String reasonForFailure = (String)attributes.get("reasonForFailure");

		if (reasonForFailure != null) {
			setReasonForFailure(reasonForFailure);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String addChgDelIndicator = (String)attributes.get("addChgDelIndicator");

		if (addChgDelIndicator != null) {
			setAddChgDelIndicator(addChgDelIndicator);
		}

		String entityCode = (String)attributes.get("entityCode");

		if (entityCode != null) {
			setEntityCode(entityCode);
		}

		String itemIdentifierIntfid = (String)attributes.get(
				"itemIdentifierIntfid");

		if (itemIdentifierIntfid != null) {
			setItemIdentifierIntfid(itemIdentifierIntfid);
		}

		Date intfInsertedDate = (Date)attributes.get("intfInsertedDate");

		if (intfInsertedDate != null) {
			setIntfInsertedDate(intfInsertedDate);
		}

		Boolean checkRecord = (Boolean)attributes.get("checkRecord");

		if (checkRecord != null) {
			setCheckRecord(checkRecord);
		}
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getIdentifierCodeQualifierName() {
		if (_identifierCodeQualifierName == null) {
			return StringPool.BLANK;
		}
		else {
			return _identifierCodeQualifierName;
		}
	}

	@Override
	public void setIdentifierCodeQualifierName(
		String identifierCodeQualifierName) {
		_identifierCodeQualifierName = identifierCodeQualifierName;
	}

	@Override
	public int getIvldItemIdentifierSid() {
		return _ivldItemIdentifierSid;
	}

	@Override
	public void setIvldItemIdentifierSid(int ivldItemIdentifierSid) {
		_ivldItemIdentifierSid = ivldItemIdentifierSid;
	}

	@Override
	public String getItemNo() {
		if (_itemNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemNo;
		}
	}

	@Override
	public void setItemNo(String itemNo) {
		_itemNo = itemNo;
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getIdentifierCodeQualifier() {
		if (_identifierCodeQualifier == null) {
			return StringPool.BLANK;
		}
		else {
			return _identifierCodeQualifier;
		}
	}

	@Override
	public void setIdentifierCodeQualifier(String identifierCodeQualifier) {
		_identifierCodeQualifier = identifierCodeQualifier;
	}

	@Override
	public String getItemId() {
		if (_itemId == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemId;
		}
	}

	@Override
	public void setItemId(String itemId) {
		_itemId = itemId;
	}

	@Override
	public String getEndDate() {
		if (_endDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _endDate;
		}
	}

	@Override
	public void setEndDate(String endDate) {
		_endDate = endDate;
	}

	@Override
	public String getErrorField() {
		if (_errorField == null) {
			return StringPool.BLANK;
		}
		else {
			return _errorField;
		}
	}

	@Override
	public void setErrorField(String errorField) {
		_errorField = errorField;
	}

	@Override
	public String getStartDate() {
		if (_startDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _startDate;
		}
	}

	@Override
	public void setStartDate(String startDate) {
		_startDate = startDate;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getItemName() {
		if (_itemName == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemName;
		}
	}

	@Override
	public void setItemName(String itemName) {
		_itemName = itemName;
	}

	@Override
	public String getErrorCode() {
		if (_errorCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _errorCode;
		}
	}

	@Override
	public void setErrorCode(String errorCode) {
		_errorCode = errorCode;
	}

	@Override
	public String getReprocessedFlag() {
		if (_reprocessedFlag == null) {
			return StringPool.BLANK;
		}
		else {
			return _reprocessedFlag;
		}
	}

	@Override
	public void setReprocessedFlag(String reprocessedFlag) {
		_reprocessedFlag = reprocessedFlag;
	}

	@Override
	public String getItemIdentifier() {
		if (_itemIdentifier == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemIdentifier;
		}
	}

	@Override
	public void setItemIdentifier(String itemIdentifier) {
		_itemIdentifier = itemIdentifier;
	}

	@Override
	public String getItemStatus() {
		if (_itemStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemStatus;
		}
	}

	@Override
	public void setItemStatus(String itemStatus) {
		_itemStatus = itemStatus;
	}

	@Override
	public String getReasonForFailure() {
		if (_reasonForFailure == null) {
			return StringPool.BLANK;
		}
		else {
			return _reasonForFailure;
		}
	}

	@Override
	public void setReasonForFailure(String reasonForFailure) {
		_reasonForFailure = reasonForFailure;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getAddChgDelIndicator() {
		if (_addChgDelIndicator == null) {
			return StringPool.BLANK;
		}
		else {
			return _addChgDelIndicator;
		}
	}

	@Override
	public void setAddChgDelIndicator(String addChgDelIndicator) {
		_addChgDelIndicator = addChgDelIndicator;
	}

	@Override
	public String getEntityCode() {
		if (_entityCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _entityCode;
		}
	}

	@Override
	public void setEntityCode(String entityCode) {
		_entityCode = entityCode;
	}

	@Override
	public String getItemIdentifierIntfid() {
		if (_itemIdentifierIntfid == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemIdentifierIntfid;
		}
	}

	@Override
	public void setItemIdentifierIntfid(String itemIdentifierIntfid) {
		_itemIdentifierIntfid = itemIdentifierIntfid;
	}

	@Override
	public Date getIntfInsertedDate() {
		return _intfInsertedDate;
	}

	@Override
	public void setIntfInsertedDate(Date intfInsertedDate) {
		_intfInsertedDate = intfInsertedDate;
	}

	@Override
	public boolean getCheckRecord() {
		return _checkRecord;
	}

	@Override
	public boolean isCheckRecord() {
		return _checkRecord;
	}

	@Override
	public void setCheckRecord(boolean checkRecord) {
		_checkRecord = checkRecord;
	}

	@Override
	public IvldItemIdentifier toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (IvldItemIdentifier)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IvldItemIdentifierImpl ivldItemIdentifierImpl = new IvldItemIdentifierImpl();

		ivldItemIdentifierImpl.setCreatedBy(getCreatedBy());
		ivldItemIdentifierImpl.setIdentifierCodeQualifierName(getIdentifierCodeQualifierName());
		ivldItemIdentifierImpl.setIvldItemIdentifierSid(getIvldItemIdentifierSid());
		ivldItemIdentifierImpl.setItemNo(getItemNo());
		ivldItemIdentifierImpl.setModifiedBy(getModifiedBy());
		ivldItemIdentifierImpl.setCreatedDate(getCreatedDate());
		ivldItemIdentifierImpl.setIdentifierCodeQualifier(getIdentifierCodeQualifier());
		ivldItemIdentifierImpl.setItemId(getItemId());
		ivldItemIdentifierImpl.setEndDate(getEndDate());
		ivldItemIdentifierImpl.setErrorField(getErrorField());
		ivldItemIdentifierImpl.setStartDate(getStartDate());
		ivldItemIdentifierImpl.setBatchId(getBatchId());
		ivldItemIdentifierImpl.setModifiedDate(getModifiedDate());
		ivldItemIdentifierImpl.setItemName(getItemName());
		ivldItemIdentifierImpl.setErrorCode(getErrorCode());
		ivldItemIdentifierImpl.setReprocessedFlag(getReprocessedFlag());
		ivldItemIdentifierImpl.setItemIdentifier(getItemIdentifier());
		ivldItemIdentifierImpl.setItemStatus(getItemStatus());
		ivldItemIdentifierImpl.setReasonForFailure(getReasonForFailure());
		ivldItemIdentifierImpl.setSource(getSource());
		ivldItemIdentifierImpl.setAddChgDelIndicator(getAddChgDelIndicator());
		ivldItemIdentifierImpl.setEntityCode(getEntityCode());
		ivldItemIdentifierImpl.setItemIdentifierIntfid(getItemIdentifierIntfid());
		ivldItemIdentifierImpl.setIntfInsertedDate(getIntfInsertedDate());
		ivldItemIdentifierImpl.setCheckRecord(getCheckRecord());

		ivldItemIdentifierImpl.resetOriginalValues();

		return ivldItemIdentifierImpl;
	}

	@Override
	public int compareTo(IvldItemIdentifier ivldItemIdentifier) {
		int primaryKey = ivldItemIdentifier.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof IvldItemIdentifier)) {
			return false;
		}

		IvldItemIdentifier ivldItemIdentifier = (IvldItemIdentifier)obj;

		int primaryKey = ivldItemIdentifier.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<IvldItemIdentifier> toCacheModel() {
		IvldItemIdentifierCacheModel ivldItemIdentifierCacheModel = new IvldItemIdentifierCacheModel();

		ivldItemIdentifierCacheModel.createdBy = getCreatedBy();

		String createdBy = ivldItemIdentifierCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			ivldItemIdentifierCacheModel.createdBy = null;
		}

		ivldItemIdentifierCacheModel.identifierCodeQualifierName = getIdentifierCodeQualifierName();

		String identifierCodeQualifierName = ivldItemIdentifierCacheModel.identifierCodeQualifierName;

		if ((identifierCodeQualifierName != null) &&
				(identifierCodeQualifierName.length() == 0)) {
			ivldItemIdentifierCacheModel.identifierCodeQualifierName = null;
		}

		ivldItemIdentifierCacheModel.ivldItemIdentifierSid = getIvldItemIdentifierSid();

		ivldItemIdentifierCacheModel.itemNo = getItemNo();

		String itemNo = ivldItemIdentifierCacheModel.itemNo;

		if ((itemNo != null) && (itemNo.length() == 0)) {
			ivldItemIdentifierCacheModel.itemNo = null;
		}

		ivldItemIdentifierCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = ivldItemIdentifierCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			ivldItemIdentifierCacheModel.modifiedBy = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			ivldItemIdentifierCacheModel.createdDate = createdDate.getTime();
		}
		else {
			ivldItemIdentifierCacheModel.createdDate = Long.MIN_VALUE;
		}

		ivldItemIdentifierCacheModel.identifierCodeQualifier = getIdentifierCodeQualifier();

		String identifierCodeQualifier = ivldItemIdentifierCacheModel.identifierCodeQualifier;

		if ((identifierCodeQualifier != null) &&
				(identifierCodeQualifier.length() == 0)) {
			ivldItemIdentifierCacheModel.identifierCodeQualifier = null;
		}

		ivldItemIdentifierCacheModel.itemId = getItemId();

		String itemId = ivldItemIdentifierCacheModel.itemId;

		if ((itemId != null) && (itemId.length() == 0)) {
			ivldItemIdentifierCacheModel.itemId = null;
		}

		ivldItemIdentifierCacheModel.endDate = getEndDate();

		String endDate = ivldItemIdentifierCacheModel.endDate;

		if ((endDate != null) && (endDate.length() == 0)) {
			ivldItemIdentifierCacheModel.endDate = null;
		}

		ivldItemIdentifierCacheModel.errorField = getErrorField();

		String errorField = ivldItemIdentifierCacheModel.errorField;

		if ((errorField != null) && (errorField.length() == 0)) {
			ivldItemIdentifierCacheModel.errorField = null;
		}

		ivldItemIdentifierCacheModel.startDate = getStartDate();

		String startDate = ivldItemIdentifierCacheModel.startDate;

		if ((startDate != null) && (startDate.length() == 0)) {
			ivldItemIdentifierCacheModel.startDate = null;
		}

		ivldItemIdentifierCacheModel.batchId = getBatchId();

		String batchId = ivldItemIdentifierCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			ivldItemIdentifierCacheModel.batchId = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ivldItemIdentifierCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ivldItemIdentifierCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ivldItemIdentifierCacheModel.itemName = getItemName();

		String itemName = ivldItemIdentifierCacheModel.itemName;

		if ((itemName != null) && (itemName.length() == 0)) {
			ivldItemIdentifierCacheModel.itemName = null;
		}

		ivldItemIdentifierCacheModel.errorCode = getErrorCode();

		String errorCode = ivldItemIdentifierCacheModel.errorCode;

		if ((errorCode != null) && (errorCode.length() == 0)) {
			ivldItemIdentifierCacheModel.errorCode = null;
		}

		ivldItemIdentifierCacheModel.reprocessedFlag = getReprocessedFlag();

		String reprocessedFlag = ivldItemIdentifierCacheModel.reprocessedFlag;

		if ((reprocessedFlag != null) && (reprocessedFlag.length() == 0)) {
			ivldItemIdentifierCacheModel.reprocessedFlag = null;
		}

		ivldItemIdentifierCacheModel.itemIdentifier = getItemIdentifier();

		String itemIdentifier = ivldItemIdentifierCacheModel.itemIdentifier;

		if ((itemIdentifier != null) && (itemIdentifier.length() == 0)) {
			ivldItemIdentifierCacheModel.itemIdentifier = null;
		}

		ivldItemIdentifierCacheModel.itemStatus = getItemStatus();

		String itemStatus = ivldItemIdentifierCacheModel.itemStatus;

		if ((itemStatus != null) && (itemStatus.length() == 0)) {
			ivldItemIdentifierCacheModel.itemStatus = null;
		}

		ivldItemIdentifierCacheModel.reasonForFailure = getReasonForFailure();

		String reasonForFailure = ivldItemIdentifierCacheModel.reasonForFailure;

		if ((reasonForFailure != null) && (reasonForFailure.length() == 0)) {
			ivldItemIdentifierCacheModel.reasonForFailure = null;
		}

		ivldItemIdentifierCacheModel.source = getSource();

		String source = ivldItemIdentifierCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			ivldItemIdentifierCacheModel.source = null;
		}

		ivldItemIdentifierCacheModel.addChgDelIndicator = getAddChgDelIndicator();

		String addChgDelIndicator = ivldItemIdentifierCacheModel.addChgDelIndicator;

		if ((addChgDelIndicator != null) && (addChgDelIndicator.length() == 0)) {
			ivldItemIdentifierCacheModel.addChgDelIndicator = null;
		}

		ivldItemIdentifierCacheModel.entityCode = getEntityCode();

		String entityCode = ivldItemIdentifierCacheModel.entityCode;

		if ((entityCode != null) && (entityCode.length() == 0)) {
			ivldItemIdentifierCacheModel.entityCode = null;
		}

		ivldItemIdentifierCacheModel.itemIdentifierIntfid = getItemIdentifierIntfid();

		String itemIdentifierIntfid = ivldItemIdentifierCacheModel.itemIdentifierIntfid;

		if ((itemIdentifierIntfid != null) &&
				(itemIdentifierIntfid.length() == 0)) {
			ivldItemIdentifierCacheModel.itemIdentifierIntfid = null;
		}

		Date intfInsertedDate = getIntfInsertedDate();

		if (intfInsertedDate != null) {
			ivldItemIdentifierCacheModel.intfInsertedDate = intfInsertedDate.getTime();
		}
		else {
			ivldItemIdentifierCacheModel.intfInsertedDate = Long.MIN_VALUE;
		}

		ivldItemIdentifierCacheModel.checkRecord = getCheckRecord();

		return ivldItemIdentifierCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(51);

		sb.append("{createdBy=");
		sb.append(getCreatedBy());
		sb.append(", identifierCodeQualifierName=");
		sb.append(getIdentifierCodeQualifierName());
		sb.append(", ivldItemIdentifierSid=");
		sb.append(getIvldItemIdentifierSid());
		sb.append(", itemNo=");
		sb.append(getItemNo());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", identifierCodeQualifier=");
		sb.append(getIdentifierCodeQualifier());
		sb.append(", itemId=");
		sb.append(getItemId());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", errorField=");
		sb.append(getErrorField());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", itemName=");
		sb.append(getItemName());
		sb.append(", errorCode=");
		sb.append(getErrorCode());
		sb.append(", reprocessedFlag=");
		sb.append(getReprocessedFlag());
		sb.append(", itemIdentifier=");
		sb.append(getItemIdentifier());
		sb.append(", itemStatus=");
		sb.append(getItemStatus());
		sb.append(", reasonForFailure=");
		sb.append(getReasonForFailure());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", addChgDelIndicator=");
		sb.append(getAddChgDelIndicator());
		sb.append(", entityCode=");
		sb.append(getEntityCode());
		sb.append(", itemIdentifierIntfid=");
		sb.append(getItemIdentifierIntfid());
		sb.append(", intfInsertedDate=");
		sb.append(getIntfInsertedDate());
		sb.append(", checkRecord=");
		sb.append(getCheckRecord());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(79);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.parttwo.model.IvldItemIdentifier");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>identifierCodeQualifierName</column-name><column-value><![CDATA[");
		sb.append(getIdentifierCodeQualifierName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ivldItemIdentifierSid</column-name><column-value><![CDATA[");
		sb.append(getIvldItemIdentifierSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemNo</column-name><column-value><![CDATA[");
		sb.append(getItemNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>identifierCodeQualifier</column-name><column-value><![CDATA[");
		sb.append(getIdentifierCodeQualifier());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorField</column-name><column-value><![CDATA[");
		sb.append(getErrorField());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemName</column-name><column-value><![CDATA[");
		sb.append(getItemName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorCode</column-name><column-value><![CDATA[");
		sb.append(getErrorCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reprocessedFlag</column-name><column-value><![CDATA[");
		sb.append(getReprocessedFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemIdentifier</column-name><column-value><![CDATA[");
		sb.append(getItemIdentifier());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemStatus</column-name><column-value><![CDATA[");
		sb.append(getItemStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reasonForFailure</column-name><column-value><![CDATA[");
		sb.append(getReasonForFailure());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addChgDelIndicator</column-name><column-value><![CDATA[");
		sb.append(getAddChgDelIndicator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityCode</column-name><column-value><![CDATA[");
		sb.append(getEntityCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemIdentifierIntfid</column-name><column-value><![CDATA[");
		sb.append(getItemIdentifierIntfid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>intfInsertedDate</column-name><column-value><![CDATA[");
		sb.append(getIntfInsertedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkRecord</column-name><column-value><![CDATA[");
		sb.append(getCheckRecord());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = IvldItemIdentifier.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			IvldItemIdentifier.class
		};
	private String _createdBy;
	private String _identifierCodeQualifierName;
	private int _ivldItemIdentifierSid;
	private String _itemNo;
	private String _modifiedBy;
	private Date _createdDate;
	private String _identifierCodeQualifier;
	private String _itemId;
	private String _endDate;
	private String _errorField;
	private String _startDate;
	private String _batchId;
	private Date _modifiedDate;
	private String _itemName;
	private String _errorCode;
	private String _reprocessedFlag;
	private String _itemIdentifier;
	private String _itemStatus;
	private String _reasonForFailure;
	private String _source;
	private String _addChgDelIndicator;
	private String _entityCode;
	private String _itemIdentifierIntfid;
	private Date _intfInsertedDate;
	private boolean _checkRecord;
	private IvldItemIdentifier _escapedModel;
}