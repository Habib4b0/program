package com.stpl.app.model.impl;

import com.stpl.app.model.WorkflowProcessInfo;
import com.stpl.app.model.WorkflowProcessInfoModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the WorkflowProcessInfo service. Represents a row in the &quot;WORKFLOW_PROCESS_INFO&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.WorkflowProcessInfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WorkflowProcessInfoImpl}.
 * </p>
 *
 * @author
 * @see WorkflowProcessInfoImpl
 * @see com.stpl.app.model.WorkflowProcessInfo
 * @see com.stpl.app.model.WorkflowProcessInfoModel
 * @generated
 */
public class WorkflowProcessInfoModelImpl extends BaseModelImpl<WorkflowProcessInfo>
    implements WorkflowProcessInfoModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a workflow process info model instance should use the {@link com.stpl.app.model.WorkflowProcessInfo} interface instead.
     */
    public static final String TABLE_NAME = "WORKFLOW_PROCESS_INFO";
    public static final Object[][] TABLE_COLUMNS = {
            { "PROCESS_INSTANCE_ID", Types.INTEGER },
            { "PROJECTION_MASTER_SID", Types.INTEGER },
            { "WORKFLOW_PROCESS_INFO_SID", Types.INTEGER },
            { "ACC_CLOSURE_MASTER_SID", Types.INTEGER },
            { "CONTRACT_MASTER_SID", Types.INTEGER },
            { "CONTRACT_STRUCTURE", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table WORKFLOW_PROCESS_INFO (PROCESS_INSTANCE_ID INTEGER,PROJECTION_MASTER_SID INTEGER,WORKFLOW_PROCESS_INFO_SID INTEGER not null primary key IDENTITY,ACC_CLOSURE_MASTER_SID INTEGER,CONTRACT_MASTER_SID INTEGER,CONTRACT_STRUCTURE VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table WORKFLOW_PROCESS_INFO";
    public static final String ORDER_BY_JPQL = " ORDER BY workflowProcessInfo.workflowProcessInfoSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY WORKFLOW_PROCESS_INFO.WORKFLOW_PROCESS_INFO_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.WorkflowProcessInfo"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.WorkflowProcessInfo"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.WorkflowProcessInfo"));
    private static ClassLoader _classLoader = WorkflowProcessInfo.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            WorkflowProcessInfo.class
        };
    private int _processInstanceId;
    private int _projectionMasterSid;
    private int _workflowProcessInfoSid;
    private int _accClosureMasterSid;
    private int _contractMasterSid;
    private String _contractStructure;
    private WorkflowProcessInfo _escapedModel;

    public WorkflowProcessInfoModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _workflowProcessInfoSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setWorkflowProcessInfoSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _workflowProcessInfoSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return WorkflowProcessInfo.class;
    }

    @Override
    public String getModelClassName() {
        return WorkflowProcessInfo.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("processInstanceId", getProcessInstanceId());
        attributes.put("projectionMasterSid", getProjectionMasterSid());
        attributes.put("workflowProcessInfoSid", getWorkflowProcessInfoSid());
        attributes.put("accClosureMasterSid", getAccClosureMasterSid());
        attributes.put("contractMasterSid", getContractMasterSid());
        attributes.put("contractStructure", getContractStructure());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer processInstanceId = (Integer) attributes.get(
                "processInstanceId");

        if (processInstanceId != null) {
            setProcessInstanceId(processInstanceId);
        }

        Integer projectionMasterSid = (Integer) attributes.get(
                "projectionMasterSid");

        if (projectionMasterSid != null) {
            setProjectionMasterSid(projectionMasterSid);
        }

        Integer workflowProcessInfoSid = (Integer) attributes.get(
                "workflowProcessInfoSid");

        if (workflowProcessInfoSid != null) {
            setWorkflowProcessInfoSid(workflowProcessInfoSid);
        }

        Integer accClosureMasterSid = (Integer) attributes.get(
                "accClosureMasterSid");

        if (accClosureMasterSid != null) {
            setAccClosureMasterSid(accClosureMasterSid);
        }

        Integer contractMasterSid = (Integer) attributes.get(
                "contractMasterSid");

        if (contractMasterSid != null) {
            setContractMasterSid(contractMasterSid);
        }

        String contractStructure = (String) attributes.get("contractStructure");

        if (contractStructure != null) {
            setContractStructure(contractStructure);
        }
    }

    @Override
    public int getProcessInstanceId() {
        return _processInstanceId;
    }

    @Override
    public void setProcessInstanceId(int processInstanceId) {
        _processInstanceId = processInstanceId;
    }

    @Override
    public int getProjectionMasterSid() {
        return _projectionMasterSid;
    }

    @Override
    public void setProjectionMasterSid(int projectionMasterSid) {
        _projectionMasterSid = projectionMasterSid;
    }

    @Override
    public int getWorkflowProcessInfoSid() {
        return _workflowProcessInfoSid;
    }

    @Override
    public void setWorkflowProcessInfoSid(int workflowProcessInfoSid) {
        _workflowProcessInfoSid = workflowProcessInfoSid;
    }

    @Override
    public int getAccClosureMasterSid() {
        return _accClosureMasterSid;
    }

    @Override
    public void setAccClosureMasterSid(int accClosureMasterSid) {
        _accClosureMasterSid = accClosureMasterSid;
    }

    @Override
    public int getContractMasterSid() {
        return _contractMasterSid;
    }

    @Override
    public void setContractMasterSid(int contractMasterSid) {
        _contractMasterSid = contractMasterSid;
    }

    @Override
    public String getContractStructure() {
        if (_contractStructure == null) {
            return StringPool.BLANK;
        } else {
            return _contractStructure;
        }
    }

    @Override
    public void setContractStructure(String contractStructure) {
        _contractStructure = contractStructure;
    }

    @Override
    public WorkflowProcessInfo toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (WorkflowProcessInfo) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        WorkflowProcessInfoImpl workflowProcessInfoImpl = new WorkflowProcessInfoImpl();

        workflowProcessInfoImpl.setProcessInstanceId(getProcessInstanceId());
        workflowProcessInfoImpl.setProjectionMasterSid(getProjectionMasterSid());
        workflowProcessInfoImpl.setWorkflowProcessInfoSid(getWorkflowProcessInfoSid());
        workflowProcessInfoImpl.setAccClosureMasterSid(getAccClosureMasterSid());
        workflowProcessInfoImpl.setContractMasterSid(getContractMasterSid());
        workflowProcessInfoImpl.setContractStructure(getContractStructure());

        workflowProcessInfoImpl.resetOriginalValues();

        return workflowProcessInfoImpl;
    }

    @Override
    public int compareTo(WorkflowProcessInfo workflowProcessInfo) {
        int primaryKey = workflowProcessInfo.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof WorkflowProcessInfo)) {
            return false;
        }

        WorkflowProcessInfo workflowProcessInfo = (WorkflowProcessInfo) obj;

        int primaryKey = workflowProcessInfo.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<WorkflowProcessInfo> toCacheModel() {
        WorkflowProcessInfoCacheModel workflowProcessInfoCacheModel = new WorkflowProcessInfoCacheModel();

        workflowProcessInfoCacheModel.processInstanceId = getProcessInstanceId();

        workflowProcessInfoCacheModel.projectionMasterSid = getProjectionMasterSid();

        workflowProcessInfoCacheModel.workflowProcessInfoSid = getWorkflowProcessInfoSid();

        workflowProcessInfoCacheModel.accClosureMasterSid = getAccClosureMasterSid();

        workflowProcessInfoCacheModel.contractMasterSid = getContractMasterSid();

        workflowProcessInfoCacheModel.contractStructure = getContractStructure();

        String contractStructure = workflowProcessInfoCacheModel.contractStructure;

        if ((contractStructure != null) && (contractStructure.length() == 0)) {
            workflowProcessInfoCacheModel.contractStructure = null;
        }

        return workflowProcessInfoCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{processInstanceId=");
        sb.append(getProcessInstanceId());
        sb.append(", projectionMasterSid=");
        sb.append(getProjectionMasterSid());
        sb.append(", workflowProcessInfoSid=");
        sb.append(getWorkflowProcessInfoSid());
        sb.append(", accClosureMasterSid=");
        sb.append(getAccClosureMasterSid());
        sb.append(", contractMasterSid=");
        sb.append(getContractMasterSid());
        sb.append(", contractStructure=");
        sb.append(getContractStructure());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.WorkflowProcessInfo");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>processInstanceId</column-name><column-value><![CDATA[");
        sb.append(getProcessInstanceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionMasterSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>workflowProcessInfoSid</column-name><column-value><![CDATA[");
        sb.append(getWorkflowProcessInfoSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>accClosureMasterSid</column-name><column-value><![CDATA[");
        sb.append(getAccClosureMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contractMasterSid</column-name><column-value><![CDATA[");
        sb.append(getContractMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contractStructure</column-name><column-value><![CDATA[");
        sb.append(getContractStructure());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
