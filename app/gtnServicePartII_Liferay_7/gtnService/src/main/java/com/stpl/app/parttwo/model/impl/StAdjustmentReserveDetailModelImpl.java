/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.parttwo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.parttwo.model.StAdjustmentReserveDetail;
import com.stpl.app.parttwo.model.StAdjustmentReserveDetailModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StAdjustmentReserveDetail service. Represents a row in the &quot;ST_ADJUSTMENT_RESERVE_DETAIL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link StAdjustmentReserveDetailModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StAdjustmentReserveDetailImpl}.
 * </p>
 *
 * @author
 * @see StAdjustmentReserveDetailImpl
 * @see StAdjustmentReserveDetail
 * @see StAdjustmentReserveDetailModel
 * @generated
 */
@ProviderType
public class StAdjustmentReserveDetailModelImpl extends BaseModelImpl<StAdjustmentReserveDetail>
	implements StAdjustmentReserveDetailModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a st adjustment reserve detail model instance should use the {@link StAdjustmentReserveDetail} interface instead.
	 */
	public static final String TABLE_NAME = "ST_ADJUSTMENT_RESERVE_DETAIL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ADJUSTMENT_CREATED_DATE", Types.TIMESTAMP },
			{ "ETL_CHECK_RECORD", Types.BOOLEAN },
			{ "POSTING_INDICATOR", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "ACCOUNT", Types.VARCHAR },
			{ "CREDIT", Types.VARCHAR },
			{ "WORKFLOW_APPROVED_DATE", Types.TIMESTAMP },
			{ "SOURCE", Types.VARCHAR },
			{ "LINE_DESCRIPTION", Types.VARCHAR },
			{ "LEDGER", Types.VARCHAR },
			{ "UDC_6", Types.VARCHAR },
			{ "UDC_5", Types.VARCHAR },
			{ "UDC_4", Types.VARCHAR },
			{ "WORKFLOW_CREATED_DATE", Types.TIMESTAMP },
			{ "UDC_3", Types.VARCHAR },
			{ "UDC_2", Types.VARCHAR },
			{ "UDC_1", Types.VARCHAR },
			{ "ADJUSTMENT_TYPE", Types.VARCHAR },
			{ "MODIFIED_BY", Types.VARCHAR },
			{ "CHECK_RECORD", Types.BOOLEAN },
			{ "COMPANY", Types.VARCHAR },
			{ "DIVISION", Types.VARCHAR },
			{ "BALANCE_TYPE", Types.VARCHAR },
			{ "SESSION_ID", Types.VARCHAR },
			{ "JOURNAL_NAME", Types.VARCHAR },
			{ "PROJECT", Types.VARCHAR },
			{ "DEBIT", Types.VARCHAR },
			{ "ACCOUNT_TYPE", Types.VARCHAR },
			{ "JOURNAL_DESCRIPTION", Types.VARCHAR },
			{ "CATEGORY", Types.VARCHAR },
			{ "CREATED_BY", Types.VARCHAR },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "BUSINESS_UNIT", Types.VARCHAR },
			{ "REVERSAL_PERIOD_DATE", Types.TIMESTAMP },
			{ "WORKFLOW_ID", Types.VARCHAR },
			{ "CHART_OF_ACCOUNTS", Types.VARCHAR },
			{ "USER_ID", Types.VARCHAR },
			{ "BATCH_NAME", Types.VARCHAR },
			{ "ARD_DB", Types.VARCHAR },
			{ "COST_CENTER", Types.VARCHAR },
			{ "OUTBOUND_STATUS", Types.VARCHAR },
			{ "DATA_ACCESS_SET", Types.VARCHAR },
			{ "FUTURE_1", Types.VARCHAR },
			{ "FUTURE_2", Types.VARCHAR },
			{ "WORKFLOW_NAME", Types.VARCHAR },
			{ "WORKFLOW_CREATED_BY", Types.VARCHAR },
			{ "CURRENCY", Types.VARCHAR },
			{ "BATCH_ID", Types.VARCHAR },
			{ "ACCOUNT_CATEGORY", Types.VARCHAR },
			{ "REVERSE_JOURNAL", Types.VARCHAR },
			{ "WORKFLOW_APPROVED_BY", Types.VARCHAR },
			{ "BRAND", Types.VARCHAR },
			{ "ACCOUNTING_DATE", Types.TIMESTAMP },
			{ "REDEMPTION_PERIOD", Types.TIMESTAMP },
			{ "ORIGINAL_BATCH_ID", Types.VARCHAR },
			{ "ADJUSTMENT_LEVEL", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ADJUSTMENT_CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ETL_CHECK_RECORD", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("POSTING_INDICATOR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ACCOUNT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREDIT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("WORKFLOW_APPROVED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LINE_DESCRIPTION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LEDGER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UDC_6", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UDC_5", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UDC_4", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("WORKFLOW_CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("UDC_3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UDC_2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UDC_1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ADJUSTMENT_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CHECK_RECORD", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("COMPANY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DIVISION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BALANCE_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SESSION_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("JOURNAL_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEBIT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACCOUNT_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("JOURNAL_DESCRIPTION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CATEGORY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("BUSINESS_UNIT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REVERSAL_PERIOD_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("WORKFLOW_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CHART_OF_ACCOUNTS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("USER_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ARD_DB", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COST_CENTER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("OUTBOUND_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DATA_ACCESS_SET", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FUTURE_1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FUTURE_2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("WORKFLOW_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("WORKFLOW_CREATED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CURRENCY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACCOUNT_CATEGORY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REVERSE_JOURNAL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("WORKFLOW_APPROVED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BRAND", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACCOUNTING_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("REDEMPTION_PERIOD", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ORIGINAL_BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ADJUSTMENT_LEVEL", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table ST_ADJUSTMENT_RESERVE_DETAIL (ADJUSTMENT_CREATED_DATE DATE null,ETL_CHECK_RECORD BOOLEAN,POSTING_INDICATOR VARCHAR(75) null,MODIFIED_DATE DATE null,ACCOUNT VARCHAR(75) null,CREDIT VARCHAR(75) null,WORKFLOW_APPROVED_DATE DATE null,SOURCE VARCHAR(75) null,LINE_DESCRIPTION VARCHAR(75) null,LEDGER VARCHAR(75) null,UDC_6 VARCHAR(75) null,UDC_5 VARCHAR(75) null,UDC_4 VARCHAR(75) null,WORKFLOW_CREATED_DATE DATE null,UDC_3 VARCHAR(75) null,UDC_2 VARCHAR(75) null,UDC_1 VARCHAR(75) null,ADJUSTMENT_TYPE VARCHAR(75) null,MODIFIED_BY VARCHAR(75) null,CHECK_RECORD BOOLEAN,COMPANY VARCHAR(75) null,DIVISION VARCHAR(75) null,BALANCE_TYPE VARCHAR(75) null,SESSION_ID VARCHAR(75) null,JOURNAL_NAME VARCHAR(75) null,PROJECT VARCHAR(75) null,DEBIT VARCHAR(75) null,ACCOUNT_TYPE VARCHAR(75) null,JOURNAL_DESCRIPTION VARCHAR(75) null,CATEGORY VARCHAR(75) null,CREATED_BY VARCHAR(75) null,CREATED_DATE DATE null,BUSINESS_UNIT VARCHAR(75) null,REVERSAL_PERIOD_DATE DATE null,WORKFLOW_ID VARCHAR(75) not null primary key,CHART_OF_ACCOUNTS VARCHAR(75) null,USER_ID VARCHAR(75) null,BATCH_NAME VARCHAR(75) null,ARD_DB VARCHAR(75) null,COST_CENTER VARCHAR(75) null,OUTBOUND_STATUS VARCHAR(75) null,DATA_ACCESS_SET VARCHAR(75) null,FUTURE_1 VARCHAR(75) null,FUTURE_2 VARCHAR(75) null,WORKFLOW_NAME VARCHAR(75) null,WORKFLOW_CREATED_BY VARCHAR(75) null,CURRENCY VARCHAR(75) null,BATCH_ID VARCHAR(75) null,ACCOUNT_CATEGORY VARCHAR(75) null,REVERSE_JOURNAL VARCHAR(75) null,WORKFLOW_APPROVED_BY VARCHAR(75) null,BRAND VARCHAR(75) null,ACCOUNTING_DATE DATE null,REDEMPTION_PERIOD DATE null,ORIGINAL_BATCH_ID VARCHAR(75) null,ADJUSTMENT_LEVEL VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ST_ADJUSTMENT_RESERVE_DETAIL";
	public static final String ORDER_BY_JPQL = " ORDER BY stAdjustmentReserveDetail.workflowId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ST_ADJUSTMENT_RESERVE_DETAIL.WORKFLOW_ID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.parttwo.model.StAdjustmentReserveDetail"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.parttwo.model.StAdjustmentReserveDetail"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.parttwo.model.StAdjustmentReserveDetail"));

	public StAdjustmentReserveDetailModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _workflowId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setWorkflowId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _workflowId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return StAdjustmentReserveDetail.class;
	}

	@Override
	public String getModelClassName() {
		return StAdjustmentReserveDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("adjustmentCreatedDate", getAdjustmentCreatedDate());
		attributes.put("etlCheckRecord", getEtlCheckRecord());
		attributes.put("postingIndicator", getPostingIndicator());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("account", getAccount());
		attributes.put("credit", getCredit());
		attributes.put("workflowApprovedDate", getWorkflowApprovedDate());
		attributes.put("source", getSource());
		attributes.put("lineDescription", getLineDescription());
		attributes.put("ledger", getLedger());
		attributes.put("udc6", getUdc6());
		attributes.put("udc5", getUdc5());
		attributes.put("udc4", getUdc4());
		attributes.put("workflowCreatedDate", getWorkflowCreatedDate());
		attributes.put("udc3", getUdc3());
		attributes.put("udc2", getUdc2());
		attributes.put("udc1", getUdc1());
		attributes.put("adjustmentType", getAdjustmentType());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("checkRecord", getCheckRecord());
		attributes.put("glCompanyName", getGlCompanyName());
		attributes.put("division", getDivision());
		attributes.put("balanceType", getBalanceType());
		attributes.put("sessionId", getSessionId());
		attributes.put("journalName", getJournalName());
		attributes.put("project", getProject());
		attributes.put("debit", getDebit());
		attributes.put("accountType", getAccountType());
		attributes.put("journalDescription", getJournalDescription());
		attributes.put("category", getCategory());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("businessUnitId", getBusinessUnitId());
		attributes.put("reversalPeriodDate", getReversalPeriodDate());
		attributes.put("workflowId", getWorkflowId());
		attributes.put("chartOfAccounts", getChartOfAccounts());
		attributes.put("userId", getUserId());
		attributes.put("batchName", getBatchName());
		attributes.put("database", getDatabase());
		attributes.put("costCenter", getCostCenter());
		attributes.put("outboundStatus", getOutboundStatus());
		attributes.put("dataAccessSet", getDataAccessSet());
		attributes.put("future1", getFuture1());
		attributes.put("future2", getFuture2());
		attributes.put("workflowName", getWorkflowName());
		attributes.put("workflowCreatedBy", getWorkflowCreatedBy());
		attributes.put("currency", getCurrency());
		attributes.put("batchId", getBatchId());
		attributes.put("accountCategory", getAccountCategory());
		attributes.put("reverseJournal", getReverseJournal());
		attributes.put("workflowApprovedBy", getWorkflowApprovedBy());
		attributes.put("brand", getBrand());
		attributes.put("accountingDate", getAccountingDate());
		attributes.put("redemptionPeriod", getRedemptionPeriod());
		attributes.put("originalBatchId", getOriginalBatchId());
		attributes.put("adjustmentLevel", getAdjustmentLevel());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date adjustmentCreatedDate = (Date)attributes.get(
				"adjustmentCreatedDate");

		if (adjustmentCreatedDate != null) {
			setAdjustmentCreatedDate(adjustmentCreatedDate);
		}

		Boolean etlCheckRecord = (Boolean)attributes.get("etlCheckRecord");

		if (etlCheckRecord != null) {
			setEtlCheckRecord(etlCheckRecord);
		}

		String postingIndicator = (String)attributes.get("postingIndicator");

		if (postingIndicator != null) {
			setPostingIndicator(postingIndicator);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String account = (String)attributes.get("account");

		if (account != null) {
			setAccount(account);
		}

		String credit = (String)attributes.get("credit");

		if (credit != null) {
			setCredit(credit);
		}

		Date workflowApprovedDate = (Date)attributes.get("workflowApprovedDate");

		if (workflowApprovedDate != null) {
			setWorkflowApprovedDate(workflowApprovedDate);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String lineDescription = (String)attributes.get("lineDescription");

		if (lineDescription != null) {
			setLineDescription(lineDescription);
		}

		String ledger = (String)attributes.get("ledger");

		if (ledger != null) {
			setLedger(ledger);
		}

		String udc6 = (String)attributes.get("udc6");

		if (udc6 != null) {
			setUdc6(udc6);
		}

		String udc5 = (String)attributes.get("udc5");

		if (udc5 != null) {
			setUdc5(udc5);
		}

		String udc4 = (String)attributes.get("udc4");

		if (udc4 != null) {
			setUdc4(udc4);
		}

		Date workflowCreatedDate = (Date)attributes.get("workflowCreatedDate");

		if (workflowCreatedDate != null) {
			setWorkflowCreatedDate(workflowCreatedDate);
		}

		String udc3 = (String)attributes.get("udc3");

		if (udc3 != null) {
			setUdc3(udc3);
		}

		String udc2 = (String)attributes.get("udc2");

		if (udc2 != null) {
			setUdc2(udc2);
		}

		String udc1 = (String)attributes.get("udc1");

		if (udc1 != null) {
			setUdc1(udc1);
		}

		String adjustmentType = (String)attributes.get("adjustmentType");

		if (adjustmentType != null) {
			setAdjustmentType(adjustmentType);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Boolean checkRecord = (Boolean)attributes.get("checkRecord");

		if (checkRecord != null) {
			setCheckRecord(checkRecord);
		}

		String glCompanyName = (String)attributes.get("glCompanyName");

		if (glCompanyName != null) {
			setGlCompanyName(glCompanyName);
		}

		String division = (String)attributes.get("division");

		if (division != null) {
			setDivision(division);
		}

		String balanceType = (String)attributes.get("balanceType");

		if (balanceType != null) {
			setBalanceType(balanceType);
		}

		String sessionId = (String)attributes.get("sessionId");

		if (sessionId != null) {
			setSessionId(sessionId);
		}

		String journalName = (String)attributes.get("journalName");

		if (journalName != null) {
			setJournalName(journalName);
		}

		String project = (String)attributes.get("project");

		if (project != null) {
			setProject(project);
		}

		String debit = (String)attributes.get("debit");

		if (debit != null) {
			setDebit(debit);
		}

		String accountType = (String)attributes.get("accountType");

		if (accountType != null) {
			setAccountType(accountType);
		}

		String journalDescription = (String)attributes.get("journalDescription");

		if (journalDescription != null) {
			setJournalDescription(journalDescription);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String businessUnitId = (String)attributes.get("businessUnitId");

		if (businessUnitId != null) {
			setBusinessUnitId(businessUnitId);
		}

		Date reversalPeriodDate = (Date)attributes.get("reversalPeriodDate");

		if (reversalPeriodDate != null) {
			setReversalPeriodDate(reversalPeriodDate);
		}

		String workflowId = (String)attributes.get("workflowId");

		if (workflowId != null) {
			setWorkflowId(workflowId);
		}

		String chartOfAccounts = (String)attributes.get("chartOfAccounts");

		if (chartOfAccounts != null) {
			setChartOfAccounts(chartOfAccounts);
		}

		String userId = (String)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String batchName = (String)attributes.get("batchName");

		if (batchName != null) {
			setBatchName(batchName);
		}

		String database = (String)attributes.get("database");

		if (database != null) {
			setDatabase(database);
		}

		String costCenter = (String)attributes.get("costCenter");

		if (costCenter != null) {
			setCostCenter(costCenter);
		}

		String outboundStatus = (String)attributes.get("outboundStatus");

		if (outboundStatus != null) {
			setOutboundStatus(outboundStatus);
		}

		String dataAccessSet = (String)attributes.get("dataAccessSet");

		if (dataAccessSet != null) {
			setDataAccessSet(dataAccessSet);
		}

		String future1 = (String)attributes.get("future1");

		if (future1 != null) {
			setFuture1(future1);
		}

		String future2 = (String)attributes.get("future2");

		if (future2 != null) {
			setFuture2(future2);
		}

		String workflowName = (String)attributes.get("workflowName");

		if (workflowName != null) {
			setWorkflowName(workflowName);
		}

		String workflowCreatedBy = (String)attributes.get("workflowCreatedBy");

		if (workflowCreatedBy != null) {
			setWorkflowCreatedBy(workflowCreatedBy);
		}

		String currency = (String)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		String accountCategory = (String)attributes.get("accountCategory");

		if (accountCategory != null) {
			setAccountCategory(accountCategory);
		}

		String reverseJournal = (String)attributes.get("reverseJournal");

		if (reverseJournal != null) {
			setReverseJournal(reverseJournal);
		}

		String workflowApprovedBy = (String)attributes.get("workflowApprovedBy");

		if (workflowApprovedBy != null) {
			setWorkflowApprovedBy(workflowApprovedBy);
		}

		String brand = (String)attributes.get("brand");

		if (brand != null) {
			setBrand(brand);
		}

		Date accountingDate = (Date)attributes.get("accountingDate");

		if (accountingDate != null) {
			setAccountingDate(accountingDate);
		}

		Date redemptionPeriod = (Date)attributes.get("redemptionPeriod");

		if (redemptionPeriod != null) {
			setRedemptionPeriod(redemptionPeriod);
		}

		String originalBatchId = (String)attributes.get("originalBatchId");

		if (originalBatchId != null) {
			setOriginalBatchId(originalBatchId);
		}

		String adjustmentLevel = (String)attributes.get("adjustmentLevel");

		if (adjustmentLevel != null) {
			setAdjustmentLevel(adjustmentLevel);
		}
	}

	@Override
	public Date getAdjustmentCreatedDate() {
		return _adjustmentCreatedDate;
	}

	@Override
	public void setAdjustmentCreatedDate(Date adjustmentCreatedDate) {
		_adjustmentCreatedDate = adjustmentCreatedDate;
	}

	@Override
	public boolean getEtlCheckRecord() {
		return _etlCheckRecord;
	}

	@Override
	public boolean isEtlCheckRecord() {
		return _etlCheckRecord;
	}

	@Override
	public void setEtlCheckRecord(boolean etlCheckRecord) {
		_etlCheckRecord = etlCheckRecord;
	}

	@Override
	public String getPostingIndicator() {
		if (_postingIndicator == null) {
			return StringPool.BLANK;
		}
		else {
			return _postingIndicator;
		}
	}

	@Override
	public void setPostingIndicator(String postingIndicator) {
		_postingIndicator = postingIndicator;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getAccount() {
		if (_account == null) {
			return StringPool.BLANK;
		}
		else {
			return _account;
		}
	}

	@Override
	public void setAccount(String account) {
		_account = account;
	}

	@Override
	public String getCredit() {
		if (_credit == null) {
			return StringPool.BLANK;
		}
		else {
			return _credit;
		}
	}

	@Override
	public void setCredit(String credit) {
		_credit = credit;
	}

	@Override
	public Date getWorkflowApprovedDate() {
		return _workflowApprovedDate;
	}

	@Override
	public void setWorkflowApprovedDate(Date workflowApprovedDate) {
		_workflowApprovedDate = workflowApprovedDate;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getLineDescription() {
		if (_lineDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _lineDescription;
		}
	}

	@Override
	public void setLineDescription(String lineDescription) {
		_lineDescription = lineDescription;
	}

	@Override
	public String getLedger() {
		if (_ledger == null) {
			return StringPool.BLANK;
		}
		else {
			return _ledger;
		}
	}

	@Override
	public void setLedger(String ledger) {
		_ledger = ledger;
	}

	@Override
	public String getUdc6() {
		if (_udc6 == null) {
			return StringPool.BLANK;
		}
		else {
			return _udc6;
		}
	}

	@Override
	public void setUdc6(String udc6) {
		_udc6 = udc6;
	}

	@Override
	public String getUdc5() {
		if (_udc5 == null) {
			return StringPool.BLANK;
		}
		else {
			return _udc5;
		}
	}

	@Override
	public void setUdc5(String udc5) {
		_udc5 = udc5;
	}

	@Override
	public String getUdc4() {
		if (_udc4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _udc4;
		}
	}

	@Override
	public void setUdc4(String udc4) {
		_udc4 = udc4;
	}

	@Override
	public Date getWorkflowCreatedDate() {
		return _workflowCreatedDate;
	}

	@Override
	public void setWorkflowCreatedDate(Date workflowCreatedDate) {
		_workflowCreatedDate = workflowCreatedDate;
	}

	@Override
	public String getUdc3() {
		if (_udc3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _udc3;
		}
	}

	@Override
	public void setUdc3(String udc3) {
		_udc3 = udc3;
	}

	@Override
	public String getUdc2() {
		if (_udc2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _udc2;
		}
	}

	@Override
	public void setUdc2(String udc2) {
		_udc2 = udc2;
	}

	@Override
	public String getUdc1() {
		if (_udc1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _udc1;
		}
	}

	@Override
	public void setUdc1(String udc1) {
		_udc1 = udc1;
	}

	@Override
	public String getAdjustmentType() {
		if (_adjustmentType == null) {
			return StringPool.BLANK;
		}
		else {
			return _adjustmentType;
		}
	}

	@Override
	public void setAdjustmentType(String adjustmentType) {
		_adjustmentType = adjustmentType;
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public boolean getCheckRecord() {
		return _checkRecord;
	}

	@Override
	public boolean isCheckRecord() {
		return _checkRecord;
	}

	@Override
	public void setCheckRecord(boolean checkRecord) {
		_checkRecord = checkRecord;
	}

	@Override
	public String getGlCompanyName() {
		if (_glCompanyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _glCompanyName;
		}
	}

	@Override
	public void setGlCompanyName(String glCompanyName) {
		_glCompanyName = glCompanyName;
	}

	@Override
	public String getDivision() {
		if (_division == null) {
			return StringPool.BLANK;
		}
		else {
			return _division;
		}
	}

	@Override
	public void setDivision(String division) {
		_division = division;
	}

	@Override
	public String getBalanceType() {
		if (_balanceType == null) {
			return StringPool.BLANK;
		}
		else {
			return _balanceType;
		}
	}

	@Override
	public void setBalanceType(String balanceType) {
		_balanceType = balanceType;
	}

	@Override
	public String getSessionId() {
		if (_sessionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _sessionId;
		}
	}

	@Override
	public void setSessionId(String sessionId) {
		_sessionId = sessionId;
	}

	@Override
	public String getJournalName() {
		if (_journalName == null) {
			return StringPool.BLANK;
		}
		else {
			return _journalName;
		}
	}

	@Override
	public void setJournalName(String journalName) {
		_journalName = journalName;
	}

	@Override
	public String getProject() {
		if (_project == null) {
			return StringPool.BLANK;
		}
		else {
			return _project;
		}
	}

	@Override
	public void setProject(String project) {
		_project = project;
	}

	@Override
	public String getDebit() {
		if (_debit == null) {
			return StringPool.BLANK;
		}
		else {
			return _debit;
		}
	}

	@Override
	public void setDebit(String debit) {
		_debit = debit;
	}

	@Override
	public String getAccountType() {
		if (_accountType == null) {
			return StringPool.BLANK;
		}
		else {
			return _accountType;
		}
	}

	@Override
	public void setAccountType(String accountType) {
		_accountType = accountType;
	}

	@Override
	public String getJournalDescription() {
		if (_journalDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _journalDescription;
		}
	}

	@Override
	public void setJournalDescription(String journalDescription) {
		_journalDescription = journalDescription;
	}

	@Override
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_category = category;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getBusinessUnitId() {
		if (_businessUnitId == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessUnitId;
		}
	}

	@Override
	public void setBusinessUnitId(String businessUnitId) {
		_businessUnitId = businessUnitId;
	}

	@Override
	public Date getReversalPeriodDate() {
		return _reversalPeriodDate;
	}

	@Override
	public void setReversalPeriodDate(Date reversalPeriodDate) {
		_reversalPeriodDate = reversalPeriodDate;
	}

	@Override
	public String getWorkflowId() {
		if (_workflowId == null) {
			return StringPool.BLANK;
		}
		else {
			return _workflowId;
		}
	}

	@Override
	public void setWorkflowId(String workflowId) {
		_workflowId = workflowId;
	}

	@Override
	public String getChartOfAccounts() {
		if (_chartOfAccounts == null) {
			return StringPool.BLANK;
		}
		else {
			return _chartOfAccounts;
		}
	}

	@Override
	public void setChartOfAccounts(String chartOfAccounts) {
		_chartOfAccounts = chartOfAccounts;
	}

	@Override
	public String getUserId() {
		if (_userId == null) {
			return StringPool.BLANK;
		}
		else {
			return _userId;
		}
	}

	@Override
	public void setUserId(String userId) {
		_userId = userId;
	}

	@Override
	public String getBatchName() {
		if (_batchName == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchName;
		}
	}

	@Override
	public void setBatchName(String batchName) {
		_batchName = batchName;
	}

	@Override
	public String getDatabase() {
		if (_database == null) {
			return StringPool.BLANK;
		}
		else {
			return _database;
		}
	}

	@Override
	public void setDatabase(String database) {
		_database = database;
	}

	@Override
	public String getCostCenter() {
		if (_costCenter == null) {
			return StringPool.BLANK;
		}
		else {
			return _costCenter;
		}
	}

	@Override
	public void setCostCenter(String costCenter) {
		_costCenter = costCenter;
	}

	@Override
	public String getOutboundStatus() {
		if (_outboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _outboundStatus;
		}
	}

	@Override
	public void setOutboundStatus(String outboundStatus) {
		_outboundStatus = outboundStatus;
	}

	@Override
	public String getDataAccessSet() {
		if (_dataAccessSet == null) {
			return StringPool.BLANK;
		}
		else {
			return _dataAccessSet;
		}
	}

	@Override
	public void setDataAccessSet(String dataAccessSet) {
		_dataAccessSet = dataAccessSet;
	}

	@Override
	public String getFuture1() {
		if (_future1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _future1;
		}
	}

	@Override
	public void setFuture1(String future1) {
		_future1 = future1;
	}

	@Override
	public String getFuture2() {
		if (_future2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _future2;
		}
	}

	@Override
	public void setFuture2(String future2) {
		_future2 = future2;
	}

	@Override
	public String getWorkflowName() {
		if (_workflowName == null) {
			return StringPool.BLANK;
		}
		else {
			return _workflowName;
		}
	}

	@Override
	public void setWorkflowName(String workflowName) {
		_workflowName = workflowName;
	}

	@Override
	public String getWorkflowCreatedBy() {
		if (_workflowCreatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _workflowCreatedBy;
		}
	}

	@Override
	public void setWorkflowCreatedBy(String workflowCreatedBy) {
		_workflowCreatedBy = workflowCreatedBy;
	}

	@Override
	public String getCurrency() {
		if (_currency == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency;
		}
	}

	@Override
	public void setCurrency(String currency) {
		_currency = currency;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public String getAccountCategory() {
		if (_accountCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _accountCategory;
		}
	}

	@Override
	public void setAccountCategory(String accountCategory) {
		_accountCategory = accountCategory;
	}

	@Override
	public String getReverseJournal() {
		if (_reverseJournal == null) {
			return StringPool.BLANK;
		}
		else {
			return _reverseJournal;
		}
	}

	@Override
	public void setReverseJournal(String reverseJournal) {
		_reverseJournal = reverseJournal;
	}

	@Override
	public String getWorkflowApprovedBy() {
		if (_workflowApprovedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _workflowApprovedBy;
		}
	}

	@Override
	public void setWorkflowApprovedBy(String workflowApprovedBy) {
		_workflowApprovedBy = workflowApprovedBy;
	}

	@Override
	public String getBrand() {
		if (_brand == null) {
			return StringPool.BLANK;
		}
		else {
			return _brand;
		}
	}

	@Override
	public void setBrand(String brand) {
		_brand = brand;
	}

	@Override
	public Date getAccountingDate() {
		return _accountingDate;
	}

	@Override
	public void setAccountingDate(Date accountingDate) {
		_accountingDate = accountingDate;
	}

	@Override
	public Date getRedemptionPeriod() {
		return _redemptionPeriod;
	}

	@Override
	public void setRedemptionPeriod(Date redemptionPeriod) {
		_redemptionPeriod = redemptionPeriod;
	}

	@Override
	public String getOriginalBatchId() {
		if (_originalBatchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _originalBatchId;
		}
	}

	@Override
	public void setOriginalBatchId(String originalBatchId) {
		_originalBatchId = originalBatchId;
	}

	@Override
	public String getAdjustmentLevel() {
		if (_adjustmentLevel == null) {
			return StringPool.BLANK;
		}
		else {
			return _adjustmentLevel;
		}
	}

	@Override
	public void setAdjustmentLevel(String adjustmentLevel) {
		_adjustmentLevel = adjustmentLevel;
	}

	@Override
	public StAdjustmentReserveDetail toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StAdjustmentReserveDetail)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StAdjustmentReserveDetailImpl stAdjustmentReserveDetailImpl = new StAdjustmentReserveDetailImpl();

		stAdjustmentReserveDetailImpl.setAdjustmentCreatedDate(getAdjustmentCreatedDate());
		stAdjustmentReserveDetailImpl.setEtlCheckRecord(getEtlCheckRecord());
		stAdjustmentReserveDetailImpl.setPostingIndicator(getPostingIndicator());
		stAdjustmentReserveDetailImpl.setModifiedDate(getModifiedDate());
		stAdjustmentReserveDetailImpl.setAccount(getAccount());
		stAdjustmentReserveDetailImpl.setCredit(getCredit());
		stAdjustmentReserveDetailImpl.setWorkflowApprovedDate(getWorkflowApprovedDate());
		stAdjustmentReserveDetailImpl.setSource(getSource());
		stAdjustmentReserveDetailImpl.setLineDescription(getLineDescription());
		stAdjustmentReserveDetailImpl.setLedger(getLedger());
		stAdjustmentReserveDetailImpl.setUdc6(getUdc6());
		stAdjustmentReserveDetailImpl.setUdc5(getUdc5());
		stAdjustmentReserveDetailImpl.setUdc4(getUdc4());
		stAdjustmentReserveDetailImpl.setWorkflowCreatedDate(getWorkflowCreatedDate());
		stAdjustmentReserveDetailImpl.setUdc3(getUdc3());
		stAdjustmentReserveDetailImpl.setUdc2(getUdc2());
		stAdjustmentReserveDetailImpl.setUdc1(getUdc1());
		stAdjustmentReserveDetailImpl.setAdjustmentType(getAdjustmentType());
		stAdjustmentReserveDetailImpl.setModifiedBy(getModifiedBy());
		stAdjustmentReserveDetailImpl.setCheckRecord(getCheckRecord());
		stAdjustmentReserveDetailImpl.setGlCompanyName(getGlCompanyName());
		stAdjustmentReserveDetailImpl.setDivision(getDivision());
		stAdjustmentReserveDetailImpl.setBalanceType(getBalanceType());
		stAdjustmentReserveDetailImpl.setSessionId(getSessionId());
		stAdjustmentReserveDetailImpl.setJournalName(getJournalName());
		stAdjustmentReserveDetailImpl.setProject(getProject());
		stAdjustmentReserveDetailImpl.setDebit(getDebit());
		stAdjustmentReserveDetailImpl.setAccountType(getAccountType());
		stAdjustmentReserveDetailImpl.setJournalDescription(getJournalDescription());
		stAdjustmentReserveDetailImpl.setCategory(getCategory());
		stAdjustmentReserveDetailImpl.setCreatedBy(getCreatedBy());
		stAdjustmentReserveDetailImpl.setCreatedDate(getCreatedDate());
		stAdjustmentReserveDetailImpl.setBusinessUnitId(getBusinessUnitId());
		stAdjustmentReserveDetailImpl.setReversalPeriodDate(getReversalPeriodDate());
		stAdjustmentReserveDetailImpl.setWorkflowId(getWorkflowId());
		stAdjustmentReserveDetailImpl.setChartOfAccounts(getChartOfAccounts());
		stAdjustmentReserveDetailImpl.setUserId(getUserId());
		stAdjustmentReserveDetailImpl.setBatchName(getBatchName());
		stAdjustmentReserveDetailImpl.setDatabase(getDatabase());
		stAdjustmentReserveDetailImpl.setCostCenter(getCostCenter());
		stAdjustmentReserveDetailImpl.setOutboundStatus(getOutboundStatus());
		stAdjustmentReserveDetailImpl.setDataAccessSet(getDataAccessSet());
		stAdjustmentReserveDetailImpl.setFuture1(getFuture1());
		stAdjustmentReserveDetailImpl.setFuture2(getFuture2());
		stAdjustmentReserveDetailImpl.setWorkflowName(getWorkflowName());
		stAdjustmentReserveDetailImpl.setWorkflowCreatedBy(getWorkflowCreatedBy());
		stAdjustmentReserveDetailImpl.setCurrency(getCurrency());
		stAdjustmentReserveDetailImpl.setBatchId(getBatchId());
		stAdjustmentReserveDetailImpl.setAccountCategory(getAccountCategory());
		stAdjustmentReserveDetailImpl.setReverseJournal(getReverseJournal());
		stAdjustmentReserveDetailImpl.setWorkflowApprovedBy(getWorkflowApprovedBy());
		stAdjustmentReserveDetailImpl.setBrand(getBrand());
		stAdjustmentReserveDetailImpl.setAccountingDate(getAccountingDate());
		stAdjustmentReserveDetailImpl.setRedemptionPeriod(getRedemptionPeriod());
		stAdjustmentReserveDetailImpl.setOriginalBatchId(getOriginalBatchId());
		stAdjustmentReserveDetailImpl.setAdjustmentLevel(getAdjustmentLevel());

		stAdjustmentReserveDetailImpl.resetOriginalValues();

		return stAdjustmentReserveDetailImpl;
	}

	@Override
	public int compareTo(StAdjustmentReserveDetail stAdjustmentReserveDetail) {
		String primaryKey = stAdjustmentReserveDetail.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StAdjustmentReserveDetail)) {
			return false;
		}

		StAdjustmentReserveDetail stAdjustmentReserveDetail = (StAdjustmentReserveDetail)obj;

		String primaryKey = stAdjustmentReserveDetail.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<StAdjustmentReserveDetail> toCacheModel() {
		StAdjustmentReserveDetailCacheModel stAdjustmentReserveDetailCacheModel = new StAdjustmentReserveDetailCacheModel();

		Date adjustmentCreatedDate = getAdjustmentCreatedDate();

		if (adjustmentCreatedDate != null) {
			stAdjustmentReserveDetailCacheModel.adjustmentCreatedDate = adjustmentCreatedDate.getTime();
		}
		else {
			stAdjustmentReserveDetailCacheModel.adjustmentCreatedDate = Long.MIN_VALUE;
		}

		stAdjustmentReserveDetailCacheModel.etlCheckRecord = getEtlCheckRecord();

		stAdjustmentReserveDetailCacheModel.postingIndicator = getPostingIndicator();

		String postingIndicator = stAdjustmentReserveDetailCacheModel.postingIndicator;

		if ((postingIndicator != null) && (postingIndicator.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.postingIndicator = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			stAdjustmentReserveDetailCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			stAdjustmentReserveDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		stAdjustmentReserveDetailCacheModel.account = getAccount();

		String account = stAdjustmentReserveDetailCacheModel.account;

		if ((account != null) && (account.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.account = null;
		}

		stAdjustmentReserveDetailCacheModel.credit = getCredit();

		String credit = stAdjustmentReserveDetailCacheModel.credit;

		if ((credit != null) && (credit.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.credit = null;
		}

		Date workflowApprovedDate = getWorkflowApprovedDate();

		if (workflowApprovedDate != null) {
			stAdjustmentReserveDetailCacheModel.workflowApprovedDate = workflowApprovedDate.getTime();
		}
		else {
			stAdjustmentReserveDetailCacheModel.workflowApprovedDate = Long.MIN_VALUE;
		}

		stAdjustmentReserveDetailCacheModel.source = getSource();

		String source = stAdjustmentReserveDetailCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.source = null;
		}

		stAdjustmentReserveDetailCacheModel.lineDescription = getLineDescription();

		String lineDescription = stAdjustmentReserveDetailCacheModel.lineDescription;

		if ((lineDescription != null) && (lineDescription.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.lineDescription = null;
		}

		stAdjustmentReserveDetailCacheModel.ledger = getLedger();

		String ledger = stAdjustmentReserveDetailCacheModel.ledger;

		if ((ledger != null) && (ledger.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.ledger = null;
		}

		stAdjustmentReserveDetailCacheModel.udc6 = getUdc6();

		String udc6 = stAdjustmentReserveDetailCacheModel.udc6;

		if ((udc6 != null) && (udc6.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.udc6 = null;
		}

		stAdjustmentReserveDetailCacheModel.udc5 = getUdc5();

		String udc5 = stAdjustmentReserveDetailCacheModel.udc5;

		if ((udc5 != null) && (udc5.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.udc5 = null;
		}

		stAdjustmentReserveDetailCacheModel.udc4 = getUdc4();

		String udc4 = stAdjustmentReserveDetailCacheModel.udc4;

		if ((udc4 != null) && (udc4.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.udc4 = null;
		}

		Date workflowCreatedDate = getWorkflowCreatedDate();

		if (workflowCreatedDate != null) {
			stAdjustmentReserveDetailCacheModel.workflowCreatedDate = workflowCreatedDate.getTime();
		}
		else {
			stAdjustmentReserveDetailCacheModel.workflowCreatedDate = Long.MIN_VALUE;
		}

		stAdjustmentReserveDetailCacheModel.udc3 = getUdc3();

		String udc3 = stAdjustmentReserveDetailCacheModel.udc3;

		if ((udc3 != null) && (udc3.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.udc3 = null;
		}

		stAdjustmentReserveDetailCacheModel.udc2 = getUdc2();

		String udc2 = stAdjustmentReserveDetailCacheModel.udc2;

		if ((udc2 != null) && (udc2.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.udc2 = null;
		}

		stAdjustmentReserveDetailCacheModel.udc1 = getUdc1();

		String udc1 = stAdjustmentReserveDetailCacheModel.udc1;

		if ((udc1 != null) && (udc1.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.udc1 = null;
		}

		stAdjustmentReserveDetailCacheModel.adjustmentType = getAdjustmentType();

		String adjustmentType = stAdjustmentReserveDetailCacheModel.adjustmentType;

		if ((adjustmentType != null) && (adjustmentType.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.adjustmentType = null;
		}

		stAdjustmentReserveDetailCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = stAdjustmentReserveDetailCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.modifiedBy = null;
		}

		stAdjustmentReserveDetailCacheModel.checkRecord = getCheckRecord();

		stAdjustmentReserveDetailCacheModel.glCompanyName = getGlCompanyName();

		String glCompanyName = stAdjustmentReserveDetailCacheModel.glCompanyName;

		if ((glCompanyName != null) && (glCompanyName.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.glCompanyName = null;
		}

		stAdjustmentReserveDetailCacheModel.division = getDivision();

		String division = stAdjustmentReserveDetailCacheModel.division;

		if ((division != null) && (division.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.division = null;
		}

		stAdjustmentReserveDetailCacheModel.balanceType = getBalanceType();

		String balanceType = stAdjustmentReserveDetailCacheModel.balanceType;

		if ((balanceType != null) && (balanceType.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.balanceType = null;
		}

		stAdjustmentReserveDetailCacheModel.sessionId = getSessionId();

		String sessionId = stAdjustmentReserveDetailCacheModel.sessionId;

		if ((sessionId != null) && (sessionId.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.sessionId = null;
		}

		stAdjustmentReserveDetailCacheModel.journalName = getJournalName();

		String journalName = stAdjustmentReserveDetailCacheModel.journalName;

		if ((journalName != null) && (journalName.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.journalName = null;
		}

		stAdjustmentReserveDetailCacheModel.project = getProject();

		String project = stAdjustmentReserveDetailCacheModel.project;

		if ((project != null) && (project.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.project = null;
		}

		stAdjustmentReserveDetailCacheModel.debit = getDebit();

		String debit = stAdjustmentReserveDetailCacheModel.debit;

		if ((debit != null) && (debit.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.debit = null;
		}

		stAdjustmentReserveDetailCacheModel.accountType = getAccountType();

		String accountType = stAdjustmentReserveDetailCacheModel.accountType;

		if ((accountType != null) && (accountType.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.accountType = null;
		}

		stAdjustmentReserveDetailCacheModel.journalDescription = getJournalDescription();

		String journalDescription = stAdjustmentReserveDetailCacheModel.journalDescription;

		if ((journalDescription != null) && (journalDescription.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.journalDescription = null;
		}

		stAdjustmentReserveDetailCacheModel.category = getCategory();

		String category = stAdjustmentReserveDetailCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.category = null;
		}

		stAdjustmentReserveDetailCacheModel.createdBy = getCreatedBy();

		String createdBy = stAdjustmentReserveDetailCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.createdBy = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			stAdjustmentReserveDetailCacheModel.createdDate = createdDate.getTime();
		}
		else {
			stAdjustmentReserveDetailCacheModel.createdDate = Long.MIN_VALUE;
		}

		stAdjustmentReserveDetailCacheModel.businessUnitId = getBusinessUnitId();

		String businessUnitId = stAdjustmentReserveDetailCacheModel.businessUnitId;

		if ((businessUnitId != null) && (businessUnitId.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.businessUnitId = null;
		}

		Date reversalPeriodDate = getReversalPeriodDate();

		if (reversalPeriodDate != null) {
			stAdjustmentReserveDetailCacheModel.reversalPeriodDate = reversalPeriodDate.getTime();
		}
		else {
			stAdjustmentReserveDetailCacheModel.reversalPeriodDate = Long.MIN_VALUE;
		}

		stAdjustmentReserveDetailCacheModel.workflowId = getWorkflowId();

		String workflowId = stAdjustmentReserveDetailCacheModel.workflowId;

		if ((workflowId != null) && (workflowId.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.workflowId = null;
		}

		stAdjustmentReserveDetailCacheModel.chartOfAccounts = getChartOfAccounts();

		String chartOfAccounts = stAdjustmentReserveDetailCacheModel.chartOfAccounts;

		if ((chartOfAccounts != null) && (chartOfAccounts.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.chartOfAccounts = null;
		}

		stAdjustmentReserveDetailCacheModel.userId = getUserId();

		String userId = stAdjustmentReserveDetailCacheModel.userId;

		if ((userId != null) && (userId.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.userId = null;
		}

		stAdjustmentReserveDetailCacheModel.batchName = getBatchName();

		String batchName = stAdjustmentReserveDetailCacheModel.batchName;

		if ((batchName != null) && (batchName.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.batchName = null;
		}

		stAdjustmentReserveDetailCacheModel.database = getDatabase();

		String database = stAdjustmentReserveDetailCacheModel.database;

		if ((database != null) && (database.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.database = null;
		}

		stAdjustmentReserveDetailCacheModel.costCenter = getCostCenter();

		String costCenter = stAdjustmentReserveDetailCacheModel.costCenter;

		if ((costCenter != null) && (costCenter.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.costCenter = null;
		}

		stAdjustmentReserveDetailCacheModel.outboundStatus = getOutboundStatus();

		String outboundStatus = stAdjustmentReserveDetailCacheModel.outboundStatus;

		if ((outboundStatus != null) && (outboundStatus.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.outboundStatus = null;
		}

		stAdjustmentReserveDetailCacheModel.dataAccessSet = getDataAccessSet();

		String dataAccessSet = stAdjustmentReserveDetailCacheModel.dataAccessSet;

		if ((dataAccessSet != null) && (dataAccessSet.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.dataAccessSet = null;
		}

		stAdjustmentReserveDetailCacheModel.future1 = getFuture1();

		String future1 = stAdjustmentReserveDetailCacheModel.future1;

		if ((future1 != null) && (future1.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.future1 = null;
		}

		stAdjustmentReserveDetailCacheModel.future2 = getFuture2();

		String future2 = stAdjustmentReserveDetailCacheModel.future2;

		if ((future2 != null) && (future2.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.future2 = null;
		}

		stAdjustmentReserveDetailCacheModel.workflowName = getWorkflowName();

		String workflowName = stAdjustmentReserveDetailCacheModel.workflowName;

		if ((workflowName != null) && (workflowName.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.workflowName = null;
		}

		stAdjustmentReserveDetailCacheModel.workflowCreatedBy = getWorkflowCreatedBy();

		String workflowCreatedBy = stAdjustmentReserveDetailCacheModel.workflowCreatedBy;

		if ((workflowCreatedBy != null) && (workflowCreatedBy.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.workflowCreatedBy = null;
		}

		stAdjustmentReserveDetailCacheModel.currency = getCurrency();

		String currency = stAdjustmentReserveDetailCacheModel.currency;

		if ((currency != null) && (currency.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.currency = null;
		}

		stAdjustmentReserveDetailCacheModel.batchId = getBatchId();

		String batchId = stAdjustmentReserveDetailCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.batchId = null;
		}

		stAdjustmentReserveDetailCacheModel.accountCategory = getAccountCategory();

		String accountCategory = stAdjustmentReserveDetailCacheModel.accountCategory;

		if ((accountCategory != null) && (accountCategory.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.accountCategory = null;
		}

		stAdjustmentReserveDetailCacheModel.reverseJournal = getReverseJournal();

		String reverseJournal = stAdjustmentReserveDetailCacheModel.reverseJournal;

		if ((reverseJournal != null) && (reverseJournal.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.reverseJournal = null;
		}

		stAdjustmentReserveDetailCacheModel.workflowApprovedBy = getWorkflowApprovedBy();

		String workflowApprovedBy = stAdjustmentReserveDetailCacheModel.workflowApprovedBy;

		if ((workflowApprovedBy != null) && (workflowApprovedBy.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.workflowApprovedBy = null;
		}

		stAdjustmentReserveDetailCacheModel.brand = getBrand();

		String brand = stAdjustmentReserveDetailCacheModel.brand;

		if ((brand != null) && (brand.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.brand = null;
		}

		Date accountingDate = getAccountingDate();

		if (accountingDate != null) {
			stAdjustmentReserveDetailCacheModel.accountingDate = accountingDate.getTime();
		}
		else {
			stAdjustmentReserveDetailCacheModel.accountingDate = Long.MIN_VALUE;
		}

		Date redemptionPeriod = getRedemptionPeriod();

		if (redemptionPeriod != null) {
			stAdjustmentReserveDetailCacheModel.redemptionPeriod = redemptionPeriod.getTime();
		}
		else {
			stAdjustmentReserveDetailCacheModel.redemptionPeriod = Long.MIN_VALUE;
		}

		stAdjustmentReserveDetailCacheModel.originalBatchId = getOriginalBatchId();

		String originalBatchId = stAdjustmentReserveDetailCacheModel.originalBatchId;

		if ((originalBatchId != null) && (originalBatchId.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.originalBatchId = null;
		}

		stAdjustmentReserveDetailCacheModel.adjustmentLevel = getAdjustmentLevel();

		String adjustmentLevel = stAdjustmentReserveDetailCacheModel.adjustmentLevel;

		if ((adjustmentLevel != null) && (adjustmentLevel.length() == 0)) {
			stAdjustmentReserveDetailCacheModel.adjustmentLevel = null;
		}

		return stAdjustmentReserveDetailCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(113);

		sb.append("{adjustmentCreatedDate=");
		sb.append(getAdjustmentCreatedDate());
		sb.append(", etlCheckRecord=");
		sb.append(getEtlCheckRecord());
		sb.append(", postingIndicator=");
		sb.append(getPostingIndicator());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", account=");
		sb.append(getAccount());
		sb.append(", credit=");
		sb.append(getCredit());
		sb.append(", workflowApprovedDate=");
		sb.append(getWorkflowApprovedDate());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", lineDescription=");
		sb.append(getLineDescription());
		sb.append(", ledger=");
		sb.append(getLedger());
		sb.append(", udc6=");
		sb.append(getUdc6());
		sb.append(", udc5=");
		sb.append(getUdc5());
		sb.append(", udc4=");
		sb.append(getUdc4());
		sb.append(", workflowCreatedDate=");
		sb.append(getWorkflowCreatedDate());
		sb.append(", udc3=");
		sb.append(getUdc3());
		sb.append(", udc2=");
		sb.append(getUdc2());
		sb.append(", udc1=");
		sb.append(getUdc1());
		sb.append(", adjustmentType=");
		sb.append(getAdjustmentType());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", checkRecord=");
		sb.append(getCheckRecord());
		sb.append(", glCompanyName=");
		sb.append(getGlCompanyName());
		sb.append(", division=");
		sb.append(getDivision());
		sb.append(", balanceType=");
		sb.append(getBalanceType());
		sb.append(", sessionId=");
		sb.append(getSessionId());
		sb.append(", journalName=");
		sb.append(getJournalName());
		sb.append(", project=");
		sb.append(getProject());
		sb.append(", debit=");
		sb.append(getDebit());
		sb.append(", accountType=");
		sb.append(getAccountType());
		sb.append(", journalDescription=");
		sb.append(getJournalDescription());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", businessUnitId=");
		sb.append(getBusinessUnitId());
		sb.append(", reversalPeriodDate=");
		sb.append(getReversalPeriodDate());
		sb.append(", workflowId=");
		sb.append(getWorkflowId());
		sb.append(", chartOfAccounts=");
		sb.append(getChartOfAccounts());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", batchName=");
		sb.append(getBatchName());
		sb.append(", database=");
		sb.append(getDatabase());
		sb.append(", costCenter=");
		sb.append(getCostCenter());
		sb.append(", outboundStatus=");
		sb.append(getOutboundStatus());
		sb.append(", dataAccessSet=");
		sb.append(getDataAccessSet());
		sb.append(", future1=");
		sb.append(getFuture1());
		sb.append(", future2=");
		sb.append(getFuture2());
		sb.append(", workflowName=");
		sb.append(getWorkflowName());
		sb.append(", workflowCreatedBy=");
		sb.append(getWorkflowCreatedBy());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", accountCategory=");
		sb.append(getAccountCategory());
		sb.append(", reverseJournal=");
		sb.append(getReverseJournal());
		sb.append(", workflowApprovedBy=");
		sb.append(getWorkflowApprovedBy());
		sb.append(", brand=");
		sb.append(getBrand());
		sb.append(", accountingDate=");
		sb.append(getAccountingDate());
		sb.append(", redemptionPeriod=");
		sb.append(getRedemptionPeriod());
		sb.append(", originalBatchId=");
		sb.append(getOriginalBatchId());
		sb.append(", adjustmentLevel=");
		sb.append(getAdjustmentLevel());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(172);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.parttwo.model.StAdjustmentReserveDetail");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>adjustmentCreatedDate</column-name><column-value><![CDATA[");
		sb.append(getAdjustmentCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>etlCheckRecord</column-name><column-value><![CDATA[");
		sb.append(getEtlCheckRecord());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postingIndicator</column-name><column-value><![CDATA[");
		sb.append(getPostingIndicator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>account</column-name><column-value><![CDATA[");
		sb.append(getAccount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>credit</column-name><column-value><![CDATA[");
		sb.append(getCredit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowApprovedDate</column-name><column-value><![CDATA[");
		sb.append(getWorkflowApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lineDescription</column-name><column-value><![CDATA[");
		sb.append(getLineDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ledger</column-name><column-value><![CDATA[");
		sb.append(getLedger());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc6</column-name><column-value><![CDATA[");
		sb.append(getUdc6());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc5</column-name><column-value><![CDATA[");
		sb.append(getUdc5());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc4</column-name><column-value><![CDATA[");
		sb.append(getUdc4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowCreatedDate</column-name><column-value><![CDATA[");
		sb.append(getWorkflowCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc3</column-name><column-value><![CDATA[");
		sb.append(getUdc3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc2</column-name><column-value><![CDATA[");
		sb.append(getUdc2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc1</column-name><column-value><![CDATA[");
		sb.append(getUdc1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adjustmentType</column-name><column-value><![CDATA[");
		sb.append(getAdjustmentType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkRecord</column-name><column-value><![CDATA[");
		sb.append(getCheckRecord());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>glCompanyName</column-name><column-value><![CDATA[");
		sb.append(getGlCompanyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>division</column-name><column-value><![CDATA[");
		sb.append(getDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>balanceType</column-name><column-value><![CDATA[");
		sb.append(getBalanceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sessionId</column-name><column-value><![CDATA[");
		sb.append(getSessionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>journalName</column-name><column-value><![CDATA[");
		sb.append(getJournalName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>project</column-name><column-value><![CDATA[");
		sb.append(getProject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>debit</column-name><column-value><![CDATA[");
		sb.append(getDebit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accountType</column-name><column-value><![CDATA[");
		sb.append(getAccountType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>journalDescription</column-name><column-value><![CDATA[");
		sb.append(getJournalDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessUnitId</column-name><column-value><![CDATA[");
		sb.append(getBusinessUnitId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reversalPeriodDate</column-name><column-value><![CDATA[");
		sb.append(getReversalPeriodDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowId</column-name><column-value><![CDATA[");
		sb.append(getWorkflowId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chartOfAccounts</column-name><column-value><![CDATA[");
		sb.append(getChartOfAccounts());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchName</column-name><column-value><![CDATA[");
		sb.append(getBatchName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>database</column-name><column-value><![CDATA[");
		sb.append(getDatabase());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>costCenter</column-name><column-value><![CDATA[");
		sb.append(getCostCenter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>outboundStatus</column-name><column-value><![CDATA[");
		sb.append(getOutboundStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataAccessSet</column-name><column-value><![CDATA[");
		sb.append(getDataAccessSet());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>future1</column-name><column-value><![CDATA[");
		sb.append(getFuture1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>future2</column-name><column-value><![CDATA[");
		sb.append(getFuture2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowName</column-name><column-value><![CDATA[");
		sb.append(getWorkflowName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowCreatedBy</column-name><column-value><![CDATA[");
		sb.append(getWorkflowCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accountCategory</column-name><column-value><![CDATA[");
		sb.append(getAccountCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reverseJournal</column-name><column-value><![CDATA[");
		sb.append(getReverseJournal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowApprovedBy</column-name><column-value><![CDATA[");
		sb.append(getWorkflowApprovedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brand</column-name><column-value><![CDATA[");
		sb.append(getBrand());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accountingDate</column-name><column-value><![CDATA[");
		sb.append(getAccountingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>redemptionPeriod</column-name><column-value><![CDATA[");
		sb.append(getRedemptionPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>originalBatchId</column-name><column-value><![CDATA[");
		sb.append(getOriginalBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adjustmentLevel</column-name><column-value><![CDATA[");
		sb.append(getAdjustmentLevel());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = StAdjustmentReserveDetail.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			StAdjustmentReserveDetail.class
		};
	private Date _adjustmentCreatedDate;
	private boolean _etlCheckRecord;
	private String _postingIndicator;
	private Date _modifiedDate;
	private String _account;
	private String _credit;
	private Date _workflowApprovedDate;
	private String _source;
	private String _lineDescription;
	private String _ledger;
	private String _udc6;
	private String _udc5;
	private String _udc4;
	private Date _workflowCreatedDate;
	private String _udc3;
	private String _udc2;
	private String _udc1;
	private String _adjustmentType;
	private String _modifiedBy;
	private boolean _checkRecord;
	private String _glCompanyName;
	private String _division;
	private String _balanceType;
	private String _sessionId;
	private String _journalName;
	private String _project;
	private String _debit;
	private String _accountType;
	private String _journalDescription;
	private String _category;
	private String _createdBy;
	private Date _createdDate;
	private String _businessUnitId;
	private Date _reversalPeriodDate;
	private String _workflowId;
	private String _chartOfAccounts;
	private String _userId;
	private String _batchName;
	private String _database;
	private String _costCenter;
	private String _outboundStatus;
	private String _dataAccessSet;
	private String _future1;
	private String _future2;
	private String _workflowName;
	private String _workflowCreatedBy;
	private String _currency;
	private String _batchId;
	private String _accountCategory;
	private String _reverseJournal;
	private String _workflowApprovedBy;
	private String _brand;
	private Date _accountingDate;
	private Date _redemptionPeriod;
	private String _originalBatchId;
	private String _adjustmentLevel;
	private StAdjustmentReserveDetail _escapedModel;
}