package com.stpl.app.model.impl;

import com.stpl.app.model.CfpModel;
import com.stpl.app.model.CfpModelModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CfpModel service. Represents a row in the &quot;CFP_MODEL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.CfpModelModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CfpModelImpl}.
 * </p>
 *
 * @author
 * @see CfpModelImpl
 * @see com.stpl.app.model.CfpModel
 * @see com.stpl.app.model.CfpModelModel
 * @generated
 */
public class CfpModelModelImpl extends BaseModelImpl<CfpModel>
    implements CfpModelModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a cfp model model instance should use the {@link com.stpl.app.model.CfpModel} interface instead.
     */
    public static final String TABLE_NAME = "CFP_MODEL";
    public static final Object[][] TABLE_COLUMNS = {
            { "CREATED_BY", Types.INTEGER },
            { "CFP_TYPE", Types.INTEGER },
            { "CFP_TRADE_CLASS", Types.INTEGER },
            { "MODIFIED_BY", Types.INTEGER },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "CFP_NO", Types.VARCHAR },
            { "CFP_MODEL_SID", Types.INTEGER },
            { "BATCH_ID", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "INTERNAL_NOTES", Types.VARCHAR },
            { "CFP_DESIGNATION", Types.VARCHAR },
            { "SALES_INCLUSION", Types.INTEGER },
            { "CFP_NAME", Types.VARCHAR },
            { "CFP_CATEGORY", Types.INTEGER },
            { "SOURCE", Types.VARCHAR },
            { "CFP_ID", Types.VARCHAR },
            { "CFP_STATUS", Types.INTEGER },
            { "PARENT_CFP_ID", Types.INTEGER },
            { "CFP_START_DATE", Types.TIMESTAMP },
            { "CFP_END_DATE", Types.TIMESTAMP },
            { "PARENT_CFP_NAME", Types.VARCHAR },
            { "INBOUND_STATUS", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table CFP_MODEL (CREATED_BY INTEGER,CFP_TYPE INTEGER,CFP_TRADE_CLASS INTEGER,MODIFIED_BY INTEGER,CREATED_DATE DATE null,CFP_NO VARCHAR(75) null,CFP_MODEL_SID INTEGER not null primary key IDENTITY,BATCH_ID VARCHAR(75) null,MODIFIED_DATE DATE null,RECORD_LOCK_STATUS BOOLEAN,INTERNAL_NOTES VARCHAR(75) null,CFP_DESIGNATION VARCHAR(75) null,SALES_INCLUSION INTEGER,CFP_NAME VARCHAR(75) null,CFP_CATEGORY INTEGER,SOURCE VARCHAR(75) null,CFP_ID VARCHAR(75) null,CFP_STATUS INTEGER,PARENT_CFP_ID INTEGER,CFP_START_DATE DATE null,CFP_END_DATE DATE null,PARENT_CFP_NAME VARCHAR(75) null,INBOUND_STATUS VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table CFP_MODEL";
    public static final String ORDER_BY_JPQL = " ORDER BY cfpModel.cfpModelSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY CFP_MODEL.CFP_MODEL_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.CfpModel"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.CfpModel"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stpl.app.model.CfpModel"),
            true);
    public static long CFPID_COLUMN_BITMASK = 1L;
    public static long CFPNAME_COLUMN_BITMASK = 2L;
    public static long CFPNO_COLUMN_BITMASK = 4L;
    public static long CFPSTATUS_COLUMN_BITMASK = 8L;
    public static long CFPTRADECLASS_COLUMN_BITMASK = 16L;
    public static long CFPTYPE_COLUMN_BITMASK = 32L;
    public static long CFPMODELSID_COLUMN_BITMASK = 64L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.CfpModel"));
    private static ClassLoader _classLoader = CfpModel.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            CfpModel.class
        };
    private int _createdBy;
    private int _cfpType;
    private int _originalCfpType;
    private boolean _setOriginalCfpType;
    private int _cfpTradeClass;
    private int _originalCfpTradeClass;
    private boolean _setOriginalCfpTradeClass;
    private int _modifiedBy;
    private Date _createdDate;
    private String _cfpNo;
    private String _originalCfpNo;
    private int _cfpModelSid;
    private String _batchId;
    private Date _modifiedDate;
    private boolean _recordLockStatus;
    private String _internalNotes;
    private String _cfpDesignation;
    private int _salesInclusion;
    private String _cfpName;
    private String _originalCfpName;
    private int _cfpCategory;
    private String _source;
    private String _cfpId;
    private String _originalCfpId;
    private int _cfpStatus;
    private int _originalCfpStatus;
    private boolean _setOriginalCfpStatus;
    private int _parentCfpId;
    private Date _cfpStartDate;
    private Date _cfpEndDate;
    private String _parentCfpName;
    private String _inboundStatus;
    private long _columnBitmask;
    private CfpModel _escapedModel;

    public CfpModelModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _cfpModelSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setCfpModelSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _cfpModelSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return CfpModel.class;
    }

    @Override
    public String getModelClassName() {
        return CfpModel.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("createdBy", getCreatedBy());
        attributes.put("cfpType", getCfpType());
        attributes.put("cfpTradeClass", getCfpTradeClass());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("cfpNo", getCfpNo());
        attributes.put("cfpModelSid", getCfpModelSid());
        attributes.put("batchId", getBatchId());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("internalNotes", getInternalNotes());
        attributes.put("cfpDesignation", getCfpDesignation());
        attributes.put("salesInclusion", getSalesInclusion());
        attributes.put("cfpName", getCfpName());
        attributes.put("cfpCategory", getCfpCategory());
        attributes.put("source", getSource());
        attributes.put("cfpId", getCfpId());
        attributes.put("cfpStatus", getCfpStatus());
        attributes.put("parentCfpId", getParentCfpId());
        attributes.put("cfpStartDate", getCfpStartDate());
        attributes.put("cfpEndDate", getCfpEndDate());
        attributes.put("parentCfpName", getParentCfpName());
        attributes.put("inboundStatus", getInboundStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Integer cfpType = (Integer) attributes.get("cfpType");

        if (cfpType != null) {
            setCfpType(cfpType);
        }

        Integer cfpTradeClass = (Integer) attributes.get("cfpTradeClass");

        if (cfpTradeClass != null) {
            setCfpTradeClass(cfpTradeClass);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String cfpNo = (String) attributes.get("cfpNo");

        if (cfpNo != null) {
            setCfpNo(cfpNo);
        }

        Integer cfpModelSid = (Integer) attributes.get("cfpModelSid");

        if (cfpModelSid != null) {
            setCfpModelSid(cfpModelSid);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        String internalNotes = (String) attributes.get("internalNotes");

        if (internalNotes != null) {
            setInternalNotes(internalNotes);
        }

        String cfpDesignation = (String) attributes.get("cfpDesignation");

        if (cfpDesignation != null) {
            setCfpDesignation(cfpDesignation);
        }

        Integer salesInclusion = (Integer) attributes.get("salesInclusion");

        if (salesInclusion != null) {
            setSalesInclusion(salesInclusion);
        }

        String cfpName = (String) attributes.get("cfpName");

        if (cfpName != null) {
            setCfpName(cfpName);
        }

        Integer cfpCategory = (Integer) attributes.get("cfpCategory");

        if (cfpCategory != null) {
            setCfpCategory(cfpCategory);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String cfpId = (String) attributes.get("cfpId");

        if (cfpId != null) {
            setCfpId(cfpId);
        }

        Integer cfpStatus = (Integer) attributes.get("cfpStatus");

        if (cfpStatus != null) {
            setCfpStatus(cfpStatus);
        }

        Integer parentCfpId = (Integer) attributes.get("parentCfpId");

        if (parentCfpId != null) {
            setParentCfpId(parentCfpId);
        }

        Date cfpStartDate = (Date) attributes.get("cfpStartDate");

        if (cfpStartDate != null) {
            setCfpStartDate(cfpStartDate);
        }

        Date cfpEndDate = (Date) attributes.get("cfpEndDate");

        if (cfpEndDate != null) {
            setCfpEndDate(cfpEndDate);
        }

        String parentCfpName = (String) attributes.get("parentCfpName");

        if (parentCfpName != null) {
            setParentCfpName(parentCfpName);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public int getCfpType() {
        return _cfpType;
    }

    @Override
    public void setCfpType(int cfpType) {
        _columnBitmask |= CFPTYPE_COLUMN_BITMASK;

        if (!_setOriginalCfpType) {
            _setOriginalCfpType = true;

            _originalCfpType = _cfpType;
        }

        _cfpType = cfpType;
    }

    public int getOriginalCfpType() {
        return _originalCfpType;
    }

    @Override
    public int getCfpTradeClass() {
        return _cfpTradeClass;
    }

    @Override
    public void setCfpTradeClass(int cfpTradeClass) {
        _columnBitmask |= CFPTRADECLASS_COLUMN_BITMASK;

        if (!_setOriginalCfpTradeClass) {
            _setOriginalCfpTradeClass = true;

            _originalCfpTradeClass = _cfpTradeClass;
        }

        _cfpTradeClass = cfpTradeClass;
    }

    public int getOriginalCfpTradeClass() {
        return _originalCfpTradeClass;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getCfpNo() {
        if (_cfpNo == null) {
            return StringPool.BLANK;
        } else {
            return _cfpNo;
        }
    }

    @Override
    public void setCfpNo(String cfpNo) {
        _columnBitmask |= CFPNO_COLUMN_BITMASK;

        if (_originalCfpNo == null) {
            _originalCfpNo = _cfpNo;
        }

        _cfpNo = cfpNo;
    }

    public String getOriginalCfpNo() {
        return GetterUtil.getString(_originalCfpNo);
    }

    @Override
    public int getCfpModelSid() {
        return _cfpModelSid;
    }

    @Override
    public void setCfpModelSid(int cfpModelSid) {
        _cfpModelSid = cfpModelSid;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public String getInternalNotes() {
        if (_internalNotes == null) {
            return StringPool.BLANK;
        } else {
            return _internalNotes;
        }
    }

    @Override
    public void setInternalNotes(String internalNotes) {
        _internalNotes = internalNotes;
    }

    @Override
    public String getCfpDesignation() {
        if (_cfpDesignation == null) {
            return StringPool.BLANK;
        } else {
            return _cfpDesignation;
        }
    }

    @Override
    public void setCfpDesignation(String cfpDesignation) {
        _cfpDesignation = cfpDesignation;
    }

    @Override
    public int getSalesInclusion() {
        return _salesInclusion;
    }

    @Override
    public void setSalesInclusion(int salesInclusion) {
        _salesInclusion = salesInclusion;
    }

    @Override
    public String getCfpName() {
        if (_cfpName == null) {
            return StringPool.BLANK;
        } else {
            return _cfpName;
        }
    }

    @Override
    public void setCfpName(String cfpName) {
        _columnBitmask |= CFPNAME_COLUMN_BITMASK;

        if (_originalCfpName == null) {
            _originalCfpName = _cfpName;
        }

        _cfpName = cfpName;
    }

    public String getOriginalCfpName() {
        return GetterUtil.getString(_originalCfpName);
    }

    @Override
    public int getCfpCategory() {
        return _cfpCategory;
    }

    @Override
    public void setCfpCategory(int cfpCategory) {
        _cfpCategory = cfpCategory;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getCfpId() {
        if (_cfpId == null) {
            return StringPool.BLANK;
        } else {
            return _cfpId;
        }
    }

    @Override
    public void setCfpId(String cfpId) {
        _columnBitmask |= CFPID_COLUMN_BITMASK;

        if (_originalCfpId == null) {
            _originalCfpId = _cfpId;
        }

        _cfpId = cfpId;
    }

    public String getOriginalCfpId() {
        return GetterUtil.getString(_originalCfpId);
    }

    @Override
    public int getCfpStatus() {
        return _cfpStatus;
    }

    @Override
    public void setCfpStatus(int cfpStatus) {
        _columnBitmask |= CFPSTATUS_COLUMN_BITMASK;

        if (!_setOriginalCfpStatus) {
            _setOriginalCfpStatus = true;

            _originalCfpStatus = _cfpStatus;
        }

        _cfpStatus = cfpStatus;
    }

    public int getOriginalCfpStatus() {
        return _originalCfpStatus;
    }

    @Override
    public int getParentCfpId() {
        return _parentCfpId;
    }

    @Override
    public void setParentCfpId(int parentCfpId) {
        _parentCfpId = parentCfpId;
    }

    @Override
    public Date getCfpStartDate() {
        return _cfpStartDate;
    }

    @Override
    public void setCfpStartDate(Date cfpStartDate) {
        _cfpStartDate = cfpStartDate;
    }

    @Override
    public Date getCfpEndDate() {
        return _cfpEndDate;
    }

    @Override
    public void setCfpEndDate(Date cfpEndDate) {
        _cfpEndDate = cfpEndDate;
    }

    @Override
    public String getParentCfpName() {
        if (_parentCfpName == null) {
            return StringPool.BLANK;
        } else {
            return _parentCfpName;
        }
    }

    @Override
    public void setParentCfpName(String parentCfpName) {
        _parentCfpName = parentCfpName;
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public CfpModel toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (CfpModel) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CfpModelImpl cfpModelImpl = new CfpModelImpl();

        cfpModelImpl.setCreatedBy(getCreatedBy());
        cfpModelImpl.setCfpType(getCfpType());
        cfpModelImpl.setCfpTradeClass(getCfpTradeClass());
        cfpModelImpl.setModifiedBy(getModifiedBy());
        cfpModelImpl.setCreatedDate(getCreatedDate());
        cfpModelImpl.setCfpNo(getCfpNo());
        cfpModelImpl.setCfpModelSid(getCfpModelSid());
        cfpModelImpl.setBatchId(getBatchId());
        cfpModelImpl.setModifiedDate(getModifiedDate());
        cfpModelImpl.setRecordLockStatus(getRecordLockStatus());
        cfpModelImpl.setInternalNotes(getInternalNotes());
        cfpModelImpl.setCfpDesignation(getCfpDesignation());
        cfpModelImpl.setSalesInclusion(getSalesInclusion());
        cfpModelImpl.setCfpName(getCfpName());
        cfpModelImpl.setCfpCategory(getCfpCategory());
        cfpModelImpl.setSource(getSource());
        cfpModelImpl.setCfpId(getCfpId());
        cfpModelImpl.setCfpStatus(getCfpStatus());
        cfpModelImpl.setParentCfpId(getParentCfpId());
        cfpModelImpl.setCfpStartDate(getCfpStartDate());
        cfpModelImpl.setCfpEndDate(getCfpEndDate());
        cfpModelImpl.setParentCfpName(getParentCfpName());
        cfpModelImpl.setInboundStatus(getInboundStatus());

        cfpModelImpl.resetOriginalValues();

        return cfpModelImpl;
    }

    @Override
    public int compareTo(CfpModel cfpModel) {
        int primaryKey = cfpModel.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof CfpModel)) {
            return false;
        }

        CfpModel cfpModel = (CfpModel) obj;

        int primaryKey = cfpModel.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        CfpModelModelImpl cfpModelModelImpl = this;

        cfpModelModelImpl._originalCfpType = cfpModelModelImpl._cfpType;

        cfpModelModelImpl._setOriginalCfpType = false;

        cfpModelModelImpl._originalCfpTradeClass = cfpModelModelImpl._cfpTradeClass;

        cfpModelModelImpl._setOriginalCfpTradeClass = false;

        cfpModelModelImpl._originalCfpNo = cfpModelModelImpl._cfpNo;

        cfpModelModelImpl._originalCfpName = cfpModelModelImpl._cfpName;

        cfpModelModelImpl._originalCfpId = cfpModelModelImpl._cfpId;

        cfpModelModelImpl._originalCfpStatus = cfpModelModelImpl._cfpStatus;

        cfpModelModelImpl._setOriginalCfpStatus = false;

        cfpModelModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<CfpModel> toCacheModel() {
        CfpModelCacheModel cfpModelCacheModel = new CfpModelCacheModel();

        cfpModelCacheModel.createdBy = getCreatedBy();

        cfpModelCacheModel.cfpType = getCfpType();

        cfpModelCacheModel.cfpTradeClass = getCfpTradeClass();

        cfpModelCacheModel.modifiedBy = getModifiedBy();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            cfpModelCacheModel.createdDate = createdDate.getTime();
        } else {
            cfpModelCacheModel.createdDate = Long.MIN_VALUE;
        }

        cfpModelCacheModel.cfpNo = getCfpNo();

        String cfpNo = cfpModelCacheModel.cfpNo;

        if ((cfpNo != null) && (cfpNo.length() == 0)) {
            cfpModelCacheModel.cfpNo = null;
        }

        cfpModelCacheModel.cfpModelSid = getCfpModelSid();

        cfpModelCacheModel.batchId = getBatchId();

        String batchId = cfpModelCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            cfpModelCacheModel.batchId = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            cfpModelCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            cfpModelCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        cfpModelCacheModel.recordLockStatus = getRecordLockStatus();

        cfpModelCacheModel.internalNotes = getInternalNotes();

        String internalNotes = cfpModelCacheModel.internalNotes;

        if ((internalNotes != null) && (internalNotes.length() == 0)) {
            cfpModelCacheModel.internalNotes = null;
        }

        cfpModelCacheModel.cfpDesignation = getCfpDesignation();

        String cfpDesignation = cfpModelCacheModel.cfpDesignation;

        if ((cfpDesignation != null) && (cfpDesignation.length() == 0)) {
            cfpModelCacheModel.cfpDesignation = null;
        }

        cfpModelCacheModel.salesInclusion = getSalesInclusion();

        cfpModelCacheModel.cfpName = getCfpName();

        String cfpName = cfpModelCacheModel.cfpName;

        if ((cfpName != null) && (cfpName.length() == 0)) {
            cfpModelCacheModel.cfpName = null;
        }

        cfpModelCacheModel.cfpCategory = getCfpCategory();

        cfpModelCacheModel.source = getSource();

        String source = cfpModelCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            cfpModelCacheModel.source = null;
        }

        cfpModelCacheModel.cfpId = getCfpId();

        String cfpId = cfpModelCacheModel.cfpId;

        if ((cfpId != null) && (cfpId.length() == 0)) {
            cfpModelCacheModel.cfpId = null;
        }

        cfpModelCacheModel.cfpStatus = getCfpStatus();

        cfpModelCacheModel.parentCfpId = getParentCfpId();

        Date cfpStartDate = getCfpStartDate();

        if (cfpStartDate != null) {
            cfpModelCacheModel.cfpStartDate = cfpStartDate.getTime();
        } else {
            cfpModelCacheModel.cfpStartDate = Long.MIN_VALUE;
        }

        Date cfpEndDate = getCfpEndDate();

        if (cfpEndDate != null) {
            cfpModelCacheModel.cfpEndDate = cfpEndDate.getTime();
        } else {
            cfpModelCacheModel.cfpEndDate = Long.MIN_VALUE;
        }

        cfpModelCacheModel.parentCfpName = getParentCfpName();

        String parentCfpName = cfpModelCacheModel.parentCfpName;

        if ((parentCfpName != null) && (parentCfpName.length() == 0)) {
            cfpModelCacheModel.parentCfpName = null;
        }

        cfpModelCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = cfpModelCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            cfpModelCacheModel.inboundStatus = null;
        }

        return cfpModelCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(47);

        sb.append("{createdBy=");
        sb.append(getCreatedBy());
        sb.append(", cfpType=");
        sb.append(getCfpType());
        sb.append(", cfpTradeClass=");
        sb.append(getCfpTradeClass());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", cfpNo=");
        sb.append(getCfpNo());
        sb.append(", cfpModelSid=");
        sb.append(getCfpModelSid());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", internalNotes=");
        sb.append(getInternalNotes());
        sb.append(", cfpDesignation=");
        sb.append(getCfpDesignation());
        sb.append(", salesInclusion=");
        sb.append(getSalesInclusion());
        sb.append(", cfpName=");
        sb.append(getCfpName());
        sb.append(", cfpCategory=");
        sb.append(getCfpCategory());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", cfpId=");
        sb.append(getCfpId());
        sb.append(", cfpStatus=");
        sb.append(getCfpStatus());
        sb.append(", parentCfpId=");
        sb.append(getParentCfpId());
        sb.append(", cfpStartDate=");
        sb.append(getCfpStartDate());
        sb.append(", cfpEndDate=");
        sb.append(getCfpEndDate());
        sb.append(", parentCfpName=");
        sb.append(getParentCfpName());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(73);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.CfpModel");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cfpType</column-name><column-value><![CDATA[");
        sb.append(getCfpType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cfpTradeClass</column-name><column-value><![CDATA[");
        sb.append(getCfpTradeClass());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cfpNo</column-name><column-value><![CDATA[");
        sb.append(getCfpNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cfpModelSid</column-name><column-value><![CDATA[");
        sb.append(getCfpModelSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>internalNotes</column-name><column-value><![CDATA[");
        sb.append(getInternalNotes());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cfpDesignation</column-name><column-value><![CDATA[");
        sb.append(getCfpDesignation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salesInclusion</column-name><column-value><![CDATA[");
        sb.append(getSalesInclusion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cfpName</column-name><column-value><![CDATA[");
        sb.append(getCfpName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cfpCategory</column-name><column-value><![CDATA[");
        sb.append(getCfpCategory());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cfpId</column-name><column-value><![CDATA[");
        sb.append(getCfpId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cfpStatus</column-name><column-value><![CDATA[");
        sb.append(getCfpStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentCfpId</column-name><column-value><![CDATA[");
        sb.append(getParentCfpId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cfpStartDate</column-name><column-value><![CDATA[");
        sb.append(getCfpStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cfpEndDate</column-name><column-value><![CDATA[");
        sb.append(getCfpEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentCfpName</column-name><column-value><![CDATA[");
        sb.append(getParentCfpName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
