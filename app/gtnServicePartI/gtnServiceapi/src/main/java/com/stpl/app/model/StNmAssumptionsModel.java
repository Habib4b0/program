/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import com.stpl.app.service.persistence.StNmAssumptionsPK;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the StNmAssumptions service. Represents a row in the &quot;ST_NM_ASSUMPTIONS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.stpl.app.model.impl.StNmAssumptionsModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.stpl.app.model.impl.StNmAssumptionsImpl}.
 * </p>
 *
 * @author
 * @see StNmAssumptions
 * @see com.stpl.app.model.impl.StNmAssumptionsImpl
 * @see com.stpl.app.model.impl.StNmAssumptionsModelImpl
 * @generated
 */
@ProviderType
public interface StNmAssumptionsModel extends BaseModel<StNmAssumptions> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a st nm assumptions model instance should use the {@link StNmAssumptions} interface instead.
	 */

	/**
	 * Returns the primary key of this st nm assumptions.
	 *
	 * @return the primary key of this st nm assumptions
	 */
	public StNmAssumptionsPK getPrimaryKey();

	/**
	 * Sets the primary key of this st nm assumptions.
	 *
	 * @param primaryKey the primary key of this st nm assumptions
	 */
	public void setPrimaryKey(StNmAssumptionsPK primaryKey);

	/**
	 * Returns the last modified date of this st nm assumptions.
	 *
	 * @return the last modified date of this st nm assumptions
	 */
	public Date getLastModifiedDate();

	/**
	 * Sets the last modified date of this st nm assumptions.
	 *
	 * @param lastModifiedDate the last modified date of this st nm assumptions
	 */
	public void setLastModifiedDate(Date lastModifiedDate);

	/**
	 * Returns the parent of this st nm assumptions.
	 *
	 * @return the parent of this st nm assumptions
	 */
	public boolean getParent();

	/**
	 * Returns <code>true</code> if this st nm assumptions is parent.
	 *
	 * @return <code>true</code> if this st nm assumptions is parent; <code>false</code> otherwise
	 */
	public boolean isParent();

	/**
	 * Sets whether this st nm assumptions is parent.
	 *
	 * @param parent the parent of this st nm assumptions
	 */
	public void setParent(boolean parent);

	/**
	 * Returns the projection period of this st nm assumptions.
	 *
	 * @return the projection period of this st nm assumptions
	 */
	public int getProjectionPeriod();

	/**
	 * Sets the projection period of this st nm assumptions.
	 *
	 * @param projectionPeriod the projection period of this st nm assumptions
	 */
	public void setProjectionPeriod(int projectionPeriod);

	/**
	 * Returns the commentary of this st nm assumptions.
	 *
	 * @return the commentary of this st nm assumptions
	 */
	@AutoEscape
	public String getCommentary();

	/**
	 * Sets the commentary of this st nm assumptions.
	 *
	 * @param commentary the commentary of this st nm assumptions
	 */
	public void setCommentary(String commentary);

	/**
	 * Returns the nm assumptions sid of this st nm assumptions.
	 *
	 * @return the nm assumptions sid of this st nm assumptions
	 */
	public int getNmAssumptionsSid();

	/**
	 * Sets the nm assumptions sid of this st nm assumptions.
	 *
	 * @param nmAssumptionsSid the nm assumptions sid of this st nm assumptions
	 */
	public void setNmAssumptionsSid(int nmAssumptionsSid);

	/**
	 * Returns the projection details sid of this st nm assumptions.
	 *
	 * @return the projection details sid of this st nm assumptions
	 */
	public int getProjectionDetailsSid();

	/**
	 * Sets the projection details sid of this st nm assumptions.
	 *
	 * @param projectionDetailsSid the projection details sid of this st nm assumptions
	 */
	public void setProjectionDetailsSid(int projectionDetailsSid);

	/**
	 * Returns the net sales prior of this st nm assumptions.
	 *
	 * @return the net sales prior of this st nm assumptions
	 */
	public double getNetSalesPrior();

	/**
	 * Sets the net sales prior of this st nm assumptions.
	 *
	 * @param netSalesPrior the net sales prior of this st nm assumptions
	 */
	public void setNetSalesPrior(double netSalesPrior);

	/**
	 * Returns the user ID of this st nm assumptions.
	 *
	 * @return the user ID of this st nm assumptions
	 */
	public int getUserId();

	/**
	 * Sets the user ID of this st nm assumptions.
	 *
	 * @param userId the user ID of this st nm assumptions
	 */
	public void setUserId(int userId);

	/**
	 * Returns the gross sales percent change of this st nm assumptions.
	 *
	 * @return the gross sales percent change of this st nm assumptions
	 */
	public double getGrossSalesPercentChange();

	/**
	 * Sets the gross sales percent change of this st nm assumptions.
	 *
	 * @param grossSalesPercentChange the gross sales percent change of this st nm assumptions
	 */
	public void setGrossSalesPercentChange(double grossSalesPercentChange);

	/**
	 * Returns the total discount percent change of this st nm assumptions.
	 *
	 * @return the total discount percent change of this st nm assumptions
	 */
	public double getTotalDiscountPercentChange();

	/**
	 * Sets the total discount percent change of this st nm assumptions.
	 *
	 * @param totalDiscountPercentChange the total discount percent change of this st nm assumptions
	 */
	public void setTotalDiscountPercentChange(double totalDiscountPercentChange);

	/**
	 * Returns the reason codes of this st nm assumptions.
	 *
	 * @return the reason codes of this st nm assumptions
	 */
	@AutoEscape
	public String getReasonCodes();

	/**
	 * Sets the reason codes of this st nm assumptions.
	 *
	 * @param reasonCodes the reason codes of this st nm assumptions
	 */
	public void setReasonCodes(String reasonCodes);

	/**
	 * Returns the total discount percent projected of this st nm assumptions.
	 *
	 * @return the total discount percent projected of this st nm assumptions
	 */
	public double getTotalDiscountPercentProjected();

	/**
	 * Sets the total discount percent projected of this st nm assumptions.
	 *
	 * @param totalDiscountPercentProjected the total discount percent projected of this st nm assumptions
	 */
	public void setTotalDiscountPercentProjected(
		double totalDiscountPercentProjected);

	/**
	 * Returns the total discount percent prior of this st nm assumptions.
	 *
	 * @return the total discount percent prior of this st nm assumptions
	 */
	public double getTotalDiscountPercentPrior();

	/**
	 * Sets the total discount percent prior of this st nm assumptions.
	 *
	 * @param totalDiscountPercentPrior the total discount percent prior of this st nm assumptions
	 */
	public void setTotalDiscountPercentPrior(double totalDiscountPercentPrior);

	/**
	 * Returns the net sales projected of this st nm assumptions.
	 *
	 * @return the net sales projected of this st nm assumptions
	 */
	public double getNetSalesProjected();

	/**
	 * Sets the net sales projected of this st nm assumptions.
	 *
	 * @param netSalesProjected the net sales projected of this st nm assumptions
	 */
	public void setNetSalesProjected(double netSalesProjected);

	/**
	 * Returns the st nm assumptions sid of this st nm assumptions.
	 *
	 * @return the st nm assumptions sid of this st nm assumptions
	 */
	@AutoEscape
	public String getStNmAssumptionsSid();

	/**
	 * Sets the st nm assumptions sid of this st nm assumptions.
	 *
	 * @param stNmAssumptionsSid the st nm assumptions sid of this st nm assumptions
	 */
	public void setStNmAssumptionsSid(String stNmAssumptionsSid);

	/**
	 * Returns the gross sales projected of this st nm assumptions.
	 *
	 * @return the gross sales projected of this st nm assumptions
	 */
	public double getGrossSalesProjected();

	/**
	 * Sets the gross sales projected of this st nm assumptions.
	 *
	 * @param grossSalesProjected the gross sales projected of this st nm assumptions
	 */
	public void setGrossSalesProjected(double grossSalesProjected);

	/**
	 * Returns the session ID of this st nm assumptions.
	 *
	 * @return the session ID of this st nm assumptions
	 */
	public int getSessionId();

	/**
	 * Sets the session ID of this st nm assumptions.
	 *
	 * @param sessionId the session ID of this st nm assumptions
	 */
	public void setSessionId(int sessionId);

	/**
	 * Returns the gross sales prior of this st nm assumptions.
	 *
	 * @return the gross sales prior of this st nm assumptions
	 */
	public double getGrossSalesPrior();

	/**
	 * Sets the gross sales prior of this st nm assumptions.
	 *
	 * @param grossSalesPrior the gross sales prior of this st nm assumptions
	 */
	public void setGrossSalesPrior(double grossSalesPrior);

	/**
	 * Returns the is checked of this st nm assumptions.
	 *
	 * @return the is checked of this st nm assumptions
	 */
	public boolean getIsChecked();

	/**
	 * Returns <code>true</code> if this st nm assumptions is is checked.
	 *
	 * @return <code>true</code> if this st nm assumptions is is checked; <code>false</code> otherwise
	 */
	public boolean isIsChecked();

	/**
	 * Sets whether this st nm assumptions is is checked.
	 *
	 * @param isChecked the is checked of this st nm assumptions
	 */
	public void setIsChecked(boolean isChecked);

	/**
	 * Returns the cam ID of this st nm assumptions.
	 *
	 * @return the cam ID of this st nm assumptions
	 */
	public int getCamId();

	/**
	 * Sets the cam ID of this st nm assumptions.
	 *
	 * @param camId the cam ID of this st nm assumptions
	 */
	public void setCamId(int camId);

	/**
	 * Returns the net sales percent change of this st nm assumptions.
	 *
	 * @return the net sales percent change of this st nm assumptions
	 */
	public double getNetSalesPercentChange();

	/**
	 * Sets the net sales percent change of this st nm assumptions.
	 *
	 * @param netSalesPercentChange the net sales percent change of this st nm assumptions
	 */
	public void setNetSalesPercentChange(double netSalesPercentChange);

	/**
	 * Returns the segment of this st nm assumptions.
	 *
	 * @return the segment of this st nm assumptions
	 */
	@AutoEscape
	public String getSegment();

	/**
	 * Sets the segment of this st nm assumptions.
	 *
	 * @param segment the segment of this st nm assumptions
	 */
	public void setSegment(String segment);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(StNmAssumptions stNmAssumptions);

	@Override
	public int hashCode();

	@Override
	public CacheModel<StNmAssumptions> toCacheModel();

	@Override
	public StNmAssumptions toEscapedModel();

	@Override
	public StNmAssumptions toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}