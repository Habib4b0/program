package com.stpl.app.model.impl;

import com.stpl.app.model.NmActualDiscount;
import com.stpl.app.model.NmActualDiscountModel;
import com.stpl.app.service.persistence.NmActualDiscountPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NmActualDiscount service. Represents a row in the &quot;NM_ACTUAL_DISCOUNT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.NmActualDiscountModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NmActualDiscountImpl}.
 * </p>
 *
 * @author
 * @see NmActualDiscountImpl
 * @see com.stpl.app.model.NmActualDiscount
 * @see com.stpl.app.model.NmActualDiscountModel
 * @generated
 */
public class NmActualDiscountModelImpl extends BaseModelImpl<NmActualDiscount>
    implements NmActualDiscountModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a nm actual discount model instance should use the {@link com.stpl.app.model.NmActualDiscount} interface instead.
     */
    public static final String TABLE_NAME = "NM_ACTUAL_DISCOUNT";
    public static final Object[][] TABLE_COLUMNS = {
            { "ACTUAL_RATE", Types.DOUBLE },
            { "PERIOD_SID", Types.INTEGER },
            { "PROJECTION_DETAILS_SID", Types.INTEGER },
            { "ACTUAL_SALES", Types.DOUBLE }
        };
    public static final String TABLE_SQL_CREATE = "create table NM_ACTUAL_DISCOUNT (ACTUAL_RATE DOUBLE,PERIOD_SID INTEGER not null IDENTITY,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,ACTUAL_SALES DOUBLE,primary key (PERIOD_SID, PROJECTION_DETAILS_SID))";
    public static final String TABLE_SQL_DROP = "drop table NM_ACTUAL_DISCOUNT";
    public static final String ORDER_BY_JPQL = " ORDER BY nmActualDiscount.id.periodSid ASC, nmActualDiscount.id.projectionDetailsSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY NM_ACTUAL_DISCOUNT.PERIOD_SID ASC, NM_ACTUAL_DISCOUNT.PROJECTION_DETAILS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.NmActualDiscount"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.NmActualDiscount"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.NmActualDiscount"));
    private static ClassLoader _classLoader = NmActualDiscount.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            NmActualDiscount.class
        };
    private double _actualRate;
    private int _periodSid;
    private int _projectionDetailsSid;
    private double _actualSales;
    private NmActualDiscount _escapedModel;

    public NmActualDiscountModelImpl() {
    }

    @Override
    public NmActualDiscountPK getPrimaryKey() {
        return new NmActualDiscountPK(_periodSid, _projectionDetailsSid);
    }

    @Override
    public void setPrimaryKey(NmActualDiscountPK primaryKey) {
        setPeriodSid(primaryKey.periodSid);
        setProjectionDetailsSid(primaryKey.projectionDetailsSid);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new NmActualDiscountPK(_periodSid, _projectionDetailsSid);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((NmActualDiscountPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return NmActualDiscount.class;
    }

    @Override
    public String getModelClassName() {
        return NmActualDiscount.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("actualRate", getActualRate());
        attributes.put("periodSid", getPeriodSid());
        attributes.put("projectionDetailsSid", getProjectionDetailsSid());
        attributes.put("actualSales", getActualSales());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Double actualRate = (Double) attributes.get("actualRate");

        if (actualRate != null) {
            setActualRate(actualRate);
        }

        Integer periodSid = (Integer) attributes.get("periodSid");

        if (periodSid != null) {
            setPeriodSid(periodSid);
        }

        Integer projectionDetailsSid = (Integer) attributes.get(
                "projectionDetailsSid");

        if (projectionDetailsSid != null) {
            setProjectionDetailsSid(projectionDetailsSid);
        }

        Double actualSales = (Double) attributes.get("actualSales");

        if (actualSales != null) {
            setActualSales(actualSales);
        }
    }

    @Override
    public double getActualRate() {
        return _actualRate;
    }

    @Override
    public void setActualRate(double actualRate) {
        _actualRate = actualRate;
    }

    @Override
    public int getPeriodSid() {
        return _periodSid;
    }

    @Override
    public void setPeriodSid(int periodSid) {
        _periodSid = periodSid;
    }

    @Override
    public int getProjectionDetailsSid() {
        return _projectionDetailsSid;
    }

    @Override
    public void setProjectionDetailsSid(int projectionDetailsSid) {
        _projectionDetailsSid = projectionDetailsSid;
    }

    @Override
    public double getActualSales() {
        return _actualSales;
    }

    @Override
    public void setActualSales(double actualSales) {
        _actualSales = actualSales;
    }

    @Override
    public NmActualDiscount toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (NmActualDiscount) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NmActualDiscountImpl nmActualDiscountImpl = new NmActualDiscountImpl();

        nmActualDiscountImpl.setActualRate(getActualRate());
        nmActualDiscountImpl.setPeriodSid(getPeriodSid());
        nmActualDiscountImpl.setProjectionDetailsSid(getProjectionDetailsSid());
        nmActualDiscountImpl.setActualSales(getActualSales());

        nmActualDiscountImpl.resetOriginalValues();

        return nmActualDiscountImpl;
    }

    @Override
    public int compareTo(NmActualDiscount nmActualDiscount) {
        NmActualDiscountPK primaryKey = nmActualDiscount.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof NmActualDiscount)) {
            return false;
        }

        NmActualDiscount nmActualDiscount = (NmActualDiscount) obj;

        NmActualDiscountPK primaryKey = nmActualDiscount.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<NmActualDiscount> toCacheModel() {
        NmActualDiscountCacheModel nmActualDiscountCacheModel = new NmActualDiscountCacheModel();

        nmActualDiscountCacheModel.actualRate = getActualRate();

        nmActualDiscountCacheModel.periodSid = getPeriodSid();

        nmActualDiscountCacheModel.projectionDetailsSid = getProjectionDetailsSid();

        nmActualDiscountCacheModel.actualSales = getActualSales();

        return nmActualDiscountCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{actualRate=");
        sb.append(getActualRate());
        sb.append(", periodSid=");
        sb.append(getPeriodSid());
        sb.append(", projectionDetailsSid=");
        sb.append(getProjectionDetailsSid());
        sb.append(", actualSales=");
        sb.append(getActualSales());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.NmActualDiscount");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>actualRate</column-name><column-value><![CDATA[");
        sb.append(getActualRate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>periodSid</column-name><column-value><![CDATA[");
        sb.append(getPeriodSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>actualSales</column-name><column-value><![CDATA[");
        sb.append(getActualSales());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
