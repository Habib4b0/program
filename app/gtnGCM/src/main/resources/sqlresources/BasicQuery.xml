<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<sql>
    <entity id="Company Contract Search">
        <query> 
                    <![CDATA[
                        DECLARE @COMPANY_MS_SID VARCHAR(1000) = ?;


DECLARE @TEMP_PROJ AS TABLE
  (
     PROJECTION_MASTER_SID INT PRIMARY KEY
  )

INSERT INTO @TEMP_PROJ
            (PROJECTION_MASTER_SID)
SELECT DISTINCT A.PROJECTION_MASTER_SID
FROM   WORKFLOW_MASTER A
JOIN   PROJECTION_DETAILS B ON A.PROJECTION_MASTER_SID = B.PROJECTION_MASTER_SID
JOIN   CCP_DETAILS C ON C.CCP_DETAILS_SID = B.CCP_DETAILS_SID
WHERE  A.PROJECTION_MASTER_SID IS NOT NULL
       AND C.COMPANY_MASTER_SID IN( @COMPANY_MS_SID)

if object_id('tempdb..#intr') is not null
drop table #intr

CREATE TABLE #intr
  (
     PROJECTION_MASTER_SID INT,
     WORKFLOW_MASTER_SID   INT,
     WORKFLOW_STATUS       VARCHAR(200),
     IFP_CONTRACT_SID      INT,
     CFP_CONTRACT_SID      INT,
     CONTRACT_MASTER_SID   INT,
     COMPANY_MASTER_SID    INT
  )

INSERT #intr
SELECT DISTINCT PD.PROJECTION_MASTER_SID,
                WM.WORKFLOW_MASTER_SID,
                HT.DESCRIPTION AS WORKFLOW_STATUS,
                IFP_C.IFP_CONTRACT_SID,
                CFP_D.CFP_CONTRACT_SID,
                CFP_C.CONTRACT_MASTER_SID,
                CFP_D.COMPANY_MASTER_SID
FROM   CFP_CONTRACT CFP_C
       JOIN CFP_CONTRACT_DETAILS CFP_D
         ON CFP_C.CFP_CONTRACT_SID = CFP_D.CFP_CONTRACT_SID
       JOIN IFP_CONTRACT IFP_C
         ON IFP_C.CFP_CONTRACT_SID = CFP_D.CFP_CONTRACT_SID
            AND IFP_C.CONTRACT_MASTER_SID = CFP_C.CONTRACT_MASTER_SID
       JOIN IFP_CONTRACT_DETAILS IFP_D
         ON IFP_D.IFP_CONTRACT_SID = IFP_C.IFP_CONTRACT_SID
       JOIN CCP_DETAILS CCP
         ON CCP.ITEM_MASTER_SID = IFP_D.ITEM_MASTER_SID
            AND CCP.COMPANY_MASTER_SID = CFP_D.COMPANY_MASTER_SID
            AND CCP.CONTRACT_MASTER_SID = CFP_C.CONTRACT_MASTER_SID
       JOIN PROJECTION_DETAILS PD
         ON PD.CCP_DETAILS_SID = CCP.CCP_DETAILS_SID
       JOIN WORKFLOW_MASTER WM
         ON WM.PROJECTION_MASTER_SID = PD.PROJECTION_MASTER_SID
       JOIN HELPER_TABLE HT
         ON HT.HELPER_TABLE_SID = WM.WORKFLOW_STATUS_ID
		 where cfp_c.INBOUND_STATUS <> 'D'
		 and cfp_d.INBOUND_STATUS <> 'D'
		 and IFP_C.INBOUND_STATUS <> 'D'
		 and IFP_D.INBOUND_STATUS <> 'D'
AND PD.PROJECTION_MASTER_SID NOT IN (SELECT PROJECTION_MASTER_SID
                                            FROM   @TEMP_PROJ)

;WITH TEMP
     AS (SELECT DISTINCT CM.COMPANY_NAME AS 'Contract Holder',
                         CON.CONTRACT_NO,
                         CON.CONTRACT_NAME,
                         HEL.DESCRIPTION AS 'CONTRACT_TYPE',
                         CON.START_DATE  AS 'CONTRACT_START_DATE',
                         CON.END_DATE    AS 'CONTRACT_END_DATE',
                         CFP_CON.CFP_NAME,
                         CFP_CON.CFP_NO,
                         CFP_MOD.CFP_ID,
                         CFP_CON.CFP_STATUS,
                         CFP_CON.CFP_START_DATE,
                         CFP_CON.CFP_END_DATE,
                         IFP_CON.IFP_NAME,
                         IFP_CON.IFP_NO,
                         IFP_MOD.IFP_ID,
                         IFP_CON.IFP_STATUS,
                         IFP_CON.IFP_START_DATE,
                         IFP_CON.IFP_END_DATE,
                         PS_CON.PS_NAME,
                         PS_CON.PS_NO    AS 'PS NO',
                         PS_MOD.PS_ID,
                         PS_CON.PS_STATUS,
                         PS_CON.PS_START_DATE,
                         PS_CON.PS_END_DATE,
                         RS_CON.RS_NAME,
                         RS_CON.RS_NO    AS 'RAR NO',
                         RS_CON.RS_Id    AS 'RAR CATEGORY',
                         RS_MOD.RS_ID,
                         RS_CON.RS_STATUS,
                         RS_CON.RS_START_DATE,
                         RS_CON.RS_END_DATE,
                         CFP_CON.CFP_CONTRACT_SID,
                         RS_CON.RS_CONTRACT_SID,
                         IFP_CON.IFP_CONTRACT_SID,
                         PS_CON.PS_CONTRACT_SID,
                         CON.CONTRACT_MASTER_SID,
                         A.PROJECTION_MASTER_SID,
                         A.WORKFLOW_MASTER_SID
         FROM   CONTRACT_MASTER CON
                LEFT JOIN COMPANY_MASTER CM
                       ON CON.CONT_HOLD_COMPANY_MASTER_SID = CM.COMPANY_MASTER_SID
                JOIN CFP_CONTRACT CFP_CON
                  ON CFP_CON.CONTRACT_MASTER_SID = CON.CONTRACT_MASTER_SID
                JOIN IFP_CONTRACT IFP_CON
                  ON IFP_CON.CONTRACT_MASTER_SID = CON.CONTRACT_MASTER_SID
                     AND IFP_CON.CFP_CONTRACT_SID = CFP_CON.CFP_CONTRACT_SID
                JOIN PS_CONTRACT PS_CON
                  ON PS_CON.CONTRACT_MASTER_SID = CON.CONTRACT_MASTER_SID
                     AND ps_con.CFP_CONTRACT_SID = CFP_CON.CFP_CONTRACT_SID
                     AND PS_CON.IFP_CONTRACT_SID = IFP_CON.IFP_CONTRACT_SID
                JOIN RS_CONTRACT RS_CON
                  ON RS_CON.CONTRACT_MASTER_SID = CON.CONTRACT_MASTER_SID
                     AND RS_CON.CFP_CONTRACT_SID = CFP_CON.CFP_CONTRACT_SID
                     AND rs_con.IFP_CONTRACT_SID = IFP_CON.IFP_CONTRACT_SID
                     AND RS_CON.PS_CONTRACT_SID = PS_CON.PS_CONTRACT_SID
                JOIN HELPER_TABLE HEL
                  ON HEL.HELPER_TABLE_SID = CON.CONTRACT_TYPE
                JOIN CFP_CONTRACT_DETAILS CFP_CON_DET
                  ON CFP_CON_DET.CFP_CONTRACT_SID = CFP_CON.CFP_CONTRACT_SID
                JOIN COMPANY_MASTER CM1
                  ON CM1.COMPANY_MASTER_SID = CFP_CON_DET.COMPANY_MASTER_SID
                CROSS APPLY(SELECT DISTINCT t.PROJECTION_MASTER_SID,
                                            t.WORKFLOW_MASTER_SID,
                                            t.WORKFLOW_STATUS,
                                            t.IFP_CONTRACT_SID,
                                            t.CFP_CONTRACT_SID
                            FROM   #intr t
                            WHERE  t.CONTRACT_MASTER_SID = CON.CONTRACT_MASTER_SID
                                   AND t.COMPANY_MASTER_SID = CM1.COMPANY_MASTER_SID
                                   AND t.CFP_CONTRACT_SID = CFP_CON.CFP_CONTRACT_SID
                                   AND t.IFP_CONTRACT_SID = IFP_CON.IFP_CONTRACT_SID) A
                LEFT JOIN(SELECT CFP_MOD.CFP_NO,
                                 CFP_MODEL_SID,
                                 CFP_MOD.CFP_ID,
                                 CFP_ST.DESCRIPTION AS CFP_STATUS
                          FROM   CFP_MODEL CFP_MOD
                                 INNER JOIN HELPER_TABLE CFP_ST
                                         ON CFP_ST.HELPER_TABLE_SID = CFP_MOD.CFP_STATUS
										 where CFP_MOD.INBOUND_STATUS <> 'D') CFP_MOD
                       ON CFP_MOD.CFP_MODEL_SID = CFP_CON.CFP_MODEL_SID
                LEFT JOIN(SELECT IFP_MOD.IFP_NO,
                                 IFP_MODEL_SID,
                                 IFP_MOD.IFP_ID,
                                 IFP_ST.DESCRIPTION AS IFP_STATUS
                          FROM   IFP_MODEL IFP_MOD
                                 JOIN HELPER_TABLE IFP_ST
                                   ON IFP_ST.HELPER_TABLE_SID = IFP_MOD.IFP_STATUS
								    where IFP_MOD.INBOUND_STATUS <> 'D') IFP_MOD
                       ON IFP_MOD.IFP_MODEL_SID = IFP_CON.IFP_MODEL_SID
                LEFT JOIN(SELECT RS_MOD.RS_NO,
                                 RS_MODEL_SID,
                                 RS_MOD.RS_ID,
                                 RS_ST.DESCRIPTION AS RS_STATUS
                          FROM   RS_MODEL RS_MOD
                                 JOIN HELPER_TABLE RS_ST
                                   ON RS_ST.HELPER_TABLE_SID = RS_MOD.RS_STATUS
								    where RS_MOD.INBOUND_STATUS <> 'D'
								   ) RS_MOD
                       ON RS_MOD.RS_MODEL_SID = RS_CON.RS_MODEL_SID
                LEFT JOIN(SELECT PS_MOD.PS_NO,
                                 PS_MODEL_SID,
                                 PS_MOD.PS_ID,
                                 PS_ST.DESCRIPTION AS PS_STATUS
                          FROM   PS_MODEL PS_MOD
                                 JOIN HELPER_TABLE PS_ST
                                   ON PS_ST.HELPER_TABLE_SID = PS_MOD.PS_STATUS
								       where PS_MOD.INBOUND_STATUS <> 'D'
								   ) PS_MOD
                       ON PS_MOD.PS_MODEL_SID = PS_CON.PS_MODEL_SID
         WHERE  CON.INBOUND_STATUS <> 'D'
                AND CFP_CON.INBOUND_STATUS <> 'D'
                AND CFP_CON_DET.INBOUND_STATUS <> 'D'
                AND IFP_CON.INBOUND_STATUS <> 'D'
                AND PS_CON.INBOUND_STATUS <> 'D'
                AND RS_CON.INBOUND_STATUS <> 'D'
                AND CON.CONTRACT_NO LIKE '%'
                AND CM1.COMPANY_MASTER_SID NOT IN ( @COMPANY_MS_SID )
                AND CFP_CON.CFP_CONTRACT_SID NOT IN(SELECT CFP.CFP_CONTRACT_SID
                                                    FROM   CONTRACT_MASTER A
                                                           JOIN CFP_CONTRACT CFP
                                                             ON A.CONTRACT_MASTER_SID = CFP.CONTRACT_MASTER_SID
                                                                AND CFP.CONTRACT_MASTER_SID = CON.CONTRACT_MASTER_SID
                                                           JOIN CFP_CONTRACT_DETAILS CFP_D
                                                             ON CFP_D.CFP_CONTRACT_SID = CFP.CFP_CONTRACT_SID
                                                    WHERE  CFP_D.COMPANY_MASTER_SID IN( @COMPANY_MS_SID )
                                                           AND CFP_D.INBOUND_STATUS <> 'D'
                                                    GROUP  BY CFP.CFP_CONTRACT_SID
                                                    HAVING Sum(( CASE
                                                                   WHEN CFP_D.COMPANY_MASTER_SID IN( @COMPANY_MS_SID ) THEN -1
                                                                   ELSE 0
                                                                 END )) = -?))
INSERT INTO GCM_GLOBAL_DETAILS
            (CHECK_RECORD,
             CONTRACT_MASTER_SID,
             CFP_CONTRACT_SID,
             IFP_CONTRACT_SID,
             PS_CONTRACT_SID,
             RS_CONTRACT_SID,
             USER_ID,
             SESSION_ID,
             SCREEN_NAME,
             OPERATION,
             PROJECTION_MASTER_SID,
             WORKFLOW_MASTER_SID,
             MODULE_NAME,
             CREATED_DATE)
SELECT '0',
       CONTRACT_MASTER_SID,
       CFP_CONTRACT_SID,
       IFP_CONTRACT_SID,
       PS_CONTRACT_SID,
       RS_CONTRACT_SID,
       '?',
       '?',
       '?',
       '0',
       PROJECTION_MASTER_SID,
       WORKFLOW_MASTER_SID,
       'CUSTOMER_MANAGEMENT',
       GETDATE()
FROM   TEMP; 

 DELETE FROM GCM_GLOBAL_DETAILS
WHERE CREATED_DATE <= GETDATE() - 1
 AND MODULE_NAME = 'CUSTOMER_MANAGEMENT';
                    ]]>
        </query></entity>
    <entity id="Company Contract Search Inverse">
        <query> 
                    <![CDATA[
    DECLARE @COMPANY_MS_SID       VARCHAR(1000) ='?';
    
	WITH TEMP
    AS (SELECT DISTINCT CM.COMPANY_NAME AS 'Contract Holder',
                         CON.CONTRACT_NO,
                         CON.CONTRACT_NAME,
                         HEL.DESCRIPTION AS 'CONTRACT_TYPE',
                         CON.START_DATE  AS 'CONTRACT_START_DATE',
                         CON.END_DATE    AS 'CONTRACT_END_DATE',
                         CFP_CON.CFP_NAME,
                         CFP_CON.CFP_NO,
                         CFP_MOD.CFP_ID,
                         CFP_CON.CFP_STATUS,
                         CFP_CON.CFP_START_DATE,
                         CFP_CON.CFP_END_DATE,
                         IFP_CON.IFP_NAME,
                         IFP_CON.IFP_NO,
                         IFP_MOD.IFP_ID,
                         IFP_CON.IFP_STATUS,
                         IFP_CON.IFP_START_DATE,
                         IFP_CON.IFP_END_DATE,
                         PS_CON.PS_NAME,
                         PS_CON.PS_NO    AS 'PS NO',
                         PS_MOD.PS_ID,
                         PS_CON.PS_STATUS,
                         PS_CON.PS_START_DATE,
                         PS_CON.PS_END_DATE,
                         RS_CON.RS_NAME,
                         RS_CON.RS_NO    AS 'RAR NO',
                         RS_CON.RS_Id    AS 'RAR CATEGORY',
                         RS_MOD.RS_ID,
                         RS_CON.RS_STATUS,
                         RS_CON.RS_START_DATE,
                         RS_CON.RS_END_DATE,
                         CFP_CON.CFP_CONTRACT_SID,
                         RS_CON.RS_CONTRACT_SID,
                         IFP_CON.IFP_CONTRACT_SID,
                         PS_CON.PS_CONTRACT_SID,
                         CFP_CON_DET.COMPANY_START_DATE,
                         CFP_CON_DET.COMPANY_END_DATE,
                         CFP_CON_DET.CFP_CONTRACT_ATTACHED_STATUS,
                         CON.CONTRACT_MASTER_SID,
                         A.PROJECTION_MASTER_SID,
                         A.WORKFLOW_MASTER_SID
         FROM   CONTRACT_MASTER CON
                LEFT JOIN COMPANY_MASTER CM
                       ON CON.CONT_HOLD_COMPANY_MASTER_SID = CM.COMPANY_MASTER_SID
                JOIN CFP_CONTRACT CFP_CON
                  ON CFP_CON.CONTRACT_MASTER_SID = CON.CONTRACT_MASTER_SID
                JOIN IFP_CONTRACT IFP_CON
                  ON IFP_CON.CONTRACT_MASTER_SID = CON.CONTRACT_MASTER_SID
                     AND IFP_CON.CFP_CONTRACT_SID = CFP_CON.CFP_CONTRACT_SID
                JOIN PS_CONTRACT PS_CON
                  ON PS_CON.CONTRACT_MASTER_SID = CON.CONTRACT_MASTER_SID
                     AND ps_con.CFP_CONTRACT_SID = CFP_CON.CFP_CONTRACT_SID
                     AND PS_CON.IFP_CONTRACT_SID = IFP_CON.IFP_CONTRACT_SID
                JOIN RS_CONTRACT RS_CON
                  ON RS_CON.CONTRACT_MASTER_SID = CON.CONTRACT_MASTER_SID
                     AND RS_CON.CFP_CONTRACT_SID = CFP_CON.CFP_CONTRACT_SID
                     AND rs_con.IFP_CONTRACT_SID = IFP_CON.IFP_CONTRACT_SID
                     AND RS_CON.PS_CONTRACT_SID = PS_CON.PS_CONTRACT_SID
                JOIN HELPER_TABLE HEL
                  ON HEL.HELPER_TABLE_SID = CON.CONTRACT_TYPE
                JOIN CFP_CONTRACT_DETAILS CFP_CON_DET
                  ON CFP_CON_DET.CFP_CONTRACT_SID = CFP_CON.CFP_CONTRACT_SID
                JOIN COMPANY_MASTER CM1
                  ON CM1.COMPANY_MASTER_SID = CFP_CON_DET.COMPANY_MASTER_SID
                CROSS APPLY(SELECT PD.PROJECTION_MASTER_SID,
                                   WM.WORKFLOW_MASTER_SID,
                                   HT.DESCRIPTION AS WORKFLOW_STATUS,
                                   IFP_C.IFP_CONTRACT_SID,
                                   CFP_D.CFP_CONTRACT_SID
                            FROM   CFP_CONTRACT CFP_C
                                   JOIN CFP_CONTRACT_DETAILS CFP_D
                                     ON CFP_C.CFP_CONTRACT_SID = CFP_D.CFP_CONTRACT_SID
                                        AND CFP_C.CONTRACT_MASTER_SID = CON.CONTRACT_MASTER_SID
                                        AND CFP_D.COMPANY_MASTER_SID = CM1.COMPANY_MASTER_SID
                                   JOIN IFP_CONTRACT IFP_C
                                     ON IFP_C.CFP_CONTRACT_SID = CFP_D.CFP_CONTRACT_SID
                                        AND IFP_C.CONTRACT_MASTER_SID = CON.CONTRACT_MASTER_SID
                                   JOIN IFP_CONTRACT_DETAILS IFP_D
                                     ON IFP_D.IFP_CONTRACT_SID = IFP_C.IFP_CONTRACT_SID
                                   JOIN CCP_DETAILS CCP
                                     ON CCP.ITEM_MASTER_SID = IFP_D.ITEM_MASTER_SID
                                        AND CCP.COMPANY_MASTER_SID = CFP_D.COMPANY_MASTER_SID
                                        AND CCP.CONTRACT_MASTER_SID = CON.CONTRACT_MASTER_SID
                                   JOIN PROJECTION_DETAILS PD
                                     ON PD.CCP_DETAILS_SID = CCP.CCP_DETAILS_SID
                                   JOIN WORKFLOW_MASTER WM
                                     ON WM.PROJECTION_MASTER_SID = PD.PROJECTION_MASTER_SID
                                   JOIN HELPER_TABLE HT
                                     ON HT.HELPER_TABLE_SID = WM.WORKFLOW_STATUS_ID
                            WHERE  CFP_D.CFP_CONTRACT_SID = CFP_CON.CFP_CONTRACT_SID
                                   AND IFP_D.IFP_CONTRACT_SID = IFP_CON.IFP_CONTRACT_SID
                            GROUP  BY PD.PROJECTION_MASTER_SID,
                                      IFP_C.IFP_CONTRACT_SID,
                                      CFP_D.CFP_CONTRACT_SID,
                                      WM.WORKFLOW_MASTER_SID,
                                      HT.DESCRIPTION)A
                LEFT JOIN (SELECT CFP_MOD.CFP_NO,
                                  CFP_MODEL_SID,
                                  CFP_MOD.CFP_ID,
                                  CFP_ST.DESCRIPTION AS CFP_STATUS
                           FROM   CFP_MODEL CFP_MOD
                                  INNER JOIN HELPER_TABLE CFP_ST
                                          ON CFP_ST.HELPER_TABLE_SID = CFP_MOD.CFP_STATUS) CFP_MOD
                       ON CFP_MOD.CFP_MODEL_SID = CFP_CON.CFP_MODEL_SID
                LEFT JOIN (SELECT IFP_MOD.IFP_NO,
                                  IFP_MODEL_SID,
                                  IFP_MOD.IFP_ID,
                                  IFP_ST.DESCRIPTION AS IFP_STATUS
                           FROM   IFP_MODEL IFP_MOD
                                  JOIN HELPER_TABLE IFP_ST
                                    ON IFP_ST.HELPER_TABLE_SID = IFP_MOD.IFP_STATUS) IFP_MOD
                       ON IFP_MOD.IFP_MODEL_SID = IFP_CON.IFP_MODEL_SID
                LEFT JOIN (SELECT RS_MOD.RS_NO,
                                  RS_MODEL_SID,
                                  RS_MOD.RS_ID,
                                  RS_ST.DESCRIPTION AS RS_STATUS
                           FROM   RS_MODEL RS_MOD
                                  JOIN HELPER_TABLE RS_ST
                                    ON RS_ST.HELPER_TABLE_SID = RS_MOD.RS_STATUS) RS_MOD
                       ON RS_MOD.RS_MODEL_SID = RS_CON.RS_MODEL_SID
                LEFT JOIN (SELECT PS_MOD.PS_NO,
                                  PS_MODEL_SID,
                                  PS_MOD.PS_ID,
                                  PS_ST.DESCRIPTION AS PS_STATUS
                           FROM   PS_MODEL PS_MOD
                                  JOIN HELPER_TABLE PS_ST
                                    ON PS_ST.HELPER_TABLE_SID = PS_MOD.PS_STATUS) PS_MOD
                       ON PS_MOD.PS_MODEL_SID = PS_CON.PS_MODEL_SID
         WHERE CON.INBOUND_STATUS <> 'D'
                AND CFP_CON.INBOUND_STATUS <> 'D'
                AND CFP_CON_DET.INBOUND_STATUS <> 'D'
                AND IFP_CON.INBOUND_STATUS <> 'D'
                AND PS_CON.INBOUND_STATUS <> 'D'
                AND RS_CON.INBOUND_STATUS <> 'D'
                AND CON.CONTRACT_NO LIKE '%'
                AND CM1.COMPANY_MASTER_SID IN ( SELECT U.TOKEN FROM udf_splitstring (@COMPANY_MS_SID,',')U )
                AND CFP_CON.CFP_CONTRACT_SID IN (SELECT CFP.CFP_CONTRACT_SID
                                                 FROM   CONTRACT_MASTER A
                                                        JOIN CFP_CONTRACT CFP
                                                          ON A.CONTRACT_MASTER_SID = CFP.CONTRACT_MASTER_SID
                                                             AND CFP.CONTRACT_MASTER_SID = CON.CONTRACT_MASTER_SID
                                                        JOIN CFP_CONTRACT_DETAILS CFP_D
                                                          ON CFP_D.CFP_CONTRACT_SID = CFP.CFP_CONTRACT_SID
                                                        JOIN ( SELECT U.TOKEN FROM udf_splitstring (@COMPANY_MS_SID,',')U ) U ON
														CFP_D.COMPANY_MASTER_SID = U.TOKEN
                                                        AND CFP_D.INBOUND_STATUS <> 'D'
                                                 GROUP  BY CFP.CFP_CONTRACT_SID
                                                 HAVING Sum(( CASE WHEN CFP_D.COMPANY_MASTER_SID = U.TOKEN THEN -1
                                                                   ELSE 0
                                                                   END )) = -?))
INSERT INTO GCM_GLOBAL_DETAILS
            (CHECK_RECORD,
             CONTRACT_MASTER_SID,
             CFP_CONTRACT_SID,
             IFP_CONTRACT_SID,
             PS_CONTRACT_SID,
             RS_CONTRACT_SID,
             USER_ID,
             SESSION_ID,
             SCREEN_NAME,
             START_DATE,
             END_DATE,
             STATUS,
             TEMP_START_DATE,
             TEMP_END_DATE,
             TEMP_STATUS,
             OPERATION,
             PROJECTION_MASTER_SID,
             WORKFLOW_MASTER_SID,
             MODULE_NAME,
             CREATED_DATE)
SELECT '0',
       CONTRACT_MASTER_SID,
       CFP_CONTRACT_SID,
       IFP_CONTRACT_SID,
       PS_CONTRACT_SID,
       RS_CONTRACT_SID,
       '?',
       '?',
       '?',
       COMPANY_START_DATE,
       COMPANY_END_DATE,
       CFP_CONTRACT_ATTACHED_STATUS,
       COMPANY_START_DATE           AS 'TEMP_START_DATE',
       COMPANY_END_DATE             AS 'TEMP_END_DATE',
       CFP_CONTRACT_ATTACHED_STATUS AS 'TEMP_STATUS',
       '0',
       PROJECTION_MASTER_SID,
       WORKFLOW_MASTER_SID,
       'CUSTOMER_MANAGEMENT',
       GETDATE()
FROM   TEMP; 


 DELETE FROM GCM_GLOBAL_DETAILS
WHERE CREATED_DATE <= GETDATE() - 1
 AND MODULE_NAME = 'CUSTOMER_MANAGEMENT';

                    ]]>
        </query>
    </entity>
    
    <entity id="Close button delete">
      <query>
    		<![CDATA[
   DECLARE @SESSION_ID VARCHAR(100) ='?'
DELETE FROM GCM_GLOBAL_DETAILS
WHERE  session_id = @SESSION_ID
AND MODULE_NAME='CUSTOMER_MANAGEMENT'
		]]>
      </query>
    </entity>
    <entity id="buttonSecurity">
      <query>
    		<![CDATA[
                        select DISTINCT
				MP.PROPERTY_NAME,
				BMM.ACCESS_MODULE
	
			from
				USERGROUP_BUSINESSROLE UBM
			JOIN BUSINESSROLE_MODULE BMM ON
				UBM.BUSINESSROLE_MASTER_SID = BMM.BUSINESSROLE_MASTER_SID
			JOIN MODULE_PROPERTIES MP ON
				BMM.SUBMODULE_PROPERTY_ID = MP.MODULE_PROPERTY_SID
			JOIN MODULE_SUBMODULE_MASTER SMM ON
				SMM.MODULE_SUBMODULE_SID = MP.MODULE_SUBMODULE_SID
			AND MP.CATEGORY_NAME = '?'
			AND SMM.MODULE_NAME = '?'
			AND SMM.SUBMODULE_NAME = '?'
			AND MP.TAB_NAME = '?'
                        ?
		]]>
      </query>
    </entity>
    
     <entity id="getCompanyTypeForContact">
      <query>
       <![CDATA[
        SELECT 
          HT.HELPER_TABLE_SID,HT.DESCRIPTION
          FROM COMPANY_MASTER CM
          JOIN HELPER_TABLE HT
          ON CM.COMPANY_TYPE = HT.HELPER_TABLE_SID
          AND HT.LIST_NAME='COMPANY_TYPE'
          GROUP  BY HT.HELPER_TABLE_SID,
          HT.DESCRIPTION
          ORDER BY HT.HELPER_TABLE_SID;    

		]]>
     </query>
    </entity>
    
    
    <entity id="formulaIdCount">
      <query>
       <![CDATA[
SELECT COUNT(DISTINCT NET_SALES_FORMULA_MASTER_SID)
     FROM   NET_SALES_FORMULA_MASTER
     WHERE  NET_SALES_FORMULA_ID LIKE '?'
            AND NET_SALES_FORMULA_NO LIKE '?'
            AND NET_SALES_FORMULA_NAME LIKE '?'    
            AND NET_SALES_FORMULA_TYPE LIKE '?'  
            ?  
		]]>
     </query>
    </entity>
    
    
        <entity id="formulaIdRecord">
      <query>
       <![CDATA[
SELECT 
       NET_SALES_FORMULA_ID, 
             NET_SALES_FORMULA_NO, 
             NET_SALES_FORMULA_NAME, 
             NET_SALES_FORMULA_MASTER_SID,  
             NET_SALES_FORMULA_TYPE 
             
              FROM   NET_SALES_FORMULA_MASTER
     WHERE  NET_SALES_FORMULA_ID LIKE '?'
            AND NET_SALES_FORMULA_NO LIKE '?'
            AND NET_SALES_FORMULA_NAME LIKE '?'    
            AND NET_SALES_FORMULA_TYPE LIKE '?' 
            ? ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY ;
		]]>
     </query>
    </entity>
    
    
    
    <entity id="Submit condition check">
        <query>
		<![CDATA[
            SELECT Count(*)
            FROM   (SELECT 1 AS CO
                    FROM   GCM_GLOBAL_DETAILS
                    WHERE  EXISTS(SELECT * FROM GCM_GLOBAL_DETAILS WHERE  
                                            (ITEM_STATUS IS NULL
                                            OR START_DATE IS NULL
                                            OR CONTRACT_PRICE_START_DATE IS NULL
                                            OR PRICE_TYPE IS NULL)
                           AND 
                        session_id = '?' AND OPERATION = '?' AND MODULE_NAME = 'ITEM_MANAGEMENT' AND CHECK_RECORD = 1)) a 
		]]>
        </query>
    </entity>
    
    <entity id="com.contractDashboard.saveRS">
        <query>
        <![CDATA[
       
        
         MERGE RS_CONTRACT_DETAILS AS Target USING 
         (SELECT '?' RS_CONTRACT_SID, 
            ITEM_MASTER_SID, 
            ITEM_REBATE_START_DATE = CASE  
                    WHEN ITEM_REBATE_START_DATE <= @RS_START_DATE THEN @RS_START_DATE
                    ELSE ITEM_REBATE_START_DATE
                    END, 
            ITEM_REBATE_END_DATE = CASE   
                    WHEN ( ITEM_REBATE_END_DATE IS NULL
                    AND @RS_END_DATE IS NULL ) THEN NULL
                    WHEN ( ITEM_REBATE_END_DATE IS NULL
                    AND @RS_END_DATE IS NOT NULL ) THEN @RS_END_DATE
                    WHEN ITEM_REBATE_END_DATE >= @RS_END_DATE THEN @RS_END_DATE
                    ELSE ITEM_REBATE_END_DATE
                    END, 
            FORMULA_ID, 
            REBATE_PLAN_MASTER_SID, 
            REBATE_AMOUNT, 
            BUNDLE_NO,  
        '?' CREATED_BY, '?' CREATED_DATE, '?' MODIFIED_BY, '?' MODIFIED_DATE, 'A' INBOUND_STATUS, FORMULA_METHOD_ID, 'false' RECORD_LOCK_STATUS
        , nullif(DEDUCTION_CALENDAR_MASTER_SID,0) as DEDUCTION_CALENDAR_MASTER_SID, nullif(NET_SALES_FORMULA_MASTER_SID,0) as NET_SALES_FORMULA_MASTER_SID, FORMULA_TYPE, NET_SALES_RULE, EVALUATION_RULE, EVALUATION_RULE_BUNDLE, CALCULATION_RULE, CALCULATION_RULE_BUNDLE, ITEM_RS_ATTACHED_STATUS, '@ATTACHDATE' ATTACH_DATE
        FROM dbo.RS_DETAILS
        WHERE INBOUND_STATUS NOT IN('D') AND RS_MODEL_SID=?
        AND ( ITEM_REBATE_START_DATE >= @RS_START_DATE
              OR ITEM_REBATE_START_DATE <= @RS_START_DATE )
        AND ( ITEM_REBATE_START_DATE <= @RS_END_DATE
              OR @RS_END_DATE IS NULL )
        AND ( ITEM_REBATE_END_DATE >= @RS_START_DATE
              OR ITEM_REBATE_END_DATE IS NULL )) AS Source
        
        ON (Target.RS_CONTRACT_SID = Source.RS_CONTRACT_SID AND Target.ITEM_MASTER_SID=Source.ITEM_MASTER_SID  AND 
        	Target.INBOUND_STATUS = 'D')
       
        WHEN MATCHED THEN
        
        UPDATE SET 
        Target.ITEM_REBATE_START_DATE=Source.ITEM_REBATE_START_DATE,
        Target.ITEM_REBATE_END_DATE = Source.ITEM_REBATE_END_DATE,
        Target.FORMULA_ID = Source.FORMULA_ID, 
       	Target.REBATE_PLAN_MASTER_SID = Source.REBATE_PLAN_MASTER_SID, 
        Target.REBATE_AMOUNT = Source.REBATE_AMOUNT, 
        Target.BUNDLE_NO = Source.BUNDLE_NO,
        
        Target.CREATED_BY = Source.CREATED_BY,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.INBOUND_STATUS = 'A',
        Target.FORMULA_METHOD_ID=Source.FORMULA_METHOD_ID,
        Target.RECORD_LOCK_STATUS = 0, 
        Target.DEDUCTION_CALENDAR_MASTER_SID = Source.DEDUCTION_CALENDAR_MASTER_SID,
        Target.NET_SALES_FORMULA_MASTER_SID = Source.NET_SALES_FORMULA_MASTER_SID,
        Target.FORMULA_TYPE = Source.FORMULA_TYPE,
        Target.NET_SALES_RULE = Source.NET_SALES_RULE,
        Target.EVALUATION_RULE = Source.EVALUATION_RULE,
        Target.EVALUATION_RULE_BUNDLE = Source.EVALUATION_RULE_BUNDLE,
        Target.CALCULATION_RULE = Source.CALCULATION_RULE,
        Target.CALCULATION_RULE_BUNDLE = Source.CALCULATION_RULE_BUNDLE,
        Target.RS_CONTRACT_ATTACHED_STATUS = Source.ITEM_RS_ATTACHED_STATUS,
        Target.RS_CONTRACT_ATTACHED_DATE = Source.ATTACH_DATE
       
        WHEN NOT matched THEN
        
  		INSERT(RS_CONTRACT_SID, ITEM_MASTER_SID, ITEM_REBATE_START_DATE, ITEM_REBATE_END_DATE, FORMULA_ID, REBATE_PLAN_MASTER_SID, 
        REBATE_AMOUNT, BUNDLE_NO,  
        CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, INBOUND_STATUS, FORMULA_METHOD_ID, RECORD_LOCK_STATUS
        , DEDUCTION_CALENDAR_MASTER_SID, NET_SALES_FORMULA_MASTER_SID, FORMULA_TYPE, NET_SALES_RULE, EVALUATION_RULE, EVALUATION_RULE_BUNDLE, CALCULATION_RULE, CALCULATION_RULE_BUNDLE, RS_CONTRACT_ATTACHED_STATUS, RS_CONTRACT_ATTACHED_DATE)
  		VALUES(Source.RS_CONTRACT_SID, Source.ITEM_MASTER_SID, Source.ITEM_REBATE_START_DATE, Source.ITEM_REBATE_END_DATE,
  		 Source.FORMULA_ID, Source.REBATE_PLAN_MASTER_SID, Source.REBATE_AMOUNT, Source.BUNDLE_NO,  
        Source.CREATED_BY, Source.CREATED_DATE, Source.MODIFIED_BY, Source.MODIFIED_DATE, 'A', Source.FORMULA_METHOD_ID, 0
        , nullif(Source.DEDUCTION_CALENDAR_MASTER_SID,0), nullif(Source.NET_SALES_FORMULA_MASTER_SID,0), Source.FORMULA_TYPE, Source.NET_SALES_RULE, Source.EVALUATION_RULE, Source.EVALUATION_RULE_BUNDLE, Source.CALCULATION_RULE, Source.CALCULATION_RULE_BUNDLE, Source.ITEM_RS_ATTACHED_STATUS, Source.ATTACH_DATE);
        
        ]]>
       </query>
    </entity>
    
    <entity id="com.contractDashboard.savePS">
        <query>
        <![CDATA[
        
         MERGE PS_CONTRACT_DETAILS AS Target USING 
         (SELECT '?' PS_CONTRACT_SID, 
            ITEM_MASTER_SID, 
            CONTRACT_PRICE_START_DATE= CASE  
                              WHEN CONTRACT_PRICE_START_DATE <= @PS_START_DATE THEN @PS_START_DATE
                              ELSE CONTRACT_PRICE_START_DATE
                            END, 
            CONTRACT_PRICE_END_DATE= CASE   
                            WHEN ( CONTRACT_PRICE_END_DATE IS NULL
                                   AND @PS_END_DATE IS NULL ) THEN NULL
                            WHEN ( CONTRACT_PRICE_END_DATE IS NULL
                                   AND @PS_END_DATE IS NOT NULL ) THEN @PS_END_DATE
                            WHEN CONTRACT_PRICE_END_DATE >= @PS_END_DATE THEN @PS_END_DATE
                            ELSE CONTRACT_PRICE_END_DATE
                          END, 
            CONTRACT_PRICE, 
            PRICE_REVISION, 
            REVISION_DATE, 
            PRICE_PROTECTION_START_DATE ,
            PRICE_PROTECTION_END_DATE, 
            PRICE_TOLERANCE_TYPE, 
            PRICE_TOLERANCE, 
            BASE_PRICE, 
            PRICE_TOLERANCE_FREQUENCY ,
            PRICE_TOLERANCE_INTERVAL, 
            SUGGESTED_PRICE, 
            ITEM_PRICING_QUALIFIER_SID,  
        '?' CREATED_BY, '?' CREATED_DATE, '?' MODIFIED_BY, '?' MODIFIED_DATE, PRICE, 'A' INBOUND_STATUS, 'false' RECORD_LOCK_STATUS ,
            BRAND_MASTER_SID,
NEP,
PRICE_PROTECTION_STATUS,
PRICE_PROTECTION_PRICE_TYPE,
NEP_FORMULA,
MAX_INCREMENTAL_CHANGE,
RESET_ELIGIBLE,
RESET_TYPE,
RESET_DATE,
RESET_INTERVAL,
RESET_FREQUENCY,
NET_PRICE_TYPE,
NET_PRICE_TYPE_FORMULA,
Base_Price_Type,
Base_Price_Entry,
Base_Price_Date,
Net_Base_Price,
Base_Price_ddlb,
Net_Base_Price_Formula_ID,
Subsequent_Period_Price_Type,
Net_Subsequent_Period_price,
Net_Subsequent_Price_Formula_Id,
Reset_Price_Type,
Net_Reset_Price_Type,
Net_Reset_Price_Formula_Id,
STATUS,
'@ATTACHDATE' ATTACH_DATE
        FROM dbo.PS_DETAILS
        WHERE INBOUND_STATUS NOT IN('D') AND PS_MODEL_SID=? 
        AND ( CONTRACT_PRICE_START_DATE >= @PS_START_DATE
              OR CONTRACT_PRICE_START_DATE <= @PS_START_DATE )
       AND ( CONTRACT_PRICE_START_DATE <= @PS_END_DATE
              OR @PS_END_DATE IS NULL )
       AND ( CONTRACT_PRICE_END_DATE >= @PS_START_DATE
              OR CONTRACT_PRICE_END_DATE IS NULL )) AS Source
        
        ON (Target.PS_CONTRACT_SID = Source.PS_CONTRACT_SID AND Target.ITEM_MASTER_SID=Source.ITEM_MASTER_SID  AND 
        	Target.INBOUND_STATUS = 'D')
       
        WHEN MATCHED THEN
        
        UPDATE SET 
        Target.CONTRACT_PRICE_START_DATE=Source.CONTRACT_PRICE_START_DATE,
        Target.CONTRACT_PRICE_END_DATE = Source.CONTRACT_PRICE_END_DATE,
        Target.CONTRACT_PRICE = Source.CONTRACT_PRICE, 
       	Target.PRICE_REVISION = Source.PRICE_REVISION, 
        Target.REVISION_DATE = Source.REVISION_DATE, 
        Target.PRICE_PROTECTION_START_DATE = Source.PRICE_PROTECTION_START_DATE,
        Target.PRICE_TOLERANCE_TYPE = Source.PRICE_TOLERANCE_TYPE,
        Target.PRICE_TOLERANCE = Source.PRICE_TOLERANCE,
        Target.BASE_PRICE = Source.BASE_PRICE,
        Target.PRICE = Source.PRICE,
        Target.PRICE_TOLERANCE_FREQUENCY = Source.PRICE_TOLERANCE_FREQUENCY,
        Target.PRICE_TOLERANCE_INTERVAL = Source.PRICE_TOLERANCE_INTERVAL,
        Target.SUGGESTED_PRICE = Source.SUGGESTED_PRICE,
        Target.ITEM_PRICING_QUALIFIER_SID = Source.ITEM_PRICING_QUALIFIER_SID,
        Target.CREATED_BY = Source.CREATED_BY,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.INBOUND_STATUS = 'A',
        Target.RECORD_LOCK_STATUS = 0,
        Target.BRAND_MASTER_SID = Source.BRAND_MASTER_SID,
        Target.NEP = Source.NEP,
        Target.PRICE_PROTECTION_STATUS = Source.PRICE_PROTECTION_STATUS,
        Target.PRICE_PROTECTION_PRICE_TYPE = Source.PRICE_PROTECTION_PRICE_TYPE,
        Target.NEP_FORMULA = Source.NEP_FORMULA,
        Target.MAX_INCREMENTAL_CHANGE = Source.MAX_INCREMENTAL_CHANGE,
        Target.RESET_ELIGIBLE = Source.RESET_ELIGIBLE,
        Target.RESET_TYPE = Source.RESET_TYPE,
        Target.RESET_DATE = Source.RESET_DATE,
        Target.RESET_INTERVAL = Source.RESET_INTERVAL,
        Target.RESET_FREQUENCY = Source.RESET_FREQUENCY,
        Target.NET_PRICE_TYPE = Source.NET_PRICE_TYPE,
        Target.NET_PRICE_TYPE_FORMULA = Source.NET_PRICE_TYPE_FORMULA,
        Target.Base_Price_Type = Source.Base_Price_Type,
        Target.Base_Price_Entry = Source.Base_Price_Entry,
        Target.Base_Price_Date = Source.Base_Price_Date,
        Target.Net_Base_Price = Source.Net_Base_Price,
        Target.Base_Price_ddlb = Source.Base_Price_ddlb,
        Target.Net_Base_Price_Formula_ID = Source.Net_Base_Price_Formula_ID,
        Target.Subsequent_Period_Price_Type = Source.Subsequent_Period_Price_Type,
        Target.Net_Subsequent_Period_price = Source.Net_Subsequent_Period_price,
        Target.Net_Subsequent_Price_Formula_Id = Source.Net_Subsequent_Price_Formula_Id,
        Target.Reset_Price_Type = Source.Reset_Price_Type,
        Target.Net_Reset_Price_Type = Source.Net_Reset_Price_Type,
        Target.Net_Reset_Price_Formula_Id = Source.Net_Reset_Price_Formula_Id,
        Target.PS_CONTRACT_ATTACHED_STATUS = Source.STATUS,
        Target.PS_CONTRACT_ATTACHED_DATE = Source.ATTACH_DATE
       
        WHEN NOT matched THEN
        
  		INSERT(PS_CONTRACT_SID, ITEM_MASTER_SID, CONTRACT_PRICE_START_DATE, CONTRACT_PRICE_END_DATE, CONTRACT_PRICE, 
        PRICE_REVISION, REVISION_DATE, PRICE_PROTECTION_START_DATE ,PRICE_PROTECTION_END_DATE, PRICE_TOLERANCE_TYPE, PRICE_TOLERANCE, BASE_PRICE, PRICE_TOLERANCE_FREQUENCY ,
        PRICE_TOLERANCE_INTERVAL, SUGGESTED_PRICE, ITEM_PRICING_QUALIFIER_SID,   
        CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, PRICE, INBOUND_STATUS, RECORD_LOCK_STATUS,
        BRAND_MASTER_SID,NEP,PRICE_PROTECTION_STATUS,PRICE_PROTECTION_PRICE_TYPE,NEP_FORMULA,MAX_INCREMENTAL_CHANGE,RESET_ELIGIBLE,RESET_TYPE,RESET_DATE,RESET_INTERVAL,
        RESET_FREQUENCY,NET_PRICE_TYPE,NET_PRICE_TYPE_FORMULA,Base_Price_Type,Base_Price_Entry,Base_Price_Date,Net_Base_Price,Base_Price_ddlb,Net_Base_Price_Formula_ID,Subsequent_Period_Price_Type,
        Net_Subsequent_Period_price,Net_Subsequent_Price_Formula_Id,Reset_Price_Type,Net_Reset_Price_Type,Net_Reset_Price_Formula_Id, PS_CONTRACT_ATTACHED_STATUS, PS_CONTRACT_ATTACHED_DATE
        )
        
  		VALUES(Source.PS_CONTRACT_SID, Source.ITEM_MASTER_SID, Source.CONTRACT_PRICE_START_DATE, Source.CONTRACT_PRICE_END_DATE, Source.CONTRACT_PRICE, 
        Source.PRICE_REVISION, Source.REVISION_DATE, Source.PRICE_PROTECTION_START_DATE ,Source.PRICE_PROTECTION_END_DATE, Source.PRICE_TOLERANCE_TYPE,
        Source.PRICE_TOLERANCE, Source.BASE_PRICE, Source.PRICE_TOLERANCE_FREQUENCY ,
        Source.PRICE_TOLERANCE_INTERVAL, Source.SUGGESTED_PRICE, Source.ITEM_PRICING_QUALIFIER_SID,   
        Source.CREATED_BY, Source.CREATED_DATE, Source.MODIFIED_BY, Source.MODIFIED_DATE, Source.PRICE,'A', 0,
        Source.BRAND_MASTER_SID,Source.NEP,Source.PRICE_PROTECTION_STATUS,Source.PRICE_PROTECTION_PRICE_TYPE,Source.NEP_FORMULA,Source.MAX_INCREMENTAL_CHANGE,Source.RESET_ELIGIBLE,Source.RESET_TYPE,Source.RESET_DATE,
        Source.RESET_INTERVAL,Source.RESET_FREQUENCY,Source.NET_PRICE_TYPE,Source.NET_PRICE_TYPE_FORMULA,Source.Base_Price_Type,Source.Base_Price_Entry,Source.Base_Price_Date,Source.Net_Base_Price,Source.Base_Price_ddlb,Source.Net_Base_Price_Formula_ID,
        Source.Subsequent_Period_Price_Type,Source.Net_Subsequent_Period_price,Source.Net_Subsequent_Price_Formula_Id,Source.Reset_Price_Type,Source.Net_Reset_Price_Type,Source.Net_Reset_Price_Formula_Id, Source.STATUS, Source.ATTACH_DATE
        );
        
        
        
        ]]>
        </query>
    </entity>
    
    <entity id="com.contractDashboard.saveIFP">
         <query>
       <![CDATA[
       
        
         MERGE IFP_CONTRACT_DETAILS AS Target USING 
         (SELECT '?' IFP_CONTRACT_SID, 
            A.ITEM_MASTER_SID, 
            START_DATE = CASE
                              WHEN A.START_DATE <= @IFP_START_DATE THEN @IFP_START_DATE
                              ELSE A.START_DATE
                            END, 
            END_DATE = CASE
                            WHEN ( A.END_DATE IS NULL
                                   AND @IFP_END_DATE IS NULL ) THEN NULL
                            WHEN ( A.END_DATE IS NULL
                                   AND @IFP_END_DATE IS NOT NULL ) THEN @IFP_END_DATE
                            WHEN A.END_DATE >= @IFP_END_DATE THEN @IFP_END_DATE
                            ELSE A.END_DATE
                          END,  
            IM.ITEM_STATUS,
            '?' CREATED_BY, 
            '?' CREATED_DATE, 
            '?' MODIFIED_BY, 
            '?' MODIFIED_DATE, 
            'A' INBOUND_STATUS, 
            'false' RECORD_LOCK_STATUS,
            '@ATTACHDATE' ATTACH_DATE
        FROM dbo.IFP_DETAILS A
        JOIN   ITEM_MASTER IM ON IM.ITEM_MASTER_SID = A.ITEM_MASTER_SID
        WHERE A.INBOUND_STATUS NOT IN('D') AND A.IFP_MODEL_SID=? 
        AND ( A.START_DATE >= @IFP_START_DATE
              OR A.START_DATE <= @IFP_START_DATE )
       AND ( A.START_DATE <= @IFP_END_DATE
              OR @IFP_END_DATE IS NULL )
       AND ( A.END_DATE >= @IFP_START_DATE
              OR A.END_DATE IS NULL )) AS Source
        
        ON (Target.IFP_CONTRACT_SID = Source.IFP_CONTRACT_SID AND Target.ITEM_MASTER_SID=Source.ITEM_MASTER_SID  AND 
        	Target.INBOUND_STATUS = 'D')
       
        WHEN MATCHED THEN
        
        UPDATE SET 
        Target.ITEM_START_DATE = Source.START_DATE, 
       	Target.ITEM_END_DATE = Source.END_DATE, 
        Target.ITEM_STATUS= Source.ITEM_STATUS,
        Target.CREATED_BY = Source.CREATED_BY,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.INBOUND_STATUS = 'A',
        Target.RECORD_LOCK_STATUS = 0 ,
        IFP_CONTRACT_ATTACHED_DATE = Source.ATTACH_DATE
       
        WHEN NOT matched THEN
        
  		INSERT(IFP_CONTRACT_SID, ITEM_MASTER_SID, ITEM_START_DATE, ITEM_END_DATE,  ITEM_STATUS,
        CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, INBOUND_STATUS, RECORD_LOCK_STATUS, IFP_CONTRACT_ATTACHED_DATE)
  		VALUES(Source.IFP_CONTRACT_SID, Source.ITEM_MASTER_SID, Source.START_DATE,Source.END_DATE, Source.ITEM_STATUS,
        Source.CREATED_BY, Source.CREATED_DATE, Source.MODIFIED_BY, Source.MODIFIED_DATE, 'A', 0, Source.ATTACH_DATE);
       
        ]]>
       </query>
    </entity>
    
    <entity id="findIFP">
        <query>
        <![CDATA[ 
    Select Distinct im.ITEM_MASTER_SID, im.ITEM_ID, im.ITEM_NO, im.ITEM_NAME, im.ITEM_STATUS, hstate.DESCRIPTION as status, im.PACKAGE_SIZE, im.PRIMARY_UOM, hstatus.DESCRIPTION as hform, htype.DESCRIPTION as hpackage, im.ITEM_DESC, hstrength.DESCRIPTION as strength
    , htherapeutic.DESCRIPTION as therapeutic,BM.BRAND_NAME AS BRAND,im."SOURCE" as source,im.BRAND_MASTER_SID
    From IFP_MODEL ifp join IFP_DETAILS ifpd on ifp.IFP_MODEL_SID=ifpd.IFP_MODEL_SID
   and ifpd.INBOUND_STATUS <> 'D' join ITEM_MASTER im  on ifpd.ITEM_MASTER_SID=im.ITEM_MASTER_SID and im.INBOUND_STATUS <> 'D'
   LEFT Join HELPER_TABLE htype on htype.HELPER_TABLE_SID = im.PACKAGE_SIZE 
   Join HELPER_TABLE hstate on hstate.HELPER_TABLE_SID = im.ITEM_STATUS 
   Join HELPER_TABLE hstatus on hstatus.HELPER_TABLE_SID =  im.form 
   Join HELPER_TABLE hstrength on hstrength.HELPER_TABLE_SID = im.strength 
  Join BRAND_MASTER BM ON im.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
 LEFT Join HELPER_TABLE htherapeutic on htherapeutic.HELPER_TABLE_SID = im.THERAPEUTIC_CLASS  
                         
		]]>
    </query>
    </entity>
    
    <entity id="findItems">
         <query>
        <![CDATA[  
         Select Distinct im.ITEM_MASTER_SID, im.ITEM_ID, im.ITEM_NO, im.ITEM_NAME, im.ITEM_STATUS, hstate.DESCRIPTION as status, im.PACKAGE_SIZE, im.PRIMARY_UOM, hstatus.DESCRIPTION as hform, htype.DESCRIPTION as hpackage, im.ITEM_DESC, hstrength.DESCRIPTION as strength,
        htherapeutic.DESCRIPTION as therapeutic,BM.BRAND_NAME AS BRAND ,im."SOURCE" as source,im.BRAND_MASTER_SID   
        From IFP_MODEL ifp
        INNER JOIN IFP_DETAILS ifpd
               ON IFP.IFP_MODEL_SID = IFPD.IFP_MODEL_SID
        INNER JOIN ITEM_MASTER im
               ON IM.ITEM_MASTER_SID = IFPD.ITEM_MASTER_SID
        Left Join HELPER_TABLE htype on htype.HELPER_TABLE_SID =  im.PACKAGE_SIZE
        Left Join HELPER_TABLE hstate on hstate.HELPER_TABLE_SID =  im.ITEM_STATUS
        Left Join HELPER_TABLE hstatus on hstatus.HELPER_TABLE_SID =  im.form
        Left Join HELPER_TABLE hstrength on hstrength.HELPER_TABLE_SID =  im.strength
        Left Join HELPER_TABLE htherapeutic on htherapeutic.HELPER_TABLE_SID =  im.THERAPEUTIC_CLASS
        Left Join BRAND_MASTER BM ON im.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
        Where  im.INBOUND_STATUS <> 'D' 
                         
		]]>
    </query>
    </entity>
    <entity id="findBrand">
        <query>
        <![CDATA[   Select Distinct im.ITEM_MASTER_SID, im.ITEM_ID, im.ITEM_NO, im.ITEM_NAME, im.ITEM_STATUS, hstate.DESCRIPTION as status, im.PACKAGE_SIZE, im.PRIMARY_UOM, hstatus.DESCRIPTION as hform, htype.DESCRIPTION as hpackage, im.ITEM_DESC, hstrength.DESCRIPTION as strength
        , htherapeutic.DESCRIPTION as therapeutic,BM.BRAND_NAME AS BRAND,im."SOURCE" as source,im.BRAND_MASTER_SID
        From ITEM_MASTER im Left Join HELPER_TABLE htype on htype.HELPER_TABLE_SID =  im.PACKAGE_SIZE
                    Left Join HELPER_TABLE hstate on hstate.HELPER_TABLE_SID =  im.ITEM_STATUS
                    Left Join HELPER_TABLE hstatus on hstatus.HELPER_TABLE_SID =  im.form
                    Left Join HELPER_TABLE hstrength on hstrength.HELPER_TABLE_SID =  im.strength
                    Left Join HELPER_TABLE htherapeutic on htherapeutic.HELPER_TABLE_SID =  im.THERAPEUTIC_CLASS
                     Left Join BRAND_MASTER BM ON im.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                    Where im.INBOUND_STATUS <> 'D' 
                         
		]]>     
                
    </query>
    </entity>
    
    
    <entity id="com.contractDashboard.saveCFP">
        <query>
        <![CDATA[
            
        
         MERGE CFP_CONTRACT_DETAILS AS Target USING 
         (SELECT '?' CFP_CONTRACT_SID,
                   COMPANY_MASTER_SID,
                   COMPANY_START_DATE = CASE
                              WHEN COMPANY_START_DATE <= @CFP_START_DATE THEN @CFP_START_DATE
                              ELSE COMPANY_START_DATE
                            END, 
                   COMPANY_END_DATE = CASE
                            WHEN ( COMPANY_END_DATE IS NULL
                                   AND @CFP_END_DATE IS NULL ) THEN NULL
                            WHEN ( COMPANY_END_DATE IS NULL
                                   AND @CFP_END_DATE IS NOT NULL ) THEN @CFP_END_DATE
                            WHEN COMPANY_END_DATE >= @CFP_END_DATE THEN @CFP_END_DATE
                            ELSE COMPANY_END_DATE
                          END, 
                   COMPANY_CFP_ATTACHED_STATUS,
                   TRADE_CLASS, 
                   TRADE_CLASS_START_DATE, 
                   TRADE_CLASS_END_DATE, 
                   '?' CREATED_BY, 
                   '?' CREATED_DATE, 
                   '?' MODIFIED_BY, 
                   '?' MODIFIED_DATE, 
                   'A' INBOUND_STATUS, 
                   'false' RECORD_LOCK_STATUS FROM dbo.CFP_DETAILS
        WHERE INBOUND_STATUS NOT IN('D') AND CFP_MODEL_SID=? AND ( COMPANY_START_DATE >= @CFP_START_DATE OR COMPANY_START_DATE <= @CFP_START_DATE ) 
        AND ( COMPANY_START_DATE <= @CFP_END_DATE OR @CFP_END_DATE IS NULL ) AND ( COMPANY_END_DATE >= @CFP_START_DATE OR COMPANY_END_DATE IS NULL )) AS Source
        
        ON (Target.CFP_CONTRACT_SID = Source.CFP_CONTRACT_SID AND Target.COMPANY_MASTER_SID=Source.COMPANY_MASTER_SID  AND 
        	Target.INBOUND_STATUS = 'D')
        WHEN MATCHED THEN
        
        UPDATE SET 
        Target.COMPANY_START_DATE=Source.COMPANY_START_DATE,
        Target.COMPANY_END_DATE = Source.COMPANY_END_DATE, 
        Target.CFP_CONTRACT_ATTACHED_STATUS=Source.COMPANY_CFP_ATTACHED_STATUS,
        Target.TRADE_CLASS = Source.TRADE_CLASS, 
       	Target.TRADE_CLASS_START_DATE = Source.TRADE_CLASS_START_DATE, 
        Target.TRADE_CLASS_END_DATE = Source.TRADE_CLASS_END_DATE, 
        Target.CREATED_BY = Source.CREATED_BY,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.INBOUND_STATUS = 'A',
        Target.RECORD_LOCK_STATUS = 0 
       
        WHEN NOT matched THEN
        
  		INSERT(CFP_CONTRACT_SID, COMPANY_MASTER_SID, COMPANY_START_DATE, COMPANY_END_DATE,CFP_CONTRACT_ATTACHED_STATUS,
        TRADE_CLASS, TRADE_CLASS_START_DATE, TRADE_CLASS_END_DATE, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, INBOUND_STATUS, RECORD_LOCK_STATUS)
  		VALUES(Source.CFP_CONTRACT_SID, Source.COMPANY_MASTER_SID, Source.COMPANY_START_DATE,Source.COMPANY_END_DATE,Source.COMPANY_CFP_ATTACHED_STATUS,
        Source.TRADE_CLASS, Source.TRADE_CLASS_START_DATE, Source.TRADE_CLASS_END_DATE, Source.CREATED_BY, Source.CREATED_DATE, Source.MODIFIED_BY,
         Source.MODIFIED_DATE, 'A', 0);
        
        
        
        ]]>
    </query>
    </entity>
    
    
    <entity id="com.companymaster.service.persistence.CompanyMasterFinder.findCompanyMaster">
        <query>

<![CDATA[select DISTINCT cm.companyMasterSid, 
cm.companyId, 
cm.companyNo, 
cm.companyName, 
cm.companyType, 
cm.companyStatus, 
crtq.companyQualifierName, 
crti.companyIdentifierValue, 
cm.recordLockStatus, 
cm.lives, 
cm.companyEndDate, 
cm.companyStatus,
cm.companyGroup, 
cm.financialSystem, 
cm.address1, 
cm.address2, 
cm.city, 
cm.state, 
cm.zipCode, 
cm.country, 
cm.regionCode, 
cm.createdBy, 
cm.createdDate, 
cm.modifiedBy, 
cm.modifiedDate, 
cm.batchId, 
cm.lastUpdatedDate, 
cm.companyStartDate, 
cm.inboundStatus, 
cm.companyCategory, 
cm.orgKey from 
CompanyMaster cm ,CompanyIdentifier crti,CompanyQualifier crtq where 
cm.companyMasterSid=crti.companyMasterSid and crti.companyQualifierSid=crtq.companyQualifierSid ]]>

	   </query>
    </entity>
        
        
<entity id="com.companymaster.service.persistence.CompanyMasterFinder.findCompanyMasterWithoutIdentifier">  
    <query>      
<![CDATA[            
select DISTINCT cm.COMPANY_MASTER_SID, 
cm.COMPANY_ID, 
cm.COMPANY_NO, 
cm.COMPANY_NAME, 
HT_CT.DESCRIPTION AS COMPANY_TYPE, 
cm.COMPANY_STATUS, 
'' ,
'' ,
cm.RECORD_LOCK_STATUS, 
cm.LIVES, 
cm.COMPANY_END_DATE, 
cm.COMPANY_STATUS,
HT_CG.DESCRIPTION as COMPANY_GROUP, 
cm.FINANCIAL_SYSTEM, 
cm.ADDRESS1, 
cm.ADDRESS2, 
cm.CITY, 
cm.STATE, 
cm.ZIP_CODE, 
cm.COUNTRY, 
cm.REGION_CODE, 
cm.CREATED_BY, 
cm.CREATED_DATE, 
cm.MODIFIED_BY, 
cm.MODIFIED_DATE, 
cm.BATCH_ID, 
cm.LAST_UPDATED_DATE, 
cm.COMPANY_START_DATE, 
cm.INBOUND_STATUS, 
HT_CC.DESCRIPTION as COMPANY_CATEGORY, 
HT_ORG.DESCRIPTION as ORGANIZATION_KEY
,udc.UDC1
,udc.UDC2
,udc.UDC3
,udc.UDC4 
,udc.UDC5 
,udc.UDC6,
HT_CTS.DESCRIPTION as COMPANY_TRADE_CLASS,
trade.TRADE_CLASS_START_DATE,
trade.TRADE_CLASS_END_DATE,
parent.PARENT_COMPANY_MASTER_SID,
parent.PARENT_START_DATE,
parent.PARENT_END_DATE,
comp.COMPANY_NO as comp
,comp1.COMPANY_NO as priorCompanyNo,
parent.PRIOR_PARENT_START_DATE

from COMPANY_MASTER cm
LEFT join COMPANY_TRADE_CLASS trade
on cm.COMPANY_MASTER_SID=trade.COMPANY_MASTER_SID AND trade.INBOUND_STATUS <> 'D'
LEFT JOIN HELPER_TABLE HT_CTS
ON HT_CTS.HELPER_TABLE_SID  = trade.COMPANY_TRADE_CLASS AND HT_CTS.DESCRIPTION <> '-Select One-'
LEFT JOIN HELPER_TABLE HT_CT
ON HT_CT.HELPER_TABLE_SID = CM.COMPANY_TYPE AND HT_CT.DESCRIPTION <> '-Select One-'
LEFT JOIN HELPER_TABLE HT_ORG
ON HT_ORG.HELPER_TABLE_SID = CM.ORGANIZATION_KEY AND HT_ORG.DESCRIPTION <> '-Select One-'
LEFT JOIN HELPER_TABLE HT_CG
ON HT_CG.HELPER_TABLE_SID = CM.COMPANY_GROUP AND HT_CG.DESCRIPTION <> '-Select One-'
LEFT JOIN HELPER_TABLE HT_CC
ON HT_CC.HELPER_TABLE_SID = CM.COMPANY_CATEGORY AND HT_CC.DESCRIPTION <> '-Select One-'
left join COMPANY_PARENT_DETAILS parent
on cm.COMPANY_MASTER_SID=parent.COMPANY_MASTER_SID and parent.INBOUND_STATUS <> 'D'
left join  UDCS udc
on cm.COMPANY_MASTER_SID = udc.MASTER_SID
and udc.MASTER_TYPE = 'COMPANY_MASTER'     
left join COMPANY_MASTER  comp on comp.COMPANY_MASTER_SID=parent.parent_company_master_sid 
left join COMPANY_MASTER  comp1 on comp1.COMPANY_MASTER_SID=parent.PRIOR_PARENT_CMPY_MASTER_SID

]]>
        </query>
    </entity>
        
        
        <entity id="com.companymaster.service.persistence.CompanyMasterFinder.findCompanyMasterWithIdentifier">  
            <query>      
<![CDATA[             
select DISTINCT cm.COMPANY_MASTER_SID, 
cm.COMPANY_ID, 
cm.COMPANY_NO, 
cm.COMPANY_NAME, 
cm.COMPANY_TYPE, 
cm.COMPANY_STATUS, 
crtq.COMPANY_QUALIFIER_NAME, 
crti.COMPANY_IDENTIFIER_VALUE, 
cm.RECORD_LOCK_STATUS, 
cm.LIVES, 
cm.COMPANY_END_DATE, 
cm.COMPANY_STATUS,
cm.COMPANY_GROUP, 
cm.FINANCIAL_SYSTEM, 
cm.ADDRESS1, 
cm.ADDRESS2, 
cm.CITY, 
cm.STATE, 
cm.ZIP_CODE, 
cm.COUNTRY, 
cm.REGION_CODE, 
cm.CREATED_BY, 
cm.CREATED_DATE, 
cm.MODIFIED_BY, 
cm.MODIFIED_DATE, 
cm.BATCH_ID, 
cm.LAST_UPDATED_DATE, 
cm.COMPANY_START_DATE, 
cm.INBOUND_STATUS, 
cm.COMPANY_CATEGORY, 
cm.ORGANIZATION_KEY
,udc.UDC1
,udc.UDC2
,udc.UDC3
,udc.UDC4 
,udc.UDC5 
,udc.UDC6,
trade.COMPANY_TRADE_CLASS,
trade.TRADE_CLASS_START_DATE,
trade.TRADE_CLASS_END_DATE,
parent.PARENT_COMPANY_MASTER_SID,
parent.PARENT_START_DATE,
parent.PARENT_END_DATE,
comp.COMPANY_NO as comp
,comp1.COMPANY_NO as priorCompanyNo,
parent.PRIOR_PARENT_START_DATE

from 
COMPANY_MASTER cm 
 join COMPANY_IDENTIFIER crti 
on cm.COMPANY_MASTER_SID=crti.COMPANY_MASTER_SID AND crti.INBOUND_STATUS <> 'D'
LEFT join COMPANY_TRADE_CLASS trade 
on cm.COMPANY_MASTER_SID=trade.COMPANY_MASTER_SID AND trade.INBOUND_STATUS <> 'D'
left join COMPANY_PARENT_DETAILS parent
on cm.COMPANY_MASTER_SID=parent.COMPANY_MASTER_SID AND parent.INBOUND_STATUS <> 'D'
 join COMPANY_QUALIFIER crtq
 on crti.COMPANY_QUALIFIER_SID=crtq.COMPANY_QUALIFIER_SID
 left join  UDCS udc
on cm.COMPANY_MASTER_SID = udc.MASTER_SID
and udc.MASTER_TYPE = 'COMPANY_MASTER'
left join COMPANY_MASTER  comp on comp.COMPANY_MASTER_SID=parent.parent_company_master_sid
left join COMPANY_MASTER  comp1 on comp1.COMPANY_MASTER_SID=parent.PRIOR_PARENT_CMPY_MASTER_SID
            
            ]]>
            
           </query>
    </entity>
    
    <entity id="getCustomerDetails">
        <query>
<![CDATA[
    
    
SELECT CM.ORGANIZATION_KEY,CM.COMPANY_ID,CM.COMPANY_NO,CM.COMPANY_NAME,HT_TC.DESCRIPTION   COMPANY_TRADE_CLASS,CTC.TRADE_CLASS_START_DATE,CTC.TRADE_CLASS_END_DATE,
HT_CT.DESCRIPTION   COMPANY_TYPE,HT_CS.DESCRIPTION   COMPANY_STATUS,CM.COMPANY_END_DATE,HT_UDC1.DESCRIPTION UDC1,
HT_UDC2.DESCRIPTION UDC2,HT_UDC3.DESCRIPTION UDC3,HT_UDC4.DESCRIPTION UDC4,HT_UDC5.DESCRIPTION UDC5,HT_UDC6.DESCRIPTION UDC6,
CM.COMPANY_GROUP,CM.FINANCIAL_SYSTEM,CM.ADDRESS1,CM.ADDRESS2,CM.CITY,HT_ST.DESCRIPTION   STATE,
CM.ZIP_CODE,HT_CN.DESCRIPTION   COUNTRY,CM.REGION_CODE,CPD.PARENT_COMPANY_MASTER_SID,CPD.PARENT_START_DATE,
CPD.PARENT_END_DATE,CM.COMPANY_START_DATE,CPD.PRIOR_PARENT_START_DATE,CPD.PRIOR_PARENT_CMPY_MASTER_SID,
CM.COMPANY_MASTER_SID,CTC.COMPANY_TRADE_CLASS_SID,CPD.COMPANY_PARENT_DETAILS_SID,CM.LIVES
FROM   COMPANY_MASTER CM
        LEFT JOIN COMPANY_TRADE_CLASS CTC
              ON CM.COMPANY_MASTER_SID = CTC.COMPANY_MASTER_SID
        LEFT JOIN COMPANY_PARENT_DETAILS CPD
              ON CM.COMPANY_MASTER_SID = CPD.COMPANY_MASTER_SID
        JOIN HELPER_TABLE HT_CT
              ON CM.COMPANY_TYPE = HT_CT.HELPER_TABLE_SID
        JOIN HELPER_TABLE HT_CS
              ON CM.COMPANY_STATUS = HT_CS.HELPER_TABLE_SID
        JOIN HELPER_TABLE HT_TC
              ON CTC.COMPANY_TRADE_CLASS = HT_TC.HELPER_TABLE_SID
        LEFT JOIN HELPER_TABLE HT_ST
              ON CM.STATE = HT_ST.HELPER_TABLE_SID
        LEFT JOIN HELPER_TABLE HT_CN
              ON CM.COUNTRY = HT_CN.HELPER_TABLE_SID
        JOIN UDCS UDC
              ON CM.COMPANY_MASTER_SID = UDC.MASTER_SID
                 AND UDC.MASTER_TYPE = 'COMPANY_MASTER'
        JOIN HELPER_TABLE HT_UDC1
              ON UDC.UDC1 = HT_UDC1.HELPER_TABLE_SID and HT_UDC1.HELPER_TABLE_SID<>0
        JOIN HELPER_TABLE HT_UDC2
              ON UDC.UDC2 = HT_UDC2.HELPER_TABLE_SID and HT_UDC2.HELPER_TABLE_SID<>0
        JOIN HELPER_TABLE HT_UDC3
              ON UDC.UDC3 = HT_UDC3.HELPER_TABLE_SID and HT_UDC3.HELPER_TABLE_SID<>0
        JOIN HELPER_TABLE HT_UDC4
              ON UDC.UDC4 = HT_UDC4.HELPER_TABLE_SID and HT_UDC4.HELPER_TABLE_SID<>0
        JOIN HELPER_TABLE HT_UDC5
              ON UDC.UDC5 = HT_UDC5.HELPER_TABLE_SID and HT_UDC5.HELPER_TABLE_SID<>0
        JOIN HELPER_TABLE HT_UDC6
              ON UDC.UDC6 = HT_UDC6.HELPER_TABLE_SID and HT_UDC6.HELPER_TABLE_SID<>0 
        WHERE CM.inbound_Status not like 'D'

 
]]>
      </query>
    </entity>
    
    <entity id="getPriorCustomerNo">
        <query>
<![CDATA[
   SELECT COMPANY_MASTER.COMPANY_NO FROM COMPANY_MASTER 
    
 
]]>
    </query>
    </entity>
    
    	<entity id="contractPriceDetails">
            <query>
		<![CDATA[
			
SELECT
PS.PS_CONTRACT_SID,
PS.ITEM_MASTER_SID,
PS.CONTRACT_PRICE,
PS.CONTRACT_PRICE_START_DATE ,
PS.CONTRACT_PRICE_END_DATE ,
IFP.ITEM_START_DATE ,
IFP.ITEM_END_DATE ,
IM.ITEM_STATUS,
IM.ITEM_NO  ,
IM.ITEM_NAME,
IM.PACKAGE_SIZE ,
PS.PRICE_PROTECTION_START_DATE ,
PS.PRICE_PROTECTION_END_DATE ,
PS.PRICE_TOLERANCE_TYPE,
PS.PRICE_TOLERANCE,
PS.BASE_PRICE,
PS.PRICE_TOLERANCE_FREQUENCY,
PS.PRICE_TOLERANCE_INTERVAL,
PS.ITEM_PRICING_QUALIFIER_SID,
PS.PRICE,
IM.PRIMARY_UOM,
IM.SECONDARY_UOM,
PS.PS_CONTRACT_DETAILS_SID,
IFP.IFP_CONTRACT_DETAILS_SID,
IM.ITEM_ID

FROM PS_CONTRACT_DETAILS PS,
PS_CONTRACT PSC, 
IFP_CONTRACT IFPC,
IFP_CONTRACT_DETAILS IFP, 
ITEM_MASTER IM  
WHERE 
PSc.IFP_CONTRACT_SID = IFPc.IFP_CONTRACT_SID 
 AND (PSC.CFP_CONTRACT_SID = IFPC.CFP_CONTRACT_SID or 
IFPC.CFP_CONTRACT_SID is null or PSC.CFP_CONTRACT_SID  is null) 
AND PSC.CONTRACT_MASTER_SID = IFPC.CONTRACT_MASTER_SID AND PS.ITEM_MASTER_SID = IFP.ITEM_MASTER_SID 
AND PS.ITEM_MASTER_SID=IM.ITEM_MASTER_SID AND IFP.ITEM_MASTER_SID= IM.ITEM_MASTER_SID    
AND PSC.PS_CONTRACT_SID=PS.PS_CONTRACT_SID AND IFPC.IFP_CONTRACT_SID= IFP.IFP_CONTRACT_SID   
		]]>
	 </query>
    </entity>
    
    <entity id="saveCcp">
<query> <![CDATA[
		
                 INSERT INTO PROJECTION_DETAILS(PROJECTION_MASTER_SID,CCP_DETAILS_SID) 
                  SELECT distinct ? PROJECTION_MASTER_SID, CCP1.CCP_DETAILS_SID FROM 
                    (SELECT CCP.CCP_DETAILS_SID 
                    FROM RELATIONSHIP_LEVEL_DEFINITION RLD, 
                    CCP_MAP CCP 
                    WHERE RLD.HIERARCHY_NO like '?%' 
                    AND CCP.RELATIONSHIP_LEVEL_SID=RLD.RELATIONSHIP_LEVEL_SID) CCP1, 
                    (SELECT CCP.CCP_DETAILS_SID 
                    FROM RELATIONSHIP_LEVEL_DEFINITION RLD, 
                    CCP_MAP CCP, 
                    PROJECTION_PROD_HIERARCHY PPH 
                    WHERE CCP.RELATIONSHIP_LEVEL_SID=RLD.RELATIONSHIP_LEVEL_SID 
                    AND PPH.RELATIONSHIP_LEVEL_SID=RLD.RELATIONSHIP_LEVEL_SID
                    AND PPH.PROJECTION_MASTER_SID=?) CCP2 
                    WHERE CCP1.CCP_DETAILS_SID=CCP2.CCP_DETAILS_SID ;

                
    ]]> </query>
</entity>

<entity id="getHierarchyMapQuery">
<query> <![CDATA[
		
                    SELECT RLD.RELATIONSHIP_LEVEL_SID,
                    RLD.RELATIONSHIP_LEVEL_VALUES,
                    RLD.LEVEL_NO,
                    RLD.LEVEL_NAME,
                    RLD.HIERARCHY_NO,
                    CASE WHEN HLD.TABLE_NAME=JVIEW.REFERENCE_TABLE_NAME THEN HLD.TABLE_NAME ELSE JVIEW.REFERENCE_TABLE_NAME  END AS TABLE_NAME,
                    CASE WHEN JVIEW.MAPPING_COLUMN_NAME is null THEN JVIEW.PRIMARY_KEY_COLUMN_NAME ELSE JVIEW.MAPPING_COLUMN_NAME  END AS FIELD_NAME,
                    HT.DESCRIPTION,
                    RLD.PARENT_NODE, RLD.FLAG
                    FROM RELATIONSHIP_LEVEL_DEFINITION RLD 
                    JOIN HIERARCHY_LEVEL_DEFINITION HLD ON HLD.HIERARCHY_LEVEL_DEFINITION_SID=RLD.HIERARCHY_LEVEL_DEFINITION_SID 
                        AND (HLD.TABLE_NAME <>'') 
                    AND RLD.RELATIONSHIP_BUILDER_SID = ? 
                    JOIN HIERARCHY_DEFINITION HD ON HD.HIERARCHY_DEFINITION_SID=HLD.HIERARCHY_DEFINITION_SID
                    JOIN vw_helper_list JVIEW ON JVIEW.ACTUAL_TABLE_NAME=HLD.TABLE_NAME AND JVIEW.ACTUAL_COLUMN_NAME=HLD.FIELD_NAME
                    JOIN HELPER_TABLE HT ON HT.HELPER_TABLE_SID=HD.HIERARCHY_CATEGORY 
                    ORDER BY RLD.HIERARCHY_NO;
                
    ]]> </query>
</entity>
 <entity id="Submit Check one Item condition">
        <query>
		<![CDATA[
                
                SELECT COUNT(*) FROM GCM_GLOBAL_DETAILS WHERE SESSION_ID = '?' AND OPERATION = '?' AND MODULE_NAME = 'ITEM_MANAGEMENT' AND CHECK_RECORD = 1;
                
		]]>
        </query>
    </entity>

    <entity id="NM_PROJECTION_SELECTION_INSERT_QUERY">
        <query>
		<![CDATA[
                INSERT INTO NM_PROJECTION_SELECTION
            (
            PROJECTION_MASTER_SID, 
            SCREEN_NAME, 
            FIELD_NAME, 
            FIELD_VALUES
             )
        OUTPUT      INSERTED.PROJECTION_MASTER_SID
        SELECT 
         '?', 
                    SCREEN_NAME, 
                    FIELD_NAME, 
                    FIELD_VALUES
                    FROM   NM_PROJECTION_SELECTION
        WHERE  PROJECTION_MASTER_SID = '?'  
        AND SCREEN_NAME = 'Discount Projection'
		]]>
        </query>
    </entity>    
</sql>