/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.RsContractDetails;
import com.stpl.app.model.RsContractDetailsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RsContractDetails service. Represents a row in the &quot;RS_CONTRACT_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RsContractDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RsContractDetailsImpl}.
 * </p>
 *
 * @author
 * @see RsContractDetailsImpl
 * @see RsContractDetails
 * @see RsContractDetailsModel
 * @generated
 */
@ProviderType
public class RsContractDetailsModelImpl extends BaseModelImpl<RsContractDetails>
	implements RsContractDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rs contract details model instance should use the {@link RsContractDetails} interface instead.
	 */
	public static final String TABLE_NAME = "RS_CONTRACT_DETAILS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "REBATE_AMOUNT", Types.DOUBLE },
			{ "FORMULA_METHOD_ID", Types.VARCHAR },
			{ "ITEM_MASTER_SID", Types.INTEGER },
			{ "REBATE_PLAN_MASTER_SID", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "RS_CONTRACT_DETAILS_SID", Types.INTEGER },
			{ "BUNDLE_NO", Types.VARCHAR },
			{ "RECORD_LOCK_STATUS", Types.BOOLEAN },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.INTEGER },
			{ "SOURCE", Types.VARCHAR },
			{ "RS_CONTRACT_SID", Types.INTEGER },
			{ "ITEM_REBATE_END_DATE", Types.TIMESTAMP },
			{ "BATCH_ID", Types.VARCHAR },
			{ "ITEM_REBATE_START_DATE", Types.TIMESTAMP },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "FORMULA_ID", Types.INTEGER },
			{ "INBOUND_STATUS", Types.VARCHAR },
			{ "DEDUCTION_CALENDAR_MASTER_SID", Types.VARCHAR },
			{ "NET_SALES_FORMULA_MASTER_SID", Types.VARCHAR },
			{ "FORMULA_TYPE", Types.DOUBLE },
			{ "NET_SALES_RULE", Types.INTEGER },
			{ "EVALUATION_RULE", Types.INTEGER },
			{ "EVALUATION_RULE_BUNDLE", Types.VARCHAR },
			{ "CALCULATION_RULE", Types.INTEGER },
			{ "CALCULATION_RULE_BUNDLE", Types.VARCHAR },
			{ "RS_CONTRACT_ATTACHED_DATE", Types.TIMESTAMP },
			{ "RS_CONTRACT_ATTACHED_STATUS", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("REBATE_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("FORMULA_METHOD_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("REBATE_PLAN_MASTER_SID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("RS_CONTRACT_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BUNDLE_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RECORD_LOCK_STATUS", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RS_CONTRACT_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ITEM_REBATE_END_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_REBATE_START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("FORMULA_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_CALENDAR_MASTER_SID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NET_SALES_FORMULA_MASTER_SID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORMULA_TYPE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("NET_SALES_RULE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("EVALUATION_RULE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("EVALUATION_RULE_BUNDLE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CALCULATION_RULE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CALCULATION_RULE_BUNDLE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RS_CONTRACT_ATTACHED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("RS_CONTRACT_ATTACHED_STATUS", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table RS_CONTRACT_DETAILS (REBATE_AMOUNT DOUBLE,FORMULA_METHOD_ID VARCHAR(75) null,ITEM_MASTER_SID INTEGER,REBATE_PLAN_MASTER_SID VARCHAR(75) null,MODIFIED_DATE DATE null,RS_CONTRACT_DETAILS_SID INTEGER not null primary key IDENTITY,BUNDLE_NO VARCHAR(75) null,RECORD_LOCK_STATUS BOOLEAN,CREATED_DATE DATE null,CREATED_BY INTEGER,SOURCE VARCHAR(75) null,RS_CONTRACT_SID INTEGER,ITEM_REBATE_END_DATE DATE null,BATCH_ID VARCHAR(75) null,ITEM_REBATE_START_DATE DATE null,MODIFIED_BY INTEGER,FORMULA_ID INTEGER,INBOUND_STATUS VARCHAR(75) null,DEDUCTION_CALENDAR_MASTER_SID VARCHAR(75) null,NET_SALES_FORMULA_MASTER_SID VARCHAR(75) null,FORMULA_TYPE DOUBLE,NET_SALES_RULE INTEGER,EVALUATION_RULE INTEGER,EVALUATION_RULE_BUNDLE VARCHAR(75) null,CALCULATION_RULE INTEGER,CALCULATION_RULE_BUNDLE VARCHAR(75) null,RS_CONTRACT_ATTACHED_DATE DATE null,RS_CONTRACT_ATTACHED_STATUS INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table RS_CONTRACT_DETAILS";
	public static final String ORDER_BY_JPQL = " ORDER BY rsContractDetails.rsContractDetailsSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY RS_CONTRACT_DETAILS.RS_CONTRACT_DETAILS_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.RsContractDetails"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.RsContractDetails"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.stpl.app.model.RsContractDetails"),
			true);
	public static final long ITEMMASTERSID_COLUMN_BITMASK = 1L;
	public static final long RSCONTRACTSID_COLUMN_BITMASK = 2L;
	public static final long RSCONTRACTDETAILSSID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.RsContractDetails"));

	public RsContractDetailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _rsContractDetailsSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setRsContractDetailsSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _rsContractDetailsSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RsContractDetails.class;
	}

	@Override
	public String getModelClassName() {
		return RsContractDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("rebateAmount", getRebateAmount());
		attributes.put("formulaMethodId", getFormulaMethodId());
		attributes.put("itemMasterSid", getItemMasterSid());
		attributes.put("rebatePlanMasterSid", getRebatePlanMasterSid());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("rsContractDetailsSid", getRsContractDetailsSid());
		attributes.put("bundleNo", getBundleNo());
		attributes.put("recordLockStatus", getRecordLockStatus());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("source", getSource());
		attributes.put("rsContractSid", getRsContractSid());
		attributes.put("itemRebateEndDate", getItemRebateEndDate());
		attributes.put("batchId", getBatchId());
		attributes.put("itemRebateStartDate", getItemRebateStartDate());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("formulaId", getFormulaId());
		attributes.put("inboundStatus", getInboundStatus());
		attributes.put("deductionCalendarMasterSid",
			getDeductionCalendarMasterSid());
		attributes.put("netSalesFormulaMasterSid", getNetSalesFormulaMasterSid());
		attributes.put("formulaType", getFormulaType());
		attributes.put("netSalesRule", getNetSalesRule());
		attributes.put("evaluationRule", getEvaluationRule());
		attributes.put("evaluationRuleBundle", getEvaluationRuleBundle());
		attributes.put("calculationRule", getCalculationRule());
		attributes.put("calculationRuleBundle", getCalculationRuleBundle());
		attributes.put("rsContractAttachedDate", getRsContractAttachedDate());
		attributes.put("rsContractAttachedStatus", getRsContractAttachedStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Double rebateAmount = (Double)attributes.get("rebateAmount");

		if (rebateAmount != null) {
			setRebateAmount(rebateAmount);
		}

		String formulaMethodId = (String)attributes.get("formulaMethodId");

		if (formulaMethodId != null) {
			setFormulaMethodId(formulaMethodId);
		}

		Integer itemMasterSid = (Integer)attributes.get("itemMasterSid");

		if (itemMasterSid != null) {
			setItemMasterSid(itemMasterSid);
		}

		String rebatePlanMasterSid = (String)attributes.get(
				"rebatePlanMasterSid");

		if (rebatePlanMasterSid != null) {
			setRebatePlanMasterSid(rebatePlanMasterSid);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer rsContractDetailsSid = (Integer)attributes.get(
				"rsContractDetailsSid");

		if (rsContractDetailsSid != null) {
			setRsContractDetailsSid(rsContractDetailsSid);
		}

		String bundleNo = (String)attributes.get("bundleNo");

		if (bundleNo != null) {
			setBundleNo(bundleNo);
		}

		Boolean recordLockStatus = (Boolean)attributes.get("recordLockStatus");

		if (recordLockStatus != null) {
			setRecordLockStatus(recordLockStatus);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		Integer rsContractSid = (Integer)attributes.get("rsContractSid");

		if (rsContractSid != null) {
			setRsContractSid(rsContractSid);
		}

		Date itemRebateEndDate = (Date)attributes.get("itemRebateEndDate");

		if (itemRebateEndDate != null) {
			setItemRebateEndDate(itemRebateEndDate);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		Date itemRebateStartDate = (Date)attributes.get("itemRebateStartDate");

		if (itemRebateStartDate != null) {
			setItemRebateStartDate(itemRebateStartDate);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Integer formulaId = (Integer)attributes.get("formulaId");

		if (formulaId != null) {
			setFormulaId(formulaId);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}

		String deductionCalendarMasterSid = (String)attributes.get(
				"deductionCalendarMasterSid");

		if (deductionCalendarMasterSid != null) {
			setDeductionCalendarMasterSid(deductionCalendarMasterSid);
		}

		String netSalesFormulaMasterSid = (String)attributes.get(
				"netSalesFormulaMasterSid");

		if (netSalesFormulaMasterSid != null) {
			setNetSalesFormulaMasterSid(netSalesFormulaMasterSid);
		}

		Double formulaType = (Double)attributes.get("formulaType");

		if (formulaType != null) {
			setFormulaType(formulaType);
		}

		Integer netSalesRule = (Integer)attributes.get("netSalesRule");

		if (netSalesRule != null) {
			setNetSalesRule(netSalesRule);
		}

		Integer evaluationRule = (Integer)attributes.get("evaluationRule");

		if (evaluationRule != null) {
			setEvaluationRule(evaluationRule);
		}

		String evaluationRuleBundle = (String)attributes.get(
				"evaluationRuleBundle");

		if (evaluationRuleBundle != null) {
			setEvaluationRuleBundle(evaluationRuleBundle);
		}

		Integer calculationRule = (Integer)attributes.get("calculationRule");

		if (calculationRule != null) {
			setCalculationRule(calculationRule);
		}

		String calculationRuleBundle = (String)attributes.get(
				"calculationRuleBundle");

		if (calculationRuleBundle != null) {
			setCalculationRuleBundle(calculationRuleBundle);
		}

		Date rsContractAttachedDate = (Date)attributes.get(
				"rsContractAttachedDate");

		if (rsContractAttachedDate != null) {
			setRsContractAttachedDate(rsContractAttachedDate);
		}

		Integer rsContractAttachedStatus = (Integer)attributes.get(
				"rsContractAttachedStatus");

		if (rsContractAttachedStatus != null) {
			setRsContractAttachedStatus(rsContractAttachedStatus);
		}
	}

	@Override
	public double getRebateAmount() {
		return _rebateAmount;
	}

	@Override
	public void setRebateAmount(double rebateAmount) {
		_rebateAmount = rebateAmount;
	}

	@Override
	public String getFormulaMethodId() {
		if (_formulaMethodId == null) {
			return StringPool.BLANK;
		}
		else {
			return _formulaMethodId;
		}
	}

	@Override
	public void setFormulaMethodId(String formulaMethodId) {
		_formulaMethodId = formulaMethodId;
	}

	@Override
	public int getItemMasterSid() {
		return _itemMasterSid;
	}

	@Override
	public void setItemMasterSid(int itemMasterSid) {
		_columnBitmask |= ITEMMASTERSID_COLUMN_BITMASK;

		if (!_setOriginalItemMasterSid) {
			_setOriginalItemMasterSid = true;

			_originalItemMasterSid = _itemMasterSid;
		}

		_itemMasterSid = itemMasterSid;
	}

	public int getOriginalItemMasterSid() {
		return _originalItemMasterSid;
	}

	@Override
	public String getRebatePlanMasterSid() {
		return _rebatePlanMasterSid;
	}

	@Override
	public void setRebatePlanMasterSid(String rebatePlanMasterSid) {
		_rebatePlanMasterSid = rebatePlanMasterSid;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public int getRsContractDetailsSid() {
		return _rsContractDetailsSid;
	}

	@Override
	public void setRsContractDetailsSid(int rsContractDetailsSid) {
		_rsContractDetailsSid = rsContractDetailsSid;
	}

	@Override
	public String getBundleNo() {
		if (_bundleNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _bundleNo;
		}
	}

	@Override
	public void setBundleNo(String bundleNo) {
		_bundleNo = bundleNo;
	}

	@Override
	public boolean getRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public boolean isRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public void setRecordLockStatus(boolean recordLockStatus) {
		_recordLockStatus = recordLockStatus;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public int getRsContractSid() {
		return _rsContractSid;
	}

	@Override
	public void setRsContractSid(int rsContractSid) {
		_columnBitmask |= RSCONTRACTSID_COLUMN_BITMASK;

		if (!_setOriginalRsContractSid) {
			_setOriginalRsContractSid = true;

			_originalRsContractSid = _rsContractSid;
		}

		_rsContractSid = rsContractSid;
	}

	public int getOriginalRsContractSid() {
		return _originalRsContractSid;
	}

	@Override
	public Date getItemRebateEndDate() {
		return _itemRebateEndDate;
	}

	@Override
	public void setItemRebateEndDate(Date itemRebateEndDate) {
		_itemRebateEndDate = itemRebateEndDate;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public Date getItemRebateStartDate() {
		return _itemRebateStartDate;
	}

	@Override
	public void setItemRebateStartDate(Date itemRebateStartDate) {
		_itemRebateStartDate = itemRebateStartDate;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public int getFormulaId() {
		return _formulaId;
	}

	@Override
	public void setFormulaId(int formulaId) {
		_formulaId = formulaId;
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	@Override
	public String getDeductionCalendarMasterSid() {
		return _deductionCalendarMasterSid;
	}

	@Override
	public void setDeductionCalendarMasterSid(String deductionCalendarMasterSid) {
		_deductionCalendarMasterSid = deductionCalendarMasterSid;
	}

	@Override
	public String getNetSalesFormulaMasterSid() {
		return _netSalesFormulaMasterSid;
	}

	@Override
	public void setNetSalesFormulaMasterSid(String netSalesFormulaMasterSid) {
		_netSalesFormulaMasterSid = netSalesFormulaMasterSid;
	}

	@Override
	public double getFormulaType() {
		return _formulaType;
	}

	@Override
	public void setFormulaType(double formulaType) {
		_formulaType = formulaType;
	}

	@Override
	public int getNetSalesRule() {
		return _netSalesRule;
	}

	@Override
	public void setNetSalesRule(int netSalesRule) {
		_netSalesRule = netSalesRule;
	}

	@Override
	public int getEvaluationRule() {
		return _evaluationRule;
	}

	@Override
	public void setEvaluationRule(int evaluationRule) {
		_evaluationRule = evaluationRule;
	}

	@Override
	public String getEvaluationRuleBundle() {
		return _evaluationRuleBundle;
	}

	@Override
	public void setEvaluationRuleBundle(String evaluationRuleBundle) {
		_evaluationRuleBundle = evaluationRuleBundle;
	}

	@Override
	public int getCalculationRule() {
		return _calculationRule;
	}

	@Override
	public void setCalculationRule(int calculationRule) {
		_calculationRule = calculationRule;
	}

	@Override
	public String getCalculationRuleBundle() {
		return _calculationRuleBundle;
	}

	@Override
	public void setCalculationRuleBundle(String calculationRuleBundle) {
		_calculationRuleBundle = calculationRuleBundle;
	}

	@Override
	public Date getRsContractAttachedDate() {
		return _rsContractAttachedDate;
	}

	@Override
	public void setRsContractAttachedDate(Date rsContractAttachedDate) {
		_rsContractAttachedDate = rsContractAttachedDate;
	}

	@Override
	public int getRsContractAttachedStatus() {
		return _rsContractAttachedStatus;
	}

	@Override
	public void setRsContractAttachedStatus(int rsContractAttachedStatus) {
		_rsContractAttachedStatus = rsContractAttachedStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public RsContractDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RsContractDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RsContractDetailsImpl rsContractDetailsImpl = new RsContractDetailsImpl();

		rsContractDetailsImpl.setRebateAmount(getRebateAmount());
		rsContractDetailsImpl.setFormulaMethodId(getFormulaMethodId());
		rsContractDetailsImpl.setItemMasterSid(getItemMasterSid());
		rsContractDetailsImpl.setRebatePlanMasterSid(getRebatePlanMasterSid());
		rsContractDetailsImpl.setModifiedDate(getModifiedDate());
		rsContractDetailsImpl.setRsContractDetailsSid(getRsContractDetailsSid());
		rsContractDetailsImpl.setBundleNo(getBundleNo());
		rsContractDetailsImpl.setRecordLockStatus(getRecordLockStatus());
		rsContractDetailsImpl.setCreatedDate(getCreatedDate());
		rsContractDetailsImpl.setCreatedBy(getCreatedBy());
		rsContractDetailsImpl.setSource(getSource());
		rsContractDetailsImpl.setRsContractSid(getRsContractSid());
		rsContractDetailsImpl.setItemRebateEndDate(getItemRebateEndDate());
		rsContractDetailsImpl.setBatchId(getBatchId());
		rsContractDetailsImpl.setItemRebateStartDate(getItemRebateStartDate());
		rsContractDetailsImpl.setModifiedBy(getModifiedBy());
		rsContractDetailsImpl.setFormulaId(getFormulaId());
		rsContractDetailsImpl.setInboundStatus(getInboundStatus());
		rsContractDetailsImpl.setDeductionCalendarMasterSid(getDeductionCalendarMasterSid());
		rsContractDetailsImpl.setNetSalesFormulaMasterSid(getNetSalesFormulaMasterSid());
		rsContractDetailsImpl.setFormulaType(getFormulaType());
		rsContractDetailsImpl.setNetSalesRule(getNetSalesRule());
		rsContractDetailsImpl.setEvaluationRule(getEvaluationRule());
		rsContractDetailsImpl.setEvaluationRuleBundle(getEvaluationRuleBundle());
		rsContractDetailsImpl.setCalculationRule(getCalculationRule());
		rsContractDetailsImpl.setCalculationRuleBundle(getCalculationRuleBundle());
		rsContractDetailsImpl.setRsContractAttachedDate(getRsContractAttachedDate());
		rsContractDetailsImpl.setRsContractAttachedStatus(getRsContractAttachedStatus());

		rsContractDetailsImpl.resetOriginalValues();

		return rsContractDetailsImpl;
	}

	@Override
	public int compareTo(RsContractDetails rsContractDetails) {
		int primaryKey = rsContractDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RsContractDetails)) {
			return false;
		}

		RsContractDetails rsContractDetails = (RsContractDetails)obj;

		int primaryKey = rsContractDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RsContractDetailsModelImpl rsContractDetailsModelImpl = this;

		rsContractDetailsModelImpl._originalItemMasterSid = rsContractDetailsModelImpl._itemMasterSid;

		rsContractDetailsModelImpl._setOriginalItemMasterSid = false;

		rsContractDetailsModelImpl._originalRsContractSid = rsContractDetailsModelImpl._rsContractSid;

		rsContractDetailsModelImpl._setOriginalRsContractSid = false;

		rsContractDetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RsContractDetails> toCacheModel() {
		RsContractDetailsCacheModel rsContractDetailsCacheModel = new RsContractDetailsCacheModel();

		rsContractDetailsCacheModel.rebateAmount = getRebateAmount();

		rsContractDetailsCacheModel.formulaMethodId = getFormulaMethodId();

		String formulaMethodId = rsContractDetailsCacheModel.formulaMethodId;

		if ((formulaMethodId != null) && (formulaMethodId.length() == 0)) {
			rsContractDetailsCacheModel.formulaMethodId = null;
		}

		rsContractDetailsCacheModel.itemMasterSid = getItemMasterSid();

		rsContractDetailsCacheModel.rebatePlanMasterSid = getRebatePlanMasterSid();

		String rebatePlanMasterSid = rsContractDetailsCacheModel.rebatePlanMasterSid;

		if ((rebatePlanMasterSid != null) &&
				(rebatePlanMasterSid.length() == 0)) {
			rsContractDetailsCacheModel.rebatePlanMasterSid = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			rsContractDetailsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			rsContractDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		rsContractDetailsCacheModel.rsContractDetailsSid = getRsContractDetailsSid();

		rsContractDetailsCacheModel.bundleNo = getBundleNo();

		String bundleNo = rsContractDetailsCacheModel.bundleNo;

		if ((bundleNo != null) && (bundleNo.length() == 0)) {
			rsContractDetailsCacheModel.bundleNo = null;
		}

		rsContractDetailsCacheModel.recordLockStatus = getRecordLockStatus();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			rsContractDetailsCacheModel.createdDate = createdDate.getTime();
		}
		else {
			rsContractDetailsCacheModel.createdDate = Long.MIN_VALUE;
		}

		rsContractDetailsCacheModel.createdBy = getCreatedBy();

		rsContractDetailsCacheModel.source = getSource();

		String source = rsContractDetailsCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			rsContractDetailsCacheModel.source = null;
		}

		rsContractDetailsCacheModel.rsContractSid = getRsContractSid();

		Date itemRebateEndDate = getItemRebateEndDate();

		if (itemRebateEndDate != null) {
			rsContractDetailsCacheModel.itemRebateEndDate = itemRebateEndDate.getTime();
		}
		else {
			rsContractDetailsCacheModel.itemRebateEndDate = Long.MIN_VALUE;
		}

		rsContractDetailsCacheModel.batchId = getBatchId();

		String batchId = rsContractDetailsCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			rsContractDetailsCacheModel.batchId = null;
		}

		Date itemRebateStartDate = getItemRebateStartDate();

		if (itemRebateStartDate != null) {
			rsContractDetailsCacheModel.itemRebateStartDate = itemRebateStartDate.getTime();
		}
		else {
			rsContractDetailsCacheModel.itemRebateStartDate = Long.MIN_VALUE;
		}

		rsContractDetailsCacheModel.modifiedBy = getModifiedBy();

		rsContractDetailsCacheModel.formulaId = getFormulaId();

		rsContractDetailsCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = rsContractDetailsCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			rsContractDetailsCacheModel.inboundStatus = null;
		}

		rsContractDetailsCacheModel.deductionCalendarMasterSid = getDeductionCalendarMasterSid();

		String deductionCalendarMasterSid = rsContractDetailsCacheModel.deductionCalendarMasterSid;

		if ((deductionCalendarMasterSid != null) &&
				(deductionCalendarMasterSid.length() == 0)) {
			rsContractDetailsCacheModel.deductionCalendarMasterSid = null;
		}

		rsContractDetailsCacheModel.netSalesFormulaMasterSid = getNetSalesFormulaMasterSid();

		String netSalesFormulaMasterSid = rsContractDetailsCacheModel.netSalesFormulaMasterSid;

		if ((netSalesFormulaMasterSid != null) &&
				(netSalesFormulaMasterSid.length() == 0)) {
			rsContractDetailsCacheModel.netSalesFormulaMasterSid = null;
		}

		rsContractDetailsCacheModel.formulaType = getFormulaType();

		rsContractDetailsCacheModel.netSalesRule = getNetSalesRule();

		rsContractDetailsCacheModel.evaluationRule = getEvaluationRule();

		rsContractDetailsCacheModel.evaluationRuleBundle = getEvaluationRuleBundle();

		String evaluationRuleBundle = rsContractDetailsCacheModel.evaluationRuleBundle;

		if ((evaluationRuleBundle != null) &&
				(evaluationRuleBundle.length() == 0)) {
			rsContractDetailsCacheModel.evaluationRuleBundle = null;
		}

		rsContractDetailsCacheModel.calculationRule = getCalculationRule();

		rsContractDetailsCacheModel.calculationRuleBundle = getCalculationRuleBundle();

		String calculationRuleBundle = rsContractDetailsCacheModel.calculationRuleBundle;

		if ((calculationRuleBundle != null) &&
				(calculationRuleBundle.length() == 0)) {
			rsContractDetailsCacheModel.calculationRuleBundle = null;
		}

		Date rsContractAttachedDate = getRsContractAttachedDate();

		if (rsContractAttachedDate != null) {
			rsContractDetailsCacheModel.rsContractAttachedDate = rsContractAttachedDate.getTime();
		}
		else {
			rsContractDetailsCacheModel.rsContractAttachedDate = Long.MIN_VALUE;
		}

		rsContractDetailsCacheModel.rsContractAttachedStatus = getRsContractAttachedStatus();

		return rsContractDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(57);

		sb.append("{rebateAmount=");
		sb.append(getRebateAmount());
		sb.append(", formulaMethodId=");
		sb.append(getFormulaMethodId());
		sb.append(", itemMasterSid=");
		sb.append(getItemMasterSid());
		sb.append(", rebatePlanMasterSid=");
		sb.append(getRebatePlanMasterSid());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", rsContractDetailsSid=");
		sb.append(getRsContractDetailsSid());
		sb.append(", bundleNo=");
		sb.append(getBundleNo());
		sb.append(", recordLockStatus=");
		sb.append(getRecordLockStatus());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", rsContractSid=");
		sb.append(getRsContractSid());
		sb.append(", itemRebateEndDate=");
		sb.append(getItemRebateEndDate());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", itemRebateStartDate=");
		sb.append(getItemRebateStartDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", formulaId=");
		sb.append(getFormulaId());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append(", deductionCalendarMasterSid=");
		sb.append(getDeductionCalendarMasterSid());
		sb.append(", netSalesFormulaMasterSid=");
		sb.append(getNetSalesFormulaMasterSid());
		sb.append(", formulaType=");
		sb.append(getFormulaType());
		sb.append(", netSalesRule=");
		sb.append(getNetSalesRule());
		sb.append(", evaluationRule=");
		sb.append(getEvaluationRule());
		sb.append(", evaluationRuleBundle=");
		sb.append(getEvaluationRuleBundle());
		sb.append(", calculationRule=");
		sb.append(getCalculationRule());
		sb.append(", calculationRuleBundle=");
		sb.append(getCalculationRuleBundle());
		sb.append(", rsContractAttachedDate=");
		sb.append(getRsContractAttachedDate());
		sb.append(", rsContractAttachedStatus=");
		sb.append(getRsContractAttachedStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(88);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.RsContractDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>rebateAmount</column-name><column-value><![CDATA[");
		sb.append(getRebateAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formulaMethodId</column-name><column-value><![CDATA[");
		sb.append(getFormulaMethodId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
		sb.append(getItemMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rebatePlanMasterSid</column-name><column-value><![CDATA[");
		sb.append(getRebatePlanMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsContractDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getRsContractDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bundleNo</column-name><column-value><![CDATA[");
		sb.append(getBundleNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
		sb.append(getRecordLockStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsContractSid</column-name><column-value><![CDATA[");
		sb.append(getRsContractSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemRebateEndDate</column-name><column-value><![CDATA[");
		sb.append(getItemRebateEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemRebateStartDate</column-name><column-value><![CDATA[");
		sb.append(getItemRebateStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formulaId</column-name><column-value><![CDATA[");
		sb.append(getFormulaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionCalendarMasterSid</column-name><column-value><![CDATA[");
		sb.append(getDeductionCalendarMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSalesFormulaMasterSid</column-name><column-value><![CDATA[");
		sb.append(getNetSalesFormulaMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formulaType</column-name><column-value><![CDATA[");
		sb.append(getFormulaType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSalesRule</column-name><column-value><![CDATA[");
		sb.append(getNetSalesRule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evaluationRule</column-name><column-value><![CDATA[");
		sb.append(getEvaluationRule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evaluationRuleBundle</column-name><column-value><![CDATA[");
		sb.append(getEvaluationRuleBundle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calculationRule</column-name><column-value><![CDATA[");
		sb.append(getCalculationRule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calculationRuleBundle</column-name><column-value><![CDATA[");
		sb.append(getCalculationRuleBundle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsContractAttachedDate</column-name><column-value><![CDATA[");
		sb.append(getRsContractAttachedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsContractAttachedStatus</column-name><column-value><![CDATA[");
		sb.append(getRsContractAttachedStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RsContractDetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RsContractDetails.class
		};
	private double _rebateAmount;
	private String _formulaMethodId;
	private int _itemMasterSid;
	private int _originalItemMasterSid;
	private boolean _setOriginalItemMasterSid;
	private String _rebatePlanMasterSid;
	private Date _modifiedDate;
	private int _rsContractDetailsSid;
	private String _bundleNo;
	private boolean _recordLockStatus;
	private Date _createdDate;
	private int _createdBy;
	private String _source;
	private int _rsContractSid;
	private int _originalRsContractSid;
	private boolean _setOriginalRsContractSid;
	private Date _itemRebateEndDate;
	private String _batchId;
	private Date _itemRebateStartDate;
	private int _modifiedBy;
	private int _formulaId;
	private String _inboundStatus;
	private String _deductionCalendarMasterSid;
	private String _netSalesFormulaMasterSid;
	private double _formulaType;
	private int _netSalesRule;
	private int _evaluationRule;
	private String _evaluationRuleBundle;
	private int _calculationRule;
	private String _calculationRuleBundle;
	private Date _rsContractAttachedDate;
	private int _rsContractAttachedStatus;
	private long _columnBitmask;
	private RsContractDetails _escapedModel;
}