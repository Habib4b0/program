package com.stpl.app.parttwo.model.impl;

import com.stpl.app.parttwo.model.CustomerGtsForecast;
import com.stpl.app.parttwo.model.CustomerGtsForecastModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CustomerGtsForecast service. Represents a row in the &quot;CUSTOMER_GTS_FORECAST&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.parttwo.model.CustomerGtsForecastModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomerGtsForecastImpl}.
 * </p>
 *
 * @author
 * @see CustomerGtsForecastImpl
 * @see com.stpl.app.parttwo.model.CustomerGtsForecast
 * @see com.stpl.app.parttwo.model.CustomerGtsForecastModel
 * @generated
 */
public class CustomerGtsForecastModelImpl extends BaseModelImpl<CustomerGtsForecast>
    implements CustomerGtsForecastModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a customer gts forecast model instance should use the {@link com.stpl.app.parttwo.model.CustomerGtsForecast} interface instead.
     */
    public static final String TABLE_NAME = "CUSTOMER_GTS_FORECAST";
    public static final Object[][] TABLE_COLUMNS = {
            { "PRICE", Types.VARCHAR },
            { "ITEM_MASTER_SID", Types.INTEGER },
            { "FORECAST_YEAR", Types.VARCHAR },
            { "DEDUCTION_AMOUNT", Types.VARCHAR },
            { "DEDUCTION_ID", Types.VARCHAR },
            { "FORECAST_DATE", Types.TIMESTAMP },
            { "ITEM_ID", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "BRAND_MASTER_SID", Types.INTEGER },
            { "SOURCE", Types.VARCHAR },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "CREATED_BY", Types.VARCHAR },
            { "ADD_CHG_DEL_INDICATOR", Types.VARCHAR },
            { "INBOUND_STATUS", Types.VARCHAR },
            { "MODIFIED_BY", Types.VARCHAR },
            { "SALES_AMOUNT", Types.VARCHAR },
            { "DEDUCTION_TYPE", Types.VARCHAR },
            { "COMPANY_MASTER_SID", Types.INTEGER },
            { "UNITS", Types.VARCHAR },
            { "DEDUCTION_RATE", Types.VARCHAR },
            { "CUSTOMER_GTS_FORECAST_SID", Types.INTEGER },
            { "COUNTRY", Types.VARCHAR },
            { "COMPANY_ID", Types.VARCHAR },
            { "FORECAST_VALUE_TYPE", Types.VARCHAR },
            { "DEDUCTION_CATEGORY", Types.VARCHAR },
            { "ADJUSTMENT_CODE", Types.VARCHAR },
            { "DEDUCTION_PROGRAM_TYPE", Types.VARCHAR },
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "SALES_INCLUSION", Types.VARCHAR },
            { "FORECAST_VER", Types.VARCHAR },
            { "BATCH_ID", Types.VARCHAR },
            { "PRICE_TYPE", Types.VARCHAR },
            { "FORECAST_MONTH", Types.VARCHAR },
            { "DEDUCTION_INCLUSION", Types.VARCHAR },
            { "SEGMENT", Types.VARCHAR },
            { "BRAND", Types.VARCHAR },
            { "FORECAST_NAME", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table CUSTOMER_GTS_FORECAST (PRICE VARCHAR(75) null,ITEM_MASTER_SID INTEGER,FORECAST_YEAR VARCHAR(75) null,DEDUCTION_AMOUNT VARCHAR(75) null,DEDUCTION_ID VARCHAR(75) null,FORECAST_DATE DATE null,ITEM_ID VARCHAR(75) null,MODIFIED_DATE DATE null,BRAND_MASTER_SID INTEGER,SOURCE VARCHAR(75) null,CREATED_DATE DATE null,CREATED_BY VARCHAR(75) null,ADD_CHG_DEL_INDICATOR VARCHAR(75) null,INBOUND_STATUS VARCHAR(75) null,MODIFIED_BY VARCHAR(75) null,SALES_AMOUNT VARCHAR(75) null,DEDUCTION_TYPE VARCHAR(75) null,COMPANY_MASTER_SID INTEGER,UNITS VARCHAR(75) null,DEDUCTION_RATE VARCHAR(75) null,CUSTOMER_GTS_FORECAST_SID INTEGER not null primary key IDENTITY,COUNTRY VARCHAR(75) null,COMPANY_ID VARCHAR(75) null,FORECAST_VALUE_TYPE VARCHAR(75) null,DEDUCTION_CATEGORY VARCHAR(75) null,ADJUSTMENT_CODE VARCHAR(75) null,DEDUCTION_PROGRAM_TYPE VARCHAR(75) null,RECORD_LOCK_STATUS BOOLEAN,SALES_INCLUSION VARCHAR(75) null,FORECAST_VER VARCHAR(75) null,BATCH_ID VARCHAR(75) null,PRICE_TYPE VARCHAR(75) null,FORECAST_MONTH VARCHAR(75) null,DEDUCTION_INCLUSION VARCHAR(75) null,SEGMENT VARCHAR(75) null,BRAND VARCHAR(75) null,FORECAST_NAME VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table CUSTOMER_GTS_FORECAST";
    public static final String ORDER_BY_JPQL = " ORDER BY customerGtsForecast.customerGtsForecastSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY CUSTOMER_GTS_FORECAST.CUSTOMER_GTS_FORECAST_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.parttwo.model.CustomerGtsForecast"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.parttwo.model.CustomerGtsForecast"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.parttwo.model.CustomerGtsForecast"));
    private static ClassLoader _classLoader = CustomerGtsForecast.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            CustomerGtsForecast.class
        };
    private String _price;
    private int _itemMasterSid;
    private String _forecastYear;
    private String _deductionAmount;
    private String _deductionId;
    private Date _forecastDate;
    private String _itemId;
    private Date _modifiedDate;
    private int _brandMasterSid;
    private String _source;
    private Date _createdDate;
    private String _createdBy;
    private String _addChgDelIndicator;
    private String _inboundStatus;
    private String _modifiedBy;
    private String _salesAmount;
    private String _deductionType;
    private int _companyMasterSid;
    private String _units;
    private String _deductionRate;
    private int _customerGtsForecastSid;
    private String _country;
    private String _companyId;
    private String _forecastValueType;
    private String _deductionCategory;
    private String _adjustmentCode;
    private String _deductionProgramType;
    private boolean _recordLockStatus;
    private String _salesInclusion;
    private String _forecastVer;
    private String _batchId;
    private String _priceType;
    private String _forecastMonth;
    private String _deductionInclusion;
    private String _segment;
    private String _brand;
    private String _forecastName;
    private CustomerGtsForecast _escapedModel;

    public CustomerGtsForecastModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _customerGtsForecastSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setCustomerGtsForecastSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _customerGtsForecastSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return CustomerGtsForecast.class;
    }

    @Override
    public String getModelClassName() {
        return CustomerGtsForecast.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("price", getPrice());
        attributes.put("itemMasterSid", getItemMasterSid());
        attributes.put("forecastYear", getForecastYear());
        attributes.put("deductionAmount", getDeductionAmount());
        attributes.put("deductionId", getDeductionId());
        attributes.put("forecastDate", getForecastDate());
        attributes.put("itemId", getItemId());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("brandMasterSid", getBrandMasterSid());
        attributes.put("source", getSource());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("addChgDelIndicator", getAddChgDelIndicator());
        attributes.put("inboundStatus", getInboundStatus());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("salesAmount", getSalesAmount());
        attributes.put("deductionType", getDeductionType());
        attributes.put("companyMasterSid", getCompanyMasterSid());
        attributes.put("units", getUnits());
        attributes.put("deductionRate", getDeductionRate());
        attributes.put("customerGtsForecastSid", getCustomerGtsForecastSid());
        attributes.put("country", getCountry());
        attributes.put("companyId", getCompanyId());
        attributes.put("forecastValueType", getForecastValueType());
        attributes.put("deductionCategory", getDeductionCategory());
        attributes.put("adjustmentCode", getAdjustmentCode());
        attributes.put("deductionProgramType", getDeductionProgramType());
        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("salesInclusion", getSalesInclusion());
        attributes.put("forecastVer", getForecastVer());
        attributes.put("batchId", getBatchId());
        attributes.put("priceType", getPriceType());
        attributes.put("forecastMonth", getForecastMonth());
        attributes.put("deductionInclusion", getDeductionInclusion());
        attributes.put("segment", getSegment());
        attributes.put("brand", getBrand());
        attributes.put("forecastName", getForecastName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String price = (String) attributes.get("price");

        if (price != null) {
            setPrice(price);
        }

        Integer itemMasterSid = (Integer) attributes.get("itemMasterSid");

        if (itemMasterSid != null) {
            setItemMasterSid(itemMasterSid);
        }

        String forecastYear = (String) attributes.get("forecastYear");

        if (forecastYear != null) {
            setForecastYear(forecastYear);
        }

        String deductionAmount = (String) attributes.get("deductionAmount");

        if (deductionAmount != null) {
            setDeductionAmount(deductionAmount);
        }

        String deductionId = (String) attributes.get("deductionId");

        if (deductionId != null) {
            setDeductionId(deductionId);
        }

        Date forecastDate = (Date) attributes.get("forecastDate");

        if (forecastDate != null) {
            setForecastDate(forecastDate);
        }

        String itemId = (String) attributes.get("itemId");

        if (itemId != null) {
            setItemId(itemId);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer brandMasterSid = (Integer) attributes.get("brandMasterSid");

        if (brandMasterSid != null) {
            setBrandMasterSid(brandMasterSid);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String createdBy = (String) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        String addChgDelIndicator = (String) attributes.get(
                "addChgDelIndicator");

        if (addChgDelIndicator != null) {
            setAddChgDelIndicator(addChgDelIndicator);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }

        String modifiedBy = (String) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String salesAmount = (String) attributes.get("salesAmount");

        if (salesAmount != null) {
            setSalesAmount(salesAmount);
        }

        String deductionType = (String) attributes.get("deductionType");

        if (deductionType != null) {
            setDeductionType(deductionType);
        }

        Integer companyMasterSid = (Integer) attributes.get("companyMasterSid");

        if (companyMasterSid != null) {
            setCompanyMasterSid(companyMasterSid);
        }

        String units = (String) attributes.get("units");

        if (units != null) {
            setUnits(units);
        }

        String deductionRate = (String) attributes.get("deductionRate");

        if (deductionRate != null) {
            setDeductionRate(deductionRate);
        }

        Integer customerGtsForecastSid = (Integer) attributes.get(
                "customerGtsForecastSid");

        if (customerGtsForecastSid != null) {
            setCustomerGtsForecastSid(customerGtsForecastSid);
        }

        String country = (String) attributes.get("country");

        if (country != null) {
            setCountry(country);
        }

        String companyId = (String) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        String forecastValueType = (String) attributes.get("forecastValueType");

        if (forecastValueType != null) {
            setForecastValueType(forecastValueType);
        }

        String deductionCategory = (String) attributes.get("deductionCategory");

        if (deductionCategory != null) {
            setDeductionCategory(deductionCategory);
        }

        String adjustmentCode = (String) attributes.get("adjustmentCode");

        if (adjustmentCode != null) {
            setAdjustmentCode(adjustmentCode);
        }

        String deductionProgramType = (String) attributes.get(
                "deductionProgramType");

        if (deductionProgramType != null) {
            setDeductionProgramType(deductionProgramType);
        }

        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        String salesInclusion = (String) attributes.get("salesInclusion");

        if (salesInclusion != null) {
            setSalesInclusion(salesInclusion);
        }

        String forecastVer = (String) attributes.get("forecastVer");

        if (forecastVer != null) {
            setForecastVer(forecastVer);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        String priceType = (String) attributes.get("priceType");

        if (priceType != null) {
            setPriceType(priceType);
        }

        String forecastMonth = (String) attributes.get("forecastMonth");

        if (forecastMonth != null) {
            setForecastMonth(forecastMonth);
        }

        String deductionInclusion = (String) attributes.get(
                "deductionInclusion");

        if (deductionInclusion != null) {
            setDeductionInclusion(deductionInclusion);
        }

        String segment = (String) attributes.get("segment");

        if (segment != null) {
            setSegment(segment);
        }

        String brand = (String) attributes.get("brand");

        if (brand != null) {
            setBrand(brand);
        }

        String forecastName = (String) attributes.get("forecastName");

        if (forecastName != null) {
            setForecastName(forecastName);
        }
    }

    @Override
    public String getPrice() {
        if (_price == null) {
            return StringPool.BLANK;
        } else {
            return _price;
        }
    }

    @Override
    public void setPrice(String price) {
        _price = price;
    }

    @Override
    public int getItemMasterSid() {
        return _itemMasterSid;
    }

    @Override
    public void setItemMasterSid(int itemMasterSid) {
        _itemMasterSid = itemMasterSid;
    }

    @Override
    public String getForecastYear() {
        if (_forecastYear == null) {
            return StringPool.BLANK;
        } else {
            return _forecastYear;
        }
    }

    @Override
    public void setForecastYear(String forecastYear) {
        _forecastYear = forecastYear;
    }

    @Override
    public String getDeductionAmount() {
        if (_deductionAmount == null) {
            return StringPool.BLANK;
        } else {
            return _deductionAmount;
        }
    }

    @Override
    public void setDeductionAmount(String deductionAmount) {
        _deductionAmount = deductionAmount;
    }

    @Override
    public String getDeductionId() {
        if (_deductionId == null) {
            return StringPool.BLANK;
        } else {
            return _deductionId;
        }
    }

    @Override
    public void setDeductionId(String deductionId) {
        _deductionId = deductionId;
    }

    @Override
    public Date getForecastDate() {
        return _forecastDate;
    }

    @Override
    public void setForecastDate(Date forecastDate) {
        _forecastDate = forecastDate;
    }

    @Override
    public String getItemId() {
        if (_itemId == null) {
            return StringPool.BLANK;
        } else {
            return _itemId;
        }
    }

    @Override
    public void setItemId(String itemId) {
        _itemId = itemId;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public int getBrandMasterSid() {
        return _brandMasterSid;
    }

    @Override
    public void setBrandMasterSid(int brandMasterSid) {
        _brandMasterSid = brandMasterSid;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getCreatedBy() {
        if (_createdBy == null) {
            return StringPool.BLANK;
        } else {
            return _createdBy;
        }
    }

    @Override
    public void setCreatedBy(String createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public String getAddChgDelIndicator() {
        if (_addChgDelIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _addChgDelIndicator;
        }
    }

    @Override
    public void setAddChgDelIndicator(String addChgDelIndicator) {
        _addChgDelIndicator = addChgDelIndicator;
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    @Override
    public String getModifiedBy() {
        if (_modifiedBy == null) {
            return StringPool.BLANK;
        } else {
            return _modifiedBy;
        }
    }

    @Override
    public void setModifiedBy(String modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getSalesAmount() {
        if (_salesAmount == null) {
            return StringPool.BLANK;
        } else {
            return _salesAmount;
        }
    }

    @Override
    public void setSalesAmount(String salesAmount) {
        _salesAmount = salesAmount;
    }

    @Override
    public String getDeductionType() {
        if (_deductionType == null) {
            return StringPool.BLANK;
        } else {
            return _deductionType;
        }
    }

    @Override
    public void setDeductionType(String deductionType) {
        _deductionType = deductionType;
    }

    @Override
    public int getCompanyMasterSid() {
        return _companyMasterSid;
    }

    @Override
    public void setCompanyMasterSid(int companyMasterSid) {
        _companyMasterSid = companyMasterSid;
    }

    @Override
    public String getUnits() {
        if (_units == null) {
            return StringPool.BLANK;
        } else {
            return _units;
        }
    }

    @Override
    public void setUnits(String units) {
        _units = units;
    }

    @Override
    public String getDeductionRate() {
        if (_deductionRate == null) {
            return StringPool.BLANK;
        } else {
            return _deductionRate;
        }
    }

    @Override
    public void setDeductionRate(String deductionRate) {
        _deductionRate = deductionRate;
    }

    @Override
    public int getCustomerGtsForecastSid() {
        return _customerGtsForecastSid;
    }

    @Override
    public void setCustomerGtsForecastSid(int customerGtsForecastSid) {
        _customerGtsForecastSid = customerGtsForecastSid;
    }

    @Override
    public String getCountry() {
        if (_country == null) {
            return StringPool.BLANK;
        } else {
            return _country;
        }
    }

    @Override
    public void setCountry(String country) {
        _country = country;
    }

    @Override
    public String getCompanyId() {
        if (_companyId == null) {
            return StringPool.BLANK;
        } else {
            return _companyId;
        }
    }

    @Override
    public void setCompanyId(String companyId) {
        _companyId = companyId;
    }

    @Override
    public String getForecastValueType() {
        if (_forecastValueType == null) {
            return StringPool.BLANK;
        } else {
            return _forecastValueType;
        }
    }

    @Override
    public void setForecastValueType(String forecastValueType) {
        _forecastValueType = forecastValueType;
    }

    @Override
    public String getDeductionCategory() {
        if (_deductionCategory == null) {
            return StringPool.BLANK;
        } else {
            return _deductionCategory;
        }
    }

    @Override
    public void setDeductionCategory(String deductionCategory) {
        _deductionCategory = deductionCategory;
    }

    @Override
    public String getAdjustmentCode() {
        if (_adjustmentCode == null) {
            return StringPool.BLANK;
        } else {
            return _adjustmentCode;
        }
    }

    @Override
    public void setAdjustmentCode(String adjustmentCode) {
        _adjustmentCode = adjustmentCode;
    }

    @Override
    public String getDeductionProgramType() {
        if (_deductionProgramType == null) {
            return StringPool.BLANK;
        } else {
            return _deductionProgramType;
        }
    }

    @Override
    public void setDeductionProgramType(String deductionProgramType) {
        _deductionProgramType = deductionProgramType;
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public String getSalesInclusion() {
        if (_salesInclusion == null) {
            return StringPool.BLANK;
        } else {
            return _salesInclusion;
        }
    }

    @Override
    public void setSalesInclusion(String salesInclusion) {
        _salesInclusion = salesInclusion;
    }

    @Override
    public String getForecastVer() {
        if (_forecastVer == null) {
            return StringPool.BLANK;
        } else {
            return _forecastVer;
        }
    }

    @Override
    public void setForecastVer(String forecastVer) {
        _forecastVer = forecastVer;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public String getPriceType() {
        if (_priceType == null) {
            return StringPool.BLANK;
        } else {
            return _priceType;
        }
    }

    @Override
    public void setPriceType(String priceType) {
        _priceType = priceType;
    }

    @Override
    public String getForecastMonth() {
        if (_forecastMonth == null) {
            return StringPool.BLANK;
        } else {
            return _forecastMonth;
        }
    }

    @Override
    public void setForecastMonth(String forecastMonth) {
        _forecastMonth = forecastMonth;
    }

    @Override
    public String getDeductionInclusion() {
        if (_deductionInclusion == null) {
            return StringPool.BLANK;
        } else {
            return _deductionInclusion;
        }
    }

    @Override
    public void setDeductionInclusion(String deductionInclusion) {
        _deductionInclusion = deductionInclusion;
    }

    @Override
    public String getSegment() {
        if (_segment == null) {
            return StringPool.BLANK;
        } else {
            return _segment;
        }
    }

    @Override
    public void setSegment(String segment) {
        _segment = segment;
    }

    @Override
    public String getBrand() {
        if (_brand == null) {
            return StringPool.BLANK;
        } else {
            return _brand;
        }
    }

    @Override
    public void setBrand(String brand) {
        _brand = brand;
    }

    @Override
    public String getForecastName() {
        if (_forecastName == null) {
            return StringPool.BLANK;
        } else {
            return _forecastName;
        }
    }

    @Override
    public void setForecastName(String forecastName) {
        _forecastName = forecastName;
    }

    @Override
    public CustomerGtsForecast toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (CustomerGtsForecast) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CustomerGtsForecastImpl customerGtsForecastImpl = new CustomerGtsForecastImpl();

        customerGtsForecastImpl.setPrice(getPrice());
        customerGtsForecastImpl.setItemMasterSid(getItemMasterSid());
        customerGtsForecastImpl.setForecastYear(getForecastYear());
        customerGtsForecastImpl.setDeductionAmount(getDeductionAmount());
        customerGtsForecastImpl.setDeductionId(getDeductionId());
        customerGtsForecastImpl.setForecastDate(getForecastDate());
        customerGtsForecastImpl.setItemId(getItemId());
        customerGtsForecastImpl.setModifiedDate(getModifiedDate());
        customerGtsForecastImpl.setBrandMasterSid(getBrandMasterSid());
        customerGtsForecastImpl.setSource(getSource());
        customerGtsForecastImpl.setCreatedDate(getCreatedDate());
        customerGtsForecastImpl.setCreatedBy(getCreatedBy());
        customerGtsForecastImpl.setAddChgDelIndicator(getAddChgDelIndicator());
        customerGtsForecastImpl.setInboundStatus(getInboundStatus());
        customerGtsForecastImpl.setModifiedBy(getModifiedBy());
        customerGtsForecastImpl.setSalesAmount(getSalesAmount());
        customerGtsForecastImpl.setDeductionType(getDeductionType());
        customerGtsForecastImpl.setCompanyMasterSid(getCompanyMasterSid());
        customerGtsForecastImpl.setUnits(getUnits());
        customerGtsForecastImpl.setDeductionRate(getDeductionRate());
        customerGtsForecastImpl.setCustomerGtsForecastSid(getCustomerGtsForecastSid());
        customerGtsForecastImpl.setCountry(getCountry());
        customerGtsForecastImpl.setCompanyId(getCompanyId());
        customerGtsForecastImpl.setForecastValueType(getForecastValueType());
        customerGtsForecastImpl.setDeductionCategory(getDeductionCategory());
        customerGtsForecastImpl.setAdjustmentCode(getAdjustmentCode());
        customerGtsForecastImpl.setDeductionProgramType(getDeductionProgramType());
        customerGtsForecastImpl.setRecordLockStatus(getRecordLockStatus());
        customerGtsForecastImpl.setSalesInclusion(getSalesInclusion());
        customerGtsForecastImpl.setForecastVer(getForecastVer());
        customerGtsForecastImpl.setBatchId(getBatchId());
        customerGtsForecastImpl.setPriceType(getPriceType());
        customerGtsForecastImpl.setForecastMonth(getForecastMonth());
        customerGtsForecastImpl.setDeductionInclusion(getDeductionInclusion());
        customerGtsForecastImpl.setSegment(getSegment());
        customerGtsForecastImpl.setBrand(getBrand());
        customerGtsForecastImpl.setForecastName(getForecastName());

        customerGtsForecastImpl.resetOriginalValues();

        return customerGtsForecastImpl;
    }

    @Override
    public int compareTo(CustomerGtsForecast customerGtsForecast) {
        int primaryKey = customerGtsForecast.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof CustomerGtsForecast)) {
            return false;
        }

        CustomerGtsForecast customerGtsForecast = (CustomerGtsForecast) obj;

        int primaryKey = customerGtsForecast.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<CustomerGtsForecast> toCacheModel() {
        CustomerGtsForecastCacheModel customerGtsForecastCacheModel = new CustomerGtsForecastCacheModel();

        customerGtsForecastCacheModel.price = getPrice();

        String price = customerGtsForecastCacheModel.price;

        if ((price != null) && (price.length() == 0)) {
            customerGtsForecastCacheModel.price = null;
        }

        customerGtsForecastCacheModel.itemMasterSid = getItemMasterSid();

        customerGtsForecastCacheModel.forecastYear = getForecastYear();

        String forecastYear = customerGtsForecastCacheModel.forecastYear;

        if ((forecastYear != null) && (forecastYear.length() == 0)) {
            customerGtsForecastCacheModel.forecastYear = null;
        }

        customerGtsForecastCacheModel.deductionAmount = getDeductionAmount();

        String deductionAmount = customerGtsForecastCacheModel.deductionAmount;

        if ((deductionAmount != null) && (deductionAmount.length() == 0)) {
            customerGtsForecastCacheModel.deductionAmount = null;
        }

        customerGtsForecastCacheModel.deductionId = getDeductionId();

        String deductionId = customerGtsForecastCacheModel.deductionId;

        if ((deductionId != null) && (deductionId.length() == 0)) {
            customerGtsForecastCacheModel.deductionId = null;
        }

        Date forecastDate = getForecastDate();

        if (forecastDate != null) {
            customerGtsForecastCacheModel.forecastDate = forecastDate.getTime();
        } else {
            customerGtsForecastCacheModel.forecastDate = Long.MIN_VALUE;
        }

        customerGtsForecastCacheModel.itemId = getItemId();

        String itemId = customerGtsForecastCacheModel.itemId;

        if ((itemId != null) && (itemId.length() == 0)) {
            customerGtsForecastCacheModel.itemId = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            customerGtsForecastCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            customerGtsForecastCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        customerGtsForecastCacheModel.brandMasterSid = getBrandMasterSid();

        customerGtsForecastCacheModel.source = getSource();

        String source = customerGtsForecastCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            customerGtsForecastCacheModel.source = null;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            customerGtsForecastCacheModel.createdDate = createdDate.getTime();
        } else {
            customerGtsForecastCacheModel.createdDate = Long.MIN_VALUE;
        }

        customerGtsForecastCacheModel.createdBy = getCreatedBy();

        String createdBy = customerGtsForecastCacheModel.createdBy;

        if ((createdBy != null) && (createdBy.length() == 0)) {
            customerGtsForecastCacheModel.createdBy = null;
        }

        customerGtsForecastCacheModel.addChgDelIndicator = getAddChgDelIndicator();

        String addChgDelIndicator = customerGtsForecastCacheModel.addChgDelIndicator;

        if ((addChgDelIndicator != null) && (addChgDelIndicator.length() == 0)) {
            customerGtsForecastCacheModel.addChgDelIndicator = null;
        }

        customerGtsForecastCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = customerGtsForecastCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            customerGtsForecastCacheModel.inboundStatus = null;
        }

        customerGtsForecastCacheModel.modifiedBy = getModifiedBy();

        String modifiedBy = customerGtsForecastCacheModel.modifiedBy;

        if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
            customerGtsForecastCacheModel.modifiedBy = null;
        }

        customerGtsForecastCacheModel.salesAmount = getSalesAmount();

        String salesAmount = customerGtsForecastCacheModel.salesAmount;

        if ((salesAmount != null) && (salesAmount.length() == 0)) {
            customerGtsForecastCacheModel.salesAmount = null;
        }

        customerGtsForecastCacheModel.deductionType = getDeductionType();

        String deductionType = customerGtsForecastCacheModel.deductionType;

        if ((deductionType != null) && (deductionType.length() == 0)) {
            customerGtsForecastCacheModel.deductionType = null;
        }

        customerGtsForecastCacheModel.companyMasterSid = getCompanyMasterSid();

        customerGtsForecastCacheModel.units = getUnits();

        String units = customerGtsForecastCacheModel.units;

        if ((units != null) && (units.length() == 0)) {
            customerGtsForecastCacheModel.units = null;
        }

        customerGtsForecastCacheModel.deductionRate = getDeductionRate();

        String deductionRate = customerGtsForecastCacheModel.deductionRate;

        if ((deductionRate != null) && (deductionRate.length() == 0)) {
            customerGtsForecastCacheModel.deductionRate = null;
        }

        customerGtsForecastCacheModel.customerGtsForecastSid = getCustomerGtsForecastSid();

        customerGtsForecastCacheModel.country = getCountry();

        String country = customerGtsForecastCacheModel.country;

        if ((country != null) && (country.length() == 0)) {
            customerGtsForecastCacheModel.country = null;
        }

        customerGtsForecastCacheModel.companyId = getCompanyId();

        String companyId = customerGtsForecastCacheModel.companyId;

        if ((companyId != null) && (companyId.length() == 0)) {
            customerGtsForecastCacheModel.companyId = null;
        }

        customerGtsForecastCacheModel.forecastValueType = getForecastValueType();

        String forecastValueType = customerGtsForecastCacheModel.forecastValueType;

        if ((forecastValueType != null) && (forecastValueType.length() == 0)) {
            customerGtsForecastCacheModel.forecastValueType = null;
        }

        customerGtsForecastCacheModel.deductionCategory = getDeductionCategory();

        String deductionCategory = customerGtsForecastCacheModel.deductionCategory;

        if ((deductionCategory != null) && (deductionCategory.length() == 0)) {
            customerGtsForecastCacheModel.deductionCategory = null;
        }

        customerGtsForecastCacheModel.adjustmentCode = getAdjustmentCode();

        String adjustmentCode = customerGtsForecastCacheModel.adjustmentCode;

        if ((adjustmentCode != null) && (adjustmentCode.length() == 0)) {
            customerGtsForecastCacheModel.adjustmentCode = null;
        }

        customerGtsForecastCacheModel.deductionProgramType = getDeductionProgramType();

        String deductionProgramType = customerGtsForecastCacheModel.deductionProgramType;

        if ((deductionProgramType != null) &&
                (deductionProgramType.length() == 0)) {
            customerGtsForecastCacheModel.deductionProgramType = null;
        }

        customerGtsForecastCacheModel.recordLockStatus = getRecordLockStatus();

        customerGtsForecastCacheModel.salesInclusion = getSalesInclusion();

        String salesInclusion = customerGtsForecastCacheModel.salesInclusion;

        if ((salesInclusion != null) && (salesInclusion.length() == 0)) {
            customerGtsForecastCacheModel.salesInclusion = null;
        }

        customerGtsForecastCacheModel.forecastVer = getForecastVer();

        String forecastVer = customerGtsForecastCacheModel.forecastVer;

        if ((forecastVer != null) && (forecastVer.length() == 0)) {
            customerGtsForecastCacheModel.forecastVer = null;
        }

        customerGtsForecastCacheModel.batchId = getBatchId();

        String batchId = customerGtsForecastCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            customerGtsForecastCacheModel.batchId = null;
        }

        customerGtsForecastCacheModel.priceType = getPriceType();

        String priceType = customerGtsForecastCacheModel.priceType;

        if ((priceType != null) && (priceType.length() == 0)) {
            customerGtsForecastCacheModel.priceType = null;
        }

        customerGtsForecastCacheModel.forecastMonth = getForecastMonth();

        String forecastMonth = customerGtsForecastCacheModel.forecastMonth;

        if ((forecastMonth != null) && (forecastMonth.length() == 0)) {
            customerGtsForecastCacheModel.forecastMonth = null;
        }

        customerGtsForecastCacheModel.deductionInclusion = getDeductionInclusion();

        String deductionInclusion = customerGtsForecastCacheModel.deductionInclusion;

        if ((deductionInclusion != null) && (deductionInclusion.length() == 0)) {
            customerGtsForecastCacheModel.deductionInclusion = null;
        }

        customerGtsForecastCacheModel.segment = getSegment();

        String segment = customerGtsForecastCacheModel.segment;

        if ((segment != null) && (segment.length() == 0)) {
            customerGtsForecastCacheModel.segment = null;
        }

        customerGtsForecastCacheModel.brand = getBrand();

        String brand = customerGtsForecastCacheModel.brand;

        if ((brand != null) && (brand.length() == 0)) {
            customerGtsForecastCacheModel.brand = null;
        }

        customerGtsForecastCacheModel.forecastName = getForecastName();

        String forecastName = customerGtsForecastCacheModel.forecastName;

        if ((forecastName != null) && (forecastName.length() == 0)) {
            customerGtsForecastCacheModel.forecastName = null;
        }

        return customerGtsForecastCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(75);

        sb.append("{price=");
        sb.append(getPrice());
        sb.append(", itemMasterSid=");
        sb.append(getItemMasterSid());
        sb.append(", forecastYear=");
        sb.append(getForecastYear());
        sb.append(", deductionAmount=");
        sb.append(getDeductionAmount());
        sb.append(", deductionId=");
        sb.append(getDeductionId());
        sb.append(", forecastDate=");
        sb.append(getForecastDate());
        sb.append(", itemId=");
        sb.append(getItemId());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", brandMasterSid=");
        sb.append(getBrandMasterSid());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", addChgDelIndicator=");
        sb.append(getAddChgDelIndicator());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", salesAmount=");
        sb.append(getSalesAmount());
        sb.append(", deductionType=");
        sb.append(getDeductionType());
        sb.append(", companyMasterSid=");
        sb.append(getCompanyMasterSid());
        sb.append(", units=");
        sb.append(getUnits());
        sb.append(", deductionRate=");
        sb.append(getDeductionRate());
        sb.append(", customerGtsForecastSid=");
        sb.append(getCustomerGtsForecastSid());
        sb.append(", country=");
        sb.append(getCountry());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", forecastValueType=");
        sb.append(getForecastValueType());
        sb.append(", deductionCategory=");
        sb.append(getDeductionCategory());
        sb.append(", adjustmentCode=");
        sb.append(getAdjustmentCode());
        sb.append(", deductionProgramType=");
        sb.append(getDeductionProgramType());
        sb.append(", recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", salesInclusion=");
        sb.append(getSalesInclusion());
        sb.append(", forecastVer=");
        sb.append(getForecastVer());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", priceType=");
        sb.append(getPriceType());
        sb.append(", forecastMonth=");
        sb.append(getForecastMonth());
        sb.append(", deductionInclusion=");
        sb.append(getDeductionInclusion());
        sb.append(", segment=");
        sb.append(getSegment());
        sb.append(", brand=");
        sb.append(getBrand());
        sb.append(", forecastName=");
        sb.append(getForecastName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(115);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.parttwo.model.CustomerGtsForecast");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>price</column-name><column-value><![CDATA[");
        sb.append(getPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
        sb.append(getItemMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastYear</column-name><column-value><![CDATA[");
        sb.append(getForecastYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>deductionAmount</column-name><column-value><![CDATA[");
        sb.append(getDeductionAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>deductionId</column-name><column-value><![CDATA[");
        sb.append(getDeductionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastDate</column-name><column-value><![CDATA[");
        sb.append(getForecastDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemId</column-name><column-value><![CDATA[");
        sb.append(getItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandMasterSid</column-name><column-value><![CDATA[");
        sb.append(getBrandMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>addChgDelIndicator</column-name><column-value><![CDATA[");
        sb.append(getAddChgDelIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salesAmount</column-name><column-value><![CDATA[");
        sb.append(getSalesAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>deductionType</column-name><column-value><![CDATA[");
        sb.append(getDeductionType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyMasterSid</column-name><column-value><![CDATA[");
        sb.append(getCompanyMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>units</column-name><column-value><![CDATA[");
        sb.append(getUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>deductionRate</column-name><column-value><![CDATA[");
        sb.append(getDeductionRate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>customerGtsForecastSid</column-name><column-value><![CDATA[");
        sb.append(getCustomerGtsForecastSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>country</column-name><column-value><![CDATA[");
        sb.append(getCountry());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastValueType</column-name><column-value><![CDATA[");
        sb.append(getForecastValueType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>deductionCategory</column-name><column-value><![CDATA[");
        sb.append(getDeductionCategory());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustmentCode</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>deductionProgramType</column-name><column-value><![CDATA[");
        sb.append(getDeductionProgramType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salesInclusion</column-name><column-value><![CDATA[");
        sb.append(getSalesInclusion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastVer</column-name><column-value><![CDATA[");
        sb.append(getForecastVer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceType</column-name><column-value><![CDATA[");
        sb.append(getPriceType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastMonth</column-name><column-value><![CDATA[");
        sb.append(getForecastMonth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>deductionInclusion</column-name><column-value><![CDATA[");
        sb.append(getDeductionInclusion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>segment</column-name><column-value><![CDATA[");
        sb.append(getSegment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brand</column-name><column-value><![CDATA[");
        sb.append(getBrand());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastName</column-name><column-value><![CDATA[");
        sb.append(getForecastName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
