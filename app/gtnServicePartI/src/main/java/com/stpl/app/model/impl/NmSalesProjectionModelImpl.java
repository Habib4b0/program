package com.stpl.app.model.impl;

import com.stpl.app.model.NmSalesProjection;
import com.stpl.app.model.NmSalesProjectionModel;
import com.stpl.app.service.persistence.NmSalesProjectionPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NmSalesProjection service. Represents a row in the &quot;NM_SALES_PROJECTION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.NmSalesProjectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NmSalesProjectionImpl}.
 * </p>
 *
 * @author
 * @see NmSalesProjectionImpl
 * @see com.stpl.app.model.NmSalesProjection
 * @see com.stpl.app.model.NmSalesProjectionModel
 * @generated
 */
public class NmSalesProjectionModelImpl extends BaseModelImpl<NmSalesProjection>
    implements NmSalesProjectionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a nm sales projection model instance should use the {@link com.stpl.app.model.NmSalesProjection} interface instead.
     */
    public static final String TABLE_NAME = "NM_SALES_PROJECTION";
    public static final Object[][] TABLE_COLUMNS = {
            { "ADJUSTMENT_METHODOLOGY", Types.VARCHAR },
            { "ADJUSTMENT_BASIS", Types.VARCHAR },
            { "PERIOD_SID", Types.INTEGER },
            { "PRODUCT_GROWTH", Types.DOUBLE },
            { "PROJECTION_DETAILS_SID", Types.INTEGER },
            { "ADJUSTMENT_VALUES", Types.DOUBLE },
            { "ADJUSTMENT_VARIABLE", Types.BOOLEAN },
            { "ACCOUNT_GROWTH", Types.DOUBLE },
            { "PROJECTION_UNITS", Types.DOUBLE },
            { "ADJUSTMENT_TYPE", Types.VARCHAR },
            { "PROJECTION_SALES", Types.DOUBLE }
        };
    public static final String TABLE_SQL_CREATE = "create table NM_SALES_PROJECTION (ADJUSTMENT_METHODOLOGY VARCHAR(75) null,ADJUSTMENT_BASIS VARCHAR(75) null,PERIOD_SID INTEGER not null IDENTITY,PRODUCT_GROWTH DOUBLE,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,ADJUSTMENT_VALUES DOUBLE,ADJUSTMENT_VARIABLE BOOLEAN,ACCOUNT_GROWTH DOUBLE,PROJECTION_UNITS DOUBLE,ADJUSTMENT_TYPE VARCHAR(75) null,PROJECTION_SALES DOUBLE,primary key (PERIOD_SID, PROJECTION_DETAILS_SID))";
    public static final String TABLE_SQL_DROP = "drop table NM_SALES_PROJECTION";
    public static final String ORDER_BY_JPQL = " ORDER BY nmSalesProjection.id.periodSid ASC, nmSalesProjection.id.projectionDetailsSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY NM_SALES_PROJECTION.PERIOD_SID ASC, NM_SALES_PROJECTION.PROJECTION_DETAILS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.NmSalesProjection"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.NmSalesProjection"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.NmSalesProjection"));
    private static ClassLoader _classLoader = NmSalesProjection.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            NmSalesProjection.class
        };
    private String _adjustmentMethodology;
    private String _adjustmentBasis;
    private int _periodSid;
    private double _productGrowth;
    private int _projectionDetailsSid;
    private double _adjustmentValues;
    private boolean _adjustmentVariable;
    private double _accountGrowth;
    private double _projectionUnits;
    private String _adjustmentType;
    private double _projectionSales;
    private NmSalesProjection _escapedModel;

    public NmSalesProjectionModelImpl() {
    }

    @Override
    public NmSalesProjectionPK getPrimaryKey() {
        return new NmSalesProjectionPK(_periodSid, _projectionDetailsSid);
    }

    @Override
    public void setPrimaryKey(NmSalesProjectionPK primaryKey) {
        setPeriodSid(primaryKey.periodSid);
        setProjectionDetailsSid(primaryKey.projectionDetailsSid);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new NmSalesProjectionPK(_periodSid, _projectionDetailsSid);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((NmSalesProjectionPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return NmSalesProjection.class;
    }

    @Override
    public String getModelClassName() {
        return NmSalesProjection.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("adjustmentMethodology", getAdjustmentMethodology());
        attributes.put("adjustmentBasis", getAdjustmentBasis());
        attributes.put("periodSid", getPeriodSid());
        attributes.put("productGrowth", getProductGrowth());
        attributes.put("projectionDetailsSid", getProjectionDetailsSid());
        attributes.put("adjustmentValues", getAdjustmentValues());
        attributes.put("adjustmentVariable", getAdjustmentVariable());
        attributes.put("accountGrowth", getAccountGrowth());
        attributes.put("projectionUnits", getProjectionUnits());
        attributes.put("adjustmentType", getAdjustmentType());
        attributes.put("projectionSales", getProjectionSales());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String adjustmentMethodology = (String) attributes.get(
                "adjustmentMethodology");

        if (adjustmentMethodology != null) {
            setAdjustmentMethodology(adjustmentMethodology);
        }

        String adjustmentBasis = (String) attributes.get("adjustmentBasis");

        if (adjustmentBasis != null) {
            setAdjustmentBasis(adjustmentBasis);
        }

        Integer periodSid = (Integer) attributes.get("periodSid");

        if (periodSid != null) {
            setPeriodSid(periodSid);
        }

        Double productGrowth = (Double) attributes.get("productGrowth");

        if (productGrowth != null) {
            setProductGrowth(productGrowth);
        }

        Integer projectionDetailsSid = (Integer) attributes.get(
                "projectionDetailsSid");

        if (projectionDetailsSid != null) {
            setProjectionDetailsSid(projectionDetailsSid);
        }

        Double adjustmentValues = (Double) attributes.get("adjustmentValues");

        if (adjustmentValues != null) {
            setAdjustmentValues(adjustmentValues);
        }

        Boolean adjustmentVariable = (Boolean) attributes.get(
                "adjustmentVariable");

        if (adjustmentVariable != null) {
            setAdjustmentVariable(adjustmentVariable);
        }

        Double accountGrowth = (Double) attributes.get("accountGrowth");

        if (accountGrowth != null) {
            setAccountGrowth(accountGrowth);
        }

        Double projectionUnits = (Double) attributes.get("projectionUnits");

        if (projectionUnits != null) {
            setProjectionUnits(projectionUnits);
        }

        String adjustmentType = (String) attributes.get("adjustmentType");

        if (adjustmentType != null) {
            setAdjustmentType(adjustmentType);
        }

        Double projectionSales = (Double) attributes.get("projectionSales");

        if (projectionSales != null) {
            setProjectionSales(projectionSales);
        }
    }

    @Override
    public String getAdjustmentMethodology() {
        if (_adjustmentMethodology == null) {
            return StringPool.BLANK;
        } else {
            return _adjustmentMethodology;
        }
    }

    @Override
    public void setAdjustmentMethodology(String adjustmentMethodology) {
        _adjustmentMethodology = adjustmentMethodology;
    }

    @Override
    public String getAdjustmentBasis() {
        if (_adjustmentBasis == null) {
            return StringPool.BLANK;
        } else {
            return _adjustmentBasis;
        }
    }

    @Override
    public void setAdjustmentBasis(String adjustmentBasis) {
        _adjustmentBasis = adjustmentBasis;
    }

    @Override
    public int getPeriodSid() {
        return _periodSid;
    }

    @Override
    public void setPeriodSid(int periodSid) {
        _periodSid = periodSid;
    }

    @Override
    public double getProductGrowth() {
        return _productGrowth;
    }

    @Override
    public void setProductGrowth(double productGrowth) {
        _productGrowth = productGrowth;
    }

    @Override
    public int getProjectionDetailsSid() {
        return _projectionDetailsSid;
    }

    @Override
    public void setProjectionDetailsSid(int projectionDetailsSid) {
        _projectionDetailsSid = projectionDetailsSid;
    }

    @Override
    public double getAdjustmentValues() {
        return _adjustmentValues;
    }

    @Override
    public void setAdjustmentValues(double adjustmentValues) {
        _adjustmentValues = adjustmentValues;
    }

    @Override
    public boolean getAdjustmentVariable() {
        return _adjustmentVariable;
    }

    @Override
    public boolean isAdjustmentVariable() {
        return _adjustmentVariable;
    }

    @Override
    public void setAdjustmentVariable(boolean adjustmentVariable) {
        _adjustmentVariable = adjustmentVariable;
    }

    @Override
    public double getAccountGrowth() {
        return _accountGrowth;
    }

    @Override
    public void setAccountGrowth(double accountGrowth) {
        _accountGrowth = accountGrowth;
    }

    @Override
    public double getProjectionUnits() {
        return _projectionUnits;
    }

    @Override
    public void setProjectionUnits(double projectionUnits) {
        _projectionUnits = projectionUnits;
    }

    @Override
    public String getAdjustmentType() {
        if (_adjustmentType == null) {
            return StringPool.BLANK;
        } else {
            return _adjustmentType;
        }
    }

    @Override
    public void setAdjustmentType(String adjustmentType) {
        _adjustmentType = adjustmentType;
    }

    @Override
    public double getProjectionSales() {
        return _projectionSales;
    }

    @Override
    public void setProjectionSales(double projectionSales) {
        _projectionSales = projectionSales;
    }

    @Override
    public NmSalesProjection toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (NmSalesProjection) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NmSalesProjectionImpl nmSalesProjectionImpl = new NmSalesProjectionImpl();

        nmSalesProjectionImpl.setAdjustmentMethodology(getAdjustmentMethodology());
        nmSalesProjectionImpl.setAdjustmentBasis(getAdjustmentBasis());
        nmSalesProjectionImpl.setPeriodSid(getPeriodSid());
        nmSalesProjectionImpl.setProductGrowth(getProductGrowth());
        nmSalesProjectionImpl.setProjectionDetailsSid(getProjectionDetailsSid());
        nmSalesProjectionImpl.setAdjustmentValues(getAdjustmentValues());
        nmSalesProjectionImpl.setAdjustmentVariable(getAdjustmentVariable());
        nmSalesProjectionImpl.setAccountGrowth(getAccountGrowth());
        nmSalesProjectionImpl.setProjectionUnits(getProjectionUnits());
        nmSalesProjectionImpl.setAdjustmentType(getAdjustmentType());
        nmSalesProjectionImpl.setProjectionSales(getProjectionSales());

        nmSalesProjectionImpl.resetOriginalValues();

        return nmSalesProjectionImpl;
    }

    @Override
    public int compareTo(NmSalesProjection nmSalesProjection) {
        NmSalesProjectionPK primaryKey = nmSalesProjection.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof NmSalesProjection)) {
            return false;
        }

        NmSalesProjection nmSalesProjection = (NmSalesProjection) obj;

        NmSalesProjectionPK primaryKey = nmSalesProjection.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<NmSalesProjection> toCacheModel() {
        NmSalesProjectionCacheModel nmSalesProjectionCacheModel = new NmSalesProjectionCacheModel();

        nmSalesProjectionCacheModel.adjustmentMethodology = getAdjustmentMethodology();

        String adjustmentMethodology = nmSalesProjectionCacheModel.adjustmentMethodology;

        if ((adjustmentMethodology != null) &&
                (adjustmentMethodology.length() == 0)) {
            nmSalesProjectionCacheModel.adjustmentMethodology = null;
        }

        nmSalesProjectionCacheModel.adjustmentBasis = getAdjustmentBasis();

        String adjustmentBasis = nmSalesProjectionCacheModel.adjustmentBasis;

        if ((adjustmentBasis != null) && (adjustmentBasis.length() == 0)) {
            nmSalesProjectionCacheModel.adjustmentBasis = null;
        }

        nmSalesProjectionCacheModel.periodSid = getPeriodSid();

        nmSalesProjectionCacheModel.productGrowth = getProductGrowth();

        nmSalesProjectionCacheModel.projectionDetailsSid = getProjectionDetailsSid();

        nmSalesProjectionCacheModel.adjustmentValues = getAdjustmentValues();

        nmSalesProjectionCacheModel.adjustmentVariable = getAdjustmentVariable();

        nmSalesProjectionCacheModel.accountGrowth = getAccountGrowth();

        nmSalesProjectionCacheModel.projectionUnits = getProjectionUnits();

        nmSalesProjectionCacheModel.adjustmentType = getAdjustmentType();

        String adjustmentType = nmSalesProjectionCacheModel.adjustmentType;

        if ((adjustmentType != null) && (adjustmentType.length() == 0)) {
            nmSalesProjectionCacheModel.adjustmentType = null;
        }

        nmSalesProjectionCacheModel.projectionSales = getProjectionSales();

        return nmSalesProjectionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(23);

        sb.append("{adjustmentMethodology=");
        sb.append(getAdjustmentMethodology());
        sb.append(", adjustmentBasis=");
        sb.append(getAdjustmentBasis());
        sb.append(", periodSid=");
        sb.append(getPeriodSid());
        sb.append(", productGrowth=");
        sb.append(getProductGrowth());
        sb.append(", projectionDetailsSid=");
        sb.append(getProjectionDetailsSid());
        sb.append(", adjustmentValues=");
        sb.append(getAdjustmentValues());
        sb.append(", adjustmentVariable=");
        sb.append(getAdjustmentVariable());
        sb.append(", accountGrowth=");
        sb.append(getAccountGrowth());
        sb.append(", projectionUnits=");
        sb.append(getProjectionUnits());
        sb.append(", adjustmentType=");
        sb.append(getAdjustmentType());
        sb.append(", projectionSales=");
        sb.append(getProjectionSales());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(37);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.NmSalesProjection");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>adjustmentMethodology</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentMethodology());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustmentBasis</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentBasis());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>periodSid</column-name><column-value><![CDATA[");
        sb.append(getPeriodSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>productGrowth</column-name><column-value><![CDATA[");
        sb.append(getProductGrowth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustmentValues</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentValues());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustmentVariable</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentVariable());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>accountGrowth</column-name><column-value><![CDATA[");
        sb.append(getAccountGrowth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionUnits</column-name><column-value><![CDATA[");
        sb.append(getProjectionUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustmentType</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionSales</column-name><column-value><![CDATA[");
        sb.append(getProjectionSales());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
