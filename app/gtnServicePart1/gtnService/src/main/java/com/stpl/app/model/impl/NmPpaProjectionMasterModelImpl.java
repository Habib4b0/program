/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.NmPpaProjectionMaster;
import com.stpl.app.model.NmPpaProjectionMasterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NmPpaProjectionMaster service. Represents a row in the &quot;NM_PPA_PROJECTION_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link NmPpaProjectionMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NmPpaProjectionMasterImpl}.
 * </p>
 *
 * @author
 * @see NmPpaProjectionMasterImpl
 * @see NmPpaProjectionMaster
 * @see NmPpaProjectionMasterModel
 * @generated
 */
@ProviderType
public class NmPpaProjectionMasterModelImpl extends BaseModelImpl<NmPpaProjectionMaster>
	implements NmPpaProjectionMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a nm ppa projection master model instance should use the {@link NmPpaProjectionMaster} interface instead.
	 */
	public static final String TABLE_NAME = "NM_PPA_PROJECTION_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CHECK_RECORD", Types.BOOLEAN },
			{ "USER_GROUP", Types.VARCHAR },
			{ "PROJECTION_DETAILS_SID", Types.INTEGER },
			{ "PRICE_BASIS", Types.VARCHAR },
			{ "PRICE_PROTECTION_END_DATE", Types.TIMESTAMP },
			{ "PRICE_PROTECTION_START_DATE", Types.TIMESTAMP },
			{ "ACTUAL_PRICE_CAP", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CHECK_RECORD", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("USER_GROUP", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECTION_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE_BASIS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PRICE_PROTECTION_END_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PRICE_PROTECTION_START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ACTUAL_PRICE_CAP", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table NM_PPA_PROJECTION_MASTER (CHECK_RECORD BOOLEAN,USER_GROUP VARCHAR(75) null,PROJECTION_DETAILS_SID INTEGER not null primary key IDENTITY,PRICE_BASIS VARCHAR(75) null,PRICE_PROTECTION_END_DATE DATE null,PRICE_PROTECTION_START_DATE DATE null,ACTUAL_PRICE_CAP DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table NM_PPA_PROJECTION_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY nmPpaProjectionMaster.projectionDetailsSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY NM_PPA_PROJECTION_MASTER.PROJECTION_DETAILS_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.NmPpaProjectionMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.NmPpaProjectionMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.NmPpaProjectionMaster"));

	public NmPpaProjectionMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _projectionDetailsSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setProjectionDetailsSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectionDetailsSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NmPpaProjectionMaster.class;
	}

	@Override
	public String getModelClassName() {
		return NmPpaProjectionMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("checkRecord", getCheckRecord());
		attributes.put("userGroup", getUserGroup());
		attributes.put("projectionDetailsSid", getProjectionDetailsSid());
		attributes.put("priceBasis", getPriceBasis());
		attributes.put("priceProtectionEndDate", getPriceProtectionEndDate());
		attributes.put("priceProtectionStartDate", getPriceProtectionStartDate());
		attributes.put("actualPriceCap", getActualPriceCap());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Boolean checkRecord = (Boolean)attributes.get("checkRecord");

		if (checkRecord != null) {
			setCheckRecord(checkRecord);
		}

		String userGroup = (String)attributes.get("userGroup");

		if (userGroup != null) {
			setUserGroup(userGroup);
		}

		Integer projectionDetailsSid = (Integer)attributes.get(
				"projectionDetailsSid");

		if (projectionDetailsSid != null) {
			setProjectionDetailsSid(projectionDetailsSid);
		}

		String priceBasis = (String)attributes.get("priceBasis");

		if (priceBasis != null) {
			setPriceBasis(priceBasis);
		}

		Date priceProtectionEndDate = (Date)attributes.get(
				"priceProtectionEndDate");

		if (priceProtectionEndDate != null) {
			setPriceProtectionEndDate(priceProtectionEndDate);
		}

		Date priceProtectionStartDate = (Date)attributes.get(
				"priceProtectionStartDate");

		if (priceProtectionStartDate != null) {
			setPriceProtectionStartDate(priceProtectionStartDate);
		}

		Double actualPriceCap = (Double)attributes.get("actualPriceCap");

		if (actualPriceCap != null) {
			setActualPriceCap(actualPriceCap);
		}
	}

	@Override
	public boolean getCheckRecord() {
		return _checkRecord;
	}

	@Override
	public boolean isCheckRecord() {
		return _checkRecord;
	}

	@Override
	public void setCheckRecord(boolean checkRecord) {
		_checkRecord = checkRecord;
	}

	@Override
	public String getUserGroup() {
		if (_userGroup == null) {
			return StringPool.BLANK;
		}
		else {
			return _userGroup;
		}
	}

	@Override
	public void setUserGroup(String userGroup) {
		_userGroup = userGroup;
	}

	@Override
	public int getProjectionDetailsSid() {
		return _projectionDetailsSid;
	}

	@Override
	public void setProjectionDetailsSid(int projectionDetailsSid) {
		_projectionDetailsSid = projectionDetailsSid;
	}

	@Override
	public String getPriceBasis() {
		if (_priceBasis == null) {
			return StringPool.BLANK;
		}
		else {
			return _priceBasis;
		}
	}

	@Override
	public void setPriceBasis(String priceBasis) {
		_priceBasis = priceBasis;
	}

	@Override
	public Date getPriceProtectionEndDate() {
		return _priceProtectionEndDate;
	}

	@Override
	public void setPriceProtectionEndDate(Date priceProtectionEndDate) {
		_priceProtectionEndDate = priceProtectionEndDate;
	}

	@Override
	public Date getPriceProtectionStartDate() {
		return _priceProtectionStartDate;
	}

	@Override
	public void setPriceProtectionStartDate(Date priceProtectionStartDate) {
		_priceProtectionStartDate = priceProtectionStartDate;
	}

	@Override
	public double getActualPriceCap() {
		return _actualPriceCap;
	}

	@Override
	public void setActualPriceCap(double actualPriceCap) {
		_actualPriceCap = actualPriceCap;
	}

	@Override
	public NmPpaProjectionMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (NmPpaProjectionMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NmPpaProjectionMasterImpl nmPpaProjectionMasterImpl = new NmPpaProjectionMasterImpl();

		nmPpaProjectionMasterImpl.setCheckRecord(getCheckRecord());
		nmPpaProjectionMasterImpl.setUserGroup(getUserGroup());
		nmPpaProjectionMasterImpl.setProjectionDetailsSid(getProjectionDetailsSid());
		nmPpaProjectionMasterImpl.setPriceBasis(getPriceBasis());
		nmPpaProjectionMasterImpl.setPriceProtectionEndDate(getPriceProtectionEndDate());
		nmPpaProjectionMasterImpl.setPriceProtectionStartDate(getPriceProtectionStartDate());
		nmPpaProjectionMasterImpl.setActualPriceCap(getActualPriceCap());

		nmPpaProjectionMasterImpl.resetOriginalValues();

		return nmPpaProjectionMasterImpl;
	}

	@Override
	public int compareTo(NmPpaProjectionMaster nmPpaProjectionMaster) {
		int primaryKey = nmPpaProjectionMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof NmPpaProjectionMaster)) {
			return false;
		}

		NmPpaProjectionMaster nmPpaProjectionMaster = (NmPpaProjectionMaster)obj;

		int primaryKey = nmPpaProjectionMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<NmPpaProjectionMaster> toCacheModel() {
		NmPpaProjectionMasterCacheModel nmPpaProjectionMasterCacheModel = new NmPpaProjectionMasterCacheModel();

		nmPpaProjectionMasterCacheModel.checkRecord = getCheckRecord();

		nmPpaProjectionMasterCacheModel.userGroup = getUserGroup();

		String userGroup = nmPpaProjectionMasterCacheModel.userGroup;

		if ((userGroup != null) && (userGroup.length() == 0)) {
			nmPpaProjectionMasterCacheModel.userGroup = null;
		}

		nmPpaProjectionMasterCacheModel.projectionDetailsSid = getProjectionDetailsSid();

		nmPpaProjectionMasterCacheModel.priceBasis = getPriceBasis();

		String priceBasis = nmPpaProjectionMasterCacheModel.priceBasis;

		if ((priceBasis != null) && (priceBasis.length() == 0)) {
			nmPpaProjectionMasterCacheModel.priceBasis = null;
		}

		Date priceProtectionEndDate = getPriceProtectionEndDate();

		if (priceProtectionEndDate != null) {
			nmPpaProjectionMasterCacheModel.priceProtectionEndDate = priceProtectionEndDate.getTime();
		}
		else {
			nmPpaProjectionMasterCacheModel.priceProtectionEndDate = Long.MIN_VALUE;
		}

		Date priceProtectionStartDate = getPriceProtectionStartDate();

		if (priceProtectionStartDate != null) {
			nmPpaProjectionMasterCacheModel.priceProtectionStartDate = priceProtectionStartDate.getTime();
		}
		else {
			nmPpaProjectionMasterCacheModel.priceProtectionStartDate = Long.MIN_VALUE;
		}

		nmPpaProjectionMasterCacheModel.actualPriceCap = getActualPriceCap();

		return nmPpaProjectionMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{checkRecord=");
		sb.append(getCheckRecord());
		sb.append(", userGroup=");
		sb.append(getUserGroup());
		sb.append(", projectionDetailsSid=");
		sb.append(getProjectionDetailsSid());
		sb.append(", priceBasis=");
		sb.append(getPriceBasis());
		sb.append(", priceProtectionEndDate=");
		sb.append(getPriceProtectionEndDate());
		sb.append(", priceProtectionStartDate=");
		sb.append(getPriceProtectionStartDate());
		sb.append(", actualPriceCap=");
		sb.append(getActualPriceCap());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.NmPpaProjectionMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>checkRecord</column-name><column-value><![CDATA[");
		sb.append(getCheckRecord());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userGroup</column-name><column-value><![CDATA[");
		sb.append(getUserGroup());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getProjectionDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceBasis</column-name><column-value><![CDATA[");
		sb.append(getPriceBasis());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceProtectionEndDate</column-name><column-value><![CDATA[");
		sb.append(getPriceProtectionEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceProtectionStartDate</column-name><column-value><![CDATA[");
		sb.append(getPriceProtectionStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualPriceCap</column-name><column-value><![CDATA[");
		sb.append(getActualPriceCap());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = NmPpaProjectionMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			NmPpaProjectionMaster.class
		};
	private boolean _checkRecord;
	private String _userGroup;
	private int _projectionDetailsSid;
	private String _priceBasis;
	private Date _priceProtectionEndDate;
	private Date _priceProtectionStartDate;
	private double _actualPriceCap;
	private NmPpaProjectionMaster _escapedModel;
}