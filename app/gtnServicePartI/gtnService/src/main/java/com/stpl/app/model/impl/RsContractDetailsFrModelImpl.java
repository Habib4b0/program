/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.RsContractDetailsFr;
import com.stpl.app.model.RsContractDetailsFrModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RsContractDetailsFr service. Represents a row in the &quot;RS_CONTRACT_DETAILS_FR&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RsContractDetailsFrModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RsContractDetailsFrImpl}.
 * </p>
 *
 * @author
 * @see RsContractDetailsFrImpl
 * @see RsContractDetailsFr
 * @see RsContractDetailsFrModel
 * @generated
 */
@ProviderType
public class RsContractDetailsFrModelImpl extends BaseModelImpl<RsContractDetailsFr>
	implements RsContractDetailsFrModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rs contract details fr model instance should use the {@link RsContractDetailsFr} interface instead.
	 */
	public static final String TABLE_NAME = "RS_CONTRACT_DETAILS_FR";
	public static final Object[][] TABLE_COLUMNS = {
			{ "RECORD_LOCK_STATUS", Types.BOOLEAN },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.INTEGER },
			{ "SOURCE", Types.VARCHAR },
			{ "FORMULA_METHOD_ID", Types.VARCHAR },
			{ "ITEM_MASTER_SID", Types.INTEGER },
			{ "BATCH_ID", Types.VARCHAR },
			{ "RS_CONTRACT_DETAILS_FR_SID", Types.INTEGER },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "INBOUND_STATUS", Types.VARCHAR },
			{ "FORMULA_ID", Types.INTEGER },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "RS_CONTRACT_DETAILS_SID", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("RECORD_LOCK_STATUS", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORMULA_METHOD_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RS_CONTRACT_DETAILS_FR_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORMULA_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("RS_CONTRACT_DETAILS_SID", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table RS_CONTRACT_DETAILS_FR (RECORD_LOCK_STATUS BOOLEAN,CREATED_DATE DATE null,CREATED_BY INTEGER,SOURCE VARCHAR(75) null,FORMULA_METHOD_ID VARCHAR(75) null,ITEM_MASTER_SID INTEGER,BATCH_ID VARCHAR(75) null,RS_CONTRACT_DETAILS_FR_SID INTEGER not null primary key IDENTITY,MODIFIED_BY INTEGER,INBOUND_STATUS VARCHAR(75) null,FORMULA_ID INTEGER,MODIFIED_DATE DATE null,RS_CONTRACT_DETAILS_SID INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table RS_CONTRACT_DETAILS_FR";
	public static final String ORDER_BY_JPQL = " ORDER BY rsContractDetailsFr.rsContractDetailsFrSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY RS_CONTRACT_DETAILS_FR.RS_CONTRACT_DETAILS_FR_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.RsContractDetailsFr"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.RsContractDetailsFr"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.RsContractDetailsFr"));

	public RsContractDetailsFrModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _rsContractDetailsFrSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setRsContractDetailsFrSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _rsContractDetailsFrSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RsContractDetailsFr.class;
	}

	@Override
	public String getModelClassName() {
		return RsContractDetailsFr.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("recordLockStatus", getRecordLockStatus());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("source", getSource());
		attributes.put("formulaMethodId", getFormulaMethodId());
		attributes.put("itemMasterSid", getItemMasterSid());
		attributes.put("batchId", getBatchId());
		attributes.put("rsContractDetailsFrSid", getRsContractDetailsFrSid());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("inboundStatus", getInboundStatus());
		attributes.put("formulaId", getFormulaId());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("rsContractDetailsSid", getRsContractDetailsSid());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Boolean recordLockStatus = (Boolean)attributes.get("recordLockStatus");

		if (recordLockStatus != null) {
			setRecordLockStatus(recordLockStatus);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String formulaMethodId = (String)attributes.get("formulaMethodId");

		if (formulaMethodId != null) {
			setFormulaMethodId(formulaMethodId);
		}

		Integer itemMasterSid = (Integer)attributes.get("itemMasterSid");

		if (itemMasterSid != null) {
			setItemMasterSid(itemMasterSid);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		Integer rsContractDetailsFrSid = (Integer)attributes.get(
				"rsContractDetailsFrSid");

		if (rsContractDetailsFrSid != null) {
			setRsContractDetailsFrSid(rsContractDetailsFrSid);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}

		Integer formulaId = (Integer)attributes.get("formulaId");

		if (formulaId != null) {
			setFormulaId(formulaId);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer rsContractDetailsSid = (Integer)attributes.get(
				"rsContractDetailsSid");

		if (rsContractDetailsSid != null) {
			setRsContractDetailsSid(rsContractDetailsSid);
		}
	}

	@Override
	public boolean getRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public boolean isRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public void setRecordLockStatus(boolean recordLockStatus) {
		_recordLockStatus = recordLockStatus;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getFormulaMethodId() {
		if (_formulaMethodId == null) {
			return StringPool.BLANK;
		}
		else {
			return _formulaMethodId;
		}
	}

	@Override
	public void setFormulaMethodId(String formulaMethodId) {
		_formulaMethodId = formulaMethodId;
	}

	@Override
	public int getItemMasterSid() {
		return _itemMasterSid;
	}

	@Override
	public void setItemMasterSid(int itemMasterSid) {
		_itemMasterSid = itemMasterSid;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public int getRsContractDetailsFrSid() {
		return _rsContractDetailsFrSid;
	}

	@Override
	public void setRsContractDetailsFrSid(int rsContractDetailsFrSid) {
		_rsContractDetailsFrSid = rsContractDetailsFrSid;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	@Override
	public int getFormulaId() {
		return _formulaId;
	}

	@Override
	public void setFormulaId(int formulaId) {
		_formulaId = formulaId;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public int getRsContractDetailsSid() {
		return _rsContractDetailsSid;
	}

	@Override
	public void setRsContractDetailsSid(int rsContractDetailsSid) {
		_rsContractDetailsSid = rsContractDetailsSid;
	}

	@Override
	public RsContractDetailsFr toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RsContractDetailsFr)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RsContractDetailsFrImpl rsContractDetailsFrImpl = new RsContractDetailsFrImpl();

		rsContractDetailsFrImpl.setRecordLockStatus(getRecordLockStatus());
		rsContractDetailsFrImpl.setCreatedDate(getCreatedDate());
		rsContractDetailsFrImpl.setCreatedBy(getCreatedBy());
		rsContractDetailsFrImpl.setSource(getSource());
		rsContractDetailsFrImpl.setFormulaMethodId(getFormulaMethodId());
		rsContractDetailsFrImpl.setItemMasterSid(getItemMasterSid());
		rsContractDetailsFrImpl.setBatchId(getBatchId());
		rsContractDetailsFrImpl.setRsContractDetailsFrSid(getRsContractDetailsFrSid());
		rsContractDetailsFrImpl.setModifiedBy(getModifiedBy());
		rsContractDetailsFrImpl.setInboundStatus(getInboundStatus());
		rsContractDetailsFrImpl.setFormulaId(getFormulaId());
		rsContractDetailsFrImpl.setModifiedDate(getModifiedDate());
		rsContractDetailsFrImpl.setRsContractDetailsSid(getRsContractDetailsSid());

		rsContractDetailsFrImpl.resetOriginalValues();

		return rsContractDetailsFrImpl;
	}

	@Override
	public int compareTo(RsContractDetailsFr rsContractDetailsFr) {
		int primaryKey = rsContractDetailsFr.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RsContractDetailsFr)) {
			return false;
		}

		RsContractDetailsFr rsContractDetailsFr = (RsContractDetailsFr)obj;

		int primaryKey = rsContractDetailsFr.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<RsContractDetailsFr> toCacheModel() {
		RsContractDetailsFrCacheModel rsContractDetailsFrCacheModel = new RsContractDetailsFrCacheModel();

		rsContractDetailsFrCacheModel.recordLockStatus = getRecordLockStatus();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			rsContractDetailsFrCacheModel.createdDate = createdDate.getTime();
		}
		else {
			rsContractDetailsFrCacheModel.createdDate = Long.MIN_VALUE;
		}

		rsContractDetailsFrCacheModel.createdBy = getCreatedBy();

		rsContractDetailsFrCacheModel.source = getSource();

		String source = rsContractDetailsFrCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			rsContractDetailsFrCacheModel.source = null;
		}

		rsContractDetailsFrCacheModel.formulaMethodId = getFormulaMethodId();

		String formulaMethodId = rsContractDetailsFrCacheModel.formulaMethodId;

		if ((formulaMethodId != null) && (formulaMethodId.length() == 0)) {
			rsContractDetailsFrCacheModel.formulaMethodId = null;
		}

		rsContractDetailsFrCacheModel.itemMasterSid = getItemMasterSid();

		rsContractDetailsFrCacheModel.batchId = getBatchId();

		String batchId = rsContractDetailsFrCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			rsContractDetailsFrCacheModel.batchId = null;
		}

		rsContractDetailsFrCacheModel.rsContractDetailsFrSid = getRsContractDetailsFrSid();

		rsContractDetailsFrCacheModel.modifiedBy = getModifiedBy();

		rsContractDetailsFrCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = rsContractDetailsFrCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			rsContractDetailsFrCacheModel.inboundStatus = null;
		}

		rsContractDetailsFrCacheModel.formulaId = getFormulaId();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			rsContractDetailsFrCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			rsContractDetailsFrCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		rsContractDetailsFrCacheModel.rsContractDetailsSid = getRsContractDetailsSid();

		return rsContractDetailsFrCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{recordLockStatus=");
		sb.append(getRecordLockStatus());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", formulaMethodId=");
		sb.append(getFormulaMethodId());
		sb.append(", itemMasterSid=");
		sb.append(getItemMasterSid());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", rsContractDetailsFrSid=");
		sb.append(getRsContractDetailsFrSid());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append(", formulaId=");
		sb.append(getFormulaId());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", rsContractDetailsSid=");
		sb.append(getRsContractDetailsSid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.RsContractDetailsFr");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
		sb.append(getRecordLockStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formulaMethodId</column-name><column-value><![CDATA[");
		sb.append(getFormulaMethodId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
		sb.append(getItemMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsContractDetailsFrSid</column-name><column-value><![CDATA[");
		sb.append(getRsContractDetailsFrSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formulaId</column-name><column-value><![CDATA[");
		sb.append(getFormulaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsContractDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getRsContractDetailsSid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RsContractDetailsFr.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RsContractDetailsFr.class
		};
	private boolean _recordLockStatus;
	private Date _createdDate;
	private int _createdBy;
	private String _source;
	private String _formulaMethodId;
	private int _itemMasterSid;
	private String _batchId;
	private int _rsContractDetailsFrSid;
	private int _modifiedBy;
	private String _inboundStatus;
	private int _formulaId;
	private Date _modifiedDate;
	private int _rsContractDetailsSid;
	private RsContractDetailsFr _escapedModel;
}