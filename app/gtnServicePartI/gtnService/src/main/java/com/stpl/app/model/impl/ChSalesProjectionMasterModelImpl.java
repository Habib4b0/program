/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.ChSalesProjectionMaster;
import com.stpl.app.model.ChSalesProjectionMasterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ChSalesProjectionMaster service. Represents a row in the &quot;CH_SALES_PROJECTION_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ChSalesProjectionMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChSalesProjectionMasterImpl}.
 * </p>
 *
 * @author
 * @see ChSalesProjectionMasterImpl
 * @see ChSalesProjectionMaster
 * @see ChSalesProjectionMasterModel
 * @generated
 */
@ProviderType
public class ChSalesProjectionMasterModelImpl extends BaseModelImpl<ChSalesProjectionMaster>
	implements ChSalesProjectionMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ch sales projection master model instance should use the {@link ChSalesProjectionMaster} interface instead.
	 */
	public static final String TABLE_NAME = "CH_SALES_PROJECTION_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CHECK_RECORD", Types.BOOLEAN },
			{ "CALCULATION_PERIODS", Types.VARCHAR },
			{ "PROJECTION_DETAILS_SID", Types.INTEGER },
			{ "METHODOLOGY", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CHECK_RECORD", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("CALCULATION_PERIODS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECTION_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("METHODOLOGY", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table CH_SALES_PROJECTION_MASTER (CHECK_RECORD BOOLEAN,CALCULATION_PERIODS VARCHAR(75) null,PROJECTION_DETAILS_SID INTEGER not null primary key IDENTITY,METHODOLOGY VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CH_SALES_PROJECTION_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY chSalesProjectionMaster.projectionDetailsSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CH_SALES_PROJECTION_MASTER.PROJECTION_DETAILS_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.ChSalesProjectionMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.ChSalesProjectionMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.ChSalesProjectionMaster"));

	public ChSalesProjectionMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _projectionDetailsSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setProjectionDetailsSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectionDetailsSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ChSalesProjectionMaster.class;
	}

	@Override
	public String getModelClassName() {
		return ChSalesProjectionMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("checkRecord", getCheckRecord());
		attributes.put("calculationPeriods", getCalculationPeriods());
		attributes.put("projectionDetailsSid", getProjectionDetailsSid());
		attributes.put("methodology", getMethodology());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Boolean checkRecord = (Boolean)attributes.get("checkRecord");

		if (checkRecord != null) {
			setCheckRecord(checkRecord);
		}

		String calculationPeriods = (String)attributes.get("calculationPeriods");

		if (calculationPeriods != null) {
			setCalculationPeriods(calculationPeriods);
		}

		Integer projectionDetailsSid = (Integer)attributes.get(
				"projectionDetailsSid");

		if (projectionDetailsSid != null) {
			setProjectionDetailsSid(projectionDetailsSid);
		}

		String methodology = (String)attributes.get("methodology");

		if (methodology != null) {
			setMethodology(methodology);
		}
	}

	@Override
	public boolean getCheckRecord() {
		return _checkRecord;
	}

	@Override
	public boolean isCheckRecord() {
		return _checkRecord;
	}

	@Override
	public void setCheckRecord(boolean checkRecord) {
		_checkRecord = checkRecord;
	}

	@Override
	public String getCalculationPeriods() {
		if (_calculationPeriods == null) {
			return StringPool.BLANK;
		}
		else {
			return _calculationPeriods;
		}
	}

	@Override
	public void setCalculationPeriods(String calculationPeriods) {
		_calculationPeriods = calculationPeriods;
	}

	@Override
	public int getProjectionDetailsSid() {
		return _projectionDetailsSid;
	}

	@Override
	public void setProjectionDetailsSid(int projectionDetailsSid) {
		_projectionDetailsSid = projectionDetailsSid;
	}

	@Override
	public String getMethodology() {
		if (_methodology == null) {
			return StringPool.BLANK;
		}
		else {
			return _methodology;
		}
	}

	@Override
	public void setMethodology(String methodology) {
		_methodology = methodology;
	}

	@Override
	public ChSalesProjectionMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ChSalesProjectionMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ChSalesProjectionMasterImpl chSalesProjectionMasterImpl = new ChSalesProjectionMasterImpl();

		chSalesProjectionMasterImpl.setCheckRecord(getCheckRecord());
		chSalesProjectionMasterImpl.setCalculationPeriods(getCalculationPeriods());
		chSalesProjectionMasterImpl.setProjectionDetailsSid(getProjectionDetailsSid());
		chSalesProjectionMasterImpl.setMethodology(getMethodology());

		chSalesProjectionMasterImpl.resetOriginalValues();

		return chSalesProjectionMasterImpl;
	}

	@Override
	public int compareTo(ChSalesProjectionMaster chSalesProjectionMaster) {
		int primaryKey = chSalesProjectionMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ChSalesProjectionMaster)) {
			return false;
		}

		ChSalesProjectionMaster chSalesProjectionMaster = (ChSalesProjectionMaster)obj;

		int primaryKey = chSalesProjectionMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ChSalesProjectionMaster> toCacheModel() {
		ChSalesProjectionMasterCacheModel chSalesProjectionMasterCacheModel = new ChSalesProjectionMasterCacheModel();

		chSalesProjectionMasterCacheModel.checkRecord = getCheckRecord();

		chSalesProjectionMasterCacheModel.calculationPeriods = getCalculationPeriods();

		String calculationPeriods = chSalesProjectionMasterCacheModel.calculationPeriods;

		if ((calculationPeriods != null) && (calculationPeriods.length() == 0)) {
			chSalesProjectionMasterCacheModel.calculationPeriods = null;
		}

		chSalesProjectionMasterCacheModel.projectionDetailsSid = getProjectionDetailsSid();

		chSalesProjectionMasterCacheModel.methodology = getMethodology();

		String methodology = chSalesProjectionMasterCacheModel.methodology;

		if ((methodology != null) && (methodology.length() == 0)) {
			chSalesProjectionMasterCacheModel.methodology = null;
		}

		return chSalesProjectionMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{checkRecord=");
		sb.append(getCheckRecord());
		sb.append(", calculationPeriods=");
		sb.append(getCalculationPeriods());
		sb.append(", projectionDetailsSid=");
		sb.append(getProjectionDetailsSid());
		sb.append(", methodology=");
		sb.append(getMethodology());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.ChSalesProjectionMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>checkRecord</column-name><column-value><![CDATA[");
		sb.append(getCheckRecord());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calculationPeriods</column-name><column-value><![CDATA[");
		sb.append(getCalculationPeriods());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getProjectionDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>methodology</column-name><column-value><![CDATA[");
		sb.append(getMethodology());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ChSalesProjectionMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ChSalesProjectionMaster.class
		};
	private boolean _checkRecord;
	private String _calculationPeriods;
	private int _projectionDetailsSid;
	private String _methodology;
	private ChSalesProjectionMaster _escapedModel;
}