package com.stpl.app.model.impl;

import com.stpl.app.model.BrandMaster;
import com.stpl.app.model.BrandMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BrandMaster service. Represents a row in the &quot;BRAND_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.BrandMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BrandMasterImpl}.
 * </p>
 *
 * @author
 * @see BrandMasterImpl
 * @see com.stpl.app.model.BrandMaster
 * @see com.stpl.app.model.BrandMasterModel
 * @generated
 */
public class BrandMasterModelImpl extends BaseModelImpl<BrandMaster>
    implements BrandMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a brand master model instance should use the {@link com.stpl.app.model.BrandMaster} interface instead.
     */
    public static final String TABLE_NAME = "BRAND_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "CREATED_BY", Types.INTEGER },
            { "MODIFIED_BY", Types.INTEGER },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "BRAND_MASTER_SID", Types.INTEGER },
            { "BATCH_ID", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "BRAND_ID", Types.VARCHAR },
            { "DISPLAY_BRAND", Types.VARCHAR },
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "BRAND_NAME", Types.VARCHAR },
            { "BRAND_DESC", Types.VARCHAR },
            { "SOURCE", Types.VARCHAR },
            { "INBOUND_STATUS", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table BRAND_MASTER (CREATED_BY INTEGER,MODIFIED_BY INTEGER,CREATED_DATE DATE null,BRAND_MASTER_SID INTEGER not null primary key IDENTITY,BATCH_ID VARCHAR(75) null,MODIFIED_DATE DATE null,BRAND_ID VARCHAR(75) null,DISPLAY_BRAND VARCHAR(75) null,RECORD_LOCK_STATUS BOOLEAN,BRAND_NAME VARCHAR(75) null,BRAND_DESC VARCHAR(75) null,SOURCE VARCHAR(75) null,INBOUND_STATUS VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table BRAND_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY brandMaster.brandMasterSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY BRAND_MASTER.BRAND_MASTER_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.BrandMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.BrandMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.BrandMaster"));
    private static ClassLoader _classLoader = BrandMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            BrandMaster.class
        };
    private int _createdBy;
    private int _modifiedBy;
    private Date _createdDate;
    private int _brandMasterSid;
    private String _batchId;
    private Date _modifiedDate;
    private String _brandId;
    private String _displayBrand;
    private boolean _recordLockStatus;
    private String _brandName;
    private String _brandDesc;
    private String _source;
    private String _inboundStatus;
    private BrandMaster _escapedModel;

    public BrandMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _brandMasterSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setBrandMasterSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _brandMasterSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return BrandMaster.class;
    }

    @Override
    public String getModelClassName() {
        return BrandMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("createdBy", getCreatedBy());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("brandMasterSid", getBrandMasterSid());
        attributes.put("batchId", getBatchId());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("brandId", getBrandId());
        attributes.put("displayBrand", getDisplayBrand());
        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("brandName", getBrandName());
        attributes.put("brandDesc", getBrandDesc());
        attributes.put("source", getSource());
        attributes.put("inboundStatus", getInboundStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Integer brandMasterSid = (Integer) attributes.get("brandMasterSid");

        if (brandMasterSid != null) {
            setBrandMasterSid(brandMasterSid);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String brandId = (String) attributes.get("brandId");

        if (brandId != null) {
            setBrandId(brandId);
        }

        String displayBrand = (String) attributes.get("displayBrand");

        if (displayBrand != null) {
            setDisplayBrand(displayBrand);
        }

        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        String brandName = (String) attributes.get("brandName");

        if (brandName != null) {
            setBrandName(brandName);
        }

        String brandDesc = (String) attributes.get("brandDesc");

        if (brandDesc != null) {
            setBrandDesc(brandDesc);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public int getBrandMasterSid() {
        return _brandMasterSid;
    }

    @Override
    public void setBrandMasterSid(int brandMasterSid) {
        _brandMasterSid = brandMasterSid;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getBrandId() {
        if (_brandId == null) {
            return StringPool.BLANK;
        } else {
            return _brandId;
        }
    }

    @Override
    public void setBrandId(String brandId) {
        _brandId = brandId;
    }

    @Override
    public String getDisplayBrand() {
        if (_displayBrand == null) {
            return StringPool.BLANK;
        } else {
            return _displayBrand;
        }
    }

    @Override
    public void setDisplayBrand(String displayBrand) {
        _displayBrand = displayBrand;
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public String getBrandName() {
        if (_brandName == null) {
            return StringPool.BLANK;
        } else {
            return _brandName;
        }
    }

    @Override
    public void setBrandName(String brandName) {
        _brandName = brandName;
    }

    @Override
    public String getBrandDesc() {
        if (_brandDesc == null) {
            return StringPool.BLANK;
        } else {
            return _brandDesc;
        }
    }

    @Override
    public void setBrandDesc(String brandDesc) {
        _brandDesc = brandDesc;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    @Override
    public BrandMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (BrandMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        BrandMasterImpl brandMasterImpl = new BrandMasterImpl();

        brandMasterImpl.setCreatedBy(getCreatedBy());
        brandMasterImpl.setModifiedBy(getModifiedBy());
        brandMasterImpl.setCreatedDate(getCreatedDate());
        brandMasterImpl.setBrandMasterSid(getBrandMasterSid());
        brandMasterImpl.setBatchId(getBatchId());
        brandMasterImpl.setModifiedDate(getModifiedDate());
        brandMasterImpl.setBrandId(getBrandId());
        brandMasterImpl.setDisplayBrand(getDisplayBrand());
        brandMasterImpl.setRecordLockStatus(getRecordLockStatus());
        brandMasterImpl.setBrandName(getBrandName());
        brandMasterImpl.setBrandDesc(getBrandDesc());
        brandMasterImpl.setSource(getSource());
        brandMasterImpl.setInboundStatus(getInboundStatus());

        brandMasterImpl.resetOriginalValues();

        return brandMasterImpl;
    }

    @Override
    public int compareTo(BrandMaster brandMaster) {
        int primaryKey = brandMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof BrandMaster)) {
            return false;
        }

        BrandMaster brandMaster = (BrandMaster) obj;

        int primaryKey = brandMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<BrandMaster> toCacheModel() {
        BrandMasterCacheModel brandMasterCacheModel = new BrandMasterCacheModel();

        brandMasterCacheModel.createdBy = getCreatedBy();

        brandMasterCacheModel.modifiedBy = getModifiedBy();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            brandMasterCacheModel.createdDate = createdDate.getTime();
        } else {
            brandMasterCacheModel.createdDate = Long.MIN_VALUE;
        }

        brandMasterCacheModel.brandMasterSid = getBrandMasterSid();

        brandMasterCacheModel.batchId = getBatchId();

        String batchId = brandMasterCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            brandMasterCacheModel.batchId = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            brandMasterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            brandMasterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        brandMasterCacheModel.brandId = getBrandId();

        String brandId = brandMasterCacheModel.brandId;

        if ((brandId != null) && (brandId.length() == 0)) {
            brandMasterCacheModel.brandId = null;
        }

        brandMasterCacheModel.displayBrand = getDisplayBrand();

        String displayBrand = brandMasterCacheModel.displayBrand;

        if ((displayBrand != null) && (displayBrand.length() == 0)) {
            brandMasterCacheModel.displayBrand = null;
        }

        brandMasterCacheModel.recordLockStatus = getRecordLockStatus();

        brandMasterCacheModel.brandName = getBrandName();

        String brandName = brandMasterCacheModel.brandName;

        if ((brandName != null) && (brandName.length() == 0)) {
            brandMasterCacheModel.brandName = null;
        }

        brandMasterCacheModel.brandDesc = getBrandDesc();

        String brandDesc = brandMasterCacheModel.brandDesc;

        if ((brandDesc != null) && (brandDesc.length() == 0)) {
            brandMasterCacheModel.brandDesc = null;
        }

        brandMasterCacheModel.source = getSource();

        String source = brandMasterCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            brandMasterCacheModel.source = null;
        }

        brandMasterCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = brandMasterCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            brandMasterCacheModel.inboundStatus = null;
        }

        return brandMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{createdBy=");
        sb.append(getCreatedBy());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", brandMasterSid=");
        sb.append(getBrandMasterSid());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", brandId=");
        sb.append(getBrandId());
        sb.append(", displayBrand=");
        sb.append(getDisplayBrand());
        sb.append(", recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", brandName=");
        sb.append(getBrandName());
        sb.append(", brandDesc=");
        sb.append(getBrandDesc());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.BrandMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandMasterSid</column-name><column-value><![CDATA[");
        sb.append(getBrandMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandId</column-name><column-value><![CDATA[");
        sb.append(getBrandId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>displayBrand</column-name><column-value><![CDATA[");
        sb.append(getDisplayBrand());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandName</column-name><column-value><![CDATA[");
        sb.append(getBrandName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandDesc</column-name><column-value><![CDATA[");
        sb.append(getBrandDesc());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
