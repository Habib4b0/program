/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import com.stpl.app.service.persistence.MSupplementalDiscActualsPK;

import java.io.Serializable;

/**
 * The base model interface for the MSupplementalDiscActuals service. Represents a row in the &quot;M_SUPPLEMENTAL_DISC_ACTUALS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.stpl.app.model.impl.MSupplementalDiscActualsModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.stpl.app.model.impl.MSupplementalDiscActualsImpl}.
 * </p>
 *
 * @author
 * @see MSupplementalDiscActuals
 * @see com.stpl.app.model.impl.MSupplementalDiscActualsImpl
 * @see com.stpl.app.model.impl.MSupplementalDiscActualsModelImpl
 * @generated
 */
@ProviderType
public interface MSupplementalDiscActualsModel extends BaseModel<MSupplementalDiscActuals> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a m supplemental disc actuals model instance should use the {@link MSupplementalDiscActuals} interface instead.
	 */

	/**
	 * Returns the primary key of this m supplemental disc actuals.
	 *
	 * @return the primary key of this m supplemental disc actuals
	 */
	public MSupplementalDiscActualsPK getPrimaryKey();

	/**
	 * Sets the primary key of this m supplemental disc actuals.
	 *
	 * @param primaryKey the primary key of this m supplemental disc actuals
	 */
	public void setPrimaryKey(MSupplementalDiscActualsPK primaryKey);

	/**
	 * Returns the actual sales of this m supplemental disc actuals.
	 *
	 * @return the actual sales of this m supplemental disc actuals
	 */
	public double getActualSales();

	/**
	 * Sets the actual sales of this m supplemental disc actuals.
	 *
	 * @param actualSales the actual sales of this m supplemental disc actuals
	 */
	public void setActualSales(double actualSales);

	/**
	 * Returns the period sid of this m supplemental disc actuals.
	 *
	 * @return the period sid of this m supplemental disc actuals
	 */
	public int getPeriodSid();

	/**
	 * Sets the period sid of this m supplemental disc actuals.
	 *
	 * @param periodSid the period sid of this m supplemental disc actuals
	 */
	public void setPeriodSid(int periodSid);

	/**
	 * Returns the actual rate of this m supplemental disc actuals.
	 *
	 * @return the actual rate of this m supplemental disc actuals
	 */
	public double getActualRate();

	/**
	 * Sets the actual rate of this m supplemental disc actuals.
	 *
	 * @param actualRate the actual rate of this m supplemental disc actuals
	 */
	public void setActualRate(double actualRate);

	/**
	 * Returns the actual projection sales of this m supplemental disc actuals.
	 *
	 * @return the actual projection sales of this m supplemental disc actuals
	 */
	public double getActualProjectionSales();

	/**
	 * Sets the actual projection sales of this m supplemental disc actuals.
	 *
	 * @param actualProjectionSales the actual projection sales of this m supplemental disc actuals
	 */
	public void setActualProjectionSales(double actualProjectionSales);

	/**
	 * Returns the actual projection rate of this m supplemental disc actuals.
	 *
	 * @return the actual projection rate of this m supplemental disc actuals
	 */
	public double getActualProjectionRate();

	/**
	 * Sets the actual projection rate of this m supplemental disc actuals.
	 *
	 * @param actualProjectionRate the actual projection rate of this m supplemental disc actuals
	 */
	public void setActualProjectionRate(double actualProjectionRate);

	/**
	 * Returns the projection details sid of this m supplemental disc actuals.
	 *
	 * @return the projection details sid of this m supplemental disc actuals
	 */
	public int getProjectionDetailsSid();

	/**
	 * Sets the projection details sid of this m supplemental disc actuals.
	 *
	 * @param projectionDetailsSid the projection details sid of this m supplemental disc actuals
	 */
	public void setProjectionDetailsSid(int projectionDetailsSid);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(MSupplementalDiscActuals mSupplementalDiscActuals);

	@Override
	public int hashCode();

	@Override
	public CacheModel<MSupplementalDiscActuals> toCacheModel();

	@Override
	public MSupplementalDiscActuals toEscapedModel();

	@Override
	public MSupplementalDiscActuals toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}