/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.NaProjectionSelection;
import com.stpl.app.model.NaProjectionSelectionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NaProjectionSelection service. Represents a row in the &quot;NA_PROJECTION_SELECTION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link NaProjectionSelectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NaProjectionSelectionImpl}.
 * </p>
 *
 * @author
 * @see NaProjectionSelectionImpl
 * @see NaProjectionSelection
 * @see NaProjectionSelectionModel
 * @generated
 */
@ProviderType
public class NaProjectionSelectionModelImpl extends BaseModelImpl<NaProjectionSelection>
	implements NaProjectionSelectionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a na projection selection model instance should use the {@link NaProjectionSelection} interface instead.
	 */
	public static final String TABLE_NAME = "NA_PROJECTION_SELECTION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "SCREEN_NAME", Types.VARCHAR },
			{ "FIELD_NAME", Types.VARCHAR },
			{ "FIELD_VALUES", Types.VARCHAR },
			{ "NA_PROJECTION_SELECTION_SID", Types.INTEGER },
			{ "NA_PROJ_MASTER_SID", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("SCREEN_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FIELD_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FIELD_VALUES", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NA_PROJECTION_SELECTION_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NA_PROJ_MASTER_SID", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table NA_PROJECTION_SELECTION (SCREEN_NAME VARCHAR(75) null,FIELD_NAME VARCHAR(75) null,FIELD_VALUES VARCHAR(75) null,NA_PROJECTION_SELECTION_SID INTEGER not null primary key IDENTITY,NA_PROJ_MASTER_SID INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table NA_PROJECTION_SELECTION";
	public static final String ORDER_BY_JPQL = " ORDER BY naProjectionSelection.naProjectionSelectionSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY NA_PROJECTION_SELECTION.NA_PROJECTION_SELECTION_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.NaProjectionSelection"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.NaProjectionSelection"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.NaProjectionSelection"));

	public NaProjectionSelectionModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _naProjectionSelectionSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setNaProjectionSelectionSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _naProjectionSelectionSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NaProjectionSelection.class;
	}

	@Override
	public String getModelClassName() {
		return NaProjectionSelection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("screenName", getScreenName());
		attributes.put("fieldName", getFieldName());
		attributes.put("fieldValues", getFieldValues());
		attributes.put("naProjectionSelectionSid", getNaProjectionSelectionSid());
		attributes.put("naProjMasterSid", getNaProjMasterSid());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String screenName = (String)attributes.get("screenName");

		if (screenName != null) {
			setScreenName(screenName);
		}

		String fieldName = (String)attributes.get("fieldName");

		if (fieldName != null) {
			setFieldName(fieldName);
		}

		String fieldValues = (String)attributes.get("fieldValues");

		if (fieldValues != null) {
			setFieldValues(fieldValues);
		}

		Integer naProjectionSelectionSid = (Integer)attributes.get(
				"naProjectionSelectionSid");

		if (naProjectionSelectionSid != null) {
			setNaProjectionSelectionSid(naProjectionSelectionSid);
		}

		Integer naProjMasterSid = (Integer)attributes.get("naProjMasterSid");

		if (naProjMasterSid != null) {
			setNaProjMasterSid(naProjMasterSid);
		}
	}

	@Override
	public String getScreenName() {
		if (_screenName == null) {
			return StringPool.BLANK;
		}
		else {
			return _screenName;
		}
	}

	@Override
	public void setScreenName(String screenName) {
		_screenName = screenName;
	}

	@Override
	public String getFieldName() {
		if (_fieldName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldName;
		}
	}

	@Override
	public void setFieldName(String fieldName) {
		_fieldName = fieldName;
	}

	@Override
	public String getFieldValues() {
		if (_fieldValues == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldValues;
		}
	}

	@Override
	public void setFieldValues(String fieldValues) {
		_fieldValues = fieldValues;
	}

	@Override
	public int getNaProjectionSelectionSid() {
		return _naProjectionSelectionSid;
	}

	@Override
	public void setNaProjectionSelectionSid(int naProjectionSelectionSid) {
		_naProjectionSelectionSid = naProjectionSelectionSid;
	}

	@Override
	public int getNaProjMasterSid() {
		return _naProjMasterSid;
	}

	@Override
	public void setNaProjMasterSid(int naProjMasterSid) {
		_naProjMasterSid = naProjMasterSid;
	}

	@Override
	public NaProjectionSelection toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (NaProjectionSelection)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NaProjectionSelectionImpl naProjectionSelectionImpl = new NaProjectionSelectionImpl();

		naProjectionSelectionImpl.setScreenName(getScreenName());
		naProjectionSelectionImpl.setFieldName(getFieldName());
		naProjectionSelectionImpl.setFieldValues(getFieldValues());
		naProjectionSelectionImpl.setNaProjectionSelectionSid(getNaProjectionSelectionSid());
		naProjectionSelectionImpl.setNaProjMasterSid(getNaProjMasterSid());

		naProjectionSelectionImpl.resetOriginalValues();

		return naProjectionSelectionImpl;
	}

	@Override
	public int compareTo(NaProjectionSelection naProjectionSelection) {
		int primaryKey = naProjectionSelection.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof NaProjectionSelection)) {
			return false;
		}

		NaProjectionSelection naProjectionSelection = (NaProjectionSelection)obj;

		int primaryKey = naProjectionSelection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<NaProjectionSelection> toCacheModel() {
		NaProjectionSelectionCacheModel naProjectionSelectionCacheModel = new NaProjectionSelectionCacheModel();

		naProjectionSelectionCacheModel.screenName = getScreenName();

		String screenName = naProjectionSelectionCacheModel.screenName;

		if ((screenName != null) && (screenName.length() == 0)) {
			naProjectionSelectionCacheModel.screenName = null;
		}

		naProjectionSelectionCacheModel.fieldName = getFieldName();

		String fieldName = naProjectionSelectionCacheModel.fieldName;

		if ((fieldName != null) && (fieldName.length() == 0)) {
			naProjectionSelectionCacheModel.fieldName = null;
		}

		naProjectionSelectionCacheModel.fieldValues = getFieldValues();

		String fieldValues = naProjectionSelectionCacheModel.fieldValues;

		if ((fieldValues != null) && (fieldValues.length() == 0)) {
			naProjectionSelectionCacheModel.fieldValues = null;
		}

		naProjectionSelectionCacheModel.naProjectionSelectionSid = getNaProjectionSelectionSid();

		naProjectionSelectionCacheModel.naProjMasterSid = getNaProjMasterSid();

		return naProjectionSelectionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{screenName=");
		sb.append(getScreenName());
		sb.append(", fieldName=");
		sb.append(getFieldName());
		sb.append(", fieldValues=");
		sb.append(getFieldValues());
		sb.append(", naProjectionSelectionSid=");
		sb.append(getNaProjectionSelectionSid());
		sb.append(", naProjMasterSid=");
		sb.append(getNaProjMasterSid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.NaProjectionSelection");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>screenName</column-name><column-value><![CDATA[");
		sb.append(getScreenName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldName</column-name><column-value><![CDATA[");
		sb.append(getFieldName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldValues</column-name><column-value><![CDATA[");
		sb.append(getFieldValues());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>naProjectionSelectionSid</column-name><column-value><![CDATA[");
		sb.append(getNaProjectionSelectionSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>naProjMasterSid</column-name><column-value><![CDATA[");
		sb.append(getNaProjMasterSid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = NaProjectionSelection.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			NaProjectionSelection.class
		};
	private String _screenName;
	private String _fieldName;
	private String _fieldValues;
	private int _naProjectionSelectionSid;
	private int _naProjMasterSid;
	private NaProjectionSelection _escapedModel;
}