package com.stpl.app.model.impl;

import com.stpl.app.model.StNmDiscountProjection;
import com.stpl.app.model.StNmDiscountProjectionModel;
import com.stpl.app.service.persistence.StNmDiscountProjectionPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StNmDiscountProjection service. Represents a row in the &quot;ST_NM_DISCOUNT_PROJECTION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.StNmDiscountProjectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StNmDiscountProjectionImpl}.
 * </p>
 *
 * @author
 * @see StNmDiscountProjectionImpl
 * @see com.stpl.app.model.StNmDiscountProjection
 * @see com.stpl.app.model.StNmDiscountProjectionModel
 * @generated
 */
public class StNmDiscountProjectionModelImpl extends BaseModelImpl<StNmDiscountProjection>
    implements StNmDiscountProjectionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a st nm discount projection model instance should use the {@link com.stpl.app.model.StNmDiscountProjection} interface instead.
     */
    public static final String TABLE_NAME = "ST_NM_DISCOUNT_PROJECTION";
    public static final Object[][] TABLE_COLUMNS = {
            { "PROJECTION_RATE", Types.DOUBLE },
            { "ADJUSTMENT_VALUE", Types.DOUBLE },
            { "USER_ID", Types.INTEGER },
            { "LAST_MODIFIED_DATE", Types.TIMESTAMP },
            { "DISCOUNT_RATE", Types.DOUBLE },
            { "PROJECTION_SALES", Types.DOUBLE },
            { "ADJUSTMENT_TYPE", Types.VARCHAR },
            { "ADJUSTMENT_BASIS", Types.VARCHAR },
            { "PERIOD_SID", Types.INTEGER },
            { "ADJUSTMENT_METHODOLOGY", Types.VARCHAR },
            { "PROJECTION_DETAILS_SID", Types.INTEGER },
            { "RS_MODEL_SID", Types.INTEGER },
            { "SESSION_ID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table ST_NM_DISCOUNT_PROJECTION (PROJECTION_RATE DOUBLE,ADJUSTMENT_VALUE DOUBLE,USER_ID INTEGER not null,LAST_MODIFIED_DATE DATE null,DISCOUNT_RATE DOUBLE,PROJECTION_SALES DOUBLE,ADJUSTMENT_TYPE VARCHAR(75) null,ADJUSTMENT_BASIS VARCHAR(75) null,PERIOD_SID INTEGER not null IDENTITY,ADJUSTMENT_METHODOLOGY VARCHAR(75) null,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,RS_MODEL_SID INTEGER not null IDENTITY,SESSION_ID INTEGER not null,primary key (USER_ID, PERIOD_SID, PROJECTION_DETAILS_SID, RS_MODEL_SID, SESSION_ID))";
    public static final String TABLE_SQL_DROP = "drop table ST_NM_DISCOUNT_PROJECTION";
    public static final String ORDER_BY_JPQL = " ORDER BY stNmDiscountProjection.id.userId ASC, stNmDiscountProjection.id.periodSid ASC, stNmDiscountProjection.id.projectionDetailsSid ASC, stNmDiscountProjection.id.rsModelSid ASC, stNmDiscountProjection.id.sessionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ST_NM_DISCOUNT_PROJECTION.USER_ID ASC, ST_NM_DISCOUNT_PROJECTION.PERIOD_SID ASC, ST_NM_DISCOUNT_PROJECTION.PROJECTION_DETAILS_SID ASC, ST_NM_DISCOUNT_PROJECTION.RS_MODEL_SID ASC, ST_NM_DISCOUNT_PROJECTION.SESSION_ID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.StNmDiscountProjection"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.StNmDiscountProjection"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.StNmDiscountProjection"));
    private static ClassLoader _classLoader = StNmDiscountProjection.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            StNmDiscountProjection.class
        };
    private double _projectionRate;
    private double _adjustmentValue;
    private int _userId;
    private Date _lastModifiedDate;
    private double _discountRate;
    private double _projectionSales;
    private String _adjustmentType;
    private String _adjustmentBasis;
    private int _periodSid;
    private String _adjustmentMethodology;
    private int _projectionDetailsSid;
    private int _rsModelSid;
    private int _sessionId;
    private StNmDiscountProjection _escapedModel;

    public StNmDiscountProjectionModelImpl() {
    }

    @Override
    public StNmDiscountProjectionPK getPrimaryKey() {
        return new StNmDiscountProjectionPK(_userId, _periodSid,
            _projectionDetailsSid, _rsModelSid, _sessionId);
    }

    @Override
    public void setPrimaryKey(StNmDiscountProjectionPK primaryKey) {
        setUserId(primaryKey.userId);
        setPeriodSid(primaryKey.periodSid);
        setProjectionDetailsSid(primaryKey.projectionDetailsSid);
        setRsModelSid(primaryKey.rsModelSid);
        setSessionId(primaryKey.sessionId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new StNmDiscountProjectionPK(_userId, _periodSid,
            _projectionDetailsSid, _rsModelSid, _sessionId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((StNmDiscountProjectionPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return StNmDiscountProjection.class;
    }

    @Override
    public String getModelClassName() {
        return StNmDiscountProjection.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("projectionRate", getProjectionRate());
        attributes.put("adjustmentValue", getAdjustmentValue());
        attributes.put("userId", getUserId());
        attributes.put("lastModifiedDate", getLastModifiedDate());
        attributes.put("discountRate", getDiscountRate());
        attributes.put("projectionSales", getProjectionSales());
        attributes.put("adjustmentType", getAdjustmentType());
        attributes.put("adjustmentBasis", getAdjustmentBasis());
        attributes.put("periodSid", getPeriodSid());
        attributes.put("adjustmentMethodology", getAdjustmentMethodology());
        attributes.put("projectionDetailsSid", getProjectionDetailsSid());
        attributes.put("rsModelSid", getRsModelSid());
        attributes.put("sessionId", getSessionId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Double projectionRate = (Double) attributes.get("projectionRate");

        if (projectionRate != null) {
            setProjectionRate(projectionRate);
        }

        Double adjustmentValue = (Double) attributes.get("adjustmentValue");

        if (adjustmentValue != null) {
            setAdjustmentValue(adjustmentValue);
        }

        Integer userId = (Integer) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date lastModifiedDate = (Date) attributes.get("lastModifiedDate");

        if (lastModifiedDate != null) {
            setLastModifiedDate(lastModifiedDate);
        }

        Double discountRate = (Double) attributes.get("discountRate");

        if (discountRate != null) {
            setDiscountRate(discountRate);
        }

        Double projectionSales = (Double) attributes.get("projectionSales");

        if (projectionSales != null) {
            setProjectionSales(projectionSales);
        }

        String adjustmentType = (String) attributes.get("adjustmentType");

        if (adjustmentType != null) {
            setAdjustmentType(adjustmentType);
        }

        String adjustmentBasis = (String) attributes.get("adjustmentBasis");

        if (adjustmentBasis != null) {
            setAdjustmentBasis(adjustmentBasis);
        }

        Integer periodSid = (Integer) attributes.get("periodSid");

        if (periodSid != null) {
            setPeriodSid(periodSid);
        }

        String adjustmentMethodology = (String) attributes.get(
                "adjustmentMethodology");

        if (adjustmentMethodology != null) {
            setAdjustmentMethodology(adjustmentMethodology);
        }

        Integer projectionDetailsSid = (Integer) attributes.get(
                "projectionDetailsSid");

        if (projectionDetailsSid != null) {
            setProjectionDetailsSid(projectionDetailsSid);
        }

        Integer rsModelSid = (Integer) attributes.get("rsModelSid");

        if (rsModelSid != null) {
            setRsModelSid(rsModelSid);
        }

        Integer sessionId = (Integer) attributes.get("sessionId");

        if (sessionId != null) {
            setSessionId(sessionId);
        }
    }

    @Override
    public double getProjectionRate() {
        return _projectionRate;
    }

    @Override
    public void setProjectionRate(double projectionRate) {
        _projectionRate = projectionRate;
    }

    @Override
    public double getAdjustmentValue() {
        return _adjustmentValue;
    }

    @Override
    public void setAdjustmentValue(double adjustmentValue) {
        _adjustmentValue = adjustmentValue;
    }

    @Override
    public int getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(int userId) {
        _userId = userId;
    }

    @Override
    public Date getLastModifiedDate() {
        return _lastModifiedDate;
    }

    @Override
    public void setLastModifiedDate(Date lastModifiedDate) {
        _lastModifiedDate = lastModifiedDate;
    }

    @Override
    public double getDiscountRate() {
        return _discountRate;
    }

    @Override
    public void setDiscountRate(double discountRate) {
        _discountRate = discountRate;
    }

    @Override
    public double getProjectionSales() {
        return _projectionSales;
    }

    @Override
    public void setProjectionSales(double projectionSales) {
        _projectionSales = projectionSales;
    }

    @Override
    public String getAdjustmentType() {
        if (_adjustmentType == null) {
            return StringPool.BLANK;
        } else {
            return _adjustmentType;
        }
    }

    @Override
    public void setAdjustmentType(String adjustmentType) {
        _adjustmentType = adjustmentType;
    }

    @Override
    public String getAdjustmentBasis() {
        if (_adjustmentBasis == null) {
            return StringPool.BLANK;
        } else {
            return _adjustmentBasis;
        }
    }

    @Override
    public void setAdjustmentBasis(String adjustmentBasis) {
        _adjustmentBasis = adjustmentBasis;
    }

    @Override
    public int getPeriodSid() {
        return _periodSid;
    }

    @Override
    public void setPeriodSid(int periodSid) {
        _periodSid = periodSid;
    }

    @Override
    public String getAdjustmentMethodology() {
        if (_adjustmentMethodology == null) {
            return StringPool.BLANK;
        } else {
            return _adjustmentMethodology;
        }
    }

    @Override
    public void setAdjustmentMethodology(String adjustmentMethodology) {
        _adjustmentMethodology = adjustmentMethodology;
    }

    @Override
    public int getProjectionDetailsSid() {
        return _projectionDetailsSid;
    }

    @Override
    public void setProjectionDetailsSid(int projectionDetailsSid) {
        _projectionDetailsSid = projectionDetailsSid;
    }

    @Override
    public int getRsModelSid() {
        return _rsModelSid;
    }

    @Override
    public void setRsModelSid(int rsModelSid) {
        _rsModelSid = rsModelSid;
    }

    @Override
    public int getSessionId() {
        return _sessionId;
    }

    @Override
    public void setSessionId(int sessionId) {
        _sessionId = sessionId;
    }

    @Override
    public StNmDiscountProjection toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (StNmDiscountProjection) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        StNmDiscountProjectionImpl stNmDiscountProjectionImpl = new StNmDiscountProjectionImpl();

        stNmDiscountProjectionImpl.setProjectionRate(getProjectionRate());
        stNmDiscountProjectionImpl.setAdjustmentValue(getAdjustmentValue());
        stNmDiscountProjectionImpl.setUserId(getUserId());
        stNmDiscountProjectionImpl.setLastModifiedDate(getLastModifiedDate());
        stNmDiscountProjectionImpl.setDiscountRate(getDiscountRate());
        stNmDiscountProjectionImpl.setProjectionSales(getProjectionSales());
        stNmDiscountProjectionImpl.setAdjustmentType(getAdjustmentType());
        stNmDiscountProjectionImpl.setAdjustmentBasis(getAdjustmentBasis());
        stNmDiscountProjectionImpl.setPeriodSid(getPeriodSid());
        stNmDiscountProjectionImpl.setAdjustmentMethodology(getAdjustmentMethodology());
        stNmDiscountProjectionImpl.setProjectionDetailsSid(getProjectionDetailsSid());
        stNmDiscountProjectionImpl.setRsModelSid(getRsModelSid());
        stNmDiscountProjectionImpl.setSessionId(getSessionId());

        stNmDiscountProjectionImpl.resetOriginalValues();

        return stNmDiscountProjectionImpl;
    }

    @Override
    public int compareTo(StNmDiscountProjection stNmDiscountProjection) {
        StNmDiscountProjectionPK primaryKey = stNmDiscountProjection.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof StNmDiscountProjection)) {
            return false;
        }

        StNmDiscountProjection stNmDiscountProjection = (StNmDiscountProjection) obj;

        StNmDiscountProjectionPK primaryKey = stNmDiscountProjection.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<StNmDiscountProjection> toCacheModel() {
        StNmDiscountProjectionCacheModel stNmDiscountProjectionCacheModel = new StNmDiscountProjectionCacheModel();

        stNmDiscountProjectionCacheModel.projectionRate = getProjectionRate();

        stNmDiscountProjectionCacheModel.adjustmentValue = getAdjustmentValue();

        stNmDiscountProjectionCacheModel.userId = getUserId();

        Date lastModifiedDate = getLastModifiedDate();

        if (lastModifiedDate != null) {
            stNmDiscountProjectionCacheModel.lastModifiedDate = lastModifiedDate.getTime();
        } else {
            stNmDiscountProjectionCacheModel.lastModifiedDate = Long.MIN_VALUE;
        }

        stNmDiscountProjectionCacheModel.discountRate = getDiscountRate();

        stNmDiscountProjectionCacheModel.projectionSales = getProjectionSales();

        stNmDiscountProjectionCacheModel.adjustmentType = getAdjustmentType();

        String adjustmentType = stNmDiscountProjectionCacheModel.adjustmentType;

        if ((adjustmentType != null) && (adjustmentType.length() == 0)) {
            stNmDiscountProjectionCacheModel.adjustmentType = null;
        }

        stNmDiscountProjectionCacheModel.adjustmentBasis = getAdjustmentBasis();

        String adjustmentBasis = stNmDiscountProjectionCacheModel.adjustmentBasis;

        if ((adjustmentBasis != null) && (adjustmentBasis.length() == 0)) {
            stNmDiscountProjectionCacheModel.adjustmentBasis = null;
        }

        stNmDiscountProjectionCacheModel.periodSid = getPeriodSid();

        stNmDiscountProjectionCacheModel.adjustmentMethodology = getAdjustmentMethodology();

        String adjustmentMethodology = stNmDiscountProjectionCacheModel.adjustmentMethodology;

        if ((adjustmentMethodology != null) &&
                (adjustmentMethodology.length() == 0)) {
            stNmDiscountProjectionCacheModel.adjustmentMethodology = null;
        }

        stNmDiscountProjectionCacheModel.projectionDetailsSid = getProjectionDetailsSid();

        stNmDiscountProjectionCacheModel.rsModelSid = getRsModelSid();

        stNmDiscountProjectionCacheModel.sessionId = getSessionId();

        return stNmDiscountProjectionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{projectionRate=");
        sb.append(getProjectionRate());
        sb.append(", adjustmentValue=");
        sb.append(getAdjustmentValue());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", lastModifiedDate=");
        sb.append(getLastModifiedDate());
        sb.append(", discountRate=");
        sb.append(getDiscountRate());
        sb.append(", projectionSales=");
        sb.append(getProjectionSales());
        sb.append(", adjustmentType=");
        sb.append(getAdjustmentType());
        sb.append(", adjustmentBasis=");
        sb.append(getAdjustmentBasis());
        sb.append(", periodSid=");
        sb.append(getPeriodSid());
        sb.append(", adjustmentMethodology=");
        sb.append(getAdjustmentMethodology());
        sb.append(", projectionDetailsSid=");
        sb.append(getProjectionDetailsSid());
        sb.append(", rsModelSid=");
        sb.append(getRsModelSid());
        sb.append(", sessionId=");
        sb.append(getSessionId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.StNmDiscountProjection");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>projectionRate</column-name><column-value><![CDATA[");
        sb.append(getProjectionRate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustmentValue</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
        sb.append(getLastModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discountRate</column-name><column-value><![CDATA[");
        sb.append(getDiscountRate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionSales</column-name><column-value><![CDATA[");
        sb.append(getProjectionSales());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustmentType</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustmentBasis</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentBasis());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>periodSid</column-name><column-value><![CDATA[");
        sb.append(getPeriodSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustmentMethodology</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentMethodology());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rsModelSid</column-name><column-value><![CDATA[");
        sb.append(getRsModelSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sessionId</column-name><column-value><![CDATA[");
        sb.append(getSessionId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
