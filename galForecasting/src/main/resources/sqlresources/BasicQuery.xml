<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<sql>
    <entity id="getDeleteQuery">
        <query> 
            <![CDATA[
                DECLARE @PROJECTION AS TABLE 
  ( 
     ID                     INT IDENTITY (1, 1), 
     PROJECTION_MASTER_SID  INT, 
     PROJECTION_DETAILS_SID INT 
  ) 
INSERT INTO @PROJECTION  
            (PROJECTION_MASTER_SID, 
             PROJECTION_DETAILS_SID) 
SELECT A.PROJECTION_MASTER_SID, 
       B.PROJECTION_DETAILS_SID 
FROM   PROJECTION_MASTER A 
JOIN   PROJECTION_DETAILS B ON A.PROJECTION_MASTER_SID = B.PROJECTION_MASTER_SID 
WHERE  SAVE_FLAG = 'false' 
       AND FORECASTING_TYPE = '@FORCASTING_TYPE' 
       AND CREATED_DATE < Getdate() - 1; 
            ]]>
        </query>
    </entity>
    
    <entity id="getDeleteQueryReturns">
        <query> 
                    <![CDATA[
                        DECLARE @PROJECTION AS TABLE 
          ( 
             ID                     INT IDENTITY (1, 1), 
             PROJECTION_MASTER_SID  INT, 
             RETURNS_DETAILS_SID INT 
          ) 
            INSERT INTO @PROJECTION  
                        (PROJECTION_MASTER_SID, 
                         RETURNS_DETAILS_SID) 
            SELECT A.PROJECTION_MASTER_SID,
                   B.RETURNS_DETAILS_SID
            FROM   PROJECTION_MASTER A
            JOIN  RETURNS_DETAILS  B ON A.PROJECTION_MASTER_SID = B.PROJECTION_MASTER_SID
            WHERE  SAVE_FLAG = 'false'
                   AND FORECASTING_TYPE = 'Returns'
                   AND CREATED_DATE < Getdate() - 1;
                        ]]>
        </query>
    </entity>
    
    <entity id="deleteReturnsDetail">
        <query> 
                    <![CDATA[
                        DELETE FROM dbo.RETURNS_DETAILS WHERE PROJECTION_MASTER_SID = @PROJECTIONSID;
                    ]]>
        </query>
    </entity>
    
    <entity id="deleteReturnsMap">
        <query> 
                    <![CDATA[
                        DELETE FROM dbo.RETURNS_MAP WHERE PROJECTION_MASTER_SID = @PROJECTIONSID;
                    ]]>
        </query>
    </entity>
    
    <entity id="getDeleteQueryAccural">
        <query> 
                    <![CDATA[
                        DECLARE @PROJECTION AS TABLE 
          ( 
             ID                     INT IDENTITY (1, 1), 
             PROJECTION_MASTER_SID  INT, 
             ACCRUAL_PROJ_DETAILS_SID INT 
          ) 
            INSERT INTO @PROJECTION  
                        (PROJECTION_MASTER_SID, 
                         ACCRUAL_PROJ_DETAILS_SID) 
            SELECT A.PROJECTION_MASTER_SID,
                   B.RETURNS_DETAILS_SID
            FROM   PROJECTION_MASTER A
            JOIN  RETURNS_DETAILS  B ON A.PROJECTION_MASTER_SID = B.PROJECTION_MASTER_SID
            WHERE  SAVE_FLAG = 'false'
                   AND FORECASTING_TYPE = 'AccrualRateProjection'
                   AND CREATED_DATE < Getdate() - 1;
                        ]]>
        </query>
    </entity>
   
    <entity id="getforecastDeleteProjectionQuery">
        <query> 
            <![CDATA[
        DELETE A FROM @TABLE_NAME A JOIN (SELECT DISTINCT PROJECTION_MASTER_SID FROM @PROJECTION)B ON A.PROJECTION_MASTER_SID=B.PROJECTION_MASTER_SID
         ]]>
        </query>
    </entity>
    
    <entity id="getforecastDeleteDetailsQuery">
        <query> 
            <![CDATA[
            DELETE T FROM @TABLE_NAME T JOIN @PROJECTION A ON A.PROJECTION_DETAILS_SID = T.PROJECTION_DETAILS_SID 
           ]]>
        </query> 
    </entity>
    
    <entity id="getforecastDeleteDetailsQueryAccural">
        <query> 
            <![CDATA[
            DELETE T FROM @TABLE_NAME T JOIN @PROJECTION A ON A.ACCRUAL_PROJ_DETAILS_SID = T.ACCRUAL_PROJ_DETAILS_SID 
           ]]>
        </query> 
    </entity>
    
    <entity id="getforecastDeleteDetailsQueryReturns">
        <query> 
            <![CDATA[
            DELETE T FROM @TABLE_NAME T JOIN @PROJECTION A ON A.RETURNS_DETAILS_SID = T.RETURNS_DETAILS_SID 
           ]]>
        </query> 
    </entity>
    
    <entity id="getProjectionDetailsQuery">
        <query>   
            <![CDATA[ 
            SELECT DISTINCT PD.projection_details_sid
FROM   projection_details PD,
       (SELECT CCPMAP.ccp_details_sid
        FROM   (SELECT RLD.hierarchy_no,
                       CCP.ccp_details_sid
                FROM   relationship_level_definition RLD
                       JOIN ccp_map CCP
                         ON RLD.relationship_level_sid =
                            CCP.relationship_level_sid
                       JOIN projection_details PD
                         ON PD.ccp_details_sid = CCP.ccp_details_sid
                            AND PD.projection_master_sid = @PROJECTION_SID
                       JOIN @HIERARCHY_TABLE PCH
                         ON PCH.relationship_level_sid =
                            RLD.relationship_level_sid
                            AND PCH.projection_master_sid = @PROJECTION_SID) CCPMAP
               JOIN (SELECT RLD1.hierarchy_no
                     FROM   relationship_level_definition RLD1
                            JOIN @HIERARCHY_TABLE PCH
                              ON PCH.relationship_level_sid =
                                 RLD1.relationship_level_sid
                                 AND PCH.projection_master_sid = @PROJECTION_SID
                                 AND RLD1.hierarchy_no LIKE '%') HLD
                 ON CCPMAP.hierarchy_no LIKE HLD.hierarchy_no + '%'
        WHERE  HLD.hierarchy_no IN( @HIERARCHYNO )) CCP
WHERE  PD.projection_master_sid =  @PROJECTION_SID
       AND PD.ccp_details_sid = CCP.ccp_details_sid  
               ]]>
        </query> 
    </entity>
    
    <entity id="deleteTemplate">
        <query>   
             <![CDATA[ 
                DELETE FROM @TABLE_NAME where PROJECTION_DETAILS_SID in (@PD_SID)
            ]]>
        </query> 
    </entity>  
            
   
    <entity id="getProdGroupSearch">
        <query>   
       <![CDATA[
                   ;WITH CTE_MAIN
     AS (SELECT IG.ITEM_GROUP_SID,
                IG.ITEM_GROUP_NO,
                IG.ITEM_GROUP_NAME,
                CM.COMPANY_NAME,
                IG.VERSION_NO,
                IG.ITEM_GROUP_DESCRIPTION,
                IGD.ITEM_MASTER_SID
         FROM   ITEM_GROUP IG,
                COMPANY_MASTER CM,
                ITEM_GROUP_DETAILS IGD
         WHERE  IG.COMPANY_MASTER_SID = CM.COMPANY_MASTER_SID
                AND IGD.ITEM_GROUP_SID = IG.ITEM_GROUP_SID
                AND IG.ITEM_GROUP_NO LIKE '?'
                AND IG.ITEM_GROUP_NAME LIKE '?'
                
                @FILTER@),
     COUNT_CTE
     AS (SELECT ITEM_GROUP_SID,
                CNT
         FROM   (SELECT ROW_NUMBER()
                          OVER (
                            PARTITION BY ITEM_GROUP_SID
                            ORDER BY ITEM_GROUP_SID)     RN,
                        COUNT(ITEM_MASTER_SID)
                          OVER (
                            PARTITION BY ITEM_GROUP_SID) CNT,
                        ITEM_GROUP_SID,
                        ITEM_MASTER_SID
                 FROM   CTE_MAIN
                 ?)A
         WHERE  RN = 1),
     ITM_GROUP
     AS (SELECT CNT,
                ITEM_GROUP_SID,
                ITEM_GROUP_NO,
                ITEM_GROUP_NAME,
                COMPANY_NAME,
                VERSION_NO,
                ITEM_GROUP_DESCRIPTION
         FROM   (SELECT ROW_NUMBER()
                          OVER (
                            PARTITION BY ITEM_GROUP_SID
                            ORDER BY ITEM_GROUP_SID)     RN,
                        COUNT(ITEM_MASTER_SID)
                          OVER (
                            PARTITION BY ITEM_GROUP_SID) CNT,
                        ITEM_GROUP_SID,
                        ITEM_GROUP_NO,
                        ITEM_GROUP_NAME,
                        COMPANY_NAME,
                        VERSION_NO,
                        ITEM_GROUP_DESCRIPTION
                 FROM   CTE_MAIN)A
         WHERE  RN = 1)
SELECT @SELECTION@
FROM   ITM_GROUP IG
       JOIN COUNT_CTE C
         ON IG.ITEM_GROUP_SID = C.ITEM_GROUP_SID
            AND C.CNT = IG.CNT
@ORDER_BY@  
		]]>
        </query> 
    </entity>  
    <entity id="getCustGroupSearch">
        <query>   
       <![CDATA[
           ;WITH CTE_MAIN
     AS (SELECT IG.COMPANY_GROUP_SID,
                IG.COMPANY_GROUP_NO,
                IG.COMPANY_GROUP_NAME,
                CM.COMPANY_NAME,
                IG.VERSION_NO,
                IG.COMPANY_GROUP_DESCRIPTION,
                IGD.COMPANY_MASTER_SID
         FROM   COMPANY_GROUP IG
                INNER JOIN COMPANY_GROUP_DETAILS IGD
                        ON IGD.COMPANY_GROUP_SID = IG.COMPANY_GROUP_SID
                INNER JOIN COMPANY_MASTER CM
                        ON IGD.COMPANY_MASTER_SID = CM.COMPANY_MASTER_SID
         WHERE  IG.COMPANY_GROUP_NO LIKE '?'
            AND IG.COMPANY_GROUP_NAME LIKE '?'
             
    @FILTER@),
     COUNT_CTE
     AS (SELECT COMPANY_GROUP_SID,
                CNT
         FROM   (SELECT Row_number()
                          OVER (
                            PARTITION BY COMPANY_GROUP_SID
                            ORDER BY COMPANY_GROUP_SID)     RN,
                        Count(COMPANY_MASTER_SID)
                          OVER (
                            PARTITION BY COMPANY_GROUP_SID) CNT,
                        COMPANY_GROUP_SID,
                        COMPANY_MASTER_SID
                 FROM   CTE_MAIN
                 ? )A
         WHERE  RN = 1),
     ITM_GROUP
     AS (SELECT CNT,
                COMPANY_GROUP_SID,
                COMPANY_GROUP_NO,
                COMPANY_GROUP_NAME,
                COMPANY_NAME,
                VERSION_NO,
                COMPANY_GROUP_DESCRIPTION
         FROM   (SELECT Row_number()
                          OVER (
                            PARTITION BY COMPANY_GROUP_SID
                            ORDER BY COMPANY_GROUP_SID)     RN,
                        Count(COMPANY_MASTER_SID)
                          OVER (
                            PARTITION BY COMPANY_GROUP_SID) CNT,
                        COMPANY_GROUP_SID,
                        COMPANY_GROUP_NO,
                        COMPANY_GROUP_NAME,
                        COMPANY_NAME,
                        VERSION_NO,
                        COMPANY_GROUP_DESCRIPTION
                 FROM   CTE_MAIN)A
         WHERE  RN = 1)
SELECT @SELECTION@
FROM   ITM_GROUP IG
       JOIN COUNT_CTE C
         ON IG.COMPANY_GROUP_SID = C.COMPANY_GROUP_SID
            AND C.CNT = IG.CNT
@ORDER_BY@ 
		]]>
        </query> 
    </entity>  

    <entity id="getDeleteCvd">
        <query>   
       <![CDATA[
           delete CCM from dbo.CUSTOM_CCP_MAP CCM

            Join CUSTOM_VIEW_DETAILS CVD ON CVD.CUSTOM_VIEW_DETAILS_SID=CCM.CUSTOM_VIEW_DETAILS_SID

                AND CVD.CUSTOM_VIEW_MASTER_SID IN(SELECT CUSTOM_VIEW_MASTER_SID

                                              FROM   CUSTOM_VIEW_MASTER cvm

                                                     JOIN @PROJECTION B

                                                       ON B.PROJECTION_MASTER_SID = cvm.PROJECTION_MASTER_SID);

 

                delete CVD from dbo.CUSTOM_VIEW_DETAILS CVD where

                CVD.CUSTOM_VIEW_MASTER_SID IN(SELECT CUSTOM_VIEW_MASTER_SID

                                                              FROM   CUSTOM_VIEW_MASTER cvm

                                                     JOIN @PROJECTION B

                                                       ON B.PROJECTION_MASTER_SID = cvm.PROJECTION_MASTER_SID);

		]]>
        </query> 
    </entity>  

    <entity id="getDeleteCvdMandated">
        <query>   
       <![CDATA[
           
                delete CVD from dbo.CUSTOM_VIEW_DETAILS CVD where

                CVD.CUSTOM_VIEW_MASTER_SID IN(SELECT CUSTOM_VIEW_MASTER_SID

                                                              FROM   CUSTOM_VIEW_MASTER cvm

                                                     JOIN @PROJECTION B

                                                       ON B.PROJECTION_MASTER_SID = cvm.PROJECTION_MASTER_SID);

		]]>
        </query> 
    </entity>  
    
    <entity id="getAlternateHistoryProjectionTotal">
        <query> 
            <![CDATA[
            
      DECLARE
        @PROJECTION_DETAILS_SID VARCHAR(MAX)='[@PROJECTION_DETAILS_SID]',
        @FREQUENCY              VARCHAR(20) ='[@Frequency]',
        @VIEW                   VARCHAR(50) ='[@@VIEW]',
        @USER_ID                INT=[@USER_ID],
        @SESSION_ID             INT=[@@SESSION_ID],
		@START            INT=[@START_MONTH],
		@START_YEAR             INT=[@START_YEAR],
		@END                INT=[@END_MONTH],
		@END_YEAR               INT=[@END_YEAR],
		@START_DATE             DATETIME,
		@END_DATE               DATETIME
		

 DECLARE 

 @ITEM_DETAILS     UDT_ITEM
,@START_PERIOD_SID INT 
,@END_PERIOD_SID   INT 
,@FORECAST_NAME    VARCHAR(50)
,@FORECAST_VERSION VARCHAR(15)



BEGIN



SET @FREQUENCY = LEFT(@FREQUENCY,1)


SET @START  = CASE WHEN @FREQUENCY='M' THEN @START
                   WHEN @FREQUENCY='Q' THEN CASE WHEN  @START =1         THEN 1        
                                                 WHEN  @START =2         THEN 4
						                         WHEN  @START =3         THEN 7
						                         ELSE  10
						                         END
                   WHEN @FREQUENCY='S' THEN CASE WHEN  @START =1         THEN 1        
                                                 ELSE  7
						                         END
                   ELSE 1 END
						                        
    


SET @START_DATE = CONVERT (DATETIME, CONVERT(VARCHAR, @START )+'-01-'+CONVERT(VARCHAR , @START_YEAR))
SET @END_DATE   = CONVERT (DATETIME, CONVERT(VARCHAR, @END   )+'-01-'+CONVERT(VARCHAR,  @END_YEAR  ))



SET @START_PERIOD_SID =  (SELECT PERIOD_SID FROM PERIOD P WHERE P.PERIOD_DATE = DATEADD(MM, DATEDIFF(MM, 0, @START_DATE), 0))
SET @END_PERIOD_SID   =  (SELECT PERIOD_SID FROM PERIOD P WHERE P.PERIOD_DATE = DATEADD(MM, DATEDIFF(MM, 0, @END_DATE)  , 0))


------------------------------------------------------AGGREGATION STARTS -------------------------------------------------------------


IF OBJECT_ID('TEMPDB.DBO.#ULTIMATE', 'U') IS NOT NULL
	DROP TABLE #ULTIMATE;

 SELECT 
	     SDAHA.PROJECTION_DETAILS_SID
		,SDAHA.RS_MODEL_SID
		,(SDAHA.PERIOD_SID) AS PERIOD_SID
		,P.YEAR
		, SUM(SDAHA.ACTUAL_AMOUNT) AS  SUM_ACTUAL_AMOUNT
	    , SUM(SDAHA.PROJECTION_AMOUNT) AS SUM_PROJECTION_AMOUNT 
		
		INTO #ULTIMATE 
	FROM ST_DISC_ALTERNATE_HIST_ALLOCATION SDAHA
	JOIN PROJECTION_DETAILS PD ON SDAHA.PROJECTION_DETAILS_SID = PD.PROJECTION_DETAILS_SID
	JOIN CCP_DETAILS CD ON CD.CCP_DETAILS_SID = PD.CCP_DETAILS_SID
	JOIN PERIOD P ON P.PERIOD_SID = SDAHA.PERIOD_SID
        AND SDAHA.PERIOD_SID = SDAHA.PERIOD_SID
		AND PD.PROJECTION_DETAILS_SID IN (SELECT U.TOKEN FROM  UDF_SPLITSTRING(@PROJECTION_DETAILS_SID, ',') U)
		AND SDAHA.USER_ID = @USER_ID
		AND SDAHA.SESSION_ID = @SESSION_ID
		AND P.PERIOD_SID BETWEEN @START_PERIOD_SID AND @END_PERIOD_SID


    GROUP BY SDAHA.PROJECTION_DETAILS_SID
	        ,SDAHA.RS_MODEL_SID
			,SDAHA.PERIOD_SID
			,P.YEAR
			,CASE
             WHEN @FREQUENCY = 'M' THEN P.MONTH
             WHEN @FREQUENCY = 'Q' THEN P.QUARTER
             WHEN @FREQUENCY = 'S' THEN P.SEMI_ANNUAL
             ELSE P.YEAR
             END
			,SDAHA.ACTUAL_AMOUNT
			,SDAHA.PROJECTION_AMOUNT
------------------------------------------------------------VIEWS-------------------------------------------------------------------
IF OBJECT_ID('TEMPDB.DBO.#FINAL', 'U') IS NOT NULL
  DROP TABLE #FINAL;

SELECT CASE WHEN @VIEW = 'PIVOT' THEN NULL
            ELSE P.YEAR
                        END AS YEAR,
           CASE WHEN  @VIEW = 'PIVOT' THEN NULL
           ELSE
                CASE
         WHEN @FREQUENCY = 'M' THEN P.MONTH
         WHEN @FREQUENCY = 'Q' THEN P.QUARTER
         WHEN @FREQUENCY = 'S' THEN P.SEMI_ANNUAL
         ELSE P.YEAR
       END
       END AS PERIOD,

	   CASE WHEN @VIEW = 'PIVOT' THEN NULL  ELSE (SELECT RS_NAME FROM RS_MODEL WHERE RS_MODEL_SID = U.RS_MODEL_SID ) END AS REBATE_NAME , 

       SUM(U.SUM_ACTUAL_AMOUNT )       AS ACTUAL_AMOUNT,
       SUM(U.SUM_PROJECTION_AMOUNT )   AS PROJECTION_AMOUNT

           INTO #FINAL

FROM   #ULTIMATE U
JOIN PERIOD P ON U.PERIOD_SID = P.PERIOD_SID 
WHERE  U.PROJECTION_DETAILS_SID IN (SELECT U.TOKEN FROM   UDF_SPLITSTRING(@PROJECTION_DETAILS_SID, ',') U)


GROUP  BY   P.YEAR, CASE
            WHEN @FREQUENCY = 'M' THEN P.MONTH
            WHEN @FREQUENCY = 'Q' THEN P.QUARTER
            WHEN @FREQUENCY = 'S' THEN P.SEMI_ANNUAL
            ELSE P.YEAR
          END, RS_MODEL_SID

ORDER BY CASE WHEN @VIEW = 'PIVOT' THEN NULL  ELSE P.YEAR END ,
         CASE WHEN @VIEW = 'PIVOT' THEN NULL  ELSE
         CASE
            WHEN @FREQUENCY = 'M' THEN P.MONTH
            WHEN @FREQUENCY = 'Q' THEN P.QUARTER
            WHEN @FREQUENCY = 'S' THEN P.SEMI_ANNUAL
            ELSE P.YEAR
          END
                  END

IF @VIEW = 'PIVOT'
SELECT  SUM(ACTUAL_AMOUNT) AS ACTUAL_AMOUNT, SUM(PROJECTION_AMOUNT) AS PROJECTION_AMOUNT FROM #FINAL GROUP BY YEAR, PERIOD
ELSE
SELECT * FROM #FINAL ORDER BY YEAR,PERIOD
------------------------------------------------------------------------------------------------------------------------------------
END
 ]]>
        </query>
    </entity>
    
    
    <entity id="deleteMandatedCVD">
        <query>   
       <![CDATA[
           
                delete CVD from dbo.CUSTOM_VIEW_DETAILS CVD where

                CVD.CUSTOM_VIEW_MASTER_SID IN( Select PROJECTION_MASTER_SID from CUSTOM_VIEW_MASTER where PROJECTION_MASTER_SID = @PROJECTIONSID);
                
                DELETE FROM dbo.CUSTOM_VIEW_MASTER WHERE PROJECTION_MASTER_SID = @PROJECTIONSID;

		]]>
        </query> 
    </entity>  
    
    
    <entity id="deleteNonMandatedCVD">
        <query>   
       <![CDATA[
           
                DELETE
                FROM   custom_relationship_builder
                WHERE  custom_view_details_sid IN (SELECT custom_view_details_sid
                                                   FROM   custom_view_details
                                                   WHERE  custom_view_master_sid IN (SELECT custom_view_master_sid
                                                                                     FROM   custom_view_master
                                                                                     WHERE  projection_master_sid = @PROJECTIONSID)) ;
                DELETE
                FROM   custom_ccp_map
                WHERE  custom_view_details_sid IN (SELECT custom_view_details_sid
                                                   FROM   custom_view_details
                                                   WHERE  custom_view_master_sid IN (SELECT custom_view_master_sid
                                                                                     FROM   custom_view_master
                                                                                     WHERE  projection_master_sid = @PROJECTIONSID));
                DELETE
                FROM   custom_view_details
                WHERE  custom_view_master_sid IN (SELECT custom_view_master_sid
                                                  FROM   custom_view_master
                                                  WHERE  projection_master_sid = @PROJECTIONSID);

                DELETE
                FROM   custom_view_master
                WHERE  projection_master_sid = @PROJECTIONSID;


		]]>
        </query> 
    </entity> 
    <entity id="ppa-details-generate">
        <query> 
            <![CDATA[
SELECT p.year
       ,p.MONTH
       ,ipq.PRICING_QUALIFIER price_protection_price_type
       ,snpp.Price Price
       ,snpp.PriceChange PriceChange
       ,snpp.PROJECTION_MAP map
       ,snpp.TotalDeductions TotalDeductions
       ,snpp.PROJECTION_DISCOUNT_UNITS units
       ,snpp.deduction_per_unit projection_deduction_per_unit
       ,snpp.NetPrice NetPrice
       ,snpp.NetMap NetMap
       ,snpp.PriceProtectionAmountPerUnit PriceProtectionAmountPerUnit
       ,snpp.PriceProtectionPercentage PriceProtectionPercent
       ,snpp.TotalPriceProtectionDeduction TotalPriceProtectionDeduction
       ,snpp.NEP
       ,snpp.NEP_Formula
       ,HT1.DESCRIPTION Price_Tolerance_Type
       ,snpp.Price_Tolerance
       ,HT2.DESCRIPTION Price_Tolerance_Interval
       ,HT3.DESCRIPTION Price_Tolerance_Frequency
       ,snpp.Max_Incremental_Change
       ,HT4.DESCRIPTION Reset_Eligible
       ,HT5.DESCRIPTION Reset_Type
       ,snpp.Reset_Date
       ,HT6.DESCRIPTION Reset_Interval
       ,HT7.DESCRIPTION Reset_Frequency
       ,HT8.DESCRIPTION Net_Price_Type
       ,nsfm.NET_SALES_FORMULA_NAME Net_Price_Type_Formula,
       rs.rs_name
        
FROM RS_MODEL RS
JOIN
ST_NM_PPA_PROJECTION snpp
ON snpp.RS_MODEL_SID = rs.RS_MODEL_SID 
LEFT JOIN ITEM_PRICING_QUALIFIER ipq ON ipq.ITEM_PRICING_QUALIFIER_SID = snpp.ITEM_PRICING_QUALIFIER_SID
LEFT JOIN HELPER_TABLE HT1 ON HT1.HELPER_TABLE_SID = SNPP.PRICE_TOLERANCE_TYPE
       AND SNPP.PRICE_TOLERANCE_TYPE <> 0
LEFT JOIN HELPER_TABLE HT2 ON HT2.HELPER_TABLE_SID = SNPP.PRICE_TOLERANCE_INTERVAL
       AND SNPP.PRICE_TOLERANCE_INTERVAL <> 0
LEFT JOIN HELPER_TABLE HT3 ON HT3.HELPER_TABLE_SID = SNPP.PRICE_TOLERANCE_FREQUENCY
       AND SNPP.PRICE_TOLERANCE_FREQUENCY <> 0
LEFT JOIN HELPER_TABLE HT4 ON HT4.HELPER_TABLE_SID = SNPP.RESET_ELIGIBLE
       AND SNPP.RESET_ELIGIBLE <> 0
LEFT JOIN HELPER_TABLE HT5 ON HT5.HELPER_TABLE_SID = SNPP.RESET_TYPE
       AND SNPP.RESET_TYPE <> 0
LEFT JOIN HELPER_TABLE HT6 ON HT6.HELPER_TABLE_SID = SNPP.RESET_INTERVAL
       AND SNPP.RESET_INTERVAL <> 0
LEFT JOIN HELPER_TABLE HT7 ON HT7.HELPER_TABLE_SID = SNPP.RESET_FREQUENCY
       AND SNPP.RESET_FREQUENCY <> 0
LEFT JOIN HELPER_TABLE HT8 ON HT8.HELPER_TABLE_SID = SNPP.NET_PRICE_TYPE
       AND SNPP.NET_PRICE_TYPE <> 0
LEFT JOIN NET_SALES_FORMULA_MASTER NSFM ON NSFM.NET_SALES_FORMULA_MASTER_SID=SNPP.NET_PRICE_TYPE_FORMULA
JOIN projection_details pd ON pd.PROJECTION_DETAILS_SID = snpp.PROJECTION_DETAILS_SID
JOIN ccp_details cd ON cd.ccp_details_sid = pd.ccp_details_sid
JOIN period p ON p.period_sid = snpp.period_sid
WHERE snpp.user_id = @userid
      AND snpp.session_id = @sessionid
      AND pd.projection_master_sid = @projid
      AND cd.contract_master_sid = @contractsid
      AND cd.COMPANY_MASTER_SID = @compsid
      AND cd.ITEM_MASTER_SID = @itemsid 
      AND p.PERIOD_SID between @from and @to ORDER BY rs.RS_MODEL_SID,p.year @order ,p.MONTH @order OFFSET @start ROWS FETCH NEXT @end ROWS ONLY
           ]]>
        </query> 
    </entity> 
    <entity id="ppa-details-count">
        <query> 
            <![CDATA[
SELECT count(*)
 FROM ST_NM_PPA_PROJECTION snpp
 LEFT JOIN ITEM_PRICING_QUALIFIER ipq ON ipq.ITEM_PRICING_QUALIFIER_SID = snpp.ITEM_PRICING_QUALIFIER_SID
 JOIN projection_details pd ON pd.PROJECTION_DETAILS_SID = snpp.PROJECTION_DETAILS_SID
 JOIN ccp_details cd ON cd.ccp_details_sid = pd.ccp_details_sid
 JOIN period p ON p.period_sid = snpp.period_sid
 WHERE snpp.user_id = @userid
      AND snpp.session_id = @sessionid
      AND pd.projection_master_sid = @projid
      AND cd.contract_master_sid = @contractsid
      AND cd.COMPANY_MASTER_SID = @compsid
      AND cd.ITEM_MASTER_SID = @itemsid
      AND p.PERIOD_SID between @from and @to
           ]]>
        </query> 
    </entity> 
</sql>