package com.stpl.app.model.impl;

import com.stpl.app.model.StDeductionCalendarDetails;
import com.stpl.app.model.StDeductionCalendarDetailsModel;
import com.stpl.app.service.persistence.StDeductionCalendarDetailsPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StDeductionCalendarDetails service. Represents a row in the &quot;ST_DEDUCTION_CALENDAR_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.StDeductionCalendarDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StDeductionCalendarDetailsImpl}.
 * </p>
 *
 * @author
 * @see StDeductionCalendarDetailsImpl
 * @see com.stpl.app.model.StDeductionCalendarDetails
 * @see com.stpl.app.model.StDeductionCalendarDetailsModel
 * @generated
 */
public class StDeductionCalendarDetailsModelImpl extends BaseModelImpl<StDeductionCalendarDetails>
    implements StDeductionCalendarDetailsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a st deduction calendar details model instance should use the {@link com.stpl.app.model.StDeductionCalendarDetails} interface instead.
     */
    public static final String TABLE_NAME = "ST_DEDUCTION_CALENDAR_DETAILS";
    public static final Object[][] TABLE_COLUMNS = {
            { "ADJUSTMENT_BASIS", Types.VARCHAR },
            { "PERIOD_SID", Types.INTEGER },
            { "ADJUSTMENT_VALUE", Types.VARCHAR },
            { "ADJUSTMENT_ALLOCATION_METHODOLOGY", Types.VARCHAR },
            { "COMPANY_MASTER_SID", Types.INTEGER },
            { "DISCOUNT_AMOUNT", Types.INTEGER },
            { "ADJUSTMENT_VARIABLE", Types.VARCHAR },
            { "USER_ID", Types.INTEGER },
            { "ITEM_MASTER_SID", Types.INTEGER },
            { "ADJUSTMENT_TYPE", Types.VARCHAR },
            { "SESSION_ID", Types.VARCHAR },
            { "CHECK_RECORD", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table ST_DEDUCTION_CALENDAR_DETAILS (ADJUSTMENT_BASIS VARCHAR(75) null,PERIOD_SID INTEGER not null IDENTITY,ADJUSTMENT_VALUE VARCHAR(75) null,ADJUSTMENT_ALLOCATION_METHODOLOGY VARCHAR(75) null,COMPANY_MASTER_SID INTEGER not null IDENTITY,DISCOUNT_AMOUNT INTEGER,ADJUSTMENT_VARIABLE VARCHAR(75) null,USER_ID INTEGER not null IDENTITY,ITEM_MASTER_SID INTEGER not null IDENTITY,ADJUSTMENT_TYPE VARCHAR(75) null,SESSION_ID VARCHAR(75) not null IDENTITY,CHECK_RECORD BOOLEAN,primary key (PERIOD_SID, COMPANY_MASTER_SID, USER_ID, ITEM_MASTER_SID, SESSION_ID))";
    public static final String TABLE_SQL_DROP = "drop table ST_DEDUCTION_CALENDAR_DETAILS";
    public static final String ORDER_BY_JPQL = " ORDER BY stDeductionCalendarDetails.id.periodSid ASC, stDeductionCalendarDetails.id.companyMasterSid ASC, stDeductionCalendarDetails.id.userId ASC, stDeductionCalendarDetails.id.itemMasterSid ASC, stDeductionCalendarDetails.id.sessionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ST_DEDUCTION_CALENDAR_DETAILS.PERIOD_SID ASC, ST_DEDUCTION_CALENDAR_DETAILS.COMPANY_MASTER_SID ASC, ST_DEDUCTION_CALENDAR_DETAILS.USER_ID ASC, ST_DEDUCTION_CALENDAR_DETAILS.ITEM_MASTER_SID ASC, ST_DEDUCTION_CALENDAR_DETAILS.SESSION_ID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.StDeductionCalendarDetails"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.StDeductionCalendarDetails"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.StDeductionCalendarDetails"));
    private static ClassLoader _classLoader = StDeductionCalendarDetails.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            StDeductionCalendarDetails.class
        };
    private String _adjustmentBasis;
    private int _periodSid;
    private String _adjustmentValue;
    private String _adjustmentAllocationMethodology;
    private int _companyMasterSid;
    private int _discountAmount;
    private String _adjustmentVariable;
    private int _userId;
    private int _itemMasterSid;
    private String _adjustmentType;
    private String _sessionId;
    private boolean _checkRecord;
    private StDeductionCalendarDetails _escapedModel;

    public StDeductionCalendarDetailsModelImpl() {
    }

    @Override
    public StDeductionCalendarDetailsPK getPrimaryKey() {
        return new StDeductionCalendarDetailsPK(_periodSid, _companyMasterSid,
            _userId, _itemMasterSid, _sessionId);
    }

    @Override
    public void setPrimaryKey(StDeductionCalendarDetailsPK primaryKey) {
        setPeriodSid(primaryKey.periodSid);
        setCompanyMasterSid(primaryKey.companyMasterSid);
        setUserId(primaryKey.userId);
        setItemMasterSid(primaryKey.itemMasterSid);
        setSessionId(primaryKey.sessionId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new StDeductionCalendarDetailsPK(_periodSid, _companyMasterSid,
            _userId, _itemMasterSid, _sessionId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((StDeductionCalendarDetailsPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return StDeductionCalendarDetails.class;
    }

    @Override
    public String getModelClassName() {
        return StDeductionCalendarDetails.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("adjustmentBasis", getAdjustmentBasis());
        attributes.put("periodSid", getPeriodSid());
        attributes.put("adjustmentValue", getAdjustmentValue());
        attributes.put("adjustmentAllocationMethodology",
            getAdjustmentAllocationMethodology());
        attributes.put("companyMasterSid", getCompanyMasterSid());
        attributes.put("discountAmount", getDiscountAmount());
        attributes.put("adjustmentVariable", getAdjustmentVariable());
        attributes.put("userId", getUserId());
        attributes.put("itemMasterSid", getItemMasterSid());
        attributes.put("adjustmentType", getAdjustmentType());
        attributes.put("sessionId", getSessionId());
        attributes.put("checkRecord", getCheckRecord());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String adjustmentBasis = (String) attributes.get("adjustmentBasis");

        if (adjustmentBasis != null) {
            setAdjustmentBasis(adjustmentBasis);
        }

        Integer periodSid = (Integer) attributes.get("periodSid");

        if (periodSid != null) {
            setPeriodSid(periodSid);
        }

        String adjustmentValue = (String) attributes.get("adjustmentValue");

        if (adjustmentValue != null) {
            setAdjustmentValue(adjustmentValue);
        }

        String adjustmentAllocationMethodology = (String) attributes.get(
                "adjustmentAllocationMethodology");

        if (adjustmentAllocationMethodology != null) {
            setAdjustmentAllocationMethodology(adjustmentAllocationMethodology);
        }

        Integer companyMasterSid = (Integer) attributes.get("companyMasterSid");

        if (companyMasterSid != null) {
            setCompanyMasterSid(companyMasterSid);
        }

        Integer discountAmount = (Integer) attributes.get("discountAmount");

        if (discountAmount != null) {
            setDiscountAmount(discountAmount);
        }

        String adjustmentVariable = (String) attributes.get(
                "adjustmentVariable");

        if (adjustmentVariable != null) {
            setAdjustmentVariable(adjustmentVariable);
        }

        Integer userId = (Integer) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Integer itemMasterSid = (Integer) attributes.get("itemMasterSid");

        if (itemMasterSid != null) {
            setItemMasterSid(itemMasterSid);
        }

        String adjustmentType = (String) attributes.get("adjustmentType");

        if (adjustmentType != null) {
            setAdjustmentType(adjustmentType);
        }

        String sessionId = (String) attributes.get("sessionId");

        if (sessionId != null) {
            setSessionId(sessionId);
        }

        Boolean checkRecord = (Boolean) attributes.get("checkRecord");

        if (checkRecord != null) {
            setCheckRecord(checkRecord);
        }
    }

    @Override
    public String getAdjustmentBasis() {
        if (_adjustmentBasis == null) {
            return StringPool.BLANK;
        } else {
            return _adjustmentBasis;
        }
    }

    @Override
    public void setAdjustmentBasis(String adjustmentBasis) {
        _adjustmentBasis = adjustmentBasis;
    }

    @Override
    public int getPeriodSid() {
        return _periodSid;
    }

    @Override
    public void setPeriodSid(int periodSid) {
        _periodSid = periodSid;
    }

    @Override
    public String getAdjustmentValue() {
        if (_adjustmentValue == null) {
            return StringPool.BLANK;
        } else {
            return _adjustmentValue;
        }
    }

    @Override
    public void setAdjustmentValue(String adjustmentValue) {
        _adjustmentValue = adjustmentValue;
    }

    @Override
    public String getAdjustmentAllocationMethodology() {
        if (_adjustmentAllocationMethodology == null) {
            return StringPool.BLANK;
        } else {
            return _adjustmentAllocationMethodology;
        }
    }

    @Override
    public void setAdjustmentAllocationMethodology(
        String adjustmentAllocationMethodology) {
        _adjustmentAllocationMethodology = adjustmentAllocationMethodology;
    }

    @Override
    public int getCompanyMasterSid() {
        return _companyMasterSid;
    }

    @Override
    public void setCompanyMasterSid(int companyMasterSid) {
        _companyMasterSid = companyMasterSid;
    }

    @Override
    public int getDiscountAmount() {
        return _discountAmount;
    }

    @Override
    public void setDiscountAmount(int discountAmount) {
        _discountAmount = discountAmount;
    }

    @Override
    public String getAdjustmentVariable() {
        if (_adjustmentVariable == null) {
            return StringPool.BLANK;
        } else {
            return _adjustmentVariable;
        }
    }

    @Override
    public void setAdjustmentVariable(String adjustmentVariable) {
        _adjustmentVariable = adjustmentVariable;
    }

    @Override
    public int getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(int userId) {
        _userId = userId;
    }

    @Override
    public int getItemMasterSid() {
        return _itemMasterSid;
    }

    @Override
    public void setItemMasterSid(int itemMasterSid) {
        _itemMasterSid = itemMasterSid;
    }

    @Override
    public String getAdjustmentType() {
        if (_adjustmentType == null) {
            return StringPool.BLANK;
        } else {
            return _adjustmentType;
        }
    }

    @Override
    public void setAdjustmentType(String adjustmentType) {
        _adjustmentType = adjustmentType;
    }

    @Override
    public String getSessionId() {
        if (_sessionId == null) {
            return StringPool.BLANK;
        } else {
            return _sessionId;
        }
    }

    @Override
    public void setSessionId(String sessionId) {
        _sessionId = sessionId;
    }

    @Override
    public boolean getCheckRecord() {
        return _checkRecord;
    }

    @Override
    public boolean isCheckRecord() {
        return _checkRecord;
    }

    @Override
    public void setCheckRecord(boolean checkRecord) {
        _checkRecord = checkRecord;
    }

    @Override
    public StDeductionCalendarDetails toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (StDeductionCalendarDetails) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        StDeductionCalendarDetailsImpl stDeductionCalendarDetailsImpl = new StDeductionCalendarDetailsImpl();

        stDeductionCalendarDetailsImpl.setAdjustmentBasis(getAdjustmentBasis());
        stDeductionCalendarDetailsImpl.setPeriodSid(getPeriodSid());
        stDeductionCalendarDetailsImpl.setAdjustmentValue(getAdjustmentValue());
        stDeductionCalendarDetailsImpl.setAdjustmentAllocationMethodology(getAdjustmentAllocationMethodology());
        stDeductionCalendarDetailsImpl.setCompanyMasterSid(getCompanyMasterSid());
        stDeductionCalendarDetailsImpl.setDiscountAmount(getDiscountAmount());
        stDeductionCalendarDetailsImpl.setAdjustmentVariable(getAdjustmentVariable());
        stDeductionCalendarDetailsImpl.setUserId(getUserId());
        stDeductionCalendarDetailsImpl.setItemMasterSid(getItemMasterSid());
        stDeductionCalendarDetailsImpl.setAdjustmentType(getAdjustmentType());
        stDeductionCalendarDetailsImpl.setSessionId(getSessionId());
        stDeductionCalendarDetailsImpl.setCheckRecord(getCheckRecord());

        stDeductionCalendarDetailsImpl.resetOriginalValues();

        return stDeductionCalendarDetailsImpl;
    }

    @Override
    public int compareTo(StDeductionCalendarDetails stDeductionCalendarDetails) {
        StDeductionCalendarDetailsPK primaryKey = stDeductionCalendarDetails.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof StDeductionCalendarDetails)) {
            return false;
        }

        StDeductionCalendarDetails stDeductionCalendarDetails = (StDeductionCalendarDetails) obj;

        StDeductionCalendarDetailsPK primaryKey = stDeductionCalendarDetails.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<StDeductionCalendarDetails> toCacheModel() {
        StDeductionCalendarDetailsCacheModel stDeductionCalendarDetailsCacheModel =
            new StDeductionCalendarDetailsCacheModel();

        stDeductionCalendarDetailsCacheModel.adjustmentBasis = getAdjustmentBasis();

        String adjustmentBasis = stDeductionCalendarDetailsCacheModel.adjustmentBasis;

        if ((adjustmentBasis != null) && (adjustmentBasis.length() == 0)) {
            stDeductionCalendarDetailsCacheModel.adjustmentBasis = null;
        }

        stDeductionCalendarDetailsCacheModel.periodSid = getPeriodSid();

        stDeductionCalendarDetailsCacheModel.adjustmentValue = getAdjustmentValue();

        String adjustmentValue = stDeductionCalendarDetailsCacheModel.adjustmentValue;

        if ((adjustmentValue != null) && (adjustmentValue.length() == 0)) {
            stDeductionCalendarDetailsCacheModel.adjustmentValue = null;
        }

        stDeductionCalendarDetailsCacheModel.adjustmentAllocationMethodology = getAdjustmentAllocationMethodology();

        String adjustmentAllocationMethodology = stDeductionCalendarDetailsCacheModel.adjustmentAllocationMethodology;

        if ((adjustmentAllocationMethodology != null) &&
                (adjustmentAllocationMethodology.length() == 0)) {
            stDeductionCalendarDetailsCacheModel.adjustmentAllocationMethodology = null;
        }

        stDeductionCalendarDetailsCacheModel.companyMasterSid = getCompanyMasterSid();

        stDeductionCalendarDetailsCacheModel.discountAmount = getDiscountAmount();

        stDeductionCalendarDetailsCacheModel.adjustmentVariable = getAdjustmentVariable();

        String adjustmentVariable = stDeductionCalendarDetailsCacheModel.adjustmentVariable;

        if ((adjustmentVariable != null) && (adjustmentVariable.length() == 0)) {
            stDeductionCalendarDetailsCacheModel.adjustmentVariable = null;
        }

        stDeductionCalendarDetailsCacheModel.userId = getUserId();

        stDeductionCalendarDetailsCacheModel.itemMasterSid = getItemMasterSid();

        stDeductionCalendarDetailsCacheModel.adjustmentType = getAdjustmentType();

        String adjustmentType = stDeductionCalendarDetailsCacheModel.adjustmentType;

        if ((adjustmentType != null) && (adjustmentType.length() == 0)) {
            stDeductionCalendarDetailsCacheModel.adjustmentType = null;
        }

        stDeductionCalendarDetailsCacheModel.sessionId = getSessionId();

        String sessionId = stDeductionCalendarDetailsCacheModel.sessionId;

        if ((sessionId != null) && (sessionId.length() == 0)) {
            stDeductionCalendarDetailsCacheModel.sessionId = null;
        }

        stDeductionCalendarDetailsCacheModel.checkRecord = getCheckRecord();

        return stDeductionCalendarDetailsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{adjustmentBasis=");
        sb.append(getAdjustmentBasis());
        sb.append(", periodSid=");
        sb.append(getPeriodSid());
        sb.append(", adjustmentValue=");
        sb.append(getAdjustmentValue());
        sb.append(", adjustmentAllocationMethodology=");
        sb.append(getAdjustmentAllocationMethodology());
        sb.append(", companyMasterSid=");
        sb.append(getCompanyMasterSid());
        sb.append(", discountAmount=");
        sb.append(getDiscountAmount());
        sb.append(", adjustmentVariable=");
        sb.append(getAdjustmentVariable());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", itemMasterSid=");
        sb.append(getItemMasterSid());
        sb.append(", adjustmentType=");
        sb.append(getAdjustmentType());
        sb.append(", sessionId=");
        sb.append(getSessionId());
        sb.append(", checkRecord=");
        sb.append(getCheckRecord());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.StDeductionCalendarDetails");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>adjustmentBasis</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentBasis());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>periodSid</column-name><column-value><![CDATA[");
        sb.append(getPeriodSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustmentValue</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustmentAllocationMethodology</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentAllocationMethodology());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyMasterSid</column-name><column-value><![CDATA[");
        sb.append(getCompanyMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discountAmount</column-name><column-value><![CDATA[");
        sb.append(getDiscountAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustmentVariable</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentVariable());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
        sb.append(getItemMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustmentType</column-name><column-value><![CDATA[");
        sb.append(getAdjustmentType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sessionId</column-name><column-value><![CDATA[");
        sb.append(getSessionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>checkRecord</column-name><column-value><![CDATA[");
        sb.append(getCheckRecord());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
