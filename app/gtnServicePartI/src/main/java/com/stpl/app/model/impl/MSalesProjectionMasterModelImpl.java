package com.stpl.app.model.impl;

import com.stpl.app.model.MSalesProjectionMaster;
import com.stpl.app.model.MSalesProjectionMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MSalesProjectionMaster service. Represents a row in the &quot;M_SALES_PROJECTION_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.MSalesProjectionMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MSalesProjectionMasterImpl}.
 * </p>
 *
 * @author
 * @see MSalesProjectionMasterImpl
 * @see com.stpl.app.model.MSalesProjectionMaster
 * @see com.stpl.app.model.MSalesProjectionMasterModel
 * @generated
 */
public class MSalesProjectionMasterModelImpl extends BaseModelImpl<MSalesProjectionMaster>
    implements MSalesProjectionMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a m sales projection master model instance should use the {@link com.stpl.app.model.MSalesProjectionMaster} interface instead.
     */
    public static final String TABLE_NAME = "M_SALES_PROJECTION_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "METHODOLOGY", Types.VARCHAR },
            { "CALCULATION_PERIODS", Types.VARCHAR },
            { "CALCULATION_BASED", Types.VARCHAR },
            { "PROJECTION_DETAILS_SID", Types.INTEGER },
            { "CHECK_RECORD", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table M_SALES_PROJECTION_MASTER (METHODOLOGY VARCHAR(75) null,CALCULATION_PERIODS VARCHAR(75) null,CALCULATION_BASED VARCHAR(75) null,PROJECTION_DETAILS_SID INTEGER not null primary key IDENTITY,CHECK_RECORD BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table M_SALES_PROJECTION_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY mSalesProjectionMaster.projectionDetailsSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY M_SALES_PROJECTION_MASTER.PROJECTION_DETAILS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.MSalesProjectionMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.MSalesProjectionMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.MSalesProjectionMaster"));
    private static ClassLoader _classLoader = MSalesProjectionMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            MSalesProjectionMaster.class
        };
    private String _methodology;
    private String _calculationPeriods;
    private String _calculationBased;
    private int _projectionDetailsSid;
    private boolean _checkRecord;
    private MSalesProjectionMaster _escapedModel;

    public MSalesProjectionMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _projectionDetailsSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setProjectionDetailsSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _projectionDetailsSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return MSalesProjectionMaster.class;
    }

    @Override
    public String getModelClassName() {
        return MSalesProjectionMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("methodology", getMethodology());
        attributes.put("calculationPeriods", getCalculationPeriods());
        attributes.put("calculationBased", getCalculationBased());
        attributes.put("projectionDetailsSid", getProjectionDetailsSid());
        attributes.put("checkRecord", getCheckRecord());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String methodology = (String) attributes.get("methodology");

        if (methodology != null) {
            setMethodology(methodology);
        }

        String calculationPeriods = (String) attributes.get(
                "calculationPeriods");

        if (calculationPeriods != null) {
            setCalculationPeriods(calculationPeriods);
        }

        String calculationBased = (String) attributes.get("calculationBased");

        if (calculationBased != null) {
            setCalculationBased(calculationBased);
        }

        Integer projectionDetailsSid = (Integer) attributes.get(
                "projectionDetailsSid");

        if (projectionDetailsSid != null) {
            setProjectionDetailsSid(projectionDetailsSid);
        }

        Boolean checkRecord = (Boolean) attributes.get("checkRecord");

        if (checkRecord != null) {
            setCheckRecord(checkRecord);
        }
    }

    @Override
    public String getMethodology() {
        if (_methodology == null) {
            return StringPool.BLANK;
        } else {
            return _methodology;
        }
    }

    @Override
    public void setMethodology(String methodology) {
        _methodology = methodology;
    }

    @Override
    public String getCalculationPeriods() {
        if (_calculationPeriods == null) {
            return StringPool.BLANK;
        } else {
            return _calculationPeriods;
        }
    }

    @Override
    public void setCalculationPeriods(String calculationPeriods) {
        _calculationPeriods = calculationPeriods;
    }

    @Override
    public String getCalculationBased() {
        if (_calculationBased == null) {
            return StringPool.BLANK;
        } else {
            return _calculationBased;
        }
    }

    @Override
    public void setCalculationBased(String calculationBased) {
        _calculationBased = calculationBased;
    }

    @Override
    public int getProjectionDetailsSid() {
        return _projectionDetailsSid;
    }

    @Override
    public void setProjectionDetailsSid(int projectionDetailsSid) {
        _projectionDetailsSid = projectionDetailsSid;
    }

    @Override
    public boolean getCheckRecord() {
        return _checkRecord;
    }

    @Override
    public boolean isCheckRecord() {
        return _checkRecord;
    }

    @Override
    public void setCheckRecord(boolean checkRecord) {
        _checkRecord = checkRecord;
    }

    @Override
    public MSalesProjectionMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (MSalesProjectionMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        MSalesProjectionMasterImpl mSalesProjectionMasterImpl = new MSalesProjectionMasterImpl();

        mSalesProjectionMasterImpl.setMethodology(getMethodology());
        mSalesProjectionMasterImpl.setCalculationPeriods(getCalculationPeriods());
        mSalesProjectionMasterImpl.setCalculationBased(getCalculationBased());
        mSalesProjectionMasterImpl.setProjectionDetailsSid(getProjectionDetailsSid());
        mSalesProjectionMasterImpl.setCheckRecord(getCheckRecord());

        mSalesProjectionMasterImpl.resetOriginalValues();

        return mSalesProjectionMasterImpl;
    }

    @Override
    public int compareTo(MSalesProjectionMaster mSalesProjectionMaster) {
        int primaryKey = mSalesProjectionMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof MSalesProjectionMaster)) {
            return false;
        }

        MSalesProjectionMaster mSalesProjectionMaster = (MSalesProjectionMaster) obj;

        int primaryKey = mSalesProjectionMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<MSalesProjectionMaster> toCacheModel() {
        MSalesProjectionMasterCacheModel mSalesProjectionMasterCacheModel = new MSalesProjectionMasterCacheModel();

        mSalesProjectionMasterCacheModel.methodology = getMethodology();

        String methodology = mSalesProjectionMasterCacheModel.methodology;

        if ((methodology != null) && (methodology.length() == 0)) {
            mSalesProjectionMasterCacheModel.methodology = null;
        }

        mSalesProjectionMasterCacheModel.calculationPeriods = getCalculationPeriods();

        String calculationPeriods = mSalesProjectionMasterCacheModel.calculationPeriods;

        if ((calculationPeriods != null) && (calculationPeriods.length() == 0)) {
            mSalesProjectionMasterCacheModel.calculationPeriods = null;
        }

        mSalesProjectionMasterCacheModel.calculationBased = getCalculationBased();

        String calculationBased = mSalesProjectionMasterCacheModel.calculationBased;

        if ((calculationBased != null) && (calculationBased.length() == 0)) {
            mSalesProjectionMasterCacheModel.calculationBased = null;
        }

        mSalesProjectionMasterCacheModel.projectionDetailsSid = getProjectionDetailsSid();

        mSalesProjectionMasterCacheModel.checkRecord = getCheckRecord();

        return mSalesProjectionMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{methodology=");
        sb.append(getMethodology());
        sb.append(", calculationPeriods=");
        sb.append(getCalculationPeriods());
        sb.append(", calculationBased=");
        sb.append(getCalculationBased());
        sb.append(", projectionDetailsSid=");
        sb.append(getProjectionDetailsSid());
        sb.append(", checkRecord=");
        sb.append(getCheckRecord());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.MSalesProjectionMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>methodology</column-name><column-value><![CDATA[");
        sb.append(getMethodology());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>calculationPeriods</column-name><column-value><![CDATA[");
        sb.append(getCalculationPeriods());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>calculationBased</column-name><column-value><![CDATA[");
        sb.append(getCalculationBased());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getProjectionDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>checkRecord</column-name><column-value><![CDATA[");
        sb.append(getCheckRecord());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
