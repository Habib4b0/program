package com.stpl.app.model.impl;

import com.stpl.app.model.ItemHierarchyDefMaster;
import com.stpl.app.model.ItemHierarchyDefMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ItemHierarchyDefMaster service. Represents a row in the &quot;ITEM_HIERARCHY_DEF_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.ItemHierarchyDefMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemHierarchyDefMasterImpl}.
 * </p>
 *
 * @author
 * @see ItemHierarchyDefMasterImpl
 * @see com.stpl.app.model.ItemHierarchyDefMaster
 * @see com.stpl.app.model.ItemHierarchyDefMasterModel
 * @generated
 */
public class ItemHierarchyDefMasterModelImpl extends BaseModelImpl<ItemHierarchyDefMaster>
    implements ItemHierarchyDefMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a item hierarchy def master model instance should use the {@link com.stpl.app.model.ItemHierarchyDefMaster} interface instead.
     */
    public static final String TABLE_NAME = "ITEM_HIERARCHY_DEF_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "ITEM_HIERARCHY_DEF_MASTER_SID", Types.INTEGER },
            { "CREATED_BY", Types.INTEGER },
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "MODIFIED_BY", Types.INTEGER },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "ALIAS", Types.VARCHAR },
            { "SOURCE", Types.VARCHAR },
            { "BATCH_ID", Types.VARCHAR },
            { "BPI_LVL", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "MEMBER", Types.VARCHAR },
            { "INBOUND_STATUS", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table ITEM_HIERARCHY_DEF_MASTER (ITEM_HIERARCHY_DEF_MASTER_SID INTEGER not null primary key IDENTITY,CREATED_BY INTEGER,RECORD_LOCK_STATUS BOOLEAN,MODIFIED_BY INTEGER,CREATED_DATE DATE null,ALIAS VARCHAR(75) null,SOURCE VARCHAR(75) null,BATCH_ID VARCHAR(75) null,BPI_LVL VARCHAR(75) null,MODIFIED_DATE DATE null,MEMBER VARCHAR(75) null,INBOUND_STATUS VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table ITEM_HIERARCHY_DEF_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY itemHierarchyDefMaster.itemHierarchyDefMasterSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ITEM_HIERARCHY_DEF_MASTER.ITEM_HIERARCHY_DEF_MASTER_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.ItemHierarchyDefMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.ItemHierarchyDefMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stpl.app.model.ItemHierarchyDefMaster"),
            true);
    public static long ALIAS_COLUMN_BITMASK = 1L;
    public static long BPILVL_COLUMN_BITMASK = 2L;
    public static long MEMBER_COLUMN_BITMASK = 4L;
    public static long ITEMHIERARCHYDEFMASTERSID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.ItemHierarchyDefMaster"));
    private static ClassLoader _classLoader = ItemHierarchyDefMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ItemHierarchyDefMaster.class
        };
    private int _itemHierarchyDefMasterSid;
    private int _createdBy;
    private boolean _recordLockStatus;
    private int _modifiedBy;
    private Date _createdDate;
    private String _alias;
    private String _originalAlias;
    private String _source;
    private String _batchId;
    private String _bpiLvl;
    private String _originalBpiLvl;
    private Date _modifiedDate;
    private String _member;
    private String _originalMember;
    private String _inboundStatus;
    private long _columnBitmask;
    private ItemHierarchyDefMaster _escapedModel;

    public ItemHierarchyDefMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _itemHierarchyDefMasterSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setItemHierarchyDefMasterSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _itemHierarchyDefMasterSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ItemHierarchyDefMaster.class;
    }

    @Override
    public String getModelClassName() {
        return ItemHierarchyDefMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("itemHierarchyDefMasterSid",
            getItemHierarchyDefMasterSid());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("alias", getAlias());
        attributes.put("source", getSource());
        attributes.put("batchId", getBatchId());
        attributes.put("bpiLvl", getBpiLvl());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("member", getMember());
        attributes.put("inboundStatus", getInboundStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer itemHierarchyDefMasterSid = (Integer) attributes.get(
                "itemHierarchyDefMasterSid");

        if (itemHierarchyDefMasterSid != null) {
            setItemHierarchyDefMasterSid(itemHierarchyDefMasterSid);
        }

        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String alias = (String) attributes.get("alias");

        if (alias != null) {
            setAlias(alias);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        String bpiLvl = (String) attributes.get("bpiLvl");

        if (bpiLvl != null) {
            setBpiLvl(bpiLvl);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String member = (String) attributes.get("member");

        if (member != null) {
            setMember(member);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }
    }

    @Override
    public int getItemHierarchyDefMasterSid() {
        return _itemHierarchyDefMasterSid;
    }

    @Override
    public void setItemHierarchyDefMasterSid(int itemHierarchyDefMasterSid) {
        _itemHierarchyDefMasterSid = itemHierarchyDefMasterSid;
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getAlias() {
        if (_alias == null) {
            return StringPool.BLANK;
        } else {
            return _alias;
        }
    }

    @Override
    public void setAlias(String alias) {
        _columnBitmask |= ALIAS_COLUMN_BITMASK;

        if (_originalAlias == null) {
            _originalAlias = _alias;
        }

        _alias = alias;
    }

    public String getOriginalAlias() {
        return GetterUtil.getString(_originalAlias);
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public String getBpiLvl() {
        if (_bpiLvl == null) {
            return StringPool.BLANK;
        } else {
            return _bpiLvl;
        }
    }

    @Override
    public void setBpiLvl(String bpiLvl) {
        _columnBitmask |= BPILVL_COLUMN_BITMASK;

        if (_originalBpiLvl == null) {
            _originalBpiLvl = _bpiLvl;
        }

        _bpiLvl = bpiLvl;
    }

    public String getOriginalBpiLvl() {
        return GetterUtil.getString(_originalBpiLvl);
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getMember() {
        if (_member == null) {
            return StringPool.BLANK;
        } else {
            return _member;
        }
    }

    @Override
    public void setMember(String member) {
        _columnBitmask |= MEMBER_COLUMN_BITMASK;

        if (_originalMember == null) {
            _originalMember = _member;
        }

        _member = member;
    }

    public String getOriginalMember() {
        return GetterUtil.getString(_originalMember);
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ItemHierarchyDefMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ItemHierarchyDefMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ItemHierarchyDefMasterImpl itemHierarchyDefMasterImpl = new ItemHierarchyDefMasterImpl();

        itemHierarchyDefMasterImpl.setItemHierarchyDefMasterSid(getItemHierarchyDefMasterSid());
        itemHierarchyDefMasterImpl.setCreatedBy(getCreatedBy());
        itemHierarchyDefMasterImpl.setRecordLockStatus(getRecordLockStatus());
        itemHierarchyDefMasterImpl.setModifiedBy(getModifiedBy());
        itemHierarchyDefMasterImpl.setCreatedDate(getCreatedDate());
        itemHierarchyDefMasterImpl.setAlias(getAlias());
        itemHierarchyDefMasterImpl.setSource(getSource());
        itemHierarchyDefMasterImpl.setBatchId(getBatchId());
        itemHierarchyDefMasterImpl.setBpiLvl(getBpiLvl());
        itemHierarchyDefMasterImpl.setModifiedDate(getModifiedDate());
        itemHierarchyDefMasterImpl.setMember(getMember());
        itemHierarchyDefMasterImpl.setInboundStatus(getInboundStatus());

        itemHierarchyDefMasterImpl.resetOriginalValues();

        return itemHierarchyDefMasterImpl;
    }

    @Override
    public int compareTo(ItemHierarchyDefMaster itemHierarchyDefMaster) {
        int primaryKey = itemHierarchyDefMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ItemHierarchyDefMaster)) {
            return false;
        }

        ItemHierarchyDefMaster itemHierarchyDefMaster = (ItemHierarchyDefMaster) obj;

        int primaryKey = itemHierarchyDefMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ItemHierarchyDefMasterModelImpl itemHierarchyDefMasterModelImpl = this;

        itemHierarchyDefMasterModelImpl._originalAlias = itemHierarchyDefMasterModelImpl._alias;

        itemHierarchyDefMasterModelImpl._originalBpiLvl = itemHierarchyDefMasterModelImpl._bpiLvl;

        itemHierarchyDefMasterModelImpl._originalMember = itemHierarchyDefMasterModelImpl._member;

        itemHierarchyDefMasterModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ItemHierarchyDefMaster> toCacheModel() {
        ItemHierarchyDefMasterCacheModel itemHierarchyDefMasterCacheModel = new ItemHierarchyDefMasterCacheModel();

        itemHierarchyDefMasterCacheModel.itemHierarchyDefMasterSid = getItemHierarchyDefMasterSid();

        itemHierarchyDefMasterCacheModel.createdBy = getCreatedBy();

        itemHierarchyDefMasterCacheModel.recordLockStatus = getRecordLockStatus();

        itemHierarchyDefMasterCacheModel.modifiedBy = getModifiedBy();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            itemHierarchyDefMasterCacheModel.createdDate = createdDate.getTime();
        } else {
            itemHierarchyDefMasterCacheModel.createdDate = Long.MIN_VALUE;
        }

        itemHierarchyDefMasterCacheModel.alias = getAlias();

        String alias = itemHierarchyDefMasterCacheModel.alias;

        if ((alias != null) && (alias.length() == 0)) {
            itemHierarchyDefMasterCacheModel.alias = null;
        }

        itemHierarchyDefMasterCacheModel.source = getSource();

        String source = itemHierarchyDefMasterCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            itemHierarchyDefMasterCacheModel.source = null;
        }

        itemHierarchyDefMasterCacheModel.batchId = getBatchId();

        String batchId = itemHierarchyDefMasterCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            itemHierarchyDefMasterCacheModel.batchId = null;
        }

        itemHierarchyDefMasterCacheModel.bpiLvl = getBpiLvl();

        String bpiLvl = itemHierarchyDefMasterCacheModel.bpiLvl;

        if ((bpiLvl != null) && (bpiLvl.length() == 0)) {
            itemHierarchyDefMasterCacheModel.bpiLvl = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            itemHierarchyDefMasterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            itemHierarchyDefMasterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        itemHierarchyDefMasterCacheModel.member = getMember();

        String member = itemHierarchyDefMasterCacheModel.member;

        if ((member != null) && (member.length() == 0)) {
            itemHierarchyDefMasterCacheModel.member = null;
        }

        itemHierarchyDefMasterCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = itemHierarchyDefMasterCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            itemHierarchyDefMasterCacheModel.inboundStatus = null;
        }

        return itemHierarchyDefMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{itemHierarchyDefMasterSid=");
        sb.append(getItemHierarchyDefMasterSid());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", alias=");
        sb.append(getAlias());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", bpiLvl=");
        sb.append(getBpiLvl());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", member=");
        sb.append(getMember());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.ItemHierarchyDefMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>itemHierarchyDefMasterSid</column-name><column-value><![CDATA[");
        sb.append(getItemHierarchyDefMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>alias</column-name><column-value><![CDATA[");
        sb.append(getAlias());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bpiLvl</column-name><column-value><![CDATA[");
        sb.append(getBpiLvl());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>member</column-name><column-value><![CDATA[");
        sb.append(getMember());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
