package com.stpl.app.model.impl;

import com.stpl.app.model.PsModel;
import com.stpl.app.model.PsModelModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PsModel service. Represents a row in the &quot;PS_MODEL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.PsModelModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PsModelImpl}.
 * </p>
 *
 * @author
 * @see PsModelImpl
 * @see com.stpl.app.model.PsModel
 * @see com.stpl.app.model.PsModelModel
 * @generated
 */
public class PsModelModelImpl extends BaseModelImpl<PsModel>
    implements PsModelModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ps model model instance should use the {@link com.stpl.app.model.PsModel} interface instead.
     */
    public static final String TABLE_NAME = "PS_MODEL";
    public static final Object[][] TABLE_COLUMNS = {
            { "PS_ID", Types.VARCHAR },
            { "PS_NAME", Types.VARCHAR },
            { "PS_TYPE", Types.INTEGER },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "PS_CATEGORY", Types.INTEGER },
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "PS_STATUS", Types.INTEGER },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "CREATED_BY", Types.INTEGER },
            { "SOURCE", Types.VARCHAR },
            { "PS_NO", Types.VARCHAR },
            { "PS_DESIGNATION", Types.VARCHAR },
            { "PARENT_PS_ID", Types.VARCHAR },
            { "BATCH_ID", Types.VARCHAR },
            { "PS_MODEL_SID", Types.INTEGER },
            { "PS_END_DATE", Types.TIMESTAMP },
            { "PS_TRADE_CLASS", Types.INTEGER },
            { "MODIFIED_BY", Types.INTEGER },
            { "INBOUND_STATUS", Types.VARCHAR },
            { "PS_START_DATE", Types.TIMESTAMP },
            { "PARENT_PS_NAME", Types.VARCHAR },
            { "INTERNAL_NOTES", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table PS_MODEL (PS_ID VARCHAR(75) null,PS_NAME VARCHAR(75) null,PS_TYPE INTEGER,MODIFIED_DATE DATE null,PS_CATEGORY INTEGER,RECORD_LOCK_STATUS BOOLEAN,PS_STATUS INTEGER,CREATED_DATE DATE null,CREATED_BY INTEGER,SOURCE VARCHAR(75) null,PS_NO VARCHAR(75) null,PS_DESIGNATION VARCHAR(75) null,PARENT_PS_ID VARCHAR(75) null,BATCH_ID VARCHAR(75) null,PS_MODEL_SID INTEGER not null primary key IDENTITY,PS_END_DATE DATE null,PS_TRADE_CLASS INTEGER,MODIFIED_BY INTEGER,INBOUND_STATUS VARCHAR(75) null,PS_START_DATE DATE null,PARENT_PS_NAME VARCHAR(75) null,INTERNAL_NOTES VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table PS_MODEL";
    public static final String ORDER_BY_JPQL = " ORDER BY psModel.psModelSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY PS_MODEL.PS_MODEL_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.PsModel"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.PsModel"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stpl.app.model.PsModel"),
            true);
    public static long PSID_COLUMN_BITMASK = 1L;
    public static long PSNAME_COLUMN_BITMASK = 2L;
    public static long PSNO_COLUMN_BITMASK = 4L;
    public static long PSSTATUS_COLUMN_BITMASK = 8L;
    public static long PSTYPE_COLUMN_BITMASK = 16L;
    public static long PSMODELSID_COLUMN_BITMASK = 32L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.PsModel"));
    private static ClassLoader _classLoader = PsModel.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PsModel.class
        };
    private String _psId;
    private String _originalPsId;
    private String _psName;
    private String _originalPsName;
    private int _psType;
    private int _originalPsType;
    private boolean _setOriginalPsType;
    private Date _modifiedDate;
    private int _psCategory;
    private boolean _recordLockStatus;
    private int _psStatus;
    private int _originalPsStatus;
    private boolean _setOriginalPsStatus;
    private Date _createdDate;
    private int _createdBy;
    private String _source;
    private String _psNo;
    private String _originalPsNo;
    private String _psDesignation;
    private String _parentPsId;
    private String _batchId;
    private int _psModelSid;
    private Date _psEndDate;
    private int _psTradeClass;
    private int _modifiedBy;
    private String _inboundStatus;
    private Date _psStartDate;
    private String _parentPsName;
    private String _internalNotes;
    private long _columnBitmask;
    private PsModel _escapedModel;

    public PsModelModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _psModelSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setPsModelSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _psModelSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return PsModel.class;
    }

    @Override
    public String getModelClassName() {
        return PsModel.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("psId", getPsId());
        attributes.put("psName", getPsName());
        attributes.put("psType", getPsType());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("psCategory", getPsCategory());
        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("psStatus", getPsStatus());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("source", getSource());
        attributes.put("psNo", getPsNo());
        attributes.put("psDesignation", getPsDesignation());
        attributes.put("parentPsId", getParentPsId());
        attributes.put("batchId", getBatchId());
        attributes.put("psModelSid", getPsModelSid());
        attributes.put("psEndDate", getPsEndDate());
        attributes.put("psTradeClass", getPsTradeClass());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("inboundStatus", getInboundStatus());
        attributes.put("psStartDate", getPsStartDate());
        attributes.put("parentPsName", getParentPsName());
        attributes.put("internalNotes", getInternalNotes());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String psId = (String) attributes.get("psId");

        if (psId != null) {
            setPsId(psId);
        }

        String psName = (String) attributes.get("psName");

        if (psName != null) {
            setPsName(psName);
        }

        Integer psType = (Integer) attributes.get("psType");

        if (psType != null) {
            setPsType(psType);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer psCategory = (Integer) attributes.get("psCategory");

        if (psCategory != null) {
            setPsCategory(psCategory);
        }

        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        Integer psStatus = (Integer) attributes.get("psStatus");

        if (psStatus != null) {
            setPsStatus(psStatus);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String psNo = (String) attributes.get("psNo");

        if (psNo != null) {
            setPsNo(psNo);
        }

        String psDesignation = (String) attributes.get("psDesignation");

        if (psDesignation != null) {
            setPsDesignation(psDesignation);
        }

        String parentPsId = (String) attributes.get("parentPsId");

        if (parentPsId != null) {
            setParentPsId(parentPsId);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        Integer psModelSid = (Integer) attributes.get("psModelSid");

        if (psModelSid != null) {
            setPsModelSid(psModelSid);
        }

        Date psEndDate = (Date) attributes.get("psEndDate");

        if (psEndDate != null) {
            setPsEndDate(psEndDate);
        }

        Integer psTradeClass = (Integer) attributes.get("psTradeClass");

        if (psTradeClass != null) {
            setPsTradeClass(psTradeClass);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }

        Date psStartDate = (Date) attributes.get("psStartDate");

        if (psStartDate != null) {
            setPsStartDate(psStartDate);
        }

        String parentPsName = (String) attributes.get("parentPsName");

        if (parentPsName != null) {
            setParentPsName(parentPsName);
        }

        String internalNotes = (String) attributes.get("internalNotes");

        if (internalNotes != null) {
            setInternalNotes(internalNotes);
        }
    }

    @Override
    public String getPsId() {
        if (_psId == null) {
            return StringPool.BLANK;
        } else {
            return _psId;
        }
    }

    @Override
    public void setPsId(String psId) {
        _columnBitmask |= PSID_COLUMN_BITMASK;

        if (_originalPsId == null) {
            _originalPsId = _psId;
        }

        _psId = psId;
    }

    public String getOriginalPsId() {
        return GetterUtil.getString(_originalPsId);
    }

    @Override
    public String getPsName() {
        if (_psName == null) {
            return StringPool.BLANK;
        } else {
            return _psName;
        }
    }

    @Override
    public void setPsName(String psName) {
        _columnBitmask |= PSNAME_COLUMN_BITMASK;

        if (_originalPsName == null) {
            _originalPsName = _psName;
        }

        _psName = psName;
    }

    public String getOriginalPsName() {
        return GetterUtil.getString(_originalPsName);
    }

    @Override
    public int getPsType() {
        return _psType;
    }

    @Override
    public void setPsType(int psType) {
        _columnBitmask |= PSTYPE_COLUMN_BITMASK;

        if (!_setOriginalPsType) {
            _setOriginalPsType = true;

            _originalPsType = _psType;
        }

        _psType = psType;
    }

    public int getOriginalPsType() {
        return _originalPsType;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public int getPsCategory() {
        return _psCategory;
    }

    @Override
    public void setPsCategory(int psCategory) {
        _psCategory = psCategory;
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public int getPsStatus() {
        return _psStatus;
    }

    @Override
    public void setPsStatus(int psStatus) {
        _columnBitmask |= PSSTATUS_COLUMN_BITMASK;

        if (!_setOriginalPsStatus) {
            _setOriginalPsStatus = true;

            _originalPsStatus = _psStatus;
        }

        _psStatus = psStatus;
    }

    public int getOriginalPsStatus() {
        return _originalPsStatus;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getPsNo() {
        if (_psNo == null) {
            return StringPool.BLANK;
        } else {
            return _psNo;
        }
    }

    @Override
    public void setPsNo(String psNo) {
        _columnBitmask |= PSNO_COLUMN_BITMASK;

        if (_originalPsNo == null) {
            _originalPsNo = _psNo;
        }

        _psNo = psNo;
    }

    public String getOriginalPsNo() {
        return GetterUtil.getString(_originalPsNo);
    }

    @Override
    public String getPsDesignation() {
        if (_psDesignation == null) {
            return StringPool.BLANK;
        } else {
            return _psDesignation;
        }
    }

    @Override
    public void setPsDesignation(String psDesignation) {
        _psDesignation = psDesignation;
    }

    @Override
    public String getParentPsId() {
        if (_parentPsId == null) {
            return StringPool.BLANK;
        } else {
            return _parentPsId;
        }
    }

    @Override
    public void setParentPsId(String parentPsId) {
        _parentPsId = parentPsId;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public int getPsModelSid() {
        return _psModelSid;
    }

    @Override
    public void setPsModelSid(int psModelSid) {
        _psModelSid = psModelSid;
    }

    @Override
    public Date getPsEndDate() {
        return _psEndDate;
    }

    @Override
    public void setPsEndDate(Date psEndDate) {
        _psEndDate = psEndDate;
    }

    @Override
    public int getPsTradeClass() {
        return _psTradeClass;
    }

    @Override
    public void setPsTradeClass(int psTradeClass) {
        _psTradeClass = psTradeClass;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    @Override
    public Date getPsStartDate() {
        return _psStartDate;
    }

    @Override
    public void setPsStartDate(Date psStartDate) {
        _psStartDate = psStartDate;
    }

    @Override
    public String getParentPsName() {
        if (_parentPsName == null) {
            return StringPool.BLANK;
        } else {
            return _parentPsName;
        }
    }

    @Override
    public void setParentPsName(String parentPsName) {
        _parentPsName = parentPsName;
    }

    @Override
    public String getInternalNotes() {
        if (_internalNotes == null) {
            return StringPool.BLANK;
        } else {
            return _internalNotes;
        }
    }

    @Override
    public void setInternalNotes(String internalNotes) {
        _internalNotes = internalNotes;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PsModel toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PsModel) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PsModelImpl psModelImpl = new PsModelImpl();

        psModelImpl.setPsId(getPsId());
        psModelImpl.setPsName(getPsName());
        psModelImpl.setPsType(getPsType());
        psModelImpl.setModifiedDate(getModifiedDate());
        psModelImpl.setPsCategory(getPsCategory());
        psModelImpl.setRecordLockStatus(getRecordLockStatus());
        psModelImpl.setPsStatus(getPsStatus());
        psModelImpl.setCreatedDate(getCreatedDate());
        psModelImpl.setCreatedBy(getCreatedBy());
        psModelImpl.setSource(getSource());
        psModelImpl.setPsNo(getPsNo());
        psModelImpl.setPsDesignation(getPsDesignation());
        psModelImpl.setParentPsId(getParentPsId());
        psModelImpl.setBatchId(getBatchId());
        psModelImpl.setPsModelSid(getPsModelSid());
        psModelImpl.setPsEndDate(getPsEndDate());
        psModelImpl.setPsTradeClass(getPsTradeClass());
        psModelImpl.setModifiedBy(getModifiedBy());
        psModelImpl.setInboundStatus(getInboundStatus());
        psModelImpl.setPsStartDate(getPsStartDate());
        psModelImpl.setParentPsName(getParentPsName());
        psModelImpl.setInternalNotes(getInternalNotes());

        psModelImpl.resetOriginalValues();

        return psModelImpl;
    }

    @Override
    public int compareTo(PsModel psModel) {
        int primaryKey = psModel.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PsModel)) {
            return false;
        }

        PsModel psModel = (PsModel) obj;

        int primaryKey = psModel.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PsModelModelImpl psModelModelImpl = this;

        psModelModelImpl._originalPsId = psModelModelImpl._psId;

        psModelModelImpl._originalPsName = psModelModelImpl._psName;

        psModelModelImpl._originalPsType = psModelModelImpl._psType;

        psModelModelImpl._setOriginalPsType = false;

        psModelModelImpl._originalPsStatus = psModelModelImpl._psStatus;

        psModelModelImpl._setOriginalPsStatus = false;

        psModelModelImpl._originalPsNo = psModelModelImpl._psNo;

        psModelModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PsModel> toCacheModel() {
        PsModelCacheModel psModelCacheModel = new PsModelCacheModel();

        psModelCacheModel.psId = getPsId();

        String psId = psModelCacheModel.psId;

        if ((psId != null) && (psId.length() == 0)) {
            psModelCacheModel.psId = null;
        }

        psModelCacheModel.psName = getPsName();

        String psName = psModelCacheModel.psName;

        if ((psName != null) && (psName.length() == 0)) {
            psModelCacheModel.psName = null;
        }

        psModelCacheModel.psType = getPsType();

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            psModelCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            psModelCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        psModelCacheModel.psCategory = getPsCategory();

        psModelCacheModel.recordLockStatus = getRecordLockStatus();

        psModelCacheModel.psStatus = getPsStatus();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            psModelCacheModel.createdDate = createdDate.getTime();
        } else {
            psModelCacheModel.createdDate = Long.MIN_VALUE;
        }

        psModelCacheModel.createdBy = getCreatedBy();

        psModelCacheModel.source = getSource();

        String source = psModelCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            psModelCacheModel.source = null;
        }

        psModelCacheModel.psNo = getPsNo();

        String psNo = psModelCacheModel.psNo;

        if ((psNo != null) && (psNo.length() == 0)) {
            psModelCacheModel.psNo = null;
        }

        psModelCacheModel.psDesignation = getPsDesignation();

        String psDesignation = psModelCacheModel.psDesignation;

        if ((psDesignation != null) && (psDesignation.length() == 0)) {
            psModelCacheModel.psDesignation = null;
        }

        psModelCacheModel.parentPsId = getParentPsId();

        String parentPsId = psModelCacheModel.parentPsId;

        if ((parentPsId != null) && (parentPsId.length() == 0)) {
            psModelCacheModel.parentPsId = null;
        }

        psModelCacheModel.batchId = getBatchId();

        String batchId = psModelCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            psModelCacheModel.batchId = null;
        }

        psModelCacheModel.psModelSid = getPsModelSid();

        Date psEndDate = getPsEndDate();

        if (psEndDate != null) {
            psModelCacheModel.psEndDate = psEndDate.getTime();
        } else {
            psModelCacheModel.psEndDate = Long.MIN_VALUE;
        }

        psModelCacheModel.psTradeClass = getPsTradeClass();

        psModelCacheModel.modifiedBy = getModifiedBy();

        psModelCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = psModelCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            psModelCacheModel.inboundStatus = null;
        }

        Date psStartDate = getPsStartDate();

        if (psStartDate != null) {
            psModelCacheModel.psStartDate = psStartDate.getTime();
        } else {
            psModelCacheModel.psStartDate = Long.MIN_VALUE;
        }

        psModelCacheModel.parentPsName = getParentPsName();

        String parentPsName = psModelCacheModel.parentPsName;

        if ((parentPsName != null) && (parentPsName.length() == 0)) {
            psModelCacheModel.parentPsName = null;
        }

        psModelCacheModel.internalNotes = getInternalNotes();

        String internalNotes = psModelCacheModel.internalNotes;

        if ((internalNotes != null) && (internalNotes.length() == 0)) {
            psModelCacheModel.internalNotes = null;
        }

        return psModelCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(45);

        sb.append("{psId=");
        sb.append(getPsId());
        sb.append(", psName=");
        sb.append(getPsName());
        sb.append(", psType=");
        sb.append(getPsType());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", psCategory=");
        sb.append(getPsCategory());
        sb.append(", recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", psStatus=");
        sb.append(getPsStatus());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", psNo=");
        sb.append(getPsNo());
        sb.append(", psDesignation=");
        sb.append(getPsDesignation());
        sb.append(", parentPsId=");
        sb.append(getParentPsId());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", psModelSid=");
        sb.append(getPsModelSid());
        sb.append(", psEndDate=");
        sb.append(getPsEndDate());
        sb.append(", psTradeClass=");
        sb.append(getPsTradeClass());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append(", psStartDate=");
        sb.append(getPsStartDate());
        sb.append(", parentPsName=");
        sb.append(getParentPsName());
        sb.append(", internalNotes=");
        sb.append(getInternalNotes());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(70);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.PsModel");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>psId</column-name><column-value><![CDATA[");
        sb.append(getPsId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>psName</column-name><column-value><![CDATA[");
        sb.append(getPsName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>psType</column-name><column-value><![CDATA[");
        sb.append(getPsType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>psCategory</column-name><column-value><![CDATA[");
        sb.append(getPsCategory());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>psStatus</column-name><column-value><![CDATA[");
        sb.append(getPsStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>psNo</column-name><column-value><![CDATA[");
        sb.append(getPsNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>psDesignation</column-name><column-value><![CDATA[");
        sb.append(getPsDesignation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentPsId</column-name><column-value><![CDATA[");
        sb.append(getParentPsId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>psModelSid</column-name><column-value><![CDATA[");
        sb.append(getPsModelSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>psEndDate</column-name><column-value><![CDATA[");
        sb.append(getPsEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>psTradeClass</column-name><column-value><![CDATA[");
        sb.append(getPsTradeClass());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>psStartDate</column-name><column-value><![CDATA[");
        sb.append(getPsStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentPsName</column-name><column-value><![CDATA[");
        sb.append(getParentPsName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>internalNotes</column-name><column-value><![CDATA[");
        sb.append(getInternalNotes());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
