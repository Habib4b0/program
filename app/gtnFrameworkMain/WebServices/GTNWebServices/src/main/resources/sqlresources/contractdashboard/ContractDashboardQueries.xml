<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>

<sql>
	<entity id="getCDL1Results">
		<query>
        <![CDATA[
	select
	con.CONTRACT_ID,
	con.CONTRACT_NO,
	con.CONTRACT_NAME,
 	ht.DESCRIPTION,
	con.CONTRACT_MASTER_SID,
	con.START_DATE,
	con.END_DATE,
        compType='1',
        compCategory='Contract',
        con.CONTRACT_MASTER_SID as CONTRACT_MSID,
        con.CONTRACT_TYPE as TYPE_ID
from
	CONTRACT_MASTER con
				Left Join COMPANY_MASTER cm on
	cm.COMPANY_MASTER_SID = con.CONT_HOLD_COMPANY_MASTER_SID
				Left Join HELPER_TABLE ht on
	ht.HELPER_TABLE_SID = con.CONTRACT_TYPE AND ht.DESCRIPTION  NOT like '%Select One%'
where
	con.INBOUND_STATUS <> 'D'
?
	ORDER BY ?
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>

		</query>
	</entity>


	<entity id="getCDL1Count">
		<query>
        <![CDATA[
select
	COUNT(*)
from
	CONTRACT_MASTER con
				Left Join COMPANY_MASTER cm on
	cm.COMPANY_MASTER_SID = con.CONT_HOLD_COMPANY_MASTER_SID
				Left Join HELPER_TABLE ht on
	ht.HELPER_TABLE_SID = con.CONTRACT_TYPE
where
	con.INBOUND_STATUS <> 'D'
?
      ]]>
		</query>
	</entity>
	<entity id="getCDL2Results">
		<query>
        <![CDATA[
        select
	DISTINCT cf.CFP_ID,
	cf.CFP_NO,
	cf.CFP_NAME,
 ht.DESCRIPTION,
	cf.CFP_MODEL_SID,
	cf.CFP_START_DATE,
	cf.CFP_END_DATE,
        compType='2',
        compCategory='CFP',
        CONTRACT_MSID='0',
        cf.CFP_TYPE as TYPE_ID
from
	CFP_MODEL cf Join CFP_DETAILS cfd on
	cfd.CFP_MODEL_SID = cf.CFP_MODEL_SID Join COMPANY_MASTER cm on
	cm.COMPANY_MASTER_SID = cfd.COMPANY_MASTER_SID Left Join Helper_Table ht on
	ht.HELPER_TABLE_SID = cf.CFP_TYPE AND ht.DESCRIPTION  NOT like '%Select One%'
where
	cf.INBOUND_STATUS <> 'D'
        ?
	ORDER BY ?
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>


	<entity id="getCDL2Count">
		<query>
        <![CDATA[
        select
	COUNT(DISTINCT cf.CFP_MODEL_SID)
from
	CFP_MODEL cf Join CFP_DETAILS cfd on
	cfd.CFP_MODEL_SID = cf.CFP_MODEL_SID Join COMPANY_MASTER cm on
	cm.COMPANY_MASTER_SID = cfd.COMPANY_MASTER_SID Left Join Helper_Table ht on
	ht.HELPER_TABLE_SID = cf.CFP_TYPE
where
	cf.INBOUND_STATUS <> 'D'
        ?
        ]]>
		</query>
	</entity>
	<entity id="getCDL3Results">
		<query>
        <![CDATA[
        select
	DISTINCT ifm.IFP_ID,
	ifm.IFP_NO,
	ifm.IFP_NAME,
 ht.DESCRIPTION,
	ifm.IFP_MODEL_SID,
	ifm.IFP_START_DATE,
	ifm.IFP_END_DATE,
        compType='3',
        compCategory='IFP',
        CONTRACT_MSID='0',
        ifm.IFP_TYPE as TYPE_ID
from
	IFP_MODEL ifm Join IFP_DETAILS ifd on
	ifd.IFP_MODEL_SID = ifm.IFP_MODEL_SID Join ITEM_MASTER im on
	im.ITEM_MASTER_SID = ifd.ITEM_MASTER_SID Left Join HELPER_TABLE ht on
	ht.HELPER_TABLE_SID = ifm.IFP_TYPE AND ht.DESCRIPTION  NOT like '%Select One%'
where
	ifm.INBOUND_STATUS <> 'D'
        ?
	ORDER BY ?
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>


	<entity id="getCDL3Count">
		<query>
        <![CDATA[
        select
	COUNT(DISTINCT ifm.IFP_MODEL_SID)
from
	IFP_MODEL ifm Join IFP_DETAILS ifd on
	ifd.IFP_MODEL_SID = ifm.IFP_MODEL_SID Join ITEM_MASTER im on
	im.ITEM_MASTER_SID = ifd.ITEM_MASTER_SID Left Join HELPER_TABLE ht on
	ht.HELPER_TABLE_SID = ifm.IFP_TYPE
where
	ifm.INBOUND_STATUS <> 'D'
        ?
        ]]>
		</query>
	</entity>
	<entity id="getCDL4Results">
		<query>
        <![CDATA[
        select
	DISTINCT ps.PS_ID,
	ps.PS_NO,
	ps.PS_NAME,
        psType =
 ht.DESCRIPTION,
	ps.PS_MODEL_SID,
	ps.PS_START_DATE,
	ps.PS_END_DATE,
        compType='4',
        compCategory='PS',
        CONTRACT_MSID='0',
        ps.PS_TYPE as TYPE_ID
from
	PS_MODEL ps Join PS_DETAILS psd on
	psd.PS_MODEL_SID = ps.PS_MODEL_SID Join ITEM_MASTER im on
	im.ITEM_MASTER_SID = psd.ITEM_MASTER_SID Left Join HELPER_TABLE ht on
	ht.HELPER_TABLE_SID = ps.PS_TYPE AND ht.DESCRIPTION  NOT like '%Select One%'
where
	ps.INBOUND_STATUS <> 'D'
        ?
	ORDER BY ?
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>


	<entity id="getCDL4Count">
		<query>
        <![CDATA[
        select
	COUNT(DISTINCT ps.PS_MODEL_SID)
from
	PS_MODEL ps Join PS_DETAILS psd on
	psd.PS_MODEL_SID = ps.PS_MODEL_SID Join ITEM_MASTER im on
	im.ITEM_MASTER_SID = psd.ITEM_MASTER_SID Left Join HELPER_TABLE ht on
	ht.HELPER_TABLE_SID = ps.PS_TYPE
where
	ps.INBOUND_STATUS <> 'D'
        ?
        ]]>
		</query>
	</entity>
	<entity id="getCDL5Results">
		<query>
        <![CDATA[
        select
	DISTINCT
	rsm.RS_ID,
	rsm.RS_NO,
	rsm.RS_NAME,
	ht.DESCRIPTION,
	rsm.RS_MODEL_SID,
	rsm.RS_START_DATE,
	rsm.RS_END_DATE,
        compType='5',
        compCategory='RS',
        CONTRACT_MSID='0',
        rsm.RS_TYPE as TYPE_ID
from
	RS_MODEL rsm Join RS_DETAILS rsd on
	rsd.RS_MODEL_SID = rsm.RS_MODEL_SID Join ITEM_MASTER im on
	im.ITEM_MASTER_SID = rsd.ITEM_MASTER_SID Left Join HELPER_TABLE ht on
	ht.HELPER_TABLE_SID = rsm.RS_TYPE AND ht.DESCRIPTION  NOT like '%Select One%'
where
	rsm.INBOUND_STATUS <> 'D'
        ?
	ORDER BY ?
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>


	<entity id="getCDL5Count">
		<query>
        <![CDATA[
        select
	COUNT(DISTINCT rsm.RS_MODEL_SID)
from
	RS_MODEL rsm Join RS_DETAILS rsd on
	rsd.RS_MODEL_SID = rsm.RS_MODEL_SID Join ITEM_MASTER im on
	im.ITEM_MASTER_SID = rsd.ITEM_MASTER_SID Left Join HELPER_TABLE ht on
	ht.HELPER_TABLE_SID = rsm.RS_TYPE
where
	rsm.INBOUND_STATUS <> 'D'
        ?
        ]]>
		</query>
	</entity>


	<entity id="getCDL2DetailsResults">
		<query>
        <![CDATA[
select
	cm.COMPANY_NO,
	cm.COMPANY_NAME,
 htType.DESCRIPTION as COMPANY_TYPE,
 htCategory.DESCRIPTION as COMPANY_CATEGORY,
 htStatus.DESCRIPTION as CFP_STATUS,
        startDate=cfd.COMPANY_START_DATE,
        endDate=cfd.COMPANY_END_DATE
from
	CFP_DETAILS cfd Join CFP_MODEL cf on
	cf.CFP_MODEL_SID = cfd.CFP_MODEL_SID Join COMPANY_MASTER cm on
	cm.COMPANY_MASTER_SID = cfd.COMPANY_MASTER_SID
	Left Join Helper_Table htType on
	htType.HELPER_TABLE_SID = cm.COMPANY_TYPE AND htType.DESCRIPTION  NOT like '%Select One%'
	Left Join Helper_Table htCategory on
	htCategory.HELPER_TABLE_SID = cm.COMPANY_CATEGORY AND htCategory.DESCRIPTION  NOT like '%Select One%'
	Left Join Helper_Table htStatus on
	htStatus.HELPER_TABLE_SID = cf.CFP_STATUS AND htStatus.DESCRIPTION  NOT like '%Select One%'
where
	cfd.INBOUND_STATUS <> 'D'
        ?
        ORDER BY ?
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getCDL2DetailsCount">
		<query>
        <![CDATA[
select
	count(cfd.CFP_DETAILS_SID)
from
	CFP_DETAILS cfd Join CFP_MODEL cf on
	cf.CFP_MODEL_SID = cfd.CFP_MODEL_SID Join COMPANY_MASTER cm on
	cm.COMPANY_MASTER_SID = cfd.COMPANY_MASTER_SID Left Join Helper_Table htType on
	htType.HELPER_TABLE_SID = cm.COMPANY_TYPE Left Join Helper_Table htCategory on
	htCategory.HELPER_TABLE_SID = cm.COMPANY_CATEGORY Left Join Helper_Table htStatus on
	htStatus.HELPER_TABLE_SID = cf.CFP_STATUS
where
	cfd.INBOUND_STATUS <> 'D'
        ?
        ]]>
		</query>
	</entity>
	<entity id="getCDL3DetailsResults">
		<query>
        <![CDATA[
select
	im.ITEM_NO,
	im.ITEM_NAME,
        ifpType='',
        ifpCategory='',
 htStatus.DESCRIPTION,
	ifm.IFP_START_DATE,
	ifm.IFP_END_DATE
from
	IFP_DETAILS ifd Join IFP_MODEL ifm on
	ifm.IFP_MODEL_SID = ifd.IFP_MODEL_SID Join ITEM_MASTER im on
	im.ITEM_MASTER_SID = ifd.ITEM_MASTER_SID Left Join Helper_Table htStatus on
	htStatus.HELPER_TABLE_SID = ifm.IFP_STATUS AND htStatus.DESCRIPTION  NOT like '%Select One%'
where
	ifd.INBOUND_STATUS <> 'D'
        ?
        ORDER BY ?
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getCDL3DetailsCount">
		<query>
        <![CDATA[
select
	count(ifd.IFP_DETAILS_SID)
from
	IFP_DETAILS ifd Join IFP_MODEL ifm on
	ifm.IFP_MODEL_SID = ifd.IFP_MODEL_SID Join ITEM_MASTER im on
	im.ITEM_MASTER_SID = ifd.ITEM_MASTER_SID Left Join Helper_Table htStatus on
	htStatus.HELPER_TABLE_SID = ifm.IFP_STATUS
where
	ifd.INBOUND_STATUS <> 'D'
        ?
        ]]>
		</query>
	</entity>
	<entity id="getCDL4DetailsResults">
		<query>
        <![CDATA[
select
	im.ITEM_NO,
	im.ITEM_NAME,
        psType='',
        psCategory='',
htStatus.DESCRIPTION,
	ps.PS_START_DATE,
	ps.PS_END_DATE
from
	PS_DETAILS psd Join PS_MODEL ps on
	ps.PS_MODEL_SID = psd.PS_MODEL_SID Join ITEM_MASTER im on
	im.ITEM_MASTER_SID = psd.ITEM_MASTER_SID Left Join Helper_Table htStatus on
	htStatus.HELPER_TABLE_SID = ps.PS_STATUS
where
	psd.INBOUND_STATUS <> 'D'
        ?
        ORDER BY ?
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getCDL4DetailsCount">
		<query>
        <![CDATA[
select
	count(psd.PS_DETAILS_SID)
from
	PS_DETAILS psd Join PS_MODEL ps on
	ps.PS_MODEL_SID = psd.PS_MODEL_SID Join ITEM_MASTER im on
	im.ITEM_MASTER_SID = psd.ITEM_MASTER_SID Left Join Helper_Table htStatus on
	htStatus.HELPER_TABLE_SID = ps.PS_STATUS
where
	psd.INBOUND_STATUS <> 'D'
        ?
        ]]>
		</query>
	</entity>
	<entity id="getCDL5DetailsResults">
		<query>
        <![CDATA[
select
	im.ITEM_NO,
	im.ITEM_NAME,
        rsType='',
        rsCategory='',
		 htStatus.DESCRIPTION,
	rs.RS_START_DATE,
	rs.RS_END_DATE
from
	RS_DETAILS rsd Join RS_MODEL rs on
	rs.RS_MODEL_SID = rsd.RS_MODEL_SID Join ITEM_MASTER im on
	im.ITEM_MASTER_SID = rsd.ITEM_MASTER_SID Left Join Helper_Table htStatus on
	htStatus.HELPER_TABLE_SID = rs.RS_STATUS AND htStatus.DESCRIPTION  NOT like '%Select One%'
where
	rsd.INBOUND_STATUS <> 'D'
        ?
        ORDER BY ?
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getCDL5DetailsCount">
		<query>
        <![CDATA[
select
	count(rsd.RS_DETAILS_SID)
from
	RS_DETAILS rsd Join RS_MODEL rs on
	rs.RS_MODEL_SID = rsd.RS_MODEL_SID Join ITEM_MASTER im on
	im.ITEM_MASTER_SID = rsd.ITEM_MASTER_SID Left Join Helper_Table htStatus on
	htStatus.HELPER_TABLE_SID = rs.RS_STATUS
where
	rsd.INBOUND_STATUS <> 'D'
        ?
        ]]>
		</query>
	</entity>
	<entity id="getCD2Validation">
		<query>
        <![CDATA[
        SELECT
	CM.COMPANY_ID
FROM
	CFP_DETAILS CD
JOIN COMPANY_MASTER CM ON
	CM.COMPANY_MASTER_SID = CD.COMPANY_MASTER_SID
WHERE
	CD.INBOUND_STATUS <> 'D'
	AND CD.CFP_MODEL_SID = ?
	AND(
		(
			CD.COMPANY_START_DATE < '?'
			AND CD.COMPANY_END_DATE < '?'
		)
		OR(
			CD.COMPANY_START_DATE > ?
		)
	);
        ]]>
		</query>
	</entity>
	<entity id="getCD3Validation">
		<query>
        <![CDATA[
        SELECT
	IM.ITEM_ID
FROM
	IFP_DETAILS ID
JOIN ITEM_MASTER IM ON
	IM.ITEM_MASTER_SID = ID.ITEM_MASTER_SID
WHERE
	ID.INBOUND_STATUS <> 'D'
	AND ID.IFP_MODEL_SID = ?
	AND(
		(
			ID.START_DATE < '?'
			AND ID.END_DATE < '?'
		)
		OR(
			ID.START_DATE > ?
		)
	);
        ]]>
		</query>
	</entity>
	<entity id="getCD4Validation">
		<query>
        <![CDATA[
SELECT
	IM.ITEM_ID
FROM
	dbo.PS_DETAILS PD
JOIN ITEM_MASTER IM ON
	IM.ITEM_MASTER_SID = PD.ITEM_MASTER_SID
WHERE
	PD.INBOUND_STATUS NOT IN('D')
	AND PD.PS_MODEL_SID = ?
	AND(
		(
			PD.CONTRACT_PRICE_START_DATE < '?'
			AND PD.CONTRACT_PRICE_END_DATE < '?'
		)
		OR(
			PD.CONTRACT_PRICE_START_DATE > ?
		)
	);
        ]]>
		</query>
	</entity>
	<entity id="getCD5Validation">
		<query>
        <![CDATA[
SELECT
	IM.ITEM_ID
FROM
	dbo.RS_DETAILS RD
JOIN ITEM_MASTER IM ON
	IM.ITEM_MASTER_SID = RD.ITEM_MASTER_SID
WHERE
	RD.INBOUND_STATUS NOT IN('D')
	AND RD.RS_MODEL_SID = ?
	AND(
		(
			RD.ITEM_REBATE_START_DATE < '?'
			AND RD.ITEM_REBATE_END_DATE < '?'
		)
		OR(
			RD.ITEM_REBATE_START_DATE > ?
		)
	);
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.saveCFP">
		<query>
        <![CDATA[
         DECLARE @CFP_START_DATE DATETIME =CAST( ? as DATETIME),
            @CFP_END_DATE DATETIME= ?,
            @USERS_ID VARCHAR(10)= ?
        
         MERGE CFP_CONTRACT_DETAILS AS Target USING
         (SELECT ? CFP_CONTRACT_SID,
                   COMPANY_MASTER_SID,
                   COMPANY_START_DATE = CASE
                              WHEN COMPANY_START_DATE <= @CFP_START_DATE THEN @CFP_START_DATE
                              ELSE COMPANY_START_DATE
                            END,
                   COMPANY_END_DATE = CASE
                            WHEN ( COMPANY_END_DATE IS NULL
                                   AND @CFP_END_DATE IS NULL ) THEN NULL
                            WHEN ( COMPANY_END_DATE IS NULL
                                   AND @CFP_END_DATE IS NOT NULL ) THEN @CFP_END_DATE
                            WHEN COMPANY_END_DATE >= @CFP_END_DATE THEN @CFP_END_DATE
                            ELSE COMPANY_END_DATE
                          END,
                   COMPANY_CFP_ATTACHED_STATUS,
                   TRADE_CLASS,
                   TRADE_CLASS_START_DATE,
                   TRADE_CLASS_END_DATE,
                   @USERS_ID CREATED_BY,
                   CAST( ? as DATETIME) CREATED_DATE,
                   @USERS_ID MODIFIED_BY,
                   CAST( ? as DATETIME) MODIFIED_DATE,
                   'A' INBOUND_STATUS,
                   'false' RECORD_LOCK_STATUS FROM dbo.CFP_DETAILS
        WHERE INBOUND_STATUS NOT IN('D') AND CFP_MODEL_SID=? AND ( COMPANY_START_DATE >= @CFP_START_DATE OR COMPANY_START_DATE <= @CFP_START_DATE )
        AND ( COMPANY_START_DATE <= @CFP_END_DATE OR @CFP_END_DATE IS NULL ) AND ( COMPANY_END_DATE >= @CFP_START_DATE OR COMPANY_END_DATE IS NULL )) AS Source

        ON (Target.CFP_CONTRACT_SID = Source.CFP_CONTRACT_SID AND Target.COMPANY_MASTER_SID=Source.COMPANY_MASTER_SID  AND
        	Target.COMPANY_START_DATE=Source.COMPANY_START_DATE)
        WHEN MATCHED THEN

        UPDATE SET
        Target.COMPANY_START_DATE=Source.COMPANY_START_DATE,
        Target.COMPANY_END_DATE = Source.COMPANY_END_DATE,
        Target.CFP_CONTRACT_ATTACHED_STATUS=Source.COMPANY_CFP_ATTACHED_STATUS,
        Target.TRADE_CLASS = Source.TRADE_CLASS,
       	Target.TRADE_CLASS_START_DATE = Source.TRADE_CLASS_START_DATE,
        Target.TRADE_CLASS_END_DATE = Source.TRADE_CLASS_END_DATE,
        Target.CREATED_BY = Source.CREATED_BY,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.INBOUND_STATUS = 'A',
        Target.RECORD_LOCK_STATUS = 0

        WHEN NOT matched THEN

  		INSERT(CFP_CONTRACT_SID, COMPANY_MASTER_SID, COMPANY_START_DATE, COMPANY_END_DATE,CFP_CONTRACT_ATTACHED_STATUS,
        TRADE_CLASS, TRADE_CLASS_START_DATE, TRADE_CLASS_END_DATE, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, INBOUND_STATUS, RECORD_LOCK_STATUS)
  		VALUES(Source.CFP_CONTRACT_SID, Source.COMPANY_MASTER_SID, Source.COMPANY_START_DATE,Source.COMPANY_END_DATE,Source.COMPANY_CFP_ATTACHED_STATUS,
        Source.TRADE_CLASS, Source.TRADE_CLASS_START_DATE, Source.TRADE_CLASS_END_DATE, Source.CREATED_BY, Source.CREATED_DATE, Source.MODIFIED_BY,
         Source.MODIFIED_DATE, 'A', 0);



        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.saveIFP">
		<query>
       <![CDATA[

		 DECLARE @IFP_START_DATE DATETIME =CAST( ? as DATETIME),
         @IFP_END_DATE DATETIME= ?,
         @ATTACHDATE DATETIME=?,
         @USERS_ID VARCHAR(10)= ?
         
            
         MERGE IFP_CONTRACT_DETAILS AS Target USING
         (SELECT ? IFP_CONTRACT_SID,
            A.ITEM_MASTER_SID,
            START_DATE = CASE
                              WHEN A.START_DATE <= @IFP_START_DATE THEN @IFP_START_DATE
                              ELSE A.START_DATE
                            END,
            END_DATE = CASE
                            WHEN ( A.END_DATE IS NULL
                                   AND @IFP_END_DATE IS NULL ) THEN NULL
                            WHEN ( A.END_DATE IS NULL
                                   AND @IFP_END_DATE IS NOT NULL ) THEN @IFP_END_DATE
                            WHEN A.END_DATE >= @IFP_END_DATE THEN @IFP_END_DATE
                            ELSE A.END_DATE
                          END,
            IM.ITEM_STATUS,
            @USERS_ID CREATED_BY,
            CAST( ? as DATETIME) CREATED_DATE,
            @USERS_ID MODIFIED_BY,
            CAST( ? as DATETIME) MODIFIED_DATE,
            'A' INBOUND_STATUS,
            'false' RECORD_LOCK_STATUS,
            @ATTACHDATE ATTACH_DATE
        FROM dbo.IFP_DETAILS A
        JOIN   ITEM_MASTER IM ON IM.ITEM_MASTER_SID = A.ITEM_MASTER_SID
        WHERE A.INBOUND_STATUS NOT IN('D') AND A.IFP_MODEL_SID=?
        AND ( A.START_DATE >= @IFP_START_DATE
              OR A.START_DATE <= @IFP_START_DATE )
       AND ( A.START_DATE <= @IFP_END_DATE
              OR @IFP_END_DATE IS NULL )
       AND ( A.END_DATE >= @IFP_START_DATE
              OR A.END_DATE IS NULL )) AS Source

        ON (Target.IFP_CONTRACT_SID = Source.IFP_CONTRACT_SID AND Target.ITEM_MASTER_SID=Source.ITEM_MASTER_SID  AND
        	Target.ITEM_START_DATE = Source.START_DATE)

        WHEN MATCHED THEN

        UPDATE SET
        Target.ITEM_START_DATE = Source.START_DATE,
       	Target.ITEM_END_DATE = Source.END_DATE,
        Target.ITEM_STATUS= Source.ITEM_STATUS,
        Target.CREATED_BY = Source.CREATED_BY,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.INBOUND_STATUS = 'A',
        Target.RECORD_LOCK_STATUS = 0 ,
        IFP_CONTRACT_ATTACHED_DATE = Source.ATTACH_DATE

        WHEN NOT matched THEN

  		INSERT(IFP_CONTRACT_SID, ITEM_MASTER_SID, ITEM_START_DATE, ITEM_END_DATE,  ITEM_STATUS,
        CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, INBOUND_STATUS, RECORD_LOCK_STATUS, IFP_CONTRACT_ATTACHED_DATE)
  		VALUES(Source.IFP_CONTRACT_SID, Source.ITEM_MASTER_SID, Source.START_DATE,Source.END_DATE, Source.ITEM_STATUS,
        Source.CREATED_BY, Source.CREATED_DATE, Source.MODIFIED_BY, Source.MODIFIED_DATE, 'A', 0, Source.ATTACH_DATE);

        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.savePS">
		<query>
        <![CDATA[
        
        DECLARE @PS_START_DATE DATETIME =CAST( ? as DATETIME),
         @PS_END_DATE DATETIME= ?,
         @ATTACHDATE DATETIME=?,
         @USERS_ID VARCHAR(10)= ?

         MERGE PS_CONTRACT_DETAILS AS Target USING
         (SELECT ? PS_CONTRACT_SID,
            ITEM_MASTER_SID,
            CONTRACT_PRICE_START_DATE= CASE
                              WHEN CONTRACT_PRICE_START_DATE <= @PS_START_DATE THEN @PS_START_DATE
                              ELSE CONTRACT_PRICE_START_DATE
                            END,
            CONTRACT_PRICE_END_DATE= CASE
                            WHEN ( CONTRACT_PRICE_END_DATE IS NULL
                                   AND @PS_END_DATE IS NULL ) THEN NULL
                            WHEN ( CONTRACT_PRICE_END_DATE IS NULL
                                   AND @PS_END_DATE IS NOT NULL ) THEN @PS_END_DATE
                            WHEN CONTRACT_PRICE_END_DATE >= @PS_END_DATE THEN @PS_END_DATE
                            ELSE CONTRACT_PRICE_END_DATE
                          END,
            CONTRACT_PRICE,
            PRICE_REVISION,
            REVISION_DATE,
            PRICE_PROTECTION_START_DATE ,
            PRICE_PROTECTION_END_DATE,
            PRICE_TOLERANCE_TYPE,
            PRICE_TOLERANCE,
            BASE_PRICE,
            PRICE_TOLERANCE_FREQUENCY ,
            PRICE_TOLERANCE_INTERVAL,
            SUGGESTED_PRICE,
            ITEM_PRICING_QUALIFIER_SID,
       @USERS_ID CREATED_BY, CAST( ? as DATETIME) CREATED_DATE, @USERS_ID MODIFIED_BY, CAST( ? as DATETIME) MODIFIED_DATE, PRICE, 'A' INBOUND_STATUS, 'false' RECORD_LOCK_STATUS ,
            BRAND_MASTER_SID,
NEP,
PRICE_PROTECTION_STATUS,
PRICE_PROTECTION_PRICE_TYPE,
NEP_FORMULA,
MAX_INCREMENTAL_CHANGE,
RESET_ELIGIBLE,
RESET_TYPE,
RESET_DATE,
RESET_INTERVAL,
RESET_FREQUENCY,
NET_PRICE_TYPE,
NET_PRICE_TYPE_FORMULA,
Base_Price_Type,
Base_Price_Entry,
Base_Price_Date,
Net_Base_Price,
Base_Price_ddlb,
Net_Base_Price_Formula_ID,
Subsequent_Period_Price_Type,
Net_Subsequent_Period_price,
Net_Subsequent_Price_Formula_Id,
Reset_Price_Type,
Net_Reset_Price_Type,
Net_Reset_Price_Formula_Id,
STATUS,
@ATTACHDATE ATTACH_DATE,
PPA_INDEX_NO,
ADD_COPY_INDICATOR
        FROM dbo.PS_DETAILS
        WHERE INBOUND_STATUS NOT IN('D') AND PS_MODEL_SID=?
        AND ITEM_PRICING_QUALIFIER_SID IS NOT NULL
        AND ( CONTRACT_PRICE_START_DATE >= @PS_START_DATE
              OR CONTRACT_PRICE_START_DATE <= @PS_START_DATE )
       AND ( CONTRACT_PRICE_START_DATE <= @PS_END_DATE
              OR @PS_END_DATE IS NULL )
       AND ( CONTRACT_PRICE_END_DATE >= @PS_START_DATE
              OR CONTRACT_PRICE_END_DATE IS NULL )) AS Source

        ON (Target.PS_CONTRACT_SID = Source.PS_CONTRACT_SID AND Target.ITEM_MASTER_SID=Source.ITEM_MASTER_SID  AND
        	Target.CONTRACT_PRICE_START_DATE=Source.CONTRACT_PRICE_START_DATE
AND Target.PPA_INDEX_NO=Source.PPA_INDEX_NO)

        WHEN MATCHED THEN

        UPDATE SET
        Target.CONTRACT_PRICE_START_DATE=Source.CONTRACT_PRICE_START_DATE,
        Target.CONTRACT_PRICE_END_DATE = Source.CONTRACT_PRICE_END_DATE,
        Target.CONTRACT_PRICE = Source.CONTRACT_PRICE,
       	Target.PRICE_REVISION = Source.PRICE_REVISION,
        Target.REVISION_DATE = Source.REVISION_DATE,
        Target.PRICE_PROTECTION_START_DATE = Source.PRICE_PROTECTION_START_DATE,
        Target.PRICE_TOLERANCE_TYPE = Source.PRICE_TOLERANCE_TYPE,
        Target.PRICE_TOLERANCE = Source.PRICE_TOLERANCE,
        Target.BASE_PRICE = Source.BASE_PRICE,
        Target.PRICE = Source.PRICE,
        Target.PRICE_TOLERANCE_FREQUENCY = Source.PRICE_TOLERANCE_FREQUENCY,
        Target.PRICE_TOLERANCE_INTERVAL = Source.PRICE_TOLERANCE_INTERVAL,
        Target.SUGGESTED_PRICE = Source.SUGGESTED_PRICE,
        Target.ITEM_PRICING_QUALIFIER_SID = Source.ITEM_PRICING_QUALIFIER_SID,
        Target.CREATED_BY = Source.CREATED_BY,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.INBOUND_STATUS = 'A',
        Target.RECORD_LOCK_STATUS = 0,
        Target.BRAND_MASTER_SID = Source.BRAND_MASTER_SID,
        Target.NEP = Source.NEP,
        Target.PRICE_PROTECTION_STATUS = Source.PRICE_PROTECTION_STATUS,
        Target.PRICE_PROTECTION_PRICE_TYPE = Source.PRICE_PROTECTION_PRICE_TYPE,
        Target.NEP_FORMULA = Source.NEP_FORMULA,
        Target.MAX_INCREMENTAL_CHANGE = Source.MAX_INCREMENTAL_CHANGE,
        Target.RESET_ELIGIBLE = Source.RESET_ELIGIBLE,
        Target.RESET_TYPE = Source.RESET_TYPE,
        Target.RESET_DATE = Source.RESET_DATE,
        Target.RESET_INTERVAL = Source.RESET_INTERVAL,
        Target.RESET_FREQUENCY = Source.RESET_FREQUENCY,
        Target.NET_PRICE_TYPE = Source.NET_PRICE_TYPE,
        Target.NET_PRICE_TYPE_FORMULA = Source.NET_PRICE_TYPE_FORMULA,
        Target.Base_Price_Type = Source.Base_Price_Type,
        Target.Base_Price_Entry = Source.Base_Price_Entry,
        Target.Base_Price_Date = Source.Base_Price_Date,
        Target.Net_Base_Price = Source.Net_Base_Price,
        Target.Base_Price_ddlb = Source.Base_Price_ddlb,
        Target.Net_Base_Price_Formula_ID = Source.Net_Base_Price_Formula_ID,
        Target.Subsequent_Period_Price_Type = Source.Subsequent_Period_Price_Type,
        Target.Net_Subsequent_Period_price = Source.Net_Subsequent_Period_price,
        Target.Net_Subsequent_Price_Formula_Id = Source.Net_Subsequent_Price_Formula_Id,
        Target.Reset_Price_Type = Source.Reset_Price_Type,
        Target.Net_Reset_Price_Type = Source.Net_Reset_Price_Type,
        Target.Net_Reset_Price_Formula_Id = Source.Net_Reset_Price_Formula_Id,
        Target.PS_CONTRACT_ATTACHED_STATUS = Source.STATUS,
        Target.PS_CONTRACT_ATTACHED_DATE = Source.ATTACH_DATE,
        Target.ADD_COPY_INDICATOR=Source.ADD_COPY_INDICATOR

        WHEN NOT matched THEN

  		INSERT(PS_CONTRACT_SID, ITEM_MASTER_SID, CONTRACT_PRICE_START_DATE, CONTRACT_PRICE_END_DATE, CONTRACT_PRICE,
        PRICE_REVISION, REVISION_DATE, PRICE_PROTECTION_START_DATE ,PRICE_PROTECTION_END_DATE, PRICE_TOLERANCE_TYPE, PRICE_TOLERANCE, BASE_PRICE, PRICE_TOLERANCE_FREQUENCY ,
        PRICE_TOLERANCE_INTERVAL, SUGGESTED_PRICE, ITEM_PRICING_QUALIFIER_SID,
        CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, PRICE, INBOUND_STATUS, RECORD_LOCK_STATUS,
        BRAND_MASTER_SID,NEP,PRICE_PROTECTION_STATUS,PRICE_PROTECTION_PRICE_TYPE,NEP_FORMULA,MAX_INCREMENTAL_CHANGE,RESET_ELIGIBLE,RESET_TYPE,RESET_DATE,RESET_INTERVAL,
        RESET_FREQUENCY,NET_PRICE_TYPE,NET_PRICE_TYPE_FORMULA,Base_Price_Type,Base_Price_Entry,Base_Price_Date,Net_Base_Price,Base_Price_ddlb,Net_Base_Price_Formula_ID,Subsequent_Period_Price_Type,
        Net_Subsequent_Period_price,Net_Subsequent_Price_Formula_Id,Reset_Price_Type,Net_Reset_Price_Type,Net_Reset_Price_Formula_Id, PS_CONTRACT_ATTACHED_STATUS, PS_CONTRACT_ATTACHED_DATE
        ,PPA_INDEX_NO,ADD_COPY_INDICATOR)

  		VALUES(Source.PS_CONTRACT_SID, Source.ITEM_MASTER_SID, Source.CONTRACT_PRICE_START_DATE, Source.CONTRACT_PRICE_END_DATE, Source.CONTRACT_PRICE,
        Source.PRICE_REVISION, Source.REVISION_DATE, Source.PRICE_PROTECTION_START_DATE ,Source.PRICE_PROTECTION_END_DATE, Source.PRICE_TOLERANCE_TYPE,
        Source.PRICE_TOLERANCE, Source.BASE_PRICE, Source.PRICE_TOLERANCE_FREQUENCY ,
        Source.PRICE_TOLERANCE_INTERVAL, Source.SUGGESTED_PRICE, Source.ITEM_PRICING_QUALIFIER_SID,
        Source.CREATED_BY, Source.CREATED_DATE, Source.MODIFIED_BY, Source.MODIFIED_DATE, Source.PRICE,'A', 0,
        Source.BRAND_MASTER_SID,Source.NEP,Source.PRICE_PROTECTION_STATUS,Source.PRICE_PROTECTION_PRICE_TYPE,Source.NEP_FORMULA,Source.MAX_INCREMENTAL_CHANGE,Source.RESET_ELIGIBLE,Source.RESET_TYPE,Source.RESET_DATE,
        Source.RESET_INTERVAL,Source.RESET_FREQUENCY,Source.NET_PRICE_TYPE,Source.NET_PRICE_TYPE_FORMULA,Source.Base_Price_Type,Source.Base_Price_Entry,Source.Base_Price_Date,Source.Net_Base_Price,Source.Base_Price_ddlb,Source.Net_Base_Price_Formula_ID,
        Source.Subsequent_Period_Price_Type,Source.Net_Subsequent_Period_price,Source.Net_Subsequent_Price_Formula_Id,Source.Reset_Price_Type,Source.Net_Reset_Price_Type,Source.Net_Reset_Price_Formula_Id, Source.STATUS, Source.ATTACH_DATE,Source.PPA_INDEX_NO,Source.ADD_COPY_INDICATOR
        );



        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.saveRS">
		<query>
        <![CDATA[

		 DECLARE @RS_START_DATE DATETIME =CAST( ? as DATETIME),
         @RS_END_DATE DATETIME= ?,
         @ATTACHDATE DATETIME=?,
         @USERS_ID VARCHAR(10)= ?
		
         MERGE RS_CONTRACT_DETAILS AS Target USING
         (SELECT ? RS_CONTRACT_SID,
            ITEM_MASTER_SID,
            ITEM_REBATE_START_DATE = CASE
                    WHEN ITEM_REBATE_START_DATE <= @RS_START_DATE THEN @RS_START_DATE
                    ELSE ITEM_REBATE_START_DATE
                    END,
            ITEM_REBATE_END_DATE = CASE
                    WHEN ( ITEM_REBATE_END_DATE IS NULL
                    AND @RS_END_DATE IS NULL ) THEN NULL
                    WHEN ( ITEM_REBATE_END_DATE IS NULL
                    AND @RS_END_DATE IS NOT NULL ) THEN @RS_END_DATE
                    WHEN ITEM_REBATE_END_DATE >= @RS_END_DATE THEN @RS_END_DATE
                    ELSE ITEM_REBATE_END_DATE
                    END,
            FORMULA_ID,
            REBATE_PLAN_MASTER_SID,
            REBATE_AMOUNT,
            BUNDLE_NO,
        @USERS_ID CREATED_BY, CAST( ? as DATETIME) CREATED_DATE, @USERS_ID MODIFIED_BY, CAST( ? as DATETIME) MODIFIED_DATE, 'A' INBOUND_STATUS, FORMULA_METHOD_ID, 'false' RECORD_LOCK_STATUS
        , nullif(DEDUCTION_CALENDAR_MASTER_SID,0) as DEDUCTION_CALENDAR_MASTER_SID, nullif(NET_SALES_FORMULA_MASTER_SID,0) as NET_SALES_FORMULA_MASTER_SID, FORMULA_TYPE, NET_SALES_RULE, EVALUATION_RULE, EVALUATION_RULE_BUNDLE, CALCULATION_RULE, CALCULATION_RULE_BUNDLE, ITEM_RS_ATTACHED_STATUS, @ATTACHDATE ATTACH_DATE
        FROM dbo.RS_DETAILS
        WHERE INBOUND_STATUS NOT IN('D') AND RS_MODEL_SID=?
        AND ( ITEM_REBATE_START_DATE >= @RS_START_DATE
              OR ITEM_REBATE_START_DATE <= @RS_START_DATE )
        AND ( ITEM_REBATE_START_DATE <= @RS_END_DATE
              OR @RS_END_DATE IS NULL )
        AND ( ITEM_REBATE_END_DATE >= @RS_START_DATE
              OR ITEM_REBATE_END_DATE IS NULL )) AS Source

        ON (Target.RS_CONTRACT_SID = Source.RS_CONTRACT_SID AND Target.ITEM_MASTER_SID=Source.ITEM_MASTER_SID  AND
        	Target.ITEM_REBATE_START_DATE = Source.ITEM_REBATE_START_DATE)

        WHEN MATCHED THEN

        UPDATE SET
        Target.ITEM_REBATE_START_DATE=Source.ITEM_REBATE_START_DATE,
        Target.ITEM_REBATE_END_DATE = Source.ITEM_REBATE_END_DATE,
        Target.FORMULA_ID = Source.FORMULA_ID,
       	Target.REBATE_PLAN_MASTER_SID = Source.REBATE_PLAN_MASTER_SID,
        Target.REBATE_AMOUNT = Source.REBATE_AMOUNT,
        Target.BUNDLE_NO = Source.BUNDLE_NO,

        Target.CREATED_BY = Source.CREATED_BY,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.INBOUND_STATUS = 'A',
        Target.FORMULA_METHOD_ID=Source.FORMULA_METHOD_ID,
        Target.RECORD_LOCK_STATUS = 0,
        Target.DEDUCTION_CALENDAR_MASTER_SID = Source.DEDUCTION_CALENDAR_MASTER_SID,
        Target.NET_SALES_FORMULA_MASTER_SID = Source.NET_SALES_FORMULA_MASTER_SID,
        Target.FORMULA_TYPE = Source.FORMULA_TYPE,
        Target.NET_SALES_RULE = Source.NET_SALES_RULE,
        Target.EVALUATION_RULE = Source.EVALUATION_RULE,
        Target.EVALUATION_RULE_BUNDLE = Source.EVALUATION_RULE_BUNDLE,
        Target.CALCULATION_RULE = Source.CALCULATION_RULE,
        Target.CALCULATION_RULE_BUNDLE = Source.CALCULATION_RULE_BUNDLE,
        Target.RS_CONTRACT_ATTACHED_STATUS = Source.ITEM_RS_ATTACHED_STATUS,
        Target.RS_CONTRACT_ATTACHED_DATE = Source.ATTACH_DATE

        WHEN NOT matched THEN

  		INSERT(RS_CONTRACT_SID, ITEM_MASTER_SID, ITEM_REBATE_START_DATE, ITEM_REBATE_END_DATE, FORMULA_ID, REBATE_PLAN_MASTER_SID,
        REBATE_AMOUNT, BUNDLE_NO,
        CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, INBOUND_STATUS, FORMULA_METHOD_ID, RECORD_LOCK_STATUS
        , DEDUCTION_CALENDAR_MASTER_SID, NET_SALES_FORMULA_MASTER_SID, FORMULA_TYPE, NET_SALES_RULE, EVALUATION_RULE, EVALUATION_RULE_BUNDLE, CALCULATION_RULE, CALCULATION_RULE_BUNDLE, RS_CONTRACT_ATTACHED_STATUS, RS_CONTRACT_ATTACHED_DATE)
  		VALUES(Source.RS_CONTRACT_SID, Source.ITEM_MASTER_SID, Source.ITEM_REBATE_START_DATE, Source.ITEM_REBATE_END_DATE,
  		 Source.FORMULA_ID, Source.REBATE_PLAN_MASTER_SID, Source.REBATE_AMOUNT, Source.BUNDLE_NO,
        Source.CREATED_BY, Source.CREATED_DATE, Source.MODIFIED_BY, Source.MODIFIED_DATE, 'A', Source.FORMULA_METHOD_ID, 0
        , nullif(Source.DEDUCTION_CALENDAR_MASTER_SID,0), nullif(Source.NET_SALES_FORMULA_MASTER_SID,0), Source.FORMULA_TYPE, Source.NET_SALES_RULE, Source.EVALUATION_RULE, Source.EVALUATION_RULE_BUNDLE, Source.CALCULATION_RULE, Source.CALCULATION_RULE_BUNDLE, Source.ITEM_RS_ATTACHED_STATUS, Source.ATTACH_DATE);
        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.saveFormulaRS">
		<query>
        <![CDATA[
         DECLARE @CONT_RS_SID VARCHAR(15) =?,
         @ITEM_MAS_SID VARCHAR(15)= ?,
         @RS_SID VARCHAR(15)=?
        
        MERGE RS_CONTRACT_DETAILS_FR AS T
	USING RS_DETAILS_FR AS S ON
(
	T.RS_CONTRACT_DETAILS_SID = @CONT_RS_SID
	AND T.ITEM_MASTER_SID = @ITEM_MAS_SID
)
WHEN NOT MATCHED BY TARGET
AND S.RS_DETAILS_SID = @RS_SID
AND S.ITEM_MASTER_SID = @ITEM_MAS_SID
AND S.INBOUND_STATUS <> 'D' THEN INSERT
	(
		RS_CONTRACT_DETAILS_SID,
		ITEM_MASTER_SID,
		FORMULA_ID,
		FORMULA_METHOD_ID,
		INBOUND_STATUS,
		RECORD_LOCK_STATUS,
		CREATED_BY,
		MODIFIED_BY
	)
VALUES(
	@CONT_RS_SID,
	@ITEM_MAS_SID,
	S.FORMULA_ID,
	S.FORMULA_METHOD_ID,
	'A',
	'false',
	S.CREATED_BY,
	S.MODIFIED_BY
)
WHEN MATCHED
AND S.RS_DETAILS_SID = @RS_SID
AND S.ITEM_MASTER_SID = @ITEM_MAS_SID
AND S.INBOUND_STATUS <> 'D' THEN UPDATE
SET
	T.RS_CONTRACT_DETAILS_SID = @CONT_RS_SID,
	T.ITEM_MASTER_SID = @ITEM_MAS_SID,
	T.FORMULA_ID = S.FORMULA_ID,
	T.FORMULA_METHOD_ID = S.FORMULA_METHOD_ID,
	T.INBOUND_STATUS = 'U',
	T.RECORD_LOCK_STATUS = 'false',
	T.CREATED_BY = S.CREATED_BY,
	T.MODIFIED_BY = S.MODIFIED_BY;
        ]]>

		</query>
	</entity>


	<entity id="getCDR1Count">
		<query>
        <![CDATA[
        select
	count( * )
from
	(
		select
			DISTINCT cm.CONTRACT_MASTER_SID,
			cm.CONTRACT_ID,
			cm.CONTRACT_NO,
			cm.CONTRACT_NAME,
			cm.START_DATE,
			cm.END_DATE
		from
			dbo.CONTRACT_MASTER cm Left Join dbo.CFP_CONTRACT cfc on
			cfc.CONTRACT_MASTER_SID = cm.CONTRACT_MASTER_SID
			and cfc.INBOUND_STATUS <> 'D' Left Join dbo.CFP_CONTRACT_DETAILS cfd on
			cfd.CFP_CONTRACT_SID = cfc.CFP_CONTRACT_SID
			and cfd.INBOUND_STATUS <> 'D' Left Join dbo.IFP_CONTRACT ifc on
			ifc.CONTRACT_MASTER_SID = cm.CONTRACT_MASTER_SID
			and ifc.INBOUND_STATUS <> 'D' Left Join dbo.IFP_CONTRACT_DETAILS ifd on
			ifd.IFP_CONTRACT_SID = ifc.IFP_CONTRACT_SID
			and ifd.INBOUND_STATUS <> 'D' Left Join dbo.PS_CONTRACT psc on
			psc.CONTRACT_MASTER_SID = cm.CONTRACT_MASTER_SID
			and psc.INBOUND_STATUS <> 'D' Left Join dbo.PS_CONTRACT_DETAILS psd on
			psd.PS_CONTRACT_SID = psc.PS_CONTRACT_SID
			and psd.INBOUND_STATUS <> 'D' Left Join dbo.RS_CONTRACT rsc on
			rsc.CONTRACT_MASTER_SID = cm.CONTRACT_MASTER_SID
			and rsc.INBOUND_STATUS <> 'D' Left Join dbo.RS_CONTRACT_DETAILS rsd on
			rsd.RS_CONTRACT_SID = rsc.RS_CONTRACT_SID
			and rsd.INBOUND_STATUS <> 'D' Left Join COMPANY_MASTER com on
			com.COMPANY_MASTER_SID = cm.CONT_HOLD_COMPANY_MASTER_SID Left Join COMPANY_MASTER cfpcomp on
			cfpcomp.COMPANY_MASTER_SID = cfd.COMPANY_MASTER_SID Left Join ITEM_MASTER ifpIm on
			ifpIm.ITEM_MASTER_SID = ifd.ITEM_MASTER_SID Left Join ITEM_MASTER psIm on
			psIm.ITEM_MASTER_SID = psd.ITEM_MASTER_SID Left Join ITEM_MASTER rsIm on
			rsIm.ITEM_MASTER_SID = rsd.ITEM_MASTER_SID
		where
			cm.PROCESS_STATUS = 1
                        ?
                        ) a;
        ]]>
		</query>
	</entity>
	<entity id="getCDR1Results">
		<query>
        <![CDATA[
        select
	DISTINCT 'Contract' as MemberCategory,
	cm.CONTRACT_ID as memberID,
	cm.CONTRACT_NO as memberNo,
	cm.CONTRACT_NAME as memberName,
        '1' as ParentNo,
        '1' as MemberLevel,
        cm.CONTRACT_MASTER_SID as CONID
	,(?) as CPFCOUNT
	,(?) as IPFCOUNT
	,(?) as PSCOUNT
	,(?) as RSCOUNT
        ,'0' as TOTALCOUNT
        ,cm.START_DATE
	,cm.END_DATE
        ,RLS=cm.RECORD_LOCK_STATUS
        ,0 as cfpMId
        ,0 as ifpMId
        ,0 as psMId
        ,0 as rsMId
from
	dbo.CONTRACT_MASTER cm Left Join dbo.CFP_CONTRACT cfc on
	cfc.CONTRACT_MASTER_SID = cm.CONTRACT_MASTER_SID
	and cfc.INBOUND_STATUS <> 'D' Left Join dbo.CFP_CONTRACT_DETAILS cfd on
	cfd.CFP_CONTRACT_SID = cfc.CFP_CONTRACT_SID
	and cfd.INBOUND_STATUS <> 'D' Left Join dbo.IFP_CONTRACT ifc on
	ifc.CONTRACT_MASTER_SID = cm.CONTRACT_MASTER_SID
	and ifc.INBOUND_STATUS <> 'D' Left Join dbo.IFP_CONTRACT_DETAILS ifd on
	ifd.IFP_CONTRACT_SID = ifc.IFP_CONTRACT_SID
	and ifd.INBOUND_STATUS <> 'D' Left Join dbo.PS_CONTRACT psc on
	psc.CONTRACT_MASTER_SID = cm.CONTRACT_MASTER_SID
	and psc.INBOUND_STATUS <> 'D' Left Join dbo.PS_CONTRACT_DETAILS psd on
	psd.PS_CONTRACT_SID = psc.PS_CONTRACT_SID
	and psd.INBOUND_STATUS <> 'D' Left Join dbo.RS_CONTRACT rsc on
	rsc.CONTRACT_MASTER_SID = cm.CONTRACT_MASTER_SID
	and rsc.INBOUND_STATUS <> 'D' Left Join dbo.RS_CONTRACT_DETAILS rsd on
	rsd.RS_CONTRACT_SID = rsc.RS_CONTRACT_SID
	and rsd.INBOUND_STATUS <> 'D' Left Join COMPANY_MASTER com on
	com.COMPANY_MASTER_SID = cm.CONT_HOLD_COMPANY_MASTER_SID Left Join COMPANY_MASTER cfpcomp on
	cfpcomp.COMPANY_MASTER_SID = cfd.COMPANY_MASTER_SID Left Join ITEM_MASTER ifpIm on
	ifpIm.ITEM_MASTER_SID = ifd.ITEM_MASTER_SID Left Join ITEM_MASTER psIm on
	psIm.ITEM_MASTER_SID = psd.ITEM_MASTER_SID Left Join ITEM_MASTER rsIm on
	rsIm.ITEM_MASTER_SID = rsd.ITEM_MASTER_SID
where
	cm.PROCESS_STATUS = 1
        ?
        ORDER BY ?
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getCDR2Results">
		<query>
        <![CDATA[
select
DISTINCT 'CFP' as MemberCategory,
	cfpm.CFP_ID as memberID,
	cfpco.CFP_NO as memberNo,
	cfpco.CFP_NAME as memberName,
        '2' as ParentNo,
        '?-2' as MemberLevel,
        cfpco.CONTRACT_MASTER_SID as CONID,
        cfpco.CFP_CONTRACT_SID as CFPID
	,(?) as IPFCOUNT
	,(?) as PSCOUNT
	,(?) as RSCOUNT
        ,'0' as TOTALCOUNT
        ,cfpco.CFP_START_DATE
	,cfpco.CFP_END_DATE
        ,RLS='?'
	,cfpco.CFP_MODEL_SID as cfpMId
        ,0 as ifpMId
        ,0 as psMId
        ,0 as rsMId
	from dbo.CFP_CONTRACT cfpco
	Join dbo.CFP_MODEL cfpm on
	cfpm.CFP_MODEL_SID=cfpco.CFP_MODEL_SID AND
	cfpco.CONTRACT_MASTER_SID ?
        and cfpco.INBOUND_STATUS <> 'D'
        ORDER BY cfpco.CFP_CONTRACT_SID
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getCDR3Results">
		<query>
        <![CDATA[
select
DISTINCT 'IFP' as MemberCategory,
	ifpm.IFP_ID as memberID,
	ifpco.IFP_NO as memberNo,
	ifpco.IFP_NAME as memberName,
        '3' as ParentNo,
        '?-3' as MemberLevel,
        ifpco.CONTRACT_MASTER_SID as CONID,
        ifpco.CFP_CONTRACT_SID as CFPID,
        ifpco.IFP_CONTRACT_SID as IFPID
	,(?) as PSCOUNT
	,(?) as RSCOUNT
        ,'0' as TOTALCOUNT
        ,ifpco.IFP_START_DATE
	,ifpco.IFP_END_DATE
        ,RLS='?'
        ,? as cfpMId
	,ifpco.IFP_MODEL_SID as ifpMId
        ,0 as psMId
        ,0 as rsMId
	from dbo.IFP_CONTRACT ifpco
	Join dbo.IFP_MODEL ifpm on
	ifpm.IFP_MODEL_SID=ifpco.IFP_MODEL_SID AND
	ifpco.CONTRACT_MASTER_SID ?
	and ifpco.CFP_CONTRACT_SID ?
	and ifpco.INBOUND_STATUS <> 'D'
        ORDER BY ifpco.IFP_CONTRACT_SID
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getCDR4Results">
		<query>
        <![CDATA[
select
DISTINCT 'PS' as MemberCategory,
	psm.PS_ID as memberID,
	psco.PS_NO as memberNo,
	psco.PS_NAME as memberName,
        '4' as ParentNo,
        '?-4' as MemberLevel,
        psco.CONTRACT_MASTER_SID as CONID,
        psco.CFP_CONTRACT_SID as CFPID,
        psco.IFP_CONTRACT_SID as IFPID,
        psco.PS_CONTRACT_SID as PSID
	,(?) as RSCOUNT
        ,'0' as TOTALCOUNT
        ,psco.PS_START_DATE
	,psco.PS_END_DATE
        ,RLS='?'
        ,? as cfpMId
	,? as ifpMId
        ,psco.PS_MODEL_SID as psMId
        ,0 as rsMId
	from dbo.PS_CONTRACT psco
	Join dbo.PS_MODEL psm on
	psm.PS_MODEL_SID=psco.PS_MODEL_SID AND
	psco.CONTRACT_MASTER_SID ?
	and psco.CFP_CONTRACT_SID ?
	and psco.IFP_CONTRACT_SID ?
	and psco.INBOUND_STATUS <> 'D'
        ORDER BY psco.PS_CONTRACT_SID
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getCDR5Results">
		<query>
        <![CDATA[
select
DISTINCT 'RS' as MemberCategory,
	rsm.RS_ID as memberID,
	rsco.RS_NO as memberNo,
	rsco.RS_NAME as memberName,
        '5' as ParentNo,
        '?-5' as MemberLevel,
        rsco.CONTRACT_MASTER_SID as CONID,
        rsco.CFP_CONTRACT_SID as CFPID,
        rsco.IFP_CONTRACT_SID as IFPID,
        rsco.PS_CONTRACT_SID as PSID,
        rsco.RS_CONTRACT_SID as RSID
        ,'0' as TOTALCOUNT
        ,rsco.RS_START_DATE
	,rsco.RS_END_DATE
        ,RLS='?'
        ,? as cfpMId
	,? as ifpMId
        ,? as psMId
        ,rsco.RS_MODEL_SID as rsMId
	from dbo.RS_CONTRACT rsco
	Join dbo.RS_MODEL rsm on
	rsm.RS_MODEL_SID=rsco.RS_MODEL_SID AND
	rsco.CONTRACT_MASTER_SID ?
	and rsco.CFP_CONTRACT_SID ?
	and rsco.IFP_CONTRACT_SID ?
	and rsco.PS_CONTRACT_SID ?
	and rsco.INBOUND_STATUS <> 'D'
        ORDER BY rsco.RS_CONTRACT_SID
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getCDR2Count">
		<query>
        <![CDATA[
        select
	count( distinct cfpco.CFP_CONTRACT_SID )
from
	dbo.CFP_CONTRACT cfpco
where
	cfpco.CONTRACT_MASTER_SID ?
	and cfpco.INBOUND_STATUS <> 'D'
        ]]>
		</query>
	</entity>
	<entity id="getCDR3Count">
		<query>
        <![CDATA[
        select
	count( distinct ifpco.IFP_CONTRACT_SID )
from
	dbo.IFP_CONTRACT ifpco
where
	ifpco.CONTRACT_MASTER_SID ?
	and ifpco.CFP_CONTRACT_SID ?
	and ifpco.INBOUND_STATUS <> 'D'
        ]]>
		</query>
	</entity>
	<entity id="getCDR4Count">
		<query>
        <![CDATA[
        select
	count( distinct psco.PS_CONTRACT_SID )
from
	dbo.PS_CONTRACT psco
where
	psco.CONTRACT_MASTER_SID ?
	and psco.CFP_CONTRACT_SID ?
	and psco.IFP_CONTRACT_SID ?
	and psco.INBOUND_STATUS <> 'D'
        ]]>
		</query>
	</entity>
	<entity id="getCDR5Count">
		<query>
        <![CDATA[
        select
	count( distinct rsco.RS_CONTRACT_SID )
from
	dbo.RS_CONTRACT rsco
where
	rsco.CONTRACT_MASTER_SID ?
	and rsco.CFP_CONTRACT_SID ?
	and rsco.IFP_CONTRACT_SID ?
	and rsco.PS_CONTRACT_SID ?
	and rsco.INBOUND_STATUS <> 'D'
        ]]>
		</query>
	</entity>
	<entity id="getCDCATLCount">
		<query>
        <![CDATA[
                    ;WITH CTE
                         AS (SELECT DISTINCT cm.COMPANY_MASTER_SID,
                                             cm.COMPANY_ID,
                                             cm.COMPANY_NO,
                                             cm.COMPANY_NAME,
                                             cm.COMPANY_TYPE,
                                             cm.COMPANY_STATUS,
                                             cm.COMPANY_START_DATE,
                                             cm.COMPANY_END_DATE,
                                             HT.DESCRIPTION AS COMPANY_TRADE_CLASS,
                                             CTC.TRADE_CLASS_START_DATE,
                                             CTC. TRADE_CLASS_END_DATE,
                                             CM.COMPANY_CATEGORY,
                                             CM.COMPANY_GROUP,
                                             PROCESS = CASE
                                                         WHEN COMPANY_TRADE_CLASS IS NOT NULL THEN 1
                                                       END
                             FROM   COMPANY_MASTER cm
                                    LEFT JOIN COMPANY_TRADE_CLASS ctc
                                           ON cM.COMPANY_MASTER_SID = ctc.COMPANY_MASTER_SID
                                              AND Getdate() BETWEEN ctc.TRADE_CLASS_START_DATE AND ctc.TRADE_CLASS_END_DATE
                                             LEFT JOIN HELPER_TABLE HT
                                                      ON HT.HELPER_TABLE_SID = CTC.COMPANY_TRADE_CLASS
                                                      WHERE  cm.INBOUND_STATUS <> 'D'
                                                      ),
                         TRADE_CLASS
                         AS (SELECT COMPANY_MASTER_SID,
                                    HT.DESCRIPTION AS COMPANY_TRADE_CLASS
                             FROM   COMPANY_TRADE_CLASS C
                                  LEFT JOIN HELPER_TABLE HT
                                                      ON HT.HELPER_TABLE_SID = C.COMPANY_TRADE_CLASS
                             WHERE  EXISTS (SELECT 1
                                            FROM   CTE CT
                                            WHERE  C.COMPANY_MASTER_SID = CT.COMPANY_MASTER_SID
                                                   AND COMPANY_TRADE_CLASS IS NULL))
                    select
                    COUNT(*)
                    from
                    (
                    SELECT C.COMPANY_MASTER_SID,
                    ROW_NUMBER() OVER( PARTITION BY C.COMPANY_MASTER_SID ORDER BY C.TRADE_CLASS_START_DATE ASC ) AS RN,
                           C.COMPANY_ID,
                           C.COMPANY_NO,
                           C.COMPANY_NAME,
                           C.COMPANY_TYPE,
                           C.COMPANY_STATUS,
                           C.COMPANY_START_DATE,
                           C.COMPANY_END_DATE,
                           htype.DESCRIPTION     AS ctype,
                           hstatus.DESCRIPTION   AS cstatus,
                           hcategory.DESCRIPTION AS ccategory,
                           hgroup.DESCRIPTION    AS cgroup,
                           COMPANY_TRADE_CLASS= CASE
                                                  WHEN PROCESS = 1 THEN C.COMPANY_TRADE_CLASS
                                                  ELSE T.COMPANY_TRADE_CLASS
                                                END
                    FROM   CTE C
                           LEFT JOIN TRADE_CLASS T
                                  ON C.COMPANY_MASTER_SID = T.COMPANY_MASTER_SID
                           LEFT JOIN HelPER_TABLE htype
                                  ON htype.HELPER_TABLE_SID = C.COMPANY_TYPE
                           LEFT JOIN HELPER_TABLE hstatus
                                  ON hstatus.HELPER_TABLE_SID = C.COMPANY_STATUS
                           LEFT JOIN HELPER_TABLE hcategory
                                  ON hcategory.HELPER_TABLE_SID = C.COMPANY_CATEGORY
                           LEFT JOIN HELPER_TABLE hgroup
                                  ON hgroup.HELPER_TABLE_SID = C.COMPANY_GROUP


            )
                    B where rn=1  ?
        ]]>
		</query>
	</entity>
	<entity id="getCDCATLResults">
		<query>
        <![CDATA[
                    ;WITH CTE
                         AS (SELECT DISTINCT cm.COMPANY_MASTER_SID,
                                             cm.COMPANY_ID,
                                             cm.COMPANY_NO,
                                             cm.COMPANY_NAME,
                                             cm.COMPANY_TYPE,
                                             cm.COMPANY_STATUS,
                                             cm.COMPANY_START_DATE,
                                             cm.COMPANY_END_DATE,
                                             HT.DESCRIPTION AS COMPANY_TRADE_CLASS,
                                             CTC.TRADE_CLASS_START_DATE,
                                             CTC. TRADE_CLASS_END_DATE,
                                             CM.COMPANY_CATEGORY,
                                             CM.COMPANY_GROUP,
                                             PROCESS = CASE
                                                         WHEN COMPANY_TRADE_CLASS IS NOT NULL THEN 1
                                                       END,
                                             HT.HELPER_TABLE_SID AS TRADE_CLASS_ID
                             FROM   COMPANY_MASTER cm
                                    LEFT JOIN COMPANY_TRADE_CLASS ctc
                                           ON cM.COMPANY_MASTER_SID = ctc.COMPANY_MASTER_SID
                                              AND Getdate() BETWEEN ctc.TRADE_CLASS_START_DATE AND ctc.TRADE_CLASS_END_DATE
                                             LEFT JOIN HELPER_TABLE HT
                                                      ON HT.HELPER_TABLE_SID = CTC.COMPANY_TRADE_CLASS
                                                      WHERE cm.INBOUND_STATUS <> 'D'
                                                      ),
                         TRADE_CLASS
                         AS (SELECT COMPANY_MASTER_SID,
                                    HT.DESCRIPTION AS COMPANY_TRADE_CLASS,
                                    HT.HELPER_TABLE_SID AS TRADE_CLASS_ID
                             FROM   COMPANY_TRADE_CLASS C
                                  LEFT JOIN HELPER_TABLE HT
                                                      ON HT.HELPER_TABLE_SID = C.COMPANY_TRADE_CLASS
                             WHERE  EXISTS (SELECT 1
                                            FROM   CTE CT
                                            WHERE  C.COMPANY_MASTER_SID = CT.COMPANY_MASTER_SID
                                                   AND COMPANY_TRADE_CLASS IS NULL))
                    select
                    COMPANY_ID,
                    COMPANY_NO,
                    COMPANY_NAME,
 					cstatus,
                    ctype,
                    COMPANY_TRADE_CLASS,
                    ccategory,
                    cgroup,
                    COMPANY_MASTER_SID,
                    COMPANY_STATUS,
                    COMPANY_TYPE,
                    COMPANY_START_DATE,
                    COMPANY_END_DATE,
                    TRADE_CLASS_ID
                    from
                    (
                    SELECT C.COMPANY_MASTER_SID,
                    ROW_NUMBER() OVER( PARTITION BY C.COMPANY_MASTER_SID ORDER BY C.TRADE_CLASS_START_DATE ASC ) AS RN,
                           C.COMPANY_ID,
                           C.COMPANY_NO,
                           C.COMPANY_NAME,
                           C.COMPANY_TYPE,
                           C.COMPANY_STATUS,
                           C.COMPANY_START_DATE,
                           C.COMPANY_END_DATE,
                           htype.DESCRIPTION     AS ctype,
                           hstatus.DESCRIPTION   AS cstatus,
                           hcategory.DESCRIPTION AS ccategory,
                           hgroup.DESCRIPTION    AS cgroup,
                           COMPANY_TRADE_CLASS= CASE
                                                  WHEN PROCESS = 1 THEN C.COMPANY_TRADE_CLASS
                                                  ELSE T.COMPANY_TRADE_CLASS
                                                END,
                           TRADE_CLASS_ID= CASE
                                                  WHEN PROCESS = 1 THEN C.TRADE_CLASS_ID
                                                  ELSE T.TRADE_CLASS_ID
                                                END
                    FROM   CTE C
                           LEFT JOIN TRADE_CLASS T
                                  ON C.COMPANY_MASTER_SID = T.COMPANY_MASTER_SID AND T.COMPANY_TRADE_CLASS  NOT like '%Select One%'
                           LEFT JOIN HelPER_TABLE htype
                                  ON htype.HELPER_TABLE_SID = C.COMPANY_TYPE AND htype.DESCRIPTION  NOT like '%Select One%'
                           LEFT JOIN HELPER_TABLE hstatus
                                  ON hstatus.HELPER_TABLE_SID = C.COMPANY_STATUS AND hstatus.DESCRIPTION  NOT like '%Select One%'
                           LEFT JOIN HELPER_TABLE hcategory
                                  ON hcategory.HELPER_TABLE_SID = C.COMPANY_CATEGORY AND hcategory.DESCRIPTION  NOT like '%Select One%'
                           LEFT JOIN HELPER_TABLE hgroup
                                  ON hgroup.HELPER_TABLE_SID = C.COMPANY_GROUP AND hgroup.DESCRIPTION  NOT like '%Select One%'


            )
                    B where rn=1  ?
        ORDER BY ?
	OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getCDCompanyAdditionMoveRightQuery">
		<query>
            <![CDATA[



DECLARE @USERS_SID VARCHAR(10)=?,
@SESSION_ID VARCHAR(10)=?,
@COMPANY_MASTER_SID INT=?

IF EXISTS(
	SELECT
		1
	FROM
		IMTD_CFP_DETAILS CFP
	WHERE
		CFP.USERS_SID = @USERS_SID
		AND CFP.SESSION_ID = @SESSION_ID
		AND COMPANY_MASTER_SID = @COMPANY_MASTER_SID
) UPDATE
	IMTD_CFP_DETAILS
SET
	CFP_DETAILS_START_DATE = NULL,
	CFP_DETAILS_END_DATE = NULL,
	CFP_DETAILS_ATTACHED_DATE = GETDATE(),
	CFP_DETAILS_ATTACHED_STATUS = NULL,
	CFP_DETAILS_CREATED_DATE = GETDATE(),
	CFP_DETAILS_CREATED_BY = @USERS_SID,
	CFP_DETAILS_MODIFIED_DATE = NULL,
	CFP_DETAILS_MODIFIED_BY = NULL,
	OPERATION = 'A',
        TRADING_PARTNER_CONTRACT_NO=''

WHERE
	USERS_SID = @USERS_SID
	AND SESSION_ID = @SESSION_ID
	AND COMPANY_MASTER_SID = @COMPANY_MASTER_SID
	ELSE INSERT
		INTO
			IMTD_CFP_DETAILS(
				COMPANY_MASTER_SID,
				CFP_MODEL_SID,
				COMPANY_ID,
				COMPANY_NO,
				COMPANY_NAME,
				COMPANY_TYPE,
				COMPANY_STATUS,
				COMPANY_START_DATE,
				COMPANY_END_DATE,
				CFP_DETAILS_ATTACHED_DATE,
				USERS_SID,
				SESSION_ID,
				CFP_DETAILS_CREATED_DATE,
				CFP_DETAILS_CREATED_BY,
				CFP_DETAILS_MODIFIED_DATE,
				CFP_DETAILS_MODIFIED_BY,
				CFP_DETAILS_TRADE_CLASS,
                                "OPERATION",
                                CHECK_RECORD,
                                TRADING_PARTNER_CONTRACT_NO
			)
                        SELECT
				CM.COMPANY_MASTER_SID,
				0,
				CM.COMPANY_ID,
				CM.COMPANY_NO,
				CM.COMPANY_NAME,
				CM.COMPANY_TYPE,
				CM.COMPANY_STATUS,
				CM.COMPANY_START_DATE,
				CM.COMPANY_END_DATE,
				GETDATE(),
				@USERS_SID,
				@SESSION_ID,
				GETDATE(),
				@USERS_SID,
				GETDATE(),
				@USERS_SID,
				CTC.COMPANY_TRADE_CLASS,
                                'A',
                                0,
                                ''
			FROM
				DBO.COMPANY_MASTER CM
			JOIN COMPANY_TRADE_CLASS CTC ON
				CTC.COMPANY_MASTER_SID = CM.COMPANY_MASTER_SID
                        LEFT JOIN HELPER_TABLE HTRADE ON
                                HTRADE.HELPER_TABLE_SID = CTC.COMPANY_TRADE_CLASS
                        WHERE
				CTC.COMPANY_TRADE_CLASS =(
					SELECT
						TOP 1(CT.COMPANY_TRADE_CLASS)
					FROM
						COMPANY_TRADE_CLASS CT
					WHERE
						CT.COMPANY_MASTER_SID = CM.COMPANY_MASTER_SID
						AND CT.INBOUND_STATUS <> 'D'
					ORDER BY
						CT.TRADE_CLASS_START_DATE DESC
				)
				AND CM.INBOUND_STATUS <> 'D'
				AND CTC.INBOUND_STATUS <> 'D'
				AND CM.COMPANY_MASTER_SID = @COMPANY_MASTER_SID;
 ]]>
		</query>
	</entity>

	<entity id="getCDCompanyAdditionMoveLeftQuery">
		<query>
            <![CDATA[

         DELETE FROM IMTD_CFP_DETAILS WHERE USERS_SID =?  AND SESSION_ID =? AND IMTD_CFP_DETAILS_SID=?
 ]]>
		</query>
	</entity>
	<entity id="getCDCompanyAdditionMoveAllLeftQuery">
		<query>
            <![CDATA[

          DELETE IMTD FROM IMTD_CFP_DETAILS IMTD
         JOIN COMPANY_MASTER CM ON
            CM.COMPANY_MASTER_SID = IMTD.COMPANY_MASTER_SID
    LEFT JOIN HELPER_TABLE HTYPE ON
            HTYPE.HELPER_TABLE_SID = IMTD.COMPANY_TYPE
    LEFT JOIN HELPER_TABLE HCATEGORY ON
            HCATEGORY.HELPER_TABLE_SID = CM.COMPANY_CATEGORY
    LEFT JOIN HELPER_TABLE HGROUP ON
            HGROUP.HELPER_TABLE_SID = CM.COMPANY_GROUP
    LEFT JOIN HELPER_TABLE HSTATUS ON
            HSTATUS.HELPER_TABLE_SID = IMTD.COMPANY_STATUS
        WHERE IMTD.USERS_SID = ?  AND IMTD.SESSION_ID = ?
 ]]>
		</query>
	</entity>

	<entity id="getCDCompanyAdditionMoveAllRightQuery">
		<query>
            <![CDATA[
DECLARE @USERS_SID VARCHAR(10)=?,
@SESSION_ID VARCHAR(10)=?,
@CFP_MODEL_SID INT = ?
;WITH CTE
                         AS (SELECT DISTINCT cm.COMPANY_MASTER_SID,
                                             cm.COMPANY_ID,
                                             cm.COMPANY_NO,
                                             cm.COMPANY_NAME,
                                             cm.COMPANY_TYPE,
                                             cm.COMPANY_STATUS,
                                             cm.COMPANY_START_DATE,
                                             cm.COMPANY_END_DATE,
                                             HT.DESCRIPTION AS COMPANY_TRADE_CLASS,
                                             CTC.TRADE_CLASS_START_DATE,
                                             CTC. TRADE_CLASS_END_DATE,
                                             CM.COMPANY_CATEGORY,
                                             CM.COMPANY_GROUP,
                                             PROCESS = CASE
                                                         WHEN COMPANY_TRADE_CLASS IS NOT NULL THEN 1
                                                       END,
                                             HT.HELPER_TABLE_SID AS TRADE_CLASS_ID
                             FROM   COMPANY_MASTER cm
                                    LEFT JOIN COMPANY_TRADE_CLASS ctc
                                           ON cM.COMPANY_MASTER_SID = ctc.COMPANY_MASTER_SID
                                              AND Getdate() BETWEEN ctc.TRADE_CLASS_START_DATE AND ctc.TRADE_CLASS_END_DATE
                                             LEFT JOIN HELPER_TABLE HT
                                                      ON HT.HELPER_TABLE_SID = CTC.COMPANY_TRADE_CLASS
                                                      WHERE cm.INBOUND_STATUS <> 'D' ?
                                                      ),
                         TRADE_CLASS
                         AS (SELECT COMPANY_MASTER_SID,
                                    HT.DESCRIPTION AS COMPANY_TRADE_CLASS,
                                    HT.HELPER_TABLE_SID AS TRADE_CLASS_ID
                             FROM   COMPANY_TRADE_CLASS C
                                  LEFT JOIN HELPER_TABLE HT
                                                      ON HT.HELPER_TABLE_SID = C.COMPANY_TRADE_CLASS
                             WHERE  EXISTS (SELECT 1
                                            FROM   CTE CT
                                            WHERE  C.COMPANY_MASTER_SID = CT.COMPANY_MASTER_SID
                                                   AND COMPANY_TRADE_CLASS IS NULL))
    MERGE IMTD_CFP_DETAILS AS TARGET
	USING(
	select
                    COMPANY_ID,
                    COMPANY_NO,
                    COMPANY_NAME,
                    COMPANY_MASTER_SID,
                    COMPANY_STATUS,
                    COMPANY_TYPE,
                    COMPANY_START_DATE,
                    COMPANY_END_DATE,
                    TRADE_CLASS_ID
                    from
                    (
                    SELECT C.COMPANY_MASTER_SID,
                    ROW_NUMBER() OVER( PARTITION BY C.COMPANY_MASTER_SID ORDER BY C.TRADE_CLASS_START_DATE ASC ) AS RN,
                           C.COMPANY_ID,
                           C.COMPANY_NO,
                           C.COMPANY_NAME,
                           C.COMPANY_TYPE,
                           C.COMPANY_STATUS,
                           C.COMPANY_START_DATE,
                           C.COMPANY_END_DATE,
                           TRADE_CLASS_ID= CASE
                                                  WHEN PROCESS = 1 THEN C.TRADE_CLASS_ID
                                                  ELSE T.TRADE_CLASS_ID
                                                END
                    FROM   CTE C
                           LEFT JOIN TRADE_CLASS T
                                  ON C.COMPANY_MASTER_SID = T.COMPANY_MASTER_SID
            )
                    B where rn=1
) AS S ON
(
	S.COMPANY_MASTER_SID = TARGET.COMPANY_MASTER_SID
	AND TARGET.CFP_MODEL_SID = @CFP_MODEL_SID
	AND TARGET.USERS_SID = @USERS_SID
	AND TARGET.SESSION_ID = @SESSION_ID
)
WHEN NOT MATCHED BY TARGET THEN INSERT
		(
			COMPANY_MASTER_SID,
			CFP_MODEL_SID,
			COMPANY_ID,
			COMPANY_NO,
			COMPANY_NAME,
			COMPANY_TYPE,
			COMPANY_STATUS,
			COMPANY_START_DATE,
			COMPANY_END_DATE,
			TRADING_PARTNER_CONTRACT_NO,
			CFP_DETAILS_ATTACHED_DATE,
			USERS_SID,
			SESSION_ID,
			IMTD_CREATED_DATE,
			CHECK_RECORD,
			"OPERATION",
			CREATED_BY,
			CREATED_DATE,
			CFP_DETAILS_SID
		)
	VALUES(
		S.COMPANY_MASTER_SID,
		@CFP_MODEL_SID,
		S.COMPANY_ID,
		S.COMPANY_NO,
		S.COMPANY_NAME,
		S.COMPANY_TYPE,
		S.COMPANY_STATUS,
		S.COMPANY_START_DATE,
		S.COMPANY_END_DATE,
		''+S.TRADE_CLASS_ID,
		GETDATE(),
		@USERS_SID,
		@SESSION_ID,
		GETDATE(),
		0,
		'A',
		@USERS_SID,
		GETDATE(),
		0
	);

;
 ]]>
		</query>
	</entity>

	<entity id="getCDCompanyAdditionViewCountQuery">
		<query>
            <![CDATA[
						WITH CAV as (
								 SELECT
							 IMTD.COMPANY_ID,
							 IMTD.COMPANY_NO,
							 IMTD.COMPANY_NAME,
				 hstatus.DESCRIPTION as CSTATUS,
							 htype.DESCRIPTION as CTYPE,
				 htrade.DESCRIPTION as COMPANY_TRADE_CLASS,
							 hcategory.DESCRIPTION as ccategory,
			 hgroup.DESCRIPTION as cgroup,
							 IMTD.COMPANY_MASTER_SID,
							 IMTD.COMPANY_TYPE,
							 IMTD.COMPANY_STATUS,
							 IMTD.IMTD_CFP_DETAILS_SID,
							IMTD.OPERATION
						FROM IMTD_CFP_DETAILS IMTD
									 JOIN COMPANY_MASTER cm on cm.COMPANY_MASTER_SID=IMTD.COMPANY_MASTER_SID
									 LEFT JOIN HELPER_TABLE htrade on htrade.HELPER_TABLE_SID = IMTD.TRADING_PARTNER_CONTRACT_NO
									 LEFT JOIN HELPER_TABLE hcategory on hcategory.HELPER_TABLE_SID=cm.COMPANY_CATEGORY
									 LEFT JOIN HELPER_TABLE hgroup on hgroup.HELPER_TABLE_SID=cm.COMPANY_GROUP
									 LEFT JOIN HELPER_TABLE hstatus on hstatus.HELPER_TABLE_SID=IMTD.COMPANY_STATUS
									 LEFT JOIN HELPER_TABLE htype on htype.HELPER_TABLE_SID=IMTD.COMPANY_TYPE
									 WHERE
										IMTD.USERS_SID = '?' AND IMTD.SESSION_ID = '?' AND IMTD.OPERATION NOT IN ('D','F')
											 )
										 SELECT count(COMPANY_ID) from CAV  WHERE  OPERATION NOT IN ('D','F') ?
            ]]>
		</query>
	</entity>
	<entity id="getCDCompanyAdditionViewResultsQuery">
		<query>
            <![CDATA[
								WITH CAV as (
								SELECT
							IMTD.COMPANY_ID,
							IMTD.COMPANY_NO,
							IMTD.COMPANY_NAME,
				hstatus.DESCRIPTION as CSTATUS,
							htype.DESCRIPTION as CTYPE,
				htrade.DESCRIPTION as COMPANY_TRADE_CLASS,
							hcategory.DESCRIPTION as ccategory,
			hgroup.DESCRIPTION as cgroup,
							IMTD.COMPANY_MASTER_SID,
							IMTD.COMPANY_TYPE,
							IMTD.COMPANY_STATUS,
							IMTD.IMTD_CFP_DETAILS_SID,
							IMTD.OPERATION
					 FROM IMTD_CFP_DETAILS IMTD
					 JOIN COMPANY_MASTER cm on cm.COMPANY_MASTER_SID=IMTD.COMPANY_MASTER_SID
						 LEFT JOIN HELPER_TABLE htrade on htrade.HELPER_TABLE_SID=IMTD.TRADING_PARTNER_CONTRACT_NO AND htrade.DESCRIPTION  NOT like '%Select One%'
						 LEFT JOIN HELPER_TABLE hcategory on hcategory.HELPER_TABLE_SID=cm.COMPANY_CATEGORY AND hcategory.DESCRIPTION  NOT like '%Select One%'
						 LEFT JOIN HELPER_TABLE hgroup on hgroup.HELPER_TABLE_SID=cm.COMPANY_GROUP AND hgroup.DESCRIPTION  NOT like '%Select One%'
						 LEFT JOIN HELPER_TABLE hstatus on hstatus.HELPER_TABLE_SID=IMTD.COMPANY_STATUS AND hstatus.DESCRIPTION  NOT like '%Select One%'
						 LEFT JOIN HELPER_TABLE htype on htype.HELPER_TABLE_SID=IMTD.COMPANY_TYPE AND htype.DESCRIPTION  NOT like '%Select One%'
									WHERE
									 IMTD.USERS_SID = '?' AND IMTD.SESSION_ID = '?'
											)
										SELECT * from CAV  WHERE  OPERATION NOT IN ('D','F') ?
										ORDER BY ?
									 OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
            ]]>
		</query>
	</entity>
	<entity id="getCDItemAdditionViewCountQuery">
		<query>
            <![CDATA[
            SELECT count(*)
             from
                    IMTD_ITEM_PRICE_REBATE_DETAILS impr
                LEFT JOIN ITEM_MASTER im on im.ITEM_MASTER_SID=impr.ITEM_MASTER_SID
                LEFT JOIN HELPER_TABLE hform on hform.HELPER_TABLE_SID=im.FORM
                LEFT JOIN HELPER_TABLE hstrength on hstrength.HELPER_TABLE_SID=im.STRENGTH
                LEFT JOIN HELPER_TABLE htherapeutic on htherapeutic.HELPER_TABLE_SID=im.THERAPEUTIC_CLASS
                LEFT JOIN HELPER_TABLE hstatus on hstatus.HELPER_TABLE_SID=im.ITEM_STATUS
                LEFT JOIN HELPER_TABLE hpackageSize on hpackageSize.HELPER_TABLE_SID=im.PACKAGE_SIZE
                Left Join BRAND_MASTER BM ON im.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                WHERE OPERATION <> 'D' and impr.USERS_SID = '?' and impr.SESSION_ID='?'
                AND impr.ADD_COPY_INDICATOR IS NULL
                     ?
            ]]>
		</query>
	</entity>
	<entity id="getCDItemAdditionViewResultsQuery">
		<query>
            <![CDATA[
            SELECT
                    im.ITEM_NO,
                    im.ITEM_NAME,
                    im.ITEM_DESC,
                    hstatus.DESCRIPTION as istatus,
                    hform.DESCRIPTION as iform,
                    hstrength.DESCRIPTION as istrength,
                   	htherapeutic.DESCRIPTION as itherapeutic,
                    BM.BRAND_NAME AS BRAND,
                    hpackageSize.DESCRIPTION as package,
                    impr.IMTD_ITEM_PRICE_REBATE_SID
            from
                    IMTD_ITEM_PRICE_REBATE_DETAILS impr
                LEFT JOIN ITEM_MASTER im on im.ITEM_MASTER_SID=impr.ITEM_MASTER_SID
                LEFT JOIN HELPER_TABLE hform on hform.HELPER_TABLE_SID=im.FORM AND hform.DESCRIPTION  NOT like '%Select One%'
                LEFT JOIN HELPER_TABLE hstrength on hstrength.HELPER_TABLE_SID=im.STRENGTH AND hstrength.DESCRIPTION  NOT like '%Select One%'
                LEFT JOIN HELPER_TABLE htherapeutic on htherapeutic.HELPER_TABLE_SID=im.THERAPEUTIC_CLASS AND htherapeutic.DESCRIPTION  NOT like '%Select One%'
                LEFT JOIN HELPER_TABLE hstatus on hstatus.HELPER_TABLE_SID=im.ITEM_STATUS AND hstatus.DESCRIPTION  NOT like '%Select One%'
                LEFT JOIN HELPER_TABLE hpackageSize on hpackageSize.HELPER_TABLE_SID=im.PACKAGE_SIZE
                Left Join BRAND_MASTER BM ON im.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                WHERE OPERATION <> 'D' and impr.USERS_SID = '?' and impr.SESSION_ID='?'
                AND impr.ADD_COPY_INDICATOR IS NULL
                     ?
                     ORDER BY ?
                    OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
            ]]>
		</query>
	</entity>
	<entity id="findCDBrand">
		<query>
              <![CDATA[
                Select
                        ?
                From
                        ITEM_MASTER im Left Join HELPER_TABLE htype on
                        htype.HELPER_TABLE_SID = im.PACKAGE_SIZE Left Join HELPER_TABLE hstatus on
                        hstatus.HELPER_TABLE_SID = im.ITEM_STATUS Left Join HELPER_TABLE hform on
                        hform.HELPER_TABLE_SID = im.form Left Join HELPER_TABLE hstrength on
                        hstrength.HELPER_TABLE_SID = im.strength Left Join HELPER_TABLE htherapeutic on
                        htherapeutic.HELPER_TABLE_SID = im.THERAPEUTIC_CLASS Left Join BRAND_MASTER BM ON
                        im.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                Where
                        im.INBOUND_STATUS <> 'D'
                        ?
		]]>
		</query>
	</entity>
	<entity id="findCDIFP">
		<query>
            <![CDATA[
                    Select
                        ?
                From
                        IFP_MODEL ifp join IFP_DETAILS ifpd on
                        ifp.IFP_MODEL_SID = ifpd.IFP_MODEL_SID
                        and ifpd.INBOUND_STATUS <> 'D' join ITEM_MASTER im on
                        ifpd.ITEM_MASTER_SID = im.ITEM_MASTER_SID
                        and im.INBOUND_STATUS <> 'D'
												LEFT Join HELPER_TABLE htype on
                        htype.HELPER_TABLE_SID = im.PACKAGE_SIZE AND htype.DESCRIPTION  NOT like '%Select One%'
												LEFT Join HELPER_TABLE hstatus on
                        hstatus.HELPER_TABLE_SID = im.ITEM_STATUS AND hstatus.DESCRIPTION  NOT like '%Select One%'
												LEFT Join HELPER_TABLE hform on
                        hform.HELPER_TABLE_SID = im.form AND hform.DESCRIPTION  NOT like '%Select One%'
												LEFT Join HELPER_TABLE hstrength on
                        hstrength.HELPER_TABLE_SID = im.strength AND hstrength.DESCRIPTION  NOT like '%Select One%'
												LEFT Join BRAND_MASTER BM ON
                        im.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
												LEFT Join HELPER_TABLE htherapeutic on
                        htherapeutic.HELPER_TABLE_SID = im.THERAPEUTIC_CLASS AND htherapeutic.DESCRIPTION  NOT like '%Select One%'
                Where
                        im.INBOUND_STATUS <> 'D'
                        ?
		]]>
		</query>
	</entity>
	<entity id="findCDITEM">
		<query>
            <![CDATA[
                    Select
                        ?
                From
                        IFP_MODEL ifp
                INNER JOIN IFP_DETAILS ifpd ON
                        IFP.IFP_MODEL_SID = IFPD.IFP_MODEL_SID
                INNER JOIN ITEM_MASTER im ON
                        IM.ITEM_MASTER_SID = IFPD.ITEM_MASTER_SID
												Left Join HELPER_TABLE htype on
                        htype.HELPER_TABLE_SID = im.PACKAGE_SIZE AND htype.DESCRIPTION  NOT like '%Select One%'
												Left Join HELPER_TABLE hstatus on
                        hstatus.HELPER_TABLE_SID = im.ITEM_STATUS AND hstatus.DESCRIPTION  NOT like '%Select One%'
												 Left Join HELPER_TABLE hform on
                        hform.HELPER_TABLE_SID = im.form AND hform.DESCRIPTION  NOT like '%Select One%'
												Left Join HELPER_TABLE hstrength on
                        hstrength.HELPER_TABLE_SID = im.strength AND hstrength.DESCRIPTION  NOT like '%Select One%'
												Left Join HELPER_TABLE htherapeutic on
                        htherapeutic.HELPER_TABLE_SID = im.THERAPEUTIC_CLASS AND htherapeutic.DESCRIPTION  NOT like '%Select One%'
												Left Join BRAND_MASTER BM ON
                        im.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                Where
                        im.INBOUND_STATUS <> 'D'
                         ?
		]]>
		</query>
	</entity>
	<entity id="findCDItemAdditionResults">
		<query>
            <![CDATA[
                Distinct
                    im.ITEM_NO,
                    im.ITEM_NAME,
                    im.ITEM_DESC,
                    hstatus.DESCRIPTION as status,
                    hform.DESCRIPTION as form,
                    hstrength.DESCRIPTION as strength,
                    htherapeutic.DESCRIPTION as therapeutic,
                    BM.BRAND_NAME AS BRAND,
                    htype.DESCRIPTION as hpackage,
                    im.ITEM_MASTER_SID,
                    im.ITEM_ID,
                    im.ITEM_STATUS,
                    im.BRAND_MASTER_SID,
                    im.PACKAGE_SIZE,
                    im.PRIMARY_UOM,
                    im."SOURCE" as source
		]]>
		</query>
	</entity>
	<entity id="findCDItemAdditionCount">
		<query>
                <![CDATA[
                    COUNT(Distinct im.ITEM_MASTER_SID)
                   ]]>
		</query>
	</entity>
	<entity id="addAllCDItemAddition">
		<query>
                <![CDATA[
                 DECLARE @USERS_SID VARCHAR(10) = ?,
@SESSION_ID VARCHAR(10) = ?,
@CONTRACT_MASTER_SID INT = ?,
@CFP_MODEL_SID INT = ?,
@IFP_MODEL_SID INT = ?,
@PS_MODEL_SID INT = ?,
@RS_MODEL_SID INT = ?
MERGE IMTD_ITEM_PRICE_REBATE_DETAILS AS TARGET
	USING(?) AS S ON
(
	S.ITEM_MASTER_SID = TARGET.ITEM_MASTER_SID
	AND TARGET.USERS_SID = @USERS_SID
	AND TARGET.SESSION_ID = @SESSION_ID
)
WHEN MATCHED
AND(
	TARGET.OPERATION = 'D'
) THEN UPDATE
SET
	TARGET.OPERATION = 'A'
	WHEN NOT MATCHED BY TARGET THEN INSERT
		(
			ITEM_MASTER_SID,
			ITEM_ID,
			ITEM_NO,
			ITEM_NAME,
			CONTRACT_MASTER_SID,
			CFP_MODEL_SID,
			IFP_MODEL_SID,
			PS_MODEL_SID,
			RS_MODEL_SID,
			ATTACHED_DATE,
			PS_STATUS,
			USERS_SID,
			SESSION_ID,
			OPERATION,
			CREATED_BY,
			CREATED_DATE,
			MODIFIED_BY,
			MODIFIED_DATE,
			PRIMARY_UOM,
			PACKAGE_SIZE,
			"SOURCE",
			BRAND_MASTER_SID
		)
	VALUES(
		S.ITEM_MASTER_SID,
		S.ITEM_ID,
		S.ITEM_NO,
		S.ITEM_NAME,
		@CONTRACT_MASTER_SID,
		@CFP_MODEL_SID,
		@IFP_MODEL_SID,
		@PS_MODEL_SID,
		@RS_MODEL_SID,
		getdate(),
		S.ITEM_STATUS,
		@USERS_SID,
		@SESSION_ID,
		'A',
		@USERS_SID,
		getdate(),
		@USERS_SID,
		getdate(),
		S.PRIMARY_UOM,
		S.PACKAGE_SIZE,
		S."SOURCE",
		S.BRAND_MASTER_SID
	);;
		]]>
		</query>
	</entity>
	<entity id="removeAllCDItemAddition">
		<query>
                <![CDATA[
                    DELETE FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS WHERE USERS_SID='?' AND SESSION_ID='?' AND "Operation" <> 'D';
                   ]]>
		</query>
	</entity>
	<entity id="updateOperationAllCDItemAddition">
		<query>
                <![CDATA[
                    UPDATE dbo.IMTD_ITEM_PRICE_REBATE_DETAILS SET "Operation"='D' WHERE USERS_SID='?' AND SESSION_ID='?' AND "Operation"='U';
               ]]>
		</query>
	</entity>
	<entity id="getCompaniesDetailsCount">
		<query>
                <![CDATA[
              With CDT as(
                SELECT
				IMTD.CHECK_RECORD,
                CASE
                WHEN CAST(CFP_DETAILS_START_DATE AS DATE) > convert(nvarchar, getdate(), 121) THEN 'Future'
                WHEN CAST(CFP_DETAILS_END_DATE AS DATE) <  convert(nvarchar, getdate(), 121)  THEN 'History'
                WHEN CAST(convert(nvarchar, getdate(), 121) AS DATE)  BETWEEN CAST(CFP_DETAILS_START_DATE AS DATE) AND CAST(ISNULL(CFP_DETAILS_END_DATE, CAST(convert(nvarchar, getdate(), 121) AS DATE) )  AS DATE) THEN 'Current'
                END AS recordType,
                IMTD.COMPANY_ID,
                IMTD.COMPANY_NO,
                IMTD.COMPANY_NAME,
                IMTD.CFP_DETAILS_ATTACHED_STATUS,
                IMTD.CFP_DETAILS_START_DATE,
                IMTD.CFP_DETAILS_END_DATE,
                hstatus.DESCRIPTION as cstatus,
                htype.DESCRIPTION as ctype,
				htrade.DESCRIPTION as COMPANY_TRADE_CLASS,
                hcategory.DESCRIPTION as ccategory,
                tradeContact='',
                IMTD.CFP_DETAILS_ATTACHED_DATE,
                IMTD.MODIFIED_DATE,
                usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as MODIFIED_BY,
                IMTD.CREATED_DATE,
                usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY,
                IMTD.COMPANY_MASTER_SID,
                IMTD.IMTD_CFP_DETAILS_SID,
                IMTD.COMPANY_STATUS,
                IMTD.COMPANY_TYPE,
                IMTD.TRADING_PARTNER_CONTRACT_NO,
                cm.COMPANY_CATEGORY
             FROM IMTD_CFP_DETAILS IMTD
                    JOIN COMPANY_MASTER cm on cm.COMPANY_MASTER_SID=IMTD.COMPANY_MASTER_SID AND cm.INBOUND_STATUS <> 'D'
                    LEFT JOIN HELPER_TABLE htrade on htrade.HELPER_TABLE_SID=IMTD.TRADING_PARTNER_CONTRACT_NO  AND htrade.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hcategory on hcategory.HELPER_TABLE_SID=cm.COMPANY_CATEGORY AND hcategory.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hstatus on hstatus.HELPER_TABLE_SID=IMTD.COMPANY_STATUS AND hstatus.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE htype on htype.HELPER_TABLE_SID=IMTD.COMPANY_TYPE AND htype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN ?.dbo.User_ usr ON usr.UserId = IMTD.MODIFIED_BY
                    LEFT JOIN ?.dbo.User_ usr1 ON usr1.UserId = IMTD.CREATED_BY
                    WHERE
                     IMTD.USERS_SID = '?' AND IMTD.SESSION_ID = '?' AND IMTD.OPERATION NOT IN ('D','F')
              )
            SELECT
		COUNT(1)
             FROM CDT  WHERE COMPANY_ID is not null
                     ?
        ]]>
		</query>
	</entity>
	<entity id="getCompaniesDetailsResults">
		<query>
                <![CDATA[
           With CDT as(
                SELECT
				IMTD.CHECK_RECORD,
                CASE
                WHEN CAST(CFP_DETAILS_START_DATE AS DATE) > convert(nvarchar, getdate(), 121) THEN 'Future'
                WHEN CAST(CFP_DETAILS_END_DATE AS DATE) <  convert(nvarchar, getdate(), 121)  THEN 'History'
                WHEN CAST(convert(nvarchar, getdate(), 121) AS DATE)  BETWEEN CAST(CFP_DETAILS_START_DATE AS DATE) AND CAST(ISNULL(CFP_DETAILS_END_DATE, CAST(convert(nvarchar, getdate(), 121) AS DATE) )  AS DATE) THEN 'Current'    
                END AS recordType,
                IMTD.COMPANY_ID,
                IMTD.COMPANY_NO,
                IMTD.COMPANY_NAME,
                IMTD.CFP_DETAILS_ATTACHED_STATUS,
                IMTD.CFP_DETAILS_START_DATE,
                IMTD.CFP_DETAILS_END_DATE,
                hstatus.DESCRIPTION as cstatus,
                htype.DESCRIPTION as ctype,
				htrade.DESCRIPTION as COMPANY_TRADE_CLASS,
                hcategory.DESCRIPTION as ccategory,
                tradeContact='',
                IMTD.CFP_DETAILS_ATTACHED_DATE,
                IMTD.MODIFIED_DATE,
                usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as MODIFIED_BY,
                IMTD.CREATED_DATE,
                usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY,
                IMTD.COMPANY_MASTER_SID,
                IMTD.IMTD_CFP_DETAILS_SID,
                IMTD.COMPANY_STATUS,
                IMTD.COMPANY_TYPE,
                IMTD.TRADING_PARTNER_CONTRACT_NO,
                cm.COMPANY_CATEGORY
             FROM IMTD_CFP_DETAILS IMTD
                    JOIN COMPANY_MASTER cm on cm.COMPANY_MASTER_SID=IMTD.COMPANY_MASTER_SID AND cm.INBOUND_STATUS <> 'D'
                    LEFT JOIN HELPER_TABLE htrade on htrade.HELPER_TABLE_SID=IMTD.TRADING_PARTNER_CONTRACT_NO  AND htrade.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hcategory on hcategory.HELPER_TABLE_SID=cm.COMPANY_CATEGORY AND hcategory.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hstatus on hstatus.HELPER_TABLE_SID=IMTD.COMPANY_STATUS AND hstatus.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE htype on htype.HELPER_TABLE_SID=IMTD.COMPANY_TYPE AND htype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN ?.dbo.User_ usr ON usr.UserId = IMTD.MODIFIED_BY
                    LEFT JOIN ?.dbo.User_ usr1 ON usr1.UserId = IMTD.CREATED_BY
                    WHERE
                     IMTD.USERS_SID = '?' AND IMTD.SESSION_ID = '?' AND IMTD.OPERATION NOT IN ('D','F')
              )
            SELECT
		*
             FROM CDT  WHERE COMPANY_ID is not null
                     ?
                     ORDER BY ?
                    OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getCompaniesDetailsViewResults">
		<query>
                <![CDATA[
            SELECT
                IMTD.COMPANY_ID,
                IMTD.COMPANY_NO,
                IMTD.COMPANY_NAME,
                CFP_DETAILS_ATTACHED_STATUS= CASE
                                WHEN CDASH.DESCRIPTION like '%Select One%' THEN ''
                                ELSE CDASH.DESCRIPTION
                        END,
                IMTD.CFP_DETAILS_START_DATE,
                IMTD.CFP_DETAILS_END_DATE,
                hstatus.DESCRIPTION as cstatus,
                htype.DESCRIPTION as ctype,
                htrade.DESCRIPTION as COMPANY_TRADE_CLASS,
                hcategory.DESCRIPTION as ccategory,
                tradeContact='',
                IMTD.CFP_DETAILS_ATTACHED_DATE,
                IMTD.MODIFIED_DATE,
                usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as MODIFIED_BY,
                IMTD.CREATED_DATE,
                usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY,
                IMTD.COMPANY_MASTER_SID,
                IMTD.IMTD_CFP_DETAILS_SID,
                IMTD.COMPANY_STATUS,
                IMTD.COMPANY_TYPE,
                IMTD.TRADING_PARTNER_CONTRACT_NO,
                cm.COMPANY_CATEGORY,
                CASE
                WHEN CAST(CFP_DETAILS_START_DATE AS DATE) > convert(nvarchar, getdate(), 121) THEN 'Future'
                WHEN CAST(CFP_DETAILS_END_DATE AS DATE) <  convert(nvarchar, getdate(), 121)  THEN 'History'
                WHEN CAST(convert(nvarchar, getdate(), 121) AS DATE)  BETWEEN CAST(CFP_DETAILS_START_DATE AS DATE) AND CAST(ISNULL(CFP_DETAILS_END_DATE, CAST(convert(nvarchar, getdate(), 121) AS DATE) )  AS DATE) THEN 'Current'    
                END AS recordType
             FROM IMTD_CFP_DETAILS IMTD
                    JOIN COMPANY_MASTER cm on cm.COMPANY_MASTER_SID=IMTD.COMPANY_MASTER_SID AND cm.INBOUND_STATUS <> 'D'
                    LEFT JOIN HELPER_TABLE htrade on htrade.HELPER_TABLE_SID=IMTD.TRADING_PARTNER_CONTRACT_NO AND htrade.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hcategory on hcategory.HELPER_TABLE_SID=cm.COMPANY_CATEGORY AND hcategory.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hstatus on hstatus.HELPER_TABLE_SID=IMTD.COMPANY_STATUS AND hstatus.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE htype on htype.HELPER_TABLE_SID=IMTD.COMPANY_TYPE AND htype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE CDASH on CDASH.HELPER_TABLE_SID=IMTD.CFP_DETAILS_ATTACHED_STATUS
                    LEFT JOIN ?.dbo.User_ usr ON usr.UserId = IMTD.MODIFIED_BY
                    LEFT JOIN ?.dbo.User_ usr1 ON usr1.UserId = IMTD.CREATED_BY
                    WHERE
                     IMTD.USERS_SID = '?' AND IMTD.SESSION_ID = '?' AND IMTD.OPERATION NOT IN ('D','F')
                     ?
                     ORDER BY ?
                    OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="populateCompaniesValue">
		<query>
                <![CDATA[
                    UPDATE dbo.IMTD_CFP_DETAILS SET ?=?,OPERATION=IIF(OPERATION='D','D','U') WHERE USERS_SID='?' AND SESSION_ID='?'
               ]]>
		</query>
	</entity>
	<entity id="checkSelectedCDCompanies">
		<query>
            <![CDATA[

         SELECT COUNT(IMTD_CFP_DETAILS_SID) FROM dbo.IMTD_CFP_DETAILS WHERE USERS_SID =?  AND SESSION_ID =? AND CHECK_RECORD='1'
 ]]>
		</query>
	</entity>
	<entity id="checkSelectedCDItems">
		<query>
            <![CDATA[

         SELECT COUNT(IMTD_ITEM_PRICE_REBATE_SID) FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS WHERE USERS_SID=? AND SESSION_ID=? AND CHECK_RECORD='1'
 ]]>
		</query>
	</entity>
	<entity id="deleteCDCompanies">
		<query>
            <![CDATA[

         UPDATE ICD  SET OPERATION='D' FROM dbo.IMTD_CFP_DETAILS ICD WHERE USERS_SID =?  AND SESSION_ID =? AND CHECK_RECORD='1'
 ]]>
		</query>
	</entity>
	<entity id="deleteCDItems">
		<query>
            <![CDATA[

         DELETE FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS WHERE USERS_SID=? AND SESSION_ID=? AND CHECK_RECORD='1'
 ]]>
		</query>
	</entity>
	<entity id="getItemsDetailsCount">
		<query>
                <![CDATA[
            SELECT
		COUNT(IMTD.IMTD_ITEM_PRICE_REBATE_SID)
             from
                        IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
                LEFT JOIN ITEM_MASTER im on
                        im.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                        AND im.INBOUND_STATUS <> 'D'
                LEFT JOIN HELPER_TABLE hform on
                        hform.HELPER_TABLE_SID = im.FORM
                LEFT JOIN HELPER_TABLE hstrength on
                        hstrength.HELPER_TABLE_SID = im.STRENGTH
                LEFT JOIN HELPER_TABLE htherapeutic on
                        htherapeutic.HELPER_TABLE_SID = im.THERAPEUTIC_CLASS
                LEFT JOIN HELPER_TABLE hstatus on
                        hstatus.HELPER_TABLE_SID = im.ITEM_STATUS
                LEFT JOIN HELPER_TABLE hpackageSize on
                        hpackageSize.HELPER_TABLE_SID = im.PACKAGE_SIZE Left Join BRAND_MASTER BM ON
                        im.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                LEFT JOIN ? . dbo.User_ usr ON
                        usr.UserId = IMTD.MODIFIED_BY
                LEFT JOIN ? . dbo.User_ usr1 ON
                        usr1.UserId = IMTD.CREATED_BY
                WHERE
                        OPERATION <> 'D'
                        and IMTD.USERS_SID = '?'
                        and IMTD.SESSION_ID = '?' ?
                        AND IMTD.ADD_COPY_INDICATOR IS NULL
        ]]>
		</query>
	</entity>
	<entity id="getItemsDetailsResults">
		<query>
                <![CDATA[
                SELECT
                        IMTD.CHECK_RECORD,
                        CASE
                        WHEN CAST(START_DATE AS DATE) > convert(nvarchar, getdate(), 121) THEN 'Future'
                        WHEN CAST(END_DATE AS DATE) <  convert(nvarchar, getdate(), 121)  THEN 'History'
                        WHEN CAST(convert(nvarchar, getdate(), 121) AS DATE)  BETWEEN CAST(START_DATE AS DATE) AND CAST(ISNULL(END_DATE, CAST(convert(nvarchar, getdate(), 121) AS DATE) )  AS DATE) THEN 'Current'
                        END AS recordType,
                        im.ITEM_NO,
                        im.ITEM_NAME,
                        im.ITEM_DESC,
                        IMTD.ATTACHED_STATUS,
                        IMTD.START_DATE,
                        IMTD.END_DATE,
                        status = CASE
                                WHEN hstatus.DESCRIPTION like '%Select One%' THEN ''
                                ELSE hstatus.DESCRIPTION
                        END,
                        form = CASE
                                WHEN hform.DESCRIPTION like '%Select One%' THEN ''
                                ELSE hform.DESCRIPTION
                        END,
                        strength=CASE
                                        WHEN hstrength.DESCRIPTION like '%Select One%' THEN ''
                                    ELSE hstrength.DESCRIPTION
                                    END,
                        therapeutic=CASE
                                        WHEN htherapeutic.DESCRIPTION like '%Select One%' THEN ''
                                    ELSE htherapeutic.DESCRIPTION
                                    END,
                        BM.BRAND_NAME AS BRAND,
                        IMTD.ATTACHED_DATE,
                        IMTD.MODIFIED_DATE,
                        usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as MODIFIED_BY,
                        IMTD.CREATED_DATE,
                        usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY,
                        IMTD.IMTD_ITEM_PRICE_REBATE_SID,
                        IMTD.ITEM_MASTER_SID,
                        im.ITEM_STATUS
                from
                        IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
                LEFT JOIN ITEM_MASTER im on
                        im.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                        AND im.INBOUND_STATUS <> 'D'
                LEFT JOIN HELPER_TABLE hform on
                        hform.HELPER_TABLE_SID = im.FORM
                LEFT JOIN HELPER_TABLE hstrength on
                        hstrength.HELPER_TABLE_SID = im.STRENGTH
                LEFT JOIN HELPER_TABLE htherapeutic on
                        htherapeutic.HELPER_TABLE_SID = im.THERAPEUTIC_CLASS
                LEFT JOIN HELPER_TABLE hstatus on
                        hstatus.HELPER_TABLE_SID = im.ITEM_STATUS
                LEFT JOIN HELPER_TABLE hpackageSize on
                        hpackageSize.HELPER_TABLE_SID = im.PACKAGE_SIZE Left Join BRAND_MASTER BM ON
                        im.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                LEFT JOIN ? . dbo.User_ usr ON
                        usr.UserId = IMTD.MODIFIED_BY
                LEFT JOIN ? . dbo.User_ usr1 ON
                        usr1.UserId = IMTD.CREATED_BY
                WHERE
                        OPERATION <> 'D'
                        and IMTD.USERS_SID = '?'
                        and IMTD.SESSION_ID = '?' ?
                        AND IMTD.ADD_COPY_INDICATOR IS NULL
                ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getItemsDetailsViewResults">
		<query>
                <![CDATA[
                SELECT
                        CASE
                        WHEN CAST(START_DATE AS DATE) > convert(nvarchar, getdate(), 121) THEN 'Future'
                        WHEN CAST(END_DATE AS DATE) <  convert(nvarchar, getdate(), 121)  THEN 'History'
                        WHEN CAST(convert(nvarchar, getdate(), 121) AS DATE)  BETWEEN CAST(START_DATE AS DATE) AND CAST(ISNULL(END_DATE, CAST(convert(nvarchar, getdate(), 121) AS DATE) )  AS DATE) THEN 'Current'
                        END AS recordType,
                        im.ITEM_NO,
                        im.ITEM_NAME,
                        im.ITEM_DESC,
                        ATTACHED_STATUS= CASE
                                WHEN ASH.DESCRIPTION like '%Select One%' THEN ''
                                ELSE ASH.DESCRIPTION
                        END,
                        IMTD.START_DATE,
                        IMTD.END_DATE,
                        status = CASE
                                WHEN hstatus.DESCRIPTION like '%Select One%' THEN ''
                                ELSE hstatus.DESCRIPTION
                        END,
                        form = CASE
                                WHEN hform.DESCRIPTION like '%Select One%' THEN ''
                                ELSE hform.DESCRIPTION
                        END,
                        strength=CASE
                                        WHEN hstrength.DESCRIPTION like '%Select One%' THEN ''
                                    ELSE hstrength.DESCRIPTION
                                    END,
                        therapeutic=CASE
                                        WHEN htherapeutic.DESCRIPTION like '%Select One%' THEN ''
                                    ELSE htherapeutic.DESCRIPTION
                                    END,
                        BM.BRAND_NAME AS BRAND,
                        IMTD.ATTACHED_DATE,
                        IMTD.MODIFIED_DATE,
                        usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as MODIFIED_BY,
                        IMTD.CREATED_DATE,
                        usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY,
                        IMTD.IMTD_ITEM_PRICE_REBATE_SID,
                        IMTD.ITEM_MASTER_SID,
                        im.ITEM_STATUS
                from
                        IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
                LEFT JOIN ITEM_MASTER im on
                        im.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                        AND im.INBOUND_STATUS <> 'D'
                LEFT JOIN HELPER_TABLE hform on
                        hform.HELPER_TABLE_SID = im.FORM
                LEFT JOIN HELPER_TABLE hstrength on
                        hstrength.HELPER_TABLE_SID = im.STRENGTH
                LEFT JOIN HELPER_TABLE htherapeutic on
                        htherapeutic.HELPER_TABLE_SID = im.THERAPEUTIC_CLASS
                LEFT JOIN HELPER_TABLE hstatus on
                        hstatus.HELPER_TABLE_SID = im.ITEM_STATUS
                LEFT JOIN HELPER_TABLE hpackageSize on
                        hpackageSize.HELPER_TABLE_SID = im.PACKAGE_SIZE Left Join BRAND_MASTER BM ON
                        im.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                LEFT JOIN HELPER_TABLE ASH on
                        ASH.HELPER_TABLE_SID = IMTD.ATTACHED_STATUS
                LEFT JOIN ? . dbo.User_ usr ON
                        usr.UserId = IMTD.MODIFIED_BY
                LEFT JOIN ? . dbo.User_ usr1 ON
                        usr1.UserId = IMTD.CREATED_BY
                WHERE
                        OPERATION <> 'D'
                        and IMTD.USERS_SID = '?'
                        and IMTD.SESSION_ID = '?' ?
                        AND IMTD.ADD_COPY_INDICATOR IS NULL
                ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="populateItemsValue">
		<query>
                <![CDATA[
                UPDATE IMTD  SET ?=? from dbo.IMTD_ITEM_PRICE_REBATE_DETAILS IMTD  WHERE USERS_SID='?' AND SESSION_ID='?'
               ]]>
		</query>
	</entity>
	<entity id="getPricingDetailsCount">
		<query>
                <![CDATA[
                    SELECT
                        COUNT(IMTD.IMTD_ITEM_PRICE_REBATE_SID)
                     FROM
                        IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
                        LEFT JOIN BRAND_MASTER BM ON
                                IMTD.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                        LEFT JOIN ?.dbo.User_ usr1 ON
                                usr1.UserId = IMTD.CREATED_BY
                        WHERE
                                OPERATION NOT IN ('D','F')
                                and IMTD.USERS_SID = '?'
                                and IMTD.SESSION_ID = '?' ?
                                AND IMTD.ADD_COPY_INDICATOR IS NULL
        ]]>
		</query>
	</entity>
	<entity id="getPricingDetailsResults">
		<query>
                <![CDATA[
                SELECT
                        IMTD.CHECK_RECORD,
                        CASE
                        WHEN CAST(CONTRACT_PRICE_START_DATE AS DATE) > convert(nvarchar, getdate(), 121) THEN 'Future'
                        WHEN CAST(CONTRACT_PRICE_END_DATE AS DATE) <  convert(nvarchar, getdate(), 121)  THEN 'History'
                        WHEN CAST(convert(nvarchar, getdate(), 121) AS DATE)  BETWEEN CAST(CONTRACT_PRICE_START_DATE AS DATE) AND CAST(ISNULL(CONTRACT_PRICE_END_DATE, CAST(convert(nvarchar, getdate(), 121) AS DATE) )  AS DATE) THEN 'Current'
                        END AS recordType,
                        IMTD.ITEM_ID,
                        IMTD.ITEM_NO,
                        IMTD.ITEM_NAME,
                        BM.BRAND_NAME,
                        IMTD.PS_STATUS,
                        IMTD.CONTRACT_PRICE_START_DATE,
                        IMTD.CONTRACT_PRICE_END_DATE,
                        IMTD.PRICE_TYPE,
                        PRICE=CASE
                                              WHEN IMTD.PRICE<>0 THEN str(IMTD.PRICE,16,2)
                                              ELSE ''
                                      END,
                        SUGGESTED_PRICE=CASE
                                              WHEN IMTD.SUGGESTED_PRICE<>0 THEN str(IMTD.SUGGESTED_PRICE,16,2)
                                              ELSE ''
                                      END,
                        IMTD."SOURCE",
                        usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY,
                        IMTD.CREATED_DATE,
                        IMTD.ATTACHED_DATE,
                        IMTD.IMTD_ITEM_PRICE_REBATE_SID,
                        IMTD.ITEM_MASTER_SID,
                        ptype=CASE
                                              WHEN (IMTD.PRICE_TYPE<>0 AND IPQ.ITEM_PRICING_QUALIFIER_NAME NOT LIKE 'Contract Price') THEN 1
                                              ELSE 0
                                      END,
                        PRICEVAL=CASE
                                              WHEN IMTD.PRICE<>0 THEN 1
                                              ELSE 0
                                      END
                FROM
                        IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
                LEFT JOIN BRAND_MASTER BM ON
                        IMTD.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                LEFT JOIN ITEM_PRICING_QUALIFIER IPQ ON
                        IPQ.ITEM_PRICING_QUALIFIER_SID=IMTD.PRICE_TYPE
                LEFT JOIN ?.dbo.User_ usr1 ON
                        usr1.UserId = IMTD.CREATED_BY
                WHERE
                        OPERATION NOT IN ('D','F')
                        and IMTD.USERS_SID = '?'
                        and IMTD.SESSION_ID = '?' ?
                        AND IMTD.ADD_COPY_INDICATOR IS NULL
                ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getPricingDetailsViewResults">
		<query>
                <![CDATA[
                SELECT
                        CASE
                        WHEN CAST(CONTRACT_PRICE_START_DATE AS DATE) > convert(nvarchar, getdate(), 121) THEN 'Future'
                        WHEN CAST(CONTRACT_PRICE_END_DATE AS DATE) <  convert(nvarchar, getdate(), 121)  THEN 'History'
                        WHEN CAST(convert(nvarchar, getdate(), 121) AS DATE)  BETWEEN CAST(CONTRACT_PRICE_START_DATE AS DATE) AND CAST(ISNULL(CONTRACT_PRICE_END_DATE, CAST(convert(nvarchar, getdate(), 121) AS DATE) )  AS DATE) THEN 'Current'
                        END AS recordType,
                        IMTD.ITEM_ID,
                        IMTD.ITEM_NO,
                        IMTD.ITEM_NAME,
                        BM.BRAND_NAME,
                        PS_STATUS=CASE
                                           WHEN PSH.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE PSH.DESCRIPTION
                                       END,
                        IMTD.CONTRACT_PRICE_START_DATE,
                        IMTD.CONTRACT_PRICE_END_DATE,
                        PRICE_TYPE=IPQ.ITEM_PRICING_QUALIFIER_NAME,
                        PRICE=CASE
                                              WHEN IMTD.PRICE<>0 THEN str(IMTD.PRICE,16,2)
                                              ELSE ''
                                      END,
                        SUGGESTED_PRICE=CASE
                                              WHEN IMTD.SUGGESTED_PRICE<>0 THEN str(IMTD.SUGGESTED_PRICE,16,2)
                                              ELSE ''
                                      END,
                        IMTD."SOURCE",
                        usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY,
                        IMTD.CREATED_DATE,
                        IMTD.ATTACHED_DATE,
                        IMTD.IMTD_ITEM_PRICE_REBATE_SID,
                        IMTD.ITEM_MASTER_SID
                FROM
                        IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
                LEFT JOIN BRAND_MASTER BM ON
                        IMTD.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                LEFT JOIN HELPER_TABLE PSH ON
                            PSH.HELPER_TABLE_SID=IMTD.PS_STATUS
                LEFT JOIN ITEM_PRICING_QUALIFIER IPQ ON
                        IPQ.ITEM_PRICING_QUALIFIER_SID=IMTD.PRICE_TYPE
                LEFT JOIN ?.dbo.User_ usr1 ON
                        usr1.UserId = IMTD.CREATED_BY
                WHERE
                        OPERATION NOT IN ('D','F')
                        and IMTD.USERS_SID = '?'
                        and IMTD.SESSION_ID = '?' ?
                        AND IMTD.ADD_COPY_INDICATOR IS NULL
                ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getPricingProtectionExcelResults">
		<query>
                <![CDATA[
              SELECT
	'1',
	recordType = '',
	IMTD.ITEM_ID,
	IMTD.ITEM_NO,
	IMTD.ITEM_NAME,
	BM.BRAND_NAME,
	PP_STATUS.DESCRIPTION as PP_STATUS,
	CONVERT(
		VARCHAR(10),
		IMTD.PRICE_PROTECTION_START_DATE,
		101
	) as PP_STARTDATE,
	CONVERT(
		VARCHAR(10),
		IMTD.PRICE_PROTECTION_END_DATE,
		101
	) as PP_ENDDATE,
	PP_TYPE.ITEM_PRICING_QUALIFIER_NAME as PP_TYPE,
	NEP = CASE
		WHEN IMTD.NEP IS NULL THEN ''
		ELSE str(
			IMTD.NEP,
			16,
			6
		)
	END,
	NEP_FORMULA_VAL = CASE
		WHEN IMTD.NEP_FORMULA IS NULL THEN ''
		ELSE NEPF.NET_SALES_FORMULA_NAME
	END,
	BPH.DESCRIPTION as BPH,
	basePriceVal = CASE
		WHEN BPH.DESCRIPTION LIKE 'M%' THEN str(
			ISNULL(
				CONVERT(
					VARCHAR(20),
					IMTD.BASE_PRICE_ENTRY
				),
				''
			),
			16,
			2
		)
		WHEN BPH.DESCRIPTION LIKE 'P%' THEN ISNULL(
			CONVERT(
				VARCHAR(20),
				BPDDLB.ITEM_PRICING_QUALIFIER_NAME 
			),
			''
		)
		WHEN BPH.DESCRIPTION LIKE 'D%' THEN ISNULL(
			CONVERT(
				VARCHAR(10),
				IMTD.BASE_PRICE_DATE,
				101
			),
			''
		)
		ELSE ''
	END,
	NB_PRICE.DESCRIPTION as NET_BASE_PRICE,
	NET_BASE_PRICE_FORMULA_VAL = CASE
		WHEN IMTD.NET_BASE_PRICE_FORMULA_ID IS NULL THEN ''
		ELSE NBPF.NET_SALES_FORMULA_NAME
	END,
	SPP_TYPE.ITEM_PRICING_QUALIFIER_NAME as SUBSEQUENT_PERIOD_PRICE_TYPE,
	SPP.DESCRIPTION as SUBSEQUENT_PRICE,
	NET_SUBSEQUENT_PRICE_FORMULA_VAL = CASE
		WHEN IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID IS NULL THEN ''
		ELSE NSPF.NET_SALES_FORMULA_NAME
	END,
	PT_INTERVAL.DESCRIPTION as PRICE_TOLERENCE_INTERVAL,
	PT_FREQUENCY.DESCRIPTION as PRICE_TOLERENCE_FREQUENCY,
	PT_TYPE.DESCRIPTION as PRICE_TOLERENCE_TYPE,
	PRICE_TOLERANCE = CASE
		WHEN IMTD.PRICE_TOLERANCE IS NULL THEN ''
		ELSE str(
			IMTD.PRICE_TOLERANCE,
			16,
			2
		)
	END,
	MAX_INCREMENTAL_CHANGE = CASE
		WHEN IMTD.MAX_INCREMENTAL_CHANGE IS NULL THEN ''
		ELSE str(
			IMTD.MAX_INCREMENTAL_CHANGE,
			16,
			2
		)
	END,
	RELIGIBLE.DESCRIPTION as RESET_ELIGIBLE,
	RTYPE.DESCRIPTION as RESET_TYPE,
	CONVERT(
		VARCHAR(10),
		IMTD.RESET_DATE,
		101
	) as RESET_DATE,
	RINTERVAL.DESCRIPTION as RESET_INTERVAL,
	RFREQUENCY.DESCRIPTION as RESET_FREQUENCY,
	RPTYPE.ITEM_PRICING_QUALIFIER_NAME as RESET_PRICE_TYPE,
	NRPTYPE.DESCRIPTION as NET_RESET_PRICE_TYPE,
	NET_RESET_PRICE_FORMULA_VAL = CASE
		WHEN IMTD.NET_RESET_PRICE_FORMULA_ID IS NULL THEN ''
		ELSE NRPF.NET_SALES_FORMULA_NAME
	END,
	NPTYPE.DESCRIPTION as NET_PRICE_TYPE,
	NET_PRICE_TYPE_FORMULA_VAL = CASE
		WHEN IMTD.NET_PRICE_TYPE_FORMULA IS NULL THEN ''
		ELSE NPTF.NET_SALES_FORMULA_NAME
	END,
	CONVERT(
		VARCHAR(10),
		IMTD.ATTACHED_DATE,
		101
	) as ATTACHED_DATE
FROM
	IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
LEFT JOIN BRAND_MASTER BM ON
	IMTD.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
LEFT JOIN NET_SALES_FORMULA_MASTER NEPF ON
	NEPF.NET_SALES_FORMULA_MASTER_SID = IMTD.NEP_FORMULA
LEFT JOIN NET_SALES_FORMULA_MASTER NBPF ON
	NBPF.NET_SALES_FORMULA_MASTER_SID = IMTD.NET_BASE_PRICE_FORMULA_ID
LEFT JOIN NET_SALES_FORMULA_MASTER NSPF ON
	NSPF.NET_SALES_FORMULA_MASTER_SID = IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID
LEFT JOIN NET_SALES_FORMULA_MASTER NRPF ON
	NRPF.NET_SALES_FORMULA_MASTER_SID = IMTD.NET_RESET_PRICE_FORMULA_ID
LEFT JOIN NET_SALES_FORMULA_MASTER NPTF ON
	NPTF.NET_SALES_FORMULA_MASTER_SID = IMTD.NET_PRICE_TYPE_FORMULA
LEFT JOIN HELPER_TABLE BPH ON
	BPH.HELPER_TABLE_SID = IMTD.BASE_PRICE_TYPE
LEFT JOIN HELPER_TABLE PP_STATUS ON
	IMTD.PRICE_PROTECTION_STATUS = PP_STATUS.HELPER_TABLE_SID
	AND PP_STATUS.DESCRIPTION NOT like '%Select One%'
LEFT JOIN ITEM_PRICING_QUALIFIER PP_TYPE ON
	IMTD.PRICE_PROTECTION_PRICE_TYPE = PP_TYPE.ITEM_PRICING_QUALIFIER_SID
	AND PP_TYPE.ITEM_PRICING_QUALIFIER_SID NOT like '%Select One%'
LEFT JOIN HELPER_TABLE NB_PRICE ON
	IMTD.NET_BASE_PRICE = NB_PRICE.HELPER_TABLE_SID
	AND NB_PRICE.DESCRIPTION NOT like '%Select One%'
LEFT JOIN ITEM_PRICING_QUALIFIER SPP_TYPE ON
	IMTD.SUBSEQUENT_PERIOD_PRICE_TYPE = SPP_TYPE.ITEM_PRICING_QUALIFIER_SID
	AND SPP_TYPE.ITEM_PRICING_QUALIFIER_NAME NOT like '%Select One%'
LEFT JOIN HELPER_TABLE SPP ON
	IMTD.NET_SUBSEQUENT_PERIOD_PRICE = SPP.HELPER_TABLE_SID
	AND SPP.DESCRIPTION NOT like '%Select One%'
LEFT JOIN HELPER_TABLE PT_INTERVAL ON
	IMTD.PRICE_TOLERANCE_INTERVAL = PT_INTERVAL.HELPER_TABLE_SID
	AND PT_INTERVAL.DESCRIPTION NOT like '%Select One%'
LEFT JOIN HELPER_TABLE PT_FREQUENCY ON
	IMTD.PRICE_TOLERANCE_FREQUENCY = PT_FREQUENCY.HELPER_TABLE_SID
	AND PT_FREQUENCY.DESCRIPTION NOT like '%Select One%'
LEFT JOIN HELPER_TABLE PT_TYPE ON
	IMTD.PRICE_TOLERANCE_TYPE = PT_TYPE.HELPER_TABLE_SID
	AND PT_TYPE.DESCRIPTION NOT like '%Select One%'
LEFT JOIN HELPER_TABLE RELIGIBLE ON
	IMTD.RESET_ELIGIBLE = RELIGIBLE.HELPER_TABLE_SID
	AND RELIGIBLE.DESCRIPTION NOT like '%Select One%'
LEFT JOIN HELPER_TABLE RTYPE ON
	IMTD.RESET_TYPE = RTYPE.HELPER_TABLE_SID
	AND RTYPE.DESCRIPTION NOT like '%Select One%'
LEFT JOIN HELPER_TABLE RINTERVAL ON
	IMTD.RESET_INTERVAL = RINTERVAL.HELPER_TABLE_SID
	AND RINTERVAL.DESCRIPTION NOT like '%Select One%'
LEFT JOIN HELPER_TABLE RFREQUENCY ON
	IMTD.RESET_FREQUENCY = RFREQUENCY.HELPER_TABLE_SID
	AND RFREQUENCY.DESCRIPTION NOT like '%Select One%'
LEFT JOIN ITEM_PRICING_QUALIFIER RPTYPE ON
	IMTD.RESET_PRICE_TYPE = RPTYPE.ITEM_PRICING_QUALIFIER_SID
	AND RPTYPE.ITEM_PRICING_QUALIFIER_NAME NOT like '%Select One%'
LEFT JOIN HELPER_TABLE NRPTYPE ON
	IMTD.NET_RESET_PRICE_TYPE = NRPTYPE.HELPER_TABLE_SID
	AND NRPTYPE.DESCRIPTION NOT like '%Select One%'
LEFT JOIN HELPER_TABLE NPTYPE ON
	IMTD.NET_PRICE_TYPE = NPTYPE.HELPER_TABLE_SID
	AND NPTYPE.DESCRIPTION NOT like '%Select One%'
LEFT JOIN ITEM_PRICING_QUALIFIER BPDDLB ON
	IMTD.BASE_PRICE_DDLB = BPDDLB.ITEM_PRICING_QUALIFIER_SID
	AND BPDDLB.ITEM_PRICING_QUALIFIER_NAME NOT like '%Select One%'
	AND BPH.DESCRIPTION LIKE 'P%'
WHERE
	OPERATION NOT IN(
		'D',
		'F'
	) 
	
	AND USERS_SID = ?
	AND SESSION_ID = ?
        ]]>
		</query>
	</entity>
	<entity id="getPricingProtectionCount">
		<query>
                <![CDATA[
                    SELECT
                        COUNT(IMTD.IMTD_ITEM_PRICE_REBATE_SID)
                     FROM
                            IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
                    LEFT JOIN BRAND_MASTER BM ON
                            IMTD.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NEPF ON
                            NEPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NEP_FORMULA
                    LEFT JOIN NET_SALES_FORMULA_MASTER NBPF ON
                            NBPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_BASE_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NSPF ON
                            NSPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NRPF ON
                            NRPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_RESET_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NPTF ON
                            NPTF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_PRICE_TYPE_FORMULA
                       
                WHERE
                        OPERATION NOT IN ('D','F')
                                and IMTD.USERS_SID = '?'
                                and IMTD.SESSION_ID = '?' ?
        ]]>
		</query>
	</entity>
	<entity id="getPricingProtectionResults">
		<query>
                <![CDATA[
                    SELECT
                            IMTD.CHECK_RECORD,
                            CASE
                            WHEN CAST(PRICE_PROTECTION_START_DATE AS DATE) > convert(nvarchar, getdate(), 121) THEN 'Future'
                            WHEN CAST(PRICE_PROTECTION_END_DATE AS DATE) <  convert(nvarchar, getdate(), 121)  THEN 'History'
                            WHEN CAST(convert(nvarchar, getdate(), 121) AS DATE)  BETWEEN CAST(PRICE_PROTECTION_START_DATE AS DATE) AND CAST(ISNULL(PRICE_PROTECTION_END_DATE, CAST(convert(nvarchar, getdate(), 121) AS DATE) )  AS DATE) THEN 'Current'
                            END AS recordType,
                            IMTD.ITEM_ID,
                            IMTD.ITEM_NO,
                            IMTD.ITEM_NAME,
                            BM.BRAND_NAME,
                            IMTD.PRICE_PROTECTION_STATUS,
                            IMTD.PRICE_PROTECTION_START_DATE,
                            IMTD.PRICE_PROTECTION_END_DATE,
                            IMTD.PRICE_PROTECTION_PRICE_TYPE,
                            NEP=CASE
                                                  WHEN IMTD.NEP IS NULL THEN ''
                                                  ELSE str(IMTD.NEP,16,6)
                                          END,
                            NEP_FORMULA_VAL=CASE
                                                  WHEN IMTD.NEP_FORMULA IS NULL THEN ''
                                                  ELSE NEPF.NET_SALES_FORMULA_NAME
                                          END,
                            IMTD.BASE_PRICE_TYPE,
                            basePriceVal=CASE
                                         WHEN BPH.DESCRIPTION LIKE 'M%' THEN str(ISNULL(CONVERT(VARCHAR(20),IMTD.BASE_PRICE_ENTRY),''),16,2)
                                         WHEN BPH.DESCRIPTION LIKE 'P%' THEN ISNULL(CONVERT(VARCHAR(20),IMTD.BASE_PRICE_DDLB),'')
                                         WHEN BPH.DESCRIPTION LIKE 'D%' THEN ISNULL(CONVERT(VARCHAR(10),IMTD.BASE_PRICE_DATE,101),'')
                                         ELSE ''
                                 END,
                            IMTD.NET_BASE_PRICE,
                            NET_BASE_PRICE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_BASE_PRICE_FORMULA_ID IS NULL THEN ''
                                                  ELSE NBPF.NET_SALES_FORMULA_NAME
                                          END,
                        IMTD.SUBSEQUENT_PERIOD_PRICE_TYPE,
                            IMTD.NET_SUBSEQUENT_PERIOD_PRICE,
                            NET_SUBSEQUENT_PRICE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID IS NULL THEN ''
                                                  ELSE NSPF.NET_SALES_FORMULA_NAME
                                          END,
                        IMTD.PRICE_TOLERANCE_INTERVAL,
                            IMTD.PRICE_TOLERANCE_FREQUENCY,
                            IMTD.PRICE_TOLERANCE_TYPE,

                            PRICE_TOLERANCE=CASE
                                                  WHEN IMTD.PRICE_TOLERANCE IS NULL THEN ''
                                                  ELSE str(IMTD.PRICE_TOLERANCE,16,2)
                                          END,
                            MAX_INCREMENTAL_CHANGE=CASE
                                                  WHEN IMTD.MAX_INCREMENTAL_CHANGE IS NULL THEN ''
                                                  ELSE str(IMTD.MAX_INCREMENTAL_CHANGE,16,2)
                                          END,
                            IMTD.RESET_ELIGIBLE,
                            IMTD.RESET_TYPE,
                            IMTD.RESET_DATE,
                            IMTD.RESET_INTERVAL,
                            IMTD.RESET_FREQUENCY,
                            IMTD.RESET_PRICE_TYPE,
                            IMTD.NET_RESET_PRICE_TYPE,
                            NET_RESET_PRICE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_RESET_PRICE_FORMULA_ID IS NULL THEN ''
                                                  ELSE NRPF.NET_SALES_FORMULA_NAME
                                          END,
                            IMTD.NET_PRICE_TYPE,
                            NET_PRICE_TYPE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_PRICE_TYPE_FORMULA IS NULL THEN ''
                                                  ELSE NPTF.NET_SALES_FORMULA_NAME
                                          END,
                            IMTD.ATTACHED_DATE,
                            IMTD.IMTD_ITEM_PRICE_REBATE_SID,
                            IMTD.ITEM_MASTER_SID,
                            IMTD.NEP_FORMULA,
                            IMTD.NET_BASE_PRICE_FORMULA_ID,
                            IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID,
                            IMTD.NET_RESET_PRICE_FORMULA_ID,
                            IMTD.NET_PRICE_TYPE_FORMULA,
                            IMTD.BASE_PRICE_DDLB,
                            BASE_PRICE_ENTRY=CASE
                                                  WHEN IMTD.BASE_PRICE_ENTRY IS NULL THEN ''
                                                  ELSE str(IMTD.BASE_PRICE_ENTRY,16,2)
                                          END,
                            PTH.DESCRIPTION as PRICE_TOLERANCE_TYPE_DES3,
                            PTH.DESCRIPTION as PRICE_TOLERANCE_TYPE_DES4,
                            PTH.DESCRIPTION as PRICE_TOLERANCE_TYPE_DES5,
                            BPH.DESCRIPTION,
                            PTH.DESCRIPTION as PRICE_TOLERANCE_TYPE_DES,
                            PTH.DESCRIPTION as PRICE_TOLERANCE_TYPE_DES1, 
                            PTH.DESCRIPTION as PRICE_TOLERANCE_TYPE_DES2, 
                            BPH.DESCRIPTION AS BDES,
                            IMTD.BASE_PRICE_DDLB AS IBPDDLB,
                            IMTD.BASE_PRICE_DATE AS IBPD,
                                    BASE_PRICE_ENTRYYY=CASE
                                                  WHEN IMTD.BASE_PRICE_ENTRY IS NULL THEN ''
                                                  ELSE str(IMTD.BASE_PRICE_ENTRY,16,2)
                                          END
                            
                            
                    FROM
                            IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
                    LEFT JOIN BRAND_MASTER BM ON
                            IMTD.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NEPF ON
                            NEPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NEP_FORMULA
                    LEFT JOIN NET_SALES_FORMULA_MASTER NBPF ON
                            NBPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_BASE_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NSPF ON
                            NSPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NRPF ON
                            NRPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_RESET_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NPTF ON
                            NPTF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_PRICE_TYPE_FORMULA
                    LEFT JOIN HELPER_TABLE BPH ON
                            BPH.HELPER_TABLE_SID=IMTD.BASE_PRICE_TYPE
                    LEFT JOIN HELPER_TABLE PTH ON
                            PTH.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_TYPE
                WHERE
                        OPERATION NOT IN ('D','F')
                        and IMTD.USERS_SID = '?'
                        and IMTD.SESSION_ID = '?' ?
                ORDER BY
                        ? ,IMTD.IMTD_ITEM_PRICE_REBATE_SID ASC OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getPricingProtectionViewResults">
		<query>
                <![CDATA[
                    SELECT
                            CASE
                            WHEN CAST(PRICE_PROTECTION_START_DATE AS DATE) > convert(nvarchar, getdate(), 121) THEN 'Future'
                            WHEN CAST(PRICE_PROTECTION_END_DATE AS DATE) <  convert(nvarchar, getdate(), 121)  THEN 'History'
                            WHEN CAST(convert(nvarchar, getdate(), 121) AS DATE)  BETWEEN CAST(PRICE_PROTECTION_START_DATE AS DATE) AND CAST(ISNULL(PRICE_PROTECTION_END_DATE, CAST(convert(nvarchar, getdate(), 121) AS DATE) )  AS DATE) THEN 'Current'
                            END AS recordType,
                            IMTD.ITEM_ID,
                            IMTD.ITEM_NO,
                            IMTD.ITEM_NAME,
                            BM.BRAND_NAME,
                            PRICE_PROTECTION_STATUS=CASE
                                           WHEN PPSH.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE PPSH.DESCRIPTION
                                       END,
                            IMTD.PRICE_PROTECTION_START_DATE,
                            IMTD.PRICE_PROTECTION_END_DATE,
                            PPPTH.ITEM_PRICING_QUALIFIER_NAME as PRICE_PROTECTION_PRICE_TYPE_VAL,
                            NEP=CASE
                                                  WHEN IMTD.NEP IS NULL THEN ''
                                                  ELSE str(IMTD.NEP,16,6)
                                          END,
                            NEP_FORMULA_VAL=CASE
                                                  WHEN IMTD.NEP_FORMULA IS NULL THEN ''
                                                  ELSE NEPF.NET_SALES_FORMULA_NAME
                                          END,
                            BASE_PRICE_TYPE=CASE
                                           WHEN BPH.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE BPH.DESCRIPTION
                                       END,
                            basePriceVal=CASE
                                         WHEN BPH.DESCRIPTION LIKE 'M%' THEN CASE WHEN IMTD.BASE_PRICE_ENTRY<>0 THEN str(IMTD.BASE_PRICE_ENTRY,16,2) ELSE '' END
                                         WHEN BPH.DESCRIPTION LIKE 'P%' THEN BPTQ.ITEM_PRICING_QUALIFIER_NAME
                                         WHEN BPH.DESCRIPTION LIKE 'D%' THEN ISNULL(CONVERT(VARCHAR(20),IMTD.BASE_PRICE_DATE),'')
                                         ELSE ''
                                 END,
                            NET_BASE_PRICE=CASE
                                           WHEN NBPH.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE NBPH.DESCRIPTION
                                       END,
                            NET_BASE_PRICE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_BASE_PRICE_FORMULA_ID IS NULL THEN ''
                                                  ELSE NBPF.NET_SALES_FORMULA_NAME
                                          END,
                            SPPTH.ITEM_PRICING_QUALIFIER_NAME as SUBSEQUENT_PERIOD_PRICE_TYPE_VAL,
                            NET_SUBSEQUENT_PERIOD_PRICE=CASE
                                           WHEN NSPPH.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE NSPPH.DESCRIPTION
                                       END,
                            NET_SUBSEQUENT_PRICE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID IS NULL THEN ''
                                                  ELSE NSPF.NET_SALES_FORMULA_NAME
                                          END,
                        PRICE_TOLERANCE_INTERVAL=CASE
                                           WHEN PTIH.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE PTIH.DESCRIPTION
                                       END,
                            PRICE_TOLERANCE_FREQUENCY=CASE
                                           WHEN PTFH.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE PTFH.DESCRIPTION
                                       END,
                            PRICE_TOLERANCE_TYPE=CASE
                                           WHEN PTTH.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE PTTH.DESCRIPTION
                                       END,

                            PRICE_TOLERANCE=CASE
                                                  WHEN IMTD.PRICE_TOLERANCE IS NULL THEN ''
                                                  ELSE str(IMTD.PRICE_TOLERANCE,16,2)
                                          END,
                            MAX_INCREMENTAL_CHANGE=CASE
                                                  WHEN IMTD.MAX_INCREMENTAL_CHANGE IS NULL THEN ''
                                                  ELSE str(IMTD.MAX_INCREMENTAL_CHANGE,16,2)
                                          END,
                            RESET_ELIGIBLE=CASE
                                           WHEN REH.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE REH.DESCRIPTION
                                       END,
                            RESET_TYPE=CASE
                                           WHEN RTH.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE RTH.DESCRIPTION
                                       END,
                            IMTD.RESET_DATE,
                            RESET_INTERVAL=CASE
                                           WHEN RIH.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE RIH.DESCRIPTION
                                       END,
                            RESET_FREQUENCY=CASE
                                           WHEN RFH.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE RFH.DESCRIPTION
                                       END,
                            RPTH.ITEM_PRICING_QUALIFIER_NAME as RESET_PRICE_TYPE_VAL,
                            NET_RESET_PRICE_TYPE=CASE
                                           WHEN NRPTH.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE NRPTH.DESCRIPTION
                                       END,
                            NET_RESET_PRICE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_RESET_PRICE_FORMULA_ID IS NULL THEN ''
                                                  ELSE NRPF.NET_SALES_FORMULA_NAME
                                          END,
                            NET_PRICE_TYPE=CASE
                                           WHEN NPTH.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE NPTH.DESCRIPTION
                                       END,
                            NET_PRICE_TYPE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_PRICE_TYPE_FORMULA IS NULL THEN ''
                                                  ELSE NPTF.NET_SALES_FORMULA_NAME
                                          END,
                            IMTD.ATTACHED_DATE,
                            IMTD.IMTD_ITEM_PRICE_REBATE_SID,
                            IMTD.ITEM_MASTER_SID,
                            IMTD.NEP_FORMULA,
                            IMTD.NET_BASE_PRICE_FORMULA_ID,
                            IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID,
                            IMTD.NET_RESET_PRICE_FORMULA_ID,
                            IMTD.NET_PRICE_TYPE_FORMULA,
                            IMTD.BASE_PRICE_DDLB,
                            BASE_PRICE_ENTRY=CASE
                                                  WHEN IMTD.BASE_PRICE_ENTRY IS NULL THEN ''
                                                  ELSE str(IMTD.BASE_PRICE_ENTRY,16,2)
                                          END,
                            IMTD.BASE_PRICE_DATE,
                            BPH.DESCRIPTION
                    FROM
                            IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
                    LEFT JOIN BRAND_MASTER BM ON
                            IMTD.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NEPF ON
                            NEPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NEP_FORMULA
                    LEFT JOIN NET_SALES_FORMULA_MASTER NBPF ON
                            NBPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_BASE_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NSPF ON
                            NSPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NRPF ON
                            NRPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_RESET_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NPTF ON
                            NPTF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_PRICE_TYPE_FORMULA
                    LEFT JOIN HELPER_TABLE BPH ON
                            BPH.HELPER_TABLE_SID=IMTD.BASE_PRICE_TYPE
                    LEFT JOIN HELPER_TABLE PPSH ON
                            PPSH.HELPER_TABLE_SID=IMTD.PRICE_PROTECTION_STATUS
                    LEFT JOIN ITEM_PRICING_QUALIFIER PPPTH ON
                        PPPTH.ITEM_PRICING_QUALIFIER_SID=IMTD.PRICE_PROTECTION_PRICE_TYPE
                    LEFT JOIN ITEM_PRICING_QUALIFIER BPTQ ON
                        BPTQ.ITEM_PRICING_QUALIFIER_SID=IMTD.BASE_PRICE_DDLB
                    LEFT JOIN HELPER_TABLE NBPH ON
                            NBPH.HELPER_TABLE_SID=IMTD.NET_BASE_PRICE
                    LEFT JOIN ITEM_PRICING_QUALIFIER SPPTH ON
                        SPPTH.ITEM_PRICING_QUALIFIER_SID=IMTD.SUBSEQUENT_PERIOD_PRICE_TYPE
                    LEFT JOIN HELPER_TABLE NSPPH ON
                            NSPPH.HELPER_TABLE_SID=IMTD.NET_SUBSEQUENT_PERIOD_PRICE
                    LEFT JOIN HELPER_TABLE PTIH ON
                            PTIH.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_INTERVAL
                    LEFT JOIN HELPER_TABLE PTFH ON
                            PTFH.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_FREQUENCY
                    LEFT JOIN HELPER_TABLE PTTH ON
                            PTTH.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_TYPE
                    LEFT JOIN HELPER_TABLE REH ON
                            REH.HELPER_TABLE_SID=IMTD.RESET_ELIGIBLE
                    LEFT JOIN HELPER_TABLE RTH ON
                            RTH.HELPER_TABLE_SID=IMTD.RESET_TYPE
                    LEFT JOIN HELPER_TABLE RIH ON
                            RIH.HELPER_TABLE_SID=IMTD.RESET_INTERVAL
                    LEFT JOIN HELPER_TABLE RFH ON
                            RFH.HELPER_TABLE_SID=IMTD.RESET_FREQUENCY
                    LEFT JOIN ITEM_PRICING_QUALIFIER RPTH ON
                        RPTH.ITEM_PRICING_QUALIFIER_SID=IMTD.RESET_PRICE_TYPE
                    LEFT JOIN HELPER_TABLE NRPTH ON
                            NRPTH.HELPER_TABLE_SID=IMTD.NET_RESET_PRICE_TYPE
                    LEFT JOIN HELPER_TABLE NPTH ON
                            NPTH.HELPER_TABLE_SID=IMTD.NET_PRICE_TYPE
                WHERE
                        OPERATION NOT IN ('D','F')
                        and IMTD.USERS_SID = '?'
                        and IMTD.SESSION_ID = '?' ?
                ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	<entity id="getRebateDetailsCount">
		<query>
                <![CDATA[
                    SELECT
                        COUNT(IMTD.IMTD_ITEM_PRICE_REBATE_SID)
                     FROM
                                dbo.IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
                        LEFT JOIN DBO.FORECASTING_FORMULA FF ON
                                FF.FORECASTING_FORMULA_SID = IMTD.FORMULA_ID
                        LEFT JOIN DBO.NET_SALES_FORMULA_MASTER NSFM ON
                                NSFM.NET_SALES_FORMULA_MASTER_SID = IMTD.NET_SALES_FORMULA_MASTER_SID
                        LEFT JOIN DBO.CDR_MODEL NET ON
                                NET.CDR_MODEL_SID = IMTD.NET_SALES_RULE
                        LEFT JOIN DBO.CDR_MODEL EVA ON
                                EVA.CDR_MODEL_SID = IMTD.EVALUATION_RULE
                        LEFT JOIN DBO.CDR_MODEL CAL ON
                                CAL.CDR_MODEL_SID = IMTD.CALCULATION_RULE
                        LEFT JOIN DBO.REBATE_PLAN_MASTER RPM ON
                                RPM.REBATE_PLAN_MASTER_SID = IMTD.REBATE_PLAN_SYSTEM_ID
                        LEFT JOIN DBO.DEDUCTION_CALENDAR_MASTER DC ON
                                DC.DEDUCTION_CALENDAR_MASTER_SID = IMTD.DEDUCTION_CALENDAR_MASTER_SID
                        LEFT JOIN DBO.HELPER_TABLE hitp ON
                                hitp.HELPER_TABLE_SID = IMTD.ITEM_TYPE
                WHERE
                        OPERATION NOT IN ('D','F')
                                and IMTD.USERS_SID = '?'
                                and IMTD.SESSION_ID = '?' ?
                                AND IMTD.ADD_COPY_INDICATOR IS NULL
        ]]>
		</query>
	</entity>
	<entity id="getRebateDetailsResults">
		<query>
                <![CDATA[
                        SELECT
                                IMTD.CHECK_RECORD,
                                CASE
                                WHEN CAST(ITEM_REBATE_START_DATE AS DATE) > convert(nvarchar, getdate(), 121) THEN 'Future'
                                WHEN CAST(ITEM_REBATE_END_DATE AS DATE) <  convert(nvarchar, getdate(), 121)  THEN 'History'
                                WHEN CAST(convert(nvarchar, getdate(), 121) AS DATE)  BETWEEN CAST(ITEM_REBATE_START_DATE AS DATE) AND CAST(ISNULL(ITEM_REBATE_END_DATE, CAST(convert(nvarchar, getdate(), 121) AS DATE) )  AS DATE) THEN 'Current'
                                END AS recordType,
                                IMTD.ITEM_NO,
                                IMTD.ITEM_NAME,
                                itemType=CASE
                                           WHEN hitp.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE hitp.DESCRIPTION
                                       END,
                                IMTD.ITEM_ID,
                                IMTD.RS_ATTACHED_STATUS,
                                IMTD.ITEM_REBATE_START_DATE,
                                IMTD.ITEM_REBATE_END_DATE,
                                BUNDLE_NO_VAL=CASE
                                                      WHEN IMTD.BUNDLE_NO IS NULL THEN ''
                                                      ELSE IMTD.BUNDLE_NO
                                              END,
                            REBATE_PLAN_NO_VAL=CASE
                                                      WHEN IMTD.REBATE_PLAN_SYSTEM_ID IS NULL THEN ''
                                                      ELSE RPM.REBATE_PLAN_NO
                                              END,
                            REBATE_PLAN_NAME_VAL=CASE
                                                      WHEN IMTD.REBATE_PLAN_SYSTEM_ID IS NULL THEN ''
                                                      ELSE RPM.REBATE_PLAN_NAME
                                              END,
                            DEDUCTION_CALENDAR_NO_VAL=CASE
                                                      WHEN IMTD.DEDUCTION_CALENDAR_MASTER_SID IS NULL THEN ''
                                                      ELSE DC.DEDUCTION_CALENDAR_NO
                                              END,
                            DEDUCTION_CALENDAR_NAME_VAL=CASE
                                                      WHEN IMTD.DEDUCTION_CALENDAR_MASTER_SID IS NULL THEN ''
                                                      ELSE DC.DEDUCTION_CALENDAR_NAME
                                              END,
                            IMTD.FORMULA_TYPE,
                            FORMULA_NO_VAL=CASE
                                                      WHEN IMTD.FORMULA_ID IS NULL THEN ''
                                                      ELSE FF.FORMULA_NO
                                              END,
                            FF.FORMULA_NAME,
                            NET_SALE_FORMULA_NO_VAL=CASE
                                                      WHEN IMTD.NET_SALES_FORMULA_MASTER_SID IS NULL THEN ''
                                                      ELSE NSFM.NET_SALES_FORMULA_NO
                                              END,
                            NET_SALES_RULE_VAL=CASE
                                                      WHEN IMTD.NET_SALES_RULE IS NULL THEN ''
                                                      ELSE NET.RULE_NAME
                                              END,
                            EVA_RULE_VAL=CASE
                                                      WHEN IMTD.EVALUATION_RULE IS NULL THEN ''
                                                      ELSE EVA.RULE_NAME
                                              END,
                            EVALUATION_RULE_BUNDLE=CASE
                                                      WHEN IMTD.EVALUATION_RULE_BUNDLE IS NULL THEN ''
                                                      ELSE IMTD.EVALUATION_RULE_BUNDLE
                                              END,
                            CAL_RULE_VAL=CASE
                                                      WHEN IMTD.CALCULATION_RULE IS NULL THEN ''
                                                      ELSE CAL.RULE_NAME
                                              END,
                            CALCULATION_RULE_BUNDLE=CASE
                                                      WHEN IMTD.CALCULATION_RULE_BUNDLE IS NULL THEN ''
                                                      ELSE IMTD.CALCULATION_RULE_BUNDLE
                                              END,
                            IMTD.ATTACHED_DATE,
                                IMTD.IMTD_ITEM_PRICE_REBATE_SID,
                                IMTD.ITEM_MASTER_SID,
                                IMTD.FORMULA_ID,
                                IMTD.NET_SALES_FORMULA_MASTER_SID,
                                IMTD.NET_SALES_RULE,
                                IMTD.EVALUATION_RULE,
                                IMTD.CALCULATION_RULE,
                                IMTD.REBATE_PLAN_SYSTEM_ID,
                                IMTD.DEDUCTION_CALENDAR_MASTER_SID
                        FROM
                                dbo.IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
                        LEFT JOIN DBO.FORECASTING_FORMULA FF ON
                                FF.FORECASTING_FORMULA_SID = IMTD.FORMULA_ID
                        LEFT JOIN DBO.NET_SALES_FORMULA_MASTER NSFM ON
                                NSFM.NET_SALES_FORMULA_MASTER_SID = IMTD.NET_SALES_FORMULA_MASTER_SID
                        LEFT JOIN DBO.CDR_MODEL NET ON
                                NET.CDR_MODEL_SID = IMTD.NET_SALES_RULE
                        LEFT JOIN DBO.CDR_MODEL EVA ON
                                EVA.CDR_MODEL_SID = IMTD.EVALUATION_RULE
                        LEFT JOIN DBO.CDR_MODEL CAL ON
                                CAL.CDR_MODEL_SID = IMTD.CALCULATION_RULE
                        LEFT JOIN DBO.REBATE_PLAN_MASTER RPM ON
                                RPM.REBATE_PLAN_MASTER_SID = IMTD.REBATE_PLAN_SYSTEM_ID
                        LEFT JOIN DBO.DEDUCTION_CALENDAR_MASTER DC ON
                                DC.DEDUCTION_CALENDAR_MASTER_SID = IMTD.DEDUCTION_CALENDAR_MASTER_SID
                        LEFT JOIN DBO.HELPER_TABLE hitp ON
                                hitp.HELPER_TABLE_SID = IMTD.ITEM_TYPE
                WHERE
                        OPERATION NOT IN ('D','F')
                        and IMTD.USERS_SID = '?'
                        and IMTD.SESSION_ID = '?' ?
                        AND IMTD.ADD_COPY_INDICATOR IS NULL
                ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;

]]>
		</query>
	</entity>
	<entity id="getRebateDetailsViewCount">
		<query>
                <![CDATA[
                    SELECT
                        COUNT(IMTD.IMTD_ITEM_PRICE_REBATE_SID)
                     FROM
                                dbo.IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
                        LEFT JOIN DBO.FORECASTING_FORMULA FF ON
                                FF.FORECASTING_FORMULA_SID = IMTD.FORMULA_ID
                        LEFT JOIN DBO.REBATE_PLAN_MASTER RPM ON
                                RPM.REBATE_PLAN_MASTER_SID = IMTD.REBATE_PLAN_SYSTEM_ID
                        LEFT JOIN DBO.HELPER_TABLE hitp ON
                                hitp.HELPER_TABLE_SID = IMTD.ITEM_TYPE
                WHERE
                        OPERATION NOT IN ('D','F')
                                and IMTD.USERS_SID = '?'
                                and IMTD.SESSION_ID = '?' ?
                                AND IMTD.ADD_COPY_INDICATOR IS NULL
        ]]>
		</query>
	</entity>
	<entity id="getRebateDetailsViewResults">
		<query>
                <![CDATA[
                        SELECT
                                CASE
                                WHEN CAST(ITEM_REBATE_START_DATE AS DATE) > convert(nvarchar, getdate(), 121) THEN 'Future'
                                WHEN CAST(ITEM_REBATE_END_DATE AS DATE) <  convert(nvarchar, getdate(), 121)  THEN 'History'
                                WHEN CAST(convert(nvarchar, getdate(), 121) AS DATE)  BETWEEN CAST(ITEM_REBATE_START_DATE AS DATE) AND CAST(ISNULL(ITEM_REBATE_END_DATE, CAST(convert(nvarchar, getdate(), 121) AS DATE) )  AS DATE) THEN 'Current'
                                END AS recordType,
                                IMTD.ITEM_NO,
                                IMTD.ITEM_NAME,
                                itemType=CASE
                                           WHEN hitp.DESCRIPTION like '%Select One%' THEN ''
                                           ELSE hitp.DESCRIPTION
                                       END,
                                FORMULA_ID_VAL=ISNULL(CONVERT(varchar(20),IMTD.FORMULA_ID),''),
                                FORMULA_NAME_VAL=ISNULL(FF.FORMULA_NAME,''),
                                REBATE_PLAN_NAME_VAL=ISNULL(RPM.REBATE_PLAN_NAME,''),
                                IMTD.ITEM_REBATE_START_DATE,
                                IMTD.ITEM_REBATE_END_DATE,
                                IMTD.REBATE_REVISION_DATE,
                                IMTD.IMTD_ITEM_PRICE_REBATE_SID
                        FROM
                                dbo.IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
                        LEFT JOIN DBO.FORECASTING_FORMULA FF ON
                                FF.FORECASTING_FORMULA_SID = IMTD.FORMULA_ID
                        LEFT JOIN DBO.REBATE_PLAN_MASTER RPM ON
                                RPM.REBATE_PLAN_MASTER_SID = IMTD.REBATE_PLAN_SYSTEM_ID
                        LEFT JOIN DBO.HELPER_TABLE hitp ON
                                hitp.HELPER_TABLE_SID = IMTD.ITEM_TYPE
                WHERE
                        OPERATION NOT IN ('D','F')
                        and IMTD.USERS_SID = '?'
                        and IMTD.SESSION_ID = '?' ?
                        AND IMTD.ADD_COPY_INDICATOR IS NULL
                ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;

]]>
		</query>
	</entity>
	<entity id="getCDNetSalesFormulaCount">
		<query>
                <![CDATA[
                    select
                            COUNT(NSF.NET_SALES_FORMULA_MASTER_SID)
                    from
                            NET_SALES_FORMULA_MASTER NSF
                    LEFT JOIN dbo.HELPER_TABLE hft ON
                            hft.HELPER_TABLE_SID = NSF.NET_SALES_FORMULA_TYPE
                    JOIN ?.dbo.User_ usr ON
                            usr.UserId = NSF.CREATED_BY
                    LEFT JOIN ?.dbo.User_ usr1 ON
                            usr1.UserId = NSF.MODIFIED_BY
                            ?
]]>
		</query>
	</entity>
	<entity id="getCDNetSalesFormulaResults">
		<query>
                <![CDATA[
                    select
                            formulaType = CASE
                                    WHEN hft.DESCRIPTION like '%Select One%' THEN ''
                                    ELSE hft.DESCRIPTION
                            END,
                            NSF.NET_SALES_FORMULA_ID,
                            NSF.NET_SALES_FORMULA_NO,
                            NSF.NET_SALES_FORMULA_NAME,
                            usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as CREATED_BY_VAL,
                            NSF.CREATED_DATE,
                            usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as MODIFIED_BY_VAL,
                            NSF.MODIFIED_DATE,
                            NSF.NET_SALES_FORMULA_MASTER_SID,
                            NSF.NET_SALES_FORMULA_TYPE,
                            NSF.CREATED_BY,
                            NSF.MODIFIED_BY
                    from
                            NET_SALES_FORMULA_MASTER NSF
                    LEFT JOIN dbo.HELPER_TABLE hft ON
                            hft.HELPER_TABLE_SID = NSF.NET_SALES_FORMULA_TYPE
                    JOIN ?.dbo.User_ usr ON
                            usr.UserId = NSF.CREATED_BY
                    LEFT JOIN ?.dbo.User_ usr1 ON
                            usr1.UserId = NSF.MODIFIED_BY
                            ?
                            ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
]]>
		</query>
	</entity>
	<entity id="getCDCFPPopupCount">
		<query>
                <![CDATA[
                    select
                            COUNT(DISTINCT cf.CFP_MODEL_SID)
                    from
                            CFP_MODEL cf
                    Join CFP_DETAILS cfd on
                            cfd.CFP_MODEL_SID = cf.CFP_MODEL_SID
                    Join COMPANY_MASTER cm on
                            cm.COMPANY_MASTER_SID = cfd.COMPANY_MASTER_SID
                    Left Join Helper_Table ht on
                            ht.HELPER_TABLE_SID = cf.CFP_TYPE
                    Left Join Helper_Table hst on
                            hst.HELPER_TABLE_SID = cf.CFP_STATUS
                    Left Join Helper_Table hct on
                            hct.HELPER_TABLE_SID = cf.CFP_CATEGORY
                    Left Join Helper_Table hd on
                            cf.CFP_DESIGNATION= cast(hd.HELPER_TABLE_SID as varchar(20))
                    Left Join CFP_MODEL pcf on
                            pcf.CFP_MODEL_SID = cf.PARENT_CFP_ID
                    JOIN ?.dbo.User_ usr ON
                            usr.UserId = cf.CREATED_BY
                    LEFT JOIN ?.dbo.User_ usr1 ON
                            usr1.UserId = cf.MODIFIED_BY
                            ?
]]>
		</query>
	</entity>
	<entity id="getCDCFPPopupResults">
		<query>
                <![CDATA[
                    select
                        DISTINCT
                        sysId=cast(cf.CFP_MODEL_SID as varchar(20)),
                        cf.CFP_ID,
                        cf.CFP_NO,
                        cf.CFP_NAME,
                        ht.DESCRIPTION as CFPType,
                        hst.DESCRIPTION as CFPStatus,
                      	hct.DESCRIPTION as CFP_CATEGORy,
                        cf.CFP_START_DATE,
                        cf.CFP_END_DATE,
                        hd.DESCRIPTION as CFP_DESIGNATIOn,
                        pcf.CFP_ID as PARENTCFPID,
                        pcf.CFP_NAME as PARENTCFPNAME,
                        cf.MODIFIED_DATE,
                        usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as MODIFIED_BY,
                        cf.CREATED_DATE,
                        usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as CREATED_BY
                    from
                            CFP_MODEL cf
                    Join CFP_DETAILS cfd on
                            cfd.CFP_MODEL_SID = cf.CFP_MODEL_SID
                    Join COMPANY_MASTER cm on
                            cm.COMPANY_MASTER_SID = cfd.COMPANY_MASTER_SID
                    Left Join Helper_Table ht on
                            ht.HELPER_TABLE_SID = cf.CFP_TYPE AND ht.DESCRIPTION  NOT like '%Select One%'
                    Left Join Helper_Table hst on
                            hst.HELPER_TABLE_SID = cf.CFP_STATUS AND hst.DESCRIPTION  NOT like '%Select One%'
                    Left Join Helper_Table hct on
                            hct.HELPER_TABLE_SID = cf.CFP_CATEGORY AND hct.DESCRIPTION  NOT like '%Select One%'
                    Left Join Helper_Table hd on
                            cf.CFP_DESIGNATION= cast(hd.HELPER_TABLE_SID as varchar(20)) AND hd.DESCRIPTION  NOT like '%Select One%'
                    Left Join CFP_MODEL pcf on
                            pcf.CFP_MODEL_SID = cf.PARENT_CFP_ID
                    JOIN ?.dbo.User_ usr ON
                            usr.UserId = cf.CREATED_BY
                    LEFT JOIN ?.dbo.User_ usr1 ON
                            usr1.UserId = cf.MODIFIED_BY
                            ?
                            ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
]]>
		</query>
	</entity>
	<entity id="getCDIFPPopupCount">
		<query>
                <![CDATA[
                    select
                            COUNT(DISTINCT ifp.IFP_MODEL_SID)
                     from
                                IFP_MODEL ifp
                        Join IFP_DETAILS cfd on
                                cfd.IFP_MODEL_SID = ifp.IFP_MODEL_SID
                        Left Join Helper_Table ht on
                                ht.HELPER_TABLE_SID = ifp.IFP_TYPE
                        Left Join Helper_Table hst on
                                hst.HELPER_TABLE_SID = ifp.IFP_STATUS
                        Left Join Helper_Table hct on
                                hct.HELPER_TABLE_SID = ifp.IFP_CATEGORY
                        Left Join Helper_Table hd on
                                ifp.IFP_DESIGNATION= hd.HELPER_TABLE_SID
                        JOIN ?.dbo.User_ usr ON
                                usr.UserId = ifp.CREATED_BY
                            ?
]]>
		</query>
	</entity>
	<entity id="getCDIFPPopupResults">
		<query>
                <![CDATA[
                    select
                        DISTINCT
                                sysId=cast(ifp.IFP_MODEL_SID as varchar(20)),
                                ifp.IFP_ID,
                                ifp.IFP_NO,
                                ifp.IFP_NAME,
                            		ht.DESCRIPTION as IFP_TYPE,
                                hst.DESCRIPTION as IFP_STATUS,
                                hct.DESCRIPTION as IFP_CATEGORY,
                            		ifp.IFP_START_DATE,
                                ifp.IFP_END_DATE,
                            		hd.DESCRIPTION as IFP_DESIGNATION,
                              ifp.PARENT_IFP_ID,
                              ifp.PARENT_IFP_Name,
                                usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as CREATED_BY,
                                ifp.CREATED_DATE
                        from
                                IFP_MODEL ifp
                        Join IFP_DETAILS cfd on
                                cfd.IFP_MODEL_SID = ifp.IFP_MODEL_SID
                        Left Join Helper_Table ht on
                                ht.HELPER_TABLE_SID = ifp.IFP_TYPE AND ht.DESCRIPTION  NOT like '%Select One%'
                        Left Join Helper_Table hst on
                                hst.HELPER_TABLE_SID = ifp.IFP_STATUS AND hst.DESCRIPTION  NOT like '%Select One%'
                        Left Join Helper_Table hct on
                                hct.HELPER_TABLE_SID = ifp.IFP_CATEGORY AND hct.DESCRIPTION  NOT like '%Select One%'
                        Left Join Helper_Table hd on
                                ifp.IFP_DESIGNATION= hd.HELPER_TABLE_SID AND hd.DESCRIPTION  NOT like '%Select One%'
                        JOIN ?.dbo.User_ usr ON
                                usr.UserId = ifp.CREATED_BY
                            ?
                            ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
]]>
		</query>
	</entity>
	<entity id="getCDTPPopupCount">
		<query>
                <![CDATA[
                    select
                            COUNT(DISTINCT cm.COMPANY_MASTER_SID)
                     FROM
                            COMPANY_MASTER cm
                    LEFT JOIN HELPER_TABLE hst ON
                            hst.HELPER_TABLE_SID=cm.COMPANY_STATUS
                    LEFT JOIN HELPER_TABLE ht ON
                            ht.HELPER_TABLE_SID=cm.COMPANY_TYPE
                            ?
]]>
		</query>
	</entity>
	<entity id="getCDTPPopupResults">
		<query>
                <![CDATA[
                    SELECT
                            cm.COMPANY_ID,
                            cm.COMPANY_NO,
                            cm.COMPANY_NAME,
                        compStatus =
                          CASE
                             WHEN hst.DESCRIPTION like '%Select One%' THEN ''
                             ELSE hst.DESCRIPTION
                          END,
                        compType =
                          CASE
                             WHEN ht.DESCRIPTION like '%Select One%' THEN ''
                             ELSE ht.DESCRIPTION
                          END,
                            cm.COMPANY_MASTER_SID
                    FROM
                            COMPANY_MASTER cm
                    LEFT JOIN HELPER_TABLE hst ON
                            hst.HELPER_TABLE_SID=cm.COMPANY_STATUS
                    LEFT JOIN HELPER_TABLE ht ON
                            ht.HELPER_TABLE_SID=cm.COMPANY_TYPE
                            ?
                            ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
]]>
		</query>
	</entity>
	<entity id="getCDPSPopupCount">
		<query>
                <![CDATA[
                    select
                            COUNT(DISTINCT ps.PS_MODEL_SID)
                     FROM
                                PS_MODEL ps
                        JOIN PS_DETAILS psd on
                                ps.PS_MODEL_SID = psd.PS_MODEL_SID
                        JOIN ITEM_MASTER im on
                                psd.ITEM_MASTER_SID = im.ITEM_MASTER_SID
                        LEFT JOIN HELPER_TABLE ht on
                                ht.HELPER_TABLE_SID = ps.PS_TYPE
                        LEFT JOIN HELPER_TABLE hst on
                                hst.HELPER_TABLE_SID = ps.PS_STATUS
                        LEFT JOIN HELPER_TABLE hct on
                                hct.HELPER_TABLE_SID = ps.PS_CATEGORY
                        LEFT JOIN HELPER_TABLE hd on
                                hd.HELPER_TABLE_SID = ps.PS_DESIGNATION
                        LEFT JOIN HELPER_TABLE htrade on
                                htrade.HELPER_TABLE_SID = ps.PS_TRADE_CLASS
                        WHERE
                                ps.INBOUND_STATUS <> 'D'
                            ?
]]>
		</query>
	</entity>
	<entity id="getCDPSPopupResults">
		<query>
                <![CDATA[
                        SELECT
                                DISTINCT
                                sysId=cast(ps.PS_MODEL_SID as varchar(20)),
                                ps.PS_ID,
                                ps.PS_NO,
                                ps.PS_NAME,
	                              ht.DESCRIPTION as PS_TYPE,
                            	 	hst.DESCRIPTION as PS_STATUS,
                              	hct.DESCRIPTION as PS_CATEGORY,
                            		ps.PS_START_DATE,
                                ps.PS_END_DATE,
                            		hd.DESCRIPTION as PS_DESIGNATION,
                            		ps.PARENT_PS_ID,
                                ps.PARENT_PS_NAME,
                                htrade.DESCRIPTION as PS_TRADE
                        FROM
                                PS_MODEL ps
                        JOIN PS_DETAILS psd on
                                ps.PS_MODEL_SID = psd.PS_MODEL_SID
                        JOIN ITEM_MASTER im on
                                psd.ITEM_MASTER_SID = im.ITEM_MASTER_SID
                        LEFT JOIN HELPER_TABLE ht on
                                ht.HELPER_TABLE_SID = ps.PS_TYPE AND ht.DESCRIPTION  NOT like '%Select One%'
                        LEFT JOIN HELPER_TABLE hst on
                                hst.HELPER_TABLE_SID = ps.PS_STATUS AND hst.DESCRIPTION  NOT like '%Select One%'
                        LEFT JOIN HELPER_TABLE hct on
                                hct.HELPER_TABLE_SID = ps.PS_CATEGORY AND hct.DESCRIPTION  NOT like '%Select One%'
                        LEFT JOIN HELPER_TABLE hd on
                                hd.HELPER_TABLE_SID = ps.PS_DESIGNATION AND hd.DESCRIPTION  NOT like '%Select One%'
                        LEFT JOIN HELPER_TABLE htrade on
                                htrade.HELPER_TABLE_SID = ps.PS_TRADE_CLASS AND htrade.DESCRIPTION  NOT like '%Select One%'
                        WHERE
                                ps.INBOUND_STATUS <> 'D'
                            ?
                            ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
]]>
		</query>
	</entity>
	<entity id="getCDRSPopupCount">
		<query>
                <![CDATA[
                    select
                            COUNT(DISTINCT rs.RS_MODEL_SID)
                     FROM
                                RS_MODEL rs
                        LEFT JOIN HELPER_TABLE ht on
                                ht.HELPER_TABLE_SID = rs.RS_TYPE
                        LEFT JOIN HELPER_TABLE hst on
                                hst.HELPER_TABLE_SID = rs.RS_STATUS
                        LEFT JOIN HELPER_TABLE hct on
                                hct.HELPER_TABLE_SID = rs.RS_CATEGORY
                        LEFT JOIN HELPER_TABLE hd on
                                hd.HELPER_TABLE_SID = rs.RS_DESIGNATION
                        WHERE
                                rs.INBOUND_STATUS <> 'D'
                            ?
]]>
		</query>
	</entity>
	<entity id="getCDRSPopupResults">
		<query>
                <![CDATA[
                        SELECT
                                DISTINCT
                                sysId=cast(rs.RS_MODEL_SID as varchar(20)),
                                rs.RS_ID,
                                rs.RS_NO,
                                rs.RS_NAME,
                                ht.DESCRIPTION as RS_TYPE,
                            		hst.DESCRIPTION as RS_STATUS,
                            		hct.DESCRIPTION as RS_CATEGORY,
                            		rs.RS_START_DATE,
                                rs.RS_END_DATE,
                                hd.DESCRIPTION as RS_DESIGNATION,
                            		rs.PARENT_RS_ID,
                                rs.PARENT_RS_NAME
                        FROM
                                RS_MODEL rs
                        LEFT JOIN HELPER_TABLE ht on
                                ht.HELPER_TABLE_SID = rs.RS_TYPE AND ht.DESCRIPTION  NOT like '%Select One%'
                        LEFT JOIN HELPER_TABLE hst on
                                hst.HELPER_TABLE_SID = rs.RS_STATUS AND hst.DESCRIPTION  NOT like '%Select One%'
                        LEFT JOIN HELPER_TABLE hct on
                                hct.HELPER_TABLE_SID = rs.RS_CATEGORY AND hct.DESCRIPTION  NOT like '%Select One%'
                        LEFT JOIN HELPER_TABLE hd on
                                hd.HELPER_TABLE_SID = rs.RS_DESIGNATION AND hd.DESCRIPTION  NOT like '%Select One%'
                        WHERE
                                rs.INBOUND_STATUS <> 'D'
                            ?
                            ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
]]>
		</query>
	</entity>
	<entity id="getCDRulesPopupCount">
		<query>
                <![CDATA[
                    select
                            COUNT(DISTINCT cdr.CDR_MODEL_SID)
                     FROM
                            CDR_MODEL cdr
                    LEFT JOIN HELPER_TABLE ht on
                         ht.HELPER_TABLE_SID = cdr.RULE_TYPE
                    LEFT JOIN HELPER_TABLE hct on
                         hct.HELPER_TABLE_SID = cdr.RULE_CATEGORY
                            ?
]]>
		</query>
	</entity>
	<entity id="getCDRulesPopupResults">
		<query>
                <![CDATA[
                    SELECT
                          ht.DESCRIPTION as  ruleType,
                            cdr.RULE_NO,
                            cdr.RULE_NAME,
                          hct.DESCRIPTION as  ruleCatagory,
                            cdr.CDR_MODEL_SID
                    FROM
                            CDR_MODEL cdr
                    LEFT JOIN HELPER_TABLE ht on
                         ht.HELPER_TABLE_SID = cdr.RULE_TYPE AND ht.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hct on
                         hct.HELPER_TABLE_SID = cdr.RULE_CATEGORY AND  hct.DESCRIPTION  NOT like '%Select One%'
                            ?
                            ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
]]>
		</query>
	</entity>
	<entity id="getCDRuleDetailsPopupCount">
		<query>
                <![CDATA[
                    select
                            COUNT(DISTINCT cdrd.CDR_DETAILS_SID)
                     FROM
                                CDR_DETAILS cdrd
                        LEFT JOIN HELPER_TABLE ht on
                             ht.HELPER_TABLE_SID = cdrd.LINE_TYPE
                        LEFT JOIN HELPER_TABLE higat on
                             higat.HELPER_TABLE_SID = cdrd.ITEM_GROUP_MS_ASSOCIATION
                        LEFT JOIN HELPER_TABLE hkt on
                             hkt.HELPER_TABLE_SID = cdrd.KEYWORD
                        LEFT JOIN HELPER_TABLE hot on
                             hot.HELPER_TABLE_SID = cdrd.OPERATOR
                        LEFT JOIN HELPER_TABLE hct on
                             hct.HELPER_TABLE_SID = cdrd.COMPARISON
                        LEFT JOIN HELPER_TABLE hlot on
                             hlot.HELPER_TABLE_SID = cdrd.LOGICAL_OPERATOR
                            ?
]]>
		</query>
	</entity>
	<entity id="getCDRuleDetailsPopupResults">
		<query>
                <![CDATA[
                        SELECT
                              ht.DESCRIPTION as llineType,
                              higat.DESCRIPTION as  itemGroupAsso,
                              hkt.DESCRIPTION as lkeyword,
                              hot.DESCRIPTION as loperator,
                              detailValue=cast(cdrd."VALUE" as varchar(20)),
                              hct.DESCRIPTION as lcomparison,
                              hlot.DESCRIPTION as llogicalOperator ,
                                cdrd.CDR_MODEL_SID,
                                cdrd.CDR_DETAILS_SID,
                                cdrd.LINE_TYPE,
                                cdrd.ITEM_GROUP_MS_ASSOCIATION,
                                cdrd.KEYWORD,
                                cdrd.OPERATOR,
                                cdrd."VALUE",
                              cdrd.COMPARISON,
                              cdrd.LOGICAL_OPERATOR
                        FROM
                                CDR_DETAILS cdrd
                        LEFT JOIN HELPER_TABLE ht on
                             ht.HELPER_TABLE_SID = cdrd.LINE_TYPE AND ht.DESCRIPTION  NOT like '%Select One%'
                        LEFT JOIN HELPER_TABLE higat on
                             higat.HELPER_TABLE_SID = cdrd.ITEM_GROUP_MS_ASSOCIATION AND higat.DESCRIPTION  NOT like '%Select One%'
                        LEFT JOIN HELPER_TABLE hkt on
                             hkt.HELPER_TABLE_SID = cdrd.KEYWORD AND hkt.DESCRIPTION  NOT like '%Select One%'
                        LEFT JOIN HELPER_TABLE hot on
                             hot.HELPER_TABLE_SID = cdrd.OPERATOR AND hot.DESCRIPTION  NOT like '%Select One%'
                        LEFT JOIN HELPER_TABLE hct on
                             hct.HELPER_TABLE_SID = cdrd.COMPARISON AND hct.DESCRIPTION  NOT like '%Select One%'
                        LEFT JOIN HELPER_TABLE hlot on
                             hlot.HELPER_TABLE_SID = cdrd.LOGICAL_OPERATOR AND hlot.DESCRIPTION  NOT like '%Select One%'
                            ?
                            ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
]]>
		</query>
	</entity>
	<entity id="getCDRebatePlanPopupCount">
		<query>
                <![CDATA[
                    select
                            COUNT(DISTINCT RP.REBATE_PLAN_MASTER_SID)
                     FROM REBATE_PLAN_MASTER RP
                    LEFT JOIN CDR_MODEL CDR
                      ON CDR.CDR_MODEL_SID = RP.CDR_MODEL_SID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NSF
                      ON NSF.NET_SALES_FORMULA_MASTER_SID = RP.NET_SALES_FORMULA_MASTER_SID
                    LEFT JOIN HELPER_TABLE HT on
                         HT.HELPER_TABLE_SID = RP.REBATE_PLAN_TYPE
                    LEFT JOIN HELPER_TABLE HST on
                         HST.HELPER_TABLE_SID = RP.REBATE_STRUCTURE
                    LEFT JOIN HELPER_TABLE HS on
                         HS.HELPER_TABLE_SID = RP.REBATE_PLAN_STATUS
                    LEFT JOIN HELPER_TABLE HR on
                         HR.HELPER_TABLE_SID = RP.REBATE_RANGE_BASED_ON
                    LEFT JOIN HELPER_TABLE HRB on
                         HRB.HELPER_TABLE_SID = RP.REBATE_BASED_ON
                    LEFT JOIN ?.dbo.User_ usr ON
                                             usr.UserId = RP.MODIFIED_BY
                    JOIN ?.dbo.User_ usr1 ON
                                             usr1.UserId = RP.CREATED_BY
                            ?
]]>
		</query>
	</entity>
	<entity id="getCDRebatePlanPopupResults">
		<query>
                <![CDATA[
                    SELECT
                      RP.REBATE_PLAN_ID,
                      RP.REBATE_PLAN_NO,
                      RP.REBATE_PLAN_NAME,
                      rebatePlanStatusVal =CASE
                                      WHEN HS.DESCRIPTION like '%Select One%' THEN ''
                                      ELSE HS.DESCRIPTION
                                  END,
                      rebatePlanTypeVal =CASE
                                      WHEN HT.DESCRIPTION like '%Select One%' THEN ''
                                      ELSE HT.DESCRIPTION
                                  END,
                      rebateStructureVal =CASE
                                      WHEN HST.DESCRIPTION like '%Select One%' THEN ''
                                      ELSE HST.DESCRIPTION
                                  END,
                      rangeBasedOnVal =CASE
                                      WHEN HR.DESCRIPTION like '%Select One%' THEN ''
                                      ELSE HR.DESCRIPTION
                                  END,
                      netSalesFormulaVal =CASE
                                      WHEN RP.NET_SALES_FORMULA_MASTER_SID IS NULL THEN ''
                                      ELSE NSF.NET_SALES_FORMULA_NAME
                                  END,
                      netSalesRuleVal =CASE
                                      WHEN RP.CDR_MODEL_SID IS NULL THEN ''
                                      ELSE CDR.RULE_NAME
                                  END,
                      rebateBasedOnVal =CASE
                                      WHEN HRB.DESCRIPTION like '%Select One%' THEN ''
                                      ELSE HRB.DESCRIPTION
                                  END,
                      RP.CREATED_DATE
                      ,usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY_VAL
                      ,RP.MODIFIED_DATE
                      ,usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as MODIFIED_BY_VAL
                      ,RP.REBATE_PLAN_MASTER_SID
                      ,RP.REBATE_PLAN_STATUS
                      ,RP.REBATE_PLAN_TYPE
                      ,RP.REBATE_STRUCTURE
                      ,RP.REBATE_RANGE_BASED_ON
                      ,RP.NET_SALES_FORMULA_MASTER_SID
                      ,RP.CDR_MODEL_SID
                      ,RP.REBATE_BASED_ON
                      ,RP.CREATED_BY
                      ,RP.MODIFIED_BY
                    FROM REBATE_PLAN_MASTER RP
                    LEFT JOIN CDR_MODEL CDR
                      ON CDR.CDR_MODEL_SID = RP.CDR_MODEL_SID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NSF
                      ON NSF.NET_SALES_FORMULA_MASTER_SID = RP.NET_SALES_FORMULA_MASTER_SID
                    LEFT JOIN HELPER_TABLE HT on
                         HT.HELPER_TABLE_SID = RP.REBATE_PLAN_TYPE
                    LEFT JOIN HELPER_TABLE HST on
                         HST.HELPER_TABLE_SID = RP.REBATE_STRUCTURE
                    LEFT JOIN HELPER_TABLE HS on
                         HS.HELPER_TABLE_SID = RP.REBATE_PLAN_STATUS
                    LEFT JOIN HELPER_TABLE HR on
                         HR.HELPER_TABLE_SID = RP.REBATE_RANGE_BASED_ON
                    LEFT JOIN HELPER_TABLE HRB on
                         HRB.HELPER_TABLE_SID = RP.REBATE_BASED_ON
                    LEFT JOIN ?.dbo.User_ usr ON
                                             usr.UserId = RP.MODIFIED_BY
                    JOIN ?.dbo.User_ usr1 ON
                                             usr1.UserId = RP.CREATED_BY
                            ?
                            ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
]]>
		</query>
	</entity>
	<entity id="getCDDeductCalPopupCount">
		<query>
                <![CDATA[
                    select
                            COUNT(DISTINCT DCM.DEDUCTION_CALENDAR_MASTER_SID)
                    FROM DEDUCTION_CALENDAR_MASTER DCM
                    LEFT JOIN HELPER_TABLE HC on
                         HC.HELPER_TABLE_SID = DCM.CATEGORY
                    LEFT JOIN ?.dbo.User_ usr ON
                                             usr.UserId = DCM.MODIFIED_BY
                    JOIN ?.dbo.User_ usr1 ON
                                             usr1.UserId = DCM.CREATED_BY
                    WHERE DCM.INBOUND_STATUS <> 'D'
                            ?
]]>
		</query>
	</entity>
	<entity id="getCDDeductCalPopupResults">
		<query>
                <![CDATA[
                    SELECT
                        DCM.DEDUCTION_CALENDAR_NO
                        ,DCM.DEDUCTION_CALENDAR_NAME
                        ,DCM.DEDUCTION_CALENDAR_DESC
                        ,catagoryVal =CASE
                                          WHEN HC.DESCRIPTION like '%Select One%' THEN ''
                                          ELSE HC.DESCRIPTION
                                      END
                        ,DCM.CREATED_DATE
                        ,usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY_VAL
                        ,DCM.MODIFIED_DATE
                        ,usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as MODIFIED_BY_VAL
                        ,DCM.DEDUCTION_CALENDAR_MASTER_SID
                        ,DCM.CATEGORY
                    FROM DEDUCTION_CALENDAR_MASTER DCM
                    LEFT JOIN HELPER_TABLE HC on
                         HC.HELPER_TABLE_SID = DCM.CATEGORY
                    LEFT JOIN ?.dbo.User_ usr ON
                                             usr.UserId = DCM.MODIFIED_BY
                    JOIN ?.dbo.User_ usr1 ON
                                             usr1.UserId = DCM.CREATED_BY
                    WHERE DCM.INBOUND_STATUS <> 'D'
                            ?
                            ORDER BY
                        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
]]>
		</query>
	</entity>
	<entity id="getCDValidateContractToProcess">
		<query>
                <![CDATA[
                    DECLARE @CONTRACT_SID INT=?
                    select Count(*) from ACTUALS_MASTER where CONTRACT_MASTER_SID =@CONTRACT_SID;
]]>
		</query>
	</entity>
	<entity id="getCDForcastType">
		<query>
                <![CDATA[
                    DECLARE @CONTRACT_SID INT=?
                    select DISTINCT FORECASTING_TYPE FROM   PROJECTION_MASTER pm
                        JOIN PROJECTION_DETAILS pd
                        ON pm.PROJECTION_MASTER_SID = pd.PROJECTION_MASTER_SID
                        INNER JOIN CCP_DETAILS cd
                        ON pd.CCP_DETAILS_SID = cd.CCP_DETAILS_SID
                        WHERE  cd.CONTRACT_MASTER_SID =@CONTRACT_SID AND SAVE_FLAG = 1;
]]>
		</query>
	</entity>
	<entity id="checkContractInProjection">
		<query>
                <![CDATA[
                    DECLARE @CONTRACT_SID INT=?
                    SELECT COUNT(*) from ? PA
                        JOIN PROJECTION_DETAILS PD ON PA.PROJECTION_DETAILS_SID=PD.PROJECTION_DETAILS_SID
                        JOIN PROJECTION_MASTER PM ON PM.PROJECTION_MASTER_SID = PD.PROJECTION_MASTER_SID
                        INNER JOIN CCP_DETAILS CD ON PD.CCP_DETAILS_SID = CD.CCP_DETAILS_SID
                        WHERE CD.CONTRACT_MASTER_SID = @CONTRACT_SID
                                AND SAVE_FLAG = 1;
]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.deleteOnBackTempCFP">
		<query>
        <![CDATA[
        DELETE FROM dbo.IMTD_CFP_DETAILS WHERE USERS_SID='?' AND SESSION_ID='?';
        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.deleteOnLoadTempCFP">
		<query>
        <![CDATA[
        DELETE FROM dbo.IMTD_CFP_DETAILS WHERE (USERS_SID='?' AND SESSION_ID='?') OR IMTD_CREATED_DATE < '?';
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadTempCFP">
		<query>
        <![CDATA[
        INSERT INTO dbo.IMTD_CFP_DETAILS
        (COMPANY_ID, COMPANY_NO, COMPANY_NAME, COMPANY_TYPE, COMPANY_STATUS, COMPANY_START_DATE, COMPANY_END_DATE, CFP_MODEL_SID,
        COMPANY_MASTER_SID, CFP_DETAILS_START_DATE, CFP_DETAILS_END_DATE, CFP_DETAILS_ATTACHED_STATUS, CFP_DETAILS_ATTACHED_DATE, CFP_DETAILS_TRADE_CLASS, CFP_DETAILS_TC_START_DATE, CFP_DETAILS_TC_END_DATE,
        CFP_DETAILS_SID, USERS_SID, SESSION_ID, CHECK_RECORD, IMTD_CREATED_DATE, "Operation", CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, TRADING_PARTNER_CONTRACT_NO)
        SELECT A.COMPANY_ID,
                   A.COMPANY_NO,
                   A.COMPANY_NAME,
                   A.COMPANY_TYPE,
                   A.COMPANY_STATUS,
                   A.COMPANY_START_DATE,
                   A.COMPANY_END_DATE,
                   A.CFP_MODEL_SID,
                   A.COMPANY_MASTER_SID,
                   A.CFP_DETAILS_START_DATE,
                   A.CFP_DETAILS_END_DATE,
                   A.CFP_CONTRACT_ATTACHED_STATUS,
                   A.CFP_CONTRACT_ATTACHED_DATE,
                   A.TRADE_CLASS,
                   A.TRADE_CLASS_START_DATE,
                   A.TRADE_CLASS_END_DATE,
                   A.CFP_CONTRACT_DETAILS_SID,
                   A.USERS_SID,
                   A.SESSION_ID,
                   A.CHECK_RECORD,
                   A.IMTD_CREATED_DATE,
                   A."Operation",
                   A.CREATED_BY,
                   A.CREATED_DATE,
                   A.MODIFIED_BY,
                   A.MODIFIED_DATE,
                   A.COMPANY_TRADE_CLASS
FROM   (SELECT     ROW_NUMBER()
                     OVER(
                       PARTITION BY CM.COMPANY_MASTER_SID
                       ORDER BY CTC.TRADE_CLASS_START_DATE ASC) AS RN,
        CM.COMPANY_ID, CM.COMPANY_NO, CM.COMPANY_NAME, CM.COMPANY_TYPE, CM.COMPANY_STATUS, CM.COMPANY_START_DATE AS COMPANY_START_DATE, CM.COMPANY_END_DATE AS COMPANY_END_DATE, CFPC.CFP_MODEL_SID,
        CDA.COMPANY_MASTER_SID, CDA.COMPANY_START_DATE AS CFP_DETAILS_START_DATE, CDA.COMPANY_END_DATE AS CFP_DETAILS_END_DATE, CDA.CFP_CONTRACT_ATTACHED_STATUS, CFPC.CFP_CONTRACT_ATTACHED_DATE,  CDA.TRADE_CLASS,CDA.TRADE_CLASS_START_DATE, CDA.TRADE_CLASS_END_DATE,
        CDA.CFP_CONTRACT_DETAILS_SID, '?' USERS_SID, '?' SESSION_ID, 1 CHECK_RECORD, '?' IMTD_CREATED_DATE, 'U' "Operation", CDA.CREATED_BY, CDA.CREATED_DATE, CDA.MODIFIED_BY, CDA.MODIFIED_DATE , ctc.COMPANY_TRADE_CLASS

        FROM COMPANY_MASTER CM inner join  CFP_CONTRACT_DETAILS CDA on CDA.COMPANY_MASTER_SID=CM.COMPANY_MASTER_SID inner join  CFP_CONTRACT CFPC on  CDA.CFP_CONTRACT_SID=CFPC.CFP_CONTRACT_SID LEFT JOIN COMPANY_TRADE_CLASS ctc on ctc.COMPANY_MASTER_SID=CM.COMPANY_MASTER_SID AND ctc.INBOUND_STATUS <> 'D'
        WHERE CFPC.CFP_CONTRACT_SID=? AND CFPC.CONTRACT_MASTER_SID=? AND CM.COMPANY_MASTER_SID=CDA.COMPANY_MASTER_SID
        AND CDA.INBOUND_STATUS <> 'D'  and Getdate() BETWEEN ISNULL(CDA.TRADE_CLASS_START_DATE,Getdate()) AND ISNULL(CDA.TRADE_CLASS_END_DATE,Getdate()))A
WHERE  RN = 1 ;

        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.deleteOnBackTempIFP">
		<query>
        <![CDATA[
        DELETE FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS WHERE USERS_SID='?' AND SESSION_ID='?';
        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.deleteOnLoadTempIFP">
		<query>
        <![CDATA[
        DELETE FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS WHERE (USERS_SID='?' AND SESSION_ID='?') OR IMTD_CREATED_DATE < '?';
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadTempIFP">
		<query>
        <![CDATA[
        INSERT INTO dbo.IMTD_ITEM_PRICE_REBATE_DETAILS
            (ITEM_MASTER_SID, ITEM_ID, ITEM_NO, ITEM_NAME, PS_STATUS,PRIMARY_UOM,PACKAGE_SIZE, UDC1, UDC2, UDC3, UDC4, UDC5, UDC6,
            START_DATE, END_DATE, IFP_DETAILS_SID,
            CONTRACT_MASTER_SID,IFP_MODEL_SID,
            USERS_SID, SESSION_ID, CHECK_RECORD, IMTD_CREATED_DATE, "Operation", CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE,ATTACHED_STATUS, ATTACHED_DATE)
        SELECT
            IM.ITEM_MASTER_SID, IM.ITEM_ID,  IM.ITEM_NO, IM.ITEM_NAME, IFP.ITEM_STATUS,IM.PRIMARY_UOM,IM.PACKAGE_SIZE, 0 UDC1, 0 UDC2, 0 UDC3, 0 UDC4, 0 UDC5, 0 UDC6,
            IFP.ITEM_START_DATE, IFP.ITEM_END_DATE, IFP.IFP_CONTRACT_DETAILS_SID,
            IFPC.CONTRACT_MASTER_SID,IFPC.IFP_MODEL_SID,
            ? USERS_SID, '?' SESSION_ID, 1 CHECK_RECORD, '?' IMTD_CREATED_DATE, 'U' "Operation", IFP.CREATED_BY, IFP.CREATED_DATE, IFP.MODIFIED_BY, IFP.MODIFIED_DATE ,IFP.IFP_CONTRACT_ATTACHED_STATUS, IFP.IFP_CONTRACT_ATTACHED_DATE
        FROM
            IFP_CONTRACT_DETAILS IFP,
            IFP_CONTRACT IFPC,
            ITEM_MASTER IM
        WHERE
            IFPC.CONTRACT_MASTER_SID ?
            AND IFPC.CFP_CONTRACT_SID ?
            AND IFPC.IFP_CONTRACT_SID ?
            AND IFP.IFP_CONTRACT_SID=IFPC.IFP_CONTRACT_SID
            AND IM.ITEM_MASTER_SID=IFP.ITEM_MASTER_SID
            AND IM.INBOUND_STATUS <> 'D'
            AND IFP.INBOUND_STATUS <> 'D'
            AND IFPC.INBOUND_STATUS <> 'D'
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadTempPS">
		<query>
        <![CDATA[
        INSERT INTO dbo.IMTD_ITEM_PRICE_REBATE_DETAILS
            (ITEM_MASTER_SID, ITEM_ID, ITEM_NO, ITEM_NAME,PRIMARY_UOM,PACKAGE_SIZE, UDC1, UDC2, UDC3, UDC4, UDC5, UDC6,
            START_DATE, END_DATE,
            CONTRACT_MASTER_SID, IFP_MODEL_SID, PS_MODEL_SID,
            CONTRACT_PRICE, CONTRACT_PRICE_START_DATE, CONTRACT_PRICE_END_DATE, PRICE_PROTECTION_START_DATE, PRICE_PROTECTION_END_DATE, PRICE_TOLERANCE_TYPE,
            PRICE_TOLERANCE, BASE_PRICE, PRICE_TOLERANCE_FREQUENCY, PRICE_TOLERANCE_INTERVAL, PRICE_TYPE, Price, PS_STATUS, PS_DETAILS_SID, IFP_DETAILS_SID,
            USERS_SID, SESSION_ID, CHECK_RECORD,  IMTD_CREATED_DATE, "Operation", CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, ATTACHED_STATUS,
            MAX_INCREMENTAL_CHANGE,RESET_ELIGIBLE,RESET_TYPE,RESET_DATE,RESET_INTERVAL,RESET_FREQUENCY,NET_PRICE_TYPE,NET_PRICE_TYPE_FORMULA,PRICE_PROTECTION_PRICE_TYPE,
            NEP,NEP_FORMULA,BRAND_MASTER_SID,PRICE_PROTECTION_STATUS,Base_Price_Type,Base_Price_Entry,Base_Price_Date,Base_Price_ddlb,Net_Base_Price,Net_Base_Price_Formula_ID,Subsequent_Period_Price_Type,
            Net_Subsequent_Period_price,Net_Subsequent_Price_Formula_Id,Reset_Price_Type,Net_Reset_Price_Type,Net_Reset_Price_Formula_Id,"SOURCE",SUGGESTED_PRICE, ATTACHED_DATE,PPA_INDEX_NO,ADD_COPY_INDICATOR )
        SELECT Distinct
            IM.ITEM_MASTER_SID, IM.ITEM_ID,  IM.ITEM_NO, IM.ITEM_NAME,IM.PRIMARY_UOM,IM.PACKAGE_SIZE, 0 UDC1, 0 UDC2, 0 UDC3, 0 UDC4, 0 UDC5, 0 UDC6,
            IFP.ITEM_START_DATE, IFP.ITEM_END_DATE,
            PSC.CONTRACT_MASTER_SID,IFPC.IFP_MODEL_SID, PSC.PS_MODEL_SID,
            PS.CONTRACT_PRICE, PS.CONTRACT_PRICE_START_DATE, PS.CONTRACT_PRICE_END_DATE,
            PS.PRICE_PROTECTION_START_DATE, PS.PRICE_PROTECTION_END_DATE, PS.PRICE_TOLERANCE_TYPE, PS.PRICE_TOLERANCE,
            PS.BASE_PRICE, PS.PRICE_TOLERANCE_FREQUENCY, PS.PRICE_TOLERANCE_INTERVAL,
            PS.ITEM_PRICING_QUALIFIER_SID, PS.PRICE, PS.PS_CONTRACT_ATTACHED_STATUS, PS.PS_CONTRACT_DETAILS_SID, IFP.IFP_CONTRACT_DETAILS_SID,
            ? USERS_SID, '?' SESSION_ID, 1 CHECK_RECORD, '?' IMTD_CREATED_DATE, 'U' "Operation", IFP.CREATED_BY, IFP.CREATED_DATE, IFP.MODIFIED_BY, IFP.MODIFIED_DATE, IFP.ITEM_STATUS,
            PS.MAX_INCREMENTAL_CHANGE,PS.RESET_ELIGIBLE,PS.RESET_TYPE,PS.RESET_DATE,PS.RESET_INTERVAL,PS.RESET_FREQUENCY,PS.NET_PRICE_TYPE,PS.NET_PRICE_TYPE_FORMULA,PS.PRICE_PROTECTION_PRICE_TYPE,
            PS.NEP,PS.NEP_FORMULA,PS.BRAND_MASTER_SID,PS.PRICE_PROTECTION_STATUS,PS.Base_Price_Type,PS.Base_Price_Entry,PS.Base_Price_Date,PS.Base_Price_ddlb,PS.Net_Base_Price,PS.Net_Base_Price_Formula_ID,
            PS.Subsequent_Period_Price_Type,PS.Net_Subsequent_Period_price,PS.Net_Subsequent_Price_Formula_Id,PS.Reset_Price_Type,PS.Net_Reset_Price_Type,PS.Net_Reset_Price_Formula_Id
            ,PS."SOURCE",PS.SUGGESTED_PRICE, IFP.IFP_CONTRACT_ATTACHED_DATE,PS.PPA_INDEX_NO,PS.ADD_COPY_INDICATOR
        FROM
            PS_CONTRACT_DETAILS PS,
            PS_CONTRACT PSC,
            IFP_CONTRACT_DETAILS IFP,
            IFP_CONTRACT IFPC,
            ITEM_MASTER IM
        WHERE
            PSC.CONTRACT_MASTER_SID ?
            AND PSC.CFP_CONTRACT_SID ?
            AND PSC.IFP_CONTRACT_SID ?
            AND PSC.PS_CONTRACT_SID ?

						AND IFPC.CFP_CONTRACT_SID = PSC.CFP_CONTRACT_SID
            AND PSC.IFP_CONTRACT_SID=IFPC.IFP_CONTRACT_SID

            AND PS.ITEM_MASTER_SID = IFP.ITEM_MASTER_SID
            AND PS.ITEM_MASTER_SID = IM.ITEM_MASTER_SID

            AND PSC.PS_CONTRACT_SID = PS.PS_CONTRACT_SID
            AND IFP.IFP_CONTRACT_SID = IFPC.IFP_CONTRACT_SID

            AND IM.INBOUND_STATUS <> 'D'
            AND IFP.INBOUND_STATUS <> 'D'
            AND IFPC.INBOUND_STATUS <> 'D'
            AND PSC.INBOUND_STATUS <> 'D'
            AND PS.INBOUND_STATUS <> 'D';
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadTempRS">
		<query>
        <![CDATA[
        INSERT INTO dbo.IMTD_ITEM_PRICE_REBATE_DETAILS
            (ITEM_MASTER_SID, ITEM_ID, ITEM_NO, ITEM_NAME,ITEM_TYPE,PRIMARY_UOM,PACKAGE_SIZE, UDC1, UDC2, UDC3, UDC4, UDC5, UDC6,
            START_DATE, END_DATE, ATTACHED_STATUS, ATTACHED_DATE, IFP_DETAILS_SID,
            CONTRACT_MASTER_SID, CFP_MODEL_SID, IFP_MODEL_SID, PS_MODEL_SID,
            CONTRACT_PRICE, CONTRACT_PRICE_START_DATE, CONTRACT_PRICE_END_DATE, PRICE_PROTECTION_START_DATE, PRICE_PROTECTION_END_DATE, PRICE_TOLERANCE_TYPE,
            PRICE_TOLERANCE, BASE_PRICE, PRICE_TOLERANCE_FREQUENCY, PRICE_TOLERANCE_INTERVAL, PRICE_TYPE, PRICE, PS_STATUS, PS_DETAILS_SID,
            RS_MODEL_SID, FORMULA_ID, REBATE_AMOUNT, RS_DETAILS_SID,
            ITEM_REBATE_START_DATE, ITEM_REBATE_END_DATE, REBATE_PLAN_SYSTEM_ID, BUNDLE_NO,
            USERS_SID, SESSION_ID, CHECK_RECORD, IMTD_CREATED_DATE, "OPERATION", CREATED_BY, CREATED_DATE,
            BRAND_MASTER_SID,NEP,PRICE_PROTECTION_STATUS,PRICE_PROTECTION_PRICE_TYPE,NEP_FORMULA,MAX_INCREMENTAL_CHANGE,RESET_ELIGIBLE,RESET_TYPE,RESET_DATE,RESET_INTERVAL
            ,RESET_FREQUENCY,NET_PRICE_TYPE,NET_PRICE_TYPE_FORMULA,Base_Price_Type,Base_Price_Entry,Base_Price_Date,Net_Base_Price,Base_Price_ddlb,Net_Base_Price_Formula_ID,Subsequent_Period_Price_Type
            ,Net_Subsequent_Period_price,Net_Subsequent_Price_Formula_Id,Reset_Price_Type,Net_Reset_Price_Type,Net_Reset_Price_Formula_Id, RS_ATTACHED_STATUS, NET_SALES_FORMULA_MASTER_SID,
            NET_SALES_RULE, EVALUATION_RULE, EVALUATION_RULE_BUNDLE, CALCULATION_RULE, CALCULATION_RULE_BUNDLE,DEDUCTION_CALENDAR_MASTER_SID
            ,"SOURCE",SUGGESTED_PRICE, MODIFIED_DATE,ADD_COPY_INDICATOR,PPA_INDEX_NO)
        SELECT DISTINCT
            IM.ITEM_MASTER_SID, IM.ITEM_ID,  IM.ITEM_NO, IM.ITEM_NAME,IM.ITEM_TYPE,IM.PRIMARY_UOM,IM.PACKAGE_SIZE, 0 UDC1, 0 UDC2, 0 UDC3, 0 UDC4, 0 UDC5, 0 UDC6,
            IFPCD.ITEM_START_DATE, IFPCD.ITEM_END_DATE, IFPCD.IFP_CONTRACT_ATTACHED_STATUS, IFPCD.IFP_CONTRACT_ATTACHED_DATE, IFPCD.IFP_CONTRACT_DETAILS_SID,
            RSC.CONTRACT_MASTER_SID, RSC.CFP_CONTRACT_SID, RSC.IFP_CONTRACT_SID,
            PS.PS_MODEL_SID, PSCD.CONTRACT_PRICE, PSCD.CONTRACT_PRICE_START_DATE, PSCD.CONTRACT_PRICE_END_DATE,
            PSCD.PRICE_PROTECTION_START_DATE, PSCD.PRICE_PROTECTION_END_DATE, PSCD.PRICE_TOLERANCE_TYPE, PSCD.PRICE_TOLERANCE,
            PSCD.BASE_PRICE, PSCD.PRICE_TOLERANCE_FREQUENCY, PSCD.PRICE_TOLERANCE_INTERVAL,
            PSCD.ITEM_PRICING_QUALIFIER_SID, PSCD.PRICE, PSCD.PS_CONTRACT_ATTACHED_STATUS, PSCD.PS_CONTRACT_DETAILS_SID,
            RSC.RS_MODEL_SID,RSCD.FORMULA_ID, RSCD.REBATE_AMOUNT, RSCD.RS_CONTRACT_DETAILS_SID,
            RSCD.ITEM_REBATE_START_DATE, RSCD.ITEM_REBATE_END_DATE, RSCD.REBATE_PLAN_MASTER_SID, RSCD.BUNDLE_NO,
            '?' USERS_SID, '?' SESSION_ID, 1 CHECK_RECORD, '?' IMTD_CREATED_DATE, 'U' "Operation", IFPCD.CREATED_BY, IFPCD.CREATED_DATE
            ,PSCD.BRAND_MASTER_SID,PSCD.NEP,PSCD.PRICE_PROTECTION_STATUS,PSCD.PRICE_PROTECTION_PRICE_TYPE,PSCD.NEP_FORMULA,PSCD.MAX_INCREMENTAL_CHANGE,PSCD.RESET_ELIGIBLE,PSCD.RESET_TYPE,
             PSCD.RESET_DATE,PSCD.RESET_INTERVAL,PSCD.RESET_FREQUENCY,PSCD.NET_PRICE_TYPE,PSCD.NET_PRICE_TYPE_FORMULA,PSCD.Base_Price_Type,PSCD.Base_Price_Entry,PSCD.Base_Price_Date,PSCD.Net_Base_Price,
             PSCD.Base_Price_ddlb,PSCD.Net_Base_Price_Formula_ID,PSCD.Subsequent_Period_Price_Type,PSCD.Net_Subsequent_Period_price,PSCD.Net_Subsequent_Price_Formula_Id,PSCD.Reset_Price_Type,PSCD.Net_Reset_Price_Type,
             PSCD.Net_Reset_Price_Formula_Id, RSCD.RS_CONTRACT_ATTACHED_STATUS,
            RSCD.NET_SALES_FORMULA_MASTER_SID, RSCD.NET_SALES_RULE, RSCD.EVALUATION_RULE, RSCD.EVALUATION_RULE_BUNDLE, RSCD.CALCULATION_RULE, RSCD.CALCULATION_RULE_BUNDLE, RSCD.DEDUCTION_CALENDAR_MASTER_SID
            ,PSCD."SOURCE",PSCD.SUGGESTED_PRICE, IFPCD.MODIFIED_DATE,PSCD.ADD_COPY_INDICATOR,PSCD.PPA_INDEX_NO

               FROM ITEM_MASTER IM
JOIN IFP_CONTRACT_DETAILS IFPCD ON IFPCD.ITEM_MASTER_SID = IM.ITEM_MASTER_SID AND IFPCD.INBOUND_STATUS <> 'D'   AND IM.INBOUND_STATUS <> 'D'   AND IFPCD.IFP_CONTRACT_SID   ?  AND IM.INBOUND_STATUS <> 'D'    AND IFPCD.INBOUND_STATUS <> 'D'
LEFT JOIN PS_CONTRACT_DETAILS PSCD ON PSCD.ITEM_MASTER_SID = IM.ITEM_MASTER_SID   AND PSCD.PS_CONTRACT_SID  ?    AND PSCD.INBOUND_STATUS <> 'D'
LEFT JOIN ps_contract ps ON PS.PS_CONTRACT_SID = PSCD.PS_CONTRACT_SID
LEFT JOIN RS_CONTRACT_DETAILS RSCD ON RSCD.ITEM_MASTER_SID = IM.ITEM_MASTER_SID   AND RSCD.INBOUND_STATUS <> 'D'     AND RSCD.RS_CONTRACT_SID  ?
LEFT JOIN rs_contract RSC ON RSC.RS_CONTRACT_SID = RSCD.RS_CONTRACT_SID   AND RSC.CONTRACT_MASTER_SID ?  AND RSC.CFP_CONTRACT_SID  ?       
       
        AND RSC.IFP_CONTRACT_SID ?
        AND RSC.PS_CONTRACT_SID  ?
        AND RSC.RS_CONTRACT_SID ?
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadImtdCRS">
		<query>
        <![CDATA[
        INSERT INTO dbo.IMTD_ITEM_PRICE_REBATE_DETAILS
            (ITEM_MASTER_SID, ITEM_ID, ITEM_NO, ITEM_NAME, PS_STATUS,PRIMARY_UOM,PACKAGE_SIZE,
            CONTRACT_MASTER_SID, CFP_MODEL_SID, IFP_MODEL_SID, PS_MODEL_SID,
            RS_MODEL_SID, FORMULA_ID, REBATE_AMOUNT, RS_DETAILS_SID,
            ITEM_REBATE_START_DATE, ITEM_REBATE_END_DATE, REBATE_PLAN_SYSTEM_ID, RSCD.BUNDLE_NO,
            USERS_SID, SESSION_ID, CHECK_RECORD,  IMTD_CREATED_DATE, "OPERATION", CREATED_BY, CREATED_DATE, ATTACHED_DATE, MODIFIED_DATE)
        SELECT DISTINCT
            IM.ITEM_MASTER_SID, IM.ITEM_ID,  IM.ITEM_NO, IM.ITEM_NAME, IM.ITEM_STATUS,IM.PRIMARY_UOM,IM.PACKAGE_SIZE,
            RSC.CONTRACT_MASTER_SID, RSC.CFP_CONTRACT_SID, RSC.IFP_CONTRACT_SID, RSC.PS_CONTRACT_SID,
            RSC.RS_MODEL_SID,RSCD.FORMULA_ID, RSCD.REBATE_AMOUNT, RSCD.RS_CONTRACT_DETAILS_SID,
            RSCD.ITEM_REBATE_START_DATE, RSCD.ITEM_REBATE_END_DATE, RSCD.REBATE_PLAN_MASTER_SID,  RSCD.BUNDLE_NO,
            '?' USERS_SID, '?' SESSION_ID, 0 CHECK_RECORD, '?' IMTD_CREATED_DATE, 'U' "Operation", RSCD.CREATED_BY, RSCD.CREATED_DATE , RSCD.RS_CONTRACT_ATTACHED_DATE, RSCD.MODIFIED_DATE
        FROM
            RS_CONTRACT RSC,
            RS_CONTRACT_DETAILS RSCD,
            ITEM_MASTER IM
        WHERE
            RSC.CONTRACT_MASTER_SID ?
            AND RSC.CFP_CONTRACT_SID ?
            AND RSC.IFP_CONTRACT_SID is null
            AND RSC.PS_CONTRACT_SID is null
            AND RSC.RS_CONTRACT_SID ?

            AND RSC.RS_CONTRACT_SID=RSCD.RS_CONTRACT_SID
            AND RSCD.ITEM_MASTER_SID = IM.ITEM_MASTER_SID

            AND IM.INBOUND_STATUS <> 'D'
            AND RSCD.INBOUND_STATUS <> 'D';
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadImtdCPS">
		<query>
        <![CDATA[
        INSERT INTO dbo.IMTD_ITEM_PRICE_REBATE_DETAILS
            (ITEM_MASTER_SID, ITEM_ID, ITEM_NO, ITEM_NAME,PRIMARY_UOM,PACKAGE_SIZE,
            CONTRACT_MASTER_SID, PS_MODEL_SID,
            CONTRACT_PRICE, CONTRACT_PRICE_START_DATE, CONTRACT_PRICE_END_DATE, PRICE_PROTECTION_START_DATE, PRICE_PROTECTION_END_DATE, PRICE_TOLERANCE_TYPE,
            PRICE_TOLERANCE, BASE_PRICE, PRICE_TOLERANCE_FREQUENCY, PRICE_TOLERANCE_INTERVAL, PRICE_TYPE, Price, PS_STATUS, PS_DETAILS_SID,
            PRICE_PROTECTION_STATUS, BRAND_MASTER_SID, PRICE_PROTECTION_PRICE_TYPE, NEP, NEP_FORMULA,
            MAX_INCREMENTAL_CHANGE, RESET_ELIGIBLE, RESET_TYPE, RESET_DATE, RESET_INTERVAL, RESET_FREQUENCY, NET_PRICE_TYPE, NET_PRICE_TYPE_FORMULA,
            USERS_SID, SESSION_ID, CHECK_RECORD, IMTD_CREATED_DATE, "Operation", CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE,"SOURCE",SUGGESTED_PRICE, ATTACHED_DATE)
        SELECT Distinct
            IM.ITEM_MASTER_SID, IM.ITEM_ID,  IM.ITEM_NO, IM.ITEM_NAME,IM.PRIMARY_UOM,IM.PACKAGE_SIZE,
            PSC.CONTRACT_MASTER_SID, PSC.PS_MODEL_SID,
            PS.CONTRACT_PRICE, PS.CONTRACT_PRICE_START_DATE, PS.CONTRACT_PRICE_END_DATE,
            PS.PRICE_PROTECTION_START_DATE, PS.PRICE_PROTECTION_END_DATE, PS.PRICE_TOLERANCE_TYPE, PS.PRICE_TOLERANCE,
            PS.BASE_PRICE, PS.PRICE_TOLERANCE_FREQUENCY, PS.PRICE_TOLERANCE_INTERVAL,
            PS.ITEM_PRICING_QUALIFIER_SID, PS.PRICE, PS.PS_CONTRACT_ATTACHED_STATUS, PS.PS_CONTRACT_DETAILS_SID,
            PS.PRICE_PROTECTION_STATUS,PS.BRAND_MASTER_SID,PS.PRICE_PROTECTION_PRICE_TYPE,PS.NEP,PS.NEP_FORMULA,
            PS.MAX_INCREMENTAL_CHANGE,PS.RESET_ELIGIBLE,PS.RESET_TYPE,PS.RESET_DATE,PS.RESET_INTERVAL,PS.RESET_FREQUENCY,PS.NET_PRICE_TYPE,PS.NET_PRICE_TYPE_FORMULA,
            ? USERS_SID, '?' SESSION_ID, 0 CHECK_RECORD, '?' IMTD_CREATED_DATE, 'U' "Operation", PS.CREATED_BY, PS.CREATED_DATE, PS.MODIFIED_BY, PS.MODIFIED_DATE,PS."SOURCE",PS.SUGGESTED_PRICE , PS.PS_CONTRACT_ATTACHED_DATE
        FROM
            PS_CONTRACT_DETAILS PS,
            PS_CONTRACT PSC,
            ITEM_MASTER IM
        WHERE
            PSC.CONTRACT_MASTER_SID ?
            AND PSC.CFP_CONTRACT_SID ?
            AND PSC.IFP_CONTRACT_SID is null
            AND PSC.PS_CONTRACT_SID ?

            AND PS.ITEM_MASTER_SID = IM.ITEM_MASTER_SID
            AND PSC.PS_CONTRACT_SID = PS.PS_CONTRACT_SID

            AND IM.INBOUND_STATUS <> 'D'
            AND PSC.INBOUND_STATUS <> 'D'
            AND PS.INBOUND_STATUS <> 'D';
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadImtdCPSRS">
		<query>
        <![CDATA[
        INSERT INTO dbo.IMTD_ITEM_PRICE_REBATE_DETAILS
            (ITEM_MASTER_SID, ITEM_ID, ITEM_NO, ITEM_NAME,PRIMARY_UOM,PACKAGE_SIZE,
            CONTRACT_MASTER_SID, CFP_MODEL_SID, IFP_MODEL_SID, PS_MODEL_SID,
            CONTRACT_PRICE, CONTRACT_PRICE_START_DATE, CONTRACT_PRICE_END_DATE, PRICE_PROTECTION_START_DATE, PRICE_PROTECTION_END_DATE, PRICE_TOLERANCE_TYPE,
            PRICE_TOLERANCE, BASE_PRICE, PRICE_TOLERANCE_FREQUENCY, PRICE_TOLERANCE_INTERVAL, PRICE_TYPE, PRICE, PS_STATUS, PS_DETAILS_SID,
            RS_MODEL_SID, FORMULA_ID, REBATE_AMOUNT, RS_DETAILS_SID,
            ITEM_REBATE_START_DATE, ITEM_REBATE_END_DATE, REBATE_PLAN_SYSTEM_ID, BUNDLE_NO,
            USERS_SID, SESSION_ID, CHECK_RECORD,  IMTD_CREATED_DATE, "OPERATION", CREATED_BY, CREATED_DATE,"SOURCE",SUGGESTED_PRICE, ATTACHED_DATE, MODIFIED_DATE )
        SELECT DISTINCT
            IM.ITEM_MASTER_SID, IM.ITEM_ID,  IM.ITEM_NO, IM.ITEM_NAME,IM.PRIMARY_UOM,IM.PACKAGE_SIZE,
            RSC.CONTRACT_MASTER_SID, RSC.CFP_CONTRACT_SID, RSC.IFP_CONTRACT_SID,
            RSC.PS_CONTRACT_SID, PSCD.CONTRACT_PRICE, PSCD.CONTRACT_PRICE_START_DATE, PSCD.CONTRACT_PRICE_END_DATE,
            PSCD.PRICE_PROTECTION_START_DATE, PSCD.PRICE_PROTECTION_END_DATE, PSCD.PRICE_TOLERANCE_TYPE, PSCD.PRICE_TOLERANCE,
            PSCD.BASE_PRICE, PSCD.PRICE_TOLERANCE_FREQUENCY, PSCD.PRICE_TOLERANCE_INTERVAL,
            PSCD.ITEM_PRICING_QUALIFIER_SID, PSCD.PRICE, PSCD.PS_CONTRACT_ATTACHED_STATUS, PSCD.PS_CONTRACT_DETAILS_SID,
            RSC.RS_MODEL_SID,RSCD.FORMULA_ID, RSCD.REBATE_AMOUNT, RSCD.RS_CONTRACT_DETAILS_SID,
            RSCD.ITEM_REBATE_START_DATE, RSCD.ITEM_REBATE_END_DATE, RSCD.REBATE_PLAN_MASTER_SID, RSCD.BUNDLE_NO,
            '?' USERS_SID, '?' SESSION_ID, 0 CHECK_RECORD, '?' IMTD_CREATED_DATE, 'U' "Operation", PSCD.CREATED_BY, PSCD.CREATED_DATE ,PSCD."SOURCE",PSCD.SUGGESTED_PRICE, PSCD.PS_CONTRACT_ATTACHED_DATE, PSCD.MODIFIED_DATE
        FROM
            PS_CONTRACT_DETAILS PSCD,
            RS_CONTRACT RSC,
            RS_CONTRACT_DETAILS RSCD,
            ITEM_MASTER IM
        WHERE
            RSC.CONTRACT_MASTER_SID ?
            AND RSC.CFP_CONTRACT_SID ?
            AND RSC.IFP_CONTRACT_SID is null
            AND RSC.PS_CONTRACT_SID ?
            AND RSC.RS_CONTRACT_SID ?
            AND PSCD.PS_CONTRACT_SID ?

            AND RSC.RS_CONTRACT_SID=RSCD.RS_CONTRACT_SID
            AND RSCD.ITEM_MASTER_SID = IM.ITEM_MASTER_SID
            AND PSCD.ITEM_MASTER_SID = IM.ITEM_MASTER_SID

            AND IM.INBOUND_STATUS <> 'D'
            AND PSCD.INBOUND_STATUS <> 'D'
            AND RSCD.INBOUND_STATUS <> 'D';
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadImtdCIFPRS">
		<query>
        <![CDATA[
        INSERT INTO dbo.IMTD_ITEM_PRICE_REBATE_DETAILS
            (ITEM_MASTER_SID, ITEM_ID, ITEM_NO, ITEM_NAME, PS_STATUS,PRIMARY_UOM,PACKAGE_SIZE, UDC1, UDC2, UDC3, UDC4, UDC5, UDC6,
            START_DATE, END_DATE, ATTACHED_STATUS, ATTACHED_DATE, IFP_DETAILS_SID,
            CONTRACT_MASTER_SID, CFP_MODEL_SID, IFP_MODEL_SID, PS_MODEL_SID,
            RS_MODEL_SID, FORMULA_ID, REBATE_AMOUNT, RS_DETAILS_SID,
            ITEM_REBATE_START_DATE, ITEM_REBATE_END_DATE, REBATE_PLAN_SYSTEM_ID, BUNDLE_NO,
            USERS_SID, SESSION_ID, CHECK_RECORD,  IMTD_CREATED_DATE, "OPERATION", CREATED_BY, CREATED_DATE, MODIFIED_DATE)
        SELECT DISTINCT
            IM.ITEM_MASTER_SID, IM.ITEM_ID,  IM.ITEM_NO, IM.ITEM_NAME, IFPCD.ITEM_STATUS,IM.PRIMARY_UOM,IM.PACKAGE_SIZE, 0 UDC1, 0 UDC2, 0 UDC3, 0 UDC4, 0 UDC5, 0 UDC6,
            IFPCD.ITEM_START_DATE, IFPCD.ITEM_END_DATE, IFPCD.IFP_CONTRACT_ATTACHED_STATUS, IFPCD.IFP_CONTRACT_ATTACHED_DATE, IFPCD.IFP_CONTRACT_DETAILS_SID,
            RSC.CONTRACT_MASTER_SID, RSC.CFP_CONTRACT_SID, RSC.IFP_CONTRACT_SID,
            RSC.PS_CONTRACT_SID,
            RSC.RS_MODEL_SID,RSCD.FORMULA_ID, RSCD.REBATE_AMOUNT, RSCD.RS_CONTRACT_DETAILS_SID,
            RSCD.ITEM_REBATE_START_DATE, RSCD.ITEM_REBATE_END_DATE, RSCD.REBATE_PLAN_MASTER_SID, RSCD.BUNDLE_NO,
            '?' USERS_SID, '?' SESSION_ID, 0 CHECK_RECORD, '?' IMTD_CREATED_DATE, 'U' "Operation", IFPCD.CREATED_BY, IFPCD.CREATED_DATE , IFPCD.MODIFIED_DATE
        FROM
            IFP_CONTRACT_DETAILS IFPCD,
            RS_CONTRACT RSC,
            RS_CONTRACT_DETAILS RSCD,
            ITEM_MASTER IM
        WHERE
            RSC.CONTRACT_MASTER_SID ?
            AND RSC.CFP_CONTRACT_SID ?
            AND RSC.IFP_CONTRACT_SID ?
            AND RSC.PS_CONTRACT_SID is null
            AND RSC.RS_CONTRACT_SID ?
            AND IFPCD.IFP_CONTRACT_SID ?
            AND RSC.RS_CONTRACT_SID=RSCD.RS_CONTRACT_SID
            AND RSCD.ITEM_MASTER_SID = IM.ITEM_MASTER_SID
            AND IFPCD.ITEM_MASTER_SID = IM.ITEM_MASTER_SID
            AND IM.INBOUND_STATUS <> 'D'
            AND IFPCD.INBOUND_STATUS <> 'D'
            AND RSCD.INBOUND_STATUS <> 'D';
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadImtdRSFR">
		<query>
        <![CDATA[
    INSERT
	INTO
		IMTD_RS_CONTRACT_DETAILS_FR(
			RS_CONTRACT_DETAILS_FR_SID,
			RS_CONTRACT_DETAILS_SID,
			ITEM_MASTER_SID,
			FORMULA_ID,
			FORMULA_METHOD_ID,
			INBOUND_STATUS,
			RECORD_LOCK_STATUS,
			"Operation",
			USERS_ID,
			SESSION_ID,
			IMTD_CREATED_DATE
		) SELECT
			contRsdf.RS_CONTRACT_DETAILS_FR_SID,
			contRsdf.RS_CONTRACT_DETAILS_SID,
			contRsdf.ITEM_MASTER_SID,
			contRsdf.FORMULA_ID,
			contRsdf.FORMULA_METHOD_ID,
			contRsdf.INBOUND_STATUS,
			'false' as RECORD_LOCK_STATUS,
			'U' as "Operation",
			'?' as USERS_ID,
			'?' as SESSION_ID,
			'?' as IMTD_CREATED_DATE
		FROM
			RS_CONTRACT_DETAILS_FR contRsdf
		JOIN RS_CONTRACT_DETAILS rcd on
			rcd.RS_CONTRACT_DETAILS_SID = contRsdf.RS_CONTRACT_DETAILS_SID
			AND rcd.RS_CONTRACT_SID = ?
			AND rcd.INBOUND_STATUS <> 'D'
		WHERE
			contRsdf.INBOUND_STATUS <> 'D';
                        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadContractField">
		<query>
        <![CDATA[
                    select
                            CONTRACT_ID=ISNULL(CM.CONTRACT_ID,''),
                            CONTRACT_NO=ISNULL(CM.CONTRACT_NO,''),
                            CONTRACT_NAME=ISNULL(CM.CONTRACT_NAME,''),
                            CM.CONTRACT_TYPE,
                            CM.CONTRACT_STATUS,
                            CM.DOCUMENT_TYPE,
                            CM.START_DATE,
                            CM.END_DATE,
                            CM.DOCUMENT_CLASS,
                            COMPANY_NAME=ISNULL(CN.COMPANY_NAME,''),
                            CM.CONTRACT_TRADE_CLASS,
                            TERM=ISNULL(CONVERT(varchar(20),CM.TERM),''),
                            TRADING_PARTNER=ISNULL(CT.COMPANY_NAME,''),
                            CM.RENEGOTIATION_START_DATE,
                            CM.RENEGOTIATION_END_DATE,
                            CM.PRICEPROTECTION_START_DATE,
                            CM.PRICEPROTECTION_END_DATE,
                            CM.MANF_COMPANY_MASTER_SID,
                            INSIDE_OWNER=ISNULL(CM.INSIDE_OWNER,''),
                            INSIDE_PHONE=ISNULL(CM.INSIDE_PHONE,''),
                            INSIDE_AUTHOR=ISNULL(CM.INSIDE_AUTHOR,''),
                            INSIDE_ADDITIONAL=ISNULL(CM.INSIDE_ADDITIONAL,''),
                            INSIDE_ADDITIONAL_NAME=ISNULL(CM.INSIDE_ADDITIONAL_NAME,''),
                            INSIDE_ADDITIONAL_PHONE=ISNULL(CM.INSIDE_ADDITIONAL_PHONE,''),
                            OUTSIDE_OWNER=ISNULL(CM.OUTSIDE_OWNER,''),
                            OUTSIDE_PHONE=ISNULL(CM.OUTSIDE_PHONE,''),
                            OUTSIDE_AUTHOR=ISNULL(CM.OUTSIDE_AUTHOR,''),
                            OUTSIDE_ADDITIONAL=ISNULL(CM.OUTSIDE_ADDITIONAL,''),
                            OUTSIDE_ADDITIONAL_NAME=ISNULL(CM.OUTSIDE_ADDITIONAL_NAME,''),
                            OUTSIDE_ADDITIONAL_PHONE=ISNULL(CM.OUTSIDE_ADDITIONAL_PHONE,''),
                            ADVANCE_NOTICE_DAYS=ISNULL(CONVERT(varchar(20),CM.ADVANCE_NOTICE_DAYS),''),
                            AFFILIATED_CONTRACT_INFO=ISNULL(CM.AFFILIATED_CONTRACT_INFO,''),
                            SHIPPING_TERMS=ISNULL(CM.SHIPPING_TERMS,''),
                            CM.PROPOSAL_START_DATE,
                            CM.PROPOSAL_END_DATE,
                            CM.ORIGINAL_START_DATE,
                            CM.ORIGINAL_END_DATE,
                            CM.AWARD_STATUS,
                            CM.LAST_UPDATED_DATE,
                            PRICE_ESCALATION_CLAUSE=ISNULL(CM.PRICE_ESCALATION_CLAUSE,''),
                            EXEMPT_FROM_LOW_PRICE=ISNULL(CM.EXEMPT_FROM_LOW_PRICE,''),
                            CM.PRICE_RESET_INDICATOR,
                            CANCELLATION_CLAUSE=ISNULL(CM.CANCELLATION_CLAUSE,''),
                            MOST_FAVORED_NATION=ISNULL(CM.MOST_FAVORED_NATION,''),
                            CATEGORY=ISNULL(CM.CATEGORY,''),
                            CURRENCY=ISNULL(CM.CURRENCY,''),
                            MINIMUM_ORDER=ISNULL(CM.MINIMUM_ORDER,''),
                            CM.PAYMENT_TERMS,
                            CM.INTERNAL_NOTES,
                            CM.BUNIT_COMPANY_MASTER_SID,
                            CM.CONT_HOLD_COMPANY_MASTER_SID,
                            CM.CONTRACT_MASTER_SID,
                            HT.DESCRIPTION
                    from
                            CONTRACT_MASTER CM
                    LEFT JOIN HELPER_TABLE HT ON 
                            LIST_NAME='CONTRACT_TYPE' AND HT.HELPER_TABLE_SID= CM.CONTRACT_TYPE
                    LEFT JOIN COMPANY_MASTER CN ON
                            CN.COMPANY_MASTER_SID = CM.BUNIT_COMPANY_MASTER_SID
                    LEFT JOIN COMPANY_MASTER CT ON
                            CT.COMPANY_MASTER_SID = CM.CONT_HOLD_COMPANY_MASTER_SID
                    WHERE
                            CM.CONTRACT_MASTER_SID =?;
                        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadAliasTable">
		<query>
        <![CDATA[
            select
                    alType =
                  CASE
                     WHEN HAT.DESCRIPTION like '%Select One%' THEN ''
                     ELSE HAT.DESCRIPTION
                  END,
                    CT.COMPANY_NAME,
                    CAM.CONTRACT_ALIAS_NO,
                    CAM.CONTRACT_ALIAS_NAME,
                    CAM.START_DATE,
                    CAM.END_DATE,
                    CAM.CONTRACT_ALIAS_TYPE,
                    CAM.TP_COMPANY_MASTER_SID,
                    CAM.CONTRACT_MASTER_SID,
                    CAM.CONTRACT_ALIAS_MASTER_SID
            from
                    dbo.CONTRACT_ALIAS_MASTER CAM
            LEFT JOIN dbo.HELPER_TABLE HAT ON
                    HAT.HELPER_TABLE_SID = CAM.CONTRACT_ALIAS_TYPE
            LEFT JOIN COMPANY_MASTER CT ON
                    CT.COMPANY_MASTER_SID = CAM.TP_COMPANY_MASTER_SID
            WHERE CAM.CONTRACT_MASTER_SID=?;
                        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadCompaniesField">
		<query>
        <![CDATA[
            SELECT
                    CFM.CFP_ID
                    ,CFC.CFP_NO
                    ,CFC.CFP_NAME
                    ,CFC.CFP_STATUS
                    ,CFC.CFP_START_DATE
                    ,CFC.CFP_END_DATE
                    ,CFC.CFP_TYPE
                    ,CFC.CFP_CATEGORY
                    ,CFC.CFP_TRADE_CLASS
                    ,CFP_DESIGNATION=case when isnumeric(CFC.CFP_DESIGNATION + '.0e0') = 1
                            then cast(CFC.CFP_DESIGNATION as int)
                            else NULL
                            end
                    ,PCFM.CFP_ID as PCFP_ID
                    ,PCFM.CFP_NAME  as PCFP_NAME
                    ,CFC.SALES_INCLUSION
                    ,usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY_VAL
                    ,CFC.CREATED_DATE
                    ,usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as MODIFIED_BY_VAL
                    ,CFC.MODIFIED_DATE
                    ,CFC.PARENT_CFP_ID
                    ,CFC.CREATED_BY
                    ,CFC.MODIFIED_BY
            FROM
                    dbo.CFP_CONTRACT CFC
            JOIN dbo.CFP_MODEL CFM ON CFM.CFP_MODEL_SID=CFC.CFP_MODEL_SID
            LEFT JOIN dbo.CFP_MODEL PCFM ON PCFM.CFP_MODEL_SID=CFC.PARENT_CFP_ID
            LEFT JOIN ?.dbo.User_ usr ON
                         usr.UserId = CFC.MODIFIED_BY
            JOIN ?.dbo.User_ usr1 ON
                         usr1.UserId = CFC.CREATED_BY
            WHERE CFC.CFP_CONTRACT_SID=?;
                        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadItemsField">
		<query>
        <![CDATA[
                SELECT
                        IFM.IFP_ID
                        ,IFC.IFP_NO
                        ,IFC.IFP_NAME
                        ,IFC.IFP_STATUS
                        ,IFC.IFP_START_DATE
                        ,IFC.IFP_END_DATE
                        ,IFC.IFP_DESIGNATION
                        ,IFC.PARENT_IFP_ID
                        ,IFC.PARENT_IFP_NAME
                        ,IFC.IFP_TYPE
                        ,usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY_VAL
                        ,IFC.CREATED_DATE
                        ,IFC.IFP_CATEGORY
                        ,usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as MODIFIED_BY_VAL
                        ,IFC.MODIFIED_DATE
                        ,IFC.CREATED_BY
                        ,IFC.MODIFIED_BY
                FROM
                        dbo.IFP_CONTRACT IFC
                JOIN dbo.IFP_MODEL IFM ON IFM.IFP_MODEL_SID=IFC.IFP_MODEL_SID
                LEFT JOIN ?.dbo.User_ usr ON
                             usr.UserId = IFC.MODIFIED_BY
                JOIN ?.dbo.User_ usr1 ON
                             usr1.UserId = IFC.CREATED_BY
                WHERE IFC.IFP_CONTRACT_SID=?;
                        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadPricingField">
		<query>
        <![CDATA[
            SELECT
                    PSM.PS_ID
                    ,PSC.PS_NO
                    ,PSC.PS_NAME
                    ,PSC.PS_STATUS
                    ,PSC.PS_START_DATE
                    ,PSC.PS_END_DATE
                    ,PSC.PS_DESIGNATION
                    ,PSC.PARENT_PS_ID
                    ,PSC.PARENT_PS_NAME
                    ,PSC.PS_TYPE
                    ,usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY_VAL
                    ,PSC.CREATED_DATE
                    ,PSC.PS_CATEGORY
                    ,usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as MODIFIED_BY_VAL
                    ,PSC.MODIFIED_DATE
                    ,PSC.PS_TRADE_CLASS
                    ,PSC.CREATED_BY
                    ,PSC.MODIFIED_BY
            FROM
                    dbo.PS_CONTRACT PSC
            JOIN dbo.PS_MODEL PSM ON PSM.PS_MODEL_SID=PSC.PS_MODEL_SID
            LEFT JOIN dbo.PS_MODEL PPSM ON PPSM.PS_MODEL_SID=PSC.PARENT_PS_ID
            LEFT JOIN ?.dbo.User_ usr ON
                         usr.UserId = PSC.MODIFIED_BY
            JOIN ?.dbo.User_ usr1 ON
                         usr1.UserId = PSC.CREATED_BY
            WHERE PSC.PS_CONTRACT_SID=?;
                        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadRebateField">
		<query>
        <![CDATA[
                            SELECT
                                    RSM.RS_ID
                                    ,RSC.RS_NO
                                    ,RSC.RS_NAME
                                    ,RSC.RS_STATUS
                                    ,RSC.RS_TYPE
                                    ,RSC.REBATE_PROGRAM_TYPE
                                    ,RSC.RS_CATEGORY
                                    ,RSC.RS_START_DATE
                                    ,RSC.RS_END_DATE
                                    ,RSC.RS_TRADE_CLASS
                                    ,RSC.RS_DESIGNATION
                                    ,RSC.RS_ALIAS
                                    ,replace(RSC.PARENT_RS_ID,'null','') as PARENT_RS_ID
                                    ,RSC.PARENT_RS_NAME
                                    ,RSC.RS_TRANS_REF_NO
                                    ,RSC.RS_TRANS_REF_NAME
                                    ,RSC.DEDUCTION_INCLUSION
                                    ,UDC.UDC1
                                    ,UDC.UDC2
                                    ,UDC.UDC3
                                    ,UDC.UDC4
                                    ,UDC.UDC5
                                    ,UDC.UDC6
                                    ,RSC.RS_CALENDAR
                                    ,RSC.REBATE_FREQUENCY
                                    ,0 as PAYMENT_LEVEL
                                    ,RSC.PAYMENT_FREQUENCY
                                    ,RSC.PAYMENT_GRACE_PERIOD
                                    ,RSC.PAYMENT_TERMS
                                    ,RSC.PAYMENT_METHOD
                                    ,RSC.INTEREST_BEARING_BASIS
                                    ,RSC.EVALUATION_RULE_LEVEL
                                    ,RSC.EVALUATION_RULE_TYPE
                                    ,ECDM.RULE_NO as EVA_RULE
                                    ,RSC.INTEREST_BEARING_INDICATOR
                                    ,RSC.CALCULATION_RULE_LEVEL
                                    ,RSC.CALCULATION_TYPE
                                    ,CCDM.RULE_NO as CAL_RULE
                                    ,RSC.CALCULATION_LEVEL
                                    ,RSC.REBATE_PROCESSING_TYPE
                                    ,RSC.RS_VALIDATION_PROFILE
                                    ,RSC.INTEREST_BEARING_INDICATOR as PRS_INTEREST_BEARING_INDICATOR
                                    ,RSC.INTEREST_BEARING_BASIS as PRS_INTEREST_BEARING_BASIS
                                    ,RSC.EVALUATION_RULE_OR_ASSOCIATION
                                    ,RSC.CALCULATION_RULE
                            FROM
                                    dbo.RS_CONTRACT RSC
                            JOIN dbo.RS_MODEL RSM ON RSM.RS_MODEL_SID=RSC.RS_MODEL_SID
                            LEFT JOIN dbo.UDCS UDC ON UDC.MASTER_SID=RSC.RS_CONTRACT_SID AND UDC.MASTER_TYPE='RS_CONTRACT'
                            LEFT JOIN dbo.CDR_MODEL ECDM ON
                                         ECDM.CDR_MODEL_SID = RSC.EVALUATION_RULE_OR_ASSOCIATION
                            LEFT JOIN dbo.CDR_MODEL CCDM ON
                                         CCDM.CDR_MODEL_SID = RSC.CALCULATION_RULE
                            WHERE RSC.RS_CONTRACT_SID=?;
                         ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.deleteNotesTabInfo">
		<query>
        <![CDATA[
            DELETE
            FROM
                MASTER_DATA_FILES
            WHERE
                MASTER_TABLE_NAME = 'CONTRACT_MASTER'
                AND MASTER_TABLE_SID = ?;
         ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.loadNotesTabInfo">
		<query>
        <![CDATA[
            SELECT
                    MDF.MASTER_DATA_FILES_SID,
                    MDF.MASTER_TABLE_SID,
                    MDF.MASTER_TABLE_NAME,
                    MDF.FILE_PATH,
                    MDF.CREATED_DATE,
                    MDF.CREATED_BY,
                    usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY_VAL
            FROM
                    MASTER_DATA_FILES MDF
            JOIN ?.dbo.User_ usr1 ON
                         usr1.UserId = MDF.CREATED_BY
            WHERE
                    MASTER_TABLE_NAME = 'CONTRACT_MASTER'
                    AND MASTER_TABLE_SID = ?;
 ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.insertNotesTabInfo">
		<query>
        <![CDATA[
            INSERT
                INTO
                        MASTER_DATA_FILES(
                                MASTER_TABLE_SID,
                                MASTER_TABLE_NAME,
                                FILE_PATH,
                                CREATED_DATE,
                                CREATED_BY
                        )
                VALUES(?,'CONTRACT_MASTER',?,?,?);
         ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.saveCFPupdate">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?
        UPDATE CFP_CONTRACT_DETAILS SET INBOUND_STATUS='D' WHERE CFP_CONTRACT_DETAILS_SID in
        (SELECT CFP_DETAILS_SID FROM dbo.IMTD_CFP_DETAILS WHERE USERS_SID=@USERS_SID AND SESSION_ID=@SESSION_ID AND (CHECK_RECORD=0 OR "Operation" = 'D'));
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.saveCFPdelete">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?
        DELETE FROM dbo.IMTD_CFP_DETAILS WHERE USERS_SID=@USERS_SID AND SESSION_ID=@SESSION_ID AND (CHECK_RECORD=0 OR "Operation" = 'D');
         ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.saveCFP">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?,
            @CFP_CONTRACT_ID INT=?
        MERGE CFP_CONTRACT_DETAILS AS Target USING
        (SELECT  CFP_DETAILS_START_DATE, CFP_DETAILS_END_DATE, CFP_DETAILS_ATTACHED_STATUS, CFP_DETAILS_ATTACHED_DATE, CFP_DETAILS_SID,
        CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY ,COMPANY_MASTER_SID,COMPANY_START_DATE,COMPANY_END_DATE

        FROM dbo.IMTD_CFP_DETAILS WHERE USERS_SID=@USERS_SID AND SESSION_ID=@SESSION_ID AND CHECK_RECORD=1 AND ( "Operation" = 'U'
                    OR "Operation" = 'A' )
) AS Source
        ON (Target.CFP_CONTRACT_SID = @CFP_CONTRACT_ID
    AND TARGET.COMPANY_MASTER_SID = SOURCE.COMPANY_MASTER_SID
)
        WHEN MATCHED THEN
        UPDATE SET
        Target.CFP_CONTRACT_ATTACHED_STATUS = Source.CFP_DETAILS_ATTACHED_STATUS,
        Target.COMPANY_START_DATE = Source.CFP_DETAILS_START_DATE,
        Target.COMPANY_END_DATE = Source.CFP_DETAILS_END_DATE,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.CREATED_BY = Source.CREATED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.INBOUND_STATUS = 'U'
WHEN NOT MATCHED THEN
  INSERT (
COMPANY_MASTER_SID, CFP_CONTRACT_SID,COMPANY_START_DATE, COMPANY_END_DATE, INBOUND_STATUS, CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY,CFP_CONTRACT_ATTACHED_STATUS)
 VALUES( SOURCE.COMPANY_MASTER_SID,@CFP_CONTRACT_ID , SOURCE.CFP_DETAILS_START_DATE, SOURCE.CFP_DETAILS_END_DATE, 'A' , SOURCE.CREATED_DATE, SOURCE.CREATED_BY, SOURCE.MODIFIED_DATE, SOURCE.MODIFIED_BY ,SOURCE.CFP_DETAILS_ATTACHED_STATUS);;
 ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.saveIFPupdate">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?
        UPDATE IFP_CONTRACT_DETAILS SET INBOUND_STATUS='D' WHERE IFP_CONTRACT_DETAILS_SID in
        (SELECT IFP_DETAILS_SID FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS WHERE USERS_SID=@USERS_SID AND SESSION_ID=@SESSION_ID AND (CHECK_RECORD=0 OR "Operation" = 'D'));
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.saveIFPdelete">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?
        DELETE FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS WHERE USERS_SID=@USERS_SID AND SESSION_ID=@SESSION_ID AND (CHECK_RECORD=0 OR "Operation" = 'D');
         ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.saveIFP">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?,
            @IFP_CONTRACT_ID INT=?
        MERGE IFP_CONTRACT_DETAILS AS Target USING
        (SELECT ATTACHED_STATUS, START_DATE, END_DATE, ATTACHED_DATE, IFP_DETAILS_SID, CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY,ITEM_MASTER_SID
        FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS WHERE USERS_SID=@USERS_SID AND SESSION_ID=@SESSION_ID AND CHECK_RECORD=1 AND ( "Operation" = 'U'
                    OR "Operation" = 'A' )) AS Source
        ON (Target.IFP_CONTRACT_SID = @IFP_CONTRACT_ID
    AND TARGET.ITEM_MASTER_SID = SOURCE.ITEM_MASTER_SID
)
        WHEN MATCHED THEN
        UPDATE SET
        Target.ITEM_STATUS = Source.ATTACHED_STATUS,
        Target.ITEM_START_DATE = Source.START_DATE,
        Target.ITEM_END_DATE = Source.End_Date,
        Target.CREATED_DATE = Source.CREATED_DATE,
Target.IFP_CONTRACT_ATTACHED_STATUS = Source.ATTACHED_STATUS,
        Target.IFP_CONTRACT_ATTACHED_DATE = Source.ATTACHED_DATE,
        Target.CREATED_BY = Source.CREATED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.INBOUND_STATUS = 'U'
 WHEN NOT MATCHED THEN
        INSERT (IFP_CONTRACT_SID, ITEM_MASTER_SID, ITEM_STATUS,
        ITEM_START_DATE, ITEM_END_DATE,INBOUND_STATUS, RECORD_LOCK_STATUS, CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY, IFP_CONTRACT_ATTACHED_STATUS,IFP_CONTRACT_ATTACHED_DATE)
        Values( @IFP_CONTRACT_ID , SOURCE.ITEM_MASTER_SID, SOURCE.ATTACHED_STATUS,
        SOURCE.START_DATE, SOURCE.END_DATE, 'A'  ,'false' , SOURCE.CREATED_DATE, SOURCE.CREATED_BY, SOURCE.MODIFIED_DATE, SOURCE.MODIFIED_BY, SOURCE.ATTACHED_STATUS,GETDATE());;
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.savePSupdate">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?
        UPDATE PS_CONTRACT_DETAILS SET INBOUND_STATUS='D' WHERE PS_CONTRACT_DETAILS_SID in
        (SELECT PS_DETAILS_SID FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS WHERE USERS_SID=@USERS_SID AND SESSION_ID=@SESSION_ID AND (CHECK_RECORD=0 OR "Operation" = 'D'));
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.savePSdelete">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?
        DELETE FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS WHERE USERS_SID=@USERS_SID AND SESSION_ID=@SESSION_ID AND (CHECK_RECORD=0 OR "Operation" = 'D');
         ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.savePS">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?,
            @PS_CONTRACT_ID INT=?
        MERGE PS_CONTRACT_DETAILS AS Target USING
        (SELECT CONTRACT_PRICE, CONTRACT_PRICE_START_DATE, CONTRACT_PRICE_END_DATE, PRICE_PROTECTION_START_DATE, PRICE_PROTECTION_END_DATE, PRICE_TOLERANCE_TYPE,
        PRICE_TOLERANCE, BASE_PRICE, PRICE_TOLERANCE_FREQUENCY, PRICE_TOLERANCE_INTERVAL, PRICE_TYPE, PRICE, PS_STATUS, PS_DETAILS_SID, CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY, ATTACHED_STATUS
        ,MAX_INCREMENTAL_CHANGE,RESET_ELIGIBLE,RESET_TYPE,RESET_DATE,RESET_INTERVAL,RESET_FREQUENCY,NET_PRICE_TYPE,nullif(NET_PRICE_TYPE_FORMULA , 0) as NET_PRICE_TYPE_FORMULA,PRICE_PROTECTION_PRICE_TYPE,NEP,NEP_FORMULA, nullif(BRAND_MASTER_SID,0) AS BRAND_MASTER_SID, PRICE_PROTECTION_STATUS,Base_Price_Type,Base_Price_Entry
        ,Base_Price_Date,Base_Price_ddlb,Net_Base_Price,Net_Base_Price_Formula_ID,Subsequent_Period_Price_Type,Net_Subsequent_Period_price,Net_Subsequent_Price_Formula_Id,Reset_Price_Type,Net_Reset_Price_Type
        ,Net_Reset_Price_Formula_Id,SUGGESTED_PRICE,"SOURCE",ATTACHED_DATE,ITEM_MASTER_SID
        FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS WHERE USERS_SID=@USERS_SID AND SESSION_ID=@SESSION_ID AND CHECK_RECORD=1 AND  ( "Operation" = 'U'
                    OR "Operation" = 'A' )) AS Source
        ON (Target.PS_CONTRACT_SID = @PS_CONTRACT_ID
    AND TARGET.ITEM_MASTER_SID = SOURCE.ITEM_MASTER_SID )
        WHEN MATCHED THEN
        UPDATE SET
        Target.CONTRACT_PRICE = Source.CONTRACT_PRICE,
        Target.CONTRACT_PRICE_START_DATE = Source.CONTRACT_PRICE_START_DATE,
        Target.CONTRACT_PRICE_END_DATE = Source.CONTRACT_PRICE_END_DATE,
        Target.PRICE_PROTECTION_START_DATE = Source.PRICE_PROTECTION_START_DATE,
        Target.PRICE_PROTECTION_END_DATE = Source.PRICE_PROTECTION_END_DATE,
        Target.PRICE_TOLERANCE_TYPE = Source.PRICE_TOLERANCE_TYPE,
        Target.PRICE_TOLERANCE = Source.PRICE_TOLERANCE,
        Target.BASE_PRICE = Source.BASE_PRICE,
        Target.ITEM_PRICING_QUALIFIER_SID = Source.PRICE_TYPE,
        Target.PRICE_TOLERANCE_FREQUENCY = Source.PRICE_TOLERANCE_FREQUENCY,
        Target.PRICE_TOLERANCE_INTERVAL = Source.PRICE_TOLERANCE_INTERVAL,
        Target.PRICE = Source.PRICE,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.CREATED_BY = Source.CREATED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.INBOUND_STATUS = 'C',
        Target.PS_CONTRACT_ATTACHED_STATUS = Source.PS_STATUS,
        Target.PS_CONTRACT_ATTACHED_DATE = Source.ATTACHED_DATE,
        Target.MAX_INCREMENTAL_CHANGE = Source.MAX_INCREMENTAL_CHANGE,
        Target.RESET_ELIGIBLE = Source.RESET_ELIGIBLE,
        Target.RESET_TYPE = Source.RESET_TYPE,
        Target.RESET_DATE = Source.RESET_DATE,
        Target.RESET_INTERVAL = Source.RESET_INTERVAL,
        Target.RESET_FREQUENCY = Source.RESET_FREQUENCY,
        Target.NET_PRICE_TYPE = Source.NET_PRICE_TYPE,
        Target.NET_PRICE_TYPE_FORMULA = Source.NET_PRICE_TYPE_FORMULA,
        Target.PRICE_PROTECTION_PRICE_TYPE = Source.PRICE_PROTECTION_PRICE_TYPE,
        Target.NEP = Source.NEP,
        Target.NEP_FORMULA = Source.NEP_FORMULA,
        Target.BRAND_MASTER_SID = Source.BRAND_MASTER_SID,
        Target.PRICE_PROTECTION_STATUS = Source.PRICE_PROTECTION_STATUS,
        Target.Base_Price_Type = Source.Base_Price_Type,
        Target.Base_Price_Entry = Source.Base_Price_Entry,
        Target.Base_Price_Date = Source.Base_price_Date,
        Target.Base_Price_ddlb = Source.Base_Price_ddlb,
        Target.Net_Base_Price = Source.Net_Base_Price,
        Target.Net_Base_Price_Formula_ID = Source.Net_Base_Price_Formula_ID,
        Target.Subsequent_Period_Price_Type = Source.Subsequent_Period_Price_Type,
        Target.Net_Subsequent_Period_price = Source.Net_Subsequent_Period_price,
        Target.Net_Subsequent_Price_Formula_Id = Source.Net_Subsequent_Price_Formula_Id,
        Target.Reset_Price_Type = Source.Reset_Price_Type,
        Target.Net_Reset_Price_Type = Source.Net_Reset_Price_Type,
        Target.Net_Reset_Price_Formula_Id = Source.Net_Reset_Price_Formula_Id,
        Target.SUGGESTED_PRICE = Source.SUGGESTED_PRICE,
        Target."SOURCE" = Source."SOURCE"
        WHEN NOT MATCHED THEN
  INSERT (PS_CONTRACT_SID, ITEM_MASTER_SID,
        CONTRACT_PRICE, CONTRACT_PRICE_START_DATE, CONTRACT_PRICE_END_DATE, PRICE_PROTECTION_START_DATE, PRICE_PROTECTION_END_DATE,
        PRICE_TOLERANCE_TYPE, PRICE_TOLERANCE, BASE_PRICE, PRICE_TOLERANCE_FREQUENCY, PRICE_TOLERANCE_INTERVAL, ITEM_PRICING_QUALIFIER_SID, PRICE,
        INBOUND_STATUS, RECORD_LOCK_STATUS, CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY, PS_CONTRACT_ATTACHED_STATUS
        ,MAX_INCREMENTAL_CHANGE,RESET_ELIGIBLE,RESET_TYPE,RESET_DATE,RESET_INTERVAL,RESET_FREQUENCY,NET_PRICE_TYPE,NET_PRICE_TYPE_FORMULA,PRICE_PROTECTION_PRICE_TYPE,NEP,NEP_FORMULA,BRAND_MASTER_SID,PRICE_PROTECTION_STATUS,Base_Price_Type,Base_Price_Entry
        ,Base_Price_Date,Base_Price_ddlb,Net_Base_Price,Net_Base_Price_Formula_ID,Subsequent_Period_Price_Type,Net_Subsequent_Period_price,Net_Subsequent_Price_Formula_Id,Reset_Price_Type,Net_Reset_Price_Type
        ,Net_Reset_Price_Formula_Id,SUGGESTED_PRICE,"SOURCE",PS_CONTRACT_ATTACHED_DATE
         ) VALUES(
         @PS_CONTRACT_ID ,SOURCE.ITEM_MASTER_SID,
        SOURCE.CONTRACT_PRICE, SOURCE.CONTRACT_PRICE_START_DATE, SOURCE.CONTRACT_PRICE_END_DATE, SOURCE.PRICE_PROTECTION_START_DATE, SOURCE.PRICE_PROTECTION_END_DATE, SOURCE.PRICE_TOLERANCE_TYPE,
        SOURCE.PRICE_TOLERANCE, SOURCE.BASE_PRICE, SOURCE.PRICE_TOLERANCE_FREQUENCY, SOURCE.PRICE_TOLERANCE_INTERVAL, SOURCE.PRICE_TYPE, SOURCE.PRICE, 'A'  ,'false'  , SOURCE.CREATED_DATE, SOURCE.CREATED_BY, SOURCE.MODIFIED_DATE, SOURCE.MODIFIED_BY, SOURCE.PS_STATUS
        ,SOURCE.MAX_INCREMENTAL_CHANGE,SOURCE.RESET_ELIGIBLE,SOURCE.RESET_TYPE,SOURCE.RESET_DATE,SOURCE.RESET_INTERVAL,SOURCE.RESET_FREQUENCY,SOURCE.NET_PRICE_TYPE,nullif(SOURCE.NET_PRICE_TYPE_FORMULA , 0) ,SOURCE.PRICE_PROTECTION_PRICE_TYPE,SOURCE.NEP,SOURCE.NEP_FORMULA,
        NULLIF(
            SOURCE.BRAND_MASTER_SID,
            0
          ) ,SOURCE.PRICE_PROTECTION_STATUS,SOURCE.Base_Price_Type,SOURCE.Base_Price_Entry
        ,SOURCE.Base_Price_Date,SOURCE.Base_Price_ddlb,SOURCE.Net_Base_Price,SOURCE.Net_Base_Price_Formula_ID,SOURCE.Subsequent_Period_Price_Type,SOURCE.Net_Subsequent_Period_price,SOURCE.Net_Subsequent_Price_Formula_Id,SOURCE.Reset_Price_Type,SOURCE.Net_Reset_Price_Type
        ,SOURCE.Net_Reset_Price_Formula_Id,SOURCE.SUGGESTED_PRICE,SOURCE."SOURCE",SOURCE.ATTACHED_DATE);;
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.saveRSupdate">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?
        UPDATE RS_CONTRACT_DETAILS SET INBOUND_STATUS='D' WHERE RS_CONTRACT_DETAILS_SID in
        (SELECT RS_DETAILS_SID FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS WHERE USERS_SID=@USERS_SID AND SESSION_ID=@SESSION_ID AND (CHECK_RECORD=0 OR "Operation" = 'D'));
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.saveRSdelete">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?
        DELETE FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS WHERE USERS_SID=@USERS_SID AND SESSION_ID=@SESSION_ID AND (CHECK_RECORD=0 OR "Operation" = 'D');
         ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.saveRS">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?,
            @RS_CONTRACT_ID INT=?
        MERGE dbo.RS_CONTRACT_DETAILS AS Target USING
        (SELECT REBATE_AMOUNT, ITEM_REBATE_START_DATE, ITEM_REBATE_END_DATE, RS_DETAILS_SID, CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY, BUNDLE_NO, REBATE_PLAN_SYSTEM_ID,FORMULA_ID, RS_ATTACHED_STATUS,RS_ATTACHED_DATE,
         DEDUCTION_CALENDAR_MASTER_SID, NET_SALES_FORMULA_MASTER_SID, FORMULA_TYPE, NET_SALES_RULE, EVALUATION_RULE, EVALUATION_RULE_BUNDLE, CALCULATION_RULE, CALCULATION_RULE_BUNDLE, ITEM_MASTER_SID
        FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS WHERE USERS_SID=@USERS_SID AND SESSION_ID=@SESSION_ID AND CHECK_RECORD=1 AND ( "Operation" = 'U'
                    OR "Operation" = 'A' ))
 AS Source
        ON (Target.RS_CONTRACT_SID = @RS_CONTRACT_ID
    AND TARGET.ITEM_MASTER_SID = SOURCE.ITEM_MASTER_SID
)
      WHEN MATCHED THEN
        UPDATE SET

        Target.ITEM_REBATE_START_DATE = Source.ITEM_REBATE_START_DATE,
        Target.ITEM_REBATE_END_DATE = Source.ITEM_REBATE_END_DATE,
        Target.REBATE_AMOUNT = Source.REBATE_AMOUNT,

        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.CREATED_BY = Source.CREATED_BY,
        Target.MODIFIED_DATE = Source.MODIFIED_DATE,
        Target.MODIFIED_BY = Source.MODIFIED_BY,
        Target.BUNDLE_NO = Source.BUNDLE_NO,
        Target.REBATE_PLAN_MASTER_SID = Source.REBATE_PLAN_SYSTEM_ID,
        Target.FORMULA_ID=Source.FORMULA_ID,
        Target.RS_CONTRACT_ATTACHED_STATUS = Source.RS_ATTACHED_STATUS,
        Target.RS_CONTRACT_ATTACHED_DATE = Source.RS_ATTACHED_DATE,
        Target.DEDUCTION_CALENDAR_MASTER_SID = Source.DEDUCTION_CALENDAR_MASTER_SID,
        Target.NET_SALES_FORMULA_MASTER_SID = Source.NET_SALES_FORMULA_MASTER_SID,
        Target.FORMULA_TYPE = Source.FORMULA_TYPE,
        Target.NET_SALES_RULE = Source.NET_SALES_RULE,
        Target.EVALUATION_RULE = Source.EVALUATION_RULE,
        Target.EVALUATION_RULE_BUNDLE = Source.EVALUATION_RULE_BUNDLE,
        Target.CALCULATION_RULE = Source.CALCULATION_RULE,
        Target.CALCULATION_RULE_BUNDLE = Source.CALCULATION_RULE_BUNDLE,
        Target.INBOUND_STATUS = 'C'
WHEN NOT MATCHED THEN
  INSERT (RS_CONTRACT_SID, ITEM_MASTER_SID, ITEM_REBATE_START_DATE,
        REBATE_AMOUNT,
        INBOUND_STATUS, RECORD_LOCK_STATUS, CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY, BUNDLE_NO, REBATE_PLAN_MASTER_SID,FORMULA_ID,
         RS_CONTRACT_ATTACHED_STATUS, DEDUCTION_CALENDAR_MASTER_SID, NET_SALES_FORMULA_MASTER_SID, FORMULA_TYPE, NET_SALES_RULE, EVALUATION_RULE, EVALUATION_RULE_BUNDLE, CALCULATION_RULE, CALCULATION_RULE_BUNDLE)
        Values( @RS_CONTRACT_ID , SOURCE.ITEM_MASTER_SID, SOURCE.ITEM_REBATE_START_DATE,
        SOURCE.REBATE_AMOUNT, 'A'  ,'false' , SOURCE.CREATED_DATE, SOURCE.CREATED_BY, SOURCE.MODIFIED_DATE, SOURCE.MODIFIED_BY, SOURCE.BUNDLE_NO, SOURCE.REBATE_PLAN_SYSTEM_ID,SOURCE.FORMULA_ID, SOURCE.RS_ATTACHED_STATUS,
         SOURCE.DEDUCTION_CALENDAR_MASTER_SID, SOURCE.NET_SALES_FORMULA_MASTER_SID, SOURCE.FORMULA_TYPE, SOURCE.NET_SALES_RULE, SOURCE.EVALUATION_RULE, SOURCE.EVALUATION_RULE_BUNDLE, SOURCE.CALCULATION_RULE, SOURCE.CALCULATION_RULE_BUNDLE
        );;
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.updateRSFormula">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?
        UPDATE
                IMTD_RS_CONTRACT_DETAILS_FR
        SET
                \"Operation\" = 'D'
        WHERE
                IMTD_ITEM_PRICE_REBATE_DETAILS_SID in(
                        SELECT
                                IMTD_ITEM_PRICE_REBATE_SID
                        FROM
                                IMTD_ITEM_PRICE_REBATE_DETAILS
                        WHERE
                                CHECK_RECORD = 0
                                AND USERS_ID = @USERS_SID
                                and SESSION_ID = @SESSION_ID
                );
]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.saveRSFormula">
		<query>
        <![CDATA[
            DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?
            UPDATE
                    RS_CONTRACT_DETAILS_FR
            SET
                    INBOUND_STATUS = 'D'
            WHERE
                    RS_CONTRACT_DETAILS_FR_SID in(
                            SELECT
                                    RS_CONTRACT_DETAILS_FR_SID
                            FROM
                                    IMTD_RS_CONTRACT_DETAILS_FR
                            WHERE
                                    USERS_ID = @USERS_SID
                                    and SESSION_ID = @SESSION_ID
                                    and \"Operation\" = 'D'
                    );
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.saveRSDetails">
		<query>
        <![CDATA[
            DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?,
            @RS_CONTRACT_DETAILS_SID INT=?,
            @ITEM_MASTER_SID INT=?
            MERGE RS_CONTRACT_DETAILS_FR T
                    USING IMTD_RS_CONTRACT_DETAILS_FR S ON
            (
                    S.ITEM_MASTER_SID = @ITEM_MASTER_SID
                    AND S.RS_CONTRACT_DETAILS_FR_SID = T.RS_CONTRACT_DETAILS_FR_SID
                    AND S.USERS_ID = @USERS_SID
                    AND S.SESSION_ID = @SESSION_ID
            )
            WHEN NOT MATCHED BY TARGET
            AND S.Operation <> 'D'
            AND S.ITEM_MASTER_SID = @ITEM_MASTER_SID
            AND S.USERS_ID = @USERS_SID
            AND SESSION_ID = @SESSION_ID THEN  INSERT
                    (
                            RS_CONTRACT_DETAILS_SID,
                            ITEM_MASTER_SID,
                            FORMULA_ID,
                            FORMULA_METHOD_ID,
                            INBOUND_STATUS,
                            RECORD_LOCK_STATUS,
                            CREATED_BY,
                            MODIFIED_BY
                    )
            VALUES(
                    @RS_CONTRACT_DETAILS_SID,
                    @ITEM_MASTER_SID,
                    S.FORMULA_ID,
                    S.FORMULA_METHOD_ID,
                    'A',
                    'false',
                    @USERS_SID,
                    @USERS_SID
            )
            WHEN MATCHED
            AND S.Operation <> 'D'
            AND S.ITEM_MASTER_SID = @ITEM_MASTER_SID
            AND S.USERS_ID = @USERS_SID
            AND S.SESSION_ID = @SESSION_ID THEN UPDATE
            SET
                    T.RS_CONTRACT_DETAILS_SID = @RS_CONTRACT_DETAILS_SID,
                    T.ITEM_MASTER_SID = @ITEM_MASTER_SID,
                    T.FORMULA_ID = S.FORMULA_ID,
                    T.FORMULA_METHOD_ID = S.FORMULA_METHOD_ID,
                    T.INBOUND_STATUS = 'U',
                    T.RECORD_LOCK_STATUS = 'false',
                    T.CREATED_BY = @USERS_SID,
                    T.MODIFIED_BY = @USERS_SID;;
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.process.verifyPrice">
		<query>
        <![CDATA[
            DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?
            SELECT
                    count( IMTD_ITEM_PRICE_REBATE_SID )
            from
                    IMTD_ITEM_PRICE_REBATE_DETAILS
            where
                    SESSION_ID = @SESSION_ID
                    AND CHECK_RECORD = 1
                    AND USERS_SID = @USERS_SID
                    AND \"OPERATION\" <> 'D'
                    AND(
                            PRICE IS NULL
                            OR PRICE = 0
                    )
                    AND PRICE_TYPE IN(
                            select
                                    ITEM_PRICING_QUALIFIER_SID
                            from
                                    ITEM_PRICING_QUALIFIER
                            where
                                    ITEM_PRICING_QUALIFIER_NAME like 'contract%'
                    );
        ]]>
		</query>
	</entity>
	<entity id="com.contractDashboard.rebuild.updateContract">
		<query>
        <![CDATA[
            DECLARE @CONTRACT_MASTER_ID INT = ?
            UPDATE CFP_CONTRACT set INBOUND_STATUS='D' WHERE CONTRACT_MASTER_SID=@CONTRACT_MASTER_ID;
            UPDATE IFP_CONTRACT set INBOUND_STATUS='D' WHERE CONTRACT_MASTER_SID=@CONTRACT_MASTER_ID;
            UPDATE PS_CONTRACT set INBOUND_STATUS='D' WHERE CONTRACT_MASTER_SID=@CONTRACT_MASTER_ID;
            UPDATE RS_CONTRACT set INBOUND_STATUS='D' WHERE CONTRACT_MASTER_SID=@CONTRACT_MASTER_ID;
            UPDATE CFP_CONTRACT_DETAILS set INBOUND_STATUS='D' WHERE CFP_CONTRACT_SID in (SELECT CFP_CONTRACT_SID FROM CFP_CONTRACT WHERE CONTRACT_MASTER_SID=@CONTRACT_MASTER_ID);
            UPDATE IFP_CONTRACT_DETAILS set INBOUND_STATUS='D' WHERE IFP_CONTRACT_SID in (SELECT IFP_CONTRACT_SID FROM IFP_CONTRACT WHERE CONTRACT_MASTER_SID=@CONTRACT_MASTER_ID);
            UPDATE PS_CONTRACT_DETAILS set INBOUND_STATUS='D' WHERE PS_CONTRACT_SID in (SELECT PS_CONTRACT_SID FROM PS_CONTRACT WHERE CONTRACT_MASTER_SID=@CONTRACT_MASTER_ID);
            UPDATE RS_CONTRACT_DETAILS set INBOUND_STATUS='D' WHERE RS_CONTRACT_SID in (SELECT RS_CONTRACT_SID FROM RS_CONTRACT WHERE CONTRACT_MASTER_SID=@CONTRACT_MASTER_ID);
            UPDATE dbo.RS_CONTRACT_DETAILS_FR set INBOUND_STATUS='D' WHERE RS_CONTRACT_DETAILS_SID in (SELECT RS_CONTRACT_DETAILS_SID FROM RS_CONTRACT_DETAILS WHERE RS_CONTRACT_SID in (SELECT RS_CONTRACT_SID FROM RS_CONTRACT WHERE CONTRACT_MASTER_SID=@CONTRACT_MASTER_ID));
        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.saveCFPPENDING">
		<query>
        <![CDATA[
         DECLARE 
            @CFP_CONTRACT_ID INT=?
         MERGE CFP_CONTRACT_DETAILS AS Target USING
        (SELECT  COMPANY_START_DATE, COMPANY_END_DATE, CFP_CONTRACT_ATTACHED_STATUS, CFP_CONTRACT_ATTACHED_DATE, CFP_CONTRACT_SID,
         CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY ,COMPANY_MASTER_SID

        FROM dbo.CFP_CONTRACT_DETAILS_PENDING  
 ) AS Source
         ON (Target.CFP_CONTRACT_SID = @CFP_CONTRACT_ID
     AND TARGET.COMPANY_MASTER_SID = SOURCE.COMPANY_MASTER_SID
 )
         WHEN MATCHED THEN
       UPDATE SET
         Target.CFP_CONTRACT_ATTACHED_STATUS = Source.CFP_CONTRACT_ATTACHED_STATUS,
         Target.COMPANY_START_DATE = Source.COMPANY_START_DATE,
        Target.COMPANY_END_DATE = Source.COMPANY_END_DATE,
        Target.CREATED_DATE = Source.CREATED_DATE,
        Target.CREATED_BY = Source.CREATED_BY,
         Target.MODIFIED_DATE = Source.MODIFIED_DATE,
         Target.MODIFIED_BY = Source.MODIFIED_BY,
         Target.INBOUND_STATUS = 'U'
 WHEN NOT MATCHED THEN
   INSERT (
 COMPANY_MASTER_SID, CFP_CONTRACT_SID,COMPANY_START_DATE, COMPANY_END_DATE, INBOUND_STATUS, CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY,CFP_CONTRACT_ATTACHED_STATUS)
  VALUES( SOURCE.COMPANY_MASTER_SID,@CFP_CONTRACT_ID , SOURCE.COMPANY_START_DATE, SOURCE.COMPANY_END_DATE, 'A' , SOURCE.CREATED_DATE, SOURCE.CREATED_BY, SOURCE.MODIFIED_DATE, SOURCE.MODIFIED_BY ,SOURCE.CFP_CONTRACT_ATTACHED_STATUS);;
  
 ]]>
		</query>
	</entity>

	<entity id="getCompaniesDetailsPendingCount">
		<query>
                <![CDATA[
              With CDT as(
                SELECT
				IMTD.CHECK_RECORD,
                recordType='',
                IMTD.COMPANY_ID,
                IMTD.COMPANY_NO,
                IMTD.COMPANY_NAME,
                IMTD.CFP_DETAILS_ATTACHED_STATUS,
                IMTD.CFP_DETAILS_START_DATE,
                IMTD.CFP_DETAILS_END_DATE,
                hstatus.DESCRIPTION as cstatus,
                htype.DESCRIPTION as ctype,
				htrade.DESCRIPTION as COMPANY_TRADE_CLASS,
                hcategory.DESCRIPTION as ccategory,
                tradeContact='',
                IMTD.CFP_DETAILS_ATTACHED_DATE,
                IMTD.MODIFIED_DATE,
                usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as MODIFIED_BY,
                IMTD.CREATED_DATE,
                usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY,
                IMTD.COMPANY_MASTER_SID,
                IMTD.IMTD_CFP_DETAILS_SID,
                IMTD.COMPANY_STATUS,
                IMTD.COMPANY_TYPE,
                IMTD.TRADING_PARTNER_CONTRACT_NO,
                cm.COMPANY_CATEGORY
             FROM CFP_CONTRACT_DETAILS_PENDING IMTD
                    JOIN COMPANY_MASTER cm on cm.COMPANY_MASTER_SID=IMTD.COMPANY_MASTER_SID AND cm.INBOUND_STATUS <> 'D'
                    LEFT JOIN HELPER_TABLE htrade on htrade.HELPER_TABLE_SID=IMTD.TRADING_PARTNER_CONTRACT_NO  AND htrade.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hcategory on hcategory.HELPER_TABLE_SID=cm.COMPANY_CATEGORY AND hcategory.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hstatus on hstatus.HELPER_TABLE_SID=IMTD.COMPANY_STATUS AND hstatus.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE htype on htype.HELPER_TABLE_SID=IMTD.COMPANY_TYPE AND htype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN ?.dbo.User_ usr ON usr.UserId = IMTD.MODIFIED_BY
                    JOIN ?.dbo.User_ usr1 ON usr1.UserId = IMTD.CREATED_BY
                    WHERE
                     IMTD.USERS_SID = '?' AND IMTD.SESSION_ID = '?' AND IMTD.OPERATION NOT IN ('D','F')
              )
            SELECT
		COUNT(1)
             FROM CDT  WHERE COMPANY_ID is not null
                     ?
        ]]>
		</query>
	</entity>

	<entity id="getCompaniesDetailsPendingResults">
		<query>
                <![CDATA[
           WITH CDT
AS (SELECT
  imcfp.CHECK_RECORD,
  recordType = '?',
  imcfp.COMPANY_ID,
  imcfp.COMPANY_NO,
  imcfp.COMPANY_NAME,
  imcfp.CFP_DETAILS_ATTACHED_STATUS,
  imcfp.CFP_DETAILS_START_DATE,
  imcfp.CFP_DETAILS_END_DATE,
  hstatus.DESCRIPTION AS cstatus,
  htype.DESCRIPTION AS ctype,
  htrade.DESCRIPTION AS COMPANY_TRADE_CLASS,
  hcategory.DESCRIPTION AS ccategory,
  tradeContact = '',
  imcfp.CFP_DETAILS_ATTACHED_DATE,
  imcfp.MODIFIED_DATE,
  usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName AS MODIFIED_BY,
  imcfp.CREATED_DATE,
  usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName AS CREATED_BY


FROM dbo.CFP_CONTRACT_DETAILS_PENDING cd
JOIN COMPANY_MASTER cm
  ON cm.COMPANY_MASTER_SID = cd.COMPANY_MASTER_SID
JOIN dbo.IMTD_CFP_DETAILS imcfp
  ON imcfp.COMPANY_MASTER_SID = cd.COMPANY_MASTER_SID
LEFT JOIN HELPER_TABLE hstatus
  ON hstatus.HELPER_TABLE_SID = imcfp.COMPANY_STATUS
  AND hstatus.DESCRIPTION NOT LIKE '%Select One%'
LEFT JOIN HELPER_TABLE htype
  ON htype.HELPER_TABLE_SID = imcfp.COMPANY_TYPE
  AND htype.DESCRIPTION NOT LIKE '%Select One%'
LEFT JOIN HELPER_TABLE htrade
  ON htrade.HELPER_TABLE_SID = imcfp.TRADING_PARTNER_CONTRACT_NO
  AND htrade.DESCRIPTION NOT LIKE '%Select One%'
LEFT JOIN HELPER_TABLE hcategory
  ON hcategory.HELPER_TABLE_SID = cm.COMPANY_CATEGORY
  AND hcategory.DESCRIPTION NOT LIKE '%Select One%'
 LEFT JOIN ?.dbo.User_ usr ON usr.UserId = imcfp.MODIFIED_BY
                    JOIN ?.dbo.User_ usr1 ON usr1.UserId = imcfp.CREATED_BY
WHERE
                     imcfp.USERS_SID = '?' AND imcfp.SESSION_ID = '?' AND imcfp.OPERATION NOT IN ('D','F')
              )
            SELECT
		*
             FROM CDT  WHERE COMPANY_ID is not null
                     ?
                     ORDER BY ?
                    OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.saveCFPPENDINGQuery">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
            @SESSION_ID VARCHAR(15)=?,
            @CFP_CONTRACT_ID INT=?,
            @CREATED_BY INT=?,
            @MODIFIED_BY INT=?
        INSERT INTO CFP_CONTRACT_DETAILS_PENDING (
       CFP_CONTRACT_SID
       ,COMPANY_MASTER_SID
       ,COMPANY_START_DATE
       ,COMPANY_END_DATE
       ,TRADE_CLASS
       ,TRADE_CLASS_START_DATE
       ,TRADE_CLASS_END_DATE
       ,CFP_CONTRACT_ATTACHED_STATUS
       ,CFP_CONTRACT_ATTACHED_DATE
       ,INBOUND_STATUS
       ,RECORD_LOCK_STATUS
       ,BATCH_ID
       ,SOURCE
       ,CREATED_BY
       ,MODIFIED_BY
       )
SELECT DISTINCT @CFP_CONTRACT_ID
       ,IMTD.COMPANY_MASTER_SID
       ,CASE
              WHEN IMTD.CFP_DETAILS_START_DATE = CC1.COMPANY_START_DATE
                     THEN CC1.COMPANY_START_DATE
              ELSE IMTD.CFP_DETAILS_START_DATE
              END
       ,CASE
              WHEN IMTD.CFP_DETAILS_END_DATE = CC1.COMPANY_END_DATE
                     THEN CC1.COMPANY_END_DATE
              ELSE IMTD.CFP_DETAILS_END_DATE
              END
       ,IMTD.CFP_DETAILS_TRADE_CLASS
       ,IMTD.CFP_DETAILS_TC_START_DATE
       ,IMTD.CFP_DETAILS_TC_END_DATE
       ,CASE
              WHEN IMTD.CFP_DETAILS_ATTACHED_STATUS = CC1.CFP_CONTRACT_ATTACHED_STATUS
                     THEN CC1.CFP_CONTRACT_ATTACHED_STATUS
              ELSE IMTD.CFP_DETAILS_ATTACHED_STATUS
              END
       ,IMTD.CFP_DETAILS_ATTACHED_DATE
       ,COALESCE(IMTD.OPERATION,CC1.INBOUND_STATUS, 'A') INBOUND_STATUS
       ,COALESCE(CC1.RECORD_LOCK_STATUS, '0')
       ,CC1.BATCH_ID
       ,CC1.SOURCE
       ,@CREATED_BY
       ,@MODIFIED_BY
FROM IMTD_CFP_DETAILS IMTD
JOIN COMPANY_MASTER CM ON CM.COMPANY_MASTER_SID = IMTD.COMPANY_MASTER_SID
       AND CM.INBOUND_STATUS <> 'D'
       AND IMTD.USERS_SID = @USERS_SID
       AND SESSION_ID = @SESSION_ID
 JOIN CFP_CONTRACT_DETAILS CC1 ON CC1.CFP_CONTRACT_SID = @CFP_CONTRACT_ID
       AND CC1.COMPANY_MASTER_SID = CM.COMPANY_MASTER_SID
       AND CC1.INBOUND_STATUS <> 'D'
       AND (
                COALESCE(IMTD.CFP_DETAILS_START_DATE,1) <> COALESCE(CC1.COMPANY_START_DATE,1)
                OR COALESCE(IMTD.CFP_DETAILS_END_DATE,1) <> COALESCE(CC1.COMPANY_END_DATE,1)
                OR COALESCE(IMTD.CFP_DETAILS_ATTACHED_STATUS,1) <> COALESCE(CC1.CFP_CONTRACT_ATTACHED_STATUS,1)
                OR COALESCE(IMTD.OPERATION,'1')<>COALESCE(CC1.INBOUND_STATUS,'1')
                )
                
                UNION 


SELECT DISTINCT @CFP_CONTRACT_ID
       ,IMTD.COMPANY_MASTER_SID
       ,IMTD.CFP_DETAILS_START_DATE
       ,IMTD.CFP_DETAILS_END_DATE
       ,IMTD.CFP_DETAILS_TRADE_CLASS
       ,IMTD.CFP_DETAILS_TC_START_DATE
       ,IMTD.CFP_DETAILS_TC_END_DATE
       ,IMTD.CFP_DETAILS_ATTACHED_STATUS
       ,IMTD.CFP_DETAILS_ATTACHED_DATE
       ,COALESCE(IMTD.OPERATION,'A')
       ,RECORD_LOCK_STATUS
       ,BATCH_ID
       ,SOURCE
       ,@CREATED_BY
       ,@MODIFIED_BY
FROM IMTD_CFP_DETAILS IMTD    
JOIN CFP_CONTRACT CC   ON CC.CFP_CONTRACT_SID = @CFP_CONTRACT_ID
 AND IMTD.USERS_SID = @USERS_SID
       AND SESSION_ID = @SESSION_ID
   AND IMTD.COMPANY_MASTER_SID  NOT IN  (SELECT CC1.COMPANY_MASTER_SID FROM 
CFP_CONTRACT_DETAILS CC1 WHERE CC1.CFP_CONTRACT_SID = CC.CFP_CONTRACT_SID
       AND CC1.COMPANY_MASTER_SID = IMTD.COMPANY_MASTER_SID)
                

 ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.saveCFPApprove">
		<query>
        <![CDATA[
        DECLARE @CFP_CONTRACT_ID INT=?
        MERGE CFP_CONTRACT_DETAILS AS TARGET
USING (
       SELECT COMPANY_MASTER_SID
              ,COMPANY_START_DATE
              ,COMPANY_END_DATE
              ,TRADE_CLASS
              ,TRADE_CLASS_START_DATE
              ,TRADE_CLASS_END_DATE
              ,CFP_CONTRACT_ATTACHED_STATUS
              ,CFP_CONTRACT_ATTACHED_DATE
              ,RECORD_LOCK_STATUS
              ,BATCH_ID
              ,SOURCE
              ,CREATED_BY
              ,CREATED_DATE
              ,MODIFIED_BY
              ,MODIFIED_DATE
              ,INBOUND_STATUS
       FROM CFP_CONTRACT_DETAILS_PENDING
       WHERE CFP_CONTRACT_SID = @CFP_CONTRACT_ID
       ) AS SOURCE
       ON (
                     TARGET.CFP_CONTRACT_SID = @CFP_CONTRACT_ID
                     AND TARGET.COMPANY_MASTER_SID = SOURCE.COMPANY_MASTER_SID
                    
                     )
WHEN MATCHED
       THEN
              UPDATE
              SET TARGET.CFP_CONTRACT_ATTACHED_STATUS = SOURCE.CFP_CONTRACT_ATTACHED_STATUS
                     ,TARGET.COMPANY_START_DATE = SOURCE.COMPANY_START_DATE
                     ,TARGET.COMPANY_END_DATE = SOURCE.COMPANY_END_DATE
                     ,TARGET.CREATED_DATE = SOURCE.CREATED_DATE
                     ,TARGET.CREATED_BY = SOURCE.CREATED_BY
                     ,TARGET.MODIFIED_DATE = SOURCE.MODIFIED_DATE
                     ,TARGET.MODIFIED_BY = SOURCE.MODIFIED_BY
                     ,TARGET.INBOUND_STATUS = SOURCE.INBOUND_STATUS
WHEN NOT MATCHED
       THEN
              INSERT (
                     COMPANY_MASTER_SID
                     ,CFP_CONTRACT_SID
                     ,COMPANY_START_DATE
                     ,COMPANY_END_DATE
                     ,INBOUND_STATUS
                     ,CREATED_DATE
                     ,CREATED_BY
                     ,MODIFIED_DATE
                     ,MODIFIED_BY
                     ,CFP_CONTRACT_ATTACHED_STATUS
                     )
              VALUES (
                     SOURCE.COMPANY_MASTER_SID
                     ,@CFP_CONTRACT_ID
                     ,SOURCE.COMPANY_START_DATE
                     ,SOURCE.COMPANY_END_DATE
                     ,'A'
                     ,SOURCE.CREATED_DATE
                     ,SOURCE.CREATED_BY
                     ,SOURCE.MODIFIED_DATE
                     ,SOURCE.MODIFIED_BY
                     ,SOURCE.CFP_CONTRACT_ATTACHED_STATUS
                     );;
 ]]>
		</query>
	</entity>


	<entity id="getCompaniessDetailsPendingCount">
		<query>
                <![CDATA[
           DECLARE @CFP_CONTRACT_ID INT = ?       
;WITH CDT
AS (
       SELECT IMTD.CHECK_RECORD
              ,recordType = '?'
              ,cm.COMPANY_ID
              ,cm.COMPANY_NO
              ,cm.COMPANY_NAME
              ,IMTD.CFP_CONTRACT_ATTACHED_STATUS
              ,IMTD.COMPANY_START_DATE
              ,IMTD.COMPANY_END_DATE
              ,HSTATUS.DESCRIPTION AS CSTATUS
              ,HTYPE.DESCRIPTION AS CTYPE
              ,HTRADE.DESCRIPTION AS COMPANY_TRADE_CLASS
              ,HCATEGORY.DESCRIPTION AS CCATEGORY
              ,TRADECONTACT = ''
              ,IMTD.CFP_CONTRACT_ATTACHED_DATE
              ,IMTD.MODIFIED_DATE
              ,USR.FIRSTNAME + ' ' + USR.MIDDLENAME + ' ' + USR.LASTNAME AS MODIFIED_BY
              ,IMTD.CREATED_DATE
              ,USR1.FIRSTNAME + ' ' + USR1.MIDDLENAME + ' ' + USR1.LASTNAME AS CREATED_BY
              ,hattachedstatus.DESCRIPTION AS CFP_PENDINGSTATUS

       FROM CFP_CONTRACT_DETAILS_PENDING IMTD
       JOIN COMPANY_MASTER CM ON CM.COMPANY_MASTER_SID = IMTD.COMPANY_MASTER_SID
              AND CM.INBOUND_STATUS <> 'D'
       LEFT JOIN HELPER_TABLE HTRADE ON HTRADE.HELPER_TABLE_SID = IMTD.TRADE_CLASS
              AND HTRADE.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE HCATEGORY ON HCATEGORY.HELPER_TABLE_SID = CM.COMPANY_CATEGORY
              AND HCATEGORY.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE HSTATUS ON HSTATUS.HELPER_TABLE_SID = cm.COMPANY_STATUS
              AND HSTATUS.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE HTYPE ON HTYPE.HELPER_TABLE_SID = cm.COMPANY_TYPE
              AND HTYPE.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE hattachedstatus on hattachedstatus.HELPER_TABLE_SID=IMTD.CFP_CONTRACT_ATTACHED_STATUS AND hattachedstatus.DESCRIPTION  NOT like '%Select One%'
       LEFT JOIN ?.DBO.USER_ USR ON USR.USERID = IMTD.MODIFIED_BY
       LEFT JOIN ?.DBO.USER_ USR1 ON USR1.USERID = IMTD.CREATED_BY
       WHERE IMTD.CFP_CONTRACT_SID=@CFP_CONTRACT_ID
       )
            SELECT
		COUNT(1)
             FROM CDT  WHERE COMPANY_ID is not null
                     
        ]]>
		</query>
	</entity>

	<entity id="getCompaniessDetailsPendingResults">
		<query>
                <![CDATA[
           DECLARE @CFP_CONTRACT_ID INT = ?       
;WITH CDT
AS (
       SELECT IMTD.CHECK_RECORD
              ,recordType = '?'
              ,cm.COMPANY_ID
              ,cm.COMPANY_NO
              ,cm.COMPANY_NAME
              ,IMTD.CFP_CONTRACT_ATTACHED_STATUS
              ,IMTD.COMPANY_START_DATE
              ,IMTD.COMPANY_END_DATE
              ,HSTATUS.DESCRIPTION AS CSTATUS
              ,HTYPE.DESCRIPTION AS CTYPE
              ,HTRADE.DESCRIPTION AS COMPANY_TRADE_CLASS
              ,HCATEGORY.DESCRIPTION AS CCATEGORY
              ,TRADECONTACT = ''
              ,IMTD.CFP_CONTRACT_ATTACHED_DATE
              ,IMTD.MODIFIED_DATE
              ,USR.FIRSTNAME + ' ' + USR.MIDDLENAME + ' ' + USR.LASTNAME AS MODIFIED_BY
              ,IMTD.CREATED_DATE
              ,USR1.FIRSTNAME + ' ' + USR1.MIDDLENAME + ' ' + USR1.LASTNAME AS CREATED_BY
              ,hattachedstatus.DESCRIPTION AS CFP_PENDINGSTATUS

       FROM CFP_CONTRACT_DETAILS_PENDING IMTD
       JOIN COMPANY_MASTER CM ON CM.COMPANY_MASTER_SID = IMTD.COMPANY_MASTER_SID
              AND CM.INBOUND_STATUS <> 'D'
       LEFT JOIN HELPER_TABLE HTRADE ON HTRADE.HELPER_TABLE_SID = IMTD.TRADE_CLASS
              AND HTRADE.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE HCATEGORY ON HCATEGORY.HELPER_TABLE_SID = CM.COMPANY_CATEGORY
              AND HCATEGORY.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE HSTATUS ON HSTATUS.HELPER_TABLE_SID = cm.COMPANY_STATUS
              AND HSTATUS.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE HTYPE ON HTYPE.HELPER_TABLE_SID = cm.COMPANY_TYPE
              AND HTYPE.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE hattachedstatus on hattachedstatus.HELPER_TABLE_SID=IMTD.CFP_CONTRACT_ATTACHED_STATUS AND hattachedstatus.DESCRIPTION  NOT like '%Select One%'              
       LEFT JOIN ?.DBO.USER_ USR ON USR.USERID = IMTD.MODIFIED_BY
       LEFT JOIN ?.DBO.USER_ USR1 ON USR1.USERID = IMTD.CREATED_BY
       WHERE IMTD.CFP_CONTRACT_SID=@CFP_CONTRACT_ID
       )
SELECT
		*
             FROM CDT  WHERE COMPANY_ID is not null
                     ?
                     ORDER BY ?
                    OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.saveIFPPendingQuery">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15)=?,
             @SESSION_ID VARCHAR(15)=?,
             @IFP_CONTRACT_ID INT=?,
             @CREATED_BY INT=?,
             @MODIFIED_BY INT=?
         INSERT INTO IMTD_IFP_DETAILS_PENDING (
         IFP_CONTRACT_SID,
         ITEM_MASTER_SID,
         IFP_DETAILS_ATTACHED_STATUS,
         ITEM_START_DATE,
         ITEM_END_DATE,
         IFP_DETAILS_ATTACHED_DATE,
         CREATED_BY,
         MODIFIED_BY      
        )
        
 SELECT DISTINCT @IFP_CONTRACT_ID
       ,IMTD.ITEM_MASTER_SID
            
        ,CASE
               WHEN IMTD.ATTACHED_STATUS = CC1.IFP_CONTRACT_ATTACHED_STATUS
                      THEN CC1.IFP_CONTRACT_ATTACHED_STATUS
               ELSE IMTD.ATTACHED_STATUS
               END         
        ,CASE
               WHEN IMTD.START_DATE = CC1.ITEM_START_DATE
                      THEN CC1.ITEM_START_DATE
               ELSE IMTD.START_DATE
               END
        ,CASE
               WHEN IMTD.END_DATE = CC1.ITEM_END_DATE
                      THEN CC1.ITEM_END_DATE
               ELSE IMTD.END_DATE
               END            
        ,GETDATE()
        ,@CREATED_BY
        ,@MODIFIED_BY
 FROM IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
 JOIN ITEM_MASTER CM ON CM.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
        AND CM.INBOUND_STATUS <> 'D'
        AND IMTD.USERS_SID =  @USERS_SID
        AND SESSION_ID =@SESSION_ID
  JOIN IFP_CONTRACT_DETAILS CC1 ON CC1.IFP_CONTRACT_SID = @IFP_CONTRACT_ID
        AND CC1.ITEM_MASTER_SID = CM.ITEM_MASTER_SID
        AND CC1.INBOUND_STATUS <> 'D'
        AND ( 
		COALESCE(IMTD.ATTACHED_STATUS,1) <> COALESCE(CC1.IFP_CONTRACT_ATTACHED_STATUS,1) 
		OR COALESCE(IMTD.START_DATE,1) <> COALESCE(CC1.ITEM_START_DATE,1)
		OR COALESCE(IMTD.END_DATE,1) <> COALESCE(CC1.ITEM_END_DATE,1)
	
		)
		
		UNION
		
       SELECT DISTINCT @IFP_CONTRACT_ID
       ,IMTD.ITEM_MASTER_SID
       ,IMTD.ATTACHED_STATUS         
       ,IMTD.START_DATE      
       ,IMTD.END_DATE
       ,GETDATE()
       ,@CREATED_BY
       ,@MODIFIED_BY
 	   FROM IMTD_ITEM_PRICE_REBATE_DETAILS IMTD    
	   JOIN IFP_CONTRACT CC   ON CC.IFP_CONTRACT_SID = @IFP_CONTRACT_ID
 	   AND IMTD.USERS_SID = @USERS_SID
       AND SESSION_ID = @SESSION_ID
       AND IMTD.ITEM_MASTER_SID  NOT IN  (SELECT CC1.ITEM_MASTER_SID FROM 
       IFP_CONTRACT_DETAILS CC1 WHERE CC1.IFP_CONTRACT_SID = CC.IFP_CONTRACT_SID
       AND CC1.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID)
		
        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.saveIFPApprove">
		<query>
        <![CDATA[
        DECLARE @IFP_CONTRACT_ID INT=?
         MERGE IFP_CONTRACT_DETAILS AS Target USING
         (SELECT IFP_DETAILS_ATTACHED_STATUS,ITEM_STATUS, ITEM_START_DATE, ITEM_END_DATE, IFP_DETAILS_ATTACHED_DATE, IFP_DETAILS_SID, CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY,ITEM_MASTER_SID
         FROM dbo.IMTD_IFP_DETAILS_PENDING  
         
         WHERE IFP_CONTRACT_SID = @IFP_CONTRACT_ID
         
       ) AS SOURCE
         ON (Target.IFP_CONTRACT_SID = @IFP_CONTRACT_ID
     AND TARGET.ITEM_MASTER_SID = SOURCE.ITEM_MASTER_SID
    
 )
         WHEN MATCHED THEN
         UPDATE SET
         Target.ITEM_STATUS = Source.ITEM_STATUS,
         Target.ITEM_START_DATE = Source.ITEM_START_DATE,
         Target.ITEM_END_DATE = Source.ITEM_END_DATE,
         Target.CREATED_DATE = Source.CREATED_DATE,
         Target.IFP_CONTRACT_ATTACHED_STATUS = Source.IFP_DETAILS_ATTACHED_STATUS,
         Target.IFP_CONTRACT_ATTACHED_DATE = Source.IFP_DETAILS_ATTACHED_DATE,
         Target.CREATED_BY = Source.CREATED_BY,
         Target.MODIFIED_DATE = Source.MODIFIED_DATE,
         Target.MODIFIED_BY = Source.MODIFIED_BY,
         Target.INBOUND_STATUS = 'U'
  WHEN NOT MATCHED THEN
         INSERT (IFP_CONTRACT_SID, ITEM_MASTER_SID, ITEM_STATUS,
         ITEM_START_DATE, ITEM_END_DATE,INBOUND_STATUS, CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY, IFP_CONTRACT_ATTACHED_STATUS,IFP_CONTRACT_ATTACHED_DATE)
         Values( @IFP_CONTRACT_ID , SOURCE.ITEM_MASTER_SID, SOURCE.ITEM_STATUS,
         SOURCE.ITEM_START_DATE, SOURCE.ITEM_END_DATE, 'A'  , SOURCE.CREATED_DATE, SOURCE.CREATED_BY, SOURCE.MODIFIED_DATE, SOURCE.MODIFIED_BY,Source.IFP_DETAILS_ATTACHED_STATUS,GETDATE());;            
 ]]>
		</query>
	</entity>

	<entity id="getItemsDetailsPendingCount">
		<query>
                <![CDATA[
                DECLARE @IFP_CONTRACT_ID INT = ?
            SELECT
		COUNT(IMTD.IMTD_IFP_DETAILS_PENDING_SID)
             from
                        IMTD_IFP_DETAILS_PENDING IMTD
                LEFT JOIN ITEM_MASTER im on
                        im.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                        AND im.INBOUND_STATUS <> 'D'
                LEFT JOIN HELPER_TABLE hform on
                        hform.HELPER_TABLE_SID = im.FORM
                LEFT JOIN HELPER_TABLE hstrength on
                        hstrength.HELPER_TABLE_SID = im.STRENGTH
                LEFT JOIN HELPER_TABLE htherapeutic on
                        htherapeutic.HELPER_TABLE_SID = im.THERAPEUTIC_CLASS
                LEFT JOIN HELPER_TABLE hstatus on
                        hstatus.HELPER_TABLE_SID = im.ITEM_STATUS
                LEFT JOIN HELPER_TABLE hpackageSize on
                        hpackageSize.HELPER_TABLE_SID = im.PACKAGE_SIZE Left Join BRAND_MASTER BM ON
                        im.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                LEFT JOIN HELPER_TABLE hitemsStatus on
	                    hitemsStatus.HELPER_TABLE_SID = IMTD.ITEM_STATUS        
                LEFT JOIN ? . dbo.User_ usr ON
                        usr.UserId = IMTD.MODIFIED_BY
                LEFT JOIN ? . dbo.User_ usr1 ON
                        usr1.UserId = IMTD.CREATED_BY
                WHERE IMTD.IFP_CONTRACT_SID=@IFP_CONTRACT_ID
        ]]>
		</query>
	</entity>

	<entity id="getItemsDetailsPendingResults">
		<query>
                <![CDATA[
                DECLARE @IFP_CONTRACT_ID INT = ?
                          SELECT
                         IMTD.CHECK_BOX,
                         recordType = '?',
                         im.ITEM_NO,
                         im.ITEM_NAME,
                         im.ITEM_DESC,
                         IMTD.ITEM_STATUS,
                         IMTD.ITEM_START_DATE,
                         IMTD.ITEM_END_DATE,
                         status = CASE
                                 WHEN hstatus.DESCRIPTION like '%Select One%' THEN ''
                                 ELSE hstatus.DESCRIPTION
                         END,
                         form = CASE
                                 WHEN hform.DESCRIPTION like '%Select One%' THEN ''
                                 ELSE hform.DESCRIPTION
                         END,
                         strength=CASE
                                         WHEN hstrength.DESCRIPTION like '%Select One%' THEN ''
                                     ELSE hstrength.DESCRIPTION
                                     END,
                         therapeutic=CASE
                                         WHEN htherapeutic.DESCRIPTION like '%Select One%' THEN ''
                                     ELSE htherapeutic.DESCRIPTION
                                     END,
                         BM.BRAND_NAME AS BRAND,
                         IMTD.IFP_DETAILS_ATTACHED_DATE,
                         IMTD.MODIFIED_DATE,
                         usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as MODIFIED_BY,
                         IMTD.CREATED_DATE,
                         usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY
                         ,hitemsStatus.DESCRIPTION as ITEM_PENDINGSTATUS
                 from
                         IMTD_IFP_DETAILS_PENDING IMTD
                 LEFT JOIN ITEM_MASTER im on
                         im.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                         AND im.INBOUND_STATUS <> 'D'
                 LEFT JOIN HELPER_TABLE hform on
                         hform.HELPER_TABLE_SID = im.FORM
                 LEFT JOIN HELPER_TABLE hstrength on
                         hstrength.HELPER_TABLE_SID = im.STRENGTH
                 LEFT JOIN HELPER_TABLE htherapeutic on
                         htherapeutic.HELPER_TABLE_SID = im.THERAPEUTIC_CLASS
                 LEFT JOIN HELPER_TABLE hstatus on
                         hstatus.HELPER_TABLE_SID = im.ITEM_STATUS
                 LEFT JOIN HELPER_TABLE hpackageSize on
                         hpackageSize.HELPER_TABLE_SID = im.PACKAGE_SIZE Left Join BRAND_MASTER BM ON
                         im.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                 LEFT JOIN HELPER_TABLE hitemsStatus on
	                     hitemsStatus.HELPER_TABLE_SID = IMTD.ITEM_STATUS    
                 LEFT JOIN ? . dbo.User_ usr ON
                         usr.UserId = IMTD.MODIFIED_BY
                 LEFT JOIN ? . dbo.User_ usr1 ON
                         usr1.UserId = IMTD.CREATED_BY
                 WHERE IMTD.IFP_CONTRACT_SID=@IFP_CONTRACT_ID ?
                 
                 ORDER BY
                         ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.saveCFPDeleteQuery">
		<query>
                <![CDATA[
               DECLARE @CFP_CONTRACT_ID INT = ?
               DELETE FROM CFP_CONTRACT_DETAILS_PENDING WHERE CFP_CONTRACT_SID = @CFP_CONTRACT_ID
        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.saveIFPDeleteQuery">
		<query>
                <![CDATA[
               DECLARE @IFP_CONTRACT_ID INT = ?
               DELETE FROM IMTD_IFP_DETAILS_PENDING WHERE IFP_CONTRACT_SID = @IFP_CONTRACT_ID;
        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.saveRSPendingQuery">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15) =?
       ,@SESSION_ID VARCHAR(15) =?
       ,@RS_CONTRACT_ID INT =?
       ,@CREATED_BY INT =?
       ,@MODIFIED_BY INT =?
 
INSERT INTO dbo.RS_CONTRACT_DETAILS_PENDING (
       RS_CONTRACT_SID
       ,ITEM_MASTER_SID
       ,ITEM_REBATE_START_DATE
       ,ITEM_REBATE_END_DATE
       ,FORMULA_ID
       ,REBATE_PLAN_MASTER_SID
       ,RS_CONTRACT_ATTACHED_STATUS
       ,RS_CONTRACT_ATTACHED_DATE
       ,REBATE_AMOUNT
       ,BUNDLE_NO
       ,FORMULA_METHOD_ID
       ,INBOUND_STATUS
       ,RECORD_LOCK_STATUS
       ,BATCH_ID
       ,SOURCE
       ,DEDUCTION_CALENDAR_MASTER_SID
       ,NET_SALES_FORMULA_MASTER_SID
       ,FORMULA_TYPE
       ,NET_SALES_RULE
       ,EVALUATION_RULE
       ,EVALUATION_RULE_BUNDLE
       ,CALCULATION_RULE
       ,CALCULATION_RULE_BUNDLE
       ,CREATED_BY
       ,MODIFIED_BY
       )
SELECT DISTINCT RC.RS_CONTRACT_SID
       ,COALESCE(CC1.ITEM_MASTER_SID,IMTD.ITEM_MASTER_SID)
       ,CASE
              WHEN IMTD.ITEM_REBATE_START_DATE = CC1.ITEM_REBATE_START_DATE
                     THEN CC1.ITEM_REBATE_START_DATE
              ELSE IMTD.ITEM_REBATE_START_DATE
              END
       ,CASE
              WHEN IMTD.ITEM_REBATE_END_DATE = CC1.ITEM_REBATE_END_DATE
                     THEN CC1.ITEM_REBATE_END_DATE
              ELSE IMTD.ITEM_REBATE_END_DATE
              END
       ,COALESCE(CC1.FORMULA_ID,IMTD.FORMULA_ID)
       ,COALESCE(CC1.REBATE_PLAN_MASTER_SID,IMTD.REBATE_PLAN_SYSTEM_ID)
       ,CASE
              WHEN IMTD.ATTACHED_STATUS = CC1.RS_CONTRACT_ATTACHED_STATUS
                     THEN CC1.RS_CONTRACT_ATTACHED_STATUS
              ELSE IMTD.ATTACHED_STATUS
              END 
       ,COALESCE(CC1.RS_CONTRACT_ATTACHED_DATE,IMTD.ATTACHED_DATE)
       ,COALESCE(CC1.REBATE_AMOUNT,IMTD.REBATE_AMOUNT)
       ,COALESCE(CC1.BUNDLE_NO,IMTD.BUNDLE_NO)
       ,COALESCE(CC1.FORMULA_METHOD_ID,IMTD.FORMULA_METHOD_ID)
       ,COALESCE(CC1.INBOUND_STATUS,'A')
       ,COALESCE(CC1.RECORD_LOCK_STATUS,0)
       ,cc1.BATCH_ID
       ,cc1.SOURCE
       ,COALESCE(CC1.DEDUCTION_CALENDAR_MASTER_SID,IMTD.DEDUCTION_CALENDAR_MASTER_SID)
       ,COALESCE(CC1.NET_SALES_FORMULA_MASTER_SID,IMTD.NET_SALES_FORMULA_MASTER_SID)
       ,COALESCE(CC1.FORMULA_TYPE,IMTD.FORMULA_TYPE)
       ,COALESCE(CC1.NET_SALES_RULE,IMTD.NET_SALES_RULE)
       ,COALESCE(CC1.EVALUATION_RULE,IMTD.EVALUATION_RULE)
       ,COALESCE(CC1.EVALUATION_RULE_BUNDLE,IMTD.EVALUATION_RULE_BUNDLE)
       ,COALESCE(CC1.CALCULATION_RULE,IMTD.CALCULATION_RULE)
       ,COALESCE(CC1.CALCULATION_RULE_BUNDLE,IMTD.CALCULATION_RULE_BUNDLE)
       ,@CREATED_BY
       ,@MODIFIED_BY
FROM IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
JOIN RS_CONTRACT RC ON RC.RS_MODEL_SID = IMTD.RS_MODEL_SID
       AND RC.CONTRACT_MASTER_SID = IMTD.CONTRACT_MASTER_SID
       AND RC.INBOUND_STATUS <> 'D'
       AND IMTD.USERS_SID =@USERS_SID
       AND SESSION_ID =@SESSION_ID
 JOIN RS_CONTRACT_DETAILS CC1 ON RC.RS_CONTRACT_SID = CC1.RS_CONTRACT_SID
       AND CC1.RS_CONTRACT_SID =@RS_CONTRACT_ID
       AND CC1.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
       AND CC1.INBOUND_STATUS <> 'D'
       AND (
        CC1.REBATE_PLAN_MASTER_SID <> IMTD.REBATE_PLAN_SYSTEM_ID OR
		COALESCE(IMTD.ITEM_REBATE_START_DATE,1) <> COALESCE(CC1.ITEM_REBATE_START_DATE,1) 
		OR COALESCE(IMTD.ITEM_REBATE_END_DATE,1) <> COALESCE(CC1.ITEM_REBATE_END_DATE,1)
		OR COALESCE(IMTD.ATTACHED_STATUS,1) <> COALESCE(CC1.RS_CONTRACT_ATTACHED_STATUS,1)
		)
		
		UNION 
SELECT DISTINCT @RS_CONTRACT_ID
       ,IMTD.ITEM_MASTER_SID
       ,IMTD.ITEM_REBATE_START_DATE
       ,IMTD.ITEM_REBATE_END_DATE
       ,IMTD.FORMULA_ID
       ,IMTD.REBATE_PLAN_SYSTEM_ID
       ,IMTD.ATTACHED_STATUS
       ,IMTD.ATTACHED_DATE
       ,IMTD.REBATE_AMOUNT
       ,IMTD.BUNDLE_NO
       ,IMTD.FORMULA_METHOD_ID
       ,'A' AS INBOUND_STATUS
       ,0 AS RECORD_LOCK_STATUS
       ,NULL AS BATCH_ID
       ,SOURCE
       ,IMTD.DEDUCTION_CALENDAR_MASTER_SID
       ,IMTD.NET_SALES_FORMULA_MASTER_SID
       ,IMTD.FORMULA_TYPE
       ,IMTD.NET_SALES_RULE
       ,IMTD.EVALUATION_RULE
       ,IMTD.EVALUATION_RULE_BUNDLE
       ,IMTD.CALCULATION_RULE
       ,IMTD.CALCULATION_RULE_BUNDLE
       ,@CREATED_BY
       ,@MODIFIED_BY
FROM  IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
WHERE IMTD.USERS_SID = @USERS_SID
                        AND SESSION_ID = @SESSION_ID
                                         AND NOT EXISTS (SELECT 1 FROM  RS_CONTRACT RC
          JOIN RS_CONTRACT_DETAILS CC1 ON RC.RS_CONTRACT_SID = CC1.RS_CONTRACT_SID
                        AND CC1.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                                         AND   RC.RS_CONTRACT_SID =@RS_CONTRACT_ID 
                                         WHERE  RC.RS_MODEL_SID = IMTD.RS_MODEL_SID
       AND RC.CONTRACT_MASTER_SID = IMTD.CONTRACT_MASTER_SID
       AND RC.INBOUND_STATUS <> 'D'
         
                        )
		
        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.saveRSApprove">
		<query>
        <![CDATA[
        DECLARE @RS_CONTRACT_ID INT=?
         MERGE dbo.RS_CONTRACT_DETAILS AS Target USING

         (select * from dbo.RS_CONTRACT_DETAILS_PENDING  where RS_CONTRACT_SID  = @RS_CONTRACT_ID)  

  AS Source
         ON (TARGET.RS_CONTRACT_SID = SOURCE.RS_CONTRACT_SID
     AND TARGET.ITEM_MASTER_SID = SOURCE.ITEM_MASTER_SID
     
 )
       WHEN MATCHED AND TARGET.RS_CONTRACT_SID = @RS_CONTRACT_ID THEN
         UPDATE SET

         Target.ITEM_REBATE_START_DATE = Source.ITEM_REBATE_START_DATE,
         Target.ITEM_REBATE_END_DATE = Source.ITEM_REBATE_END_DATE,
         Target.REBATE_AMOUNT = Source.REBATE_AMOUNT,

         Target.CREATED_DATE = Source.CREATED_DATE,
         Target.CREATED_BY = Source.CREATED_BY,
         Target.MODIFIED_DATE = Source.MODIFIED_DATE,
         Target.MODIFIED_BY = Source.MODIFIED_BY,
         Target.BUNDLE_NO = Source.BUNDLE_NO,
         Target.REBATE_PLAN_MASTER_SID = Source.REBATE_PLAN_MASTER_SID,
         Target.FORMULA_ID=Source.FORMULA_ID,
         Target.RS_CONTRACT_ATTACHED_STATUS = Source.RS_CONTRACT_ATTACHED_STATUS,
         Target.RS_CONTRACT_ATTACHED_DATE = Source.RS_CONTRACT_ATTACHED_DATE,
         Target.DEDUCTION_CALENDAR_MASTER_SID = Source.DEDUCTION_CALENDAR_MASTER_SID,
         Target.NET_SALES_FORMULA_MASTER_SID = Source.NET_SALES_FORMULA_MASTER_SID,
         Target.FORMULA_TYPE = Source.FORMULA_TYPE,
         Target.NET_SALES_RULE = Source.NET_SALES_RULE,
         Target.EVALUATION_RULE = Source.EVALUATION_RULE,
         Target.EVALUATION_RULE_BUNDLE = Source.EVALUATION_RULE_BUNDLE,
         Target.CALCULATION_RULE = Source.CALCULATION_RULE,
         Target.CALCULATION_RULE_BUNDLE = Source.CALCULATION_RULE_BUNDLE,
         Target.INBOUND_STATUS = 'C'
 WHEN NOT MATCHED BY TARGET THEN
   INSERT (RS_CONTRACT_SID, ITEM_MASTER_SID, ITEM_REBATE_START_DATE,ITEM_REBATE_END_DATE,
         REBATE_AMOUNT,
         INBOUND_STATUS, RECORD_LOCK_STATUS, CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY, BUNDLE_NO, REBATE_PLAN_MASTER_SID,FORMULA_ID,
          RS_CONTRACT_ATTACHED_STATUS, DEDUCTION_CALENDAR_MASTER_SID, NET_SALES_FORMULA_MASTER_SID, FORMULA_TYPE, NET_SALES_RULE, EVALUATION_RULE, EVALUATION_RULE_BUNDLE, CALCULATION_RULE, CALCULATION_RULE_BUNDLE)
         Values( source.RS_CONTRACT_SID , SOURCE.ITEM_MASTER_SID, SOURCE.ITEM_REBATE_START_DATE,source.ITEM_REBATE_END_DATE,
         SOURCE.REBATE_AMOUNT, 'A'  ,0 , SOURCE.CREATED_DATE, SOURCE.CREATED_BY, SOURCE.MODIFIED_DATE, SOURCE.MODIFIED_BY, SOURCE.BUNDLE_NO, SOURCE.REBATE_PLAN_MASTER_SID,SOURCE.FORMULA_ID, SOURCE.RS_CONTRACT_ATTACHED_STATUS,
          SOURCE.DEDUCTION_CALENDAR_MASTER_SID, SOURCE.NET_SALES_FORMULA_MASTER_SID, SOURCE.FORMULA_TYPE, SOURCE.NET_SALES_RULE, SOURCE.EVALUATION_RULE, SOURCE.EVALUATION_RULE_BUNDLE, SOURCE.CALCULATION_RULE, SOURCE.CALCULATION_RULE_BUNDLE
         );;
 ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.saveRSDeleteQuery">
		<query>
                <![CDATA[
               DECLARE @RS_CONTRACT_ID INT = ?
               DELETE FROM RS_CONTRACT_DETAILS_PENDING WHERE RS_CONTRACT_SID = @RS_CONTRACT_ID;
        ]]>
		</query>
	</entity>

	<entity id="getRebateDetailsPendingCount">
		<query>
                <![CDATA[
                DECLARE @RS_CONTRACT_ID INT = ? SELECT
	COUNT( IMTD.RS_CONTRACT_DETAILS_PENDING_SID )
		FROM
			dbo.RS_CONTRACT_DETAILS_PENDING IMTD
		JOIN ITEM_MASTER IM ON
			IM.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
		LEFT JOIN DBO.HELPER_TABLE hitp ON
			hitp.HELPER_TABLE_SID = IMTD.RS_CONTRACT_ATTACHED_STATUS
		LEFT JOIN DBO.REBATE_PLAN_MASTER RPM ON
			RPM.REBATE_PLAN_MASTER_SID = IMTD.REBATE_PLAN_MASTER_SID
		LEFT JOIN DBO.DEDUCTION_CALENDAR_MASTER DC ON
			DC.DEDUCTION_CALENDAR_MASTER_SID = IMTD.DEDUCTION_CALENDAR_MASTER_SID
		LEFT JOIN DBO.FORECASTING_FORMULA FF ON
			FF.FORECASTING_FORMULA_SID = IMTD.FORMULA_ID
		LEFT JOIN DBO.NET_SALES_FORMULA_MASTER NSFM ON
			NSFM.NET_SALES_FORMULA_MASTER_SID = IMTD.NET_SALES_FORMULA_MASTER_SID
		LEFT JOIN DBO.CDR_MODEL NET ON
			NET.CDR_MODEL_SID = IMTD.NET_SALES_RULE
		LEFT JOIN DBO.CDR_MODEL EVA ON
			EVA.CDR_MODEL_SID = IMTD.EVALUATION_RULE
		LEFT JOIN DBO.CDR_MODEL CAL ON
			CAL.CDR_MODEL_SID = IMTD.CALCULATION_RULE
		WHERE
			IMTD.RS_CONTRACT_SID = @RS_CONTRACT_ID
        ]]>
		</query>
	</entity>

	<entity id="getRebateDetailsPendingResults">
		<query>
                <![CDATA[
DECLARE @RS_CONTRACT_ID int = ?
SELECT
  IMTD.CHECK_RECORD,
  recordType = '?',
  IM.ITEM_NO,
  IM.ITEM_NAME,
  itemType =
            CASE
              WHEN hitp.DESCRIPTION LIKE '%Select One%' THEN ''
              ELSE hitp.DESCRIPTION
            END,
  IM.ITEM_ID,
  RS_CONTRACT_ATTACHED_STATUS,
  IMTD.ITEM_REBATE_START_DATE,
  IMTD.ITEM_REBATE_END_DATE,
  BUNDLE_NO_VAL =
                 CASE
                   WHEN IMTD.BUNDLE_NO IS NULL THEN ''
                   ELSE IMTD.BUNDLE_NO
                 END,
  REBATE_PLAN_NO_VAL =
                      CASE
                        WHEN IMTD.REBATE_PLAN_MASTER_SID IS NULL THEN ''
                        ELSE RPM.REBATE_PLAN_NO
                      END,
  REBATE_PLAN_NAME_VAL =
                        CASE
                          WHEN IMTD.REBATE_PLAN_MASTER_SID IS NULL THEN ''
                          ELSE RPM.REBATE_PLAN_NAME
                        END,

  DEDUCTION_CALENDAR_NO_VAL =
                             CASE
                               WHEN IMTD.DEDUCTION_CALENDAR_MASTER_SID IS NULL THEN ''
                               ELSE DC.DEDUCTION_CALENDAR_NO
                             END,
  DEDUCTION_CALENDAR_NAME_VAL =
                               CASE
                                 WHEN IMTD.DEDUCTION_CALENDAR_MASTER_SID IS NULL THEN ''
                                 ELSE DC.DEDUCTION_CALENDAR_NAME
                               END,
  FF.FORMULA_NAME,
  NET_SALE_FORMULA_NO_VAL =
                           CASE
                             WHEN IMTD.NET_SALES_FORMULA_MASTER_SID IS NULL THEN ''
                             ELSE NSFM.NET_SALES_FORMULA_NO
                           END,
  NET_SALES_RULE_VAL =
                      CASE
                        WHEN IMTD.NET_SALES_RULE IS NULL THEN ''
                        ELSE NET.RULE_NAME
                      END,
  EVA_RULE_VAL =
                CASE
                  WHEN IMTD.EVALUATION_RULE IS NULL THEN ''
                  ELSE EVA.RULE_NAME
                END,
  EVALUATION_RULE_BUNDLE =
                          CASE
                            WHEN IMTD.EVALUATION_RULE_BUNDLE IS NULL THEN ''
                            ELSE IMTD.EVALUATION_RULE_BUNDLE
                          END,
  CAL_RULE_VAL =
                CASE
                  WHEN IMTD.CALCULATION_RULE IS NULL THEN ''
                  ELSE CAL.RULE_NAME
                END,
  CALCULATION_RULE_BUNDLE =
                           CASE
                             WHEN IMTD.CALCULATION_RULE_BUNDLE IS NULL THEN ''
                             ELSE IMTD.CALCULATION_RULE_BUNDLE
                           END,
  IMTD.RS_CONTRACT_ATTACHED_DATE,
  IMTD.RS_CONTRACT_DETAILS_PENDING_SID,
  IMTD.ITEM_MASTER_SID,
  IMTD.FORMULA_ID,
  IMTD.NET_SALES_FORMULA_MASTER_SID,
  IMTD.NET_SALES_RULE,
  IMTD.EVALUATION_RULE,
  IMTD.CALCULATION_RULE,
  IMTD.REBATE_PLAN_MASTER_SID,
  IMTD.DEDUCTION_CALENDAR_MASTER_SID
  ,hitp.DESCRIPTION as RS_PENDINGSTATUS
FROM dbo.RS_CONTRACT_DETAILS_PENDING IMTD
JOIN ITEM_MASTER IM
  ON IM.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
LEFT JOIN DBO.HELPER_TABLE hitp
  ON hitp.HELPER_TABLE_SID = IMTD.RS_CONTRACT_ATTACHED_STATUS
LEFT JOIN DBO.REBATE_PLAN_MASTER RPM
  ON RPM.REBATE_PLAN_MASTER_SID = IMTD.REBATE_PLAN_MASTER_SID
LEFT JOIN DBO.DEDUCTION_CALENDAR_MASTER DC
  ON DC.DEDUCTION_CALENDAR_MASTER_SID = IMTD.DEDUCTION_CALENDAR_MASTER_SID
LEFT JOIN DBO.FORECASTING_FORMULA FF
  ON FF.FORECASTING_FORMULA_SID = IMTD.FORMULA_ID
LEFT JOIN DBO.NET_SALES_FORMULA_MASTER NSFM
  ON NSFM.NET_SALES_FORMULA_MASTER_SID = IMTD.NET_SALES_FORMULA_MASTER_SID
LEFT JOIN DBO.CDR_MODEL NET
  ON NET.CDR_MODEL_SID = IMTD.NET_SALES_RULE
LEFT JOIN DBO.CDR_MODEL EVA
  ON EVA.CDR_MODEL_SID = IMTD.EVALUATION_RULE
LEFT JOIN DBO.CDR_MODEL CAL
  ON CAL.CDR_MODEL_SID = IMTD.CALCULATION_RULE
WHERE IMTD.RS_CONTRACT_SID = @RS_CONTRACT_ID ?

ORDER BY
        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;

]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.savePSPendingQuery">
		<query>
        <![CDATA[
        DECLARE @USERS_SID VARCHAR(15) = ?
	,@SESSION_ID VARCHAR(15) = ?
	,@PS_CONTRACT_ID INT = ?
	,@CREATED_BY INT = ?
	,@MODIFIED_BY INT = ?;

WITH CTE AS (
              SELECT DISTINCT @PS_CONTRACT_ID AS PS_CONTRACT_SID
                     ,IMTD.ITEM_MASTER_SID
                     ,IMTD.CONTRACT_PRICE
                     ,COALESCE(CC1.ITEM_PRICING_QUALIFIER_SID, IMTD.PRICE_TYPE) ITEM_PRICING_QUALIFIER_SID
                     ,CASE
                           WHEN IMTD.CONTRACT_PRICE_START_DATE = CC1.CONTRACT_PRICE_START_DATE
                                  THEN CC1.CONTRACT_PRICE_START_DATE
                           ELSE IMTD.CONTRACT_PRICE_START_DATE
                           END CONTRACT_PRICE_START_DATE
                     ,CASE
                           WHEN IMTD.CONTRACT_PRICE_END_DATE = CC1.CONTRACT_PRICE_END_DATE
                                  THEN CC1.CONTRACT_PRICE_END_DATE
                           ELSE IMTD.CONTRACT_PRICE_END_DATE
                           END CONTRACT_PRICE_END_DATE
                     ,IMTD.BASE_PRICE
                     ,CASE
                           WHEN IMTD.PRICE_TOLERANCE = CC1.PRICE_TOLERANCE
                                  THEN CC1.PRICE_TOLERANCE
                           ELSE IMTD.PRICE_TOLERANCE
                           END PRICE_TOLERANCE
                     ,CASE
                           WHEN IMTD.PRICE_TOLERANCE_TYPE = CC1.PRICE_TOLERANCE_TYPE
                                  THEN CC1.PRICE_TOLERANCE_TYPE
                           ELSE IMTD.PRICE_TOLERANCE_TYPE
                           END PRICE_TOLERANCE_TYPE
                     ,CASE
                            WHEN IMTD.PRICE_TOLERANCE_FREQUENCY = CC1.PRICE_TOLERANCE_FREQUENCY
                                  THEN CC1.PRICE_TOLERANCE_FREQUENCY
                           ELSE IMTD.PRICE_TOLERANCE_FREQUENCY
                           END PRICE_TOLERANCE_FREQUENCY
                     ,CASE
                           WHEN IMTD.PRICE_TOLERANCE_INTERVAL = CC1.PRICE_TOLERANCE_INTERVAL
                                  THEN CC1.PRICE_TOLERANCE_INTERVAL
                           ELSE IMTD.PRICE_TOLERANCE_INTERVAL
                           END PRICE_TOLERANCE_INTERVAL
                     ,CASE
                           WHEN IMTD.PRICE_PROTECTION_START_DATE = CC1.PRICE_PROTECTION_START_DATE
                                  THEN CC1.PRICE_PROTECTION_START_DATE
                           ELSE IMTD.PRICE_PROTECTION_START_DATE
                           END PRICE_PROTECTION_START_DATE
                     ,CASE
                           WHEN IMTD.PRICE_PROTECTION_END_DATE = CC1.PRICE_PROTECTION_END_DATE
                                  THEN CC1.PRICE_PROTECTION_END_DATE
                           ELSE IMTD.PRICE_PROTECTION_END_DATE
                           END PRICE_PROTECTION_END_DATE
                     ,IMTD.PRICE_REVISION
                     ,CC1.REVISION_DATE
                     ,CASE
                           WHEN IMTD.SUGGESTED_PRICE = CC1.SUGGESTED_PRICE
                                  THEN CC1.SUGGESTED_PRICE
                           ELSE IMTD.SUGGESTED_PRICE
                           END SUGGESTED_PRICE
                     ,IMTD.PRICE
                     ,CASE
                           WHEN IMTD.PS_STATUS = CC1.PS_CONTRACT_ATTACHED_STATUS
                                  THEN CC1.PS_CONTRACT_ATTACHED_STATUS
                           ELSE IMTD.PS_STATUS
                           END PS_CONTRACT_ATTACHED_STATUS
                     ,CC1.PS_CONTRACT_ATTACHED_DATE
                    ,coalesce(CC1.INBOUND_STATUS, 'A') INBOUND_STATUS
                     ,coalesce(IMTD.RECORD_LOCK_STATUS, 0) RECORD_LOCK_STATUS
                     ,CC1.BATCH_ID
                     ,IMTD.SOURCE
                     ,IMTD.BRAND_MASTER_SID
                     ,IMTD.BASE_PRICE_TYPE
                     ,IMTD.BASE_PRICE_ENTRY
                     ,IMTD.BASE_PRICE_DATE
                     ,CASE
                           WHEN IMTD.NET_BASE_PRICE = CC1.NET_BASE_PRICE
                                  THEN CC1.NET_BASE_PRICE
                           ELSE IMTD.NET_BASE_PRICE
                           END NET_BASE_PRICE
                     ,IMTD.BASE_PRICE_DDLB
                     ,CASE
                           WHEN IMTD.NET_BASE_PRICE_FORMULA_ID = CC1.NET_BASE_PRICE_FORMULA_ID
                                  THEN CC1.NET_BASE_PRICE_FORMULA_ID
                           ELSE IMTD.NET_BASE_PRICE_FORMULA_ID
                           END NET_BASE_PRICE_FORMULA_ID
                     ,CASE
                           WHEN IMTD.SUBSEQUENT_PERIOD_PRICE_TYPE = CC1.SUBSEQUENT_PERIOD_PRICE_TYPE
                                  THEN CC1.SUBSEQUENT_PERIOD_PRICE_TYPE
                           ELSE IMTD.SUBSEQUENT_PERIOD_PRICE_TYPE
                           END SUBSEQUENT_PERIOD_PRICE_TYPE
                     ,CASE
                           WHEN IMTD.NET_SUBSEQUENT_PERIOD_PRICE = CC1.NET_SUBSEQUENT_PERIOD_PRICE
                                  THEN CC1.NET_SUBSEQUENT_PERIOD_PRICE
                           ELSE IMTD.NET_SUBSEQUENT_PERIOD_PRICE
                           END NET_SUBSEQUENT_PERIOD_PRICE
                     ,CASE
                           WHEN IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID = CC1.NET_SUBSEQUENT_PRICE_FORMULA_ID
                                  THEN CC1.NET_SUBSEQUENT_PRICE_FORMULA_ID
                           ELSE IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID
                           END NET_SUBSEQUENT_PRICE_FORMULA_ID
                     ,CASE
                           WHEN IMTD.RESET_PRICE_TYPE = CC1.RESET_PRICE_TYPE
                                  THEN CC1.RESET_PRICE_TYPE
                           ELSE IMTD.RESET_PRICE_TYPE
                           END RESET_PRICE_TYPE
                     ,CASE
                           WHEN IMTD.NET_RESET_PRICE_TYPE = CC1.NET_RESET_PRICE_TYPE
                                  THEN CC1.NET_RESET_PRICE_TYPE
                           ELSE IMTD.NET_RESET_PRICE_TYPE
                           END NET_RESET_PRICE_TYPE
                     ,CASE
                           WHEN IMTD.NET_RESET_PRICE_FORMULA_ID = CC1.NET_RESET_PRICE_FORMULA_ID
                                  THEN CC1.NET_RESET_PRICE_FORMULA_ID
                           ELSE IMTD.NET_RESET_PRICE_FORMULA_ID
                           END NET_RESET_PRICE_FORMULA_ID
                     ,CASE
                           WHEN IMTD.NEP = CC1.NEP
                                  THEN CC1.NEP
                           ELSE IMTD.NEP
                           END NEP
                     ,CASE
                           WHEN IMTD.PRICE_PROTECTION_STATUS = CC1.PRICE_PROTECTION_STATUS
                                  THEN CC1.PRICE_PROTECTION_STATUS
                           ELSE IMTD.PRICE_PROTECTION_STATUS
                           END PRICE_PROTECTION_STATUS
                     ,IMTD.PRICE_PROTECTION_PRICE_TYPE
                     ,CASE
                           WHEN IMTD.NEP_FORMULA = CC1.NEP_FORMULA
                                  THEN CC1.NEP_FORMULA
                           ELSE IMTD.NEP_FORMULA
                           END NEP_FORMULA
                     ,CASE
                           WHEN IMTD.MAX_INCREMENTAL_CHANGE = CC1.MAX_INCREMENTAL_CHANGE
                                  THEN CC1.MAX_INCREMENTAL_CHANGE
                           ELSE IMTD.MAX_INCREMENTAL_CHANGE
                           END MAX_INCREMENTAL_CHANGE
                     ,CASE
                           WHEN IMTD.RESET_ELIGIBLE = CC1.RESET_ELIGIBLE
                                  THEN CC1.RESET_ELIGIBLE
                           ELSE IMTD.RESET_ELIGIBLE
                           END RESET_ELIGIBLE
                     ,CASE
                           WHEN IMTD.RESET_TYPE = CC1.RESET_TYPE
                                  THEN CC1.RESET_TYPE
                           ELSE IMTD.RESET_TYPE
                           END RESET_TYPE
                     ,CASE
                           WHEN IMTD.RESET_DATE = CC1.RESET_DATE
                                  THEN CC1.RESET_DATE
                           ELSE IMTD.RESET_DATE
                           END RESET_DATE
                     ,CASE
                           WHEN IMTD.RESET_INTERVAL = CC1.RESET_INTERVAL
                                  THEN CC1.RESET_INTERVAL
                           ELSE IMTD.RESET_INTERVAL
                           END RESET_INTERVAL
                     ,CASE
                           WHEN IMTD.RESET_FREQUENCY = CC1.RESET_FREQUENCY
                                  THEN CC1.RESET_FREQUENCY
                           ELSE IMTD.RESET_FREQUENCY
                           END RESET_FREQUENCY
                     ,CASE
                           WHEN IMTD.NET_PRICE_TYPE = CC1.NET_PRICE_TYPE
                                  THEN CC1.NET_PRICE_TYPE
                           ELSE IMTD.NET_PRICE_TYPE
                           END NET_PRICE_TYPE
                     ,CASE
                           WHEN IMTD.NET_PRICE_TYPE_FORMULA = CC1.NET_PRICE_TYPE_FORMULA
                                  THEN CC1.NET_PRICE_TYPE_FORMULA
                           ELSE IMTD.NET_PRICE_TYPE_FORMULA
                           END NET_PRICE_TYPE_FORMULA
                     ,@CREATED_BY CREATED_BY
                     ,@MODIFIED_BY MODIFIED_BY
                     ,IMTD.ADD_COPY_INDICATOR
                     ,CC1.PPA_INDEX_NO
              FROM IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
              JOIN PS_CONTRACT RC ON RC.PS_MODEL_SID = IMTD.PS_MODEL_SID
                     AND RC.CONTRACT_MASTER_SID = IMTD.CONTRACT_MASTER_SID
                     AND RC.INBOUND_STATUS <> 'D'
                     AND IMTD.USERS_SID = @USERS_SID
                     AND SESSION_ID = @SESSION_ID
              JOIN PS_CONTRACT_DETAILS CC1 ON RC.PS_CONTRACT_SID = CC1.PS_CONTRACT_SID
                     AND CC1.PS_CONTRACT_SID = @PS_CONTRACT_ID
                     AND CC1.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                     AND CC1.PPA_INDEX_NO=IMTD.PPA_INDEX_NO
                     AND CC1.PRICE_PROTECTION_START_DATE = IMTD.PRICE_PROTECTION_START_DATE
                     AND CC1.INBOUND_STATUS <> 'D'
                     AND (  IMTD.PS_STATUS <> CC1.PS_CONTRACT_ATTACHED_STATUS
                            OR IMTD.PRICE_PROTECTION_STATUS <> CC1.PRICE_PROTECTION_STATUS
                           OR CC1.PRICE_PROTECTION_START_DATE <> IMTD.PRICE_PROTECTION_START_DATE
                           OR COALESCE(IMTD.CONTRACT_PRICE_START_DATE, 1) <> COALESCE(CC1.CONTRACT_PRICE_START_DATE, 1)
                           OR COALESCE(IMTD.CONTRACT_PRICE_END_DATE, 1) <> COALESCE(CC1.CONTRACT_PRICE_END_DATE, 1)
                           OR COALESCE(IMTD.PRICE_TOLERANCE, 1) <> COALESCE(CC1.PRICE_TOLERANCE, 1)
                           OR COALESCE(IMTD.PRICE_TOLERANCE_TYPE, 1) <> COALESCE(CC1.PRICE_TOLERANCE_TYPE, 1)
                           OR COALESCE(IMTD.PRICE_TOLERANCE_FREQUENCY, 1) <> COALESCE(CC1.PRICE_TOLERANCE_FREQUENCY, 1)
                           OR COALESCE(IMTD.PRICE_TOLERANCE_INTERVAL, 1) <> COALESCE(CC1.PRICE_TOLERANCE_INTERVAL, 1)
                           OR COALESCE(IMTD.PRICE_PROTECTION_START_DATE, 1) <> COALESCE(CC1.PRICE_PROTECTION_START_DATE, 1)
                           OR COALESCE(IMTD.PRICE_PROTECTION_END_DATE, 1) <> COALESCE(CC1.PRICE_PROTECTION_END_DATE, 1)
                           OR COALESCE(IMTD.SUGGESTED_PRICE, 1) <> COALESCE(CC1.SUGGESTED_PRICE, 1)
                           OR COALESCE(IMTD.NET_BASE_PRICE, 1) <> COALESCE(CC1.NET_BASE_PRICE, 1)
                           OR COALESCE(IMTD.NET_BASE_PRICE_FORMULA_ID, 1) <> COALESCE(CC1.NET_BASE_PRICE_FORMULA_ID, 1)
                           OR COALESCE(IMTD.SUBSEQUENT_PERIOD_PRICE_TYPE, 1) <> COALESCE(CC1.SUBSEQUENT_PERIOD_PRICE_TYPE, 1)
                           OR COALESCE(IMTD.NET_SUBSEQUENT_PERIOD_PRICE, 1) <> COALESCE(CC1.NET_SUBSEQUENT_PERIOD_PRICE, 1)
                           OR COALESCE(IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID, 1) <> COALESCE(CC1.NET_SUBSEQUENT_PRICE_FORMULA_ID, 1)
                           OR COALESCE(IMTD.RESET_PRICE_TYPE, 1) <> COALESCE(CC1.RESET_PRICE_TYPE, 1)
                           OR COALESCE(IMTD.NET_RESET_PRICE_FORMULA_ID, 1) <> COALESCE(CC1.NET_RESET_PRICE_FORMULA_ID, 1)
                           OR COALESCE(IMTD.NEP, 1) <> COALESCE(CC1.NEP, 1)
                           OR COALESCE(IMTD.NEP_FORMULA, 1) <> COALESCE(CC1.NEP_FORMULA, 1)
                           OR COALESCE(IMTD.MAX_INCREMENTAL_CHANGE, 1) <> COALESCE(CC1.MAX_INCREMENTAL_CHANGE, 1)
                           OR COALESCE(IMTD.RESET_ELIGIBLE, 1) <> COALESCE(CC1.RESET_ELIGIBLE, 1)
                           OR COALESCE(IMTD.RESET_TYPE, 1) <> COALESCE(CC1.RESET_TYPE, 1)
                           OR COALESCE(IMTD.RESET_DATE, 1) <> COALESCE(CC1.RESET_DATE, 1)
                           OR COALESCE(IMTD.RESET_INTERVAL, 1) <> COALESCE(CC1.RESET_INTERVAL, 1)
                           OR COALESCE(IMTD.RESET_FREQUENCY, 1) <> COALESCE(CC1.RESET_FREQUENCY, 1)
                           OR COALESCE(IMTD.NET_PRICE_TYPE, 1) <> COALESCE(CC1.NET_PRICE_TYPE, 1)
                           OR COALESCE(IMTD.NET_PRICE_TYPE_FORMULA, 1) <> COALESCE(CC1.NET_PRICE_TYPE_FORMULA, 1)
                           )
 
              UNION
 
              SELECT DISTINCT  @PS_CONTRACT_ID
                     ,IMTD.ITEM_MASTER_SID
                     ,IMTD.CONTRACT_PRICE
                     ,IMTD.PRICE_TYPE
                     ,IMTD.CONTRACT_PRICE_START_DATE
                     ,IMTD.CONTRACT_PRICE_END_DATE
                     ,IMTD.BASE_PRICE
                     ,IMTD.PRICE_TOLERANCE
                     ,IMTD.PRICE_TOLERANCE_TYPE
                     ,IMTD.PRICE_TOLERANCE_FREQUENCY
                     ,IMTD.PRICE_TOLERANCE_INTERVAL
                     ,IMTD.PRICE_PROTECTION_START_DATE
                     ,IMTD.PRICE_PROTECTION_END_DATE
                     ,IMTD.PRICE_REVISION
                     ,IMTD.REBATE_REVISION_DATE
                     ,IMTD.SUGGESTED_PRICE
                     ,IMTD.PRICE
                     ,ATTACHED_STATUS
                     ,ATTACHED_DATE
                     ,'A' AS INBOUND_STATUS
                     ,0 AS  RECORD_LOCK_STATUS
                     ,null as BATCH_ID
                     ,IMTD.SOURCE
                     ,IMTD.BRAND_MASTER_SID
                     ,IMTD.BASE_PRICE_TYPE
                     ,IMTD.BASE_PRICE_ENTRY
                     ,IMTD.BASE_PRICE_DATE
                     ,IMTD.NET_BASE_PRICE
                     ,IMTD.BASE_PRICE_DDLB
                     ,IMTD.NET_BASE_PRICE_FORMULA_ID
                     ,IMTD.SUBSEQUENT_PERIOD_PRICE_TYPE
                     ,IMTD.NET_SUBSEQUENT_PERIOD_PRICE
                     ,IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID
                     ,IMTD.RESET_PRICE_TYPE
                     ,IMTD.NET_RESET_PRICE_TYPE
                     ,IMTD.NET_RESET_PRICE_FORMULA_ID
                     ,IMTD.NEP
                     ,IMTD.PRICE_PROTECTION_STATUS
                     ,IMTD.PRICE_PROTECTION_PRICE_TYPE
                     ,IMTD.NEP_FORMULA
                     ,IMTD.MAX_INCREMENTAL_CHANGE
                     ,IMTD.RESET_ELIGIBLE
                     ,IMTD.RESET_TYPE
                     ,IMTD.RESET_DATE
                     ,IMTD.RESET_INTERVAL
                     ,IMTD.RESET_FREQUENCY
                     ,IMTD.NET_PRICE_TYPE
                     ,IMTD.NET_PRICE_TYPE_FORMULA
                     ,@CREATED_BY
                     ,@MODIFIED_BY
                     ,IMTD.ADD_COPY_INDICATOR
                     ,IMTD.PPA_INDEX_NO
FROM IMTD_ITEM_PRICE_REBATE_DETAILS IMTD
       WHERE IMTD.USERS_SID = @USERS_SID
              AND SESSION_ID = @SESSION_ID
              AND NOT EXISTS (
                     SELECT 1
                     FROM PS_CONTRACT RC
                     INNER JOIN PS_CONTRACT_DETAILS CC1
                           ON RC.PS_CONTRACT_SID = CC1.PS_CONTRACT_SID
                                  AND RC.PS_CONTRACT_SID = @PS_CONTRACT_ID
						   AND RC.PS_MODEL_SID=IMTD.PS_MODEL_SID
                     WHERE RC.CONTRACT_MASTER_SID = IMTD.CONTRACT_MASTER_SID
                           AND CC1.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                            AND CC1.PRICE_PROTECTION_START_DATE = IMTD.PRICE_PROTECTION_START_DATE
                            AND CC1.PPA_INDEX_NO = IMTD.PPA_INDEX_NO
                     )
       )
 
INSERT INTO PS_CONTRACT_DETAILS_PENDING (
       PS_CONTRACT_SID
       ,ITEM_MASTER_SID
       ,CONTRACT_PRICE
       ,ITEM_PRICING_QUALIFIER_SID
       ,CONTRACT_PRICE_START_DATE
       ,CONTRACT_PRICE_END_DATE
       ,BASE_PRICE
       ,PRICE_TOLERANCE
       ,PRICE_TOLERANCE_TYPE
       ,PRICE_TOLERANCE_FREQUENCY
       ,PRICE_TOLERANCE_INTERVAL
       ,PRICE_PROTECTION_START_DATE
       ,PRICE_PROTECTION_END_DATE
       ,PRICE_REVISION
       ,REVISION_DATE
       ,SUGGESTED_PRICE
       ,PRICE
       ,PS_CONTRACT_ATTACHED_STATUS
       ,PS_CONTRACT_ATTACHED_DATE
       ,INBOUND_STATUS
       ,RECORD_LOCK_STATUS
       ,BATCH_ID
       ,SOURCE
       ,BRAND_MASTER_SID
       ,BASE_PRICE_TYPE
       ,BASE_PRICE_ENTRY
       ,BASE_PRICE_DATE
       ,NET_BASE_PRICE
       ,BASE_PRICE_DDLB
       ,NET_BASE_PRICE_FORMULA_ID
       ,SUBSEQUENT_PERIOD_PRICE_TYPE
       ,NET_SUBSEQUENT_PERIOD_PRICE
       ,NET_SUBSEQUENT_PRICE_FORMULA_ID
       ,RESET_PRICE_TYPE
       ,NET_RESET_PRICE_TYPE
       ,NET_RESET_PRICE_FORMULA_ID
       ,NEP
       ,PRICE_PROTECTION_STATUS
       ,PRICE_PROTECTION_PRICE_TYPE
       ,NEP_FORMULA
       ,MAX_INCREMENTAL_CHANGE
       ,RESET_ELIGIBLE
       ,RESET_TYPE
       ,RESET_DATE
       ,RESET_INTERVAL
       ,RESET_FREQUENCY
       ,NET_PRICE_TYPE
       ,NET_PRICE_TYPE_FORMULA
       ,CREATED_BY
       ,MODIFIED_BY
       ,ADD_COPY_INDICATOR
       ,PPA_INDEX_NO
       )
SELECT PS_CONTRACT_SID
       ,ITEM_MASTER_SID
       ,CONTRACT_PRICE
       ,ITEM_PRICING_QUALIFIER_SID
       ,CONTRACT_PRICE_START_DATE
       ,CONTRACT_PRICE_END_DATE
       ,BASE_PRICE
       ,PRICE_TOLERANCE
       ,PRICE_TOLERANCE_TYPE
       ,PRICE_TOLERANCE_FREQUENCY
       ,PRICE_TOLERANCE_INTERVAL
       ,PRICE_PROTECTION_START_DATE
       ,PRICE_PROTECTION_END_DATE
       ,PRICE_REVISION
       ,REVISION_DATE
       ,SUGGESTED_PRICE
       ,ISNULL(PRICE,0) AS PRICE
       ,PS_CONTRACT_ATTACHED_STATUS
       ,PS_CONTRACT_ATTACHED_DATE
       ,INBOUND_STATUS
       ,RECORD_LOCK_STATUS
       ,BATCH_ID
       ,SOURCE
       ,BRAND_MASTER_SID
       ,BASE_PRICE_TYPE
       ,BASE_PRICE_ENTRY
       ,BASE_PRICE_DATE
       ,NET_BASE_PRICE
       ,BASE_PRICE_DDLB
       ,NET_BASE_PRICE_FORMULA_ID
       ,SUBSEQUENT_PERIOD_PRICE_TYPE
       ,NET_SUBSEQUENT_PERIOD_PRICE
       ,NET_SUBSEQUENT_PRICE_FORMULA_ID
       ,RESET_PRICE_TYPE
       ,NET_RESET_PRICE_TYPE
       ,NET_RESET_PRICE_FORMULA_ID
       ,NEP
       ,PRICE_PROTECTION_STATUS
       ,PRICE_PROTECTION_PRICE_TYPE
       ,NEP_FORMULA
       ,MAX_INCREMENTAL_CHANGE
       ,RESET_ELIGIBLE
       ,RESET_TYPE
       ,CONVERT(VARCHAR(100),RESET_DATE)
       ,RESET_INTERVAL
       ,RESET_FREQUENCY
       ,NET_PRICE_TYPE
       ,NET_PRICE_TYPE_FORMULA
       ,CREATED_BY
       ,MODIFIED_BY
       ,ADD_COPY_INDICATOR
       ,PPA_INDEX_NO
FROM CTE
		
        ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.savePSApprove">
		<query>
        <![CDATA[
DECLARE @PS_CONTRACT_ID INT = ?
 
 
MERGE DBO.PS_CONTRACT_DETAILS AS TARGET

       USING (select * from DBO.PS_CONTRACT_DETAILS_PENDING  where PS_CONTRACT_SID  = @PS_CONTRACT_ID)  AS SOURCE ON
(
       TARGET.PS_CONTRACT_SID = SOURCE.PS_CONTRACT_SID
       AND TARGET.ITEM_MASTER_SID = SOURCE.ITEM_MASTER_SID
       AND TARGET.CONTRACT_PRICE_START_DATE = SOURCE.CONTRACT_PRICE_START_DATE
       AND TARGET.PS_CONTRACT_SID = @PS_CONTRACT_ID
       AND TARGET.PPA_INDEX_NO=SOURCE.PPA_INDEX_NO
)
WHEN MATCHED THEN UPDATE
SET
       TARGET.CONTRACT_PRICE = SOURCE.CONTRACT_PRICE,
       TARGET.CONTRACT_PRICE_START_DATE = SOURCE.CONTRACT_PRICE_START_DATE,
       TARGET.CONTRACT_PRICE_END_DATE = SOURCE.CONTRACT_PRICE_END_DATE,
       TARGET.PRICE_PROTECTION_START_DATE = SOURCE.PRICE_PROTECTION_START_DATE,
       TARGET.PRICE_PROTECTION_END_DATE = SOURCE.PRICE_PROTECTION_END_DATE,
       TARGET.PRICE_TOLERANCE_TYPE = SOURCE.PRICE_TOLERANCE_TYPE,
       TARGET.PRICE_TOLERANCE = SOURCE.PRICE_TOLERANCE,
       TARGET.BASE_PRICE = SOURCE.BASE_PRICE,
       TARGET.ITEM_PRICING_QUALIFIER_SID = SOURCE.ITEM_PRICING_QUALIFIER_SID,
       TARGET.PRICE_TOLERANCE_FREQUENCY = SOURCE.PRICE_TOLERANCE_FREQUENCY,
       TARGET.PRICE_TOLERANCE_INTERVAL = SOURCE.PRICE_TOLERANCE_INTERVAL,
       TARGET.PRICE = SOURCE.PRICE,
       TARGET.CREATED_DATE = SOURCE.CREATED_DATE,
       TARGET.CREATED_BY = SOURCE.CREATED_BY,
       TARGET.MODIFIED_DATE = SOURCE.MODIFIED_DATE,
       TARGET.MODIFIED_BY = SOURCE.MODIFIED_BY,
       TARGET.INBOUND_STATUS = 'C',
       TARGET.PS_CONTRACT_ATTACHED_STATUS = SOURCE.PS_CONTRACT_ATTACHED_STATUS,
       TARGET.PS_CONTRACT_ATTACHED_DATE = SOURCE.PS_CONTRACT_ATTACHED_DATE,
       TARGET.MAX_INCREMENTAL_CHANGE = SOURCE.MAX_INCREMENTAL_CHANGE,
       TARGET.RESET_ELIGIBLE = SOURCE.RESET_ELIGIBLE,
       TARGET.RESET_TYPE = SOURCE.RESET_TYPE,
       TARGET.RESET_DATE = SOURCE.RESET_DATE,
       TARGET.RESET_INTERVAL = SOURCE.RESET_INTERVAL,
       TARGET.RESET_FREQUENCY = SOURCE.RESET_FREQUENCY,
       TARGET.NET_PRICE_TYPE = SOURCE.NET_PRICE_TYPE,
       TARGET.NET_PRICE_TYPE_FORMULA = SOURCE.NET_PRICE_TYPE_FORMULA,
       TARGET.PRICE_PROTECTION_PRICE_TYPE = SOURCE.PRICE_PROTECTION_PRICE_TYPE,
       TARGET.NEP = SOURCE.NEP,
       TARGET.NEP_FORMULA = SOURCE.NEP_FORMULA,
       TARGET.BRAND_MASTER_SID = SOURCE.BRAND_MASTER_SID,
       TARGET.PRICE_PROTECTION_STATUS = SOURCE.PRICE_PROTECTION_STATUS,
       TARGET.BASE_PRICE_TYPE = SOURCE.BASE_PRICE_TYPE,
       TARGET.BASE_PRICE_ENTRY = SOURCE.BASE_PRICE_ENTRY,
       TARGET.BASE_PRICE_DATE = SOURCE.BASE_PRICE_DATE,
       TARGET.BASE_PRICE_DDLB = SOURCE.BASE_PRICE_DDLB,
       TARGET.NET_BASE_PRICE = SOURCE.NET_BASE_PRICE,
       TARGET.NET_BASE_PRICE_FORMULA_ID = SOURCE.NET_BASE_PRICE_FORMULA_ID,
       TARGET.SUBSEQUENT_PERIOD_PRICE_TYPE = SOURCE.SUBSEQUENT_PERIOD_PRICE_TYPE,
       TARGET.NET_SUBSEQUENT_PERIOD_PRICE = SOURCE.NET_SUBSEQUENT_PERIOD_PRICE,
       TARGET.NET_SUBSEQUENT_PRICE_FORMULA_ID = SOURCE.NET_SUBSEQUENT_PRICE_FORMULA_ID,
       TARGET.RESET_PRICE_TYPE = SOURCE.RESET_PRICE_TYPE,
       TARGET.NET_RESET_PRICE_TYPE = SOURCE.NET_RESET_PRICE_TYPE,
       TARGET.NET_RESET_PRICE_FORMULA_ID = SOURCE.NET_RESET_PRICE_FORMULA_ID,
       TARGET.SUGGESTED_PRICE = SOURCE.SUGGESTED_PRICE,
       TARGET."SOURCE" = SOURCE.SOURCE
       WHEN NOT MATCHED THEN INSERT
              (
                     PS_CONTRACT_SID,
                     ITEM_MASTER_SID,
                     CONTRACT_PRICE,
                     ITEM_PRICING_QUALIFIER_SID,
                     CONTRACT_PRICE_START_DATE,
                     CONTRACT_PRICE_END_DATE,
                     BASE_PRICE,
                     PRICE_TOLERANCE,
                     PRICE_TOLERANCE_TYPE,
                     PRICE_TOLERANCE_FREQUENCY,
                     PRICE_TOLERANCE_INTERVAL,
                     PRICE_PROTECTION_START_DATE,
                     PRICE_PROTECTION_END_DATE,
                     PRICE_REVISION,
                     REVISION_DATE,
                     SUGGESTED_PRICE,
                     PRICE,
                     PS_CONTRACT_ATTACHED_STATUS,
                     PS_CONTRACT_ATTACHED_DATE,
                     INBOUND_STATUS,
                     RECORD_LOCK_STATUS,
                     BATCH_ID,
                     SOURCE,
                     BRAND_MASTER_SID,
                     BASE_PRICE_TYPE,
                     BASE_PRICE_ENTRY,
                     BASE_PRICE_DATE,
                     NET_BASE_PRICE,
                     BASE_PRICE_DDLB,
                     NET_BASE_PRICE_FORMULA_ID,
                     SUBSEQUENT_PERIOD_PRICE_TYPE,
                     NET_SUBSEQUENT_PERIOD_PRICE,
                     NET_SUBSEQUENT_PRICE_FORMULA_ID,
                     RESET_PRICE_TYPE,
                     NET_RESET_PRICE_TYPE,
                     NET_RESET_PRICE_FORMULA_ID,
                     NEP,
                     PRICE_PROTECTION_STATUS,
                     PRICE_PROTECTION_PRICE_TYPE,
                     NEP_FORMULA,
                     MAX_INCREMENTAL_CHANGE,
                     RESET_ELIGIBLE,
                     RESET_TYPE,
                     RESET_DATE,
                     RESET_INTERVAL,
                     RESET_FREQUENCY,
                     NET_PRICE_TYPE,
                     NET_PRICE_TYPE_FORMULA,
                     PPA_INDEX_NO,
                     ADD_COPY_INDICATOR
              )
       VALUES(
              PS_CONTRACT_SID,
              SOURCE.ITEM_MASTER_SID,
              SOURCE.CONTRACT_PRICE,
              SOURCE.ITEM_PRICING_QUALIFIER_SID,
              SOURCE.CONTRACT_PRICE_START_DATE,
              SOURCE.CONTRACT_PRICE_END_DATE,
              SOURCE.BASE_PRICE,
              SOURCE.PRICE_TOLERANCE,
              SOURCE.PRICE_TOLERANCE_TYPE,
              SOURCE.PRICE_TOLERANCE_FREQUENCY,
              SOURCE.PRICE_TOLERANCE_INTERVAL,
              SOURCE.PRICE_PROTECTION_START_DATE,
              SOURCE.PRICE_PROTECTION_END_DATE,
              SOURCE.PRICE_REVISION,
              SOURCE.REVISION_DATE,
              SOURCE.SUGGESTED_PRICE,
              SOURCE.PRICE,
              SOURCE.PS_CONTRACT_ATTACHED_STATUS,
              SOURCE.PS_CONTRACT_ATTACHED_DATE,
              'A',
              0,
              SOURCE.BATCH_ID,
              SOURCE.SOURCE,
              SOURCE.BRAND_MASTER_SID,
              SOURCE.BASE_PRICE_TYPE,
              SOURCE.BASE_PRICE_ENTRY,
              SOURCE.BASE_PRICE_DATE,
              SOURCE.NET_BASE_PRICE,
              SOURCE.BASE_PRICE_DDLB,
              SOURCE.NET_BASE_PRICE_FORMULA_ID,
              SOURCE.SUBSEQUENT_PERIOD_PRICE_TYPE,
              SOURCE.NET_SUBSEQUENT_PERIOD_PRICE,
              SOURCE.NET_SUBSEQUENT_PRICE_FORMULA_ID,
              SOURCE.RESET_PRICE_TYPE,
              SOURCE.NET_RESET_PRICE_TYPE,
              SOURCE.NET_RESET_PRICE_FORMULA_ID,
              SOURCE.NEP,
              SOURCE.PRICE_PROTECTION_STATUS,
              SOURCE.PRICE_PROTECTION_PRICE_TYPE,
              SOURCE.NEP_FORMULA,
              SOURCE.MAX_INCREMENTAL_CHANGE,
              SOURCE.RESET_ELIGIBLE,
              SOURCE.RESET_TYPE,
              SOURCE.RESET_DATE,
              SOURCE.RESET_INTERVAL,
              SOURCE.RESET_FREQUENCY,
              SOURCE.NET_PRICE_TYPE,
              SOURCE.NET_PRICE_TYPE_FORMULA,
              SOURCE.PPA_INDEX_NO,
              SOURCE.ADD_COPY_INDICATOR
       );
 
;
 ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.savePSDeleteQuery">
		<query>
                <![CDATA[
               DECLARE @PS_CONTRACT_ID INT = ?
               DELETE FROM PS_CONTRACT_DETAILS_PENDING WHERE PS_CONTRACT_SID = @PS_CONTRACT_ID;
        ]]>
		</query>
	</entity>

	<entity id="getPricingDetailsPendingCount">
		<query>
                <![CDATA[
                DECLARE @PS_CONTRACT_ID INT = ?
                    SELECT
                        COUNT(IMTD.PS_CONT_DET_PENDING_SID)
                     FROM
                         dbo.PS_CONTRACT_DETAILS_PENDING IMTD
                 LEFT JOIN BRAND_MASTER BM ON
                         IMTD.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                 LEFT JOIN ?.dbo.User_ usr1 ON
                         usr1.UserId = IMTD.CREATED_BY
                 LEFT JOIN HELPER_TABLE hpricedetailsstatus on hpricedetailsstatus.HELPER_TABLE_SID=IMTD.PS_CONTRACT_ATTACHED_STATUS AND hpricedetailsstatus.DESCRIPTION  NOT like '%Select One%'
                 LEFT JOIN ITEM_PRICING_QUALIFIER IPQ  ON IPQ.ITEM_PRICING_QUALIFIER_SID = IMTD.ITEM_PRICING_QUALIFIER_SID AND IPQ.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                 LEFT JOIN ITEM_MASTER im on
                         im.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                         AND im.INBOUND_STATUS <> 'D'
           
                         WHERE IMTD.PS_CONTRACT_SID = @PS_CONTRACT_ID
        ]]>
		</query>
	</entity>

	<entity id="getPricingDetailsPendingResults">
		<query>
                <![CDATA[
                DECLARE @PS_CONTRACT_ID int = ?

SELECT
                         IMTD.CHECK_RECORD,
                         recordType = '?',
                         im.ITEM_ID,
                         im.ITEM_NO,
                         im.ITEM_NAME,
                         BM.BRAND_NAME,
                         IMTD.PS_CONTRACT_ATTACHED_STATUS,
                         IMTD.CONTRACT_PRICE_START_DATE,
                         IMTD.CONTRACT_PRICE_END_DATE,
                         IMTD.ITEM_PRICING_QUALIFIER_SID,
                         PRICE=CASE
                                               WHEN IMTD.PRICE<>0 THEN str(IMTD.PRICE,16,2)
                                               ELSE ''
                                       END,
                         SUGGESTED_PRICE=CASE
                                               WHEN IMTD.SUGGESTED_PRICE<>0 THEN str(IMTD.SUGGESTED_PRICE,16,2)
                                               ELSE ''
                                       END,
                         IMTD."SOURCE",
                         usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY,
                         IMTD.CREATED_DATE,
                         IMTD.PS_CONTRACT_ATTACHED_DATE,
                         hpricedetailsstatus.DESCRIPTION AS PD_STATUSPENDING,
                         IPQ.ITEM_PRICING_QUALIFIER_NAME AS PD_PRICETYPEPENDING
                 FROM
                         dbo.PS_CONTRACT_DETAILS_PENDING IMTD
                 LEFT JOIN BRAND_MASTER BM ON
                         IMTD.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                 LEFT JOIN ?.dbo.User_ usr1 ON
                         usr1.UserId = IMTD.CREATED_BY
                 LEFT JOIN HELPER_TABLE hpricedetailsstatus on hpricedetailsstatus.HELPER_TABLE_SID=IMTD.PS_CONTRACT_ATTACHED_STATUS AND hpricedetailsstatus.DESCRIPTION  NOT like '%Select One%'
                 LEFT JOIN ITEM_PRICING_QUALIFIER IPQ  ON IPQ.ITEM_PRICING_QUALIFIER_SID = IMTD.ITEM_PRICING_QUALIFIER_SID AND IPQ.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                 LEFT JOIN ITEM_MASTER im on
                         im.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                         AND im.INBOUND_STATUS <> 'D'
           
                         WHERE IMTD.PS_CONTRACT_SID = @PS_CONTRACT_ID ?
                 ORDER BY
                         ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;                                                                 
                         
        ]]>
		</query>
	</entity>

	<entity id="getPricingProtectionPendingCount">
		<query>
                <![CDATA[
                DECLARE @PS_CONTRACT_ID INT = ?
                    SELECT
                        COUNT(IMTD.PS_CONT_DET_PENDING_SID)
                     FROM
                            PS_CONTRACT_DETAILS_PENDING IMTD
                   LEFT JOIN BRAND_MASTER BM ON
                            IMTD.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NEPF ON
                            NEPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NEP_FORMULA
                    LEFT JOIN NET_SALES_FORMULA_MASTER NBPF ON
                            NBPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_BASE_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NSPF ON
                            NSPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NRPF ON
                            NRPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_RESET_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NPTF ON
                            NPTF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_PRICE_TYPE_FORMULA
                    LEFT JOIN HELPER_TABLE BPH ON
                            BPH.HELPER_TABLE_SID=IMTD.BASE_PRICE_TYPE
                    LEFT JOIN HELPER_TABLE hpriceprotectionstatus on hpriceprotectionstatus.HELPER_TABLE_SID=IMTD.PRICE_PROTECTION_STATUS AND hpriceprotectionstatus.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN ITEM_PRICING_QUALIFIER IQ  ON IQ.ITEM_PRICING_QUALIFIER_SID = IMTD.PRICE_PROTECTION_PRICE_TYPE AND IQ.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                    LEFT JOIN ITEM_PRICING_QUALIFIER IQ1 ON IQ1.ITEM_PRICING_QUALIFIER_SID = IMTD.SUBSEQUENT_PERIOD_PRICE_TYPE AND IQ1.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                    LEFT JOIN ITEM_PRICING_QUALIFIER IQ2 ON IQ2.ITEM_PRICING_QUALIFIER_SID = IMTD.RESET_PRICE_TYPE AND IQ2.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                    LEFT JOIN HELPER_TABLE hbasepricetype on hbasepricetype.HELPER_TABLE_SID=IMTD.BASE_PRICE_TYPE AND hbasepricetype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hnetbaseprice on hnetbaseprice.HELPER_TABLE_SID=IMTD.NET_BASE_PRICE AND hnetbaseprice.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hnetsubsequentperiodprice on hnetsubsequentperiodprice.HELPER_TABLE_SID=IMTD.NET_SUBSEQUENT_PERIOD_PRICE AND hnetsubsequentperiodprice.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hpricetolint on hpricetolint.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_INTERVAL AND hpricetolint.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hpricetolfre on hpricetolfre.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_FREQUENCY AND hpricetolfre.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hpricetoltype on hpricetoltype.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_TYPE AND hpricetoltype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hreseteligible on hreseteligible.HELPER_TABLE_SID=IMTD.RESET_ELIGIBLE AND hreseteligible.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hresettype on hresettype.HELPER_TABLE_SID=IMTD.RESET_TYPE AND hresettype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hresetinterval on hresetinterval.HELPER_TABLE_SID=IMTD.RESET_INTERVAL AND hresetinterval.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hresetfrequency on hresetfrequency.HELPER_TABLE_SID=IMTD.RESET_FREQUENCY AND hresetfrequency.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hnetresetpricetype on hnetresetpricetype.HELPER_TABLE_SID=IMTD.NET_RESET_PRICE_TYPE AND hnetresetpricetype.DESCRIPTION  NOT like '%Select One%'      
                    LEFT JOIN HELPER_TABLE hnetpricetype on hnetpricetype.HELPER_TABLE_SID=IMTD.NET_PRICE_TYPE AND hnetpricetype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN ITEM_MASTER im on
                            im.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                            AND im.INBOUND_STATUS <> 'D'
                            
                         WHERE IMTD.PS_CONTRACT_SID = @PS_CONTRACT_ID
        ]]>
		</query>
	</entity>

	<entity id="getPricingProtectionPendingResults">
		<query>
                <![CDATA[
                   
                   DECLARE @PS_CONTRACT_ID int = ?

SELECT
                            IMTD.CHECK_RECORD,
                            recordType = '?',
                            im.ITEM_ID,
                            im.ITEM_NO,
                            im.ITEM_NAME,
                            BM.BRAND_NAME,
                            IMTD.PRICE_PROTECTION_STATUS,
                            IMTD.PRICE_PROTECTION_START_DATE,
                            IMTD.PRICE_PROTECTION_END_DATE,
                            IMTD.PRICE_PROTECTION_PRICE_TYPE,
                            NEP=CASE
                                                  WHEN IMTD.NEP IS NULL THEN ''
                                                  ELSE str(IMTD.NEP,16,6)
                                          END,
                            NEP_FORMULA_VAL=CASE
                                                  WHEN IMTD.NEP_FORMULA IS NULL THEN ''
                                                  ELSE NEPF.NET_SALES_FORMULA_NAME
                                          END,
                            IMTD.BASE_PRICE_TYPE,
                            basePriceVal=CASE
                                         WHEN BPH.DESCRIPTION LIKE 'M%' THEN str(ISNULL(CONVERT(VARCHAR(20),IMTD.BASE_PRICE_ENTRY),''),16,2)
                                         WHEN BPH.DESCRIPTION LIKE 'P%' THEN ISNULL(CONVERT(VARCHAR(20),IMTD.BASE_PRICE_DDLB),'')
                                         WHEN BPH.DESCRIPTION LIKE 'D%' THEN ISNULL(CONVERT(VARCHAR(10),IMTD.BASE_PRICE_DATE,101),'')
                                         ELSE ''
                                 END,
                            IMTD.NET_BASE_PRICE,
                            NET_BASE_PRICE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_BASE_PRICE_FORMULA_ID IS NULL THEN ''
                                                  ELSE NBPF.NET_SALES_FORMULA_NAME
                                          END,
                        IMTD.SUBSEQUENT_PERIOD_PRICE_TYPE,
                            IMTD.NET_SUBSEQUENT_PERIOD_PRICE,
                            NET_SUBSEQUENT_PRICE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID IS NULL THEN ''
                                                  ELSE NSPF.NET_SALES_FORMULA_NAME
                                          END,
                        IMTD.PRICE_TOLERANCE_INTERVAL,
                            IMTD.PRICE_TOLERANCE_FREQUENCY,
                            IMTD.PRICE_TOLERANCE_TYPE,

                            PRICE_TOLERANCE=CASE
                                                  WHEN IMTD.PRICE_TOLERANCE IS NULL THEN ''
                                                  ELSE str(IMTD.PRICE_TOLERANCE,16,2)
                                          END,
                            MAX_INCREMENTAL_CHANGE=CASE
                                                  WHEN IMTD.MAX_INCREMENTAL_CHANGE IS NULL THEN ''
                                                  ELSE str(IMTD.MAX_INCREMENTAL_CHANGE,16,2)
                                          END,
                            IMTD.RESET_ELIGIBLE,
                            IMTD.RESET_TYPE,
                            IMTD.RESET_DATE,
                            IMTD.RESET_INTERVAL,
                            IMTD.RESET_FREQUENCY,
                            IMTD.RESET_PRICE_TYPE,
                            IMTD.NET_RESET_PRICE_TYPE,
                            NET_RESET_PRICE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_RESET_PRICE_FORMULA_ID IS NULL THEN ''
                                                  ELSE NRPF.NET_SALES_FORMULA_NAME
                                          END,
                            IMTD.NET_PRICE_TYPE,
                            NET_PRICE_TYPE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_PRICE_TYPE_FORMULA IS NULL THEN ''
                                                  ELSE NPTF.NET_SALES_FORMULA_NAME
                                          END,
                            IMTD.PS_CONTRACT_ATTACHED_DATE,
                            hpriceprotectionstatus.DESCRIPTION AS PP_STATUSPENDING,
                            IQ.ITEM_PRICING_QUALIFIER_NAME AS MEASUREMENT_PRICEPENDING,
                            hbasepricetype.DESCRIPTION AS BASE_PRICE_TYPEPENDING,
                            hnetbaseprice.DESCRIPTION AS NET_BASE_PRICEPENDING,
                            IQ1.ITEM_PRICING_QUALIFIER_NAME AS SUBSEQUENT_PERIOD_PRICE_TYPEPENDING,
                            hnetsubsequentperiodprice.DESCRIPTION AS NET_SUBSEQUENT_PERIOD_PRICEPENDING,
                            hpricetolint.DESCRIPTION AS pricetolintpending,
                            hpricetolfre.DESCRIPTION AS pricetolfrepending,
                            hpricetoltype.DESCRIPTION AS pricetoltypepending,
                            hreseteligible.DESCRIPTION AS reseteligiblepending,                          
                            hresettype.DESCRIPTION AS resettypepending,
                            hresetinterval.DESCRIPTION AS resetintervalpending,
                            hresetfrequency.DESCRIPTION AS resetfrequencypending,
                            IQ2.ITEM_PRICING_QUALIFIER_NAME AS RESET_PRICE_TYPEPENDING,
                            hnetresetpricetype.DESCRIPTION AS netresetpricetypepending,    
                            hnetpricetype.DESCRIPTION AS netpricetypepending,
                            BPH.DESCRIPTION AS BDES,
                            IMTD.BASE_PRICE_DDLB AS IBPDDLB,
                            IMTD.BASE_PRICE_DATE AS IBPD,
                                BASE_PRICE_ENTRYYY=CASE
                                             WHEN IMTD.BASE_PRICE_ENTRY IS NULL THEN ''
                                             ELSE str(IMTD.BASE_PRICE_ENTRY,16,2)
                                     END
                    FROM
                            dbo.PS_CONTRACT_DETAILS_PENDING IMTD
                    LEFT JOIN BRAND_MASTER BM ON
                            IMTD.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NEPF ON
                            NEPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NEP_FORMULA
                    LEFT JOIN NET_SALES_FORMULA_MASTER NBPF ON
                            NBPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_BASE_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NSPF ON
                            NSPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NRPF ON
                            NRPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_RESET_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NPTF ON
                            NPTF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_PRICE_TYPE_FORMULA
                    LEFT JOIN HELPER_TABLE BPH ON
                            BPH.HELPER_TABLE_SID=IMTD.BASE_PRICE_TYPE
                    LEFT JOIN HELPER_TABLE hpriceprotectionstatus on hpriceprotectionstatus.HELPER_TABLE_SID=IMTD.PRICE_PROTECTION_STATUS AND hpriceprotectionstatus.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN ITEM_PRICING_QUALIFIER IQ  ON IQ.ITEM_PRICING_QUALIFIER_SID = IMTD.PRICE_PROTECTION_PRICE_TYPE AND IQ.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                    LEFT JOIN ITEM_PRICING_QUALIFIER IQ1 ON IQ1.ITEM_PRICING_QUALIFIER_SID = IMTD.SUBSEQUENT_PERIOD_PRICE_TYPE AND IQ1.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                    LEFT JOIN ITEM_PRICING_QUALIFIER IQ2 ON IQ2.ITEM_PRICING_QUALIFIER_SID = IMTD.RESET_PRICE_TYPE AND IQ2.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                    LEFT JOIN HELPER_TABLE hbasepricetype on hbasepricetype.HELPER_TABLE_SID=IMTD.BASE_PRICE_TYPE AND hbasepricetype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hnetbaseprice on hnetbaseprice.HELPER_TABLE_SID=IMTD.NET_BASE_PRICE AND hnetbaseprice.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hnetsubsequentperiodprice on hnetsubsequentperiodprice.HELPER_TABLE_SID=IMTD.NET_SUBSEQUENT_PERIOD_PRICE AND hnetsubsequentperiodprice.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hpricetolint on hpricetolint.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_INTERVAL AND hpricetolint.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hpricetolfre on hpricetolfre.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_FREQUENCY AND hpricetolfre.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hpricetoltype on hpricetoltype.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_TYPE AND hpricetoltype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hreseteligible on hreseteligible.HELPER_TABLE_SID=IMTD.RESET_ELIGIBLE AND hreseteligible.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hresettype on hresettype.HELPER_TABLE_SID=IMTD.RESET_TYPE AND hresettype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hresetinterval on hresetinterval.HELPER_TABLE_SID=IMTD.RESET_INTERVAL AND hresetinterval.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hresetfrequency on hresetfrequency.HELPER_TABLE_SID=IMTD.RESET_FREQUENCY AND hresetfrequency.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hnetresetpricetype on hnetresetpricetype.HELPER_TABLE_SID=IMTD.NET_RESET_PRICE_TYPE AND hnetresetpricetype.DESCRIPTION  NOT like '%Select One%'      
                    LEFT JOIN HELPER_TABLE hnetpricetype on hnetpricetype.HELPER_TABLE_SID=IMTD.NET_PRICE_TYPE AND hnetpricetype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN ITEM_MASTER im on
                            im.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                            AND im.INBOUND_STATUS <> 'D'
                            
                         WHERE IMTD.PS_CONTRACT_SID = @PS_CONTRACT_ID ?
                 ORDER BY
                         ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;  
                   
        ]]>
		</query>
	</entity>


	<entity id="com.contractDashboard.process.saveCFPPENDINGDeleteQuery">
		<query>
                <![CDATA[
                    DECLARE @CFP_CONTRACT_ID INT = ?
                    DELETE FROM CFP_CONTRACT_DETAILS_PENDING WHERE CFP_CONTRACT_SID=@CFP_CONTRACT_ID;
                   ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.saveIFPPENDINGDeleteQuery">
		<query>
                <![CDATA[
                    DECLARE @IFP_CONTRACT_ID INT = ?
                    DELETE FROM IMTD_IFP_DETAILS_PENDING WHERE IFP_CONTRACT_SID=@IFP_CONTRACT_ID;
                   ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.savePSPENDINGDeleteQuery">
		<query>
                <![CDATA[
                    DECLARE @PS_CONTRACT_ID INT = ?
                    DELETE FROM PS_CONTRACT_DETAILS_PENDING WHERE PS_CONTRACT_SID=@PS_CONTRACT_ID;
                   ]]>
		</query>
	</entity>

	<entity id="com.contractDashboard.process.saveRSPENDINGDeleteQuery">
		<query>
                <![CDATA[
                    DECLARE @RS_CONTRACT_ID INT = ?
                    DELETE FROM RS_CONTRACT_DETAILS_PENDING WHERE RS_CONTRACT_SID=@RS_CONTRACT_ID;
                   ]]>
		</query>
	</entity>
	<entity id="contractAddLineQuery">
		<query>
        <![CDATA[
        DECLARE @USERS_SID int =?,
            @SESSION_ID VARCHAR(15)=?
                
INSERT INTO IMTD_ITEM_PRICE_REBATE_DETAILS (
       ITEM_MASTER_SID
       ,ITEM_ID
       ,ITEM_NO
       ,ITEM_NAME
       ,ITEM_TYPE
       ,CONTRACT_MASTER_SID
       ,CFP_MODEL_SID
       ,IFP_MODEL_SID
       ,PS_MODEL_SID
       ,REBATE_AMOUNT
       ,RS_MODEL_SID
       ,REBATE_SCHEDULE_TYPE
       ,REBATE_PROGRAM_TYPE
       ,UDC1
       ,UDC2
       ,UDC3
       ,UDC4
       ,UDC5
       ,UDC6
       ,START_DATE
       ,END_DATE
       ,ATTACHED_STATUS
       ,ATTACHED_DATE
       ,CONTRACT_PRICE_START_DATE
       ,CONTRACT_PRICE_END_DATE
       ,PRICE_TYPE
       ,CONTRACT_PRICE
       ,PRICE_REVISION
       ,ITEM_PRICE_REVISION_DATE
       ,BASE_PRICE
       ,PRICE_PLAN_ID
       ,RS_DETAILS_SID
       ,PS_DETAILS_SID
       ,IFP_DETAILS_SID
       ,PS_STATUS
       ,RS_CHECK_RECORD
       ,RS_ATTACHED_STATUS
       ,RS_ATTACHED_DATE
       ,ITEM_REBATE_START_DATE
       ,ITEM_REBATE_END_DATE
       ,REBATE_PLAN_SYSTEM_ID
       ,TOTAL_VOLUME_COMMITMENT
       ,TOTAL_DOLLAR_COMMITMENT
       ,TOTAL_MARKET_SHARE_COMMITMNET
       ,COMMITMENT_PERIOD
       ,SUGGESTED_PRICE
       ,PRICE
       ,RECORD_LOCK_STATUS
       ,REBATE_REVISION_DATE
       ,BUNDLE_NO
       ,FORMULA_METHOD_ID
       ,FORMULA_ID
       ,FORMULA_NAME
       ,USERS_SID
       ,SESSION_ID
       ,CHECK_RECORD
       ,IMTD_CREATED_DATE
       ,OPERATION
       ,CREATED_BY
       ,CREATED_DATE
       ,MODIFIED_BY
       ,MODIFIED_DATE
       ,DEDUCTION_CALENDAR_MASTER_SID
       ,RS_CONTRACT_DETAILS_REBATE_PLAN_NAME
       ,RS_CONTRACT_DETAILS_FORMULA_NO
       ,SOURCE
       ,RS_CONTRACT_DETAILS_DEDUCTION_CALENDAR_NO
       ,RS_CONTRACT_DETAILS_DEDUCTION_CALENDAR_NAME
       ,NET_SALES_FORMULA_MASTER_SID
       ,RS_CONTRACT_DETAILS_NET_SALES_FORMULA_NO
       ,RS_CONTRACT_DETAILS_NET_SALES_FORMULA_NAME
       ,FORMULA_TYPE
       ,NET_SALES_RULE
       ,EVALUATION_RULE
       ,EVALUATION_RULE_BUNDLE
       ,CALCULATION_RULE
       ,CALCULATION_RULE_BUNDLE
       ,BRAND_MASTER_SID
       ,BASE_PRICE_TYPE
       ,BASE_PRICE_ENTRY
       ,ADD_COPY_INDICATOR
       ,PPA_INDEX_NO
       )
SELECT ITEM_MASTER_SID
       ,ITEM_ID
       ,ITEM_NO
       ,ITEM_NAME
       ,ITEM_TYPE
       ,CONTRACT_MASTER_SID
       ,CFP_MODEL_SID
       ,IFP_MODEL_SID
       ,PS_MODEL_SID
       ,REBATE_AMOUNT
       ,RS_MODEL_SID
       ,REBATE_SCHEDULE_TYPE
       ,REBATE_PROGRAM_TYPE
       ,UDC1
       ,UDC2
       ,UDC3
       ,UDC4
       ,UDC5
       ,UDC6
       ,START_DATE
       ,END_DATE
       ,ATTACHED_STATUS
       ,ATTACHED_DATE
       ,CONTRACT_PRICE_START_DATE
       ,CONTRACT_PRICE_END_DATE
       ,PRICE_TYPE
       ,CONTRACT_PRICE
       ,PRICE_REVISION
       ,ITEM_PRICE_REVISION_DATE
       ,BASE_PRICE
       ,PRICE_PLAN_ID
       ,RS_DETAILS_SID
       ,PS_DETAILS_SID
       ,IFP_DETAILS_SID
       ,PS_STATUS
       ,RS_CHECK_RECORD
       ,RS_ATTACHED_STATUS
       ,RS_ATTACHED_DATE
       ,ITEM_REBATE_START_DATE
       ,ITEM_REBATE_END_DATE
       ,REBATE_PLAN_SYSTEM_ID
       ,TOTAL_VOLUME_COMMITMENT
       ,TOTAL_DOLLAR_COMMITMENT
       ,TOTAL_MARKET_SHARE_COMMITMNET
       ,COMMITMENT_PERIOD
       ,SUGGESTED_PRICE
       ,PRICE
       ,0 as RECORD_LOCK_STATUS
       ,REBATE_REVISION_DATE
       ,BUNDLE_NO
       ,FORMULA_METHOD_ID
       ,FORMULA_ID
       ,FORMULA_NAME
       ,USERS_SID
       ,SESSION_ID
       ,0 AS CHECK_RECORD
       ,IMTD_CREATED_DATE
       ,OPERATION
       ,CREATED_BY
       ,CREATED_DATE
       ,MODIFIED_BY
       ,MODIFIED_DATE
       ,DEDUCTION_CALENDAR_MASTER_SID
       ,RS_CONTRACT_DETAILS_REBATE_PLAN_NAME
       ,RS_CONTRACT_DETAILS_FORMULA_NO
       ,SOURCE
       ,RS_CONTRACT_DETAILS_DEDUCTION_CALENDAR_NO
       ,RS_CONTRACT_DETAILS_DEDUCTION_CALENDAR_NAME
       ,NET_SALES_FORMULA_MASTER_SID
       ,RS_CONTRACT_DETAILS_NET_SALES_FORMULA_NO
       ,RS_CONTRACT_DETAILS_NET_SALES_FORMULA_NAME
       ,FORMULA_TYPE
       ,NET_SALES_RULE
       ,EVALUATION_RULE
       ,EVALUATION_RULE_BUNDLE
       ,CALCULATION_RULE
       ,CALCULATION_RULE_BUNDLE
       ,BRAND_MASTER_SID
       ,BASE_PRICE_TYPE
       ,BASE_PRICE_ENTRY
       ,'A' AS ADD_COPY_INDICATOR
       ,COALESCE(CS.COUNT_VALUE, 0) + ROW_NUMBER() OVER (
               PARTITION BY ITEM_MASTER_SID
               ,PS_MODEL_SID,CONTRACT_PRICE_START_DATE ORDER BY PRICE_PROTECTION_START_DATE
               )
FROM IMTD_ITEM_PRICE_REBATE_DETAILS A
OUTER APPLY (
       SELECT TOP 1 MAX(B.PPA_INDEX_NO) OVER (
                     PARTITION BY ITEM_MASTER_SID,
                     PS_MODEL_SID,
                     CONTRACT_PRICE_START_DATE
                     ) COUNT_VALUE
       FROM IMTD_ITEM_PRICE_REBATE_DETAILS B
       WHERE A.ITEM_MASTER_SID = B.ITEM_MASTER_SID
              AND A.PS_MODEL_SID = B.PS_MODEL_SID
              AND A.CONTRACT_PRICE_START_DATE = B.CONTRACT_PRICE_START_DATE
              AND A.USERS_SID = B.USERS_SID
              AND A.SESSION_ID = B.SESSION_ID
       ) CS
                WHERE
                       USERS_SID = @USERS_SID
                       and SESSION_ID = @SESSION_ID
                       AND CHECK_RECORD = '1'
        ]]>
		</query>
	</entity>
	<entity id="contractCopyLineQuery">
		<query>
        <![CDATA[
        DECLARE @USERS_SID int =?,
            @SESSION_ID VARCHAR(15)=?
            
        
          INSERT INTO IMTD_ITEM_PRICE_REBATE_DETAILS (
       ITEM_MASTER_SID
       ,ITEM_ID
       ,ITEM_NO
       ,ITEM_NAME
       ,ITEM_TYPE
       ,CONTRACT_MASTER_SID
       ,CFP_MODEL_SID
       ,IFP_MODEL_SID
       ,PS_MODEL_SID
       ,REBATE_AMOUNT
       ,RS_MODEL_SID
       ,REBATE_SCHEDULE_TYPE
       ,REBATE_PROGRAM_TYPE
       ,UDC1
       ,UDC2
       ,UDC3
       ,UDC4
       ,UDC5
       ,UDC6
       ,START_DATE
       ,END_DATE
       ,ATTACHED_STATUS
       ,ATTACHED_DATE
       ,CONTRACT_PRICE_START_DATE
       ,CONTRACT_PRICE_END_DATE
       ,PRICE_TYPE
       ,CONTRACT_PRICE
       ,PRICE_REVISION
       ,ITEM_PRICE_REVISION_DATE
       ,PRICE_PROTECTION_START_DATE
       ,PRICE_PROTECTION_END_DATE
       ,PRICE_TOLERANCE_TYPE
       ,PRICE_TOLERANCE
       ,BASE_PRICE
       ,PRICE_TOLERANCE_FREQUENCY
       ,PRICE_TOLERANCE_INTERVAL
       ,PRICE_PLAN_ID
       ,RS_DETAILS_SID
       ,PS_DETAILS_SID
       ,IFP_DETAILS_SID
       ,PS_STATUS
       ,RS_CHECK_RECORD
       ,RS_ATTACHED_STATUS
       ,RS_ATTACHED_DATE
       ,ITEM_REBATE_START_DATE
       ,ITEM_REBATE_END_DATE
       ,REBATE_PLAN_SYSTEM_ID
       ,TOTAL_VOLUME_COMMITMENT
       ,TOTAL_DOLLAR_COMMITMENT
       ,TOTAL_MARKET_SHARE_COMMITMNET
       ,COMMITMENT_PERIOD
       ,SUGGESTED_PRICE
       ,PRICE
       ,RECORD_LOCK_STATUS
       ,REBATE_REVISION_DATE
       ,BUNDLE_NO
       ,FORMULA_METHOD_ID
       ,FORMULA_ID
       ,FORMULA_NAME
       ,USERS_SID
       ,SESSION_ID
       ,CHECK_RECORD
       ,IMTD_CREATED_DATE
       ,OPERATION
       ,CREATED_BY
       ,CREATED_DATE
       ,MODIFIED_BY
       ,MODIFIED_DATE
       ,DEDUCTION_CALENDAR_MASTER_SID
       ,BASE_PRICE_DDLB
       ,RS_CONTRACT_DETAILS_REBATE_PLAN_NAME
       ,RS_CONTRACT_DETAILS_FORMULA_NO
       ,SOURCE
       ,RS_CONTRACT_DETAILS_DEDUCTION_CALENDAR_NO
       ,RS_CONTRACT_DETAILS_DEDUCTION_CALENDAR_NAME
       ,NET_SALES_FORMULA_MASTER_SID
       ,RS_CONTRACT_DETAILS_NET_SALES_FORMULA_NO
       ,RS_CONTRACT_DETAILS_NET_SALES_FORMULA_NAME
       ,FORMULA_TYPE
       ,NET_SALES_RULE
       ,EVALUATION_RULE
       ,EVALUATION_RULE_BUNDLE
       ,CALCULATION_RULE
       ,CALCULATION_RULE_BUNDLE
       ,MAX_INCREMENTAL_CHANGE
       ,RESET_ELIGIBLE
       ,RESET_TYPE
       ,RESET_DATE
       ,RESET_INTERVAL
       ,RESET_FREQUENCY
       ,NET_PRICE_TYPE
       ,NET_PRICE_TYPE_FORMULA
       ,PRICE_PROTECTION_PRICE_TYPE
       ,NEP
       ,NEP_FORMULA
       ,BRAND_MASTER_SID
       ,PRICE_PROTECTION_STATUS
       ,BASE_PRICE_TYPE
       ,BASE_PRICE_ENTRY
       ,NET_BASE_PRICE
       ,NET_BASE_PRICE_FORMULA_ID
       ,SUBSEQUENT_PERIOD_PRICE_TYPE
       ,NET_SUBSEQUENT_PRICE_FORMULA_ID
       ,RESET_PRICE_TYPE
       ,NET_RESET_PRICE_FORMULA_ID
       ,NET_RESET_PRICE_TYPE
       ,NET_SUBSEQUENT_PERIOD_PRICE
       ,BASE_PRICE_DATE
       ,ADD_COPY_INDICATOR
       ,PPA_INDEX_NO
       )
SELECT ITEM_MASTER_SID
       ,ITEM_ID
       ,ITEM_NO
       ,ITEM_NAME
       ,ITEM_TYPE
       ,CONTRACT_MASTER_SID
       ,CFP_MODEL_SID
       ,IFP_MODEL_SID
       ,PS_MODEL_SID
       ,REBATE_AMOUNT
       ,RS_MODEL_SID
       ,REBATE_SCHEDULE_TYPE
       ,REBATE_PROGRAM_TYPE
       ,UDC1
       ,UDC2
       ,UDC3
       ,UDC4
       ,UDC5
       ,UDC6
       ,START_DATE
       ,END_DATE
       ,ATTACHED_STATUS
       ,ATTACHED_DATE
       ,CONTRACT_PRICE_START_DATE
       ,CONTRACT_PRICE_END_DATE
       ,PRICE_TYPE
       ,CONTRACT_PRICE
       ,PRICE_REVISION
       ,ITEM_PRICE_REVISION_DATE
       ,PRICE_PROTECTION_START_DATE
       ,PRICE_PROTECTION_END_DATE
       ,PRICE_TOLERANCE_TYPE
       ,PRICE_TOLERANCE
       ,BASE_PRICE
       ,PRICE_TOLERANCE_FREQUENCY
       ,PRICE_TOLERANCE_INTERVAL
       ,PRICE_PLAN_ID
       ,RS_DETAILS_SID
       ,PS_DETAILS_SID
       ,IFP_DETAILS_SID
       ,PS_STATUS
       ,RS_CHECK_RECORD
       ,RS_ATTACHED_STATUS
       ,RS_ATTACHED_DATE
       ,ITEM_REBATE_START_DATE
       ,ITEM_REBATE_END_DATE
       ,REBATE_PLAN_SYSTEM_ID
       ,TOTAL_VOLUME_COMMITMENT
       ,TOTAL_DOLLAR_COMMITMENT
       ,TOTAL_MARKET_SHARE_COMMITMNET
       ,COMMITMENT_PERIOD
       ,SUGGESTED_PRICE
       ,PRICE
       ,RECORD_LOCK_STATUS
       ,REBATE_REVISION_DATE
       ,BUNDLE_NO
       ,FORMULA_METHOD_ID
       ,FORMULA_ID
       ,FORMULA_NAME
       ,USERS_SID
       ,SESSION_ID
       ,0 AS CHECK_RECORD
       ,IMTD_CREATED_DATE
       ,OPERATION
       ,CREATED_BY
       ,CREATED_DATE
       ,MODIFIED_BY
       ,MODIFIED_DATE
       ,DEDUCTION_CALENDAR_MASTER_SID
       ,BASE_PRICE_DDLB
       ,RS_CONTRACT_DETAILS_REBATE_PLAN_NAME
       ,RS_CONTRACT_DETAILS_FORMULA_NO
       ,SOURCE
       ,RS_CONTRACT_DETAILS_DEDUCTION_CALENDAR_NO
       ,RS_CONTRACT_DETAILS_DEDUCTION_CALENDAR_NAME
       ,NET_SALES_FORMULA_MASTER_SID
       ,RS_CONTRACT_DETAILS_NET_SALES_FORMULA_NO
       ,RS_CONTRACT_DETAILS_NET_SALES_FORMULA_NAME
       ,FORMULA_TYPE
       ,NET_SALES_RULE
       ,EVALUATION_RULE
       ,EVALUATION_RULE_BUNDLE
       ,CALCULATION_RULE
       ,CALCULATION_RULE_BUNDLE
       ,MAX_INCREMENTAL_CHANGE
       ,RESET_ELIGIBLE
       ,RESET_TYPE
       ,RESET_DATE
       ,RESET_INTERVAL
       ,RESET_FREQUENCY
       ,NET_PRICE_TYPE
       ,NET_PRICE_TYPE_FORMULA
       ,PRICE_PROTECTION_PRICE_TYPE
       ,NEP
       ,NEP_FORMULA
       ,BRAND_MASTER_SID
       ,PRICE_PROTECTION_STATUS
       ,BASE_PRICE_TYPE
       ,BASE_PRICE_ENTRY
       ,NET_BASE_PRICE
       ,NET_BASE_PRICE_FORMULA_ID
       ,SUBSEQUENT_PERIOD_PRICE_TYPE
       ,NET_SUBSEQUENT_PRICE_FORMULA_ID
       ,RESET_PRICE_TYPE
       ,NET_RESET_PRICE_FORMULA_ID
       ,NET_RESET_PRICE_TYPE
       ,NET_SUBSEQUENT_PERIOD_PRICE
       ,BASE_PRICE_DATE
       ,'A' AS ADD_COPY_INDICATOR
      ,COALESCE(CS.COUNT_VALUE, 0) + ROW_NUMBER() OVER (
               PARTITION BY ITEM_MASTER_SID
               ,PS_MODEL_SID,CONTRACT_PRICE_START_DATE ORDER BY PRICE_PROTECTION_START_DATE
               ) 
FROM IMTD_ITEM_PRICE_REBATE_DETAILS A
OUTER APPLY (
       SELECT TOP 1 MAX(B.PPA_INDEX_NO) OVER (
                     PARTITION BY ITEM_MASTER_SID,
                     PS_MODEL_SID,
                     CONTRACT_PRICE_START_DATE
                     ) COUNT_VALUE
       FROM IMTD_ITEM_PRICE_REBATE_DETAILS B
       WHERE A.ITEM_MASTER_SID = B.ITEM_MASTER_SID
              AND A.PS_MODEL_SID = B.PS_MODEL_SID
              AND A.CONTRACT_PRICE_START_DATE = B.CONTRACT_PRICE_START_DATE
              AND A.USERS_SID = B.USERS_SID
              AND A.SESSION_ID = B.SESSION_ID
       ) CS
                WHERE
                       USERS_SID = @USERS_SID
                       and SESSION_ID = @SESSION_ID
                       AND CHECK_RECORD = '1'
        ]]>
		</query>
	</entity>
	<entity id="getDeleteLineQuery">
		<query> 
            <![CDATA[ 
			DECLARE 
			@USERS_SID VARCHAR(10) = ?,
			@SESSION_ID VARCHAR(10)=?
			
			DELETE  FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS where CHECK_RECORD = 1 and ADD_COPY_INDICATOR = 'A' AND USERS_SID=@USERS_SID	AND SESSION_ID= @SESSION_ID;
		]]>
                </query>
	</entity>
	
		<entity id="getCompaniessViewDetailsPendingCount">
		<query>
                <![CDATA[
           DECLARE @CFP_CONTRACT_ID INT = ?       
;WITH CDT
AS (
       SELECT 
              cm.COMPANY_ID
              ,cm.COMPANY_NO
              ,cm.COMPANY_NAME
              ,IMTD.CFP_CONTRACT_ATTACHED_STATUS
              ,IMTD.COMPANY_START_DATE
              ,IMTD.COMPANY_END_DATE
              ,HSTATUS.DESCRIPTION AS CSTATUS
              ,HTYPE.DESCRIPTION AS CTYPE
              ,HTRADE.DESCRIPTION AS COMPANY_TRADE_CLASS
              ,HCATEGORY.DESCRIPTION AS CCATEGORY
              ,TRADECONTACT = ''
              ,IMTD.CFP_CONTRACT_ATTACHED_DATE
              ,IMTD.MODIFIED_DATE
              ,USR.FIRSTNAME + ' ' + USR.MIDDLENAME + ' ' + USR.LASTNAME AS MODIFIED_BY
              ,IMTD.CREATED_DATE
              ,USR1.FIRSTNAME + ' ' + USR1.MIDDLENAME + ' ' + USR1.LASTNAME AS CREATED_BY
              ,hattachedstatus.DESCRIPTION AS CFP_PENDINGSTATUS

       FROM CFP_CONTRACT_DETAILS_PENDING IMTD
       JOIN COMPANY_MASTER CM ON CM.COMPANY_MASTER_SID = IMTD.COMPANY_MASTER_SID
              AND CM.INBOUND_STATUS <> 'D'
       LEFT JOIN HELPER_TABLE HTRADE ON HTRADE.HELPER_TABLE_SID = IMTD.TRADE_CLASS
              AND HTRADE.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE HCATEGORY ON HCATEGORY.HELPER_TABLE_SID = CM.COMPANY_CATEGORY
              AND HCATEGORY.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE HSTATUS ON HSTATUS.HELPER_TABLE_SID = cm.COMPANY_STATUS
              AND HSTATUS.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE HTYPE ON HTYPE.HELPER_TABLE_SID = cm.COMPANY_TYPE
              AND HTYPE.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE hattachedstatus on hattachedstatus.HELPER_TABLE_SID=IMTD.CFP_CONTRACT_ATTACHED_STATUS AND hattachedstatus.DESCRIPTION  NOT like '%Select One%'
       LEFT JOIN ?.DBO.USER_ USR ON USR.USERID = IMTD.MODIFIED_BY
       LEFT JOIN ?.DBO.USER_ USR1 ON USR1.USERID = IMTD.CREATED_BY
       WHERE IMTD.CFP_CONTRACT_SID=@CFP_CONTRACT_ID
       )
            SELECT
		COUNT(1)
             FROM CDT  WHERE COMPANY_ID is not null
                     
        ]]>
		</query>
	</entity>
	
		<entity id="getCompaniessDetailsViewPendingResults">
		<query>
                <![CDATA[
           DECLARE @CFP_CONTRACT_ID INT = ?       
;WITH CDT
AS (
       SELECT 
              cm.COMPANY_ID
              ,cm.COMPANY_NO
              ,cm.COMPANY_NAME
              ,IMTD.CFP_CONTRACT_ATTACHED_STATUS
              ,IMTD.COMPANY_START_DATE
              ,IMTD.COMPANY_END_DATE
              ,HSTATUS.DESCRIPTION AS CSTATUS
              ,HTYPE.DESCRIPTION AS CTYPE
              ,HTRADE.DESCRIPTION AS COMPANY_TRADE_CLASS
              ,HCATEGORY.DESCRIPTION AS CCATEGORY
              ,TRADECONTACT = ''
              ,IMTD.CFP_CONTRACT_ATTACHED_DATE
              ,IMTD.MODIFIED_DATE
              ,USR.FIRSTNAME + ' ' + USR.MIDDLENAME + ' ' + USR.LASTNAME AS MODIFIED_BY
              ,IMTD.CREATED_DATE
              ,USR1.FIRSTNAME + ' ' + USR1.MIDDLENAME + ' ' + USR1.LASTNAME AS CREATED_BY
              ,hattachedstatus.DESCRIPTION AS CFP_PENDINGSTATUS

       FROM CFP_CONTRACT_DETAILS_PENDING IMTD
       JOIN COMPANY_MASTER CM ON CM.COMPANY_MASTER_SID = IMTD.COMPANY_MASTER_SID
              AND CM.INBOUND_STATUS <> 'D'
       LEFT JOIN HELPER_TABLE HTRADE ON HTRADE.HELPER_TABLE_SID = IMTD.TRADE_CLASS
              AND HTRADE.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE HCATEGORY ON HCATEGORY.HELPER_TABLE_SID = CM.COMPANY_CATEGORY
              AND HCATEGORY.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE HSTATUS ON HSTATUS.HELPER_TABLE_SID = cm.COMPANY_STATUS
              AND HSTATUS.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE HTYPE ON HTYPE.HELPER_TABLE_SID = cm.COMPANY_TYPE
              AND HTYPE.DESCRIPTION NOT LIKE '%SELECT ONE%'
       LEFT JOIN HELPER_TABLE hattachedstatus on hattachedstatus.HELPER_TABLE_SID=IMTD.CFP_CONTRACT_ATTACHED_STATUS AND hattachedstatus.DESCRIPTION  NOT like '%Select One%'              
       LEFT JOIN ?.DBO.USER_ USR ON USR.USERID = IMTD.MODIFIED_BY
       LEFT JOIN ?.DBO.USER_ USR1 ON USR1.USERID = IMTD.CREATED_BY
       WHERE IMTD.CFP_CONTRACT_SID=@CFP_CONTRACT_ID
       )
SELECT
		*
             FROM CDT  WHERE COMPANY_ID is not null
                     ?
                     ORDER BY ?
                    OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	
		<entity id="getItemsDetailsViewPendingResults">
		<query>
                <![CDATA[
                DECLARE @IFP_CONTRACT_ID INT = ?
                          SELECT
                         recordType = '?',
                         im.ITEM_NO,
                         im.ITEM_NAME,
                         im.ITEM_DESC,
                         IMTD.ITEM_STATUS,
                         IMTD.ITEM_START_DATE,
                         IMTD.ITEM_END_DATE,
                         status = CASE
                                 WHEN hstatus.DESCRIPTION like '%Select One%' THEN ''
                                 ELSE hstatus.DESCRIPTION
                         END,
                         form = CASE
                                 WHEN hform.DESCRIPTION like '%Select One%' THEN ''
                                 ELSE hform.DESCRIPTION
                         END,
                         strength=CASE
                                         WHEN hstrength.DESCRIPTION like '%Select One%' THEN ''
                                     ELSE hstrength.DESCRIPTION
                                     END,
                         therapeutic=CASE
                                         WHEN htherapeutic.DESCRIPTION like '%Select One%' THEN ''
                                     ELSE htherapeutic.DESCRIPTION
                                     END,
                         BM.BRAND_NAME AS BRAND,
                         IMTD.IFP_DETAILS_ATTACHED_DATE,
                         IMTD.MODIFIED_DATE,
                         usr.firstName + ' ' + usr.middleName + ' ' + usr.lastName as MODIFIED_BY,
                         IMTD.CREATED_DATE,
                         usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY
                         ,hitemsStatus.DESCRIPTION as ITEM_PENDINGSTATUS
                 from
                         IMTD_IFP_DETAILS_PENDING IMTD
                 LEFT JOIN ITEM_MASTER im on
                         im.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                         AND im.INBOUND_STATUS <> 'D'
                 LEFT JOIN HELPER_TABLE hform on
                         hform.HELPER_TABLE_SID = im.FORM
                 LEFT JOIN HELPER_TABLE hstrength on
                         hstrength.HELPER_TABLE_SID = im.STRENGTH
                 LEFT JOIN HELPER_TABLE htherapeutic on
                         htherapeutic.HELPER_TABLE_SID = im.THERAPEUTIC_CLASS
                 LEFT JOIN HELPER_TABLE hstatus on
                         hstatus.HELPER_TABLE_SID = im.ITEM_STATUS
                 LEFT JOIN HELPER_TABLE hpackageSize on
                         hpackageSize.HELPER_TABLE_SID = im.PACKAGE_SIZE Left Join BRAND_MASTER BM ON
                         im.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                 LEFT JOIN HELPER_TABLE hitemsStatus on
	                     hitemsStatus.HELPER_TABLE_SID = IMTD.ITEM_STATUS    
                 LEFT JOIN ? . dbo.User_ usr ON
                         usr.UserId = IMTD.MODIFIED_BY
                 LEFT JOIN ? . dbo.User_ usr1 ON
                         usr1.UserId = IMTD.CREATED_BY
                 WHERE IMTD.IFP_CONTRACT_SID=@IFP_CONTRACT_ID ?
                 
                 ORDER BY
                         ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;
        ]]>
		</query>
	</entity>
	
<entity id="getRebateDetailsViewPendingResults">
		<query>
                <![CDATA[
DECLARE @RS_CONTRACT_ID int = ?
SELECT
  recordType = '?',
  IM.ITEM_NO,
  IM.ITEM_NAME,
  itemType =
            CASE
              WHEN hitp.DESCRIPTION LIKE '%Select One%' THEN ''
              ELSE hitp.DESCRIPTION
            END,
  FORMULA_ID_VAL=ISNULL(CONVERT(varchar(20),IMTD.FORMULA_ID),''),  
  FORMULA_NAME_VAL=ISNULL(FF.FORMULA_NAME,''),
  REBATE_PLAN_NAME_VAL =
                        CASE
                          WHEN IMTD.REBATE_PLAN_MASTER_SID IS NULL THEN ''
                          ELSE RPM.REBATE_PLAN_NAME
                        END,
  IMTD.ITEM_REBATE_START_DATE,
  IMTD.ITEM_REBATE_END_DATE,            
  null as REBATE_REVISION_DATE
  
FROM dbo.RS_CONTRACT_DETAILS_PENDING IMTD
JOIN ITEM_MASTER IM
  ON IM.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
LEFT JOIN DBO.HELPER_TABLE hitp
  ON hitp.HELPER_TABLE_SID = IMTD.RS_CONTRACT_ATTACHED_STATUS
LEFT JOIN DBO.REBATE_PLAN_MASTER RPM
  ON RPM.REBATE_PLAN_MASTER_SID = IMTD.REBATE_PLAN_MASTER_SID
LEFT JOIN DBO.DEDUCTION_CALENDAR_MASTER DC
  ON DC.DEDUCTION_CALENDAR_MASTER_SID = IMTD.DEDUCTION_CALENDAR_MASTER_SID
LEFT JOIN DBO.FORECASTING_FORMULA FF
  ON FF.FORECASTING_FORMULA_SID = IMTD.FORMULA_ID
LEFT JOIN DBO.NET_SALES_FORMULA_MASTER NSFM
  ON NSFM.NET_SALES_FORMULA_MASTER_SID = IMTD.NET_SALES_FORMULA_MASTER_SID
LEFT JOIN DBO.CDR_MODEL NET
  ON NET.CDR_MODEL_SID = IMTD.NET_SALES_RULE
LEFT JOIN DBO.CDR_MODEL EVA
  ON EVA.CDR_MODEL_SID = IMTD.EVALUATION_RULE
LEFT JOIN DBO.CDR_MODEL CAL
  ON CAL.CDR_MODEL_SID = IMTD.CALCULATION_RULE
WHERE IMTD.RS_CONTRACT_SID = @RS_CONTRACT_ID ?

ORDER BY
        ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;

]]>
		</query>
	</entity>
	
	<entity id="getPricingDetailsViewPendingResults">
		<query>
                <![CDATA[
                DECLARE @PS_CONTRACT_ID int = ?

SELECT
                         recordType = '?',
                         im.ITEM_ID,
                         im.ITEM_NO,
                         im.ITEM_NAME,
                         BM.BRAND_NAME,
                         IMTD.PS_CONTRACT_ATTACHED_STATUS,
                         IMTD.CONTRACT_PRICE_START_DATE,
                         IMTD.CONTRACT_PRICE_END_DATE,
                         IMTD.ITEM_PRICING_QUALIFIER_SID,
                         PRICE=CASE
                                               WHEN IMTD.PRICE<>0 THEN str(IMTD.PRICE,16,2)
                                               ELSE ''
                                       END,
                         SUGGESTED_PRICE=CASE
                                               WHEN IMTD.SUGGESTED_PRICE<>0 THEN str(IMTD.SUGGESTED_PRICE,16,2)
                                               ELSE ''
                                       END,
                         IMTD."SOURCE",
                         usr1.firstName + ' ' + usr1.middleName + ' ' + usr1.lastName as CREATED_BY,
                         IMTD.CREATED_DATE,
                         IMTD.PS_CONTRACT_ATTACHED_DATE,
                         hpricedetailsstatus.DESCRIPTION AS PD_STATUSVIEWPENDING,
                         IPQ.ITEM_PRICING_QUALIFIER_NAME AS PD_PRICETYPEVIEWPENDING
                 FROM
                         dbo.PS_CONTRACT_DETAILS_PENDING IMTD
                 LEFT JOIN BRAND_MASTER BM ON
                         IMTD.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                 LEFT JOIN ?.dbo.User_ usr1 ON
                         usr1.UserId = IMTD.CREATED_BY
                 LEFT JOIN HELPER_TABLE hpricedetailsstatus on hpricedetailsstatus.HELPER_TABLE_SID=IMTD.PS_CONTRACT_ATTACHED_STATUS AND hpricedetailsstatus.DESCRIPTION  NOT like '%Select One%'
                 LEFT JOIN ITEM_PRICING_QUALIFIER IPQ  ON IPQ.ITEM_PRICING_QUALIFIER_SID = IMTD.ITEM_PRICING_QUALIFIER_SID AND IPQ.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                 LEFT JOIN ITEM_MASTER im on
                         im.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                         AND im.INBOUND_STATUS <> 'D'
           
                         WHERE IMTD.PS_CONTRACT_SID = @PS_CONTRACT_ID ?
                 ORDER BY
                         ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;                                                                 
                         
        ]]>
		</query>
	</entity>
	
	
	
		<entity id="getPricingProtectionViewPendingCount">
		<query>
                <![CDATA[
                DECLARE @PS_CONTRACT_ID INT = ?
                    SELECT
                        COUNT(IMTD.PS_CONT_DET_PENDING_SID)
                     FROM
                            PS_CONTRACT_DETAILS_PENDING IMTD
                   LEFT JOIN BRAND_MASTER BM ON
                            IMTD.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NEPF ON
                            NEPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NEP_FORMULA
                    LEFT JOIN NET_SALES_FORMULA_MASTER NBPF ON
                            NBPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_BASE_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NSPF ON
                            NSPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NRPF ON
                            NRPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_RESET_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NPTF ON
                            NPTF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_PRICE_TYPE_FORMULA
                    LEFT JOIN HELPER_TABLE BPH ON
                            BPH.HELPER_TABLE_SID=IMTD.BASE_PRICE_TYPE
                            
                    LEFT JOIN HELPER_TABLE hpriceprotectionstatus on hpriceprotectionstatus.HELPER_TABLE_SID=IMTD.PRICE_PROTECTION_STATUS AND hpriceprotectionstatus.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN ITEM_PRICING_QUALIFIER IQ  ON IQ.ITEM_PRICING_QUALIFIER_SID = IMTD.PRICE_PROTECTION_PRICE_TYPE AND IQ.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                    LEFT JOIN ITEM_PRICING_QUALIFIER IQ1 ON IQ1.ITEM_PRICING_QUALIFIER_SID = IMTD.SUBSEQUENT_PERIOD_PRICE_TYPE AND IQ1.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                    LEFT JOIN ITEM_PRICING_QUALIFIER IQ2 ON IQ2.ITEM_PRICING_QUALIFIER_SID = IMTD.RESET_PRICE_TYPE AND IQ2.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                    LEFT JOIN HELPER_TABLE hbasepricetype on hbasepricetype.HELPER_TABLE_SID=IMTD.BASE_PRICE_TYPE AND hbasepricetype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hnetbaseprice on hnetbaseprice.HELPER_TABLE_SID=IMTD.NET_BASE_PRICE AND hnetbaseprice.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hnetsubsequentperiodprice on hnetsubsequentperiodprice.HELPER_TABLE_SID=IMTD.NET_SUBSEQUENT_PERIOD_PRICE AND hnetsubsequentperiodprice.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hpricetolint on hpricetolint.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_INTERVAL AND hpricetolint.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hpricetolfre on hpricetolfre.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_FREQUENCY AND hpricetolfre.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hpricetoltype on hpricetoltype.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_TYPE AND hpricetoltype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hreseteligible on hreseteligible.HELPER_TABLE_SID=IMTD.RESET_ELIGIBLE AND hreseteligible.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hresettype on hresettype.HELPER_TABLE_SID=IMTD.RESET_TYPE AND hresettype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hresetinterval on hresetinterval.HELPER_TABLE_SID=IMTD.RESET_INTERVAL AND hresetinterval.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hresetfrequency on hresetfrequency.HELPER_TABLE_SID=IMTD.RESET_FREQUENCY AND hresetfrequency.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hnetresetpricetype on hnetresetpricetype.HELPER_TABLE_SID=IMTD.NET_RESET_PRICE_TYPE AND hnetresetpricetype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hnetpricetype on hnetpricetype.HELPER_TABLE_SID=IMTD.NET_PRICE_TYPE AND hnetpricetype.DESCRIPTION  NOT like '%Select One%'                   
                            
                            
                    LEFT JOIN ITEM_MASTER im on
                            im.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                            AND im.INBOUND_STATUS <> 'D'
                            
                         WHERE IMTD.PS_CONTRACT_SID = @PS_CONTRACT_ID
        ]]>
		</query>
	</entity>
	
	
		<entity id="getPricingProtectionViewPendingResults">
		<query>
                <![CDATA[
                   
                   DECLARE @PS_CONTRACT_ID int = ?

SELECT
                            recordType = '?',
                            im.ITEM_ID,
                            im.ITEM_NO,
                            im.ITEM_NAME,
                            BM.BRAND_NAME,
                            IMTD.PRICE_PROTECTION_STATUS,
                            IMTD.PRICE_PROTECTION_START_DATE,
                            IMTD.PRICE_PROTECTION_END_DATE,
                            IMTD.PRICE_PROTECTION_PRICE_TYPE,
                            NEP=CASE
                                                  WHEN IMTD.NEP IS NULL THEN ''
                                                  ELSE str(IMTD.NEP,16,6)
                                          END,
                            NEP_FORMULA_VAL=CASE
                                                  WHEN IMTD.NEP_FORMULA IS NULL THEN ''
                                                  ELSE NEPF.NET_SALES_FORMULA_NAME
                                          END,
                            IMTD.BASE_PRICE_TYPE,
                            basePriceVal=CASE
                                         WHEN BPH.DESCRIPTION LIKE 'M%' THEN str(ISNULL(CONVERT(VARCHAR(20),IMTD.BASE_PRICE_ENTRY),''),16,2)
                                         WHEN BPH.DESCRIPTION LIKE 'P%' THEN ISNULL(CONVERT(VARCHAR(20),IMTD.BASE_PRICE_DDLB),'')
                                         WHEN BPH.DESCRIPTION LIKE 'D%' THEN ISNULL(CONVERT(VARCHAR(10),IMTD.BASE_PRICE_DATE,101),'')
                                         ELSE ''
                                 END,
                            IMTD.NET_BASE_PRICE,
                            NET_BASE_PRICE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_BASE_PRICE_FORMULA_ID IS NULL THEN ''
                                                  ELSE NBPF.NET_SALES_FORMULA_NAME
                                          END,
                        IMTD.SUBSEQUENT_PERIOD_PRICE_TYPE,
                            IMTD.NET_SUBSEQUENT_PERIOD_PRICE,
                            NET_SUBSEQUENT_PRICE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID IS NULL THEN ''
                                                  ELSE NSPF.NET_SALES_FORMULA_NAME
                                          END,
                        IMTD.PRICE_TOLERANCE_INTERVAL,
                            IMTD.PRICE_TOLERANCE_FREQUENCY,
                            IMTD.PRICE_TOLERANCE_TYPE,

                            PRICE_TOLERANCE=CASE
                                                  WHEN IMTD.PRICE_TOLERANCE IS NULL THEN ''
                                                  ELSE str(IMTD.PRICE_TOLERANCE,16,2)
                                          END,
                            MAX_INCREMENTAL_CHANGE=CASE
                                                  WHEN IMTD.MAX_INCREMENTAL_CHANGE IS NULL THEN ''
                                                  ELSE str(IMTD.MAX_INCREMENTAL_CHANGE,16,2)
                                          END,
                            IMTD.RESET_ELIGIBLE,
                            IMTD.RESET_TYPE,
                            IMTD.RESET_DATE,
                            IMTD.RESET_INTERVAL,
                            IMTD.RESET_FREQUENCY,
                            IMTD.RESET_PRICE_TYPE,
                            IMTD.NET_RESET_PRICE_TYPE,
                            NET_RESET_PRICE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_RESET_PRICE_FORMULA_ID IS NULL THEN ''
                                                  ELSE NRPF.NET_SALES_FORMULA_NAME
                                          END,
                            IMTD.NET_PRICE_TYPE,
                            NET_PRICE_TYPE_FORMULA_VAL=CASE
                                                  WHEN IMTD.NET_PRICE_TYPE_FORMULA IS NULL THEN ''
                                                  ELSE NPTF.NET_SALES_FORMULA_NAME
                                          END,
                            IMTD.PS_CONTRACT_ATTACHED_DATE,
                            hpriceprotectionstatus.DESCRIPTION AS PP_STATUSPENDING,
                            IQ.ITEM_PRICING_QUALIFIER_NAME AS MEASUREMENT_PRICEPENDING,
                            hbasepricetype.DESCRIPTION AS BASE_PRICE_TYPEPENDING,
                            hnetbaseprice.DESCRIPTION AS NET_BASE_PRICEPENDING,
                            IQ1.ITEM_PRICING_QUALIFIER_NAME AS SUBSEQUENT_PERIOD_PRICE_TYPEPENDING,
                            hnetsubsequentperiodprice.DESCRIPTION AS NET_SUBSEQUENT_PERIOD_PRICEPENDING,
                            hpricetolint.DESCRIPTION AS pricetolintpending,
                            hpricetolfre.DESCRIPTION AS pricetolfrepending,
                            hpricetoltype.DESCRIPTION AS pricetoltypepending,
                            hreseteligible.DESCRIPTION AS reseteligiblepending,
                            hresettype.DESCRIPTION AS resettypepending,
                            hresetinterval.DESCRIPTION AS resetintervalpending,
                            hresetfrequency.DESCRIPTION AS resetfrequencypending,
                            IQ2.ITEM_PRICING_QUALIFIER_NAME AS RESET_PRICE_TYPEPENDING,
                            hnetresetpricetype.DESCRIPTION AS netresetpricetypepending,
                            hnetpricetype.DESCRIPTION AS netpricetypepending
                            
                    FROM
                            dbo.PS_CONTRACT_DETAILS_PENDING IMTD
                    LEFT JOIN BRAND_MASTER BM ON
                            IMTD.BRAND_MASTER_SID = BM.BRAND_MASTER_SID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NEPF ON
                            NEPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NEP_FORMULA
                    LEFT JOIN NET_SALES_FORMULA_MASTER NBPF ON
                            NBPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_BASE_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NSPF ON
                            NSPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_SUBSEQUENT_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NRPF ON
                            NRPF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_RESET_PRICE_FORMULA_ID
                    LEFT JOIN NET_SALES_FORMULA_MASTER NPTF ON
                            NPTF.NET_SALES_FORMULA_MASTER_SID=IMTD.NET_PRICE_TYPE_FORMULA
                    LEFT JOIN HELPER_TABLE BPH ON
                            BPH.HELPER_TABLE_SID=IMTD.BASE_PRICE_TYPE
                            
                    LEFT JOIN HELPER_TABLE hpriceprotectionstatus on hpriceprotectionstatus.HELPER_TABLE_SID=IMTD.PRICE_PROTECTION_STATUS AND hpriceprotectionstatus.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN ITEM_PRICING_QUALIFIER IQ  ON IQ.ITEM_PRICING_QUALIFIER_SID = IMTD.PRICE_PROTECTION_PRICE_TYPE AND IQ.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                    LEFT JOIN ITEM_PRICING_QUALIFIER IQ1 ON IQ1.ITEM_PRICING_QUALIFIER_SID = IMTD.SUBSEQUENT_PERIOD_PRICE_TYPE AND IQ1.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                    LEFT JOIN ITEM_PRICING_QUALIFIER IQ2 ON IQ2.ITEM_PRICING_QUALIFIER_SID = IMTD.RESET_PRICE_TYPE AND IQ2.ITEM_PRICING_QUALIFIER_NAME NOT LIKE '%SELECT ONE%'
                    LEFT JOIN HELPER_TABLE hbasepricetype on hbasepricetype.HELPER_TABLE_SID=IMTD.BASE_PRICE_TYPE AND hbasepricetype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hnetbaseprice on hnetbaseprice.HELPER_TABLE_SID=IMTD.NET_BASE_PRICE AND hnetbaseprice.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hnetsubsequentperiodprice on hnetsubsequentperiodprice.HELPER_TABLE_SID=IMTD.NET_SUBSEQUENT_PERIOD_PRICE AND hnetsubsequentperiodprice.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hpricetolint on hpricetolint.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_INTERVAL AND hpricetolint.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hpricetolfre on hpricetolfre.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_FREQUENCY AND hpricetolfre.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hpricetoltype on hpricetoltype.HELPER_TABLE_SID=IMTD.PRICE_TOLERANCE_TYPE AND hpricetoltype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hreseteligible on hreseteligible.HELPER_TABLE_SID=IMTD.RESET_ELIGIBLE AND hreseteligible.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hresettype on hresettype.HELPER_TABLE_SID=IMTD.RESET_TYPE AND hresettype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hresetinterval on hresetinterval.HELPER_TABLE_SID=IMTD.RESET_INTERVAL AND hresetinterval.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hresetfrequency on hresetfrequency.HELPER_TABLE_SID=IMTD.RESET_FREQUENCY AND hresetfrequency.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hnetresetpricetype on hnetresetpricetype.HELPER_TABLE_SID=IMTD.NET_RESET_PRICE_TYPE AND hnetresetpricetype.DESCRIPTION  NOT like '%Select One%'
                    LEFT JOIN HELPER_TABLE hnetpricetype on hnetpricetype.HELPER_TABLE_SID=IMTD.NET_PRICE_TYPE AND hnetpricetype.DESCRIPTION  NOT like '%Select One%'           
                            
                    LEFT JOIN ITEM_MASTER im on
                            im.ITEM_MASTER_SID = IMTD.ITEM_MASTER_SID
                            AND im.INBOUND_STATUS <> 'D'
                            
                         WHERE IMTD.PS_CONTRACT_SID = @PS_CONTRACT_ID ?
                 ORDER BY
                         ? OFFSET ? ROWS FETCH NEXT ? ROWS ONLY;  
                   
        ]]>
		</query>
	</entity>
        <entity id="getAddCopyDeleteLineAlertCountQueryContract">
		<query> 
            <![CDATA[ 
			DECLARE 
			@USERS_SID int =?,
			@SESSION_ID VARCHAR(10)=?
			
			select count(1) from dbo.IMTD_ITEM_PRICE_REBATE_DETAILS where USERS_SID=@USERS_SID AND SESSION_ID= @SESSION_ID and CHECK_RECORD = 1;
		]]>
		</query>
	</entity>
        <entity id="deleteLineAlertCountQueryContract">
		<query> 
            <![CDATA[ 
			DECLARE 
			@USERS_SID int =?,
			@SESSION_ID VARCHAR(10)=?
			
			select count(1) from dbo.IMTD_ITEM_PRICE_REBATE_DETAILS where USERS_SID=@USERS_SID AND SESSION_ID= @SESSION_ID and CHECK_RECORD = 1 and ADD_COPY_INDICATOR = 'A';
		]]>
		</query>
	</entity>
        <entity id="contractPriceProtectionStartDateAlertQuery">
		<query> 
            <![CDATA[ 
			DECLARE 
			@USERS_SID VARCHAR(10) = ?,
			@SESSION_ID VARCHAR(10)=?
			
			Select MAX(mycount) from
                        (SELECT ITEM_ID,COUNT(PRICE_PROTECTION_START_DATE)mycount
                        FROM dbo.IMTD_ITEM_PRICE_REBATE_DETAILS where USERS_SID=@USERS_SID AND SESSION_ID= @SESSION_ID
                        GROUP BY PRICE_PROTECTION_START_DATE,ITEM_ID) a
		]]>
		</query>
	</entity>

</sql>