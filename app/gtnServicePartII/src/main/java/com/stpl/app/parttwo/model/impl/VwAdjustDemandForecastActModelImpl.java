package com.stpl.app.parttwo.model.impl;

import com.stpl.app.parttwo.model.VwAdjustDemandForecastAct;
import com.stpl.app.parttwo.model.VwAdjustDemandForecastActModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VwAdjustDemandForecastAct service. Represents a row in the &quot;VW_ADJUST_DEMAND_FORECAST_ACT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.parttwo.model.VwAdjustDemandForecastActModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VwAdjustDemandForecastActImpl}.
 * </p>
 *
 * @author
 * @see VwAdjustDemandForecastActImpl
 * @see com.stpl.app.parttwo.model.VwAdjustDemandForecastAct
 * @see com.stpl.app.parttwo.model.VwAdjustDemandForecastActModel
 * @generated
 */
public class VwAdjustDemandForecastActModelImpl extends BaseModelImpl<VwAdjustDemandForecastAct>
    implements VwAdjustDemandForecastActModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a vw adjust demand forecast act model instance should use the {@link com.stpl.app.parttwo.model.VwAdjustDemandForecastAct} interface instead.
     */
    public static final String TABLE_NAME = "VW_ADJUST_DEMAND_FORECAST_ACT";
    public static final Object[][] TABLE_COLUMNS = {
            { "FORECAST_VERSION", Types.VARCHAR },
            { "GROSS_UNITS", Types.DOUBLE },
            { "BUSINESS_UNIT_NO", Types.VARCHAR },
            { "YEAR", Types.VARCHAR },
            { "BRAND_NAME", Types.VARCHAR },
            { "ITEM_ID", Types.VARCHAR },
            { "ORGANIZATION_KEY", Types.VARCHAR },
            { "SOURCE", Types.VARCHAR },
            { "MARKET_SHARE_RATIO", Types.INTEGER },
            { "BUSINESS_UNIT_NAME", Types.VARCHAR },
            { "MARKET_SHARE_UNITS", Types.DOUBLE },
            { "MONTH", Types.VARCHAR },
            { "INVENTORY_UNIT_CHANGE", Types.DOUBLE },
            { "UNCAPTURED_UNITS_RATIO", Types.VARCHAR },
            { "COUNTRY", Types.VARCHAR },
            { "FORECAST_TYPE", Types.VARCHAR },
            { "TOTAL_ADJUSTED_DEMAND_UNITS", Types.DOUBLE },
            { "BRAND_ID", Types.VARCHAR },
            { "IS_FORECAST", Types.VARCHAR },
            { "TOTAL_ADJUSTED_DEMAND_AMOUNT", Types.DOUBLE },
            { "UNCAPTURED_UNITS", Types.DOUBLE },
            { "GROSS_PRICE", Types.DOUBLE },
            { "GROSS_AMOUNT", Types.DOUBLE },
            { "BATCH_ID", Types.VARCHAR },
            { "ADJUSTED_DEMAND_FORECAST_ID", Types.INTEGER },
            { "ITEM_NAME", Types.VARCHAR },
            { "NET_SALES_PRICE", Types.DOUBLE },
            { "NET_SALES_AMOUNT", Types.DOUBLE },
            { "SEGMENT", Types.VARCHAR },
            { "FORECAST_NAME", Types.VARCHAR },
            { "MARKET_SIZE_UNITS", Types.DOUBLE }
        };
    public static final String TABLE_SQL_CREATE = "create table VW_ADJUST_DEMAND_FORECAST_ACT (FORECAST_VERSION VARCHAR(75) null,GROSS_UNITS DOUBLE,BUSINESS_UNIT_NO VARCHAR(75) null,YEAR VARCHAR(75) null,BRAND_NAME VARCHAR(75) null,ITEM_ID VARCHAR(75) null,ORGANIZATION_KEY VARCHAR(75) null,SOURCE VARCHAR(75) null,MARKET_SHARE_RATIO INTEGER,BUSINESS_UNIT_NAME VARCHAR(75) null,MARKET_SHARE_UNITS DOUBLE,MONTH VARCHAR(75) null,INVENTORY_UNIT_CHANGE DOUBLE,UNCAPTURED_UNITS_RATIO VARCHAR(75) null,COUNTRY VARCHAR(75) null,FORECAST_TYPE VARCHAR(75) null,TOTAL_ADJUSTED_DEMAND_UNITS DOUBLE,BRAND_ID VARCHAR(75) null,IS_FORECAST VARCHAR(75) null,TOTAL_ADJUSTED_DEMAND_AMOUNT DOUBLE,UNCAPTURED_UNITS DOUBLE,GROSS_PRICE DOUBLE,GROSS_AMOUNT DOUBLE,BATCH_ID VARCHAR(75) null,ADJUSTED_DEMAND_FORECAST_ID INTEGER not null primary key,ITEM_NAME VARCHAR(75) null,NET_SALES_PRICE DOUBLE,NET_SALES_AMOUNT DOUBLE,SEGMENT VARCHAR(75) null,FORECAST_NAME VARCHAR(75) null,MARKET_SIZE_UNITS DOUBLE)";
    public static final String TABLE_SQL_DROP = "drop table VW_ADJUST_DEMAND_FORECAST_ACT";
    public static final String ORDER_BY_JPQL = " ORDER BY vwAdjustDemandForecastAct.adjustedDemandForecastId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY VW_ADJUST_DEMAND_FORECAST_ACT.ADJUSTED_DEMAND_FORECAST_ID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.parttwo.model.VwAdjustDemandForecastAct"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.parttwo.model.VwAdjustDemandForecastAct"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.parttwo.model.VwAdjustDemandForecastAct"));
    private static ClassLoader _classLoader = VwAdjustDemandForecastAct.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            VwAdjustDemandForecastAct.class
        };
    private String _forecastVersion;
    private double _grossUnits;
    private String _businessUnitNo;
    private String _year;
    private String _brandName;
    private String _itemId;
    private String _organizationKey;
    private String _source;
    private int _marketShareRatio;
    private String _businessUnitName;
    private double _marketShareUnits;
    private String _month;
    private double _inventoryUnitChange;
    private String _uncapturedUnitsRatio;
    private String _country;
    private String _forecastType;
    private double _totalAdjustedDemandUnits;
    private String _brandId;
    private String _isForecast;
    private double _totalAdjustedDemandAmount;
    private double _uncapturedUnits;
    private double _grossPrice;
    private double _grossAmount;
    private String _batchId;
    private int _adjustedDemandForecastId;
    private String _itemName;
    private double _netSalesPrice;
    private double _netSalesAmount;
    private String _segment;
    private String _forecastName;
    private double _marketSizeUnits;
    private VwAdjustDemandForecastAct _escapedModel;

    public VwAdjustDemandForecastActModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _adjustedDemandForecastId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setAdjustedDemandForecastId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _adjustedDemandForecastId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return VwAdjustDemandForecastAct.class;
    }

    @Override
    public String getModelClassName() {
        return VwAdjustDemandForecastAct.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("forecastVersion", getForecastVersion());
        attributes.put("grossUnits", getGrossUnits());
        attributes.put("businessUnitNo", getBusinessUnitNo());
        attributes.put("year", getYear());
        attributes.put("brandName", getBrandName());
        attributes.put("itemId", getItemId());
        attributes.put("organizationKey", getOrganizationKey());
        attributes.put("source", getSource());
        attributes.put("marketShareRatio", getMarketShareRatio());
        attributes.put("businessUnitName", getBusinessUnitName());
        attributes.put("marketShareUnits", getMarketShareUnits());
        attributes.put("month", getMonth());
        attributes.put("inventoryUnitChange", getInventoryUnitChange());
        attributes.put("uncapturedUnitsRatio", getUncapturedUnitsRatio());
        attributes.put("country", getCountry());
        attributes.put("forecastType", getForecastType());
        attributes.put("totalAdjustedDemandUnits", getTotalAdjustedDemandUnits());
        attributes.put("brandId", getBrandId());
        attributes.put("isForecast", getIsForecast());
        attributes.put("totalAdjustedDemandAmount",
            getTotalAdjustedDemandAmount());
        attributes.put("uncapturedUnits", getUncapturedUnits());
        attributes.put("grossPrice", getGrossPrice());
        attributes.put("grossAmount", getGrossAmount());
        attributes.put("batchId", getBatchId());
        attributes.put("adjustedDemandForecastId", getAdjustedDemandForecastId());
        attributes.put("itemName", getItemName());
        attributes.put("netSalesPrice", getNetSalesPrice());
        attributes.put("netSalesAmount", getNetSalesAmount());
        attributes.put("segment", getSegment());
        attributes.put("forecastName", getForecastName());
        attributes.put("marketSizeUnits", getMarketSizeUnits());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String forecastVersion = (String) attributes.get("forecastVersion");

        if (forecastVersion != null) {
            setForecastVersion(forecastVersion);
        }

        Double grossUnits = (Double) attributes.get("grossUnits");

        if (grossUnits != null) {
            setGrossUnits(grossUnits);
        }

        String businessUnitNo = (String) attributes.get("businessUnitNo");

        if (businessUnitNo != null) {
            setBusinessUnitNo(businessUnitNo);
        }

        String year = (String) attributes.get("year");

        if (year != null) {
            setYear(year);
        }

        String brandName = (String) attributes.get("brandName");

        if (brandName != null) {
            setBrandName(brandName);
        }

        String itemId = (String) attributes.get("itemId");

        if (itemId != null) {
            setItemId(itemId);
        }

        String organizationKey = (String) attributes.get("organizationKey");

        if (organizationKey != null) {
            setOrganizationKey(organizationKey);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        Integer marketShareRatio = (Integer) attributes.get("marketShareRatio");

        if (marketShareRatio != null) {
            setMarketShareRatio(marketShareRatio);
        }

        String businessUnitName = (String) attributes.get("businessUnitName");

        if (businessUnitName != null) {
            setBusinessUnitName(businessUnitName);
        }

        Double marketShareUnits = (Double) attributes.get("marketShareUnits");

        if (marketShareUnits != null) {
            setMarketShareUnits(marketShareUnits);
        }

        String month = (String) attributes.get("month");

        if (month != null) {
            setMonth(month);
        }

        Double inventoryUnitChange = (Double) attributes.get(
                "inventoryUnitChange");

        if (inventoryUnitChange != null) {
            setInventoryUnitChange(inventoryUnitChange);
        }

        String uncapturedUnitsRatio = (String) attributes.get(
                "uncapturedUnitsRatio");

        if (uncapturedUnitsRatio != null) {
            setUncapturedUnitsRatio(uncapturedUnitsRatio);
        }

        String country = (String) attributes.get("country");

        if (country != null) {
            setCountry(country);
        }

        String forecastType = (String) attributes.get("forecastType");

        if (forecastType != null) {
            setForecastType(forecastType);
        }

        Double totalAdjustedDemandUnits = (Double) attributes.get(
                "totalAdjustedDemandUnits");

        if (totalAdjustedDemandUnits != null) {
            setTotalAdjustedDemandUnits(totalAdjustedDemandUnits);
        }

        String brandId = (String) attributes.get("brandId");

        if (brandId != null) {
            setBrandId(brandId);
        }

        String isForecast = (String) attributes.get("isForecast");

        if (isForecast != null) {
            setIsForecast(isForecast);
        }

        Double totalAdjustedDemandAmount = (Double) attributes.get(
                "totalAdjustedDemandAmount");

        if (totalAdjustedDemandAmount != null) {
            setTotalAdjustedDemandAmount(totalAdjustedDemandAmount);
        }

        Double uncapturedUnits = (Double) attributes.get("uncapturedUnits");

        if (uncapturedUnits != null) {
            setUncapturedUnits(uncapturedUnits);
        }

        Double grossPrice = (Double) attributes.get("grossPrice");

        if (grossPrice != null) {
            setGrossPrice(grossPrice);
        }

        Double grossAmount = (Double) attributes.get("grossAmount");

        if (grossAmount != null) {
            setGrossAmount(grossAmount);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        Integer adjustedDemandForecastId = (Integer) attributes.get(
                "adjustedDemandForecastId");

        if (adjustedDemandForecastId != null) {
            setAdjustedDemandForecastId(adjustedDemandForecastId);
        }

        String itemName = (String) attributes.get("itemName");

        if (itemName != null) {
            setItemName(itemName);
        }

        Double netSalesPrice = (Double) attributes.get("netSalesPrice");

        if (netSalesPrice != null) {
            setNetSalesPrice(netSalesPrice);
        }

        Double netSalesAmount = (Double) attributes.get("netSalesAmount");

        if (netSalesAmount != null) {
            setNetSalesAmount(netSalesAmount);
        }

        String segment = (String) attributes.get("segment");

        if (segment != null) {
            setSegment(segment);
        }

        String forecastName = (String) attributes.get("forecastName");

        if (forecastName != null) {
            setForecastName(forecastName);
        }

        Double marketSizeUnits = (Double) attributes.get("marketSizeUnits");

        if (marketSizeUnits != null) {
            setMarketSizeUnits(marketSizeUnits);
        }
    }

    @Override
    public String getForecastVersion() {
        if (_forecastVersion == null) {
            return StringPool.BLANK;
        } else {
            return _forecastVersion;
        }
    }

    @Override
    public void setForecastVersion(String forecastVersion) {
        _forecastVersion = forecastVersion;
    }

    @Override
    public double getGrossUnits() {
        return _grossUnits;
    }

    @Override
    public void setGrossUnits(double grossUnits) {
        _grossUnits = grossUnits;
    }

    @Override
    public String getBusinessUnitNo() {
        if (_businessUnitNo == null) {
            return StringPool.BLANK;
        } else {
            return _businessUnitNo;
        }
    }

    @Override
    public void setBusinessUnitNo(String businessUnitNo) {
        _businessUnitNo = businessUnitNo;
    }

    @Override
    public String getYear() {
        if (_year == null) {
            return StringPool.BLANK;
        } else {
            return _year;
        }
    }

    @Override
    public void setYear(String year) {
        _year = year;
    }

    @Override
    public String getBrandName() {
        if (_brandName == null) {
            return StringPool.BLANK;
        } else {
            return _brandName;
        }
    }

    @Override
    public void setBrandName(String brandName) {
        _brandName = brandName;
    }

    @Override
    public String getItemId() {
        if (_itemId == null) {
            return StringPool.BLANK;
        } else {
            return _itemId;
        }
    }

    @Override
    public void setItemId(String itemId) {
        _itemId = itemId;
    }

    @Override
    public String getOrganizationKey() {
        if (_organizationKey == null) {
            return StringPool.BLANK;
        } else {
            return _organizationKey;
        }
    }

    @Override
    public void setOrganizationKey(String organizationKey) {
        _organizationKey = organizationKey;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public int getMarketShareRatio() {
        return _marketShareRatio;
    }

    @Override
    public void setMarketShareRatio(int marketShareRatio) {
        _marketShareRatio = marketShareRatio;
    }

    @Override
    public String getBusinessUnitName() {
        if (_businessUnitName == null) {
            return StringPool.BLANK;
        } else {
            return _businessUnitName;
        }
    }

    @Override
    public void setBusinessUnitName(String businessUnitName) {
        _businessUnitName = businessUnitName;
    }

    @Override
    public double getMarketShareUnits() {
        return _marketShareUnits;
    }

    @Override
    public void setMarketShareUnits(double marketShareUnits) {
        _marketShareUnits = marketShareUnits;
    }

    @Override
    public String getMonth() {
        if (_month == null) {
            return StringPool.BLANK;
        } else {
            return _month;
        }
    }

    @Override
    public void setMonth(String month) {
        _month = month;
    }

    @Override
    public double getInventoryUnitChange() {
        return _inventoryUnitChange;
    }

    @Override
    public void setInventoryUnitChange(double inventoryUnitChange) {
        _inventoryUnitChange = inventoryUnitChange;
    }

    @Override
    public String getUncapturedUnitsRatio() {
        if (_uncapturedUnitsRatio == null) {
            return StringPool.BLANK;
        } else {
            return _uncapturedUnitsRatio;
        }
    }

    @Override
    public void setUncapturedUnitsRatio(String uncapturedUnitsRatio) {
        _uncapturedUnitsRatio = uncapturedUnitsRatio;
    }

    @Override
    public String getCountry() {
        if (_country == null) {
            return StringPool.BLANK;
        } else {
            return _country;
        }
    }

    @Override
    public void setCountry(String country) {
        _country = country;
    }

    @Override
    public String getForecastType() {
        if (_forecastType == null) {
            return StringPool.BLANK;
        } else {
            return _forecastType;
        }
    }

    @Override
    public void setForecastType(String forecastType) {
        _forecastType = forecastType;
    }

    @Override
    public double getTotalAdjustedDemandUnits() {
        return _totalAdjustedDemandUnits;
    }

    @Override
    public void setTotalAdjustedDemandUnits(double totalAdjustedDemandUnits) {
        _totalAdjustedDemandUnits = totalAdjustedDemandUnits;
    }

    @Override
    public String getBrandId() {
        if (_brandId == null) {
            return StringPool.BLANK;
        } else {
            return _brandId;
        }
    }

    @Override
    public void setBrandId(String brandId) {
        _brandId = brandId;
    }

    @Override
    public String getIsForecast() {
        if (_isForecast == null) {
            return StringPool.BLANK;
        } else {
            return _isForecast;
        }
    }

    @Override
    public void setIsForecast(String isForecast) {
        _isForecast = isForecast;
    }

    @Override
    public double getTotalAdjustedDemandAmount() {
        return _totalAdjustedDemandAmount;
    }

    @Override
    public void setTotalAdjustedDemandAmount(double totalAdjustedDemandAmount) {
        _totalAdjustedDemandAmount = totalAdjustedDemandAmount;
    }

    @Override
    public double getUncapturedUnits() {
        return _uncapturedUnits;
    }

    @Override
    public void setUncapturedUnits(double uncapturedUnits) {
        _uncapturedUnits = uncapturedUnits;
    }

    @Override
    public double getGrossPrice() {
        return _grossPrice;
    }

    @Override
    public void setGrossPrice(double grossPrice) {
        _grossPrice = grossPrice;
    }

    @Override
    public double getGrossAmount() {
        return _grossAmount;
    }

    @Override
    public void setGrossAmount(double grossAmount) {
        _grossAmount = grossAmount;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public int getAdjustedDemandForecastId() {
        return _adjustedDemandForecastId;
    }

    @Override
    public void setAdjustedDemandForecastId(int adjustedDemandForecastId) {
        _adjustedDemandForecastId = adjustedDemandForecastId;
    }

    @Override
    public String getItemName() {
        if (_itemName == null) {
            return StringPool.BLANK;
        } else {
            return _itemName;
        }
    }

    @Override
    public void setItemName(String itemName) {
        _itemName = itemName;
    }

    @Override
    public double getNetSalesPrice() {
        return _netSalesPrice;
    }

    @Override
    public void setNetSalesPrice(double netSalesPrice) {
        _netSalesPrice = netSalesPrice;
    }

    @Override
    public double getNetSalesAmount() {
        return _netSalesAmount;
    }

    @Override
    public void setNetSalesAmount(double netSalesAmount) {
        _netSalesAmount = netSalesAmount;
    }

    @Override
    public String getSegment() {
        if (_segment == null) {
            return StringPool.BLANK;
        } else {
            return _segment;
        }
    }

    @Override
    public void setSegment(String segment) {
        _segment = segment;
    }

    @Override
    public String getForecastName() {
        if (_forecastName == null) {
            return StringPool.BLANK;
        } else {
            return _forecastName;
        }
    }

    @Override
    public void setForecastName(String forecastName) {
        _forecastName = forecastName;
    }

    @Override
    public double getMarketSizeUnits() {
        return _marketSizeUnits;
    }

    @Override
    public void setMarketSizeUnits(double marketSizeUnits) {
        _marketSizeUnits = marketSizeUnits;
    }

    @Override
    public VwAdjustDemandForecastAct toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (VwAdjustDemandForecastAct) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        VwAdjustDemandForecastActImpl vwAdjustDemandForecastActImpl = new VwAdjustDemandForecastActImpl();

        vwAdjustDemandForecastActImpl.setForecastVersion(getForecastVersion());
        vwAdjustDemandForecastActImpl.setGrossUnits(getGrossUnits());
        vwAdjustDemandForecastActImpl.setBusinessUnitNo(getBusinessUnitNo());
        vwAdjustDemandForecastActImpl.setYear(getYear());
        vwAdjustDemandForecastActImpl.setBrandName(getBrandName());
        vwAdjustDemandForecastActImpl.setItemId(getItemId());
        vwAdjustDemandForecastActImpl.setOrganizationKey(getOrganizationKey());
        vwAdjustDemandForecastActImpl.setSource(getSource());
        vwAdjustDemandForecastActImpl.setMarketShareRatio(getMarketShareRatio());
        vwAdjustDemandForecastActImpl.setBusinessUnitName(getBusinessUnitName());
        vwAdjustDemandForecastActImpl.setMarketShareUnits(getMarketShareUnits());
        vwAdjustDemandForecastActImpl.setMonth(getMonth());
        vwAdjustDemandForecastActImpl.setInventoryUnitChange(getInventoryUnitChange());
        vwAdjustDemandForecastActImpl.setUncapturedUnitsRatio(getUncapturedUnitsRatio());
        vwAdjustDemandForecastActImpl.setCountry(getCountry());
        vwAdjustDemandForecastActImpl.setForecastType(getForecastType());
        vwAdjustDemandForecastActImpl.setTotalAdjustedDemandUnits(getTotalAdjustedDemandUnits());
        vwAdjustDemandForecastActImpl.setBrandId(getBrandId());
        vwAdjustDemandForecastActImpl.setIsForecast(getIsForecast());
        vwAdjustDemandForecastActImpl.setTotalAdjustedDemandAmount(getTotalAdjustedDemandAmount());
        vwAdjustDemandForecastActImpl.setUncapturedUnits(getUncapturedUnits());
        vwAdjustDemandForecastActImpl.setGrossPrice(getGrossPrice());
        vwAdjustDemandForecastActImpl.setGrossAmount(getGrossAmount());
        vwAdjustDemandForecastActImpl.setBatchId(getBatchId());
        vwAdjustDemandForecastActImpl.setAdjustedDemandForecastId(getAdjustedDemandForecastId());
        vwAdjustDemandForecastActImpl.setItemName(getItemName());
        vwAdjustDemandForecastActImpl.setNetSalesPrice(getNetSalesPrice());
        vwAdjustDemandForecastActImpl.setNetSalesAmount(getNetSalesAmount());
        vwAdjustDemandForecastActImpl.setSegment(getSegment());
        vwAdjustDemandForecastActImpl.setForecastName(getForecastName());
        vwAdjustDemandForecastActImpl.setMarketSizeUnits(getMarketSizeUnits());

        vwAdjustDemandForecastActImpl.resetOriginalValues();

        return vwAdjustDemandForecastActImpl;
    }

    @Override
    public int compareTo(VwAdjustDemandForecastAct vwAdjustDemandForecastAct) {
        int primaryKey = vwAdjustDemandForecastAct.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof VwAdjustDemandForecastAct)) {
            return false;
        }

        VwAdjustDemandForecastAct vwAdjustDemandForecastAct = (VwAdjustDemandForecastAct) obj;

        int primaryKey = vwAdjustDemandForecastAct.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<VwAdjustDemandForecastAct> toCacheModel() {
        VwAdjustDemandForecastActCacheModel vwAdjustDemandForecastActCacheModel = new VwAdjustDemandForecastActCacheModel();

        vwAdjustDemandForecastActCacheModel.forecastVersion = getForecastVersion();

        String forecastVersion = vwAdjustDemandForecastActCacheModel.forecastVersion;

        if ((forecastVersion != null) && (forecastVersion.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.forecastVersion = null;
        }

        vwAdjustDemandForecastActCacheModel.grossUnits = getGrossUnits();

        vwAdjustDemandForecastActCacheModel.businessUnitNo = getBusinessUnitNo();

        String businessUnitNo = vwAdjustDemandForecastActCacheModel.businessUnitNo;

        if ((businessUnitNo != null) && (businessUnitNo.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.businessUnitNo = null;
        }

        vwAdjustDemandForecastActCacheModel.year = getYear();

        String year = vwAdjustDemandForecastActCacheModel.year;

        if ((year != null) && (year.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.year = null;
        }

        vwAdjustDemandForecastActCacheModel.brandName = getBrandName();

        String brandName = vwAdjustDemandForecastActCacheModel.brandName;

        if ((brandName != null) && (brandName.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.brandName = null;
        }

        vwAdjustDemandForecastActCacheModel.itemId = getItemId();

        String itemId = vwAdjustDemandForecastActCacheModel.itemId;

        if ((itemId != null) && (itemId.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.itemId = null;
        }

        vwAdjustDemandForecastActCacheModel.organizationKey = getOrganizationKey();

        String organizationKey = vwAdjustDemandForecastActCacheModel.organizationKey;

        if ((organizationKey != null) && (organizationKey.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.organizationKey = null;
        }

        vwAdjustDemandForecastActCacheModel.source = getSource();

        String source = vwAdjustDemandForecastActCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.source = null;
        }

        vwAdjustDemandForecastActCacheModel.marketShareRatio = getMarketShareRatio();

        vwAdjustDemandForecastActCacheModel.businessUnitName = getBusinessUnitName();

        String businessUnitName = vwAdjustDemandForecastActCacheModel.businessUnitName;

        if ((businessUnitName != null) && (businessUnitName.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.businessUnitName = null;
        }

        vwAdjustDemandForecastActCacheModel.marketShareUnits = getMarketShareUnits();

        vwAdjustDemandForecastActCacheModel.month = getMonth();

        String month = vwAdjustDemandForecastActCacheModel.month;

        if ((month != null) && (month.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.month = null;
        }

        vwAdjustDemandForecastActCacheModel.inventoryUnitChange = getInventoryUnitChange();

        vwAdjustDemandForecastActCacheModel.uncapturedUnitsRatio = getUncapturedUnitsRatio();

        String uncapturedUnitsRatio = vwAdjustDemandForecastActCacheModel.uncapturedUnitsRatio;

        if ((uncapturedUnitsRatio != null) &&
                (uncapturedUnitsRatio.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.uncapturedUnitsRatio = null;
        }

        vwAdjustDemandForecastActCacheModel.country = getCountry();

        String country = vwAdjustDemandForecastActCacheModel.country;

        if ((country != null) && (country.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.country = null;
        }

        vwAdjustDemandForecastActCacheModel.forecastType = getForecastType();

        String forecastType = vwAdjustDemandForecastActCacheModel.forecastType;

        if ((forecastType != null) && (forecastType.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.forecastType = null;
        }

        vwAdjustDemandForecastActCacheModel.totalAdjustedDemandUnits = getTotalAdjustedDemandUnits();

        vwAdjustDemandForecastActCacheModel.brandId = getBrandId();

        String brandId = vwAdjustDemandForecastActCacheModel.brandId;

        if ((brandId != null) && (brandId.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.brandId = null;
        }

        vwAdjustDemandForecastActCacheModel.isForecast = getIsForecast();

        String isForecast = vwAdjustDemandForecastActCacheModel.isForecast;

        if ((isForecast != null) && (isForecast.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.isForecast = null;
        }

        vwAdjustDemandForecastActCacheModel.totalAdjustedDemandAmount = getTotalAdjustedDemandAmount();

        vwAdjustDemandForecastActCacheModel.uncapturedUnits = getUncapturedUnits();

        vwAdjustDemandForecastActCacheModel.grossPrice = getGrossPrice();

        vwAdjustDemandForecastActCacheModel.grossAmount = getGrossAmount();

        vwAdjustDemandForecastActCacheModel.batchId = getBatchId();

        String batchId = vwAdjustDemandForecastActCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.batchId = null;
        }

        vwAdjustDemandForecastActCacheModel.adjustedDemandForecastId = getAdjustedDemandForecastId();

        vwAdjustDemandForecastActCacheModel.itemName = getItemName();

        String itemName = vwAdjustDemandForecastActCacheModel.itemName;

        if ((itemName != null) && (itemName.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.itemName = null;
        }

        vwAdjustDemandForecastActCacheModel.netSalesPrice = getNetSalesPrice();

        vwAdjustDemandForecastActCacheModel.netSalesAmount = getNetSalesAmount();

        vwAdjustDemandForecastActCacheModel.segment = getSegment();

        String segment = vwAdjustDemandForecastActCacheModel.segment;

        if ((segment != null) && (segment.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.segment = null;
        }

        vwAdjustDemandForecastActCacheModel.forecastName = getForecastName();

        String forecastName = vwAdjustDemandForecastActCacheModel.forecastName;

        if ((forecastName != null) && (forecastName.length() == 0)) {
            vwAdjustDemandForecastActCacheModel.forecastName = null;
        }

        vwAdjustDemandForecastActCacheModel.marketSizeUnits = getMarketSizeUnits();

        return vwAdjustDemandForecastActCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(63);

        sb.append("{forecastVersion=");
        sb.append(getForecastVersion());
        sb.append(", grossUnits=");
        sb.append(getGrossUnits());
        sb.append(", businessUnitNo=");
        sb.append(getBusinessUnitNo());
        sb.append(", year=");
        sb.append(getYear());
        sb.append(", brandName=");
        sb.append(getBrandName());
        sb.append(", itemId=");
        sb.append(getItemId());
        sb.append(", organizationKey=");
        sb.append(getOrganizationKey());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", marketShareRatio=");
        sb.append(getMarketShareRatio());
        sb.append(", businessUnitName=");
        sb.append(getBusinessUnitName());
        sb.append(", marketShareUnits=");
        sb.append(getMarketShareUnits());
        sb.append(", month=");
        sb.append(getMonth());
        sb.append(", inventoryUnitChange=");
        sb.append(getInventoryUnitChange());
        sb.append(", uncapturedUnitsRatio=");
        sb.append(getUncapturedUnitsRatio());
        sb.append(", country=");
        sb.append(getCountry());
        sb.append(", forecastType=");
        sb.append(getForecastType());
        sb.append(", totalAdjustedDemandUnits=");
        sb.append(getTotalAdjustedDemandUnits());
        sb.append(", brandId=");
        sb.append(getBrandId());
        sb.append(", isForecast=");
        sb.append(getIsForecast());
        sb.append(", totalAdjustedDemandAmount=");
        sb.append(getTotalAdjustedDemandAmount());
        sb.append(", uncapturedUnits=");
        sb.append(getUncapturedUnits());
        sb.append(", grossPrice=");
        sb.append(getGrossPrice());
        sb.append(", grossAmount=");
        sb.append(getGrossAmount());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", adjustedDemandForecastId=");
        sb.append(getAdjustedDemandForecastId());
        sb.append(", itemName=");
        sb.append(getItemName());
        sb.append(", netSalesPrice=");
        sb.append(getNetSalesPrice());
        sb.append(", netSalesAmount=");
        sb.append(getNetSalesAmount());
        sb.append(", segment=");
        sb.append(getSegment());
        sb.append(", forecastName=");
        sb.append(getForecastName());
        sb.append(", marketSizeUnits=");
        sb.append(getMarketSizeUnits());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(97);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.parttwo.model.VwAdjustDemandForecastAct");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>forecastVersion</column-name><column-value><![CDATA[");
        sb.append(getForecastVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grossUnits</column-name><column-value><![CDATA[");
        sb.append(getGrossUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>businessUnitNo</column-name><column-value><![CDATA[");
        sb.append(getBusinessUnitNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>year</column-name><column-value><![CDATA[");
        sb.append(getYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandName</column-name><column-value><![CDATA[");
        sb.append(getBrandName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemId</column-name><column-value><![CDATA[");
        sb.append(getItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationKey</column-name><column-value><![CDATA[");
        sb.append(getOrganizationKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketShareRatio</column-name><column-value><![CDATA[");
        sb.append(getMarketShareRatio());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>businessUnitName</column-name><column-value><![CDATA[");
        sb.append(getBusinessUnitName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketShareUnits</column-name><column-value><![CDATA[");
        sb.append(getMarketShareUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>month</column-name><column-value><![CDATA[");
        sb.append(getMonth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inventoryUnitChange</column-name><column-value><![CDATA[");
        sb.append(getInventoryUnitChange());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>uncapturedUnitsRatio</column-name><column-value><![CDATA[");
        sb.append(getUncapturedUnitsRatio());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>country</column-name><column-value><![CDATA[");
        sb.append(getCountry());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastType</column-name><column-value><![CDATA[");
        sb.append(getForecastType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>totalAdjustedDemandUnits</column-name><column-value><![CDATA[");
        sb.append(getTotalAdjustedDemandUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandId</column-name><column-value><![CDATA[");
        sb.append(getBrandId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isForecast</column-name><column-value><![CDATA[");
        sb.append(getIsForecast());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>totalAdjustedDemandAmount</column-name><column-value><![CDATA[");
        sb.append(getTotalAdjustedDemandAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>uncapturedUnits</column-name><column-value><![CDATA[");
        sb.append(getUncapturedUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grossPrice</column-name><column-value><![CDATA[");
        sb.append(getGrossPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grossAmount</column-name><column-value><![CDATA[");
        sb.append(getGrossAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adjustedDemandForecastId</column-name><column-value><![CDATA[");
        sb.append(getAdjustedDemandForecastId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemName</column-name><column-value><![CDATA[");
        sb.append(getItemName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>netSalesPrice</column-name><column-value><![CDATA[");
        sb.append(getNetSalesPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>netSalesAmount</column-name><column-value><![CDATA[");
        sb.append(getNetSalesAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>segment</column-name><column-value><![CDATA[");
        sb.append(getSegment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastName</column-name><column-value><![CDATA[");
        sb.append(getForecastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketSizeUnits</column-name><column-value><![CDATA[");
        sb.append(getMarketSizeUnits());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
