package com.stpl.app.model.impl;

import com.stpl.app.model.ForecastingMaster;
import com.stpl.app.model.ForecastingMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ForecastingMaster service. Represents a row in the &quot;FORECASTING_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.ForecastingMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ForecastingMasterImpl}.
 * </p>
 *
 * @author
 * @see ForecastingMasterImpl
 * @see com.stpl.app.model.ForecastingMaster
 * @see com.stpl.app.model.ForecastingMasterModel
 * @generated
 */
public class ForecastingMasterModelImpl extends BaseModelImpl<ForecastingMaster>
    implements ForecastingMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a forecasting master model instance should use the {@link com.stpl.app.model.ForecastingMaster} interface instead.
     */
    public static final String TABLE_NAME = "FORECASTING_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "FORECAST_VALUE_TYPE", Types.VARCHAR },
            { "MODIFIED_BY", Types.INTEGER },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "PERCENTAGE_ESTIMATE", Types.VARCHAR },
            { "ACTUAL_SALES_PERCENTAGE_MONTH", Types.INTEGER },
            { "NDC", Types.VARCHAR },
            { "BATCH_ID", Types.VARCHAR },
            { "FORECAST_VER", Types.VARCHAR },
            { "COUNTRY", Types.VARCHAR },
            { "PRODUCT", Types.VARCHAR },
            { "FORECAST_START_DATE", Types.TIMESTAMP },
            { "FORECASTED_SALES_PERCENTAGE", Types.VARCHAR },
            { "UNITS", Types.DOUBLE },
            { "DOLLARS", Types.DOUBLE },
            { "FORECAST_MONTH", Types.VARCHAR },
            { "CREATED_BY", Types.INTEGER },
            { "SEGMENT", Types.VARCHAR },
            { "PRICE", Types.DOUBLE },
            { "ACTUAL_SALES_PERCENTAGE", Types.VARCHAR },
            { "FORECAST_YEAR", Types.VARCHAR },
            { "FORECAST_NAME", Types.VARCHAR },
            { "FORECAST_DATE", Types.TIMESTAMP },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "BRAND", Types.VARCHAR },
            { "FORECAST_VALUE", Types.VARCHAR },
            { "PERCENTAGE_ESTIMATE_YEAR", Types.INTEGER },
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "SOURCE", Types.VARCHAR },
            { "FORECAST_MASTER_SID", Types.INTEGER },
            { "FORECASTED_SALES_PERCENT_MONTH", Types.INTEGER },
            { "INBOUND_STATUS", Types.VARCHAR },
            { "BUSINESS_UNIT", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table FORECASTING_MASTER (FORECAST_VALUE_TYPE VARCHAR(75) null,MODIFIED_BY INTEGER,CREATED_DATE DATE null,PERCENTAGE_ESTIMATE VARCHAR(75) null,ACTUAL_SALES_PERCENTAGE_MONTH INTEGER,NDC VARCHAR(75) null,BATCH_ID VARCHAR(75) null,FORECAST_VER VARCHAR(75) null,COUNTRY VARCHAR(75) null,PRODUCT VARCHAR(75) null,FORECAST_START_DATE DATE null,FORECASTED_SALES_PERCENTAGE VARCHAR(75) null,UNITS DOUBLE,DOLLARS DOUBLE,FORECAST_MONTH VARCHAR(75) null,CREATED_BY INTEGER,SEGMENT VARCHAR(75) null,PRICE DOUBLE,ACTUAL_SALES_PERCENTAGE VARCHAR(75) null,FORECAST_YEAR VARCHAR(75) null,FORECAST_NAME VARCHAR(75) null,FORECAST_DATE DATE null,MODIFIED_DATE DATE null,BRAND VARCHAR(75) null,FORECAST_VALUE VARCHAR(75) null,PERCENTAGE_ESTIMATE_YEAR INTEGER,RECORD_LOCK_STATUS BOOLEAN,SOURCE VARCHAR(75) null,FORECAST_MASTER_SID INTEGER not null primary key IDENTITY,FORECASTED_SALES_PERCENT_MONTH INTEGER,INBOUND_STATUS VARCHAR(75) null,BUSINESS_UNIT INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table FORECASTING_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY forecastingMaster.forecastMasterSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY FORECASTING_MASTER.FORECAST_MASTER_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.ForecastingMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.ForecastingMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stpl.app.model.ForecastingMaster"),
            true);
    public static long COUNTRY_COLUMN_BITMASK = 1L;
    public static long CREATEDDATE_COLUMN_BITMASK = 2L;
    public static long FORECASTMONTH_COLUMN_BITMASK = 4L;
    public static long FORECASTSTARTDATE_COLUMN_BITMASK = 8L;
    public static long FORECASTYEAR_COLUMN_BITMASK = 16L;
    public static long NDC_COLUMN_BITMASK = 32L;
    public static long FORECASTMASTERSID_COLUMN_BITMASK = 64L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.ForecastingMaster"));
    private static ClassLoader _classLoader = ForecastingMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ForecastingMaster.class
        };
    private String _forecastValueType;
    private int _modifiedBy;
    private Date _createdDate;
    private Date _originalCreatedDate;
    private String _percentageEstimate;
    private int _actualSalesPercentageMonth;
    private String _ndc;
    private String _originalNdc;
    private String _batchId;
    private String _forecastVer;
    private String _country;
    private String _originalCountry;
    private String _product;
    private Date _forecastStartDate;
    private Date _originalForecastStartDate;
    private String _forecastedSalesPercentage;
    private double _units;
    private double _dollars;
    private String _forecastMonth;
    private String _originalForecastMonth;
    private int _createdBy;
    private String _segment;
    private double _price;
    private String _actualSalesPercentage;
    private String _forecastYear;
    private String _originalForecastYear;
    private String _forecastName;
    private Date _forecastDate;
    private Date _modifiedDate;
    private String _brand;
    private String _forecastValue;
    private int _percentageEstimateYear;
    private boolean _recordLockStatus;
    private String _source;
    private int _forecastMasterSid;
    private int _forecastedSalesPercentMonth;
    private String _inboundStatus;
    private int _businessUnit;
    private long _columnBitmask;
    private ForecastingMaster _escapedModel;

    public ForecastingMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _forecastMasterSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setForecastMasterSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _forecastMasterSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ForecastingMaster.class;
    }

    @Override
    public String getModelClassName() {
        return ForecastingMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("forecastValueType", getForecastValueType());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("percentageEstimate", getPercentageEstimate());
        attributes.put("actualSalesPercentageMonth",
            getActualSalesPercentageMonth());
        attributes.put("ndc", getNdc());
        attributes.put("batchId", getBatchId());
        attributes.put("forecastVer", getForecastVer());
        attributes.put("country", getCountry());
        attributes.put("product", getProduct());
        attributes.put("forecastStartDate", getForecastStartDate());
        attributes.put("forecastedSalesPercentage",
            getForecastedSalesPercentage());
        attributes.put("units", getUnits());
        attributes.put("dollars", getDollars());
        attributes.put("forecastMonth", getForecastMonth());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("segment", getSegment());
        attributes.put("price", getPrice());
        attributes.put("actualSalesPercentage", getActualSalesPercentage());
        attributes.put("forecastYear", getForecastYear());
        attributes.put("forecastName", getForecastName());
        attributes.put("forecastDate", getForecastDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("brand", getBrand());
        attributes.put("forecastValue", getForecastValue());
        attributes.put("percentageEstimateYear", getPercentageEstimateYear());
        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("source", getSource());
        attributes.put("forecastMasterSid", getForecastMasterSid());
        attributes.put("forecastedSalesPercentMonth",
            getForecastedSalesPercentMonth());
        attributes.put("inboundStatus", getInboundStatus());
        attributes.put("businessUnit", getBusinessUnit());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String forecastValueType = (String) attributes.get("forecastValueType");

        if (forecastValueType != null) {
            setForecastValueType(forecastValueType);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String percentageEstimate = (String) attributes.get(
                "percentageEstimate");

        if (percentageEstimate != null) {
            setPercentageEstimate(percentageEstimate);
        }

        Integer actualSalesPercentageMonth = (Integer) attributes.get(
                "actualSalesPercentageMonth");

        if (actualSalesPercentageMonth != null) {
            setActualSalesPercentageMonth(actualSalesPercentageMonth);
        }

        String ndc = (String) attributes.get("ndc");

        if (ndc != null) {
            setNdc(ndc);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        String forecastVer = (String) attributes.get("forecastVer");

        if (forecastVer != null) {
            setForecastVer(forecastVer);
        }

        String country = (String) attributes.get("country");

        if (country != null) {
            setCountry(country);
        }

        String product = (String) attributes.get("product");

        if (product != null) {
            setProduct(product);
        }

        Date forecastStartDate = (Date) attributes.get("forecastStartDate");

        if (forecastStartDate != null) {
            setForecastStartDate(forecastStartDate);
        }

        String forecastedSalesPercentage = (String) attributes.get(
                "forecastedSalesPercentage");

        if (forecastedSalesPercentage != null) {
            setForecastedSalesPercentage(forecastedSalesPercentage);
        }

        Double units = (Double) attributes.get("units");

        if (units != null) {
            setUnits(units);
        }

        Double dollars = (Double) attributes.get("dollars");

        if (dollars != null) {
            setDollars(dollars);
        }

        String forecastMonth = (String) attributes.get("forecastMonth");

        if (forecastMonth != null) {
            setForecastMonth(forecastMonth);
        }

        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        String segment = (String) attributes.get("segment");

        if (segment != null) {
            setSegment(segment);
        }

        Double price = (Double) attributes.get("price");

        if (price != null) {
            setPrice(price);
        }

        String actualSalesPercentage = (String) attributes.get(
                "actualSalesPercentage");

        if (actualSalesPercentage != null) {
            setActualSalesPercentage(actualSalesPercentage);
        }

        String forecastYear = (String) attributes.get("forecastYear");

        if (forecastYear != null) {
            setForecastYear(forecastYear);
        }

        String forecastName = (String) attributes.get("forecastName");

        if (forecastName != null) {
            setForecastName(forecastName);
        }

        Date forecastDate = (Date) attributes.get("forecastDate");

        if (forecastDate != null) {
            setForecastDate(forecastDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String brand = (String) attributes.get("brand");

        if (brand != null) {
            setBrand(brand);
        }

        String forecastValue = (String) attributes.get("forecastValue");

        if (forecastValue != null) {
            setForecastValue(forecastValue);
        }

        Integer percentageEstimateYear = (Integer) attributes.get(
                "percentageEstimateYear");

        if (percentageEstimateYear != null) {
            setPercentageEstimateYear(percentageEstimateYear);
        }

        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        Integer forecastMasterSid = (Integer) attributes.get(
                "forecastMasterSid");

        if (forecastMasterSid != null) {
            setForecastMasterSid(forecastMasterSid);
        }

        Integer forecastedSalesPercentMonth = (Integer) attributes.get(
                "forecastedSalesPercentMonth");

        if (forecastedSalesPercentMonth != null) {
            setForecastedSalesPercentMonth(forecastedSalesPercentMonth);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }

        Integer businessUnit = (Integer) attributes.get("businessUnit");

        if (businessUnit != null) {
            setBusinessUnit(businessUnit);
        }
    }

    @Override
    public String getForecastValueType() {
        if (_forecastValueType == null) {
            return StringPool.BLANK;
        } else {
            return _forecastValueType;
        }
    }

    @Override
    public void setForecastValueType(String forecastValueType) {
        _forecastValueType = forecastValueType;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _columnBitmask |= CREATEDDATE_COLUMN_BITMASK;

        if (_originalCreatedDate == null) {
            _originalCreatedDate = _createdDate;
        }

        _createdDate = createdDate;
    }

    public Date getOriginalCreatedDate() {
        return _originalCreatedDate;
    }

    @Override
    public String getPercentageEstimate() {
        if (_percentageEstimate == null) {
            return StringPool.BLANK;
        } else {
            return _percentageEstimate;
        }
    }

    @Override
    public void setPercentageEstimate(String percentageEstimate) {
        _percentageEstimate = percentageEstimate;
    }

    @Override
    public int getActualSalesPercentageMonth() {
        return _actualSalesPercentageMonth;
    }

    @Override
    public void setActualSalesPercentageMonth(int actualSalesPercentageMonth) {
        _actualSalesPercentageMonth = actualSalesPercentageMonth;
    }

    @Override
    public String getNdc() {
        if (_ndc == null) {
            return StringPool.BLANK;
        } else {
            return _ndc;
        }
    }

    @Override
    public void setNdc(String ndc) {
        _columnBitmask |= NDC_COLUMN_BITMASK;

        if (_originalNdc == null) {
            _originalNdc = _ndc;
        }

        _ndc = ndc;
    }

    public String getOriginalNdc() {
        return GetterUtil.getString(_originalNdc);
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public String getForecastVer() {
        if (_forecastVer == null) {
            return StringPool.BLANK;
        } else {
            return _forecastVer;
        }
    }

    @Override
    public void setForecastVer(String forecastVer) {
        _forecastVer = forecastVer;
    }

    @Override
    public String getCountry() {
        if (_country == null) {
            return StringPool.BLANK;
        } else {
            return _country;
        }
    }

    @Override
    public void setCountry(String country) {
        _columnBitmask |= COUNTRY_COLUMN_BITMASK;

        if (_originalCountry == null) {
            _originalCountry = _country;
        }

        _country = country;
    }

    public String getOriginalCountry() {
        return GetterUtil.getString(_originalCountry);
    }

    @Override
    public String getProduct() {
        if (_product == null) {
            return StringPool.BLANK;
        } else {
            return _product;
        }
    }

    @Override
    public void setProduct(String product) {
        _product = product;
    }

    @Override
    public Date getForecastStartDate() {
        return _forecastStartDate;
    }

    @Override
    public void setForecastStartDate(Date forecastStartDate) {
        _columnBitmask |= FORECASTSTARTDATE_COLUMN_BITMASK;

        if (_originalForecastStartDate == null) {
            _originalForecastStartDate = _forecastStartDate;
        }

        _forecastStartDate = forecastStartDate;
    }

    public Date getOriginalForecastStartDate() {
        return _originalForecastStartDate;
    }

    @Override
    public String getForecastedSalesPercentage() {
        if (_forecastedSalesPercentage == null) {
            return StringPool.BLANK;
        } else {
            return _forecastedSalesPercentage;
        }
    }

    @Override
    public void setForecastedSalesPercentage(String forecastedSalesPercentage) {
        _forecastedSalesPercentage = forecastedSalesPercentage;
    }

    @Override
    public double getUnits() {
        return _units;
    }

    @Override
    public void setUnits(double units) {
        _units = units;
    }

    @Override
    public double getDollars() {
        return _dollars;
    }

    @Override
    public void setDollars(double dollars) {
        _dollars = dollars;
    }

    @Override
    public String getForecastMonth() {
        if (_forecastMonth == null) {
            return StringPool.BLANK;
        } else {
            return _forecastMonth;
        }
    }

    @Override
    public void setForecastMonth(String forecastMonth) {
        _columnBitmask |= FORECASTMONTH_COLUMN_BITMASK;

        if (_originalForecastMonth == null) {
            _originalForecastMonth = _forecastMonth;
        }

        _forecastMonth = forecastMonth;
    }

    public String getOriginalForecastMonth() {
        return GetterUtil.getString(_originalForecastMonth);
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public String getSegment() {
        if (_segment == null) {
            return StringPool.BLANK;
        } else {
            return _segment;
        }
    }

    @Override
    public void setSegment(String segment) {
        _segment = segment;
    }

    @Override
    public double getPrice() {
        return _price;
    }

    @Override
    public void setPrice(double price) {
        _price = price;
    }

    @Override
    public String getActualSalesPercentage() {
        if (_actualSalesPercentage == null) {
            return StringPool.BLANK;
        } else {
            return _actualSalesPercentage;
        }
    }

    @Override
    public void setActualSalesPercentage(String actualSalesPercentage) {
        _actualSalesPercentage = actualSalesPercentage;
    }

    @Override
    public String getForecastYear() {
        if (_forecastYear == null) {
            return StringPool.BLANK;
        } else {
            return _forecastYear;
        }
    }

    @Override
    public void setForecastYear(String forecastYear) {
        _columnBitmask |= FORECASTYEAR_COLUMN_BITMASK;

        if (_originalForecastYear == null) {
            _originalForecastYear = _forecastYear;
        }

        _forecastYear = forecastYear;
    }

    public String getOriginalForecastYear() {
        return GetterUtil.getString(_originalForecastYear);
    }

    @Override
    public String getForecastName() {
        if (_forecastName == null) {
            return StringPool.BLANK;
        } else {
            return _forecastName;
        }
    }

    @Override
    public void setForecastName(String forecastName) {
        _forecastName = forecastName;
    }

    @Override
    public Date getForecastDate() {
        return _forecastDate;
    }

    @Override
    public void setForecastDate(Date forecastDate) {
        _forecastDate = forecastDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getBrand() {
        if (_brand == null) {
            return StringPool.BLANK;
        } else {
            return _brand;
        }
    }

    @Override
    public void setBrand(String brand) {
        _brand = brand;
    }

    @Override
    public String getForecastValue() {
        if (_forecastValue == null) {
            return StringPool.BLANK;
        } else {
            return _forecastValue;
        }
    }

    @Override
    public void setForecastValue(String forecastValue) {
        _forecastValue = forecastValue;
    }

    @Override
    public int getPercentageEstimateYear() {
        return _percentageEstimateYear;
    }

    @Override
    public void setPercentageEstimateYear(int percentageEstimateYear) {
        _percentageEstimateYear = percentageEstimateYear;
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public int getForecastMasterSid() {
        return _forecastMasterSid;
    }

    @Override
    public void setForecastMasterSid(int forecastMasterSid) {
        _forecastMasterSid = forecastMasterSid;
    }

    @Override
    public int getForecastedSalesPercentMonth() {
        return _forecastedSalesPercentMonth;
    }

    @Override
    public void setForecastedSalesPercentMonth(int forecastedSalesPercentMonth) {
        _forecastedSalesPercentMonth = forecastedSalesPercentMonth;
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    @Override
    public int getBusinessUnit() {
        return _businessUnit;
    }

    @Override
    public void setBusinessUnit(int businessUnit) {
        _businessUnit = businessUnit;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ForecastingMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ForecastingMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ForecastingMasterImpl forecastingMasterImpl = new ForecastingMasterImpl();

        forecastingMasterImpl.setForecastValueType(getForecastValueType());
        forecastingMasterImpl.setModifiedBy(getModifiedBy());
        forecastingMasterImpl.setCreatedDate(getCreatedDate());
        forecastingMasterImpl.setPercentageEstimate(getPercentageEstimate());
        forecastingMasterImpl.setActualSalesPercentageMonth(getActualSalesPercentageMonth());
        forecastingMasterImpl.setNdc(getNdc());
        forecastingMasterImpl.setBatchId(getBatchId());
        forecastingMasterImpl.setForecastVer(getForecastVer());
        forecastingMasterImpl.setCountry(getCountry());
        forecastingMasterImpl.setProduct(getProduct());
        forecastingMasterImpl.setForecastStartDate(getForecastStartDate());
        forecastingMasterImpl.setForecastedSalesPercentage(getForecastedSalesPercentage());
        forecastingMasterImpl.setUnits(getUnits());
        forecastingMasterImpl.setDollars(getDollars());
        forecastingMasterImpl.setForecastMonth(getForecastMonth());
        forecastingMasterImpl.setCreatedBy(getCreatedBy());
        forecastingMasterImpl.setSegment(getSegment());
        forecastingMasterImpl.setPrice(getPrice());
        forecastingMasterImpl.setActualSalesPercentage(getActualSalesPercentage());
        forecastingMasterImpl.setForecastYear(getForecastYear());
        forecastingMasterImpl.setForecastName(getForecastName());
        forecastingMasterImpl.setForecastDate(getForecastDate());
        forecastingMasterImpl.setModifiedDate(getModifiedDate());
        forecastingMasterImpl.setBrand(getBrand());
        forecastingMasterImpl.setForecastValue(getForecastValue());
        forecastingMasterImpl.setPercentageEstimateYear(getPercentageEstimateYear());
        forecastingMasterImpl.setRecordLockStatus(getRecordLockStatus());
        forecastingMasterImpl.setSource(getSource());
        forecastingMasterImpl.setForecastMasterSid(getForecastMasterSid());
        forecastingMasterImpl.setForecastedSalesPercentMonth(getForecastedSalesPercentMonth());
        forecastingMasterImpl.setInboundStatus(getInboundStatus());
        forecastingMasterImpl.setBusinessUnit(getBusinessUnit());

        forecastingMasterImpl.resetOriginalValues();

        return forecastingMasterImpl;
    }

    @Override
    public int compareTo(ForecastingMaster forecastingMaster) {
        int primaryKey = forecastingMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ForecastingMaster)) {
            return false;
        }

        ForecastingMaster forecastingMaster = (ForecastingMaster) obj;

        int primaryKey = forecastingMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ForecastingMasterModelImpl forecastingMasterModelImpl = this;

        forecastingMasterModelImpl._originalCreatedDate = forecastingMasterModelImpl._createdDate;

        forecastingMasterModelImpl._originalNdc = forecastingMasterModelImpl._ndc;

        forecastingMasterModelImpl._originalCountry = forecastingMasterModelImpl._country;

        forecastingMasterModelImpl._originalForecastStartDate = forecastingMasterModelImpl._forecastStartDate;

        forecastingMasterModelImpl._originalForecastMonth = forecastingMasterModelImpl._forecastMonth;

        forecastingMasterModelImpl._originalForecastYear = forecastingMasterModelImpl._forecastYear;

        forecastingMasterModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ForecastingMaster> toCacheModel() {
        ForecastingMasterCacheModel forecastingMasterCacheModel = new ForecastingMasterCacheModel();

        forecastingMasterCacheModel.forecastValueType = getForecastValueType();

        String forecastValueType = forecastingMasterCacheModel.forecastValueType;

        if ((forecastValueType != null) && (forecastValueType.length() == 0)) {
            forecastingMasterCacheModel.forecastValueType = null;
        }

        forecastingMasterCacheModel.modifiedBy = getModifiedBy();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            forecastingMasterCacheModel.createdDate = createdDate.getTime();
        } else {
            forecastingMasterCacheModel.createdDate = Long.MIN_VALUE;
        }

        forecastingMasterCacheModel.percentageEstimate = getPercentageEstimate();

        String percentageEstimate = forecastingMasterCacheModel.percentageEstimate;

        if ((percentageEstimate != null) && (percentageEstimate.length() == 0)) {
            forecastingMasterCacheModel.percentageEstimate = null;
        }

        forecastingMasterCacheModel.actualSalesPercentageMonth = getActualSalesPercentageMonth();

        forecastingMasterCacheModel.ndc = getNdc();

        String ndc = forecastingMasterCacheModel.ndc;

        if ((ndc != null) && (ndc.length() == 0)) {
            forecastingMasterCacheModel.ndc = null;
        }

        forecastingMasterCacheModel.batchId = getBatchId();

        String batchId = forecastingMasterCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            forecastingMasterCacheModel.batchId = null;
        }

        forecastingMasterCacheModel.forecastVer = getForecastVer();

        String forecastVer = forecastingMasterCacheModel.forecastVer;

        if ((forecastVer != null) && (forecastVer.length() == 0)) {
            forecastingMasterCacheModel.forecastVer = null;
        }

        forecastingMasterCacheModel.country = getCountry();

        String country = forecastingMasterCacheModel.country;

        if ((country != null) && (country.length() == 0)) {
            forecastingMasterCacheModel.country = null;
        }

        forecastingMasterCacheModel.product = getProduct();

        String product = forecastingMasterCacheModel.product;

        if ((product != null) && (product.length() == 0)) {
            forecastingMasterCacheModel.product = null;
        }

        Date forecastStartDate = getForecastStartDate();

        if (forecastStartDate != null) {
            forecastingMasterCacheModel.forecastStartDate = forecastStartDate.getTime();
        } else {
            forecastingMasterCacheModel.forecastStartDate = Long.MIN_VALUE;
        }

        forecastingMasterCacheModel.forecastedSalesPercentage = getForecastedSalesPercentage();

        String forecastedSalesPercentage = forecastingMasterCacheModel.forecastedSalesPercentage;

        if ((forecastedSalesPercentage != null) &&
                (forecastedSalesPercentage.length() == 0)) {
            forecastingMasterCacheModel.forecastedSalesPercentage = null;
        }

        forecastingMasterCacheModel.units = getUnits();

        forecastingMasterCacheModel.dollars = getDollars();

        forecastingMasterCacheModel.forecastMonth = getForecastMonth();

        String forecastMonth = forecastingMasterCacheModel.forecastMonth;

        if ((forecastMonth != null) && (forecastMonth.length() == 0)) {
            forecastingMasterCacheModel.forecastMonth = null;
        }

        forecastingMasterCacheModel.createdBy = getCreatedBy();

        forecastingMasterCacheModel.segment = getSegment();

        String segment = forecastingMasterCacheModel.segment;

        if ((segment != null) && (segment.length() == 0)) {
            forecastingMasterCacheModel.segment = null;
        }

        forecastingMasterCacheModel.price = getPrice();

        forecastingMasterCacheModel.actualSalesPercentage = getActualSalesPercentage();

        String actualSalesPercentage = forecastingMasterCacheModel.actualSalesPercentage;

        if ((actualSalesPercentage != null) &&
                (actualSalesPercentage.length() == 0)) {
            forecastingMasterCacheModel.actualSalesPercentage = null;
        }

        forecastingMasterCacheModel.forecastYear = getForecastYear();

        String forecastYear = forecastingMasterCacheModel.forecastYear;

        if ((forecastYear != null) && (forecastYear.length() == 0)) {
            forecastingMasterCacheModel.forecastYear = null;
        }

        forecastingMasterCacheModel.forecastName = getForecastName();

        String forecastName = forecastingMasterCacheModel.forecastName;

        if ((forecastName != null) && (forecastName.length() == 0)) {
            forecastingMasterCacheModel.forecastName = null;
        }

        Date forecastDate = getForecastDate();

        if (forecastDate != null) {
            forecastingMasterCacheModel.forecastDate = forecastDate.getTime();
        } else {
            forecastingMasterCacheModel.forecastDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            forecastingMasterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            forecastingMasterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        forecastingMasterCacheModel.brand = getBrand();

        String brand = forecastingMasterCacheModel.brand;

        if ((brand != null) && (brand.length() == 0)) {
            forecastingMasterCacheModel.brand = null;
        }

        forecastingMasterCacheModel.forecastValue = getForecastValue();

        String forecastValue = forecastingMasterCacheModel.forecastValue;

        if ((forecastValue != null) && (forecastValue.length() == 0)) {
            forecastingMasterCacheModel.forecastValue = null;
        }

        forecastingMasterCacheModel.percentageEstimateYear = getPercentageEstimateYear();

        forecastingMasterCacheModel.recordLockStatus = getRecordLockStatus();

        forecastingMasterCacheModel.source = getSource();

        String source = forecastingMasterCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            forecastingMasterCacheModel.source = null;
        }

        forecastingMasterCacheModel.forecastMasterSid = getForecastMasterSid();

        forecastingMasterCacheModel.forecastedSalesPercentMonth = getForecastedSalesPercentMonth();

        forecastingMasterCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = forecastingMasterCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            forecastingMasterCacheModel.inboundStatus = null;
        }

        forecastingMasterCacheModel.businessUnit = getBusinessUnit();

        return forecastingMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(65);

        sb.append("{forecastValueType=");
        sb.append(getForecastValueType());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", percentageEstimate=");
        sb.append(getPercentageEstimate());
        sb.append(", actualSalesPercentageMonth=");
        sb.append(getActualSalesPercentageMonth());
        sb.append(", ndc=");
        sb.append(getNdc());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", forecastVer=");
        sb.append(getForecastVer());
        sb.append(", country=");
        sb.append(getCountry());
        sb.append(", product=");
        sb.append(getProduct());
        sb.append(", forecastStartDate=");
        sb.append(getForecastStartDate());
        sb.append(", forecastedSalesPercentage=");
        sb.append(getForecastedSalesPercentage());
        sb.append(", units=");
        sb.append(getUnits());
        sb.append(", dollars=");
        sb.append(getDollars());
        sb.append(", forecastMonth=");
        sb.append(getForecastMonth());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", segment=");
        sb.append(getSegment());
        sb.append(", price=");
        sb.append(getPrice());
        sb.append(", actualSalesPercentage=");
        sb.append(getActualSalesPercentage());
        sb.append(", forecastYear=");
        sb.append(getForecastYear());
        sb.append(", forecastName=");
        sb.append(getForecastName());
        sb.append(", forecastDate=");
        sb.append(getForecastDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", brand=");
        sb.append(getBrand());
        sb.append(", forecastValue=");
        sb.append(getForecastValue());
        sb.append(", percentageEstimateYear=");
        sb.append(getPercentageEstimateYear());
        sb.append(", recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", forecastMasterSid=");
        sb.append(getForecastMasterSid());
        sb.append(", forecastedSalesPercentMonth=");
        sb.append(getForecastedSalesPercentMonth());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append(", businessUnit=");
        sb.append(getBusinessUnit());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(100);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.ForecastingMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>forecastValueType</column-name><column-value><![CDATA[");
        sb.append(getForecastValueType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>percentageEstimate</column-name><column-value><![CDATA[");
        sb.append(getPercentageEstimate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>actualSalesPercentageMonth</column-name><column-value><![CDATA[");
        sb.append(getActualSalesPercentageMonth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ndc</column-name><column-value><![CDATA[");
        sb.append(getNdc());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastVer</column-name><column-value><![CDATA[");
        sb.append(getForecastVer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>country</column-name><column-value><![CDATA[");
        sb.append(getCountry());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>product</column-name><column-value><![CDATA[");
        sb.append(getProduct());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastStartDate</column-name><column-value><![CDATA[");
        sb.append(getForecastStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastedSalesPercentage</column-name><column-value><![CDATA[");
        sb.append(getForecastedSalesPercentage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>units</column-name><column-value><![CDATA[");
        sb.append(getUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dollars</column-name><column-value><![CDATA[");
        sb.append(getDollars());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastMonth</column-name><column-value><![CDATA[");
        sb.append(getForecastMonth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>segment</column-name><column-value><![CDATA[");
        sb.append(getSegment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>price</column-name><column-value><![CDATA[");
        sb.append(getPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>actualSalesPercentage</column-name><column-value><![CDATA[");
        sb.append(getActualSalesPercentage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastYear</column-name><column-value><![CDATA[");
        sb.append(getForecastYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastName</column-name><column-value><![CDATA[");
        sb.append(getForecastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastDate</column-name><column-value><![CDATA[");
        sb.append(getForecastDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brand</column-name><column-value><![CDATA[");
        sb.append(getBrand());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastValue</column-name><column-value><![CDATA[");
        sb.append(getForecastValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>percentageEstimateYear</column-name><column-value><![CDATA[");
        sb.append(getPercentageEstimateYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastMasterSid</column-name><column-value><![CDATA[");
        sb.append(getForecastMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forecastedSalesPercentMonth</column-name><column-value><![CDATA[");
        sb.append(getForecastedSalesPercentMonth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>businessUnit</column-name><column-value><![CDATA[");
        sb.append(getBusinessUnit());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
