/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.MProjectionSelection;
import com.stpl.app.model.MProjectionSelectionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MProjectionSelection service. Represents a row in the &quot;M_PROJECTION_SELECTION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MProjectionSelectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MProjectionSelectionImpl}.
 * </p>
 *
 * @author
 * @see MProjectionSelectionImpl
 * @see MProjectionSelection
 * @see MProjectionSelectionModel
 * @generated
 */
@ProviderType
public class MProjectionSelectionModelImpl extends BaseModelImpl<MProjectionSelection>
	implements MProjectionSelectionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a m projection selection model instance should use the {@link MProjectionSelection} interface instead.
	 */
	public static final String TABLE_NAME = "M_PROJECTION_SELECTION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "M_PROJECTION_SELECTION_SID", Types.INTEGER },
			{ "PROJECTION_MASTER_SID", Types.INTEGER },
			{ "FIELD_VALUES", Types.VARCHAR },
			{ "FIELD_NAME", Types.VARCHAR },
			{ "SCREEN_NAME", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("M_PROJECTION_SELECTION_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PROJECTION_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("FIELD_VALUES", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FIELD_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SCREEN_NAME", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table M_PROJECTION_SELECTION (M_PROJECTION_SELECTION_SID INTEGER not null primary key IDENTITY,PROJECTION_MASTER_SID INTEGER,FIELD_VALUES VARCHAR(75) null,FIELD_NAME VARCHAR(75) null,SCREEN_NAME VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table M_PROJECTION_SELECTION";
	public static final String ORDER_BY_JPQL = " ORDER BY mProjectionSelection.mProjectionSelectionSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY M_PROJECTION_SELECTION.M_PROJECTION_SELECTION_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.MProjectionSelection"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.MProjectionSelection"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.MProjectionSelection"));

	public MProjectionSelectionModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _mProjectionSelectionSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setMProjectionSelectionSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mProjectionSelectionSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MProjectionSelection.class;
	}

	@Override
	public String getModelClassName() {
		return MProjectionSelection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("mProjectionSelectionSid", getMProjectionSelectionSid());
		attributes.put("projectionMasterSid", getProjectionMasterSid());
		attributes.put("fieldValues", getFieldValues());
		attributes.put("fieldName", getFieldName());
		attributes.put("screenName", getScreenName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer mProjectionSelectionSid = (Integer)attributes.get(
				"mProjectionSelectionSid");

		if (mProjectionSelectionSid != null) {
			setMProjectionSelectionSid(mProjectionSelectionSid);
		}

		Integer projectionMasterSid = (Integer)attributes.get(
				"projectionMasterSid");

		if (projectionMasterSid != null) {
			setProjectionMasterSid(projectionMasterSid);
		}

		String fieldValues = (String)attributes.get("fieldValues");

		if (fieldValues != null) {
			setFieldValues(fieldValues);
		}

		String fieldName = (String)attributes.get("fieldName");

		if (fieldName != null) {
			setFieldName(fieldName);
		}

		String screenName = (String)attributes.get("screenName");

		if (screenName != null) {
			setScreenName(screenName);
		}
	}

	@Override
	public int getMProjectionSelectionSid() {
		return _mProjectionSelectionSid;
	}

	@Override
	public void setMProjectionSelectionSid(int mProjectionSelectionSid) {
		_mProjectionSelectionSid = mProjectionSelectionSid;
	}

	@Override
	public int getProjectionMasterSid() {
		return _projectionMasterSid;
	}

	@Override
	public void setProjectionMasterSid(int projectionMasterSid) {
		_projectionMasterSid = projectionMasterSid;
	}

	@Override
	public String getFieldValues() {
		if (_fieldValues == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldValues;
		}
	}

	@Override
	public void setFieldValues(String fieldValues) {
		_fieldValues = fieldValues;
	}

	@Override
	public String getFieldName() {
		if (_fieldName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldName;
		}
	}

	@Override
	public void setFieldName(String fieldName) {
		_fieldName = fieldName;
	}

	@Override
	public String getScreenName() {
		if (_screenName == null) {
			return StringPool.BLANK;
		}
		else {
			return _screenName;
		}
	}

	@Override
	public void setScreenName(String screenName) {
		_screenName = screenName;
	}

	@Override
	public MProjectionSelection toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MProjectionSelection)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MProjectionSelectionImpl mProjectionSelectionImpl = new MProjectionSelectionImpl();

		mProjectionSelectionImpl.setMProjectionSelectionSid(getMProjectionSelectionSid());
		mProjectionSelectionImpl.setProjectionMasterSid(getProjectionMasterSid());
		mProjectionSelectionImpl.setFieldValues(getFieldValues());
		mProjectionSelectionImpl.setFieldName(getFieldName());
		mProjectionSelectionImpl.setScreenName(getScreenName());

		mProjectionSelectionImpl.resetOriginalValues();

		return mProjectionSelectionImpl;
	}

	@Override
	public int compareTo(MProjectionSelection mProjectionSelection) {
		int primaryKey = mProjectionSelection.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MProjectionSelection)) {
			return false;
		}

		MProjectionSelection mProjectionSelection = (MProjectionSelection)obj;

		int primaryKey = mProjectionSelection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MProjectionSelection> toCacheModel() {
		MProjectionSelectionCacheModel mProjectionSelectionCacheModel = new MProjectionSelectionCacheModel();

		mProjectionSelectionCacheModel.mProjectionSelectionSid = getMProjectionSelectionSid();

		mProjectionSelectionCacheModel.projectionMasterSid = getProjectionMasterSid();

		mProjectionSelectionCacheModel.fieldValues = getFieldValues();

		String fieldValues = mProjectionSelectionCacheModel.fieldValues;

		if ((fieldValues != null) && (fieldValues.length() == 0)) {
			mProjectionSelectionCacheModel.fieldValues = null;
		}

		mProjectionSelectionCacheModel.fieldName = getFieldName();

		String fieldName = mProjectionSelectionCacheModel.fieldName;

		if ((fieldName != null) && (fieldName.length() == 0)) {
			mProjectionSelectionCacheModel.fieldName = null;
		}

		mProjectionSelectionCacheModel.screenName = getScreenName();

		String screenName = mProjectionSelectionCacheModel.screenName;

		if ((screenName != null) && (screenName.length() == 0)) {
			mProjectionSelectionCacheModel.screenName = null;
		}

		return mProjectionSelectionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{mProjectionSelectionSid=");
		sb.append(getMProjectionSelectionSid());
		sb.append(", projectionMasterSid=");
		sb.append(getProjectionMasterSid());
		sb.append(", fieldValues=");
		sb.append(getFieldValues());
		sb.append(", fieldName=");
		sb.append(getFieldName());
		sb.append(", screenName=");
		sb.append(getScreenName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.MProjectionSelection");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>mProjectionSelectionSid</column-name><column-value><![CDATA[");
		sb.append(getMProjectionSelectionSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionMasterSid</column-name><column-value><![CDATA[");
		sb.append(getProjectionMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldValues</column-name><column-value><![CDATA[");
		sb.append(getFieldValues());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldName</column-name><column-value><![CDATA[");
		sb.append(getFieldName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>screenName</column-name><column-value><![CDATA[");
		sb.append(getScreenName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MProjectionSelection.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MProjectionSelection.class
		};
	private int _mProjectionSelectionSid;
	private int _projectionMasterSid;
	private String _fieldValues;
	private String _fieldName;
	private String _screenName;
	private MProjectionSelection _escapedModel;
}