/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the RelationshipLevelDefinition service. Represents a row in the &quot;RELATIONSHIP_LEVEL_DEFINITION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.stpl.app.model.impl.RelationshipLevelDefinitionModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.stpl.app.model.impl.RelationshipLevelDefinitionImpl}.
 * </p>
 *
 * @author
 * @see RelationshipLevelDefinition
 * @see com.stpl.app.model.impl.RelationshipLevelDefinitionImpl
 * @see com.stpl.app.model.impl.RelationshipLevelDefinitionModelImpl
 * @generated
 */
@ProviderType
public interface RelationshipLevelDefinitionModel extends BaseModel<RelationshipLevelDefinition> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a relationship level definition model instance should use the {@link RelationshipLevelDefinition} interface instead.
	 */

	/**
	 * Returns the primary key of this relationship level definition.
	 *
	 * @return the primary key of this relationship level definition
	 */
	public int getPrimaryKey();

	/**
	 * Sets the primary key of this relationship level definition.
	 *
	 * @param primaryKey the primary key of this relationship level definition
	 */
	public void setPrimaryKey(int primaryKey);

	/**
	 * Returns the relationship level values of this relationship level definition.
	 *
	 * @return the relationship level values of this relationship level definition
	 */
	@AutoEscape
	public String getRelationshipLevelValues();

	/**
	 * Sets the relationship level values of this relationship level definition.
	 *
	 * @param relationshipLevelValues the relationship level values of this relationship level definition
	 */
	public void setRelationshipLevelValues(String relationshipLevelValues);

	/**
	 * Returns the hierarchy level definition sid of this relationship level definition.
	 *
	 * @return the hierarchy level definition sid of this relationship level definition
	 */
	public int getHierarchyLevelDefinitionSid();

	/**
	 * Sets the hierarchy level definition sid of this relationship level definition.
	 *
	 * @param hierarchyLevelDefinitionSid the hierarchy level definition sid of this relationship level definition
	 */
	public void setHierarchyLevelDefinitionSid(int hierarchyLevelDefinitionSid);

	/**
	 * Returns the parent node of this relationship level definition.
	 *
	 * @return the parent node of this relationship level definition
	 */
	@AutoEscape
	public String getParentNode();

	/**
	 * Sets the parent node of this relationship level definition.
	 *
	 * @param parentNode the parent node of this relationship level definition
	 */
	public void setParentNode(String parentNode);

	/**
	 * Returns the version no of this relationship level definition.
	 *
	 * @return the version no of this relationship level definition
	 */
	public int getVersionNo();

	/**
	 * Sets the version no of this relationship level definition.
	 *
	 * @param versionNo the version no of this relationship level definition
	 */
	public void setVersionNo(int versionNo);

	/**
	 * Returns the relationship builder sid of this relationship level definition.
	 *
	 * @return the relationship builder sid of this relationship level definition
	 */
	public int getRelationshipBuilderSid();

	/**
	 * Sets the relationship builder sid of this relationship level definition.
	 *
	 * @param relationshipBuilderSid the relationship builder sid of this relationship level definition
	 */
	public void setRelationshipBuilderSid(int relationshipBuilderSid);

	/**
	 * Returns the modified date of this relationship level definition.
	 *
	 * @return the modified date of this relationship level definition
	 */
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this relationship level definition.
	 *
	 * @param modifiedDate the modified date of this relationship level definition
	 */
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the created by of this relationship level definition.
	 *
	 * @return the created by of this relationship level definition
	 */
	public int getCreatedBy();

	/**
	 * Sets the created by of this relationship level definition.
	 *
	 * @param createdBy the created by of this relationship level definition
	 */
	public void setCreatedBy(int createdBy);

	/**
	 * Returns the created date of this relationship level definition.
	 *
	 * @return the created date of this relationship level definition
	 */
	public Date getCreatedDate();

	/**
	 * Sets the created date of this relationship level definition.
	 *
	 * @param createdDate the created date of this relationship level definition
	 */
	public void setCreatedDate(Date createdDate);

	/**
	 * Returns the level no of this relationship level definition.
	 *
	 * @return the level no of this relationship level definition
	 */
	@AutoEscape
	public String getLevelNo();

	/**
	 * Sets the level no of this relationship level definition.
	 *
	 * @param levelNo the level no of this relationship level definition
	 */
	public void setLevelNo(String levelNo);

	/**
	 * Returns the modified by of this relationship level definition.
	 *
	 * @return the modified by of this relationship level definition
	 */
	public int getModifiedBy();

	/**
	 * Sets the modified by of this relationship level definition.
	 *
	 * @param modifiedBy the modified by of this relationship level definition
	 */
	public void setModifiedBy(int modifiedBy);

	/**
	 * Returns the hierarchy no of this relationship level definition.
	 *
	 * @return the hierarchy no of this relationship level definition
	 */
	@AutoEscape
	public String getHierarchyNo();

	/**
	 * Sets the hierarchy no of this relationship level definition.
	 *
	 * @param hierarchyNo the hierarchy no of this relationship level definition
	 */
	public void setHierarchyNo(String hierarchyNo);

	/**
	 * Returns the relationship level sid of this relationship level definition.
	 *
	 * @return the relationship level sid of this relationship level definition
	 */
	public int getRelationshipLevelSid();

	/**
	 * Sets the relationship level sid of this relationship level definition.
	 *
	 * @param relationshipLevelSid the relationship level sid of this relationship level definition
	 */
	public void setRelationshipLevelSid(int relationshipLevelSid);

	/**
	 * Returns the flag of this relationship level definition.
	 *
	 * @return the flag of this relationship level definition
	 */
	@AutoEscape
	public String getFlag();

	/**
	 * Sets the flag of this relationship level definition.
	 *
	 * @param flag the flag of this relationship level definition
	 */
	public void setFlag(String flag);

	/**
	 * Returns the level name of this relationship level definition.
	 *
	 * @return the level name of this relationship level definition
	 */
	@AutoEscape
	public String getLevelName();

	/**
	 * Sets the level name of this relationship level definition.
	 *
	 * @param levelName the level name of this relationship level definition
	 */
	public void setLevelName(String levelName);

	/**
	 * Returns the parent hierarchy no of this relationship level definition.
	 *
	 * @return the parent hierarchy no of this relationship level definition
	 */
	@AutoEscape
	public String getParentHierarchyNo();

	/**
	 * Sets the parent hierarchy no of this relationship level definition.
	 *
	 * @param parentHierarchyNo the parent hierarchy no of this relationship level definition
	 */
	public void setParentHierarchyNo(String parentHierarchyNo);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(
		RelationshipLevelDefinition relationshipLevelDefinition);

	@Override
	public int hashCode();

	@Override
	public CacheModel<RelationshipLevelDefinition> toCacheModel();

	@Override
	public RelationshipLevelDefinition toEscapedModel();

	@Override
	public RelationshipLevelDefinition toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}