/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.DemandForecast;
import com.stpl.app.model.DemandForecastModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DemandForecast service. Represents a row in the &quot;DEMAND_FORECAST&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DemandForecastModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DemandForecastImpl}.
 * </p>
 *
 * @author
 * @see DemandForecastImpl
 * @see DemandForecast
 * @see DemandForecastModel
 * @generated
 */
@ProviderType
public class DemandForecastModelImpl extends BaseModelImpl<DemandForecast>
	implements DemandForecastModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a demand forecast model instance should use the {@link DemandForecast} interface instead.
	 */
	public static final String TABLE_NAME = "DEMAND_FORECAST";
	public static final Object[][] TABLE_COLUMNS = {
			{ "MODIFIED_BY", Types.VARCHAR },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "TOTAL_DEMAND_UNITS", Types.DOUBLE },
			{ "BRAND_MASTER_SID", Types.INTEGER },
			{ "MARKET_SHARE_UNITS", Types.DOUBLE },
			{ "BATCH_ID", Types.VARCHAR },
			{ "GROSS_AMOUNT", Types.DOUBLE },
			{ "FORECAST_VER", Types.VARCHAR },
			{ "BRAND_ID", Types.VARCHAR },
			{ "GROSS_UNITS", Types.DOUBLE },
			{ "COUNTRY", Types.VARCHAR },
			{ "DEMAND_FORECAST_SID", Types.INTEGER },
			{ "FORECAST_TYPE", Types.VARCHAR },
			{ "ITEM_MASTER_SID", Types.INTEGER },
			{ "TOTAL_DEMAND_AMOUNT", Types.DOUBLE },
			{ "FORECAST_MONTH", Types.VARCHAR },
			{ "ORGANIZATION_KEY", Types.VARCHAR },
			{ "CREATED_BY", Types.VARCHAR },
			{ "MARKET_SIZE_UNITS", Types.DOUBLE },
			{ "SEGMENT", Types.VARCHAR },
			{ "FORECAST_YEAR", Types.VARCHAR },
			{ "ITEM_ID", Types.VARCHAR },
			{ "INVENTORY_UNIT_CHANGE", Types.DOUBLE },
			{ "GROSS_PRICE", Types.DOUBLE },
			{ "FORECAST_NAME", Types.VARCHAR },
			{ "NET_SALES_AMOUNT", Types.DOUBLE },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "ITEM_IDENTIFIER", Types.VARCHAR },
			{ "RECORD_LOCK_STATUS", Types.BOOLEAN },
			{ "UNCAPTURED_UNITS_RATIO", Types.VARCHAR },
			{ "ITEM_IDENTIFIER_CODE_QUALIFIER", Types.VARCHAR },
			{ "MARKET_SHARE_RATIO", Types.VARCHAR },
			{ "SOURCE", Types.VARCHAR },
			{ "UNCAPTURED_UNITS", Types.DOUBLE },
			{ "NET_SALES_PRICE", Types.DOUBLE },
			{ "INBOUND_STATUS", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("TOTAL_DEMAND_UNITS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("BRAND_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MARKET_SHARE_UNITS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("GROSS_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("FORECAST_VER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BRAND_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("GROSS_UNITS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("COUNTRY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEMAND_FORECAST_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("FORECAST_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("TOTAL_DEMAND_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("FORECAST_MONTH", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ORGANIZATION_KEY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MARKET_SIZE_UNITS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("SEGMENT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_YEAR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INVENTORY_UNIT_CHANGE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("GROSS_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("FORECAST_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NET_SALES_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ITEM_IDENTIFIER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RECORD_LOCK_STATUS", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("UNCAPTURED_UNITS_RATIO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_IDENTIFIER_CODE_QUALIFIER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MARKET_SHARE_RATIO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UNCAPTURED_UNITS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("NET_SALES_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table DEMAND_FORECAST (MODIFIED_BY VARCHAR(75) null,CREATED_DATE DATE null,TOTAL_DEMAND_UNITS DOUBLE,BRAND_MASTER_SID INTEGER,MARKET_SHARE_UNITS DOUBLE,BATCH_ID VARCHAR(75) null,GROSS_AMOUNT DOUBLE,FORECAST_VER VARCHAR(75) null,BRAND_ID VARCHAR(75) null,GROSS_UNITS DOUBLE,COUNTRY VARCHAR(75) null,DEMAND_FORECAST_SID INTEGER not null primary key IDENTITY,FORECAST_TYPE VARCHAR(75) null,ITEM_MASTER_SID INTEGER,TOTAL_DEMAND_AMOUNT DOUBLE,FORECAST_MONTH VARCHAR(75) null,ORGANIZATION_KEY VARCHAR(75) null,CREATED_BY VARCHAR(75) null,MARKET_SIZE_UNITS DOUBLE,SEGMENT VARCHAR(75) null,FORECAST_YEAR VARCHAR(75) null,ITEM_ID VARCHAR(75) null,INVENTORY_UNIT_CHANGE DOUBLE,GROSS_PRICE DOUBLE,FORECAST_NAME VARCHAR(75) null,NET_SALES_AMOUNT DOUBLE,MODIFIED_DATE DATE null,ITEM_IDENTIFIER VARCHAR(75) null,RECORD_LOCK_STATUS BOOLEAN,UNCAPTURED_UNITS_RATIO VARCHAR(75) null,ITEM_IDENTIFIER_CODE_QUALIFIER VARCHAR(75) null,MARKET_SHARE_RATIO VARCHAR(75) null,SOURCE VARCHAR(75) null,UNCAPTURED_UNITS DOUBLE,NET_SALES_PRICE DOUBLE,INBOUND_STATUS VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DEMAND_FORECAST";
	public static final String ORDER_BY_JPQL = " ORDER BY demandForecast.demandForecastSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DEMAND_FORECAST.DEMAND_FORECAST_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.DemandForecast"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.DemandForecast"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.DemandForecast"));

	public DemandForecastModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _demandForecastSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setDemandForecastSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _demandForecastSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DemandForecast.class;
	}

	@Override
	public String getModelClassName() {
		return DemandForecast.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("totalDemandUnits", getTotalDemandUnits());
		attributes.put("brandMasterSid", getBrandMasterSid());
		attributes.put("marketShareUnits", getMarketShareUnits());
		attributes.put("batchId", getBatchId());
		attributes.put("grossAmount", getGrossAmount());
		attributes.put("forecastVer", getForecastVer());
		attributes.put("brandId", getBrandId());
		attributes.put("grossUnits", getGrossUnits());
		attributes.put("country", getCountry());
		attributes.put("demandForecastSid", getDemandForecastSid());
		attributes.put("forecastType", getForecastType());
		attributes.put("itemMasterSid", getItemMasterSid());
		attributes.put("totalDemandAmount", getTotalDemandAmount());
		attributes.put("forecastMonth", getForecastMonth());
		attributes.put("organizationKey", getOrganizationKey());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("marketSizeUnits", getMarketSizeUnits());
		attributes.put("segment", getSegment());
		attributes.put("forecastYear", getForecastYear());
		attributes.put("itemId", getItemId());
		attributes.put("inventoryUnitChange", getInventoryUnitChange());
		attributes.put("grossPrice", getGrossPrice());
		attributes.put("forecastName", getForecastName());
		attributes.put("netSalesAmount", getNetSalesAmount());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("itemIdentifier", getItemIdentifier());
		attributes.put("recordLockStatus", getRecordLockStatus());
		attributes.put("uncapturedUnitsRatio", getUncapturedUnitsRatio());
		attributes.put("itemIdentifierCodeQualifier",
			getItemIdentifierCodeQualifier());
		attributes.put("marketShareRatio", getMarketShareRatio());
		attributes.put("source", getSource());
		attributes.put("uncapturedUnits", getUncapturedUnits());
		attributes.put("netSalesPrice", getNetSalesPrice());
		attributes.put("inboundStatus", getInboundStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Double totalDemandUnits = (Double)attributes.get("totalDemandUnits");

		if (totalDemandUnits != null) {
			setTotalDemandUnits(totalDemandUnits);
		}

		Integer brandMasterSid = (Integer)attributes.get("brandMasterSid");

		if (brandMasterSid != null) {
			setBrandMasterSid(brandMasterSid);
		}

		Double marketShareUnits = (Double)attributes.get("marketShareUnits");

		if (marketShareUnits != null) {
			setMarketShareUnits(marketShareUnits);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		Double grossAmount = (Double)attributes.get("grossAmount");

		if (grossAmount != null) {
			setGrossAmount(grossAmount);
		}

		String forecastVer = (String)attributes.get("forecastVer");

		if (forecastVer != null) {
			setForecastVer(forecastVer);
		}

		String brandId = (String)attributes.get("brandId");

		if (brandId != null) {
			setBrandId(brandId);
		}

		Double grossUnits = (Double)attributes.get("grossUnits");

		if (grossUnits != null) {
			setGrossUnits(grossUnits);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		Integer demandForecastSid = (Integer)attributes.get("demandForecastSid");

		if (demandForecastSid != null) {
			setDemandForecastSid(demandForecastSid);
		}

		String forecastType = (String)attributes.get("forecastType");

		if (forecastType != null) {
			setForecastType(forecastType);
		}

		Integer itemMasterSid = (Integer)attributes.get("itemMasterSid");

		if (itemMasterSid != null) {
			setItemMasterSid(itemMasterSid);
		}

		Double totalDemandAmount = (Double)attributes.get("totalDemandAmount");

		if (totalDemandAmount != null) {
			setTotalDemandAmount(totalDemandAmount);
		}

		String forecastMonth = (String)attributes.get("forecastMonth");

		if (forecastMonth != null) {
			setForecastMonth(forecastMonth);
		}

		String organizationKey = (String)attributes.get("organizationKey");

		if (organizationKey != null) {
			setOrganizationKey(organizationKey);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Double marketSizeUnits = (Double)attributes.get("marketSizeUnits");

		if (marketSizeUnits != null) {
			setMarketSizeUnits(marketSizeUnits);
		}

		String segment = (String)attributes.get("segment");

		if (segment != null) {
			setSegment(segment);
		}

		String forecastYear = (String)attributes.get("forecastYear");

		if (forecastYear != null) {
			setForecastYear(forecastYear);
		}

		String itemId = (String)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		Double inventoryUnitChange = (Double)attributes.get(
				"inventoryUnitChange");

		if (inventoryUnitChange != null) {
			setInventoryUnitChange(inventoryUnitChange);
		}

		Double grossPrice = (Double)attributes.get("grossPrice");

		if (grossPrice != null) {
			setGrossPrice(grossPrice);
		}

		String forecastName = (String)attributes.get("forecastName");

		if (forecastName != null) {
			setForecastName(forecastName);
		}

		Double netSalesAmount = (Double)attributes.get("netSalesAmount");

		if (netSalesAmount != null) {
			setNetSalesAmount(netSalesAmount);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String itemIdentifier = (String)attributes.get("itemIdentifier");

		if (itemIdentifier != null) {
			setItemIdentifier(itemIdentifier);
		}

		Boolean recordLockStatus = (Boolean)attributes.get("recordLockStatus");

		if (recordLockStatus != null) {
			setRecordLockStatus(recordLockStatus);
		}

		String uncapturedUnitsRatio = (String)attributes.get(
				"uncapturedUnitsRatio");

		if (uncapturedUnitsRatio != null) {
			setUncapturedUnitsRatio(uncapturedUnitsRatio);
		}

		String itemIdentifierCodeQualifier = (String)attributes.get(
				"itemIdentifierCodeQualifier");

		if (itemIdentifierCodeQualifier != null) {
			setItemIdentifierCodeQualifier(itemIdentifierCodeQualifier);
		}

		String marketShareRatio = (String)attributes.get("marketShareRatio");

		if (marketShareRatio != null) {
			setMarketShareRatio(marketShareRatio);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		Double uncapturedUnits = (Double)attributes.get("uncapturedUnits");

		if (uncapturedUnits != null) {
			setUncapturedUnits(uncapturedUnits);
		}

		Double netSalesPrice = (Double)attributes.get("netSalesPrice");

		if (netSalesPrice != null) {
			setNetSalesPrice(netSalesPrice);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public double getTotalDemandUnits() {
		return _totalDemandUnits;
	}

	@Override
	public void setTotalDemandUnits(double totalDemandUnits) {
		_totalDemandUnits = totalDemandUnits;
	}

	@Override
	public int getBrandMasterSid() {
		return _brandMasterSid;
	}

	@Override
	public void setBrandMasterSid(int brandMasterSid) {
		_brandMasterSid = brandMasterSid;
	}

	@Override
	public double getMarketShareUnits() {
		return _marketShareUnits;
	}

	@Override
	public void setMarketShareUnits(double marketShareUnits) {
		_marketShareUnits = marketShareUnits;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public double getGrossAmount() {
		return _grossAmount;
	}

	@Override
	public void setGrossAmount(double grossAmount) {
		_grossAmount = grossAmount;
	}

	@Override
	public String getForecastVer() {
		if (_forecastVer == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastVer;
		}
	}

	@Override
	public void setForecastVer(String forecastVer) {
		_forecastVer = forecastVer;
	}

	@Override
	public String getBrandId() {
		if (_brandId == null) {
			return StringPool.BLANK;
		}
		else {
			return _brandId;
		}
	}

	@Override
	public void setBrandId(String brandId) {
		_brandId = brandId;
	}

	@Override
	public double getGrossUnits() {
		return _grossUnits;
	}

	@Override
	public void setGrossUnits(double grossUnits) {
		_grossUnits = grossUnits;
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public int getDemandForecastSid() {
		return _demandForecastSid;
	}

	@Override
	public void setDemandForecastSid(int demandForecastSid) {
		_demandForecastSid = demandForecastSid;
	}

	@Override
	public String getForecastType() {
		if (_forecastType == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastType;
		}
	}

	@Override
	public void setForecastType(String forecastType) {
		_forecastType = forecastType;
	}

	@Override
	public int getItemMasterSid() {
		return _itemMasterSid;
	}

	@Override
	public void setItemMasterSid(int itemMasterSid) {
		_itemMasterSid = itemMasterSid;
	}

	@Override
	public double getTotalDemandAmount() {
		return _totalDemandAmount;
	}

	@Override
	public void setTotalDemandAmount(double totalDemandAmount) {
		_totalDemandAmount = totalDemandAmount;
	}

	@Override
	public String getForecastMonth() {
		if (_forecastMonth == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastMonth;
		}
	}

	@Override
	public void setForecastMonth(String forecastMonth) {
		_forecastMonth = forecastMonth;
	}

	@Override
	public String getOrganizationKey() {
		if (_organizationKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _organizationKey;
		}
	}

	@Override
	public void setOrganizationKey(String organizationKey) {
		_organizationKey = organizationKey;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public double getMarketSizeUnits() {
		return _marketSizeUnits;
	}

	@Override
	public void setMarketSizeUnits(double marketSizeUnits) {
		_marketSizeUnits = marketSizeUnits;
	}

	@Override
	public String getSegment() {
		if (_segment == null) {
			return StringPool.BLANK;
		}
		else {
			return _segment;
		}
	}

	@Override
	public void setSegment(String segment) {
		_segment = segment;
	}

	@Override
	public String getForecastYear() {
		if (_forecastYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastYear;
		}
	}

	@Override
	public void setForecastYear(String forecastYear) {
		_forecastYear = forecastYear;
	}

	@Override
	public String getItemId() {
		if (_itemId == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemId;
		}
	}

	@Override
	public void setItemId(String itemId) {
		_itemId = itemId;
	}

	@Override
	public double getInventoryUnitChange() {
		return _inventoryUnitChange;
	}

	@Override
	public void setInventoryUnitChange(double inventoryUnitChange) {
		_inventoryUnitChange = inventoryUnitChange;
	}

	@Override
	public double getGrossPrice() {
		return _grossPrice;
	}

	@Override
	public void setGrossPrice(double grossPrice) {
		_grossPrice = grossPrice;
	}

	@Override
	public String getForecastName() {
		if (_forecastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastName;
		}
	}

	@Override
	public void setForecastName(String forecastName) {
		_forecastName = forecastName;
	}

	@Override
	public double getNetSalesAmount() {
		return _netSalesAmount;
	}

	@Override
	public void setNetSalesAmount(double netSalesAmount) {
		_netSalesAmount = netSalesAmount;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getItemIdentifier() {
		if (_itemIdentifier == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemIdentifier;
		}
	}

	@Override
	public void setItemIdentifier(String itemIdentifier) {
		_itemIdentifier = itemIdentifier;
	}

	@Override
	public boolean getRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public boolean isRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public void setRecordLockStatus(boolean recordLockStatus) {
		_recordLockStatus = recordLockStatus;
	}

	@Override
	public String getUncapturedUnitsRatio() {
		if (_uncapturedUnitsRatio == null) {
			return StringPool.BLANK;
		}
		else {
			return _uncapturedUnitsRatio;
		}
	}

	@Override
	public void setUncapturedUnitsRatio(String uncapturedUnitsRatio) {
		_uncapturedUnitsRatio = uncapturedUnitsRatio;
	}

	@Override
	public String getItemIdentifierCodeQualifier() {
		if (_itemIdentifierCodeQualifier == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemIdentifierCodeQualifier;
		}
	}

	@Override
	public void setItemIdentifierCodeQualifier(
		String itemIdentifierCodeQualifier) {
		_itemIdentifierCodeQualifier = itemIdentifierCodeQualifier;
	}

	@Override
	public String getMarketShareRatio() {
		if (_marketShareRatio == null) {
			return StringPool.BLANK;
		}
		else {
			return _marketShareRatio;
		}
	}

	@Override
	public void setMarketShareRatio(String marketShareRatio) {
		_marketShareRatio = marketShareRatio;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public double getUncapturedUnits() {
		return _uncapturedUnits;
	}

	@Override
	public void setUncapturedUnits(double uncapturedUnits) {
		_uncapturedUnits = uncapturedUnits;
	}

	@Override
	public double getNetSalesPrice() {
		return _netSalesPrice;
	}

	@Override
	public void setNetSalesPrice(double netSalesPrice) {
		_netSalesPrice = netSalesPrice;
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	@Override
	public DemandForecast toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DemandForecast)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DemandForecastImpl demandForecastImpl = new DemandForecastImpl();

		demandForecastImpl.setModifiedBy(getModifiedBy());
		demandForecastImpl.setCreatedDate(getCreatedDate());
		demandForecastImpl.setTotalDemandUnits(getTotalDemandUnits());
		demandForecastImpl.setBrandMasterSid(getBrandMasterSid());
		demandForecastImpl.setMarketShareUnits(getMarketShareUnits());
		demandForecastImpl.setBatchId(getBatchId());
		demandForecastImpl.setGrossAmount(getGrossAmount());
		demandForecastImpl.setForecastVer(getForecastVer());
		demandForecastImpl.setBrandId(getBrandId());
		demandForecastImpl.setGrossUnits(getGrossUnits());
		demandForecastImpl.setCountry(getCountry());
		demandForecastImpl.setDemandForecastSid(getDemandForecastSid());
		demandForecastImpl.setForecastType(getForecastType());
		demandForecastImpl.setItemMasterSid(getItemMasterSid());
		demandForecastImpl.setTotalDemandAmount(getTotalDemandAmount());
		demandForecastImpl.setForecastMonth(getForecastMonth());
		demandForecastImpl.setOrganizationKey(getOrganizationKey());
		demandForecastImpl.setCreatedBy(getCreatedBy());
		demandForecastImpl.setMarketSizeUnits(getMarketSizeUnits());
		demandForecastImpl.setSegment(getSegment());
		demandForecastImpl.setForecastYear(getForecastYear());
		demandForecastImpl.setItemId(getItemId());
		demandForecastImpl.setInventoryUnitChange(getInventoryUnitChange());
		demandForecastImpl.setGrossPrice(getGrossPrice());
		demandForecastImpl.setForecastName(getForecastName());
		demandForecastImpl.setNetSalesAmount(getNetSalesAmount());
		demandForecastImpl.setModifiedDate(getModifiedDate());
		demandForecastImpl.setItemIdentifier(getItemIdentifier());
		demandForecastImpl.setRecordLockStatus(getRecordLockStatus());
		demandForecastImpl.setUncapturedUnitsRatio(getUncapturedUnitsRatio());
		demandForecastImpl.setItemIdentifierCodeQualifier(getItemIdentifierCodeQualifier());
		demandForecastImpl.setMarketShareRatio(getMarketShareRatio());
		demandForecastImpl.setSource(getSource());
		demandForecastImpl.setUncapturedUnits(getUncapturedUnits());
		demandForecastImpl.setNetSalesPrice(getNetSalesPrice());
		demandForecastImpl.setInboundStatus(getInboundStatus());

		demandForecastImpl.resetOriginalValues();

		return demandForecastImpl;
	}

	@Override
	public int compareTo(DemandForecast demandForecast) {
		int primaryKey = demandForecast.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DemandForecast)) {
			return false;
		}

		DemandForecast demandForecast = (DemandForecast)obj;

		int primaryKey = demandForecast.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DemandForecast> toCacheModel() {
		DemandForecastCacheModel demandForecastCacheModel = new DemandForecastCacheModel();

		demandForecastCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = demandForecastCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			demandForecastCacheModel.modifiedBy = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			demandForecastCacheModel.createdDate = createdDate.getTime();
		}
		else {
			demandForecastCacheModel.createdDate = Long.MIN_VALUE;
		}

		demandForecastCacheModel.totalDemandUnits = getTotalDemandUnits();

		demandForecastCacheModel.brandMasterSid = getBrandMasterSid();

		demandForecastCacheModel.marketShareUnits = getMarketShareUnits();

		demandForecastCacheModel.batchId = getBatchId();

		String batchId = demandForecastCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			demandForecastCacheModel.batchId = null;
		}

		demandForecastCacheModel.grossAmount = getGrossAmount();

		demandForecastCacheModel.forecastVer = getForecastVer();

		String forecastVer = demandForecastCacheModel.forecastVer;

		if ((forecastVer != null) && (forecastVer.length() == 0)) {
			demandForecastCacheModel.forecastVer = null;
		}

		demandForecastCacheModel.brandId = getBrandId();

		String brandId = demandForecastCacheModel.brandId;

		if ((brandId != null) && (brandId.length() == 0)) {
			demandForecastCacheModel.brandId = null;
		}

		demandForecastCacheModel.grossUnits = getGrossUnits();

		demandForecastCacheModel.country = getCountry();

		String country = demandForecastCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			demandForecastCacheModel.country = null;
		}

		demandForecastCacheModel.demandForecastSid = getDemandForecastSid();

		demandForecastCacheModel.forecastType = getForecastType();

		String forecastType = demandForecastCacheModel.forecastType;

		if ((forecastType != null) && (forecastType.length() == 0)) {
			demandForecastCacheModel.forecastType = null;
		}

		demandForecastCacheModel.itemMasterSid = getItemMasterSid();

		demandForecastCacheModel.totalDemandAmount = getTotalDemandAmount();

		demandForecastCacheModel.forecastMonth = getForecastMonth();

		String forecastMonth = demandForecastCacheModel.forecastMonth;

		if ((forecastMonth != null) && (forecastMonth.length() == 0)) {
			demandForecastCacheModel.forecastMonth = null;
		}

		demandForecastCacheModel.organizationKey = getOrganizationKey();

		String organizationKey = demandForecastCacheModel.organizationKey;

		if ((organizationKey != null) && (organizationKey.length() == 0)) {
			demandForecastCacheModel.organizationKey = null;
		}

		demandForecastCacheModel.createdBy = getCreatedBy();

		String createdBy = demandForecastCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			demandForecastCacheModel.createdBy = null;
		}

		demandForecastCacheModel.marketSizeUnits = getMarketSizeUnits();

		demandForecastCacheModel.segment = getSegment();

		String segment = demandForecastCacheModel.segment;

		if ((segment != null) && (segment.length() == 0)) {
			demandForecastCacheModel.segment = null;
		}

		demandForecastCacheModel.forecastYear = getForecastYear();

		String forecastYear = demandForecastCacheModel.forecastYear;

		if ((forecastYear != null) && (forecastYear.length() == 0)) {
			demandForecastCacheModel.forecastYear = null;
		}

		demandForecastCacheModel.itemId = getItemId();

		String itemId = demandForecastCacheModel.itemId;

		if ((itemId != null) && (itemId.length() == 0)) {
			demandForecastCacheModel.itemId = null;
		}

		demandForecastCacheModel.inventoryUnitChange = getInventoryUnitChange();

		demandForecastCacheModel.grossPrice = getGrossPrice();

		demandForecastCacheModel.forecastName = getForecastName();

		String forecastName = demandForecastCacheModel.forecastName;

		if ((forecastName != null) && (forecastName.length() == 0)) {
			demandForecastCacheModel.forecastName = null;
		}

		demandForecastCacheModel.netSalesAmount = getNetSalesAmount();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			demandForecastCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			demandForecastCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		demandForecastCacheModel.itemIdentifier = getItemIdentifier();

		String itemIdentifier = demandForecastCacheModel.itemIdentifier;

		if ((itemIdentifier != null) && (itemIdentifier.length() == 0)) {
			demandForecastCacheModel.itemIdentifier = null;
		}

		demandForecastCacheModel.recordLockStatus = getRecordLockStatus();

		demandForecastCacheModel.uncapturedUnitsRatio = getUncapturedUnitsRatio();

		String uncapturedUnitsRatio = demandForecastCacheModel.uncapturedUnitsRatio;

		if ((uncapturedUnitsRatio != null) &&
				(uncapturedUnitsRatio.length() == 0)) {
			demandForecastCacheModel.uncapturedUnitsRatio = null;
		}

		demandForecastCacheModel.itemIdentifierCodeQualifier = getItemIdentifierCodeQualifier();

		String itemIdentifierCodeQualifier = demandForecastCacheModel.itemIdentifierCodeQualifier;

		if ((itemIdentifierCodeQualifier != null) &&
				(itemIdentifierCodeQualifier.length() == 0)) {
			demandForecastCacheModel.itemIdentifierCodeQualifier = null;
		}

		demandForecastCacheModel.marketShareRatio = getMarketShareRatio();

		String marketShareRatio = demandForecastCacheModel.marketShareRatio;

		if ((marketShareRatio != null) && (marketShareRatio.length() == 0)) {
			demandForecastCacheModel.marketShareRatio = null;
		}

		demandForecastCacheModel.source = getSource();

		String source = demandForecastCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			demandForecastCacheModel.source = null;
		}

		demandForecastCacheModel.uncapturedUnits = getUncapturedUnits();

		demandForecastCacheModel.netSalesPrice = getNetSalesPrice();

		demandForecastCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = demandForecastCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			demandForecastCacheModel.inboundStatus = null;
		}

		return demandForecastCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(73);

		sb.append("{modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", totalDemandUnits=");
		sb.append(getTotalDemandUnits());
		sb.append(", brandMasterSid=");
		sb.append(getBrandMasterSid());
		sb.append(", marketShareUnits=");
		sb.append(getMarketShareUnits());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", grossAmount=");
		sb.append(getGrossAmount());
		sb.append(", forecastVer=");
		sb.append(getForecastVer());
		sb.append(", brandId=");
		sb.append(getBrandId());
		sb.append(", grossUnits=");
		sb.append(getGrossUnits());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", demandForecastSid=");
		sb.append(getDemandForecastSid());
		sb.append(", forecastType=");
		sb.append(getForecastType());
		sb.append(", itemMasterSid=");
		sb.append(getItemMasterSid());
		sb.append(", totalDemandAmount=");
		sb.append(getTotalDemandAmount());
		sb.append(", forecastMonth=");
		sb.append(getForecastMonth());
		sb.append(", organizationKey=");
		sb.append(getOrganizationKey());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", marketSizeUnits=");
		sb.append(getMarketSizeUnits());
		sb.append(", segment=");
		sb.append(getSegment());
		sb.append(", forecastYear=");
		sb.append(getForecastYear());
		sb.append(", itemId=");
		sb.append(getItemId());
		sb.append(", inventoryUnitChange=");
		sb.append(getInventoryUnitChange());
		sb.append(", grossPrice=");
		sb.append(getGrossPrice());
		sb.append(", forecastName=");
		sb.append(getForecastName());
		sb.append(", netSalesAmount=");
		sb.append(getNetSalesAmount());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", itemIdentifier=");
		sb.append(getItemIdentifier());
		sb.append(", recordLockStatus=");
		sb.append(getRecordLockStatus());
		sb.append(", uncapturedUnitsRatio=");
		sb.append(getUncapturedUnitsRatio());
		sb.append(", itemIdentifierCodeQualifier=");
		sb.append(getItemIdentifierCodeQualifier());
		sb.append(", marketShareRatio=");
		sb.append(getMarketShareRatio());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", uncapturedUnits=");
		sb.append(getUncapturedUnits());
		sb.append(", netSalesPrice=");
		sb.append(getNetSalesPrice());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(112);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.DemandForecast");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalDemandUnits</column-name><column-value><![CDATA[");
		sb.append(getTotalDemandUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brandMasterSid</column-name><column-value><![CDATA[");
		sb.append(getBrandMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketShareUnits</column-name><column-value><![CDATA[");
		sb.append(getMarketShareUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossAmount</column-name><column-value><![CDATA[");
		sb.append(getGrossAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastVer</column-name><column-value><![CDATA[");
		sb.append(getForecastVer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brandId</column-name><column-value><![CDATA[");
		sb.append(getBrandId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossUnits</column-name><column-value><![CDATA[");
		sb.append(getGrossUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>demandForecastSid</column-name><column-value><![CDATA[");
		sb.append(getDemandForecastSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastType</column-name><column-value><![CDATA[");
		sb.append(getForecastType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
		sb.append(getItemMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalDemandAmount</column-name><column-value><![CDATA[");
		sb.append(getTotalDemandAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastMonth</column-name><column-value><![CDATA[");
		sb.append(getForecastMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationKey</column-name><column-value><![CDATA[");
		sb.append(getOrganizationKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketSizeUnits</column-name><column-value><![CDATA[");
		sb.append(getMarketSizeUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>segment</column-name><column-value><![CDATA[");
		sb.append(getSegment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastYear</column-name><column-value><![CDATA[");
		sb.append(getForecastYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inventoryUnitChange</column-name><column-value><![CDATA[");
		sb.append(getInventoryUnitChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossPrice</column-name><column-value><![CDATA[");
		sb.append(getGrossPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastName</column-name><column-value><![CDATA[");
		sb.append(getForecastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSalesAmount</column-name><column-value><![CDATA[");
		sb.append(getNetSalesAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemIdentifier</column-name><column-value><![CDATA[");
		sb.append(getItemIdentifier());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
		sb.append(getRecordLockStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uncapturedUnitsRatio</column-name><column-value><![CDATA[");
		sb.append(getUncapturedUnitsRatio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemIdentifierCodeQualifier</column-name><column-value><![CDATA[");
		sb.append(getItemIdentifierCodeQualifier());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketShareRatio</column-name><column-value><![CDATA[");
		sb.append(getMarketShareRatio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uncapturedUnits</column-name><column-value><![CDATA[");
		sb.append(getUncapturedUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSalesPrice</column-name><column-value><![CDATA[");
		sb.append(getNetSalesPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DemandForecast.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DemandForecast.class
		};
	private String _modifiedBy;
	private Date _createdDate;
	private double _totalDemandUnits;
	private int _brandMasterSid;
	private double _marketShareUnits;
	private String _batchId;
	private double _grossAmount;
	private String _forecastVer;
	private String _brandId;
	private double _grossUnits;
	private String _country;
	private int _demandForecastSid;
	private String _forecastType;
	private int _itemMasterSid;
	private double _totalDemandAmount;
	private String _forecastMonth;
	private String _organizationKey;
	private String _createdBy;
	private double _marketSizeUnits;
	private String _segment;
	private String _forecastYear;
	private String _itemId;
	private double _inventoryUnitChange;
	private double _grossPrice;
	private String _forecastName;
	private double _netSalesAmount;
	private Date _modifiedDate;
	private String _itemIdentifier;
	private boolean _recordLockStatus;
	private String _uncapturedUnitsRatio;
	private String _itemIdentifierCodeQualifier;
	private String _marketShareRatio;
	private String _source;
	private double _uncapturedUnits;
	private double _netSalesPrice;
	private String _inboundStatus;
	private DemandForecast _escapedModel;
}