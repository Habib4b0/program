/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.RelationshipLevelDefinition;
import com.stpl.app.model.RelationshipLevelDefinitionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RelationshipLevelDefinition service. Represents a row in the &quot;RELATIONSHIP_LEVEL_DEFINITION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RelationshipLevelDefinitionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RelationshipLevelDefinitionImpl}.
 * </p>
 *
 * @author
 * @see RelationshipLevelDefinitionImpl
 * @see RelationshipLevelDefinition
 * @see RelationshipLevelDefinitionModel
 * @generated
 */
@ProviderType
public class RelationshipLevelDefinitionModelImpl extends BaseModelImpl<RelationshipLevelDefinition>
	implements RelationshipLevelDefinitionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a relationship level definition model instance should use the {@link RelationshipLevelDefinition} interface instead.
	 */
	public static final String TABLE_NAME = "RELATIONSHIP_LEVEL_DEFINITION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "RELATIONSHIP_LEVEL_VALUES", Types.VARCHAR },
			{ "HIERARCHY_LEVEL_DEFINITION_SID", Types.INTEGER },
			{ "PARENT_NODE", Types.VARCHAR },
			{ "VERSION_NO", Types.INTEGER },
			{ "RELATIONSHIP_BUILDER_SID", Types.INTEGER },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.INTEGER },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "LEVEL_NO", Types.VARCHAR },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "HIERARCHY_NO", Types.VARCHAR },
			{ "RELATIONSHIP_LEVEL_SID", Types.INTEGER },
			{ "FLAG", Types.VARCHAR },
			{ "LEVEL_NAME", Types.VARCHAR },
			{ "PARENT_HIERARCHY_NO", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("RELATIONSHIP_LEVEL_VALUES", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("HIERARCHY_LEVEL_DEFINITION_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PARENT_NODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VERSION_NO", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RELATIONSHIP_BUILDER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("LEVEL_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("HIERARCHY_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RELATIONSHIP_LEVEL_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("FLAG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LEVEL_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PARENT_HIERARCHY_NO", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table RELATIONSHIP_LEVEL_DEFINITION (RELATIONSHIP_LEVEL_VALUES VARCHAR(75) null,HIERARCHY_LEVEL_DEFINITION_SID INTEGER,PARENT_NODE VARCHAR(75) null,VERSION_NO INTEGER,RELATIONSHIP_BUILDER_SID INTEGER,MODIFIED_DATE DATE null,CREATED_BY INTEGER,CREATED_DATE DATE null,LEVEL_NO VARCHAR(75) null,MODIFIED_BY INTEGER,HIERARCHY_NO VARCHAR(75) null,RELATIONSHIP_LEVEL_SID INTEGER not null primary key IDENTITY,FLAG VARCHAR(75) null,LEVEL_NAME VARCHAR(75) null,PARENT_HIERARCHY_NO VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table RELATIONSHIP_LEVEL_DEFINITION";
	public static final String ORDER_BY_JPQL = " ORDER BY relationshipLevelDefinition.relationshipLevelSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY RELATIONSHIP_LEVEL_DEFINITION.RELATIONSHIP_LEVEL_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.RelationshipLevelDefinition"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.RelationshipLevelDefinition"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.RelationshipLevelDefinition"));

	public RelationshipLevelDefinitionModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _relationshipLevelSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setRelationshipLevelSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _relationshipLevelSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RelationshipLevelDefinition.class;
	}

	@Override
	public String getModelClassName() {
		return RelationshipLevelDefinition.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("relationshipLevelValues", getRelationshipLevelValues());
		attributes.put("hierarchyLevelDefinitionSid",
			getHierarchyLevelDefinitionSid());
		attributes.put("parentNode", getParentNode());
		attributes.put("versionNo", getVersionNo());
		attributes.put("relationshipBuilderSid", getRelationshipBuilderSid());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("levelNo", getLevelNo());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("hierarchyNo", getHierarchyNo());
		attributes.put("relationshipLevelSid", getRelationshipLevelSid());
		attributes.put("flag", getFlag());
		attributes.put("levelName", getLevelName());
		attributes.put("parentHierarchyNo", getParentHierarchyNo());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String relationshipLevelValues = (String)attributes.get(
				"relationshipLevelValues");

		if (relationshipLevelValues != null) {
			setRelationshipLevelValues(relationshipLevelValues);
		}

		Integer hierarchyLevelDefinitionSid = (Integer)attributes.get(
				"hierarchyLevelDefinitionSid");

		if (hierarchyLevelDefinitionSid != null) {
			setHierarchyLevelDefinitionSid(hierarchyLevelDefinitionSid);
		}

		String parentNode = (String)attributes.get("parentNode");

		if (parentNode != null) {
			setParentNode(parentNode);
		}

		Integer versionNo = (Integer)attributes.get("versionNo");

		if (versionNo != null) {
			setVersionNo(versionNo);
		}

		Integer relationshipBuilderSid = (Integer)attributes.get(
				"relationshipBuilderSid");

		if (relationshipBuilderSid != null) {
			setRelationshipBuilderSid(relationshipBuilderSid);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String levelNo = (String)attributes.get("levelNo");

		if (levelNo != null) {
			setLevelNo(levelNo);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		String hierarchyNo = (String)attributes.get("hierarchyNo");

		if (hierarchyNo != null) {
			setHierarchyNo(hierarchyNo);
		}

		Integer relationshipLevelSid = (Integer)attributes.get(
				"relationshipLevelSid");

		if (relationshipLevelSid != null) {
			setRelationshipLevelSid(relationshipLevelSid);
		}

		String flag = (String)attributes.get("flag");

		if (flag != null) {
			setFlag(flag);
		}

		String levelName = (String)attributes.get("levelName");

		if (levelName != null) {
			setLevelName(levelName);
		}

		String parentHierarchyNo = (String)attributes.get("parentHierarchyNo");

		if (parentHierarchyNo != null) {
			setParentHierarchyNo(parentHierarchyNo);
		}
	}

	@Override
	public String getRelationshipLevelValues() {
		if (_relationshipLevelValues == null) {
			return StringPool.BLANK;
		}
		else {
			return _relationshipLevelValues;
		}
	}

	@Override
	public void setRelationshipLevelValues(String relationshipLevelValues) {
		_relationshipLevelValues = relationshipLevelValues;
	}

	@Override
	public int getHierarchyLevelDefinitionSid() {
		return _hierarchyLevelDefinitionSid;
	}

	@Override
	public void setHierarchyLevelDefinitionSid(int hierarchyLevelDefinitionSid) {
		_hierarchyLevelDefinitionSid = hierarchyLevelDefinitionSid;
	}

	@Override
	public String getParentNode() {
		if (_parentNode == null) {
			return StringPool.BLANK;
		}
		else {
			return _parentNode;
		}
	}

	@Override
	public void setParentNode(String parentNode) {
		_parentNode = parentNode;
	}

	@Override
	public int getVersionNo() {
		return _versionNo;
	}

	@Override
	public void setVersionNo(int versionNo) {
		_versionNo = versionNo;
	}

	@Override
	public int getRelationshipBuilderSid() {
		return _relationshipBuilderSid;
	}

	@Override
	public void setRelationshipBuilderSid(int relationshipBuilderSid) {
		_relationshipBuilderSid = relationshipBuilderSid;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getLevelNo() {
		if (_levelNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _levelNo;
		}
	}

	@Override
	public void setLevelNo(String levelNo) {
		_levelNo = levelNo;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public String getHierarchyNo() {
		if (_hierarchyNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _hierarchyNo;
		}
	}

	@Override
	public void setHierarchyNo(String hierarchyNo) {
		_hierarchyNo = hierarchyNo;
	}

	@Override
	public int getRelationshipLevelSid() {
		return _relationshipLevelSid;
	}

	@Override
	public void setRelationshipLevelSid(int relationshipLevelSid) {
		_relationshipLevelSid = relationshipLevelSid;
	}

	@Override
	public String getFlag() {
		if (_flag == null) {
			return StringPool.BLANK;
		}
		else {
			return _flag;
		}
	}

	@Override
	public void setFlag(String flag) {
		_flag = flag;
	}

	@Override
	public String getLevelName() {
		if (_levelName == null) {
			return StringPool.BLANK;
		}
		else {
			return _levelName;
		}
	}

	@Override
	public void setLevelName(String levelName) {
		_levelName = levelName;
	}

	@Override
	public String getParentHierarchyNo() {
		if (_parentHierarchyNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _parentHierarchyNo;
		}
	}

	@Override
	public void setParentHierarchyNo(String parentHierarchyNo) {
		_parentHierarchyNo = parentHierarchyNo;
	}

	@Override
	public RelationshipLevelDefinition toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RelationshipLevelDefinition)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RelationshipLevelDefinitionImpl relationshipLevelDefinitionImpl = new RelationshipLevelDefinitionImpl();

		relationshipLevelDefinitionImpl.setRelationshipLevelValues(getRelationshipLevelValues());
		relationshipLevelDefinitionImpl.setHierarchyLevelDefinitionSid(getHierarchyLevelDefinitionSid());
		relationshipLevelDefinitionImpl.setParentNode(getParentNode());
		relationshipLevelDefinitionImpl.setVersionNo(getVersionNo());
		relationshipLevelDefinitionImpl.setRelationshipBuilderSid(getRelationshipBuilderSid());
		relationshipLevelDefinitionImpl.setModifiedDate(getModifiedDate());
		relationshipLevelDefinitionImpl.setCreatedBy(getCreatedBy());
		relationshipLevelDefinitionImpl.setCreatedDate(getCreatedDate());
		relationshipLevelDefinitionImpl.setLevelNo(getLevelNo());
		relationshipLevelDefinitionImpl.setModifiedBy(getModifiedBy());
		relationshipLevelDefinitionImpl.setHierarchyNo(getHierarchyNo());
		relationshipLevelDefinitionImpl.setRelationshipLevelSid(getRelationshipLevelSid());
		relationshipLevelDefinitionImpl.setFlag(getFlag());
		relationshipLevelDefinitionImpl.setLevelName(getLevelName());
		relationshipLevelDefinitionImpl.setParentHierarchyNo(getParentHierarchyNo());

		relationshipLevelDefinitionImpl.resetOriginalValues();

		return relationshipLevelDefinitionImpl;
	}

	@Override
	public int compareTo(
		RelationshipLevelDefinition relationshipLevelDefinition) {
		int primaryKey = relationshipLevelDefinition.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RelationshipLevelDefinition)) {
			return false;
		}

		RelationshipLevelDefinition relationshipLevelDefinition = (RelationshipLevelDefinition)obj;

		int primaryKey = relationshipLevelDefinition.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<RelationshipLevelDefinition> toCacheModel() {
		RelationshipLevelDefinitionCacheModel relationshipLevelDefinitionCacheModel =
			new RelationshipLevelDefinitionCacheModel();

		relationshipLevelDefinitionCacheModel.relationshipLevelValues = getRelationshipLevelValues();

		String relationshipLevelValues = relationshipLevelDefinitionCacheModel.relationshipLevelValues;

		if ((relationshipLevelValues != null) &&
				(relationshipLevelValues.length() == 0)) {
			relationshipLevelDefinitionCacheModel.relationshipLevelValues = null;
		}

		relationshipLevelDefinitionCacheModel.hierarchyLevelDefinitionSid = getHierarchyLevelDefinitionSid();

		relationshipLevelDefinitionCacheModel.parentNode = getParentNode();

		String parentNode = relationshipLevelDefinitionCacheModel.parentNode;

		if ((parentNode != null) && (parentNode.length() == 0)) {
			relationshipLevelDefinitionCacheModel.parentNode = null;
		}

		relationshipLevelDefinitionCacheModel.versionNo = getVersionNo();

		relationshipLevelDefinitionCacheModel.relationshipBuilderSid = getRelationshipBuilderSid();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			relationshipLevelDefinitionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			relationshipLevelDefinitionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		relationshipLevelDefinitionCacheModel.createdBy = getCreatedBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			relationshipLevelDefinitionCacheModel.createdDate = createdDate.getTime();
		}
		else {
			relationshipLevelDefinitionCacheModel.createdDate = Long.MIN_VALUE;
		}

		relationshipLevelDefinitionCacheModel.levelNo = getLevelNo();

		String levelNo = relationshipLevelDefinitionCacheModel.levelNo;

		if ((levelNo != null) && (levelNo.length() == 0)) {
			relationshipLevelDefinitionCacheModel.levelNo = null;
		}

		relationshipLevelDefinitionCacheModel.modifiedBy = getModifiedBy();

		relationshipLevelDefinitionCacheModel.hierarchyNo = getHierarchyNo();

		String hierarchyNo = relationshipLevelDefinitionCacheModel.hierarchyNo;

		if ((hierarchyNo != null) && (hierarchyNo.length() == 0)) {
			relationshipLevelDefinitionCacheModel.hierarchyNo = null;
		}

		relationshipLevelDefinitionCacheModel.relationshipLevelSid = getRelationshipLevelSid();

		relationshipLevelDefinitionCacheModel.flag = getFlag();

		String flag = relationshipLevelDefinitionCacheModel.flag;

		if ((flag != null) && (flag.length() == 0)) {
			relationshipLevelDefinitionCacheModel.flag = null;
		}

		relationshipLevelDefinitionCacheModel.levelName = getLevelName();

		String levelName = relationshipLevelDefinitionCacheModel.levelName;

		if ((levelName != null) && (levelName.length() == 0)) {
			relationshipLevelDefinitionCacheModel.levelName = null;
		}

		relationshipLevelDefinitionCacheModel.parentHierarchyNo = getParentHierarchyNo();

		String parentHierarchyNo = relationshipLevelDefinitionCacheModel.parentHierarchyNo;

		if ((parentHierarchyNo != null) && (parentHierarchyNo.length() == 0)) {
			relationshipLevelDefinitionCacheModel.parentHierarchyNo = null;
		}

		return relationshipLevelDefinitionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{relationshipLevelValues=");
		sb.append(getRelationshipLevelValues());
		sb.append(", hierarchyLevelDefinitionSid=");
		sb.append(getHierarchyLevelDefinitionSid());
		sb.append(", parentNode=");
		sb.append(getParentNode());
		sb.append(", versionNo=");
		sb.append(getVersionNo());
		sb.append(", relationshipBuilderSid=");
		sb.append(getRelationshipBuilderSid());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", levelNo=");
		sb.append(getLevelNo());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", hierarchyNo=");
		sb.append(getHierarchyNo());
		sb.append(", relationshipLevelSid=");
		sb.append(getRelationshipLevelSid());
		sb.append(", flag=");
		sb.append(getFlag());
		sb.append(", levelName=");
		sb.append(getLevelName());
		sb.append(", parentHierarchyNo=");
		sb.append(getParentHierarchyNo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.RelationshipLevelDefinition");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>relationshipLevelValues</column-name><column-value><![CDATA[");
		sb.append(getRelationshipLevelValues());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hierarchyLevelDefinitionSid</column-name><column-value><![CDATA[");
		sb.append(getHierarchyLevelDefinitionSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentNode</column-name><column-value><![CDATA[");
		sb.append(getParentNode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionNo</column-name><column-value><![CDATA[");
		sb.append(getVersionNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relationshipBuilderSid</column-name><column-value><![CDATA[");
		sb.append(getRelationshipBuilderSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>levelNo</column-name><column-value><![CDATA[");
		sb.append(getLevelNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hierarchyNo</column-name><column-value><![CDATA[");
		sb.append(getHierarchyNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relationshipLevelSid</column-name><column-value><![CDATA[");
		sb.append(getRelationshipLevelSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flag</column-name><column-value><![CDATA[");
		sb.append(getFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>levelName</column-name><column-value><![CDATA[");
		sb.append(getLevelName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentHierarchyNo</column-name><column-value><![CDATA[");
		sb.append(getParentHierarchyNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RelationshipLevelDefinition.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RelationshipLevelDefinition.class
		};
	private String _relationshipLevelValues;
	private int _hierarchyLevelDefinitionSid;
	private String _parentNode;
	private int _versionNo;
	private int _relationshipBuilderSid;
	private Date _modifiedDate;
	private int _createdBy;
	private Date _createdDate;
	private String _levelNo;
	private int _modifiedBy;
	private String _hierarchyNo;
	private int _relationshipLevelSid;
	private String _flag;
	private String _levelName;
	private String _parentHierarchyNo;
	private RelationshipLevelDefinition _escapedModel;
}