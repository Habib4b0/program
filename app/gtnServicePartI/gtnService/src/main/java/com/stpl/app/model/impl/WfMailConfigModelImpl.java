/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.WfMailConfig;
import com.stpl.app.model.WfMailConfigModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the WfMailConfig service. Represents a row in the &quot;WF_MAIL_CONFIG&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link WfMailConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WfMailConfigImpl}.
 * </p>
 *
 * @author
 * @see WfMailConfigImpl
 * @see WfMailConfig
 * @see WfMailConfigModel
 * @generated
 */
@ProviderType
public class WfMailConfigModelImpl extends BaseModelImpl<WfMailConfig>
	implements WfMailConfigModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a wf mail config model instance should use the {@link WfMailConfig} interface instead.
	 */
	public static final String TABLE_NAME = "WF_MAIL_CONFIG";
	public static final Object[][] TABLE_COLUMNS = {
			{ "SMTP_FLAG", Types.VARCHAR },
			{ "CREATED_BY", Types.INTEGER },
			{ "EMAIL_ADDRESS", Types.VARCHAR },
			{ "PASSWORD", Types.VARCHAR },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "WF_MAIL_CONFIG_SID", Types.INTEGER },
			{ "HOST_NAME", Types.VARCHAR },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "PORT_NUMBER", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "INBOUND_STATUS", Types.VARCHAR },
			{ "TEST_MAIL_ADDRESS", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("SMTP_FLAG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("EMAIL_ADDRESS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PASSWORD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("WF_MAIL_CONFIG_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("HOST_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PORT_NUMBER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TEST_MAIL_ADDRESS", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table WF_MAIL_CONFIG (SMTP_FLAG VARCHAR(75) null,CREATED_BY INTEGER,EMAIL_ADDRESS VARCHAR(75) null,PASSWORD VARCHAR(75) null,MODIFIED_BY INTEGER,WF_MAIL_CONFIG_SID INTEGER not null primary key IDENTITY,HOST_NAME VARCHAR(75) null,CREATED_DATE DATE null,PORT_NUMBER VARCHAR(75) null,MODIFIED_DATE DATE null,INBOUND_STATUS VARCHAR(75) null,TEST_MAIL_ADDRESS VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table WF_MAIL_CONFIG";
	public static final String ORDER_BY_JPQL = " ORDER BY wfMailConfig.wfMailConfigSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WF_MAIL_CONFIG.WF_MAIL_CONFIG_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.WfMailConfig"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.WfMailConfig"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.WfMailConfig"));

	public WfMailConfigModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _wfMailConfigSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setWfMailConfigSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _wfMailConfigSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WfMailConfig.class;
	}

	@Override
	public String getModelClassName() {
		return WfMailConfig.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("smtpFlag", getSmtpFlag());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("emailAddress", getEmailAddress());
		attributes.put("password", getPassword());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("wfMailConfigSid", getWfMailConfigSid());
		attributes.put("hostName", getHostName());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("portNumber", getPortNumber());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("inboundStatus", getInboundStatus());
		attributes.put("testMailAddress", getTestMailAddress());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String smtpFlag = (String)attributes.get("smtpFlag");

		if (smtpFlag != null) {
			setSmtpFlag(smtpFlag);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String emailAddress = (String)attributes.get("emailAddress");

		if (emailAddress != null) {
			setEmailAddress(emailAddress);
		}

		String password = (String)attributes.get("password");

		if (password != null) {
			setPassword(password);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Integer wfMailConfigSid = (Integer)attributes.get("wfMailConfigSid");

		if (wfMailConfigSid != null) {
			setWfMailConfigSid(wfMailConfigSid);
		}

		String hostName = (String)attributes.get("hostName");

		if (hostName != null) {
			setHostName(hostName);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String portNumber = (String)attributes.get("portNumber");

		if (portNumber != null) {
			setPortNumber(portNumber);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}

		String testMailAddress = (String)attributes.get("testMailAddress");

		if (testMailAddress != null) {
			setTestMailAddress(testMailAddress);
		}
	}

	@Override
	public String getSmtpFlag() {
		if (_smtpFlag == null) {
			return StringPool.BLANK;
		}
		else {
			return _smtpFlag;
		}
	}

	@Override
	public void setSmtpFlag(String smtpFlag) {
		_smtpFlag = smtpFlag;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_emailAddress = emailAddress;
	}

	@Override
	public String getPassword() {
		if (_password == null) {
			return StringPool.BLANK;
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		_password = password;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public int getWfMailConfigSid() {
		return _wfMailConfigSid;
	}

	@Override
	public void setWfMailConfigSid(int wfMailConfigSid) {
		_wfMailConfigSid = wfMailConfigSid;
	}

	@Override
	public String getHostName() {
		if (_hostName == null) {
			return StringPool.BLANK;
		}
		else {
			return _hostName;
		}
	}

	@Override
	public void setHostName(String hostName) {
		_hostName = hostName;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getPortNumber() {
		if (_portNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _portNumber;
		}
	}

	@Override
	public void setPortNumber(String portNumber) {
		_portNumber = portNumber;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	@Override
	public String getTestMailAddress() {
		if (_testMailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _testMailAddress;
		}
	}

	@Override
	public void setTestMailAddress(String testMailAddress) {
		_testMailAddress = testMailAddress;
	}

	@Override
	public WfMailConfig toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WfMailConfig)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WfMailConfigImpl wfMailConfigImpl = new WfMailConfigImpl();

		wfMailConfigImpl.setSmtpFlag(getSmtpFlag());
		wfMailConfigImpl.setCreatedBy(getCreatedBy());
		wfMailConfigImpl.setEmailAddress(getEmailAddress());
		wfMailConfigImpl.setPassword(getPassword());
		wfMailConfigImpl.setModifiedBy(getModifiedBy());
		wfMailConfigImpl.setWfMailConfigSid(getWfMailConfigSid());
		wfMailConfigImpl.setHostName(getHostName());
		wfMailConfigImpl.setCreatedDate(getCreatedDate());
		wfMailConfigImpl.setPortNumber(getPortNumber());
		wfMailConfigImpl.setModifiedDate(getModifiedDate());
		wfMailConfigImpl.setInboundStatus(getInboundStatus());
		wfMailConfigImpl.setTestMailAddress(getTestMailAddress());

		wfMailConfigImpl.resetOriginalValues();

		return wfMailConfigImpl;
	}

	@Override
	public int compareTo(WfMailConfig wfMailConfig) {
		int primaryKey = wfMailConfig.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WfMailConfig)) {
			return false;
		}

		WfMailConfig wfMailConfig = (WfMailConfig)obj;

		int primaryKey = wfMailConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<WfMailConfig> toCacheModel() {
		WfMailConfigCacheModel wfMailConfigCacheModel = new WfMailConfigCacheModel();

		wfMailConfigCacheModel.smtpFlag = getSmtpFlag();

		String smtpFlag = wfMailConfigCacheModel.smtpFlag;

		if ((smtpFlag != null) && (smtpFlag.length() == 0)) {
			wfMailConfigCacheModel.smtpFlag = null;
		}

		wfMailConfigCacheModel.createdBy = getCreatedBy();

		wfMailConfigCacheModel.emailAddress = getEmailAddress();

		String emailAddress = wfMailConfigCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			wfMailConfigCacheModel.emailAddress = null;
		}

		wfMailConfigCacheModel.password = getPassword();

		String password = wfMailConfigCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			wfMailConfigCacheModel.password = null;
		}

		wfMailConfigCacheModel.modifiedBy = getModifiedBy();

		wfMailConfigCacheModel.wfMailConfigSid = getWfMailConfigSid();

		wfMailConfigCacheModel.hostName = getHostName();

		String hostName = wfMailConfigCacheModel.hostName;

		if ((hostName != null) && (hostName.length() == 0)) {
			wfMailConfigCacheModel.hostName = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			wfMailConfigCacheModel.createdDate = createdDate.getTime();
		}
		else {
			wfMailConfigCacheModel.createdDate = Long.MIN_VALUE;
		}

		wfMailConfigCacheModel.portNumber = getPortNumber();

		String portNumber = wfMailConfigCacheModel.portNumber;

		if ((portNumber != null) && (portNumber.length() == 0)) {
			wfMailConfigCacheModel.portNumber = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			wfMailConfigCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			wfMailConfigCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		wfMailConfigCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = wfMailConfigCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			wfMailConfigCacheModel.inboundStatus = null;
		}

		wfMailConfigCacheModel.testMailAddress = getTestMailAddress();

		String testMailAddress = wfMailConfigCacheModel.testMailAddress;

		if ((testMailAddress != null) && (testMailAddress.length() == 0)) {
			wfMailConfigCacheModel.testMailAddress = null;
		}

		return wfMailConfigCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{smtpFlag=");
		sb.append(getSmtpFlag());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", password=");
		sb.append(getPassword());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", wfMailConfigSid=");
		sb.append(getWfMailConfigSid());
		sb.append(", hostName=");
		sb.append(getHostName());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", portNumber=");
		sb.append(getPortNumber());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append(", testMailAddress=");
		sb.append(getTestMailAddress());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.WfMailConfig");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>smtpFlag</column-name><column-value><![CDATA[");
		sb.append(getSmtpFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>password</column-name><column-value><![CDATA[");
		sb.append(getPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wfMailConfigSid</column-name><column-value><![CDATA[");
		sb.append(getWfMailConfigSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hostName</column-name><column-value><![CDATA[");
		sb.append(getHostName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portNumber</column-name><column-value><![CDATA[");
		sb.append(getPortNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testMailAddress</column-name><column-value><![CDATA[");
		sb.append(getTestMailAddress());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = WfMailConfig.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			WfMailConfig.class
		};
	private String _smtpFlag;
	private int _createdBy;
	private String _emailAddress;
	private String _password;
	private int _modifiedBy;
	private int _wfMailConfigSid;
	private String _hostName;
	private Date _createdDate;
	private String _portNumber;
	private Date _modifiedDate;
	private String _inboundStatus;
	private String _testMailAddress;
	private WfMailConfig _escapedModel;
}