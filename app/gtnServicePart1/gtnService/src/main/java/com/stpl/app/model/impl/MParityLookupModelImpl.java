/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.MParityLookup;
import com.stpl.app.model.MParityLookupModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MParityLookup service. Represents a row in the &quot;M_PARITY_LOOKUP&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MParityLookupModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MParityLookupImpl}.
 * </p>
 *
 * @author
 * @see MParityLookupImpl
 * @see MParityLookup
 * @see MParityLookupModel
 * @generated
 */
@ProviderType
public class MParityLookupModelImpl extends BaseModelImpl<MParityLookup>
	implements MParityLookupModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a m parity lookup model instance should use the {@link MParityLookup} interface instead.
	 */
	public static final String TABLE_NAME = "M_PARITY_LOOKUP";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CONTRACT_MASTER_SID", Types.INTEGER },
			{ "MARKET_TYPE", Types.VARCHAR },
			{ "ITEM_MASTER_SID", Types.INTEGER },
			{ "M_PARITY_LOOKUP_SID", Types.INTEGER },
			{ "PROJECTION_DETAILS_SID", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CONTRACT_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MARKET_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("M_PARITY_LOOKUP_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PROJECTION_DETAILS_SID", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table M_PARITY_LOOKUP (CONTRACT_MASTER_SID INTEGER,MARKET_TYPE VARCHAR(75) null,ITEM_MASTER_SID INTEGER,M_PARITY_LOOKUP_SID INTEGER not null primary key IDENTITY,PROJECTION_DETAILS_SID INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table M_PARITY_LOOKUP";
	public static final String ORDER_BY_JPQL = " ORDER BY mParityLookup.mParityLookupSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY M_PARITY_LOOKUP.M_PARITY_LOOKUP_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.MParityLookup"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.MParityLookup"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.MParityLookup"));

	public MParityLookupModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _mParityLookupSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setMParityLookupSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mParityLookupSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MParityLookup.class;
	}

	@Override
	public String getModelClassName() {
		return MParityLookup.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("contractMasterSid", getContractMasterSid());
		attributes.put("marketType", getMarketType());
		attributes.put("itemMasterSid", getItemMasterSid());
		attributes.put("mParityLookupSid", getMParityLookupSid());
		attributes.put("projectionDetailsSid", getProjectionDetailsSid());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer contractMasterSid = (Integer)attributes.get("contractMasterSid");

		if (contractMasterSid != null) {
			setContractMasterSid(contractMasterSid);
		}

		String marketType = (String)attributes.get("marketType");

		if (marketType != null) {
			setMarketType(marketType);
		}

		Integer itemMasterSid = (Integer)attributes.get("itemMasterSid");

		if (itemMasterSid != null) {
			setItemMasterSid(itemMasterSid);
		}

		Integer mParityLookupSid = (Integer)attributes.get("mParityLookupSid");

		if (mParityLookupSid != null) {
			setMParityLookupSid(mParityLookupSid);
		}

		Integer projectionDetailsSid = (Integer)attributes.get(
				"projectionDetailsSid");

		if (projectionDetailsSid != null) {
			setProjectionDetailsSid(projectionDetailsSid);
		}
	}

	@Override
	public int getContractMasterSid() {
		return _contractMasterSid;
	}

	@Override
	public void setContractMasterSid(int contractMasterSid) {
		_contractMasterSid = contractMasterSid;
	}

	@Override
	public String getMarketType() {
		if (_marketType == null) {
			return StringPool.BLANK;
		}
		else {
			return _marketType;
		}
	}

	@Override
	public void setMarketType(String marketType) {
		_marketType = marketType;
	}

	@Override
	public int getItemMasterSid() {
		return _itemMasterSid;
	}

	@Override
	public void setItemMasterSid(int itemMasterSid) {
		_itemMasterSid = itemMasterSid;
	}

	@Override
	public int getMParityLookupSid() {
		return _mParityLookupSid;
	}

	@Override
	public void setMParityLookupSid(int mParityLookupSid) {
		_mParityLookupSid = mParityLookupSid;
	}

	@Override
	public int getProjectionDetailsSid() {
		return _projectionDetailsSid;
	}

	@Override
	public void setProjectionDetailsSid(int projectionDetailsSid) {
		_projectionDetailsSid = projectionDetailsSid;
	}

	@Override
	public MParityLookup toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MParityLookup)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MParityLookupImpl mParityLookupImpl = new MParityLookupImpl();

		mParityLookupImpl.setContractMasterSid(getContractMasterSid());
		mParityLookupImpl.setMarketType(getMarketType());
		mParityLookupImpl.setItemMasterSid(getItemMasterSid());
		mParityLookupImpl.setMParityLookupSid(getMParityLookupSid());
		mParityLookupImpl.setProjectionDetailsSid(getProjectionDetailsSid());

		mParityLookupImpl.resetOriginalValues();

		return mParityLookupImpl;
	}

	@Override
	public int compareTo(MParityLookup mParityLookup) {
		int primaryKey = mParityLookup.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MParityLookup)) {
			return false;
		}

		MParityLookup mParityLookup = (MParityLookup)obj;

		int primaryKey = mParityLookup.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MParityLookup> toCacheModel() {
		MParityLookupCacheModel mParityLookupCacheModel = new MParityLookupCacheModel();

		mParityLookupCacheModel.contractMasterSid = getContractMasterSid();

		mParityLookupCacheModel.marketType = getMarketType();

		String marketType = mParityLookupCacheModel.marketType;

		if ((marketType != null) && (marketType.length() == 0)) {
			mParityLookupCacheModel.marketType = null;
		}

		mParityLookupCacheModel.itemMasterSid = getItemMasterSid();

		mParityLookupCacheModel.mParityLookupSid = getMParityLookupSid();

		mParityLookupCacheModel.projectionDetailsSid = getProjectionDetailsSid();

		return mParityLookupCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{contractMasterSid=");
		sb.append(getContractMasterSid());
		sb.append(", marketType=");
		sb.append(getMarketType());
		sb.append(", itemMasterSid=");
		sb.append(getItemMasterSid());
		sb.append(", mParityLookupSid=");
		sb.append(getMParityLookupSid());
		sb.append(", projectionDetailsSid=");
		sb.append(getProjectionDetailsSid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.MParityLookup");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>contractMasterSid</column-name><column-value><![CDATA[");
		sb.append(getContractMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketType</column-name><column-value><![CDATA[");
		sb.append(getMarketType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
		sb.append(getItemMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mParityLookupSid</column-name><column-value><![CDATA[");
		sb.append(getMParityLookupSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getProjectionDetailsSid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MParityLookup.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MParityLookup.class
		};
	private int _contractMasterSid;
	private String _marketType;
	private int _itemMasterSid;
	private int _mParityLookupSid;
	private int _projectionDetailsSid;
	private MParityLookup _escapedModel;
}