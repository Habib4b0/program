package com.stpl.app.parttwo.model.impl;

import com.stpl.app.parttwo.model.AcBaseRateBaselineDetails;
import com.stpl.app.parttwo.model.AcBaseRateBaselineDetailsModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AcBaseRateBaselineDetails service. Represents a row in the &quot;Ac_Base_Rate_Baseline_Details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.parttwo.model.AcBaseRateBaselineDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AcBaseRateBaselineDetailsImpl}.
 * </p>
 *
 * @author
 * @see AcBaseRateBaselineDetailsImpl
 * @see com.stpl.app.parttwo.model.AcBaseRateBaselineDetails
 * @see com.stpl.app.parttwo.model.AcBaseRateBaselineDetailsModel
 * @generated
 */
public class AcBaseRateBaselineDetailsModelImpl extends BaseModelImpl<AcBaseRateBaselineDetails>
    implements AcBaseRateBaselineDetailsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ac base rate baseline details model instance should use the {@link com.stpl.app.parttwo.model.AcBaseRateBaselineDetails} interface instead.
     */
    public static final String TABLE_NAME = "Ac_Base_Rate_Baseline_Details";
    public static final Object[][] TABLE_COLUMNS = {
            { "PERIOD_VALUE", Types.DOUBLE },
            { "PERIOD_SID", Types.INTEGER },
            { "PAYMENTS_PERIOD", Types.BOOLEAN },
            { "AC_BR_METHODOLOGY_DETAILS_SID", Types.INTEGER },
            { "SALES_PERIOD", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table Ac_Base_Rate_Baseline_Details (PERIOD_VALUE DOUBLE,PERIOD_SID INTEGER,PAYMENTS_PERIOD BOOLEAN,AC_BR_METHODOLOGY_DETAILS_SID INTEGER not null primary key,SALES_PERIOD BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table Ac_Base_Rate_Baseline_Details";
    public static final String ORDER_BY_JPQL = " ORDER BY acBaseRateBaselineDetails.acBrMethodologyDetailsSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Ac_Base_Rate_Baseline_Details.AC_BR_METHODOLOGY_DETAILS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.parttwo.model.AcBaseRateBaselineDetails"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.parttwo.model.AcBaseRateBaselineDetails"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.parttwo.model.AcBaseRateBaselineDetails"));
    private static ClassLoader _classLoader = AcBaseRateBaselineDetails.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            AcBaseRateBaselineDetails.class
        };
    private double _periodValue;
    private int _periodSid;
    private boolean _paymentsPeriod;
    private int _acBrMethodologyDetailsSid;
    private boolean _salesPeriod;
    private AcBaseRateBaselineDetails _escapedModel;

    public AcBaseRateBaselineDetailsModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _acBrMethodologyDetailsSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setAcBrMethodologyDetailsSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _acBrMethodologyDetailsSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return AcBaseRateBaselineDetails.class;
    }

    @Override
    public String getModelClassName() {
        return AcBaseRateBaselineDetails.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("periodValue", getPeriodValue());
        attributes.put("periodSid", getPeriodSid());
        attributes.put("paymentsPeriod", getPaymentsPeriod());
        attributes.put("acBrMethodologyDetailsSid",
            getAcBrMethodologyDetailsSid());
        attributes.put("salesPeriod", getSalesPeriod());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Double periodValue = (Double) attributes.get("periodValue");

        if (periodValue != null) {
            setPeriodValue(periodValue);
        }

        Integer periodSid = (Integer) attributes.get("periodSid");

        if (periodSid != null) {
            setPeriodSid(periodSid);
        }

        Boolean paymentsPeriod = (Boolean) attributes.get("paymentsPeriod");

        if (paymentsPeriod != null) {
            setPaymentsPeriod(paymentsPeriod);
        }

        Integer acBrMethodologyDetailsSid = (Integer) attributes.get(
                "acBrMethodologyDetailsSid");

        if (acBrMethodologyDetailsSid != null) {
            setAcBrMethodologyDetailsSid(acBrMethodologyDetailsSid);
        }

        Boolean salesPeriod = (Boolean) attributes.get("salesPeriod");

        if (salesPeriod != null) {
            setSalesPeriod(salesPeriod);
        }
    }

    @Override
    public double getPeriodValue() {
        return _periodValue;
    }

    @Override
    public void setPeriodValue(double periodValue) {
        _periodValue = periodValue;
    }

    @Override
    public int getPeriodSid() {
        return _periodSid;
    }

    @Override
    public void setPeriodSid(int periodSid) {
        _periodSid = periodSid;
    }

    @Override
    public boolean getPaymentsPeriod() {
        return _paymentsPeriod;
    }

    @Override
    public boolean isPaymentsPeriod() {
        return _paymentsPeriod;
    }

    @Override
    public void setPaymentsPeriod(boolean paymentsPeriod) {
        _paymentsPeriod = paymentsPeriod;
    }

    @Override
    public int getAcBrMethodologyDetailsSid() {
        return _acBrMethodologyDetailsSid;
    }

    @Override
    public void setAcBrMethodologyDetailsSid(int acBrMethodologyDetailsSid) {
        _acBrMethodologyDetailsSid = acBrMethodologyDetailsSid;
    }

    @Override
    public boolean getSalesPeriod() {
        return _salesPeriod;
    }

    @Override
    public boolean isSalesPeriod() {
        return _salesPeriod;
    }

    @Override
    public void setSalesPeriod(boolean salesPeriod) {
        _salesPeriod = salesPeriod;
    }

    @Override
    public AcBaseRateBaselineDetails toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (AcBaseRateBaselineDetails) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AcBaseRateBaselineDetailsImpl acBaseRateBaselineDetailsImpl = new AcBaseRateBaselineDetailsImpl();

        acBaseRateBaselineDetailsImpl.setPeriodValue(getPeriodValue());
        acBaseRateBaselineDetailsImpl.setPeriodSid(getPeriodSid());
        acBaseRateBaselineDetailsImpl.setPaymentsPeriod(getPaymentsPeriod());
        acBaseRateBaselineDetailsImpl.setAcBrMethodologyDetailsSid(getAcBrMethodologyDetailsSid());
        acBaseRateBaselineDetailsImpl.setSalesPeriod(getSalesPeriod());

        acBaseRateBaselineDetailsImpl.resetOriginalValues();

        return acBaseRateBaselineDetailsImpl;
    }

    @Override
    public int compareTo(AcBaseRateBaselineDetails acBaseRateBaselineDetails) {
        int primaryKey = acBaseRateBaselineDetails.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AcBaseRateBaselineDetails)) {
            return false;
        }

        AcBaseRateBaselineDetails acBaseRateBaselineDetails = (AcBaseRateBaselineDetails) obj;

        int primaryKey = acBaseRateBaselineDetails.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<AcBaseRateBaselineDetails> toCacheModel() {
        AcBaseRateBaselineDetailsCacheModel acBaseRateBaselineDetailsCacheModel = new AcBaseRateBaselineDetailsCacheModel();

        acBaseRateBaselineDetailsCacheModel.periodValue = getPeriodValue();

        acBaseRateBaselineDetailsCacheModel.periodSid = getPeriodSid();

        acBaseRateBaselineDetailsCacheModel.paymentsPeriod = getPaymentsPeriod();

        acBaseRateBaselineDetailsCacheModel.acBrMethodologyDetailsSid = getAcBrMethodologyDetailsSid();

        acBaseRateBaselineDetailsCacheModel.salesPeriod = getSalesPeriod();

        return acBaseRateBaselineDetailsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{periodValue=");
        sb.append(getPeriodValue());
        sb.append(", periodSid=");
        sb.append(getPeriodSid());
        sb.append(", paymentsPeriod=");
        sb.append(getPaymentsPeriod());
        sb.append(", acBrMethodologyDetailsSid=");
        sb.append(getAcBrMethodologyDetailsSid());
        sb.append(", salesPeriod=");
        sb.append(getSalesPeriod());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.parttwo.model.AcBaseRateBaselineDetails");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>periodValue</column-name><column-value><![CDATA[");
        sb.append(getPeriodValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>periodSid</column-name><column-value><![CDATA[");
        sb.append(getPeriodSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>paymentsPeriod</column-name><column-value><![CDATA[");
        sb.append(getPaymentsPeriod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>acBrMethodologyDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getAcBrMethodologyDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salesPeriod</column-name><column-value><![CDATA[");
        sb.append(getSalesPeriod());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
