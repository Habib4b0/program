package com.stpl.app.model.impl;

import com.stpl.app.model.NaProjMaster;
import com.stpl.app.model.NaProjMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NaProjMaster service. Represents a row in the &quot;NA_PROJ_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.NaProjMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NaProjMasterImpl}.
 * </p>
 *
 * @author
 * @see NaProjMasterImpl
 * @see com.stpl.app.model.NaProjMaster
 * @see com.stpl.app.model.NaProjMasterModel
 * @generated
 */
public class NaProjMasterModelImpl extends BaseModelImpl<NaProjMaster>
    implements NaProjMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a na proj master model instance should use the {@link com.stpl.app.model.NaProjMaster} interface instead.
     */
    public static final String TABLE_NAME = "NA_PROJ_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "NA_PROJ_NAME", Types.VARCHAR },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "CREATED_BY", Types.INTEGER },
            { "SAVE_FLAG", Types.BOOLEAN },
            { "MODIFIED_BY", Types.INTEGER },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "NA_PROJ_MASTER_SID", Types.INTEGER },
            { "ITEM_GROUP_SID", Types.INTEGER },
            { "THERAPEUTIC_CLASS", Types.INTEGER },
            { "COMPANY_MASTER_SID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table NA_PROJ_MASTER (NA_PROJ_NAME VARCHAR(75) null,CREATED_DATE DATE null,CREATED_BY INTEGER,SAVE_FLAG BOOLEAN,MODIFIED_BY INTEGER,MODIFIED_DATE DATE null,NA_PROJ_MASTER_SID INTEGER not null primary key IDENTITY,ITEM_GROUP_SID INTEGER,THERAPEUTIC_CLASS INTEGER,COMPANY_MASTER_SID INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table NA_PROJ_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY naProjMaster.naProjMasterSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY NA_PROJ_MASTER.NA_PROJ_MASTER_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.NaProjMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.NaProjMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.NaProjMaster"));
    private static ClassLoader _classLoader = NaProjMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            NaProjMaster.class
        };
    private String _naProjName;
    private Date _createdDate;
    private int _createdBy;
    private boolean _saveFlag;
    private int _modifiedBy;
    private Date _modifiedDate;
    private int _naProjMasterSid;
    private int _itemGroupSid;
    private int _therapeuticClass;
    private int _companyMasterSid;
    private NaProjMaster _escapedModel;

    public NaProjMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _naProjMasterSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setNaProjMasterSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _naProjMasterSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return NaProjMaster.class;
    }

    @Override
    public String getModelClassName() {
        return NaProjMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("naProjName", getNaProjName());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("saveFlag", getSaveFlag());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("naProjMasterSid", getNaProjMasterSid());
        attributes.put("itemGroupSid", getItemGroupSid());
        attributes.put("therapeuticClass", getTherapeuticClass());
        attributes.put("companyMasterSid", getCompanyMasterSid());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String naProjName = (String) attributes.get("naProjName");

        if (naProjName != null) {
            setNaProjName(naProjName);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Boolean saveFlag = (Boolean) attributes.get("saveFlag");

        if (saveFlag != null) {
            setSaveFlag(saveFlag);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer naProjMasterSid = (Integer) attributes.get("naProjMasterSid");

        if (naProjMasterSid != null) {
            setNaProjMasterSid(naProjMasterSid);
        }

        Integer itemGroupSid = (Integer) attributes.get("itemGroupSid");

        if (itemGroupSid != null) {
            setItemGroupSid(itemGroupSid);
        }

        Integer therapeuticClass = (Integer) attributes.get("therapeuticClass");

        if (therapeuticClass != null) {
            setTherapeuticClass(therapeuticClass);
        }

        Integer companyMasterSid = (Integer) attributes.get("companyMasterSid");

        if (companyMasterSid != null) {
            setCompanyMasterSid(companyMasterSid);
        }
    }

    @Override
    public String getNaProjName() {
        if (_naProjName == null) {
            return StringPool.BLANK;
        } else {
            return _naProjName;
        }
    }

    @Override
    public void setNaProjName(String naProjName) {
        _naProjName = naProjName;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public boolean getSaveFlag() {
        return _saveFlag;
    }

    @Override
    public boolean isSaveFlag() {
        return _saveFlag;
    }

    @Override
    public void setSaveFlag(boolean saveFlag) {
        _saveFlag = saveFlag;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public int getNaProjMasterSid() {
        return _naProjMasterSid;
    }

    @Override
    public void setNaProjMasterSid(int naProjMasterSid) {
        _naProjMasterSid = naProjMasterSid;
    }

    @Override
    public int getItemGroupSid() {
        return _itemGroupSid;
    }

    @Override
    public void setItemGroupSid(int itemGroupSid) {
        _itemGroupSid = itemGroupSid;
    }

    @Override
    public int getTherapeuticClass() {
        return _therapeuticClass;
    }

    @Override
    public void setTherapeuticClass(int therapeuticClass) {
        _therapeuticClass = therapeuticClass;
    }

    @Override
    public int getCompanyMasterSid() {
        return _companyMasterSid;
    }

    @Override
    public void setCompanyMasterSid(int companyMasterSid) {
        _companyMasterSid = companyMasterSid;
    }

    @Override
    public NaProjMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (NaProjMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NaProjMasterImpl naProjMasterImpl = new NaProjMasterImpl();

        naProjMasterImpl.setNaProjName(getNaProjName());
        naProjMasterImpl.setCreatedDate(getCreatedDate());
        naProjMasterImpl.setCreatedBy(getCreatedBy());
        naProjMasterImpl.setSaveFlag(getSaveFlag());
        naProjMasterImpl.setModifiedBy(getModifiedBy());
        naProjMasterImpl.setModifiedDate(getModifiedDate());
        naProjMasterImpl.setNaProjMasterSid(getNaProjMasterSid());
        naProjMasterImpl.setItemGroupSid(getItemGroupSid());
        naProjMasterImpl.setTherapeuticClass(getTherapeuticClass());
        naProjMasterImpl.setCompanyMasterSid(getCompanyMasterSid());

        naProjMasterImpl.resetOriginalValues();

        return naProjMasterImpl;
    }

    @Override
    public int compareTo(NaProjMaster naProjMaster) {
        int primaryKey = naProjMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof NaProjMaster)) {
            return false;
        }

        NaProjMaster naProjMaster = (NaProjMaster) obj;

        int primaryKey = naProjMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<NaProjMaster> toCacheModel() {
        NaProjMasterCacheModel naProjMasterCacheModel = new NaProjMasterCacheModel();

        naProjMasterCacheModel.naProjName = getNaProjName();

        String naProjName = naProjMasterCacheModel.naProjName;

        if ((naProjName != null) && (naProjName.length() == 0)) {
            naProjMasterCacheModel.naProjName = null;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            naProjMasterCacheModel.createdDate = createdDate.getTime();
        } else {
            naProjMasterCacheModel.createdDate = Long.MIN_VALUE;
        }

        naProjMasterCacheModel.createdBy = getCreatedBy();

        naProjMasterCacheModel.saveFlag = getSaveFlag();

        naProjMasterCacheModel.modifiedBy = getModifiedBy();

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            naProjMasterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            naProjMasterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        naProjMasterCacheModel.naProjMasterSid = getNaProjMasterSid();

        naProjMasterCacheModel.itemGroupSid = getItemGroupSid();

        naProjMasterCacheModel.therapeuticClass = getTherapeuticClass();

        naProjMasterCacheModel.companyMasterSid = getCompanyMasterSid();

        return naProjMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{naProjName=");
        sb.append(getNaProjName());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", saveFlag=");
        sb.append(getSaveFlag());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", naProjMasterSid=");
        sb.append(getNaProjMasterSid());
        sb.append(", itemGroupSid=");
        sb.append(getItemGroupSid());
        sb.append(", therapeuticClass=");
        sb.append(getTherapeuticClass());
        sb.append(", companyMasterSid=");
        sb.append(getCompanyMasterSid());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.NaProjMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>naProjName</column-name><column-value><![CDATA[");
        sb.append(getNaProjName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>saveFlag</column-name><column-value><![CDATA[");
        sb.append(getSaveFlag());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>naProjMasterSid</column-name><column-value><![CDATA[");
        sb.append(getNaProjMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemGroupSid</column-name><column-value><![CDATA[");
        sb.append(getItemGroupSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>therapeuticClass</column-name><column-value><![CDATA[");
        sb.append(getTherapeuticClass());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyMasterSid</column-name><column-value><![CDATA[");
        sb.append(getCompanyMasterSid());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
