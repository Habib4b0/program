/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.PsDetails;
import com.stpl.app.model.PsDetailsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PsDetails service. Represents a row in the &quot;PS_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PsDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PsDetailsImpl}.
 * </p>
 *
 * @author
 * @see PsDetailsImpl
 * @see PsDetails
 * @see PsDetailsModel
 * @generated
 */
@ProviderType
public class PsDetailsModelImpl extends BaseModelImpl<PsDetails>
	implements PsDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ps details model instance should use the {@link PsDetails} interface instead.
	 */
	public static final String TABLE_NAME = "PS_DETAILS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "NEP_FORMULA", Types.INTEGER },
			{ "PRICE", Types.DOUBLE },
			{ "ITEM_MASTER_SID", Types.INTEGER },
			{ "RESET_TYPE", Types.INTEGER },
			{ "PRICE_PROTECTION_START_DATE", Types.TIMESTAMP },
			{ "RESET_DATE", Types.TIMESTAMP },
			{ "BASE_PRICE", Types.DOUBLE },
			{ "ITEM_PS_ATTACHED_DATE", Types.TIMESTAMP },
			{ "BRAND_MASTER_SID", Types.VARCHAR },
			{ "STATUS", Types.INTEGER },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "ITEM_PS_ATTACHED_STATUS", Types.INTEGER },
			{ "REVISION_DATE", Types.TIMESTAMP },
			{ "PRICE_TOLERANCE", Types.DOUBLE },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.INTEGER },
			{ "SOURCE", Types.VARCHAR },
			{ "PS_DETAILS_SID", Types.INTEGER },
			{ "PS_MODEL_SID", Types.INTEGER },
			{ "SUGGESTED_PRICE", Types.DOUBLE },
			{ "NET_PRICE_TYPE_FORMULA", Types.VARCHAR },
			{ "PRICE_PROTECTION_PRICE_TYPE", Types.INTEGER },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "INBOUND_STATUS", Types.VARCHAR },
			{ "CONTRACT_PRICE", Types.DOUBLE },
			{ "IFP_MODEL_SID", Types.INTEGER },
			{ "PRICE_TOLERANCE_TYPE", Types.INTEGER },
			{ "MAX_INCREMENTAL_CHANGE", Types.DOUBLE },
			{ "ITEM_PRICING_QUALIFIER_SID", Types.INTEGER },
			{ "CONTRACT_PRICE_END_DATE", Types.TIMESTAMP },
			{ "NEP", Types.DOUBLE },
			{ "CONTRACT_PRICE_START_DATE", Types.TIMESTAMP },
			{ "PRICE_TOLERANCE_FREQUENCY", Types.INTEGER },
			{ "PRICE_PROTECTION_END_DATE", Types.TIMESTAMP },
			{ "PRICE_PROTECTION_STATUS", Types.INTEGER },
			{ "RECORD_LOCK_STATUS", Types.BOOLEAN },
			{ "RESET_ELIGIBLE", Types.INTEGER },
			{ "BATCH_ID", Types.VARCHAR },
			{ "PRICE_TOLERANCE_INTERVAL", Types.INTEGER },
			{ "NET_PRICE_TYPE", Types.INTEGER },
			{ "PRICE_REVISION", Types.DOUBLE },
			{ "RESET_FREQUENCY", Types.INTEGER },
			{ "RESET_INTERVAL", Types.INTEGER },
			{ "BASE_PRICE_TYPE", Types.INTEGER },
			{ "BASE_PRICE_ENTRY", Types.DOUBLE },
			{ "BASE_PRICE_DATE", Types.TIMESTAMP },
			{ "NET_BASE_PRICE", Types.INTEGER },
			{ "BASE_PRICE_DDLB", Types.INTEGER },
			{ "SUBSEQUENT_PERIOD_PRICE_TYPE", Types.INTEGER },
			{ "NET_SUBSEQUENT_PERIOD_PRICE", Types.INTEGER },
			{ "NET_SUBSEQUENT_PRICE_FORMULA_ID", Types.INTEGER },
			{ "RESET_PRICE_TYPE", Types.INTEGER },
			{ "NET_RESET_PRICE_TYPE", Types.INTEGER },
			{ "NET_RESET_PRICE_FORMULA_ID", Types.INTEGER },
			{ "NET_BASE_PRICE_FORMULA_ID", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("NEP_FORMULA", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ITEM_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RESET_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE_PROTECTION_START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("RESET_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("BASE_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ITEM_PS_ATTACHED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("BRAND_MASTER_SID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("STATUS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ITEM_PS_ATTACHED_STATUS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("REVISION_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PRICE_TOLERANCE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PS_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PS_MODEL_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SUGGESTED_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("NET_PRICE_TYPE_FORMULA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PRICE_PROTECTION_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CONTRACT_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("IFP_MODEL_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE_TOLERANCE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MAX_INCREMENTAL_CHANGE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ITEM_PRICING_QUALIFIER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CONTRACT_PRICE_END_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("NEP", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("CONTRACT_PRICE_START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PRICE_TOLERANCE_FREQUENCY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE_PROTECTION_END_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PRICE_PROTECTION_STATUS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RECORD_LOCK_STATUS", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("RESET_ELIGIBLE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PRICE_TOLERANCE_INTERVAL", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE_REVISION", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("RESET_FREQUENCY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RESET_INTERVAL", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BASE_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BASE_PRICE_ENTRY", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("BASE_PRICE_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("NET_BASE_PRICE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BASE_PRICE_DDLB", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SUBSEQUENT_PERIOD_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_SUBSEQUENT_PERIOD_PRICE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_SUBSEQUENT_PRICE_FORMULA_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RESET_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_RESET_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_RESET_PRICE_FORMULA_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_BASE_PRICE_FORMULA_ID", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table PS_DETAILS (NEP_FORMULA INTEGER,PRICE DOUBLE,ITEM_MASTER_SID INTEGER,RESET_TYPE INTEGER,PRICE_PROTECTION_START_DATE DATE null,RESET_DATE DATE null,BASE_PRICE DOUBLE,ITEM_PS_ATTACHED_DATE DATE null,BRAND_MASTER_SID VARCHAR(75) null,STATUS INTEGER,MODIFIED_DATE DATE null,ITEM_PS_ATTACHED_STATUS INTEGER,REVISION_DATE DATE null,PRICE_TOLERANCE DOUBLE,CREATED_DATE DATE null,CREATED_BY INTEGER,SOURCE VARCHAR(75) null,PS_DETAILS_SID INTEGER not null primary key IDENTITY,PS_MODEL_SID INTEGER,SUGGESTED_PRICE DOUBLE,NET_PRICE_TYPE_FORMULA VARCHAR(75) null,PRICE_PROTECTION_PRICE_TYPE INTEGER,MODIFIED_BY INTEGER,INBOUND_STATUS VARCHAR(75) null,CONTRACT_PRICE DOUBLE,IFP_MODEL_SID INTEGER,PRICE_TOLERANCE_TYPE INTEGER,MAX_INCREMENTAL_CHANGE DOUBLE,ITEM_PRICING_QUALIFIER_SID INTEGER,CONTRACT_PRICE_END_DATE DATE null,NEP DOUBLE,CONTRACT_PRICE_START_DATE DATE null,PRICE_TOLERANCE_FREQUENCY INTEGER,PRICE_PROTECTION_END_DATE DATE null,PRICE_PROTECTION_STATUS INTEGER,RECORD_LOCK_STATUS BOOLEAN,RESET_ELIGIBLE INTEGER,BATCH_ID VARCHAR(75) null,PRICE_TOLERANCE_INTERVAL INTEGER,NET_PRICE_TYPE INTEGER,PRICE_REVISION DOUBLE,RESET_FREQUENCY INTEGER,RESET_INTERVAL INTEGER,BASE_PRICE_TYPE INTEGER,BASE_PRICE_ENTRY DOUBLE,BASE_PRICE_DATE DATE null,NET_BASE_PRICE INTEGER,BASE_PRICE_DDLB INTEGER,SUBSEQUENT_PERIOD_PRICE_TYPE INTEGER,NET_SUBSEQUENT_PERIOD_PRICE INTEGER,NET_SUBSEQUENT_PRICE_FORMULA_ID INTEGER,RESET_PRICE_TYPE INTEGER,NET_RESET_PRICE_TYPE INTEGER,NET_RESET_PRICE_FORMULA_ID INTEGER,NET_BASE_PRICE_FORMULA_ID INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table PS_DETAILS";
	public static final String ORDER_BY_JPQL = " ORDER BY psDetails.psDetailsSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PS_DETAILS.PS_DETAILS_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.PsDetails"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.PsDetails"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.stpl.app.model.PsDetails"),
			true);
	public static final long PSMODELSID_COLUMN_BITMASK = 1L;
	public static final long PSDETAILSSID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.PsDetails"));

	public PsDetailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _psDetailsSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setPsDetailsSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _psDetailsSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PsDetails.class;
	}

	@Override
	public String getModelClassName() {
		return PsDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("nepFormula", getNepFormula());
		attributes.put("price", getPrice());
		attributes.put("itemMasterSid", getItemMasterSid());
		attributes.put("resetType", getResetType());
		attributes.put("priceProtectionStartDate", getPriceProtectionStartDate());
		attributes.put("resetDate", getResetDate());
		attributes.put("basePrice", getBasePrice());
		attributes.put("itemPsAttachedDate", getItemPsAttachedDate());
		attributes.put("brandMasterSid", getBrandMasterSid());
		attributes.put("status", getStatus());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("itemPsAttachedStatus", getItemPsAttachedStatus());
		attributes.put("revisionDate", getRevisionDate());
		attributes.put("priceTolerance", getPriceTolerance());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("source", getSource());
		attributes.put("psDetailsSid", getPsDetailsSid());
		attributes.put("psModelSid", getPsModelSid());
		attributes.put("suggestedPrice", getSuggestedPrice());
		attributes.put("netPriceTypeFormula", getNetPriceTypeFormula());
		attributes.put("priceProtectionPriceType", getPriceProtectionPriceType());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("inboundStatus", getInboundStatus());
		attributes.put("contractPrice", getContractPrice());
		attributes.put("ifpModelSid", getIfpModelSid());
		attributes.put("priceToleranceType", getPriceToleranceType());
		attributes.put("maxIncrementalChange", getMaxIncrementalChange());
		attributes.put("itemPricingQualifierSid", getItemPricingQualifierSid());
		attributes.put("contractPriceEndDate", getContractPriceEndDate());
		attributes.put("nep", getNep());
		attributes.put("contractPriceStartDate", getContractPriceStartDate());
		attributes.put("priceToleranceFrequency", getPriceToleranceFrequency());
		attributes.put("priceProtectionEndDate", getPriceProtectionEndDate());
		attributes.put("priceProtectionStatus", getPriceProtectionStatus());
		attributes.put("recordLockStatus", getRecordLockStatus());
		attributes.put("resetEligible", getResetEligible());
		attributes.put("batchId", getBatchId());
		attributes.put("priceToleranceInterval", getPriceToleranceInterval());
		attributes.put("netPriceType", getNetPriceType());
		attributes.put("priceRevision", getPriceRevision());
		attributes.put("resetFrequency", getResetFrequency());
		attributes.put("resetInterval", getResetInterval());
		attributes.put("basePriceType", getBasePriceType());
		attributes.put("basePriceEntry", getBasePriceEntry());
		attributes.put("basePriceDate", getBasePriceDate());
		attributes.put("netBasePrice", getNetBasePrice());
		attributes.put("basePriceDdlb", getBasePriceDdlb());
		attributes.put("subsequentPeriodPriceType",
			getSubsequentPeriodPriceType());
		attributes.put("netSubsequentPeriodPrice", getNetSubsequentPeriodPrice());
		attributes.put("netSubsequentPriceFormulaId",
			getNetSubsequentPriceFormulaId());
		attributes.put("resetPriceType", getResetPriceType());
		attributes.put("netResetPriceType", getNetResetPriceType());
		attributes.put("netResetPriceFormulaId", getNetResetPriceFormulaId());
		attributes.put("netBasePriceFormulaId", getNetBasePriceFormulaId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer nepFormula = (Integer)attributes.get("nepFormula");

		if (nepFormula != null) {
			setNepFormula(nepFormula);
		}

		Double price = (Double)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		Integer itemMasterSid = (Integer)attributes.get("itemMasterSid");

		if (itemMasterSid != null) {
			setItemMasterSid(itemMasterSid);
		}

		Integer resetType = (Integer)attributes.get("resetType");

		if (resetType != null) {
			setResetType(resetType);
		}

		Date priceProtectionStartDate = (Date)attributes.get(
				"priceProtectionStartDate");

		if (priceProtectionStartDate != null) {
			setPriceProtectionStartDate(priceProtectionStartDate);
		}

		Date resetDate = (Date)attributes.get("resetDate");

		if (resetDate != null) {
			setResetDate(resetDate);
		}

		Double basePrice = (Double)attributes.get("basePrice");

		if (basePrice != null) {
			setBasePrice(basePrice);
		}

		Date itemPsAttachedDate = (Date)attributes.get("itemPsAttachedDate");

		if (itemPsAttachedDate != null) {
			setItemPsAttachedDate(itemPsAttachedDate);
		}

		String brandMasterSid = (String)attributes.get("brandMasterSid");

		if (brandMasterSid != null) {
			setBrandMasterSid(brandMasterSid);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer itemPsAttachedStatus = (Integer)attributes.get(
				"itemPsAttachedStatus");

		if (itemPsAttachedStatus != null) {
			setItemPsAttachedStatus(itemPsAttachedStatus);
		}

		Date revisionDate = (Date)attributes.get("revisionDate");

		if (revisionDate != null) {
			setRevisionDate(revisionDate);
		}

		Double priceTolerance = (Double)attributes.get("priceTolerance");

		if (priceTolerance != null) {
			setPriceTolerance(priceTolerance);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		Integer psDetailsSid = (Integer)attributes.get("psDetailsSid");

		if (psDetailsSid != null) {
			setPsDetailsSid(psDetailsSid);
		}

		Integer psModelSid = (Integer)attributes.get("psModelSid");

		if (psModelSid != null) {
			setPsModelSid(psModelSid);
		}

		Double suggestedPrice = (Double)attributes.get("suggestedPrice");

		if (suggestedPrice != null) {
			setSuggestedPrice(suggestedPrice);
		}

		String netPriceTypeFormula = (String)attributes.get(
				"netPriceTypeFormula");

		if (netPriceTypeFormula != null) {
			setNetPriceTypeFormula(netPriceTypeFormula);
		}

		Integer priceProtectionPriceType = (Integer)attributes.get(
				"priceProtectionPriceType");

		if (priceProtectionPriceType != null) {
			setPriceProtectionPriceType(priceProtectionPriceType);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}

		Double contractPrice = (Double)attributes.get("contractPrice");

		if (contractPrice != null) {
			setContractPrice(contractPrice);
		}

		Integer ifpModelSid = (Integer)attributes.get("ifpModelSid");

		if (ifpModelSid != null) {
			setIfpModelSid(ifpModelSid);
		}

		Integer priceToleranceType = (Integer)attributes.get(
				"priceToleranceType");

		if (priceToleranceType != null) {
			setPriceToleranceType(priceToleranceType);
		}

		Double maxIncrementalChange = (Double)attributes.get(
				"maxIncrementalChange");

		if (maxIncrementalChange != null) {
			setMaxIncrementalChange(maxIncrementalChange);
		}

		Integer itemPricingQualifierSid = (Integer)attributes.get(
				"itemPricingQualifierSid");

		if (itemPricingQualifierSid != null) {
			setItemPricingQualifierSid(itemPricingQualifierSid);
		}

		Date contractPriceEndDate = (Date)attributes.get("contractPriceEndDate");

		if (contractPriceEndDate != null) {
			setContractPriceEndDate(contractPriceEndDate);
		}

		Double nep = (Double)attributes.get("nep");

		if (nep != null) {
			setNep(nep);
		}

		Date contractPriceStartDate = (Date)attributes.get(
				"contractPriceStartDate");

		if (contractPriceStartDate != null) {
			setContractPriceStartDate(contractPriceStartDate);
		}

		Integer priceToleranceFrequency = (Integer)attributes.get(
				"priceToleranceFrequency");

		if (priceToleranceFrequency != null) {
			setPriceToleranceFrequency(priceToleranceFrequency);
		}

		Date priceProtectionEndDate = (Date)attributes.get(
				"priceProtectionEndDate");

		if (priceProtectionEndDate != null) {
			setPriceProtectionEndDate(priceProtectionEndDate);
		}

		Integer priceProtectionStatus = (Integer)attributes.get(
				"priceProtectionStatus");

		if (priceProtectionStatus != null) {
			setPriceProtectionStatus(priceProtectionStatus);
		}

		Boolean recordLockStatus = (Boolean)attributes.get("recordLockStatus");

		if (recordLockStatus != null) {
			setRecordLockStatus(recordLockStatus);
		}

		Integer resetEligible = (Integer)attributes.get("resetEligible");

		if (resetEligible != null) {
			setResetEligible(resetEligible);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		Integer priceToleranceInterval = (Integer)attributes.get(
				"priceToleranceInterval");

		if (priceToleranceInterval != null) {
			setPriceToleranceInterval(priceToleranceInterval);
		}

		Integer netPriceType = (Integer)attributes.get("netPriceType");

		if (netPriceType != null) {
			setNetPriceType(netPriceType);
		}

		Double priceRevision = (Double)attributes.get("priceRevision");

		if (priceRevision != null) {
			setPriceRevision(priceRevision);
		}

		Integer resetFrequency = (Integer)attributes.get("resetFrequency");

		if (resetFrequency != null) {
			setResetFrequency(resetFrequency);
		}

		Integer resetInterval = (Integer)attributes.get("resetInterval");

		if (resetInterval != null) {
			setResetInterval(resetInterval);
		}

		Integer basePriceType = (Integer)attributes.get("basePriceType");

		if (basePriceType != null) {
			setBasePriceType(basePriceType);
		}

		Double basePriceEntry = (Double)attributes.get("basePriceEntry");

		if (basePriceEntry != null) {
			setBasePriceEntry(basePriceEntry);
		}

		Date basePriceDate = (Date)attributes.get("basePriceDate");

		if (basePriceDate != null) {
			setBasePriceDate(basePriceDate);
		}

		Integer netBasePrice = (Integer)attributes.get("netBasePrice");

		if (netBasePrice != null) {
			setNetBasePrice(netBasePrice);
		}

		Integer basePriceDdlb = (Integer)attributes.get("basePriceDdlb");

		if (basePriceDdlb != null) {
			setBasePriceDdlb(basePriceDdlb);
		}

		Integer subsequentPeriodPriceType = (Integer)attributes.get(
				"subsequentPeriodPriceType");

		if (subsequentPeriodPriceType != null) {
			setSubsequentPeriodPriceType(subsequentPeriodPriceType);
		}

		Integer netSubsequentPeriodPrice = (Integer)attributes.get(
				"netSubsequentPeriodPrice");

		if (netSubsequentPeriodPrice != null) {
			setNetSubsequentPeriodPrice(netSubsequentPeriodPrice);
		}

		Integer netSubsequentPriceFormulaId = (Integer)attributes.get(
				"netSubsequentPriceFormulaId");

		if (netSubsequentPriceFormulaId != null) {
			setNetSubsequentPriceFormulaId(netSubsequentPriceFormulaId);
		}

		Integer resetPriceType = (Integer)attributes.get("resetPriceType");

		if (resetPriceType != null) {
			setResetPriceType(resetPriceType);
		}

		Integer netResetPriceType = (Integer)attributes.get("netResetPriceType");

		if (netResetPriceType != null) {
			setNetResetPriceType(netResetPriceType);
		}

		Integer netResetPriceFormulaId = (Integer)attributes.get(
				"netResetPriceFormulaId");

		if (netResetPriceFormulaId != null) {
			setNetResetPriceFormulaId(netResetPriceFormulaId);
		}

		Integer netBasePriceFormulaId = (Integer)attributes.get(
				"netBasePriceFormulaId");

		if (netBasePriceFormulaId != null) {
			setNetBasePriceFormulaId(netBasePriceFormulaId);
		}
	}

	@Override
	public int getNepFormula() {
		return _nepFormula;
	}

	@Override
	public void setNepFormula(int nepFormula) {
		_nepFormula = nepFormula;
	}

	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	@Override
	public int getItemMasterSid() {
		return _itemMasterSid;
	}

	@Override
	public void setItemMasterSid(int itemMasterSid) {
		_itemMasterSid = itemMasterSid;
	}

	@Override
	public int getResetType() {
		return _resetType;
	}

	@Override
	public void setResetType(int resetType) {
		_resetType = resetType;
	}

	@Override
	public Date getPriceProtectionStartDate() {
		return _priceProtectionStartDate;
	}

	@Override
	public void setPriceProtectionStartDate(Date priceProtectionStartDate) {
		_priceProtectionStartDate = priceProtectionStartDate;
	}

	@Override
	public Date getResetDate() {
		return _resetDate;
	}

	@Override
	public void setResetDate(Date resetDate) {
		_resetDate = resetDate;
	}

	@Override
	public double getBasePrice() {
		return _basePrice;
	}

	@Override
	public void setBasePrice(double basePrice) {
		_basePrice = basePrice;
	}

	@Override
	public Date getItemPsAttachedDate() {
		return _itemPsAttachedDate;
	}

	@Override
	public void setItemPsAttachedDate(Date itemPsAttachedDate) {
		_itemPsAttachedDate = itemPsAttachedDate;
	}

	@Override
	public String getBrandMasterSid() {
		return _brandMasterSid;
	}

	@Override
	public void setBrandMasterSid(String brandMasterSid) {
		_brandMasterSid = brandMasterSid;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public int getItemPsAttachedStatus() {
		return _itemPsAttachedStatus;
	}

	@Override
	public void setItemPsAttachedStatus(int itemPsAttachedStatus) {
		_itemPsAttachedStatus = itemPsAttachedStatus;
	}

	@Override
	public Date getRevisionDate() {
		return _revisionDate;
	}

	@Override
	public void setRevisionDate(Date revisionDate) {
		_revisionDate = revisionDate;
	}

	@Override
	public double getPriceTolerance() {
		return _priceTolerance;
	}

	@Override
	public void setPriceTolerance(double priceTolerance) {
		_priceTolerance = priceTolerance;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public int getPsDetailsSid() {
		return _psDetailsSid;
	}

	@Override
	public void setPsDetailsSid(int psDetailsSid) {
		_psDetailsSid = psDetailsSid;
	}

	@Override
	public int getPsModelSid() {
		return _psModelSid;
	}

	@Override
	public void setPsModelSid(int psModelSid) {
		_columnBitmask |= PSMODELSID_COLUMN_BITMASK;

		if (!_setOriginalPsModelSid) {
			_setOriginalPsModelSid = true;

			_originalPsModelSid = _psModelSid;
		}

		_psModelSid = psModelSid;
	}

	public int getOriginalPsModelSid() {
		return _originalPsModelSid;
	}

	@Override
	public double getSuggestedPrice() {
		return _suggestedPrice;
	}

	@Override
	public void setSuggestedPrice(double suggestedPrice) {
		_suggestedPrice = suggestedPrice;
	}

	@Override
	public String getNetPriceTypeFormula() {
		return _netPriceTypeFormula;
	}

	@Override
	public void setNetPriceTypeFormula(String netPriceTypeFormula) {
		_netPriceTypeFormula = netPriceTypeFormula;
	}

	@Override
	public int getPriceProtectionPriceType() {
		return _priceProtectionPriceType;
	}

	@Override
	public void setPriceProtectionPriceType(int priceProtectionPriceType) {
		_priceProtectionPriceType = priceProtectionPriceType;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	@Override
	public double getContractPrice() {
		return _contractPrice;
	}

	@Override
	public void setContractPrice(double contractPrice) {
		_contractPrice = contractPrice;
	}

	@Override
	public int getIfpModelSid() {
		return _ifpModelSid;
	}

	@Override
	public void setIfpModelSid(int ifpModelSid) {
		_ifpModelSid = ifpModelSid;
	}

	@Override
	public int getPriceToleranceType() {
		return _priceToleranceType;
	}

	@Override
	public void setPriceToleranceType(int priceToleranceType) {
		_priceToleranceType = priceToleranceType;
	}

	@Override
	public double getMaxIncrementalChange() {
		return _maxIncrementalChange;
	}

	@Override
	public void setMaxIncrementalChange(double maxIncrementalChange) {
		_maxIncrementalChange = maxIncrementalChange;
	}

	@Override
	public int getItemPricingQualifierSid() {
		return _itemPricingQualifierSid;
	}

	@Override
	public void setItemPricingQualifierSid(int itemPricingQualifierSid) {
		_itemPricingQualifierSid = itemPricingQualifierSid;
	}

	@Override
	public Date getContractPriceEndDate() {
		return _contractPriceEndDate;
	}

	@Override
	public void setContractPriceEndDate(Date contractPriceEndDate) {
		_contractPriceEndDate = contractPriceEndDate;
	}

	@Override
	public double getNep() {
		return _nep;
	}

	@Override
	public void setNep(double nep) {
		_nep = nep;
	}

	@Override
	public Date getContractPriceStartDate() {
		return _contractPriceStartDate;
	}

	@Override
	public void setContractPriceStartDate(Date contractPriceStartDate) {
		_contractPriceStartDate = contractPriceStartDate;
	}

	@Override
	public int getPriceToleranceFrequency() {
		return _priceToleranceFrequency;
	}

	@Override
	public void setPriceToleranceFrequency(int priceToleranceFrequency) {
		_priceToleranceFrequency = priceToleranceFrequency;
	}

	@Override
	public Date getPriceProtectionEndDate() {
		return _priceProtectionEndDate;
	}

	@Override
	public void setPriceProtectionEndDate(Date priceProtectionEndDate) {
		_priceProtectionEndDate = priceProtectionEndDate;
	}

	@Override
	public int getPriceProtectionStatus() {
		return _priceProtectionStatus;
	}

	@Override
	public void setPriceProtectionStatus(int priceProtectionStatus) {
		_priceProtectionStatus = priceProtectionStatus;
	}

	@Override
	public boolean getRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public boolean isRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public void setRecordLockStatus(boolean recordLockStatus) {
		_recordLockStatus = recordLockStatus;
	}

	@Override
	public int getResetEligible() {
		return _resetEligible;
	}

	@Override
	public void setResetEligible(int resetEligible) {
		_resetEligible = resetEligible;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public int getPriceToleranceInterval() {
		return _priceToleranceInterval;
	}

	@Override
	public void setPriceToleranceInterval(int priceToleranceInterval) {
		_priceToleranceInterval = priceToleranceInterval;
	}

	@Override
	public int getNetPriceType() {
		return _netPriceType;
	}

	@Override
	public void setNetPriceType(int netPriceType) {
		_netPriceType = netPriceType;
	}

	@Override
	public double getPriceRevision() {
		return _priceRevision;
	}

	@Override
	public void setPriceRevision(double priceRevision) {
		_priceRevision = priceRevision;
	}

	@Override
	public int getResetFrequency() {
		return _resetFrequency;
	}

	@Override
	public void setResetFrequency(int resetFrequency) {
		_resetFrequency = resetFrequency;
	}

	@Override
	public int getResetInterval() {
		return _resetInterval;
	}

	@Override
	public void setResetInterval(int resetInterval) {
		_resetInterval = resetInterval;
	}

	@Override
	public int getBasePriceType() {
		return _basePriceType;
	}

	@Override
	public void setBasePriceType(int basePriceType) {
		_basePriceType = basePriceType;
	}

	@Override
	public double getBasePriceEntry() {
		return _basePriceEntry;
	}

	@Override
	public void setBasePriceEntry(double basePriceEntry) {
		_basePriceEntry = basePriceEntry;
	}

	@Override
	public Date getBasePriceDate() {
		return _basePriceDate;
	}

	@Override
	public void setBasePriceDate(Date basePriceDate) {
		_basePriceDate = basePriceDate;
	}

	@Override
	public int getNetBasePrice() {
		return _netBasePrice;
	}

	@Override
	public void setNetBasePrice(int netBasePrice) {
		_netBasePrice = netBasePrice;
	}

	@Override
	public int getBasePriceDdlb() {
		return _basePriceDdlb;
	}

	@Override
	public void setBasePriceDdlb(int basePriceDdlb) {
		_basePriceDdlb = basePriceDdlb;
	}

	@Override
	public int getSubsequentPeriodPriceType() {
		return _subsequentPeriodPriceType;
	}

	@Override
	public void setSubsequentPeriodPriceType(int subsequentPeriodPriceType) {
		_subsequentPeriodPriceType = subsequentPeriodPriceType;
	}

	@Override
	public int getNetSubsequentPeriodPrice() {
		return _netSubsequentPeriodPrice;
	}

	@Override
	public void setNetSubsequentPeriodPrice(int netSubsequentPeriodPrice) {
		_netSubsequentPeriodPrice = netSubsequentPeriodPrice;
	}

	@Override
	public int getNetSubsequentPriceFormulaId() {
		return _netSubsequentPriceFormulaId;
	}

	@Override
	public void setNetSubsequentPriceFormulaId(int netSubsequentPriceFormulaId) {
		_netSubsequentPriceFormulaId = netSubsequentPriceFormulaId;
	}

	@Override
	public int getResetPriceType() {
		return _resetPriceType;
	}

	@Override
	public void setResetPriceType(int resetPriceType) {
		_resetPriceType = resetPriceType;
	}

	@Override
	public int getNetResetPriceType() {
		return _netResetPriceType;
	}

	@Override
	public void setNetResetPriceType(int netResetPriceType) {
		_netResetPriceType = netResetPriceType;
	}

	@Override
	public int getNetResetPriceFormulaId() {
		return _netResetPriceFormulaId;
	}

	@Override
	public void setNetResetPriceFormulaId(int netResetPriceFormulaId) {
		_netResetPriceFormulaId = netResetPriceFormulaId;
	}

	@Override
	public int getNetBasePriceFormulaId() {
		return _netBasePriceFormulaId;
	}

	@Override
	public void setNetBasePriceFormulaId(int netBasePriceFormulaId) {
		_netBasePriceFormulaId = netBasePriceFormulaId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public PsDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PsDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PsDetailsImpl psDetailsImpl = new PsDetailsImpl();

		psDetailsImpl.setNepFormula(getNepFormula());
		psDetailsImpl.setPrice(getPrice());
		psDetailsImpl.setItemMasterSid(getItemMasterSid());
		psDetailsImpl.setResetType(getResetType());
		psDetailsImpl.setPriceProtectionStartDate(getPriceProtectionStartDate());
		psDetailsImpl.setResetDate(getResetDate());
		psDetailsImpl.setBasePrice(getBasePrice());
		psDetailsImpl.setItemPsAttachedDate(getItemPsAttachedDate());
		psDetailsImpl.setBrandMasterSid(getBrandMasterSid());
		psDetailsImpl.setStatus(getStatus());
		psDetailsImpl.setModifiedDate(getModifiedDate());
		psDetailsImpl.setItemPsAttachedStatus(getItemPsAttachedStatus());
		psDetailsImpl.setRevisionDate(getRevisionDate());
		psDetailsImpl.setPriceTolerance(getPriceTolerance());
		psDetailsImpl.setCreatedDate(getCreatedDate());
		psDetailsImpl.setCreatedBy(getCreatedBy());
		psDetailsImpl.setSource(getSource());
		psDetailsImpl.setPsDetailsSid(getPsDetailsSid());
		psDetailsImpl.setPsModelSid(getPsModelSid());
		psDetailsImpl.setSuggestedPrice(getSuggestedPrice());
		psDetailsImpl.setNetPriceTypeFormula(getNetPriceTypeFormula());
		psDetailsImpl.setPriceProtectionPriceType(getPriceProtectionPriceType());
		psDetailsImpl.setModifiedBy(getModifiedBy());
		psDetailsImpl.setInboundStatus(getInboundStatus());
		psDetailsImpl.setContractPrice(getContractPrice());
		psDetailsImpl.setIfpModelSid(getIfpModelSid());
		psDetailsImpl.setPriceToleranceType(getPriceToleranceType());
		psDetailsImpl.setMaxIncrementalChange(getMaxIncrementalChange());
		psDetailsImpl.setItemPricingQualifierSid(getItemPricingQualifierSid());
		psDetailsImpl.setContractPriceEndDate(getContractPriceEndDate());
		psDetailsImpl.setNep(getNep());
		psDetailsImpl.setContractPriceStartDate(getContractPriceStartDate());
		psDetailsImpl.setPriceToleranceFrequency(getPriceToleranceFrequency());
		psDetailsImpl.setPriceProtectionEndDate(getPriceProtectionEndDate());
		psDetailsImpl.setPriceProtectionStatus(getPriceProtectionStatus());
		psDetailsImpl.setRecordLockStatus(getRecordLockStatus());
		psDetailsImpl.setResetEligible(getResetEligible());
		psDetailsImpl.setBatchId(getBatchId());
		psDetailsImpl.setPriceToleranceInterval(getPriceToleranceInterval());
		psDetailsImpl.setNetPriceType(getNetPriceType());
		psDetailsImpl.setPriceRevision(getPriceRevision());
		psDetailsImpl.setResetFrequency(getResetFrequency());
		psDetailsImpl.setResetInterval(getResetInterval());
		psDetailsImpl.setBasePriceType(getBasePriceType());
		psDetailsImpl.setBasePriceEntry(getBasePriceEntry());
		psDetailsImpl.setBasePriceDate(getBasePriceDate());
		psDetailsImpl.setNetBasePrice(getNetBasePrice());
		psDetailsImpl.setBasePriceDdlb(getBasePriceDdlb());
		psDetailsImpl.setSubsequentPeriodPriceType(getSubsequentPeriodPriceType());
		psDetailsImpl.setNetSubsequentPeriodPrice(getNetSubsequentPeriodPrice());
		psDetailsImpl.setNetSubsequentPriceFormulaId(getNetSubsequentPriceFormulaId());
		psDetailsImpl.setResetPriceType(getResetPriceType());
		psDetailsImpl.setNetResetPriceType(getNetResetPriceType());
		psDetailsImpl.setNetResetPriceFormulaId(getNetResetPriceFormulaId());
		psDetailsImpl.setNetBasePriceFormulaId(getNetBasePriceFormulaId());

		psDetailsImpl.resetOriginalValues();

		return psDetailsImpl;
	}

	@Override
	public int compareTo(PsDetails psDetails) {
		int primaryKey = psDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PsDetails)) {
			return false;
		}

		PsDetails psDetails = (PsDetails)obj;

		int primaryKey = psDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PsDetailsModelImpl psDetailsModelImpl = this;

		psDetailsModelImpl._originalPsModelSid = psDetailsModelImpl._psModelSid;

		psDetailsModelImpl._setOriginalPsModelSid = false;

		psDetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PsDetails> toCacheModel() {
		PsDetailsCacheModel psDetailsCacheModel = new PsDetailsCacheModel();

		psDetailsCacheModel.nepFormula = getNepFormula();

		psDetailsCacheModel.price = getPrice();

		psDetailsCacheModel.itemMasterSid = getItemMasterSid();

		psDetailsCacheModel.resetType = getResetType();

		Date priceProtectionStartDate = getPriceProtectionStartDate();

		if (priceProtectionStartDate != null) {
			psDetailsCacheModel.priceProtectionStartDate = priceProtectionStartDate.getTime();
		}
		else {
			psDetailsCacheModel.priceProtectionStartDate = Long.MIN_VALUE;
		}

		Date resetDate = getResetDate();

		if (resetDate != null) {
			psDetailsCacheModel.resetDate = resetDate.getTime();
		}
		else {
			psDetailsCacheModel.resetDate = Long.MIN_VALUE;
		}

		psDetailsCacheModel.basePrice = getBasePrice();

		Date itemPsAttachedDate = getItemPsAttachedDate();

		if (itemPsAttachedDate != null) {
			psDetailsCacheModel.itemPsAttachedDate = itemPsAttachedDate.getTime();
		}
		else {
			psDetailsCacheModel.itemPsAttachedDate = Long.MIN_VALUE;
		}

		psDetailsCacheModel.brandMasterSid = getBrandMasterSid();

		String brandMasterSid = psDetailsCacheModel.brandMasterSid;

		if ((brandMasterSid != null) && (brandMasterSid.length() == 0)) {
			psDetailsCacheModel.brandMasterSid = null;
		}

		psDetailsCacheModel.status = getStatus();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			psDetailsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			psDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		psDetailsCacheModel.itemPsAttachedStatus = getItemPsAttachedStatus();

		Date revisionDate = getRevisionDate();

		if (revisionDate != null) {
			psDetailsCacheModel.revisionDate = revisionDate.getTime();
		}
		else {
			psDetailsCacheModel.revisionDate = Long.MIN_VALUE;
		}

		psDetailsCacheModel.priceTolerance = getPriceTolerance();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			psDetailsCacheModel.createdDate = createdDate.getTime();
		}
		else {
			psDetailsCacheModel.createdDate = Long.MIN_VALUE;
		}

		psDetailsCacheModel.createdBy = getCreatedBy();

		psDetailsCacheModel.source = getSource();

		String source = psDetailsCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			psDetailsCacheModel.source = null;
		}

		psDetailsCacheModel.psDetailsSid = getPsDetailsSid();

		psDetailsCacheModel.psModelSid = getPsModelSid();

		psDetailsCacheModel.suggestedPrice = getSuggestedPrice();

		psDetailsCacheModel.netPriceTypeFormula = getNetPriceTypeFormula();

		String netPriceTypeFormula = psDetailsCacheModel.netPriceTypeFormula;

		if ((netPriceTypeFormula != null) &&
				(netPriceTypeFormula.length() == 0)) {
			psDetailsCacheModel.netPriceTypeFormula = null;
		}

		psDetailsCacheModel.priceProtectionPriceType = getPriceProtectionPriceType();

		psDetailsCacheModel.modifiedBy = getModifiedBy();

		psDetailsCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = psDetailsCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			psDetailsCacheModel.inboundStatus = null;
		}

		psDetailsCacheModel.contractPrice = getContractPrice();

		psDetailsCacheModel.ifpModelSid = getIfpModelSid();

		psDetailsCacheModel.priceToleranceType = getPriceToleranceType();

		psDetailsCacheModel.maxIncrementalChange = getMaxIncrementalChange();

		psDetailsCacheModel.itemPricingQualifierSid = getItemPricingQualifierSid();

		Date contractPriceEndDate = getContractPriceEndDate();

		if (contractPriceEndDate != null) {
			psDetailsCacheModel.contractPriceEndDate = contractPriceEndDate.getTime();
		}
		else {
			psDetailsCacheModel.contractPriceEndDate = Long.MIN_VALUE;
		}

		psDetailsCacheModel.nep = getNep();

		Date contractPriceStartDate = getContractPriceStartDate();

		if (contractPriceStartDate != null) {
			psDetailsCacheModel.contractPriceStartDate = contractPriceStartDate.getTime();
		}
		else {
			psDetailsCacheModel.contractPriceStartDate = Long.MIN_VALUE;
		}

		psDetailsCacheModel.priceToleranceFrequency = getPriceToleranceFrequency();

		Date priceProtectionEndDate = getPriceProtectionEndDate();

		if (priceProtectionEndDate != null) {
			psDetailsCacheModel.priceProtectionEndDate = priceProtectionEndDate.getTime();
		}
		else {
			psDetailsCacheModel.priceProtectionEndDate = Long.MIN_VALUE;
		}

		psDetailsCacheModel.priceProtectionStatus = getPriceProtectionStatus();

		psDetailsCacheModel.recordLockStatus = getRecordLockStatus();

		psDetailsCacheModel.resetEligible = getResetEligible();

		psDetailsCacheModel.batchId = getBatchId();

		String batchId = psDetailsCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			psDetailsCacheModel.batchId = null;
		}

		psDetailsCacheModel.priceToleranceInterval = getPriceToleranceInterval();

		psDetailsCacheModel.netPriceType = getNetPriceType();

		psDetailsCacheModel.priceRevision = getPriceRevision();

		psDetailsCacheModel.resetFrequency = getResetFrequency();

		psDetailsCacheModel.resetInterval = getResetInterval();

		psDetailsCacheModel.basePriceType = getBasePriceType();

		psDetailsCacheModel.basePriceEntry = getBasePriceEntry();

		Date basePriceDate = getBasePriceDate();

		if (basePriceDate != null) {
			psDetailsCacheModel.basePriceDate = basePriceDate.getTime();
		}
		else {
			psDetailsCacheModel.basePriceDate = Long.MIN_VALUE;
		}

		psDetailsCacheModel.netBasePrice = getNetBasePrice();

		psDetailsCacheModel.basePriceDdlb = getBasePriceDdlb();

		psDetailsCacheModel.subsequentPeriodPriceType = getSubsequentPeriodPriceType();

		psDetailsCacheModel.netSubsequentPeriodPrice = getNetSubsequentPeriodPrice();

		psDetailsCacheModel.netSubsequentPriceFormulaId = getNetSubsequentPriceFormulaId();

		psDetailsCacheModel.resetPriceType = getResetPriceType();

		psDetailsCacheModel.netResetPriceType = getNetResetPriceType();

		psDetailsCacheModel.netResetPriceFormulaId = getNetResetPriceFormulaId();

		psDetailsCacheModel.netBasePriceFormulaId = getNetBasePriceFormulaId();

		return psDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(111);

		sb.append("{nepFormula=");
		sb.append(getNepFormula());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", itemMasterSid=");
		sb.append(getItemMasterSid());
		sb.append(", resetType=");
		sb.append(getResetType());
		sb.append(", priceProtectionStartDate=");
		sb.append(getPriceProtectionStartDate());
		sb.append(", resetDate=");
		sb.append(getResetDate());
		sb.append(", basePrice=");
		sb.append(getBasePrice());
		sb.append(", itemPsAttachedDate=");
		sb.append(getItemPsAttachedDate());
		sb.append(", brandMasterSid=");
		sb.append(getBrandMasterSid());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", itemPsAttachedStatus=");
		sb.append(getItemPsAttachedStatus());
		sb.append(", revisionDate=");
		sb.append(getRevisionDate());
		sb.append(", priceTolerance=");
		sb.append(getPriceTolerance());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", psDetailsSid=");
		sb.append(getPsDetailsSid());
		sb.append(", psModelSid=");
		sb.append(getPsModelSid());
		sb.append(", suggestedPrice=");
		sb.append(getSuggestedPrice());
		sb.append(", netPriceTypeFormula=");
		sb.append(getNetPriceTypeFormula());
		sb.append(", priceProtectionPriceType=");
		sb.append(getPriceProtectionPriceType());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append(", contractPrice=");
		sb.append(getContractPrice());
		sb.append(", ifpModelSid=");
		sb.append(getIfpModelSid());
		sb.append(", priceToleranceType=");
		sb.append(getPriceToleranceType());
		sb.append(", maxIncrementalChange=");
		sb.append(getMaxIncrementalChange());
		sb.append(", itemPricingQualifierSid=");
		sb.append(getItemPricingQualifierSid());
		sb.append(", contractPriceEndDate=");
		sb.append(getContractPriceEndDate());
		sb.append(", nep=");
		sb.append(getNep());
		sb.append(", contractPriceStartDate=");
		sb.append(getContractPriceStartDate());
		sb.append(", priceToleranceFrequency=");
		sb.append(getPriceToleranceFrequency());
		sb.append(", priceProtectionEndDate=");
		sb.append(getPriceProtectionEndDate());
		sb.append(", priceProtectionStatus=");
		sb.append(getPriceProtectionStatus());
		sb.append(", recordLockStatus=");
		sb.append(getRecordLockStatus());
		sb.append(", resetEligible=");
		sb.append(getResetEligible());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", priceToleranceInterval=");
		sb.append(getPriceToleranceInterval());
		sb.append(", netPriceType=");
		sb.append(getNetPriceType());
		sb.append(", priceRevision=");
		sb.append(getPriceRevision());
		sb.append(", resetFrequency=");
		sb.append(getResetFrequency());
		sb.append(", resetInterval=");
		sb.append(getResetInterval());
		sb.append(", basePriceType=");
		sb.append(getBasePriceType());
		sb.append(", basePriceEntry=");
		sb.append(getBasePriceEntry());
		sb.append(", basePriceDate=");
		sb.append(getBasePriceDate());
		sb.append(", netBasePrice=");
		sb.append(getNetBasePrice());
		sb.append(", basePriceDdlb=");
		sb.append(getBasePriceDdlb());
		sb.append(", subsequentPeriodPriceType=");
		sb.append(getSubsequentPeriodPriceType());
		sb.append(", netSubsequentPeriodPrice=");
		sb.append(getNetSubsequentPeriodPrice());
		sb.append(", netSubsequentPriceFormulaId=");
		sb.append(getNetSubsequentPriceFormulaId());
		sb.append(", resetPriceType=");
		sb.append(getResetPriceType());
		sb.append(", netResetPriceType=");
		sb.append(getNetResetPriceType());
		sb.append(", netResetPriceFormulaId=");
		sb.append(getNetResetPriceFormulaId());
		sb.append(", netBasePriceFormulaId=");
		sb.append(getNetBasePriceFormulaId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(169);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.PsDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>nepFormula</column-name><column-value><![CDATA[");
		sb.append(getNepFormula());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
		sb.append(getItemMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetType</column-name><column-value><![CDATA[");
		sb.append(getResetType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceProtectionStartDate</column-name><column-value><![CDATA[");
		sb.append(getPriceProtectionStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetDate</column-name><column-value><![CDATA[");
		sb.append(getResetDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePrice</column-name><column-value><![CDATA[");
		sb.append(getBasePrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemPsAttachedDate</column-name><column-value><![CDATA[");
		sb.append(getItemPsAttachedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brandMasterSid</column-name><column-value><![CDATA[");
		sb.append(getBrandMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemPsAttachedStatus</column-name><column-value><![CDATA[");
		sb.append(getItemPsAttachedStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>revisionDate</column-name><column-value><![CDATA[");
		sb.append(getRevisionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceTolerance</column-name><column-value><![CDATA[");
		sb.append(getPriceTolerance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>psDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getPsDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>psModelSid</column-name><column-value><![CDATA[");
		sb.append(getPsModelSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>suggestedPrice</column-name><column-value><![CDATA[");
		sb.append(getSuggestedPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netPriceTypeFormula</column-name><column-value><![CDATA[");
		sb.append(getNetPriceTypeFormula());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceProtectionPriceType</column-name><column-value><![CDATA[");
		sb.append(getPriceProtectionPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractPrice</column-name><column-value><![CDATA[");
		sb.append(getContractPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ifpModelSid</column-name><column-value><![CDATA[");
		sb.append(getIfpModelSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceToleranceType</column-name><column-value><![CDATA[");
		sb.append(getPriceToleranceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxIncrementalChange</column-name><column-value><![CDATA[");
		sb.append(getMaxIncrementalChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemPricingQualifierSid</column-name><column-value><![CDATA[");
		sb.append(getItemPricingQualifierSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractPriceEndDate</column-name><column-value><![CDATA[");
		sb.append(getContractPriceEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nep</column-name><column-value><![CDATA[");
		sb.append(getNep());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractPriceStartDate</column-name><column-value><![CDATA[");
		sb.append(getContractPriceStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceToleranceFrequency</column-name><column-value><![CDATA[");
		sb.append(getPriceToleranceFrequency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceProtectionEndDate</column-name><column-value><![CDATA[");
		sb.append(getPriceProtectionEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceProtectionStatus</column-name><column-value><![CDATA[");
		sb.append(getPriceProtectionStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
		sb.append(getRecordLockStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetEligible</column-name><column-value><![CDATA[");
		sb.append(getResetEligible());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceToleranceInterval</column-name><column-value><![CDATA[");
		sb.append(getPriceToleranceInterval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netPriceType</column-name><column-value><![CDATA[");
		sb.append(getNetPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceRevision</column-name><column-value><![CDATA[");
		sb.append(getPriceRevision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetFrequency</column-name><column-value><![CDATA[");
		sb.append(getResetFrequency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetInterval</column-name><column-value><![CDATA[");
		sb.append(getResetInterval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePriceType</column-name><column-value><![CDATA[");
		sb.append(getBasePriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePriceEntry</column-name><column-value><![CDATA[");
		sb.append(getBasePriceEntry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePriceDate</column-name><column-value><![CDATA[");
		sb.append(getBasePriceDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netBasePrice</column-name><column-value><![CDATA[");
		sb.append(getNetBasePrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePriceDdlb</column-name><column-value><![CDATA[");
		sb.append(getBasePriceDdlb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subsequentPeriodPriceType</column-name><column-value><![CDATA[");
		sb.append(getSubsequentPeriodPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSubsequentPeriodPrice</column-name><column-value><![CDATA[");
		sb.append(getNetSubsequentPeriodPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSubsequentPriceFormulaId</column-name><column-value><![CDATA[");
		sb.append(getNetSubsequentPriceFormulaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetPriceType</column-name><column-value><![CDATA[");
		sb.append(getResetPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netResetPriceType</column-name><column-value><![CDATA[");
		sb.append(getNetResetPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netResetPriceFormulaId</column-name><column-value><![CDATA[");
		sb.append(getNetResetPriceFormulaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netBasePriceFormulaId</column-name><column-value><![CDATA[");
		sb.append(getNetBasePriceFormulaId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = PsDetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			PsDetails.class
		};
	private int _nepFormula;
	private double _price;
	private int _itemMasterSid;
	private int _resetType;
	private Date _priceProtectionStartDate;
	private Date _resetDate;
	private double _basePrice;
	private Date _itemPsAttachedDate;
	private String _brandMasterSid;
	private int _status;
	private Date _modifiedDate;
	private int _itemPsAttachedStatus;
	private Date _revisionDate;
	private double _priceTolerance;
	private Date _createdDate;
	private int _createdBy;
	private String _source;
	private int _psDetailsSid;
	private int _psModelSid;
	private int _originalPsModelSid;
	private boolean _setOriginalPsModelSid;
	private double _suggestedPrice;
	private String _netPriceTypeFormula;
	private int _priceProtectionPriceType;
	private int _modifiedBy;
	private String _inboundStatus;
	private double _contractPrice;
	private int _ifpModelSid;
	private int _priceToleranceType;
	private double _maxIncrementalChange;
	private int _itemPricingQualifierSid;
	private Date _contractPriceEndDate;
	private double _nep;
	private Date _contractPriceStartDate;
	private int _priceToleranceFrequency;
	private Date _priceProtectionEndDate;
	private int _priceProtectionStatus;
	private boolean _recordLockStatus;
	private int _resetEligible;
	private String _batchId;
	private int _priceToleranceInterval;
	private int _netPriceType;
	private double _priceRevision;
	private int _resetFrequency;
	private int _resetInterval;
	private int _basePriceType;
	private double _basePriceEntry;
	private Date _basePriceDate;
	private int _netBasePrice;
	private int _basePriceDdlb;
	private int _subsequentPeriodPriceType;
	private int _netSubsequentPeriodPrice;
	private int _netSubsequentPriceFormulaId;
	private int _resetPriceType;
	private int _netResetPriceType;
	private int _netResetPriceFormulaId;
	private int _netBasePriceFormulaId;
	private long _columnBitmask;
	private PsDetails _escapedModel;
}