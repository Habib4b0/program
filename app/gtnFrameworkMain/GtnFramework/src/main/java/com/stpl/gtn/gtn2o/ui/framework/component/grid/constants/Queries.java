package com.stpl.gtn.gtn2o.ui.framework.component.grid.constants;

public class Queries {

	public static final String RETURNS_DATA_QUERY = "  SELECT P.QUARTER as frequency, P.YEAR as year, \r\n"
			+ "       RT_M.HIERARCHY_NO as hierarchyNo,  \r\n" + "       RT_M.LEVEL_NO as levelNo, \r\n"
			+ "       Max(R_MASTER.LAG)  AS lag, \r\n" + "       Max(R_MASTER.CLOSED_DATE) AS closedDate,\r\n"
			+ "       Max(R_MASTER.LOE_DATE) AS  loeDate , \r\n"
			+ "       COALESCE(Sum(A.CUM_RETURN_UNITS) / NULLIF(Sum(A.ORIG_SALE_UNITS), 0), 0) * 100   AS actualReturnPercent, \r\n"
			+ "       COALESCE(( COALESCE(Sum(A.CUM_RETURN_UNITS) / NULLIF(Sum(A.ORIG_SALE_UNITS), 0), 0) * Sum(A.ORIG_SALE_DOLLARS) ) / NULLIF(Sum(A.ORIG_SALE_UNITS), 0), 0)  AS actualRpu, \r\n"
			+ "       Sum(A.ACTUAL_RETURN_AMOUNT)  AS actualReturnAmount, \r\n"
			+ "       COALESCE(Sum(A.PROJECTED_RETURN_UNITS) / NULLIF(Sum(A.ACTIVE_EXFACTORY_SALES_UNITS), 0), 0) * 100 AS projectedReturnPercent, \r\n"
			+ "       COALESCE(( ( COALESCE(Sum(A.PROJECTED_RETURN_UNITS) / NULLIF(Sum(A.ACTIVE_EXFACTORY_SALES_UNITS), 0), 0) ) * Sum(A.ACTIVE_EXFACTORY_SALES_AMOUNT) ) / NULLIF(Sum(A.ACTIVE_EXFACTORY_SALES_UNITS), 0), 0) AS projectedRpu, \r\n"
			+ "       Sum(A.PROJECTED_RETURN_AMOUNT) AS projectedReturnAmount, \r\n"
			+ "       Avg(A.GROWTH_RATE) AS growthRate, \r\n" + "       Min(CASE( R_MASTER.CHECK_RECORD ) \r\n"
			+ "             WHEN 1 THEN 1 \r\n" + "             ELSE 0 \r\n" + "          END) CHECK_RECORD, \r\n"
			+ "       SUM(CASE( R_MASTER.CHECK_RECORD ) \r\n" + "             WHEN 1 THEN 0 \r\n"
			+ "             ELSE 1 \r\n" + "          END) / ? UNCHECK_RECORD \r\n"
			+ "FROM   RETURNS_PROJ_MASTER R_MASTER \r\n"
			+ "JOIN   (SELECT          COALESCE(R_ACTUALS.RETURNS_DETAILS_SID, R_PROJ.RETURNS_DETAILS_SID)AS RETURNS_DETAILS_SID, \r\n"
			+ "                        COALESCE(R_ACTUALS.PERIOD_SID, R_PROJ.PERIOD_SID) AS PERIOD_SID, \r\n"
			+ "                        R_ACTUALS.ACTUAL_RETURN_PERCENT, \r\n"
			+ "                        R_ACTUALS.ACTUAL_RPU, \r\n"
			+ "                        R_ACTUALS.ACTUAL_RETURN_AMOUNT, \r\n"
			+ "                        R_ACTUALS.CUM_RETURN_UNITS, \r\n" + "                        R_ACTUALS.ASP, \r\n"
			+ "                        R_ACTUALS.ORIG_SALE_DOLLARS, \r\n"
			+ "                        R_ACTUALS.ORIG_SALE_UNITS, \r\n"
			+ "                        R_PROJ.PROJECTED_RETURN_PERCENT, \r\n"
			+ "                        R_PROJ.PROJECTED_RPU, \r\n"
			+ "                        R_PROJ.PROJECTED_RETURN_AMOUNT, \r\n"
			+ "                        R_PROJ.PROJECTED_RETURN_UNITS, \r\n"
			+ "                        R_PROJ.ACTIVE_EXFACTORY_SALES_AMOUNT, \r\n"
			+ "                        R_PROJ.ACTIVE_EXFACTORY_SALES_UNITS, \r\n"
			+ "                        R_PROJ.GROWTH_RATE\r\n"
			+ "        FROM            (SELECT RETURNS_DETAILS_SID, \r\n"
			+ "                                PERIOD_SID, \r\n"
			+ "                                ACTUAL_RETURN_PERCENT, \r\n"
			+ "                                ACTUAL_RPU, \r\n"
			+ "                                ACTUAL_RETURN_AMOUNT, \r\n"
			+ "                                CUM_RETURN_UNITS, \r\n" + "                                ASP, \r\n"
			+ "                                ORIG_SALE_DOLLARS,\r\n"
			+ "                                ORIG_SALE_UNITS \r\n"
			+ "                         FROM   RETURNS_ACTUALS NAP \r\n"
			+ "                         WHERE  NAP.RETURNS_DETAILS_SID LIKE '%'\r\n"
			+ "                                ) R_ACTUALS \r\n"
			+ "        FULL OUTER JOIN (SELECT RETURNS_DETAILS_SID, \r\n"
			+ "                                PERIOD_SID, \r\n"
			+ "                                PROJECTED_RETURN_PERCENT, \r\n"
			+ "                                PROJECTED_RPU, \r\n"
			+ "                                PROJECTED_RETURN_AMOUNT, \r\n"
			+ "                                PROJECTED_RETURN_UNITS, \r\n"
			+ "                                ACTIVE_EXFACTORY_SALES_AMOUNT, \r\n"
			+ "                                ACTIVE_EXFACTORY_SALES_UNITS, \r\n"
			+ "                                GROWTH_RATE \r\n"
			+ "                         FROM   RETURNS_PROJ_DETAILS NPP \r\n"
			+ "                         WHERE  RETURNS_DETAILS_SID LIKE '%'\r\n"
			+ "                                ) R_PROJ ON R_ACTUALS.RETURNS_DETAILS_SID = R_PROJ.RETURNS_DETAILS_SID \r\n"
			+ "                                                                    AND R_ACTUALS.PERIOD_SID = R_PROJ.PERIOD_SID)A ON A.RETURNS_DETAILS_SID = R_MASTER.RETURNS_DETAILS_SID \r\n"
			+ "                                                                     \r\n"
			+ "JOIN   PERIOD P ON P.PERIOD_SID = A.PERIOD_SID  \r\n"
			+ "JOIN   (SELECT DISTINCT A.PROJECTION_MASTER_SID, \r\n" + "                    A.HIERARCHY_NO, \r\n"
			+ "                    A.LEVEL_NO, \r\n" + "                    B.TOKEN \r\n"
			+ "        FROM        RETURNS_MAP A \r\n" + "        CROSS APPLY (SELECT Token \r\n"
			+ "                     FROM   UDF_SPLITSTRING(A.RETURNS_DETAILS_SID, ','))B \r\n"
			+ "        WHERE       LEVEL_NO =@levelNo AND A.PROJECTION_MASTER_SID=?  and A.HIERARCHY_NO LIKE '@hierarchyNo' )RT_M ON RT_M.token = A.RETURNS_DETAILS_SID \r\n"
			+ "         GROUP BY RT_M.HIERARCHY_NO,  \r\n" + "           RT_M.LEVEL_NO,P.YEAR,P.QUARTER \r\n"
			+ " ORDER BY  RT_M.HIERARCHY_NO  OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";

	public static final String RETURNS_COUNT_QUERY = " SELECT distinct RLD.HIERARCHY_NO  as hierarchyNo,RLD.RELATIONSHIP_LEVEL_SID as rid,RLD.LEVEL_NAME as levelName,RLD.LEVEL_NO as levelNo "
			+ "FROM RELATIONSHIP_LEVEL_DEFINITION RLD \r\n"
			+ "JOIN PROJECTION_PROD_HIERARCHY PPH ON RLD.RELATIONSHIP_LEVEL_SID = PPH.RELATIONSHIP_LEVEL_SID \r\n"
			+ "WHERE PPH.PROJECTION_MASTER_SID =?\r\n"
			+ " AND RLD.LEVEL_NO =@levelNo and RLD.HIERARCHY_NO like  '@hierarchyNo' ORDER BY  RLD.HIERARCHY_NO ";
        
        public static final String RETURNS_LEFT_DATA_QUERY = " SELECT distinct RLD.HIERARCHY_NO  as hierarchyNo,RLD.RELATIONSHIP_LEVEL_SID as rid,RLD.LEVEL_NAME as levelName,RLD.LEVEL_NO as levelNo "
			+ "FROM RELATIONSHIP_LEVEL_DEFINITION RLD \r\n"
			+ "JOIN PROJECTION_PROD_HIERARCHY PPH ON RLD.RELATIONSHIP_LEVEL_SID = PPH.RELATIONSHIP_LEVEL_SID \r\n"
			+ "WHERE PPH.PROJECTION_MASTER_SID =?\r\n"
			+ " AND RLD.LEVEL_NO =@levelNo and RLD.HIERARCHY_NO like  '@hierarchyNo' ORDER BY  RLD.HIERARCHY_NO OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";
        
        

}
