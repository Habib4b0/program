package com.stpl.app.model.impl;

import com.stpl.app.model.CcpMap;
import com.stpl.app.model.CcpMapModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CcpMap service. Represents a row in the &quot;CCP_MAP&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.CcpMapModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CcpMapImpl}.
 * </p>
 *
 * @author
 * @see CcpMapImpl
 * @see com.stpl.app.model.CcpMap
 * @see com.stpl.app.model.CcpMapModel
 * @generated
 */
public class CcpMapModelImpl extends BaseModelImpl<CcpMap>
    implements CcpMapModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ccp map model instance should use the {@link com.stpl.app.model.CcpMap} interface instead.
     */
    public static final String TABLE_NAME = "CCP_MAP";
    public static final Object[][] TABLE_COLUMNS = {
            { "CCP_DETAILS_SID", Types.INTEGER },
            { "RELATIONSHIP_LEVEL_SID", Types.INTEGER },
            { "CCP_MAP_SID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table CCP_MAP (CCP_DETAILS_SID INTEGER,RELATIONSHIP_LEVEL_SID INTEGER,CCP_MAP_SID INTEGER not null primary key IDENTITY)";
    public static final String TABLE_SQL_DROP = "drop table CCP_MAP";
    public static final String ORDER_BY_JPQL = " ORDER BY ccpMap.ccpMapSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY CCP_MAP.CCP_MAP_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.CcpMap"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.CcpMap"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.CcpMap"));
    private static ClassLoader _classLoader = CcpMap.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { CcpMap.class };
    private int _ccpDetailsSid;
    private int _relationshipLevelSid;
    private int _ccpMapSid;
    private CcpMap _escapedModel;

    public CcpMapModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _ccpMapSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setCcpMapSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _ccpMapSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return CcpMap.class;
    }

    @Override
    public String getModelClassName() {
        return CcpMap.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("ccpDetailsSid", getCcpDetailsSid());
        attributes.put("relationshipLevelSid", getRelationshipLevelSid());
        attributes.put("ccpMapSid", getCcpMapSid());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer ccpDetailsSid = (Integer) attributes.get("ccpDetailsSid");

        if (ccpDetailsSid != null) {
            setCcpDetailsSid(ccpDetailsSid);
        }

        Integer relationshipLevelSid = (Integer) attributes.get(
                "relationshipLevelSid");

        if (relationshipLevelSid != null) {
            setRelationshipLevelSid(relationshipLevelSid);
        }

        Integer ccpMapSid = (Integer) attributes.get("ccpMapSid");

        if (ccpMapSid != null) {
            setCcpMapSid(ccpMapSid);
        }
    }

    @Override
    public int getCcpDetailsSid() {
        return _ccpDetailsSid;
    }

    @Override
    public void setCcpDetailsSid(int ccpDetailsSid) {
        _ccpDetailsSid = ccpDetailsSid;
    }

    @Override
    public int getRelationshipLevelSid() {
        return _relationshipLevelSid;
    }

    @Override
    public void setRelationshipLevelSid(int relationshipLevelSid) {
        _relationshipLevelSid = relationshipLevelSid;
    }

    @Override
    public int getCcpMapSid() {
        return _ccpMapSid;
    }

    @Override
    public void setCcpMapSid(int ccpMapSid) {
        _ccpMapSid = ccpMapSid;
    }

    @Override
    public CcpMap toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (CcpMap) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CcpMapImpl ccpMapImpl = new CcpMapImpl();

        ccpMapImpl.setCcpDetailsSid(getCcpDetailsSid());
        ccpMapImpl.setRelationshipLevelSid(getRelationshipLevelSid());
        ccpMapImpl.setCcpMapSid(getCcpMapSid());

        ccpMapImpl.resetOriginalValues();

        return ccpMapImpl;
    }

    @Override
    public int compareTo(CcpMap ccpMap) {
        int primaryKey = ccpMap.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof CcpMap)) {
            return false;
        }

        CcpMap ccpMap = (CcpMap) obj;

        int primaryKey = ccpMap.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<CcpMap> toCacheModel() {
        CcpMapCacheModel ccpMapCacheModel = new CcpMapCacheModel();

        ccpMapCacheModel.ccpDetailsSid = getCcpDetailsSid();

        ccpMapCacheModel.relationshipLevelSid = getRelationshipLevelSid();

        ccpMapCacheModel.ccpMapSid = getCcpMapSid();

        return ccpMapCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{ccpDetailsSid=");
        sb.append(getCcpDetailsSid());
        sb.append(", relationshipLevelSid=");
        sb.append(getRelationshipLevelSid());
        sb.append(", ccpMapSid=");
        sb.append(getCcpMapSid());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.CcpMap");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>ccpDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getCcpDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>relationshipLevelSid</column-name><column-value><![CDATA[");
        sb.append(getRelationshipLevelSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ccpMapSid</column-name><column-value><![CDATA[");
        sb.append(getCcpMapSid());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
