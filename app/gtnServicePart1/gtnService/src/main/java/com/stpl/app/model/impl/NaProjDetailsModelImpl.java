/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.stpl.app.model.NaProjDetails;
import com.stpl.app.model.NaProjDetailsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NaProjDetails service. Represents a row in the &quot;NA_PROJ_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link NaProjDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NaProjDetailsImpl}.
 * </p>
 *
 * @author
 * @see NaProjDetailsImpl
 * @see NaProjDetails
 * @see NaProjDetailsModel
 * @generated
 */
@ProviderType
public class NaProjDetailsModelImpl extends BaseModelImpl<NaProjDetails>
	implements NaProjDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a na proj details model instance should use the {@link NaProjDetails} interface instead.
	 */
	public static final String TABLE_NAME = "NA_PROJ_DETAILS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ITEM_MASTER_SID", Types.INTEGER },
			{ "NA_PROJ_MASTER_SID", Types.INTEGER },
			{ "NA_PROJ_DETAILS_SID", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ITEM_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NA_PROJ_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NA_PROJ_DETAILS_SID", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table NA_PROJ_DETAILS (ITEM_MASTER_SID INTEGER,NA_PROJ_MASTER_SID INTEGER,NA_PROJ_DETAILS_SID INTEGER not null primary key IDENTITY)";
	public static final String TABLE_SQL_DROP = "drop table NA_PROJ_DETAILS";
	public static final String ORDER_BY_JPQL = " ORDER BY naProjDetails.naProjDetailsSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY NA_PROJ_DETAILS.NA_PROJ_DETAILS_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.NaProjDetails"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.NaProjDetails"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.NaProjDetails"));

	public NaProjDetailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _naProjDetailsSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setNaProjDetailsSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _naProjDetailsSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NaProjDetails.class;
	}

	@Override
	public String getModelClassName() {
		return NaProjDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("itemMasterSid", getItemMasterSid());
		attributes.put("naProjMasterSid", getNaProjMasterSid());
		attributes.put("naProjDetailsSid", getNaProjDetailsSid());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer itemMasterSid = (Integer)attributes.get("itemMasterSid");

		if (itemMasterSid != null) {
			setItemMasterSid(itemMasterSid);
		}

		Integer naProjMasterSid = (Integer)attributes.get("naProjMasterSid");

		if (naProjMasterSid != null) {
			setNaProjMasterSid(naProjMasterSid);
		}

		Integer naProjDetailsSid = (Integer)attributes.get("naProjDetailsSid");

		if (naProjDetailsSid != null) {
			setNaProjDetailsSid(naProjDetailsSid);
		}
	}

	@Override
	public int getItemMasterSid() {
		return _itemMasterSid;
	}

	@Override
	public void setItemMasterSid(int itemMasterSid) {
		_itemMasterSid = itemMasterSid;
	}

	@Override
	public int getNaProjMasterSid() {
		return _naProjMasterSid;
	}

	@Override
	public void setNaProjMasterSid(int naProjMasterSid) {
		_naProjMasterSid = naProjMasterSid;
	}

	@Override
	public int getNaProjDetailsSid() {
		return _naProjDetailsSid;
	}

	@Override
	public void setNaProjDetailsSid(int naProjDetailsSid) {
		_naProjDetailsSid = naProjDetailsSid;
	}

	@Override
	public NaProjDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (NaProjDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NaProjDetailsImpl naProjDetailsImpl = new NaProjDetailsImpl();

		naProjDetailsImpl.setItemMasterSid(getItemMasterSid());
		naProjDetailsImpl.setNaProjMasterSid(getNaProjMasterSid());
		naProjDetailsImpl.setNaProjDetailsSid(getNaProjDetailsSid());

		naProjDetailsImpl.resetOriginalValues();

		return naProjDetailsImpl;
	}

	@Override
	public int compareTo(NaProjDetails naProjDetails) {
		int primaryKey = naProjDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof NaProjDetails)) {
			return false;
		}

		NaProjDetails naProjDetails = (NaProjDetails)obj;

		int primaryKey = naProjDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<NaProjDetails> toCacheModel() {
		NaProjDetailsCacheModel naProjDetailsCacheModel = new NaProjDetailsCacheModel();

		naProjDetailsCacheModel.itemMasterSid = getItemMasterSid();

		naProjDetailsCacheModel.naProjMasterSid = getNaProjMasterSid();

		naProjDetailsCacheModel.naProjDetailsSid = getNaProjDetailsSid();

		return naProjDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{itemMasterSid=");
		sb.append(getItemMasterSid());
		sb.append(", naProjMasterSid=");
		sb.append(getNaProjMasterSid());
		sb.append(", naProjDetailsSid=");
		sb.append(getNaProjDetailsSid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.NaProjDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
		sb.append(getItemMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>naProjMasterSid</column-name><column-value><![CDATA[");
		sb.append(getNaProjMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>naProjDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getNaProjDetailsSid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = NaProjDetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			NaProjDetails.class
		};
	private int _itemMasterSid;
	private int _naProjMasterSid;
	private int _naProjDetailsSid;
	private NaProjDetails _escapedModel;
}