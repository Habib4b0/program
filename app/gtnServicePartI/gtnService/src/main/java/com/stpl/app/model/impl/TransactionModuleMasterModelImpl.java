/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.TransactionModuleMaster;
import com.stpl.app.model.TransactionModuleMasterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TransactionModuleMaster service. Represents a row in the &quot;TRANSACTION_MODULE_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TransactionModuleMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TransactionModuleMasterImpl}.
 * </p>
 *
 * @author
 * @see TransactionModuleMasterImpl
 * @see TransactionModuleMaster
 * @see TransactionModuleMasterModel
 * @generated
 */
@ProviderType
public class TransactionModuleMasterModelImpl extends BaseModelImpl<TransactionModuleMaster>
	implements TransactionModuleMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a transaction module master model instance should use the {@link TransactionModuleMaster} interface instead.
	 */
	public static final String TABLE_NAME = "TRANSACTION_MODULE_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "TRANSACTION_MODULE_MASTER_SID", Types.INTEGER },
			{ "INVALID_TABLE_NAME", Types.VARCHAR },
			{ "TABLE_NAME", Types.VARCHAR },
			{ "MODULE_NAME", Types.VARCHAR },
			{ "TAB_NAME", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("TRANSACTION_MODULE_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("INVALID_TABLE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TABLE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODULE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TAB_NAME", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table TRANSACTION_MODULE_MASTER (TRANSACTION_MODULE_MASTER_SID INTEGER not null primary key IDENTITY,INVALID_TABLE_NAME VARCHAR(75) null,TABLE_NAME VARCHAR(75) null,MODULE_NAME VARCHAR(75) null,TAB_NAME VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TRANSACTION_MODULE_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY transactionModuleMaster.transactionModuleMasterSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TRANSACTION_MODULE_MASTER.TRANSACTION_MODULE_MASTER_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.TransactionModuleMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.TransactionModuleMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.TransactionModuleMaster"));

	public TransactionModuleMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _transactionModuleMasterSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setTransactionModuleMasterSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _transactionModuleMasterSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TransactionModuleMaster.class;
	}

	@Override
	public String getModelClassName() {
		return TransactionModuleMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("transactionModuleMasterSid",
			getTransactionModuleMasterSid());
		attributes.put("invalidTableName", getInvalidTableName());
		attributes.put("tableName", getTableName());
		attributes.put("moduleName", getModuleName());
		attributes.put("tabName", getTabName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer transactionModuleMasterSid = (Integer)attributes.get(
				"transactionModuleMasterSid");

		if (transactionModuleMasterSid != null) {
			setTransactionModuleMasterSid(transactionModuleMasterSid);
		}

		String invalidTableName = (String)attributes.get("invalidTableName");

		if (invalidTableName != null) {
			setInvalidTableName(invalidTableName);
		}

		String tableName = (String)attributes.get("tableName");

		if (tableName != null) {
			setTableName(tableName);
		}

		String moduleName = (String)attributes.get("moduleName");

		if (moduleName != null) {
			setModuleName(moduleName);
		}

		String tabName = (String)attributes.get("tabName");

		if (tabName != null) {
			setTabName(tabName);
		}
	}

	@Override
	public int getTransactionModuleMasterSid() {
		return _transactionModuleMasterSid;
	}

	@Override
	public void setTransactionModuleMasterSid(int transactionModuleMasterSid) {
		_transactionModuleMasterSid = transactionModuleMasterSid;
	}

	@Override
	public String getInvalidTableName() {
		if (_invalidTableName == null) {
			return StringPool.BLANK;
		}
		else {
			return _invalidTableName;
		}
	}

	@Override
	public void setInvalidTableName(String invalidTableName) {
		_invalidTableName = invalidTableName;
	}

	@Override
	public String getTableName() {
		if (_tableName == null) {
			return StringPool.BLANK;
		}
		else {
			return _tableName;
		}
	}

	@Override
	public void setTableName(String tableName) {
		_tableName = tableName;
	}

	@Override
	public String getModuleName() {
		if (_moduleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _moduleName;
		}
	}

	@Override
	public void setModuleName(String moduleName) {
		_moduleName = moduleName;
	}

	@Override
	public String getTabName() {
		if (_tabName == null) {
			return StringPool.BLANK;
		}
		else {
			return _tabName;
		}
	}

	@Override
	public void setTabName(String tabName) {
		_tabName = tabName;
	}

	@Override
	public TransactionModuleMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TransactionModuleMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TransactionModuleMasterImpl transactionModuleMasterImpl = new TransactionModuleMasterImpl();

		transactionModuleMasterImpl.setTransactionModuleMasterSid(getTransactionModuleMasterSid());
		transactionModuleMasterImpl.setInvalidTableName(getInvalidTableName());
		transactionModuleMasterImpl.setTableName(getTableName());
		transactionModuleMasterImpl.setModuleName(getModuleName());
		transactionModuleMasterImpl.setTabName(getTabName());

		transactionModuleMasterImpl.resetOriginalValues();

		return transactionModuleMasterImpl;
	}

	@Override
	public int compareTo(TransactionModuleMaster transactionModuleMaster) {
		int primaryKey = transactionModuleMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TransactionModuleMaster)) {
			return false;
		}

		TransactionModuleMaster transactionModuleMaster = (TransactionModuleMaster)obj;

		int primaryKey = transactionModuleMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TransactionModuleMaster> toCacheModel() {
		TransactionModuleMasterCacheModel transactionModuleMasterCacheModel = new TransactionModuleMasterCacheModel();

		transactionModuleMasterCacheModel.transactionModuleMasterSid = getTransactionModuleMasterSid();

		transactionModuleMasterCacheModel.invalidTableName = getInvalidTableName();

		String invalidTableName = transactionModuleMasterCacheModel.invalidTableName;

		if ((invalidTableName != null) && (invalidTableName.length() == 0)) {
			transactionModuleMasterCacheModel.invalidTableName = null;
		}

		transactionModuleMasterCacheModel.tableName = getTableName();

		String tableName = transactionModuleMasterCacheModel.tableName;

		if ((tableName != null) && (tableName.length() == 0)) {
			transactionModuleMasterCacheModel.tableName = null;
		}

		transactionModuleMasterCacheModel.moduleName = getModuleName();

		String moduleName = transactionModuleMasterCacheModel.moduleName;

		if ((moduleName != null) && (moduleName.length() == 0)) {
			transactionModuleMasterCacheModel.moduleName = null;
		}

		transactionModuleMasterCacheModel.tabName = getTabName();

		String tabName = transactionModuleMasterCacheModel.tabName;

		if ((tabName != null) && (tabName.length() == 0)) {
			transactionModuleMasterCacheModel.tabName = null;
		}

		return transactionModuleMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{transactionModuleMasterSid=");
		sb.append(getTransactionModuleMasterSid());
		sb.append(", invalidTableName=");
		sb.append(getInvalidTableName());
		sb.append(", tableName=");
		sb.append(getTableName());
		sb.append(", moduleName=");
		sb.append(getModuleName());
		sb.append(", tabName=");
		sb.append(getTabName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.TransactionModuleMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>transactionModuleMasterSid</column-name><column-value><![CDATA[");
		sb.append(getTransactionModuleMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>invalidTableName</column-name><column-value><![CDATA[");
		sb.append(getInvalidTableName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tableName</column-name><column-value><![CDATA[");
		sb.append(getTableName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moduleName</column-name><column-value><![CDATA[");
		sb.append(getModuleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tabName</column-name><column-value><![CDATA[");
		sb.append(getTabName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TransactionModuleMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TransactionModuleMaster.class
		};
	private int _transactionModuleMasterSid;
	private String _invalidTableName;
	private String _tableName;
	private String _moduleName;
	private String _tabName;
	private TransactionModuleMaster _escapedModel;
}