/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.MedicaidNewNdc;
import com.stpl.app.model.MedicaidNewNdcModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MedicaidNewNdc service. Represents a row in the &quot;MEDICAID_NEW_NDC&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MedicaidNewNdcModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MedicaidNewNdcImpl}.
 * </p>
 *
 * @author
 * @see MedicaidNewNdcImpl
 * @see MedicaidNewNdc
 * @see MedicaidNewNdcModel
 * @generated
 */
@ProviderType
public class MedicaidNewNdcModelImpl extends BaseModelImpl<MedicaidNewNdc>
	implements MedicaidNewNdcModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a medicaid new ndc model instance should use the {@link MedicaidNewNdc} interface instead.
	 */
	public static final String TABLE_NAME = "MEDICAID_NEW_NDC";
	public static final Object[][] TABLE_COLUMNS = {
			{ "FORECAST_AMP", Types.DOUBLE },
			{ "FORECAST_BESTPRICE", Types.DOUBLE },
			{ "BASE_YEAR_CPI", Types.DOUBLE },
			{ "NDC9", Types.VARCHAR },
			{ "WAC_PRICE", Types.DOUBLE },
			{ "BASE_YEAR_AMP", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("FORECAST_AMP", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("FORECAST_BESTPRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("BASE_YEAR_CPI", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("NDC9", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("WAC_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("BASE_YEAR_AMP", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table MEDICAID_NEW_NDC (FORECAST_AMP DOUBLE,FORECAST_BESTPRICE DOUBLE,BASE_YEAR_CPI DOUBLE,NDC9 VARCHAR(75) not null primary key,WAC_PRICE DOUBLE,BASE_YEAR_AMP DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table MEDICAID_NEW_NDC";
	public static final String ORDER_BY_JPQL = " ORDER BY medicaidNewNdc.ndc9 ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEDICAID_NEW_NDC.NDC9 ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.MedicaidNewNdc"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.MedicaidNewNdc"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.MedicaidNewNdc"));

	public MedicaidNewNdcModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _ndc9;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setNdc9(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ndc9;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return MedicaidNewNdc.class;
	}

	@Override
	public String getModelClassName() {
		return MedicaidNewNdc.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("forecastAmp", getForecastAmp());
		attributes.put("forecastBestprice", getForecastBestprice());
		attributes.put("baseYearCpi", getBaseYearCpi());
		attributes.put("ndc9", getNdc9());
		attributes.put("wacPrice", getWacPrice());
		attributes.put("baseYearAmp", getBaseYearAmp());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Double forecastAmp = (Double)attributes.get("forecastAmp");

		if (forecastAmp != null) {
			setForecastAmp(forecastAmp);
		}

		Double forecastBestprice = (Double)attributes.get("forecastBestprice");

		if (forecastBestprice != null) {
			setForecastBestprice(forecastBestprice);
		}

		Double baseYearCpi = (Double)attributes.get("baseYearCpi");

		if (baseYearCpi != null) {
			setBaseYearCpi(baseYearCpi);
		}

		String ndc9 = (String)attributes.get("ndc9");

		if (ndc9 != null) {
			setNdc9(ndc9);
		}

		Double wacPrice = (Double)attributes.get("wacPrice");

		if (wacPrice != null) {
			setWacPrice(wacPrice);
		}

		Double baseYearAmp = (Double)attributes.get("baseYearAmp");

		if (baseYearAmp != null) {
			setBaseYearAmp(baseYearAmp);
		}
	}

	@Override
	public double getForecastAmp() {
		return _forecastAmp;
	}

	@Override
	public void setForecastAmp(double forecastAmp) {
		_forecastAmp = forecastAmp;
	}

	@Override
	public double getForecastBestprice() {
		return _forecastBestprice;
	}

	@Override
	public void setForecastBestprice(double forecastBestprice) {
		_forecastBestprice = forecastBestprice;
	}

	@Override
	public double getBaseYearCpi() {
		return _baseYearCpi;
	}

	@Override
	public void setBaseYearCpi(double baseYearCpi) {
		_baseYearCpi = baseYearCpi;
	}

	@Override
	public String getNdc9() {
		if (_ndc9 == null) {
			return StringPool.BLANK;
		}
		else {
			return _ndc9;
		}
	}

	@Override
	public void setNdc9(String ndc9) {
		_ndc9 = ndc9;
	}

	@Override
	public double getWacPrice() {
		return _wacPrice;
	}

	@Override
	public void setWacPrice(double wacPrice) {
		_wacPrice = wacPrice;
	}

	@Override
	public double getBaseYearAmp() {
		return _baseYearAmp;
	}

	@Override
	public void setBaseYearAmp(double baseYearAmp) {
		_baseYearAmp = baseYearAmp;
	}

	@Override
	public MedicaidNewNdc toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MedicaidNewNdc)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MedicaidNewNdcImpl medicaidNewNdcImpl = new MedicaidNewNdcImpl();

		medicaidNewNdcImpl.setForecastAmp(getForecastAmp());
		medicaidNewNdcImpl.setForecastBestprice(getForecastBestprice());
		medicaidNewNdcImpl.setBaseYearCpi(getBaseYearCpi());
		medicaidNewNdcImpl.setNdc9(getNdc9());
		medicaidNewNdcImpl.setWacPrice(getWacPrice());
		medicaidNewNdcImpl.setBaseYearAmp(getBaseYearAmp());

		medicaidNewNdcImpl.resetOriginalValues();

		return medicaidNewNdcImpl;
	}

	@Override
	public int compareTo(MedicaidNewNdc medicaidNewNdc) {
		String primaryKey = medicaidNewNdc.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MedicaidNewNdc)) {
			return false;
		}

		MedicaidNewNdc medicaidNewNdc = (MedicaidNewNdc)obj;

		String primaryKey = medicaidNewNdc.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MedicaidNewNdc> toCacheModel() {
		MedicaidNewNdcCacheModel medicaidNewNdcCacheModel = new MedicaidNewNdcCacheModel();

		medicaidNewNdcCacheModel.forecastAmp = getForecastAmp();

		medicaidNewNdcCacheModel.forecastBestprice = getForecastBestprice();

		medicaidNewNdcCacheModel.baseYearCpi = getBaseYearCpi();

		medicaidNewNdcCacheModel.ndc9 = getNdc9();

		String ndc9 = medicaidNewNdcCacheModel.ndc9;

		if ((ndc9 != null) && (ndc9.length() == 0)) {
			medicaidNewNdcCacheModel.ndc9 = null;
		}

		medicaidNewNdcCacheModel.wacPrice = getWacPrice();

		medicaidNewNdcCacheModel.baseYearAmp = getBaseYearAmp();

		return medicaidNewNdcCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{forecastAmp=");
		sb.append(getForecastAmp());
		sb.append(", forecastBestprice=");
		sb.append(getForecastBestprice());
		sb.append(", baseYearCpi=");
		sb.append(getBaseYearCpi());
		sb.append(", ndc9=");
		sb.append(getNdc9());
		sb.append(", wacPrice=");
		sb.append(getWacPrice());
		sb.append(", baseYearAmp=");
		sb.append(getBaseYearAmp());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.MedicaidNewNdc");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>forecastAmp</column-name><column-value><![CDATA[");
		sb.append(getForecastAmp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastBestprice</column-name><column-value><![CDATA[");
		sb.append(getForecastBestprice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>baseYearCpi</column-name><column-value><![CDATA[");
		sb.append(getBaseYearCpi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ndc9</column-name><column-value><![CDATA[");
		sb.append(getNdc9());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wacPrice</column-name><column-value><![CDATA[");
		sb.append(getWacPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>baseYearAmp</column-name><column-value><![CDATA[");
		sb.append(getBaseYearAmp());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MedicaidNewNdc.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MedicaidNewNdc.class
		};
	private double _forecastAmp;
	private double _forecastBestprice;
	private double _baseYearCpi;
	private String _ndc9;
	private double _wacPrice;
	private double _baseYearAmp;
	private MedicaidNewNdc _escapedModel;
}