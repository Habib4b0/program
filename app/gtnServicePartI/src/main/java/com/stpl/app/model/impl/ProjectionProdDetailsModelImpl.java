package com.stpl.app.model.impl;

import com.stpl.app.model.ProjectionProdDetails;
import com.stpl.app.model.ProjectionProdDetailsModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ProjectionProdDetails service. Represents a row in the &quot;PROJECTION_PROD_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.ProjectionProdDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectionProdDetailsImpl}.
 * </p>
 *
 * @author
 * @see ProjectionProdDetailsImpl
 * @see com.stpl.app.model.ProjectionProdDetails
 * @see com.stpl.app.model.ProjectionProdDetailsModel
 * @generated
 */
public class ProjectionProdDetailsModelImpl extends BaseModelImpl<ProjectionProdDetails>
    implements ProjectionProdDetailsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a projection prod details model instance should use the {@link com.stpl.app.model.ProjectionProdDetails} interface instead.
     */
    public static final String TABLE_NAME = "PROJECTION_PROD_DETAILS";
    public static final Object[][] TABLE_COLUMNS = {
            { "PRODUCT_NAME", Types.VARCHAR },
            { "COST_CENTER", Types.VARCHAR },
            { "PRODUCT_NO", Types.VARCHAR },
            { "SUB_LEDGER_CODE", Types.VARCHAR },
            { "PRODUCT_DETAILS_ID", Types.INTEGER },
            { "BRAND_NAME", Types.VARCHAR },
            { "PROJECTION_ID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table PROJECTION_PROD_DETAILS (PRODUCT_NAME VARCHAR(75) null,COST_CENTER VARCHAR(75) null,PRODUCT_NO VARCHAR(75) null,SUB_LEDGER_CODE VARCHAR(75) null,PRODUCT_DETAILS_ID INTEGER not null primary key IDENTITY,BRAND_NAME VARCHAR(75) null,PROJECTION_ID INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table PROJECTION_PROD_DETAILS";
    public static final String ORDER_BY_JPQL = " ORDER BY projectionProdDetails.productDetailsId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY PROJECTION_PROD_DETAILS.PRODUCT_DETAILS_ID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.ProjectionProdDetails"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.ProjectionProdDetails"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.ProjectionProdDetails"));
    private static ClassLoader _classLoader = ProjectionProdDetails.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ProjectionProdDetails.class
        };
    private String _productName;
    private String _costCenter;
    private String _productNo;
    private String _subLedgerCode;
    private int _productDetailsId;
    private String _brandName;
    private int _projectionId;
    private ProjectionProdDetails _escapedModel;

    public ProjectionProdDetailsModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _productDetailsId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setProductDetailsId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _productDetailsId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ProjectionProdDetails.class;
    }

    @Override
    public String getModelClassName() {
        return ProjectionProdDetails.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("productName", getProductName());
        attributes.put("costCenter", getCostCenter());
        attributes.put("productNo", getProductNo());
        attributes.put("subLedgerCode", getSubLedgerCode());
        attributes.put("productDetailsId", getProductDetailsId());
        attributes.put("brandName", getBrandName());
        attributes.put("projectionId", getProjectionId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String productName = (String) attributes.get("productName");

        if (productName != null) {
            setProductName(productName);
        }

        String costCenter = (String) attributes.get("costCenter");

        if (costCenter != null) {
            setCostCenter(costCenter);
        }

        String productNo = (String) attributes.get("productNo");

        if (productNo != null) {
            setProductNo(productNo);
        }

        String subLedgerCode = (String) attributes.get("subLedgerCode");

        if (subLedgerCode != null) {
            setSubLedgerCode(subLedgerCode);
        }

        Integer productDetailsId = (Integer) attributes.get("productDetailsId");

        if (productDetailsId != null) {
            setProductDetailsId(productDetailsId);
        }

        String brandName = (String) attributes.get("brandName");

        if (brandName != null) {
            setBrandName(brandName);
        }

        Integer projectionId = (Integer) attributes.get("projectionId");

        if (projectionId != null) {
            setProjectionId(projectionId);
        }
    }

    @Override
    public String getProductName() {
        if (_productName == null) {
            return StringPool.BLANK;
        } else {
            return _productName;
        }
    }

    @Override
    public void setProductName(String productName) {
        _productName = productName;
    }

    @Override
    public String getCostCenter() {
        if (_costCenter == null) {
            return StringPool.BLANK;
        } else {
            return _costCenter;
        }
    }

    @Override
    public void setCostCenter(String costCenter) {
        _costCenter = costCenter;
    }

    @Override
    public String getProductNo() {
        if (_productNo == null) {
            return StringPool.BLANK;
        } else {
            return _productNo;
        }
    }

    @Override
    public void setProductNo(String productNo) {
        _productNo = productNo;
    }

    @Override
    public String getSubLedgerCode() {
        if (_subLedgerCode == null) {
            return StringPool.BLANK;
        } else {
            return _subLedgerCode;
        }
    }

    @Override
    public void setSubLedgerCode(String subLedgerCode) {
        _subLedgerCode = subLedgerCode;
    }

    @Override
    public int getProductDetailsId() {
        return _productDetailsId;
    }

    @Override
    public void setProductDetailsId(int productDetailsId) {
        _productDetailsId = productDetailsId;
    }

    @Override
    public String getBrandName() {
        if (_brandName == null) {
            return StringPool.BLANK;
        } else {
            return _brandName;
        }
    }

    @Override
    public void setBrandName(String brandName) {
        _brandName = brandName;
    }

    @Override
    public int getProjectionId() {
        return _projectionId;
    }

    @Override
    public void setProjectionId(int projectionId) {
        _projectionId = projectionId;
    }

    @Override
    public ProjectionProdDetails toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ProjectionProdDetails) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ProjectionProdDetailsImpl projectionProdDetailsImpl = new ProjectionProdDetailsImpl();

        projectionProdDetailsImpl.setProductName(getProductName());
        projectionProdDetailsImpl.setCostCenter(getCostCenter());
        projectionProdDetailsImpl.setProductNo(getProductNo());
        projectionProdDetailsImpl.setSubLedgerCode(getSubLedgerCode());
        projectionProdDetailsImpl.setProductDetailsId(getProductDetailsId());
        projectionProdDetailsImpl.setBrandName(getBrandName());
        projectionProdDetailsImpl.setProjectionId(getProjectionId());

        projectionProdDetailsImpl.resetOriginalValues();

        return projectionProdDetailsImpl;
    }

    @Override
    public int compareTo(ProjectionProdDetails projectionProdDetails) {
        int primaryKey = projectionProdDetails.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ProjectionProdDetails)) {
            return false;
        }

        ProjectionProdDetails projectionProdDetails = (ProjectionProdDetails) obj;

        int primaryKey = projectionProdDetails.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ProjectionProdDetails> toCacheModel() {
        ProjectionProdDetailsCacheModel projectionProdDetailsCacheModel = new ProjectionProdDetailsCacheModel();

        projectionProdDetailsCacheModel.productName = getProductName();

        String productName = projectionProdDetailsCacheModel.productName;

        if ((productName != null) && (productName.length() == 0)) {
            projectionProdDetailsCacheModel.productName = null;
        }

        projectionProdDetailsCacheModel.costCenter = getCostCenter();

        String costCenter = projectionProdDetailsCacheModel.costCenter;

        if ((costCenter != null) && (costCenter.length() == 0)) {
            projectionProdDetailsCacheModel.costCenter = null;
        }

        projectionProdDetailsCacheModel.productNo = getProductNo();

        String productNo = projectionProdDetailsCacheModel.productNo;

        if ((productNo != null) && (productNo.length() == 0)) {
            projectionProdDetailsCacheModel.productNo = null;
        }

        projectionProdDetailsCacheModel.subLedgerCode = getSubLedgerCode();

        String subLedgerCode = projectionProdDetailsCacheModel.subLedgerCode;

        if ((subLedgerCode != null) && (subLedgerCode.length() == 0)) {
            projectionProdDetailsCacheModel.subLedgerCode = null;
        }

        projectionProdDetailsCacheModel.productDetailsId = getProductDetailsId();

        projectionProdDetailsCacheModel.brandName = getBrandName();

        String brandName = projectionProdDetailsCacheModel.brandName;

        if ((brandName != null) && (brandName.length() == 0)) {
            projectionProdDetailsCacheModel.brandName = null;
        }

        projectionProdDetailsCacheModel.projectionId = getProjectionId();

        return projectionProdDetailsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{productName=");
        sb.append(getProductName());
        sb.append(", costCenter=");
        sb.append(getCostCenter());
        sb.append(", productNo=");
        sb.append(getProductNo());
        sb.append(", subLedgerCode=");
        sb.append(getSubLedgerCode());
        sb.append(", productDetailsId=");
        sb.append(getProductDetailsId());
        sb.append(", brandName=");
        sb.append(getBrandName());
        sb.append(", projectionId=");
        sb.append(getProjectionId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.ProjectionProdDetails");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>productName</column-name><column-value><![CDATA[");
        sb.append(getProductName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>costCenter</column-name><column-value><![CDATA[");
        sb.append(getCostCenter());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>productNo</column-name><column-value><![CDATA[");
        sb.append(getProductNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>subLedgerCode</column-name><column-value><![CDATA[");
        sb.append(getSubLedgerCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>productDetailsId</column-name><column-value><![CDATA[");
        sb.append(getProductDetailsId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandName</column-name><column-value><![CDATA[");
        sb.append(getBrandName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionId</column-name><column-value><![CDATA[");
        sb.append(getProjectionId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
