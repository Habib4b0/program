package com.stpl.app.model.impl;

import com.stpl.app.model.WorkflowProfile;
import com.stpl.app.model.WorkflowProfileModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the WorkflowProfile service. Represents a row in the &quot;WORKFLOW_PROFILE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.WorkflowProfileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WorkflowProfileImpl}.
 * </p>
 *
 * @author
 * @see WorkflowProfileImpl
 * @see com.stpl.app.model.WorkflowProfile
 * @see com.stpl.app.model.WorkflowProfileModel
 * @generated
 */
public class WorkflowProfileModelImpl extends BaseModelImpl<WorkflowProfile>
    implements WorkflowProfileModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a workflow profile model instance should use the {@link com.stpl.app.model.WorkflowProfile} interface instead.
     */
    public static final String TABLE_NAME = "WORKFLOW_PROFILE";
    public static final Object[][] TABLE_COLUMNS = {
            { "START_HOUR", Types.INTEGER },
            { "FREQUENCY", Types.VARCHAR },
            { "PROCESS_NAME", Types.VARCHAR },
            { "START_MINUTES1", Types.INTEGER },
            { "END_DATE", Types.TIMESTAMP },
            { "EMAIL_NOTIFICATION_FAILURE_CC", Types.VARCHAR },
            { "FAILURE_MAIL_SUBJECT", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "SCHEMA_NAME", Types.VARCHAR },
            { "CREATED_BY", Types.INTEGER },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "SCHEDULE_LAST_RUN", Types.TIMESTAMP },
            { "EMAIL_NOTIFICATION_SUCCESS_TO", Types.VARCHAR },
            { "START_MINUTES3", Types.INTEGER },
            { "START_MINUTES2", Types.INTEGER },
            { "PROCESS_SID", Types.INTEGER },
            { "SUCCESS_MAIL_BODY", Types.VARCHAR },
            { "INBOUND_STATUS", Types.VARCHAR },
            { "MODIFIED_BY", Types.INTEGER },
            { "EMAIL_NOTIFICATION_SUCCESS_CC", Types.VARCHAR },
            { "EMAIL_NOTIFICATION_FAILURE_TO", Types.VARCHAR },
            { "FAILURE_MAIL_BODY", Types.VARCHAR },
            { "ACTIVE_FLAG", Types.VARCHAR },
            { "PROCESS_DISPLAY_NAME", Types.VARCHAR },
            { "START_MINUTES", Types.INTEGER },
            { "MANUAL_LAST_RUN", Types.TIMESTAMP },
            { "START_DATE", Types.TIMESTAMP },
            { "SLA_CALENDAR_MASTER_SID", Types.INTEGER },
            { "SUCCESS_MAIL_SUBJECT", Types.VARCHAR },
            { "START_HOUR3", Types.INTEGER },
            { "START_HOUR2", Types.INTEGER },
            { "USER_SID", Types.INTEGER },
            { "START_HOUR1", Types.INTEGER },
            { "PROCESS_TYPE", Types.INTEGER },
            { "SCRIPT_NAME", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table WORKFLOW_PROFILE (START_HOUR INTEGER,FREQUENCY VARCHAR(75) null,PROCESS_NAME VARCHAR(75) null,START_MINUTES1 INTEGER,END_DATE DATE null,EMAIL_NOTIFICATION_FAILURE_CC VARCHAR(75) null,FAILURE_MAIL_SUBJECT VARCHAR(75) null,MODIFIED_DATE DATE null,SCHEMA_NAME VARCHAR(75) null,CREATED_BY INTEGER,CREATED_DATE DATE null,SCHEDULE_LAST_RUN DATE null,EMAIL_NOTIFICATION_SUCCESS_TO VARCHAR(75) null,START_MINUTES3 INTEGER,START_MINUTES2 INTEGER,PROCESS_SID INTEGER not null primary key IDENTITY,SUCCESS_MAIL_BODY VARCHAR(75) null,INBOUND_STATUS VARCHAR(75) null,MODIFIED_BY INTEGER,EMAIL_NOTIFICATION_SUCCESS_CC VARCHAR(75) null,EMAIL_NOTIFICATION_FAILURE_TO VARCHAR(75) null,FAILURE_MAIL_BODY VARCHAR(75) null,ACTIVE_FLAG VARCHAR(75) null,PROCESS_DISPLAY_NAME VARCHAR(75) null,START_MINUTES INTEGER,MANUAL_LAST_RUN DATE null,START_DATE DATE null,SLA_CALENDAR_MASTER_SID INTEGER,SUCCESS_MAIL_SUBJECT VARCHAR(75) null,START_HOUR3 INTEGER,START_HOUR2 INTEGER,USER_SID INTEGER,START_HOUR1 INTEGER,PROCESS_TYPE INTEGER,SCRIPT_NAME VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table WORKFLOW_PROFILE";
    public static final String ORDER_BY_JPQL = " ORDER BY workflowProfile.processSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY WORKFLOW_PROFILE.PROCESS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.WorkflowProfile"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.WorkflowProfile"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.WorkflowProfile"));
    private static ClassLoader _classLoader = WorkflowProfile.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            WorkflowProfile.class
        };
    private int _startHour;
    private String _frequency;
    private String _processName;
    private int _startMinutes1;
    private Date _endDate;
    private String _emailNotificationFailureCc;
    private String _failureMailSubject;
    private Date _modifiedDate;
    private String _schemaName;
    private int _createdBy;
    private Date _createdDate;
    private Date _scheduleLastRun;
    private String _emailNotificationSuccessTo;
    private int _startMinutes3;
    private int _startMinutes2;
    private int _processSid;
    private String _successMailBody;
    private String _inboundStatus;
    private int _modifiedBy;
    private String _emailNotificationSuccessCc;
    private String _emailNotificationFailureTo;
    private String _failureMailBody;
    private String _activeFlag;
    private String _processDisplayName;
    private int _startMinutes;
    private Date _manualLastRun;
    private Date _startDate;
    private int _slaCalendarMasterSid;
    private String _successMailSubject;
    private int _startHour3;
    private int _startHour2;
    private int _userSid;
    private int _startHour1;
    private int _processType;
    private String _scriptName;
    private WorkflowProfile _escapedModel;

    public WorkflowProfileModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _processSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setProcessSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _processSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return WorkflowProfile.class;
    }

    @Override
    public String getModelClassName() {
        return WorkflowProfile.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("startHour", getStartHour());
        attributes.put("frequency", getFrequency());
        attributes.put("processName", getProcessName());
        attributes.put("startMinutes1", getStartMinutes1());
        attributes.put("endDate", getEndDate());
        attributes.put("emailNotificationFailureCc",
            getEmailNotificationFailureCc());
        attributes.put("failureMailSubject", getFailureMailSubject());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("schemaName", getSchemaName());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("scheduleLastRun", getScheduleLastRun());
        attributes.put("emailNotificationSuccessTo",
            getEmailNotificationSuccessTo());
        attributes.put("startMinutes3", getStartMinutes3());
        attributes.put("startMinutes2", getStartMinutes2());
        attributes.put("processSid", getProcessSid());
        attributes.put("successMailBody", getSuccessMailBody());
        attributes.put("inboundStatus", getInboundStatus());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("emailNotificationSuccessCc",
            getEmailNotificationSuccessCc());
        attributes.put("emailNotificationFailureTo",
            getEmailNotificationFailureTo());
        attributes.put("failureMailBody", getFailureMailBody());
        attributes.put("activeFlag", getActiveFlag());
        attributes.put("processDisplayName", getProcessDisplayName());
        attributes.put("startMinutes", getStartMinutes());
        attributes.put("manualLastRun", getManualLastRun());
        attributes.put("startDate", getStartDate());
        attributes.put("slaCalendarMasterSid", getSlaCalendarMasterSid());
        attributes.put("successMailSubject", getSuccessMailSubject());
        attributes.put("startHour3", getStartHour3());
        attributes.put("startHour2", getStartHour2());
        attributes.put("userSid", getUserSid());
        attributes.put("startHour1", getStartHour1());
        attributes.put("processType", getProcessType());
        attributes.put("scriptName", getScriptName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer startHour = (Integer) attributes.get("startHour");

        if (startHour != null) {
            setStartHour(startHour);
        }

        String frequency = (String) attributes.get("frequency");

        if (frequency != null) {
            setFrequency(frequency);
        }

        String processName = (String) attributes.get("processName");

        if (processName != null) {
            setProcessName(processName);
        }

        Integer startMinutes1 = (Integer) attributes.get("startMinutes1");

        if (startMinutes1 != null) {
            setStartMinutes1(startMinutes1);
        }

        Date endDate = (Date) attributes.get("endDate");

        if (endDate != null) {
            setEndDate(endDate);
        }

        String emailNotificationFailureCc = (String) attributes.get(
                "emailNotificationFailureCc");

        if (emailNotificationFailureCc != null) {
            setEmailNotificationFailureCc(emailNotificationFailureCc);
        }

        String failureMailSubject = (String) attributes.get(
                "failureMailSubject");

        if (failureMailSubject != null) {
            setFailureMailSubject(failureMailSubject);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String schemaName = (String) attributes.get("schemaName");

        if (schemaName != null) {
            setSchemaName(schemaName);
        }

        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Date scheduleLastRun = (Date) attributes.get("scheduleLastRun");

        if (scheduleLastRun != null) {
            setScheduleLastRun(scheduleLastRun);
        }

        String emailNotificationSuccessTo = (String) attributes.get(
                "emailNotificationSuccessTo");

        if (emailNotificationSuccessTo != null) {
            setEmailNotificationSuccessTo(emailNotificationSuccessTo);
        }

        Integer startMinutes3 = (Integer) attributes.get("startMinutes3");

        if (startMinutes3 != null) {
            setStartMinutes3(startMinutes3);
        }

        Integer startMinutes2 = (Integer) attributes.get("startMinutes2");

        if (startMinutes2 != null) {
            setStartMinutes2(startMinutes2);
        }

        Integer processSid = (Integer) attributes.get("processSid");

        if (processSid != null) {
            setProcessSid(processSid);
        }

        String successMailBody = (String) attributes.get("successMailBody");

        if (successMailBody != null) {
            setSuccessMailBody(successMailBody);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String emailNotificationSuccessCc = (String) attributes.get(
                "emailNotificationSuccessCc");

        if (emailNotificationSuccessCc != null) {
            setEmailNotificationSuccessCc(emailNotificationSuccessCc);
        }

        String emailNotificationFailureTo = (String) attributes.get(
                "emailNotificationFailureTo");

        if (emailNotificationFailureTo != null) {
            setEmailNotificationFailureTo(emailNotificationFailureTo);
        }

        String failureMailBody = (String) attributes.get("failureMailBody");

        if (failureMailBody != null) {
            setFailureMailBody(failureMailBody);
        }

        String activeFlag = (String) attributes.get("activeFlag");

        if (activeFlag != null) {
            setActiveFlag(activeFlag);
        }

        String processDisplayName = (String) attributes.get(
                "processDisplayName");

        if (processDisplayName != null) {
            setProcessDisplayName(processDisplayName);
        }

        Integer startMinutes = (Integer) attributes.get("startMinutes");

        if (startMinutes != null) {
            setStartMinutes(startMinutes);
        }

        Date manualLastRun = (Date) attributes.get("manualLastRun");

        if (manualLastRun != null) {
            setManualLastRun(manualLastRun);
        }

        Date startDate = (Date) attributes.get("startDate");

        if (startDate != null) {
            setStartDate(startDate);
        }

        Integer slaCalendarMasterSid = (Integer) attributes.get(
                "slaCalendarMasterSid");

        if (slaCalendarMasterSid != null) {
            setSlaCalendarMasterSid(slaCalendarMasterSid);
        }

        String successMailSubject = (String) attributes.get(
                "successMailSubject");

        if (successMailSubject != null) {
            setSuccessMailSubject(successMailSubject);
        }

        Integer startHour3 = (Integer) attributes.get("startHour3");

        if (startHour3 != null) {
            setStartHour3(startHour3);
        }

        Integer startHour2 = (Integer) attributes.get("startHour2");

        if (startHour2 != null) {
            setStartHour2(startHour2);
        }

        Integer userSid = (Integer) attributes.get("userSid");

        if (userSid != null) {
            setUserSid(userSid);
        }

        Integer startHour1 = (Integer) attributes.get("startHour1");

        if (startHour1 != null) {
            setStartHour1(startHour1);
        }

        Integer processType = (Integer) attributes.get("processType");

        if (processType != null) {
            setProcessType(processType);
        }

        String scriptName = (String) attributes.get("scriptName");

        if (scriptName != null) {
            setScriptName(scriptName);
        }
    }

    @Override
    public int getStartHour() {
        return _startHour;
    }

    @Override
    public void setStartHour(int startHour) {
        _startHour = startHour;
    }

    @Override
    public String getFrequency() {
        if (_frequency == null) {
            return StringPool.BLANK;
        } else {
            return _frequency;
        }
    }

    @Override
    public void setFrequency(String frequency) {
        _frequency = frequency;
    }

    @Override
    public String getProcessName() {
        if (_processName == null) {
            return StringPool.BLANK;
        } else {
            return _processName;
        }
    }

    @Override
    public void setProcessName(String processName) {
        _processName = processName;
    }

    @Override
    public int getStartMinutes1() {
        return _startMinutes1;
    }

    @Override
    public void setStartMinutes1(int startMinutes1) {
        _startMinutes1 = startMinutes1;
    }

    @Override
    public Date getEndDate() {
        return _endDate;
    }

    @Override
    public void setEndDate(Date endDate) {
        _endDate = endDate;
    }

    @Override
    public String getEmailNotificationFailureCc() {
        if (_emailNotificationFailureCc == null) {
            return StringPool.BLANK;
        } else {
            return _emailNotificationFailureCc;
        }
    }

    @Override
    public void setEmailNotificationFailureCc(String emailNotificationFailureCc) {
        _emailNotificationFailureCc = emailNotificationFailureCc;
    }

    @Override
    public String getFailureMailSubject() {
        if (_failureMailSubject == null) {
            return StringPool.BLANK;
        } else {
            return _failureMailSubject;
        }
    }

    @Override
    public void setFailureMailSubject(String failureMailSubject) {
        _failureMailSubject = failureMailSubject;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getSchemaName() {
        if (_schemaName == null) {
            return StringPool.BLANK;
        } else {
            return _schemaName;
        }
    }

    @Override
    public void setSchemaName(String schemaName) {
        _schemaName = schemaName;
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public Date getScheduleLastRun() {
        return _scheduleLastRun;
    }

    @Override
    public void setScheduleLastRun(Date scheduleLastRun) {
        _scheduleLastRun = scheduleLastRun;
    }

    @Override
    public String getEmailNotificationSuccessTo() {
        if (_emailNotificationSuccessTo == null) {
            return StringPool.BLANK;
        } else {
            return _emailNotificationSuccessTo;
        }
    }

    @Override
    public void setEmailNotificationSuccessTo(String emailNotificationSuccessTo) {
        _emailNotificationSuccessTo = emailNotificationSuccessTo;
    }

    @Override
    public int getStartMinutes3() {
        return _startMinutes3;
    }

    @Override
    public void setStartMinutes3(int startMinutes3) {
        _startMinutes3 = startMinutes3;
    }

    @Override
    public int getStartMinutes2() {
        return _startMinutes2;
    }

    @Override
    public void setStartMinutes2(int startMinutes2) {
        _startMinutes2 = startMinutes2;
    }

    @Override
    public int getProcessSid() {
        return _processSid;
    }

    @Override
    public void setProcessSid(int processSid) {
        _processSid = processSid;
    }

    @Override
    public String getSuccessMailBody() {
        if (_successMailBody == null) {
            return StringPool.BLANK;
        } else {
            return _successMailBody;
        }
    }

    @Override
    public void setSuccessMailBody(String successMailBody) {
        _successMailBody = successMailBody;
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getEmailNotificationSuccessCc() {
        if (_emailNotificationSuccessCc == null) {
            return StringPool.BLANK;
        } else {
            return _emailNotificationSuccessCc;
        }
    }

    @Override
    public void setEmailNotificationSuccessCc(String emailNotificationSuccessCc) {
        _emailNotificationSuccessCc = emailNotificationSuccessCc;
    }

    @Override
    public String getEmailNotificationFailureTo() {
        if (_emailNotificationFailureTo == null) {
            return StringPool.BLANK;
        } else {
            return _emailNotificationFailureTo;
        }
    }

    @Override
    public void setEmailNotificationFailureTo(String emailNotificationFailureTo) {
        _emailNotificationFailureTo = emailNotificationFailureTo;
    }

    @Override
    public String getFailureMailBody() {
        if (_failureMailBody == null) {
            return StringPool.BLANK;
        } else {
            return _failureMailBody;
        }
    }

    @Override
    public void setFailureMailBody(String failureMailBody) {
        _failureMailBody = failureMailBody;
    }

    @Override
    public String getActiveFlag() {
        if (_activeFlag == null) {
            return StringPool.BLANK;
        } else {
            return _activeFlag;
        }
    }

    @Override
    public void setActiveFlag(String activeFlag) {
        _activeFlag = activeFlag;
    }

    @Override
    public String getProcessDisplayName() {
        if (_processDisplayName == null) {
            return StringPool.BLANK;
        } else {
            return _processDisplayName;
        }
    }

    @Override
    public void setProcessDisplayName(String processDisplayName) {
        _processDisplayName = processDisplayName;
    }

    @Override
    public int getStartMinutes() {
        return _startMinutes;
    }

    @Override
    public void setStartMinutes(int startMinutes) {
        _startMinutes = startMinutes;
    }

    @Override
    public Date getManualLastRun() {
        return _manualLastRun;
    }

    @Override
    public void setManualLastRun(Date manualLastRun) {
        _manualLastRun = manualLastRun;
    }

    @Override
    public Date getStartDate() {
        return _startDate;
    }

    @Override
    public void setStartDate(Date startDate) {
        _startDate = startDate;
    }

    @Override
    public int getSlaCalendarMasterSid() {
        return _slaCalendarMasterSid;
    }

    @Override
    public void setSlaCalendarMasterSid(int slaCalendarMasterSid) {
        _slaCalendarMasterSid = slaCalendarMasterSid;
    }

    @Override
    public String getSuccessMailSubject() {
        if (_successMailSubject == null) {
            return StringPool.BLANK;
        } else {
            return _successMailSubject;
        }
    }

    @Override
    public void setSuccessMailSubject(String successMailSubject) {
        _successMailSubject = successMailSubject;
    }

    @Override
    public int getStartHour3() {
        return _startHour3;
    }

    @Override
    public void setStartHour3(int startHour3) {
        _startHour3 = startHour3;
    }

    @Override
    public int getStartHour2() {
        return _startHour2;
    }

    @Override
    public void setStartHour2(int startHour2) {
        _startHour2 = startHour2;
    }

    @Override
    public int getUserSid() {
        return _userSid;
    }

    @Override
    public void setUserSid(int userSid) {
        _userSid = userSid;
    }

    @Override
    public int getStartHour1() {
        return _startHour1;
    }

    @Override
    public void setStartHour1(int startHour1) {
        _startHour1 = startHour1;
    }

    @Override
    public int getProcessType() {
        return _processType;
    }

    @Override
    public void setProcessType(int processType) {
        _processType = processType;
    }

    @Override
    public String getScriptName() {
        if (_scriptName == null) {
            return StringPool.BLANK;
        } else {
            return _scriptName;
        }
    }

    @Override
    public void setScriptName(String scriptName) {
        _scriptName = scriptName;
    }

    @Override
    public WorkflowProfile toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (WorkflowProfile) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        WorkflowProfileImpl workflowProfileImpl = new WorkflowProfileImpl();

        workflowProfileImpl.setStartHour(getStartHour());
        workflowProfileImpl.setFrequency(getFrequency());
        workflowProfileImpl.setProcessName(getProcessName());
        workflowProfileImpl.setStartMinutes1(getStartMinutes1());
        workflowProfileImpl.setEndDate(getEndDate());
        workflowProfileImpl.setEmailNotificationFailureCc(getEmailNotificationFailureCc());
        workflowProfileImpl.setFailureMailSubject(getFailureMailSubject());
        workflowProfileImpl.setModifiedDate(getModifiedDate());
        workflowProfileImpl.setSchemaName(getSchemaName());
        workflowProfileImpl.setCreatedBy(getCreatedBy());
        workflowProfileImpl.setCreatedDate(getCreatedDate());
        workflowProfileImpl.setScheduleLastRun(getScheduleLastRun());
        workflowProfileImpl.setEmailNotificationSuccessTo(getEmailNotificationSuccessTo());
        workflowProfileImpl.setStartMinutes3(getStartMinutes3());
        workflowProfileImpl.setStartMinutes2(getStartMinutes2());
        workflowProfileImpl.setProcessSid(getProcessSid());
        workflowProfileImpl.setSuccessMailBody(getSuccessMailBody());
        workflowProfileImpl.setInboundStatus(getInboundStatus());
        workflowProfileImpl.setModifiedBy(getModifiedBy());
        workflowProfileImpl.setEmailNotificationSuccessCc(getEmailNotificationSuccessCc());
        workflowProfileImpl.setEmailNotificationFailureTo(getEmailNotificationFailureTo());
        workflowProfileImpl.setFailureMailBody(getFailureMailBody());
        workflowProfileImpl.setActiveFlag(getActiveFlag());
        workflowProfileImpl.setProcessDisplayName(getProcessDisplayName());
        workflowProfileImpl.setStartMinutes(getStartMinutes());
        workflowProfileImpl.setManualLastRun(getManualLastRun());
        workflowProfileImpl.setStartDate(getStartDate());
        workflowProfileImpl.setSlaCalendarMasterSid(getSlaCalendarMasterSid());
        workflowProfileImpl.setSuccessMailSubject(getSuccessMailSubject());
        workflowProfileImpl.setStartHour3(getStartHour3());
        workflowProfileImpl.setStartHour2(getStartHour2());
        workflowProfileImpl.setUserSid(getUserSid());
        workflowProfileImpl.setStartHour1(getStartHour1());
        workflowProfileImpl.setProcessType(getProcessType());
        workflowProfileImpl.setScriptName(getScriptName());

        workflowProfileImpl.resetOriginalValues();

        return workflowProfileImpl;
    }

    @Override
    public int compareTo(WorkflowProfile workflowProfile) {
        int primaryKey = workflowProfile.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof WorkflowProfile)) {
            return false;
        }

        WorkflowProfile workflowProfile = (WorkflowProfile) obj;

        int primaryKey = workflowProfile.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<WorkflowProfile> toCacheModel() {
        WorkflowProfileCacheModel workflowProfileCacheModel = new WorkflowProfileCacheModel();

        workflowProfileCacheModel.startHour = getStartHour();

        workflowProfileCacheModel.frequency = getFrequency();

        String frequency = workflowProfileCacheModel.frequency;

        if ((frequency != null) && (frequency.length() == 0)) {
            workflowProfileCacheModel.frequency = null;
        }

        workflowProfileCacheModel.processName = getProcessName();

        String processName = workflowProfileCacheModel.processName;

        if ((processName != null) && (processName.length() == 0)) {
            workflowProfileCacheModel.processName = null;
        }

        workflowProfileCacheModel.startMinutes1 = getStartMinutes1();

        Date endDate = getEndDate();

        if (endDate != null) {
            workflowProfileCacheModel.endDate = endDate.getTime();
        } else {
            workflowProfileCacheModel.endDate = Long.MIN_VALUE;
        }

        workflowProfileCacheModel.emailNotificationFailureCc = getEmailNotificationFailureCc();

        String emailNotificationFailureCc = workflowProfileCacheModel.emailNotificationFailureCc;

        if ((emailNotificationFailureCc != null) &&
                (emailNotificationFailureCc.length() == 0)) {
            workflowProfileCacheModel.emailNotificationFailureCc = null;
        }

        workflowProfileCacheModel.failureMailSubject = getFailureMailSubject();

        String failureMailSubject = workflowProfileCacheModel.failureMailSubject;

        if ((failureMailSubject != null) && (failureMailSubject.length() == 0)) {
            workflowProfileCacheModel.failureMailSubject = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            workflowProfileCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            workflowProfileCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        workflowProfileCacheModel.schemaName = getSchemaName();

        String schemaName = workflowProfileCacheModel.schemaName;

        if ((schemaName != null) && (schemaName.length() == 0)) {
            workflowProfileCacheModel.schemaName = null;
        }

        workflowProfileCacheModel.createdBy = getCreatedBy();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            workflowProfileCacheModel.createdDate = createdDate.getTime();
        } else {
            workflowProfileCacheModel.createdDate = Long.MIN_VALUE;
        }

        Date scheduleLastRun = getScheduleLastRun();

        if (scheduleLastRun != null) {
            workflowProfileCacheModel.scheduleLastRun = scheduleLastRun.getTime();
        } else {
            workflowProfileCacheModel.scheduleLastRun = Long.MIN_VALUE;
        }

        workflowProfileCacheModel.emailNotificationSuccessTo = getEmailNotificationSuccessTo();

        String emailNotificationSuccessTo = workflowProfileCacheModel.emailNotificationSuccessTo;

        if ((emailNotificationSuccessTo != null) &&
                (emailNotificationSuccessTo.length() == 0)) {
            workflowProfileCacheModel.emailNotificationSuccessTo = null;
        }

        workflowProfileCacheModel.startMinutes3 = getStartMinutes3();

        workflowProfileCacheModel.startMinutes2 = getStartMinutes2();

        workflowProfileCacheModel.processSid = getProcessSid();

        workflowProfileCacheModel.successMailBody = getSuccessMailBody();

        String successMailBody = workflowProfileCacheModel.successMailBody;

        if ((successMailBody != null) && (successMailBody.length() == 0)) {
            workflowProfileCacheModel.successMailBody = null;
        }

        workflowProfileCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = workflowProfileCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            workflowProfileCacheModel.inboundStatus = null;
        }

        workflowProfileCacheModel.modifiedBy = getModifiedBy();

        workflowProfileCacheModel.emailNotificationSuccessCc = getEmailNotificationSuccessCc();

        String emailNotificationSuccessCc = workflowProfileCacheModel.emailNotificationSuccessCc;

        if ((emailNotificationSuccessCc != null) &&
                (emailNotificationSuccessCc.length() == 0)) {
            workflowProfileCacheModel.emailNotificationSuccessCc = null;
        }

        workflowProfileCacheModel.emailNotificationFailureTo = getEmailNotificationFailureTo();

        String emailNotificationFailureTo = workflowProfileCacheModel.emailNotificationFailureTo;

        if ((emailNotificationFailureTo != null) &&
                (emailNotificationFailureTo.length() == 0)) {
            workflowProfileCacheModel.emailNotificationFailureTo = null;
        }

        workflowProfileCacheModel.failureMailBody = getFailureMailBody();

        String failureMailBody = workflowProfileCacheModel.failureMailBody;

        if ((failureMailBody != null) && (failureMailBody.length() == 0)) {
            workflowProfileCacheModel.failureMailBody = null;
        }

        workflowProfileCacheModel.activeFlag = getActiveFlag();

        String activeFlag = workflowProfileCacheModel.activeFlag;

        if ((activeFlag != null) && (activeFlag.length() == 0)) {
            workflowProfileCacheModel.activeFlag = null;
        }

        workflowProfileCacheModel.processDisplayName = getProcessDisplayName();

        String processDisplayName = workflowProfileCacheModel.processDisplayName;

        if ((processDisplayName != null) && (processDisplayName.length() == 0)) {
            workflowProfileCacheModel.processDisplayName = null;
        }

        workflowProfileCacheModel.startMinutes = getStartMinutes();

        Date manualLastRun = getManualLastRun();

        if (manualLastRun != null) {
            workflowProfileCacheModel.manualLastRun = manualLastRun.getTime();
        } else {
            workflowProfileCacheModel.manualLastRun = Long.MIN_VALUE;
        }

        Date startDate = getStartDate();

        if (startDate != null) {
            workflowProfileCacheModel.startDate = startDate.getTime();
        } else {
            workflowProfileCacheModel.startDate = Long.MIN_VALUE;
        }

        workflowProfileCacheModel.slaCalendarMasterSid = getSlaCalendarMasterSid();

        workflowProfileCacheModel.successMailSubject = getSuccessMailSubject();

        String successMailSubject = workflowProfileCacheModel.successMailSubject;

        if ((successMailSubject != null) && (successMailSubject.length() == 0)) {
            workflowProfileCacheModel.successMailSubject = null;
        }

        workflowProfileCacheModel.startHour3 = getStartHour3();

        workflowProfileCacheModel.startHour2 = getStartHour2();

        workflowProfileCacheModel.userSid = getUserSid();

        workflowProfileCacheModel.startHour1 = getStartHour1();

        workflowProfileCacheModel.processType = getProcessType();

        workflowProfileCacheModel.scriptName = getScriptName();

        String scriptName = workflowProfileCacheModel.scriptName;

        if ((scriptName != null) && (scriptName.length() == 0)) {
            workflowProfileCacheModel.scriptName = null;
        }

        return workflowProfileCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(71);

        sb.append("{startHour=");
        sb.append(getStartHour());
        sb.append(", frequency=");
        sb.append(getFrequency());
        sb.append(", processName=");
        sb.append(getProcessName());
        sb.append(", startMinutes1=");
        sb.append(getStartMinutes1());
        sb.append(", endDate=");
        sb.append(getEndDate());
        sb.append(", emailNotificationFailureCc=");
        sb.append(getEmailNotificationFailureCc());
        sb.append(", failureMailSubject=");
        sb.append(getFailureMailSubject());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", schemaName=");
        sb.append(getSchemaName());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", scheduleLastRun=");
        sb.append(getScheduleLastRun());
        sb.append(", emailNotificationSuccessTo=");
        sb.append(getEmailNotificationSuccessTo());
        sb.append(", startMinutes3=");
        sb.append(getStartMinutes3());
        sb.append(", startMinutes2=");
        sb.append(getStartMinutes2());
        sb.append(", processSid=");
        sb.append(getProcessSid());
        sb.append(", successMailBody=");
        sb.append(getSuccessMailBody());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", emailNotificationSuccessCc=");
        sb.append(getEmailNotificationSuccessCc());
        sb.append(", emailNotificationFailureTo=");
        sb.append(getEmailNotificationFailureTo());
        sb.append(", failureMailBody=");
        sb.append(getFailureMailBody());
        sb.append(", activeFlag=");
        sb.append(getActiveFlag());
        sb.append(", processDisplayName=");
        sb.append(getProcessDisplayName());
        sb.append(", startMinutes=");
        sb.append(getStartMinutes());
        sb.append(", manualLastRun=");
        sb.append(getManualLastRun());
        sb.append(", startDate=");
        sb.append(getStartDate());
        sb.append(", slaCalendarMasterSid=");
        sb.append(getSlaCalendarMasterSid());
        sb.append(", successMailSubject=");
        sb.append(getSuccessMailSubject());
        sb.append(", startHour3=");
        sb.append(getStartHour3());
        sb.append(", startHour2=");
        sb.append(getStartHour2());
        sb.append(", userSid=");
        sb.append(getUserSid());
        sb.append(", startHour1=");
        sb.append(getStartHour1());
        sb.append(", processType=");
        sb.append(getProcessType());
        sb.append(", scriptName=");
        sb.append(getScriptName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(109);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.WorkflowProfile");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>startHour</column-name><column-value><![CDATA[");
        sb.append(getStartHour());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>frequency</column-name><column-value><![CDATA[");
        sb.append(getFrequency());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>processName</column-name><column-value><![CDATA[");
        sb.append(getProcessName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startMinutes1</column-name><column-value><![CDATA[");
        sb.append(getStartMinutes1());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>endDate</column-name><column-value><![CDATA[");
        sb.append(getEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailNotificationFailureCc</column-name><column-value><![CDATA[");
        sb.append(getEmailNotificationFailureCc());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>failureMailSubject</column-name><column-value><![CDATA[");
        sb.append(getFailureMailSubject());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>schemaName</column-name><column-value><![CDATA[");
        sb.append(getSchemaName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>scheduleLastRun</column-name><column-value><![CDATA[");
        sb.append(getScheduleLastRun());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailNotificationSuccessTo</column-name><column-value><![CDATA[");
        sb.append(getEmailNotificationSuccessTo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startMinutes3</column-name><column-value><![CDATA[");
        sb.append(getStartMinutes3());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startMinutes2</column-name><column-value><![CDATA[");
        sb.append(getStartMinutes2());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>processSid</column-name><column-value><![CDATA[");
        sb.append(getProcessSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>successMailBody</column-name><column-value><![CDATA[");
        sb.append(getSuccessMailBody());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailNotificationSuccessCc</column-name><column-value><![CDATA[");
        sb.append(getEmailNotificationSuccessCc());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailNotificationFailureTo</column-name><column-value><![CDATA[");
        sb.append(getEmailNotificationFailureTo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>failureMailBody</column-name><column-value><![CDATA[");
        sb.append(getFailureMailBody());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>activeFlag</column-name><column-value><![CDATA[");
        sb.append(getActiveFlag());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>processDisplayName</column-name><column-value><![CDATA[");
        sb.append(getProcessDisplayName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startMinutes</column-name><column-value><![CDATA[");
        sb.append(getStartMinutes());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>manualLastRun</column-name><column-value><![CDATA[");
        sb.append(getManualLastRun());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startDate</column-name><column-value><![CDATA[");
        sb.append(getStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>slaCalendarMasterSid</column-name><column-value><![CDATA[");
        sb.append(getSlaCalendarMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>successMailSubject</column-name><column-value><![CDATA[");
        sb.append(getSuccessMailSubject());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startHour3</column-name><column-value><![CDATA[");
        sb.append(getStartHour3());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startHour2</column-name><column-value><![CDATA[");
        sb.append(getStartHour2());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userSid</column-name><column-value><![CDATA[");
        sb.append(getUserSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startHour1</column-name><column-value><![CDATA[");
        sb.append(getStartHour1());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>processType</column-name><column-value><![CDATA[");
        sb.append(getProcessType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>scriptName</column-name><column-value><![CDATA[");
        sb.append(getScriptName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
