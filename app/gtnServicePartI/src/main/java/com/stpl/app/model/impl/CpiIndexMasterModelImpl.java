package com.stpl.app.model.impl;

import com.stpl.app.model.CpiIndexMaster;
import com.stpl.app.model.CpiIndexMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CpiIndexMaster service. Represents a row in the &quot;CPI_INDEX_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.CpiIndexMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CpiIndexMasterImpl}.
 * </p>
 *
 * @author
 * @see CpiIndexMasterImpl
 * @see com.stpl.app.model.CpiIndexMaster
 * @see com.stpl.app.model.CpiIndexMasterModel
 * @generated
 */
public class CpiIndexMasterModelImpl extends BaseModelImpl<CpiIndexMaster>
    implements CpiIndexMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a cpi index master model instance should use the {@link com.stpl.app.model.CpiIndexMaster} interface instead.
     */
    public static final String TABLE_NAME = "CPI_INDEX_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "EFFECTIVE_DATE", Types.TIMESTAMP },
            { "CREATED_BY", Types.INTEGER },
            { "MODIFIED_BY", Types.INTEGER },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "CPI_INDEX_MASTER_SID", Types.INTEGER },
            { "BATCH_ID", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "STATUS", Types.VARCHAR },
            { "INDEX_TYPE", Types.VARCHAR },
            { "INDEX_ID", Types.VARCHAR },
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "INDEX_VALUE", Types.VARCHAR },
            { "SOURCE", Types.VARCHAR },
            { "INBOUND_STATUS", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table CPI_INDEX_MASTER (EFFECTIVE_DATE DATE null,CREATED_BY INTEGER,MODIFIED_BY INTEGER,CREATED_DATE DATE null,CPI_INDEX_MASTER_SID INTEGER not null primary key IDENTITY,BATCH_ID VARCHAR(75) null,MODIFIED_DATE DATE null,STATUS VARCHAR(75) null,INDEX_TYPE VARCHAR(75) null,INDEX_ID VARCHAR(75) null,RECORD_LOCK_STATUS BOOLEAN,INDEX_VALUE VARCHAR(75) null,SOURCE VARCHAR(75) null,INBOUND_STATUS VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table CPI_INDEX_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY cpiIndexMaster.cpiIndexMasterSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY CPI_INDEX_MASTER.CPI_INDEX_MASTER_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.CpiIndexMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.CpiIndexMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stpl.app.model.CpiIndexMaster"),
            true);
    public static long EFFECTIVEDATE_COLUMN_BITMASK = 1L;
    public static long INDEXID_COLUMN_BITMASK = 2L;
    public static long INDEXTYPE_COLUMN_BITMASK = 4L;
    public static long INDEXVALUE_COLUMN_BITMASK = 8L;
    public static long STATUS_COLUMN_BITMASK = 16L;
    public static long CPIINDEXMASTERSID_COLUMN_BITMASK = 32L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.CpiIndexMaster"));
    private static ClassLoader _classLoader = CpiIndexMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            CpiIndexMaster.class
        };
    private Date _effectiveDate;
    private Date _originalEffectiveDate;
    private int _createdBy;
    private int _modifiedBy;
    private Date _createdDate;
    private int _cpiIndexMasterSid;
    private String _batchId;
    private Date _modifiedDate;
    private String _status;
    private String _originalStatus;
    private String _indexType;
    private String _originalIndexType;
    private String _indexId;
    private String _originalIndexId;
    private boolean _recordLockStatus;
    private String _indexValue;
    private String _originalIndexValue;
    private String _source;
    private String _inboundStatus;
    private long _columnBitmask;
    private CpiIndexMaster _escapedModel;

    public CpiIndexMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _cpiIndexMasterSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setCpiIndexMasterSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _cpiIndexMasterSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return CpiIndexMaster.class;
    }

    @Override
    public String getModelClassName() {
        return CpiIndexMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("effectiveDate", getEffectiveDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("cpiIndexMasterSid", getCpiIndexMasterSid());
        attributes.put("batchId", getBatchId());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("status", getStatus());
        attributes.put("indexType", getIndexType());
        attributes.put("indexId", getIndexId());
        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("indexValue", getIndexValue());
        attributes.put("source", getSource());
        attributes.put("inboundStatus", getInboundStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Date effectiveDate = (Date) attributes.get("effectiveDate");

        if (effectiveDate != null) {
            setEffectiveDate(effectiveDate);
        }

        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Integer cpiIndexMasterSid = (Integer) attributes.get(
                "cpiIndexMasterSid");

        if (cpiIndexMasterSid != null) {
            setCpiIndexMasterSid(cpiIndexMasterSid);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        String indexType = (String) attributes.get("indexType");

        if (indexType != null) {
            setIndexType(indexType);
        }

        String indexId = (String) attributes.get("indexId");

        if (indexId != null) {
            setIndexId(indexId);
        }

        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        String indexValue = (String) attributes.get("indexValue");

        if (indexValue != null) {
            setIndexValue(indexValue);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }
    }

    @Override
    public Date getEffectiveDate() {
        return _effectiveDate;
    }

    @Override
    public void setEffectiveDate(Date effectiveDate) {
        _columnBitmask |= EFFECTIVEDATE_COLUMN_BITMASK;

        if (_originalEffectiveDate == null) {
            _originalEffectiveDate = _effectiveDate;
        }

        _effectiveDate = effectiveDate;
    }

    public Date getOriginalEffectiveDate() {
        return _originalEffectiveDate;
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public int getCpiIndexMasterSid() {
        return _cpiIndexMasterSid;
    }

    @Override
    public void setCpiIndexMasterSid(int cpiIndexMasterSid) {
        _cpiIndexMasterSid = cpiIndexMasterSid;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _columnBitmask |= STATUS_COLUMN_BITMASK;

        if (_originalStatus == null) {
            _originalStatus = _status;
        }

        _status = status;
    }

    public String getOriginalStatus() {
        return GetterUtil.getString(_originalStatus);
    }

    @Override
    public String getIndexType() {
        if (_indexType == null) {
            return StringPool.BLANK;
        } else {
            return _indexType;
        }
    }

    @Override
    public void setIndexType(String indexType) {
        _columnBitmask |= INDEXTYPE_COLUMN_BITMASK;

        if (_originalIndexType == null) {
            _originalIndexType = _indexType;
        }

        _indexType = indexType;
    }

    public String getOriginalIndexType() {
        return GetterUtil.getString(_originalIndexType);
    }

    @Override
    public String getIndexId() {
        if (_indexId == null) {
            return StringPool.BLANK;
        } else {
            return _indexId;
        }
    }

    @Override
    public void setIndexId(String indexId) {
        _columnBitmask |= INDEXID_COLUMN_BITMASK;

        if (_originalIndexId == null) {
            _originalIndexId = _indexId;
        }

        _indexId = indexId;
    }

    public String getOriginalIndexId() {
        return GetterUtil.getString(_originalIndexId);
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public String getIndexValue() {
        if (_indexValue == null) {
            return StringPool.BLANK;
        } else {
            return _indexValue;
        }
    }

    @Override
    public void setIndexValue(String indexValue) {
        _columnBitmask |= INDEXVALUE_COLUMN_BITMASK;

        if (_originalIndexValue == null) {
            _originalIndexValue = _indexValue;
        }

        _indexValue = indexValue;
    }

    public String getOriginalIndexValue() {
        return GetterUtil.getString(_originalIndexValue);
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public CpiIndexMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (CpiIndexMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CpiIndexMasterImpl cpiIndexMasterImpl = new CpiIndexMasterImpl();

        cpiIndexMasterImpl.setEffectiveDate(getEffectiveDate());
        cpiIndexMasterImpl.setCreatedBy(getCreatedBy());
        cpiIndexMasterImpl.setModifiedBy(getModifiedBy());
        cpiIndexMasterImpl.setCreatedDate(getCreatedDate());
        cpiIndexMasterImpl.setCpiIndexMasterSid(getCpiIndexMasterSid());
        cpiIndexMasterImpl.setBatchId(getBatchId());
        cpiIndexMasterImpl.setModifiedDate(getModifiedDate());
        cpiIndexMasterImpl.setStatus(getStatus());
        cpiIndexMasterImpl.setIndexType(getIndexType());
        cpiIndexMasterImpl.setIndexId(getIndexId());
        cpiIndexMasterImpl.setRecordLockStatus(getRecordLockStatus());
        cpiIndexMasterImpl.setIndexValue(getIndexValue());
        cpiIndexMasterImpl.setSource(getSource());
        cpiIndexMasterImpl.setInboundStatus(getInboundStatus());

        cpiIndexMasterImpl.resetOriginalValues();

        return cpiIndexMasterImpl;
    }

    @Override
    public int compareTo(CpiIndexMaster cpiIndexMaster) {
        int primaryKey = cpiIndexMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof CpiIndexMaster)) {
            return false;
        }

        CpiIndexMaster cpiIndexMaster = (CpiIndexMaster) obj;

        int primaryKey = cpiIndexMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        CpiIndexMasterModelImpl cpiIndexMasterModelImpl = this;

        cpiIndexMasterModelImpl._originalEffectiveDate = cpiIndexMasterModelImpl._effectiveDate;

        cpiIndexMasterModelImpl._originalStatus = cpiIndexMasterModelImpl._status;

        cpiIndexMasterModelImpl._originalIndexType = cpiIndexMasterModelImpl._indexType;

        cpiIndexMasterModelImpl._originalIndexId = cpiIndexMasterModelImpl._indexId;

        cpiIndexMasterModelImpl._originalIndexValue = cpiIndexMasterModelImpl._indexValue;

        cpiIndexMasterModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<CpiIndexMaster> toCacheModel() {
        CpiIndexMasterCacheModel cpiIndexMasterCacheModel = new CpiIndexMasterCacheModel();

        Date effectiveDate = getEffectiveDate();

        if (effectiveDate != null) {
            cpiIndexMasterCacheModel.effectiveDate = effectiveDate.getTime();
        } else {
            cpiIndexMasterCacheModel.effectiveDate = Long.MIN_VALUE;
        }

        cpiIndexMasterCacheModel.createdBy = getCreatedBy();

        cpiIndexMasterCacheModel.modifiedBy = getModifiedBy();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            cpiIndexMasterCacheModel.createdDate = createdDate.getTime();
        } else {
            cpiIndexMasterCacheModel.createdDate = Long.MIN_VALUE;
        }

        cpiIndexMasterCacheModel.cpiIndexMasterSid = getCpiIndexMasterSid();

        cpiIndexMasterCacheModel.batchId = getBatchId();

        String batchId = cpiIndexMasterCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            cpiIndexMasterCacheModel.batchId = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            cpiIndexMasterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            cpiIndexMasterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        cpiIndexMasterCacheModel.status = getStatus();

        String status = cpiIndexMasterCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            cpiIndexMasterCacheModel.status = null;
        }

        cpiIndexMasterCacheModel.indexType = getIndexType();

        String indexType = cpiIndexMasterCacheModel.indexType;

        if ((indexType != null) && (indexType.length() == 0)) {
            cpiIndexMasterCacheModel.indexType = null;
        }

        cpiIndexMasterCacheModel.indexId = getIndexId();

        String indexId = cpiIndexMasterCacheModel.indexId;

        if ((indexId != null) && (indexId.length() == 0)) {
            cpiIndexMasterCacheModel.indexId = null;
        }

        cpiIndexMasterCacheModel.recordLockStatus = getRecordLockStatus();

        cpiIndexMasterCacheModel.indexValue = getIndexValue();

        String indexValue = cpiIndexMasterCacheModel.indexValue;

        if ((indexValue != null) && (indexValue.length() == 0)) {
            cpiIndexMasterCacheModel.indexValue = null;
        }

        cpiIndexMasterCacheModel.source = getSource();

        String source = cpiIndexMasterCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            cpiIndexMasterCacheModel.source = null;
        }

        cpiIndexMasterCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = cpiIndexMasterCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            cpiIndexMasterCacheModel.inboundStatus = null;
        }

        return cpiIndexMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(29);

        sb.append("{effectiveDate=");
        sb.append(getEffectiveDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", cpiIndexMasterSid=");
        sb.append(getCpiIndexMasterSid());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", indexType=");
        sb.append(getIndexType());
        sb.append(", indexId=");
        sb.append(getIndexId());
        sb.append(", recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", indexValue=");
        sb.append(getIndexValue());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(46);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.CpiIndexMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>effectiveDate</column-name><column-value><![CDATA[");
        sb.append(getEffectiveDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cpiIndexMasterSid</column-name><column-value><![CDATA[");
        sb.append(getCpiIndexMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>indexType</column-name><column-value><![CDATA[");
        sb.append(getIndexType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>indexId</column-name><column-value><![CDATA[");
        sb.append(getIndexId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>indexValue</column-name><column-value><![CDATA[");
        sb.append(getIndexValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
