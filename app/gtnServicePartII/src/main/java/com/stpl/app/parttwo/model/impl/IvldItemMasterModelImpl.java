package com.stpl.app.parttwo.model.impl;

import com.stpl.app.parttwo.model.IvldItemMaster;
import com.stpl.app.parttwo.model.IvldItemMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the IvldItemMaster service. Represents a row in the &quot;IVLD_ITEM_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.parttwo.model.IvldItemMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IvldItemMasterImpl}.
 * </p>
 *
 * @author
 * @see IvldItemMasterImpl
 * @see com.stpl.app.parttwo.model.IvldItemMaster
 * @see com.stpl.app.parttwo.model.IvldItemMasterModel
 * @generated
 */
public class IvldItemMasterModelImpl extends BaseModelImpl<IvldItemMaster>
    implements IvldItemMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ivld item master model instance should use the {@link com.stpl.app.parttwo.model.IvldItemMaster} interface instead.
     */
    public static final String TABLE_NAME = "IVLD_ITEM_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "ITEM_NO", Types.VARCHAR },
            { "UDC6", Types.VARCHAR },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "NEW_FORMULATION_INDICATOR", Types.VARCHAR },
            { "UDC5", Types.VARCHAR },
            { "NEW_FORMULATION_END_DATE", Types.VARCHAR },
            { "UDC4", Types.VARCHAR },
            { "CLOTTING_FACTOR_START_DATE", Types.VARCHAR },
            { "SECONDARY_UOM", Types.VARCHAR },
            { "ITEM_DESC", Types.VARCHAR },
            { "AUTHORIZED_GENERIC_END_DATE", Types.VARCHAR },
            { "MANUFACTURER_NAME", Types.VARCHAR },
            { "ITEM_NAME", Types.VARCHAR },
            { "REPROCESSED_FLAG", Types.VARCHAR },
            { "STATUS", Types.VARCHAR },
            { "BASE_CPI", Types.VARCHAR },
            { "BASELINE_AMP", Types.VARCHAR },
            { "AUTHORIZED_GENERIC", Types.VARCHAR },
            { "THERAPEUTIC_CLASS", Types.VARCHAR },
            { "ITEM_FAMILY_ID", Types.VARCHAR },
            { "PEDIATRIC_EXCLUSIVE_START_DATE", Types.VARCHAR },
            { "CREATED_BY", Types.VARCHAR },
            { "PRIMARY_UOM", Types.VARCHAR },
            { "NDC9", Types.VARCHAR },
            { "ITEM_ID", Types.VARCHAR },
            { "LAST_LOT_EXPIRATION_DATE", Types.VARCHAR },
            { "ERROR_FIELD", Types.VARCHAR },
            { "ITEM_CODE", Types.VARCHAR },
            { "STRENGTH", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "BRAND", Types.VARCHAR },
            { "NDC8", Types.VARCHAR },
            { "LABELER_CODE", Types.VARCHAR },
            { "UDC3", Types.VARCHAR },
            { "SOURCE", Types.VARCHAR },
            { "UDC2", Types.VARCHAR },
            { "ADD_CHG_DEL_INDICATOR", Types.VARCHAR },
            { "UDC1", Types.VARCHAR },
            { "ACQUIRED_AMP", Types.VARCHAR },
            { "DISCONTINUATION_DATE", Types.VARCHAR },
            { "ITEM_MASTER_INTFID", Types.VARCHAR },
            { "INTF_INSERTED_DATE", Types.TIMESTAMP },
            { "DIVESTITURE_DATE", Types.VARCHAR },
            { "MODIFIED_BY", Types.VARCHAR },
            { "BASE_CPI_PERIOD", Types.VARCHAR },
            { "CLOTTING_FACTOR_END_DATE", Types.VARCHAR },
            { "DOSES_PER_UNIT", Types.VARCHAR },
            { "MANUFACTURER_ID", Types.VARCHAR },
            { "CLOTTING_FACTOR_INDICATOR", Types.VARCHAR },
            { "BATCH_ID", Types.VARCHAR },
            { "ACQUISITION_DATE", Types.VARCHAR },
            { "DUAL_PRICING_INDICATOR", Types.VARCHAR },
            { "NON_FEDERAL_EXPIRATION_DATE", Types.VARCHAR },
            { "ERROR_CODE", Types.VARCHAR },
            { "NEW_FORMULATION", Types.VARCHAR },
            { "OBRA_BAMP", Types.VARCHAR },
            { "BRAND_ID", Types.VARCHAR },
            { "ITEM_STATUS", Types.VARCHAR },
            { "AUTHORIZED_GENERIC_START_DATE", Types.VARCHAR },
            { "NEW_FORMULATION_START_DATE", Types.VARCHAR },
            { "ITEM_CATEGORY", Types.VARCHAR },
            { "ITEM_END_DATE", Types.VARCHAR },
            { "ITEM_TYPE", Types.VARCHAR },
            { "PEDIATRIC_EXCLUSIVE_END_DATE", Types.VARCHAR },
            { "ORGANIZATION_KEY", Types.VARCHAR },
            { "FIRST_SALE_DATE", Types.VARCHAR },
            { "SHELF_LIFE_TYPE", Types.VARCHAR },
            { "ITEM_START_DATE", Types.VARCHAR },
            { "ITEM_TYPE_INDICATION", Types.VARCHAR },
            { "ACQUIRED_BAMP", Types.VARCHAR },
            { "FORM", Types.VARCHAR },
            { "ITEM_CLASS", Types.VARCHAR },
            { "MANUFACTURER_NO", Types.VARCHAR },
            { "PEDIATRIC_EXCLUSIVE_INDICATOR", Types.VARCHAR },
            { "PACKAGE_SIZE_CODE", Types.VARCHAR },
            { "DISPLAY_BRAND", Types.VARCHAR },
            { "DRA", Types.VARCHAR },
            { "REASON_FOR_FAILURE", Types.VARCHAR },
            { "PACKAGE_SIZE_INTRO_DATE", Types.VARCHAR },
            { "UPPS", Types.VARCHAR },
            { "IVLD_ITEM_MASTER_SID", Types.INTEGER },
            { "PACKAGE_SIZE", Types.VARCHAR },
            { "SHELF_LIFE", Types.VARCHAR },
            { "MARKET_TERMINATION_DATE", Types.VARCHAR },
            { "CHECK_RECORD", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table IVLD_ITEM_MASTER (ITEM_NO VARCHAR(75) null,UDC6 VARCHAR(75) null,CREATED_DATE DATE null,NEW_FORMULATION_INDICATOR VARCHAR(75) null,UDC5 VARCHAR(75) null,NEW_FORMULATION_END_DATE VARCHAR(75) null,UDC4 VARCHAR(75) null,CLOTTING_FACTOR_START_DATE VARCHAR(75) null,SECONDARY_UOM VARCHAR(75) null,ITEM_DESC VARCHAR(75) null,AUTHORIZED_GENERIC_END_DATE VARCHAR(75) null,MANUFACTURER_NAME VARCHAR(75) null,ITEM_NAME VARCHAR(75) null,REPROCESSED_FLAG VARCHAR(75) null,STATUS VARCHAR(75) null,BASE_CPI VARCHAR(75) null,BASELINE_AMP VARCHAR(75) null,AUTHORIZED_GENERIC VARCHAR(75) null,THERAPEUTIC_CLASS VARCHAR(75) null,ITEM_FAMILY_ID VARCHAR(75) null,PEDIATRIC_EXCLUSIVE_START_DATE VARCHAR(75) null,CREATED_BY VARCHAR(75) null,PRIMARY_UOM VARCHAR(75) null,NDC9 VARCHAR(75) null,ITEM_ID VARCHAR(75) null,LAST_LOT_EXPIRATION_DATE VARCHAR(75) null,ERROR_FIELD VARCHAR(75) null,ITEM_CODE VARCHAR(75) null,STRENGTH VARCHAR(75) null,MODIFIED_DATE DATE null,BRAND VARCHAR(75) null,NDC8 VARCHAR(75) null,LABELER_CODE VARCHAR(75) null,UDC3 VARCHAR(75) null,SOURCE VARCHAR(75) null,UDC2 VARCHAR(75) null,ADD_CHG_DEL_INDICATOR VARCHAR(75) null,UDC1 VARCHAR(75) null,ACQUIRED_AMP VARCHAR(75) null,DISCONTINUATION_DATE VARCHAR(75) null,ITEM_MASTER_INTFID VARCHAR(75) null,INTF_INSERTED_DATE DATE null,DIVESTITURE_DATE VARCHAR(75) null,MODIFIED_BY VARCHAR(75) null,BASE_CPI_PERIOD VARCHAR(75) null,CLOTTING_FACTOR_END_DATE VARCHAR(75) null,DOSES_PER_UNIT VARCHAR(75) null,MANUFACTURER_ID VARCHAR(75) null,CLOTTING_FACTOR_INDICATOR VARCHAR(75) null,BATCH_ID VARCHAR(75) null,ACQUISITION_DATE VARCHAR(75) null,DUAL_PRICING_INDICATOR VARCHAR(75) null,NON_FEDERAL_EXPIRATION_DATE VARCHAR(75) null,ERROR_CODE VARCHAR(75) null,NEW_FORMULATION VARCHAR(75) null,OBRA_BAMP VARCHAR(75) null,BRAND_ID VARCHAR(75) null,ITEM_STATUS VARCHAR(75) null,AUTHORIZED_GENERIC_START_DATE VARCHAR(75) null,NEW_FORMULATION_START_DATE VARCHAR(75) null,ITEM_CATEGORY VARCHAR(75) null,ITEM_END_DATE VARCHAR(75) null,ITEM_TYPE VARCHAR(75) null,PEDIATRIC_EXCLUSIVE_END_DATE VARCHAR(75) null,ORGANIZATION_KEY VARCHAR(75) null,FIRST_SALE_DATE VARCHAR(75) null,SHELF_LIFE_TYPE VARCHAR(75) null,ITEM_START_DATE VARCHAR(75) null,ITEM_TYPE_INDICATION VARCHAR(75) null,ACQUIRED_BAMP VARCHAR(75) null,FORM VARCHAR(75) null,ITEM_CLASS VARCHAR(75) null,MANUFACTURER_NO VARCHAR(75) null,PEDIATRIC_EXCLUSIVE_INDICATOR VARCHAR(75) null,PACKAGE_SIZE_CODE VARCHAR(75) null,DISPLAY_BRAND VARCHAR(75) null,DRA VARCHAR(75) null,REASON_FOR_FAILURE VARCHAR(75) null,PACKAGE_SIZE_INTRO_DATE VARCHAR(75) null,UPPS VARCHAR(75) null,IVLD_ITEM_MASTER_SID INTEGER not null primary key IDENTITY,PACKAGE_SIZE VARCHAR(75) null,SHELF_LIFE VARCHAR(75) null,MARKET_TERMINATION_DATE VARCHAR(75) null,CHECK_RECORD BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table IVLD_ITEM_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY ivldItemMaster.ivldItemMasterSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY IVLD_ITEM_MASTER.IVLD_ITEM_MASTER_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.parttwo.model.IvldItemMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.parttwo.model.IvldItemMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.parttwo.model.IvldItemMaster"));
    private static ClassLoader _classLoader = IvldItemMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            IvldItemMaster.class
        };
    private String _itemNo;
    private String _udc6;
    private Date _createdDate;
    private String _newFormulationIndicator;
    private String _udc5;
    private String _newFormulationEndDate;
    private String _udc4;
    private String _clottingFactorStartDate;
    private String _secondaryUom;
    private String _itemDesc;
    private String _authorizedGenericEndDate;
    private String _manufacturerName;
    private String _itemName;
    private String _reprocessedFlag;
    private String _status;
    private String _baseCpi;
    private String _baselineAmp;
    private String _authorizedGeneric;
    private String _therapeuticClass;
    private String _itemFamilyId;
    private String _pediatricExclusiveStartDate;
    private String _createdBy;
    private String _primaryUom;
    private String _ndc9;
    private String _itemId;
    private String _lastLotExpirationDate;
    private String _errorField;
    private String _itemCode;
    private String _strength;
    private Date _modifiedDate;
    private String _brand;
    private String _ndc8;
    private String _labelerCode;
    private String _udc3;
    private String _source;
    private String _udc2;
    private String _addChgDelIndicator;
    private String _udc1;
    private String _acquiredAmp;
    private String _discontinuationDate;
    private String _itemMasterIntfid;
    private Date _intfInsertedDate;
    private String _divestitureDate;
    private String _modifiedBy;
    private String _baseCpiPeriod;
    private String _clottingFactorEndDate;
    private String _dosesPerUnit;
    private String _manufacturerId;
    private String _clottingFactorIndicator;
    private String _batchId;
    private String _acquisitionDate;
    private String _dualPricingIndicator;
    private String _nonFederalExpirationDate;
    private String _errorCode;
    private String _newFormulation;
    private String _obraBamp;
    private String _brandId;
    private String _itemStatus;
    private String _authorizedGenericStartDate;
    private String _newFormulationStartDate;
    private String _itemCategory;
    private String _itemEndDate;
    private String _itemType;
    private String _pediatricExclusiveEndDate;
    private String _organizationKey;
    private String _firstSaleDate;
    private String _shelfLifeType;
    private String _itemStartDate;
    private String _itemTypeIndication;
    private String _acquiredBamp;
    private String _form;
    private String _itemClass;
    private String _manufacturerNo;
    private String _pediatricExclusiveIndicator;
    private String _packageSizeCode;
    private String _displayBrand;
    private String _dra;
    private String _reasonForFailure;
    private String _packageSizeIntroDate;
    private String _upps;
    private int _ivldItemMasterSid;
    private String _packageSize;
    private String _shelfLife;
    private String _marketTerminationDate;
    private boolean _checkRecord;
    private IvldItemMaster _escapedModel;

    public IvldItemMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _ivldItemMasterSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setIvldItemMasterSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _ivldItemMasterSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return IvldItemMaster.class;
    }

    @Override
    public String getModelClassName() {
        return IvldItemMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("itemNo", getItemNo());
        attributes.put("udc6", getUdc6());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("newFormulationIndicator", getNewFormulationIndicator());
        attributes.put("udc5", getUdc5());
        attributes.put("newFormulationEndDate", getNewFormulationEndDate());
        attributes.put("udc4", getUdc4());
        attributes.put("clottingFactorStartDate", getClottingFactorStartDate());
        attributes.put("secondaryUom", getSecondaryUom());
        attributes.put("itemDesc", getItemDesc());
        attributes.put("authorizedGenericEndDate", getAuthorizedGenericEndDate());
        attributes.put("manufacturerName", getManufacturerName());
        attributes.put("itemName", getItemName());
        attributes.put("reprocessedFlag", getReprocessedFlag());
        attributes.put("status", getStatus());
        attributes.put("baseCpi", getBaseCpi());
        attributes.put("baselineAmp", getBaselineAmp());
        attributes.put("authorizedGeneric", getAuthorizedGeneric());
        attributes.put("therapeuticClass", getTherapeuticClass());
        attributes.put("itemFamilyId", getItemFamilyId());
        attributes.put("pediatricExclusiveStartDate",
            getPediatricExclusiveStartDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("primaryUom", getPrimaryUom());
        attributes.put("ndc9", getNdc9());
        attributes.put("itemId", getItemId());
        attributes.put("lastLotExpirationDate", getLastLotExpirationDate());
        attributes.put("errorField", getErrorField());
        attributes.put("itemCode", getItemCode());
        attributes.put("strength", getStrength());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("brand", getBrand());
        attributes.put("ndc8", getNdc8());
        attributes.put("labelerCode", getLabelerCode());
        attributes.put("udc3", getUdc3());
        attributes.put("source", getSource());
        attributes.put("udc2", getUdc2());
        attributes.put("addChgDelIndicator", getAddChgDelIndicator());
        attributes.put("udc1", getUdc1());
        attributes.put("acquiredAmp", getAcquiredAmp());
        attributes.put("discontinuationDate", getDiscontinuationDate());
        attributes.put("itemMasterIntfid", getItemMasterIntfid());
        attributes.put("intfInsertedDate", getIntfInsertedDate());
        attributes.put("divestitureDate", getDivestitureDate());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("baseCpiPeriod", getBaseCpiPeriod());
        attributes.put("clottingFactorEndDate", getClottingFactorEndDate());
        attributes.put("dosesPerUnit", getDosesPerUnit());
        attributes.put("manufacturerId", getManufacturerId());
        attributes.put("clottingFactorIndicator", getClottingFactorIndicator());
        attributes.put("batchId", getBatchId());
        attributes.put("acquisitionDate", getAcquisitionDate());
        attributes.put("dualPricingIndicator", getDualPricingIndicator());
        attributes.put("nonFederalExpirationDate", getNonFederalExpirationDate());
        attributes.put("errorCode", getErrorCode());
        attributes.put("newFormulation", getNewFormulation());
        attributes.put("obraBamp", getObraBamp());
        attributes.put("brandId", getBrandId());
        attributes.put("itemStatus", getItemStatus());
        attributes.put("authorizedGenericStartDate",
            getAuthorizedGenericStartDate());
        attributes.put("newFormulationStartDate", getNewFormulationStartDate());
        attributes.put("itemCategory", getItemCategory());
        attributes.put("itemEndDate", getItemEndDate());
        attributes.put("itemType", getItemType());
        attributes.put("pediatricExclusiveEndDate",
            getPediatricExclusiveEndDate());
        attributes.put("organizationKey", getOrganizationKey());
        attributes.put("firstSaleDate", getFirstSaleDate());
        attributes.put("shelfLifeType", getShelfLifeType());
        attributes.put("itemStartDate", getItemStartDate());
        attributes.put("itemTypeIndication", getItemTypeIndication());
        attributes.put("acquiredBamp", getAcquiredBamp());
        attributes.put("form", getForm());
        attributes.put("itemClass", getItemClass());
        attributes.put("manufacturerNo", getManufacturerNo());
        attributes.put("pediatricExclusiveIndicator",
            getPediatricExclusiveIndicator());
        attributes.put("packageSizeCode", getPackageSizeCode());
        attributes.put("displayBrand", getDisplayBrand());
        attributes.put("dra", getDra());
        attributes.put("reasonForFailure", getReasonForFailure());
        attributes.put("packageSizeIntroDate", getPackageSizeIntroDate());
        attributes.put("upps", getUpps());
        attributes.put("ivldItemMasterSid", getIvldItemMasterSid());
        attributes.put("packageSize", getPackageSize());
        attributes.put("shelfLife", getShelfLife());
        attributes.put("marketTerminationDate", getMarketTerminationDate());
        attributes.put("checkRecord", getCheckRecord());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String itemNo = (String) attributes.get("itemNo");

        if (itemNo != null) {
            setItemNo(itemNo);
        }

        String udc6 = (String) attributes.get("udc6");

        if (udc6 != null) {
            setUdc6(udc6);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String newFormulationIndicator = (String) attributes.get(
                "newFormulationIndicator");

        if (newFormulationIndicator != null) {
            setNewFormulationIndicator(newFormulationIndicator);
        }

        String udc5 = (String) attributes.get("udc5");

        if (udc5 != null) {
            setUdc5(udc5);
        }

        String newFormulationEndDate = (String) attributes.get(
                "newFormulationEndDate");

        if (newFormulationEndDate != null) {
            setNewFormulationEndDate(newFormulationEndDate);
        }

        String udc4 = (String) attributes.get("udc4");

        if (udc4 != null) {
            setUdc4(udc4);
        }

        String clottingFactorStartDate = (String) attributes.get(
                "clottingFactorStartDate");

        if (clottingFactorStartDate != null) {
            setClottingFactorStartDate(clottingFactorStartDate);
        }

        String secondaryUom = (String) attributes.get("secondaryUom");

        if (secondaryUom != null) {
            setSecondaryUom(secondaryUom);
        }

        String itemDesc = (String) attributes.get("itemDesc");

        if (itemDesc != null) {
            setItemDesc(itemDesc);
        }

        String authorizedGenericEndDate = (String) attributes.get(
                "authorizedGenericEndDate");

        if (authorizedGenericEndDate != null) {
            setAuthorizedGenericEndDate(authorizedGenericEndDate);
        }

        String manufacturerName = (String) attributes.get("manufacturerName");

        if (manufacturerName != null) {
            setManufacturerName(manufacturerName);
        }

        String itemName = (String) attributes.get("itemName");

        if (itemName != null) {
            setItemName(itemName);
        }

        String reprocessedFlag = (String) attributes.get("reprocessedFlag");

        if (reprocessedFlag != null) {
            setReprocessedFlag(reprocessedFlag);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        String baseCpi = (String) attributes.get("baseCpi");

        if (baseCpi != null) {
            setBaseCpi(baseCpi);
        }

        String baselineAmp = (String) attributes.get("baselineAmp");

        if (baselineAmp != null) {
            setBaselineAmp(baselineAmp);
        }

        String authorizedGeneric = (String) attributes.get("authorizedGeneric");

        if (authorizedGeneric != null) {
            setAuthorizedGeneric(authorizedGeneric);
        }

        String therapeuticClass = (String) attributes.get("therapeuticClass");

        if (therapeuticClass != null) {
            setTherapeuticClass(therapeuticClass);
        }

        String itemFamilyId = (String) attributes.get("itemFamilyId");

        if (itemFamilyId != null) {
            setItemFamilyId(itemFamilyId);
        }

        String pediatricExclusiveStartDate = (String) attributes.get(
                "pediatricExclusiveStartDate");

        if (pediatricExclusiveStartDate != null) {
            setPediatricExclusiveStartDate(pediatricExclusiveStartDate);
        }

        String createdBy = (String) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        String primaryUom = (String) attributes.get("primaryUom");

        if (primaryUom != null) {
            setPrimaryUom(primaryUom);
        }

        String ndc9 = (String) attributes.get("ndc9");

        if (ndc9 != null) {
            setNdc9(ndc9);
        }

        String itemId = (String) attributes.get("itemId");

        if (itemId != null) {
            setItemId(itemId);
        }

        String lastLotExpirationDate = (String) attributes.get(
                "lastLotExpirationDate");

        if (lastLotExpirationDate != null) {
            setLastLotExpirationDate(lastLotExpirationDate);
        }

        String errorField = (String) attributes.get("errorField");

        if (errorField != null) {
            setErrorField(errorField);
        }

        String itemCode = (String) attributes.get("itemCode");

        if (itemCode != null) {
            setItemCode(itemCode);
        }

        String strength = (String) attributes.get("strength");

        if (strength != null) {
            setStrength(strength);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String brand = (String) attributes.get("brand");

        if (brand != null) {
            setBrand(brand);
        }

        String ndc8 = (String) attributes.get("ndc8");

        if (ndc8 != null) {
            setNdc8(ndc8);
        }

        String labelerCode = (String) attributes.get("labelerCode");

        if (labelerCode != null) {
            setLabelerCode(labelerCode);
        }

        String udc3 = (String) attributes.get("udc3");

        if (udc3 != null) {
            setUdc3(udc3);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String udc2 = (String) attributes.get("udc2");

        if (udc2 != null) {
            setUdc2(udc2);
        }

        String addChgDelIndicator = (String) attributes.get(
                "addChgDelIndicator");

        if (addChgDelIndicator != null) {
            setAddChgDelIndicator(addChgDelIndicator);
        }

        String udc1 = (String) attributes.get("udc1");

        if (udc1 != null) {
            setUdc1(udc1);
        }

        String acquiredAmp = (String) attributes.get("acquiredAmp");

        if (acquiredAmp != null) {
            setAcquiredAmp(acquiredAmp);
        }

        String discontinuationDate = (String) attributes.get(
                "discontinuationDate");

        if (discontinuationDate != null) {
            setDiscontinuationDate(discontinuationDate);
        }

        String itemMasterIntfid = (String) attributes.get("itemMasterIntfid");

        if (itemMasterIntfid != null) {
            setItemMasterIntfid(itemMasterIntfid);
        }

        Date intfInsertedDate = (Date) attributes.get("intfInsertedDate");

        if (intfInsertedDate != null) {
            setIntfInsertedDate(intfInsertedDate);
        }

        String divestitureDate = (String) attributes.get("divestitureDate");

        if (divestitureDate != null) {
            setDivestitureDate(divestitureDate);
        }

        String modifiedBy = (String) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String baseCpiPeriod = (String) attributes.get("baseCpiPeriod");

        if (baseCpiPeriod != null) {
            setBaseCpiPeriod(baseCpiPeriod);
        }

        String clottingFactorEndDate = (String) attributes.get(
                "clottingFactorEndDate");

        if (clottingFactorEndDate != null) {
            setClottingFactorEndDate(clottingFactorEndDate);
        }

        String dosesPerUnit = (String) attributes.get("dosesPerUnit");

        if (dosesPerUnit != null) {
            setDosesPerUnit(dosesPerUnit);
        }

        String manufacturerId = (String) attributes.get("manufacturerId");

        if (manufacturerId != null) {
            setManufacturerId(manufacturerId);
        }

        String clottingFactorIndicator = (String) attributes.get(
                "clottingFactorIndicator");

        if (clottingFactorIndicator != null) {
            setClottingFactorIndicator(clottingFactorIndicator);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        String acquisitionDate = (String) attributes.get("acquisitionDate");

        if (acquisitionDate != null) {
            setAcquisitionDate(acquisitionDate);
        }

        String dualPricingIndicator = (String) attributes.get(
                "dualPricingIndicator");

        if (dualPricingIndicator != null) {
            setDualPricingIndicator(dualPricingIndicator);
        }

        String nonFederalExpirationDate = (String) attributes.get(
                "nonFederalExpirationDate");

        if (nonFederalExpirationDate != null) {
            setNonFederalExpirationDate(nonFederalExpirationDate);
        }

        String errorCode = (String) attributes.get("errorCode");

        if (errorCode != null) {
            setErrorCode(errorCode);
        }

        String newFormulation = (String) attributes.get("newFormulation");

        if (newFormulation != null) {
            setNewFormulation(newFormulation);
        }

        String obraBamp = (String) attributes.get("obraBamp");

        if (obraBamp != null) {
            setObraBamp(obraBamp);
        }

        String brandId = (String) attributes.get("brandId");

        if (brandId != null) {
            setBrandId(brandId);
        }

        String itemStatus = (String) attributes.get("itemStatus");

        if (itemStatus != null) {
            setItemStatus(itemStatus);
        }

        String authorizedGenericStartDate = (String) attributes.get(
                "authorizedGenericStartDate");

        if (authorizedGenericStartDate != null) {
            setAuthorizedGenericStartDate(authorizedGenericStartDate);
        }

        String newFormulationStartDate = (String) attributes.get(
                "newFormulationStartDate");

        if (newFormulationStartDate != null) {
            setNewFormulationStartDate(newFormulationStartDate);
        }

        String itemCategory = (String) attributes.get("itemCategory");

        if (itemCategory != null) {
            setItemCategory(itemCategory);
        }

        String itemEndDate = (String) attributes.get("itemEndDate");

        if (itemEndDate != null) {
            setItemEndDate(itemEndDate);
        }

        String itemType = (String) attributes.get("itemType");

        if (itemType != null) {
            setItemType(itemType);
        }

        String pediatricExclusiveEndDate = (String) attributes.get(
                "pediatricExclusiveEndDate");

        if (pediatricExclusiveEndDate != null) {
            setPediatricExclusiveEndDate(pediatricExclusiveEndDate);
        }

        String organizationKey = (String) attributes.get("organizationKey");

        if (organizationKey != null) {
            setOrganizationKey(organizationKey);
        }

        String firstSaleDate = (String) attributes.get("firstSaleDate");

        if (firstSaleDate != null) {
            setFirstSaleDate(firstSaleDate);
        }

        String shelfLifeType = (String) attributes.get("shelfLifeType");

        if (shelfLifeType != null) {
            setShelfLifeType(shelfLifeType);
        }

        String itemStartDate = (String) attributes.get("itemStartDate");

        if (itemStartDate != null) {
            setItemStartDate(itemStartDate);
        }

        String itemTypeIndication = (String) attributes.get(
                "itemTypeIndication");

        if (itemTypeIndication != null) {
            setItemTypeIndication(itemTypeIndication);
        }

        String acquiredBamp = (String) attributes.get("acquiredBamp");

        if (acquiredBamp != null) {
            setAcquiredBamp(acquiredBamp);
        }

        String form = (String) attributes.get("form");

        if (form != null) {
            setForm(form);
        }

        String itemClass = (String) attributes.get("itemClass");

        if (itemClass != null) {
            setItemClass(itemClass);
        }

        String manufacturerNo = (String) attributes.get("manufacturerNo");

        if (manufacturerNo != null) {
            setManufacturerNo(manufacturerNo);
        }

        String pediatricExclusiveIndicator = (String) attributes.get(
                "pediatricExclusiveIndicator");

        if (pediatricExclusiveIndicator != null) {
            setPediatricExclusiveIndicator(pediatricExclusiveIndicator);
        }

        String packageSizeCode = (String) attributes.get("packageSizeCode");

        if (packageSizeCode != null) {
            setPackageSizeCode(packageSizeCode);
        }

        String displayBrand = (String) attributes.get("displayBrand");

        if (displayBrand != null) {
            setDisplayBrand(displayBrand);
        }

        String dra = (String) attributes.get("dra");

        if (dra != null) {
            setDra(dra);
        }

        String reasonForFailure = (String) attributes.get("reasonForFailure");

        if (reasonForFailure != null) {
            setReasonForFailure(reasonForFailure);
        }

        String packageSizeIntroDate = (String) attributes.get(
                "packageSizeIntroDate");

        if (packageSizeIntroDate != null) {
            setPackageSizeIntroDate(packageSizeIntroDate);
        }

        String upps = (String) attributes.get("upps");

        if (upps != null) {
            setUpps(upps);
        }

        Integer ivldItemMasterSid = (Integer) attributes.get(
                "ivldItemMasterSid");

        if (ivldItemMasterSid != null) {
            setIvldItemMasterSid(ivldItemMasterSid);
        }

        String packageSize = (String) attributes.get("packageSize");

        if (packageSize != null) {
            setPackageSize(packageSize);
        }

        String shelfLife = (String) attributes.get("shelfLife");

        if (shelfLife != null) {
            setShelfLife(shelfLife);
        }

        String marketTerminationDate = (String) attributes.get(
                "marketTerminationDate");

        if (marketTerminationDate != null) {
            setMarketTerminationDate(marketTerminationDate);
        }

        Boolean checkRecord = (Boolean) attributes.get("checkRecord");

        if (checkRecord != null) {
            setCheckRecord(checkRecord);
        }
    }

    @Override
    public String getItemNo() {
        if (_itemNo == null) {
            return StringPool.BLANK;
        } else {
            return _itemNo;
        }
    }

    @Override
    public void setItemNo(String itemNo) {
        _itemNo = itemNo;
    }

    @Override
    public String getUdc6() {
        if (_udc6 == null) {
            return StringPool.BLANK;
        } else {
            return _udc6;
        }
    }

    @Override
    public void setUdc6(String udc6) {
        _udc6 = udc6;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getNewFormulationIndicator() {
        if (_newFormulationIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _newFormulationIndicator;
        }
    }

    @Override
    public void setNewFormulationIndicator(String newFormulationIndicator) {
        _newFormulationIndicator = newFormulationIndicator;
    }

    @Override
    public String getUdc5() {
        if (_udc5 == null) {
            return StringPool.BLANK;
        } else {
            return _udc5;
        }
    }

    @Override
    public void setUdc5(String udc5) {
        _udc5 = udc5;
    }

    @Override
    public String getNewFormulationEndDate() {
        if (_newFormulationEndDate == null) {
            return StringPool.BLANK;
        } else {
            return _newFormulationEndDate;
        }
    }

    @Override
    public void setNewFormulationEndDate(String newFormulationEndDate) {
        _newFormulationEndDate = newFormulationEndDate;
    }

    @Override
    public String getUdc4() {
        if (_udc4 == null) {
            return StringPool.BLANK;
        } else {
            return _udc4;
        }
    }

    @Override
    public void setUdc4(String udc4) {
        _udc4 = udc4;
    }

    @Override
    public String getClottingFactorStartDate() {
        if (_clottingFactorStartDate == null) {
            return StringPool.BLANK;
        } else {
            return _clottingFactorStartDate;
        }
    }

    @Override
    public void setClottingFactorStartDate(String clottingFactorStartDate) {
        _clottingFactorStartDate = clottingFactorStartDate;
    }

    @Override
    public String getSecondaryUom() {
        if (_secondaryUom == null) {
            return StringPool.BLANK;
        } else {
            return _secondaryUom;
        }
    }

    @Override
    public void setSecondaryUom(String secondaryUom) {
        _secondaryUom = secondaryUom;
    }

    @Override
    public String getItemDesc() {
        if (_itemDesc == null) {
            return StringPool.BLANK;
        } else {
            return _itemDesc;
        }
    }

    @Override
    public void setItemDesc(String itemDesc) {
        _itemDesc = itemDesc;
    }

    @Override
    public String getAuthorizedGenericEndDate() {
        if (_authorizedGenericEndDate == null) {
            return StringPool.BLANK;
        } else {
            return _authorizedGenericEndDate;
        }
    }

    @Override
    public void setAuthorizedGenericEndDate(String authorizedGenericEndDate) {
        _authorizedGenericEndDate = authorizedGenericEndDate;
    }

    @Override
    public String getManufacturerName() {
        if (_manufacturerName == null) {
            return StringPool.BLANK;
        } else {
            return _manufacturerName;
        }
    }

    @Override
    public void setManufacturerName(String manufacturerName) {
        _manufacturerName = manufacturerName;
    }

    @Override
    public String getItemName() {
        if (_itemName == null) {
            return StringPool.BLANK;
        } else {
            return _itemName;
        }
    }

    @Override
    public void setItemName(String itemName) {
        _itemName = itemName;
    }

    @Override
    public String getReprocessedFlag() {
        if (_reprocessedFlag == null) {
            return StringPool.BLANK;
        } else {
            return _reprocessedFlag;
        }
    }

    @Override
    public void setReprocessedFlag(String reprocessedFlag) {
        _reprocessedFlag = reprocessedFlag;
    }

    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _status = status;
    }

    @Override
    public String getBaseCpi() {
        if (_baseCpi == null) {
            return StringPool.BLANK;
        } else {
            return _baseCpi;
        }
    }

    @Override
    public void setBaseCpi(String baseCpi) {
        _baseCpi = baseCpi;
    }

    @Override
    public String getBaselineAmp() {
        if (_baselineAmp == null) {
            return StringPool.BLANK;
        } else {
            return _baselineAmp;
        }
    }

    @Override
    public void setBaselineAmp(String baselineAmp) {
        _baselineAmp = baselineAmp;
    }

    @Override
    public String getAuthorizedGeneric() {
        if (_authorizedGeneric == null) {
            return StringPool.BLANK;
        } else {
            return _authorizedGeneric;
        }
    }

    @Override
    public void setAuthorizedGeneric(String authorizedGeneric) {
        _authorizedGeneric = authorizedGeneric;
    }

    @Override
    public String getTherapeuticClass() {
        if (_therapeuticClass == null) {
            return StringPool.BLANK;
        } else {
            return _therapeuticClass;
        }
    }

    @Override
    public void setTherapeuticClass(String therapeuticClass) {
        _therapeuticClass = therapeuticClass;
    }

    @Override
    public String getItemFamilyId() {
        if (_itemFamilyId == null) {
            return StringPool.BLANK;
        } else {
            return _itemFamilyId;
        }
    }

    @Override
    public void setItemFamilyId(String itemFamilyId) {
        _itemFamilyId = itemFamilyId;
    }

    @Override
    public String getPediatricExclusiveStartDate() {
        if (_pediatricExclusiveStartDate == null) {
            return StringPool.BLANK;
        } else {
            return _pediatricExclusiveStartDate;
        }
    }

    @Override
    public void setPediatricExclusiveStartDate(
        String pediatricExclusiveStartDate) {
        _pediatricExclusiveStartDate = pediatricExclusiveStartDate;
    }

    @Override
    public String getCreatedBy() {
        if (_createdBy == null) {
            return StringPool.BLANK;
        } else {
            return _createdBy;
        }
    }

    @Override
    public void setCreatedBy(String createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public String getPrimaryUom() {
        if (_primaryUom == null) {
            return StringPool.BLANK;
        } else {
            return _primaryUom;
        }
    }

    @Override
    public void setPrimaryUom(String primaryUom) {
        _primaryUom = primaryUom;
    }

    @Override
    public String getNdc9() {
        if (_ndc9 == null) {
            return StringPool.BLANK;
        } else {
            return _ndc9;
        }
    }

    @Override
    public void setNdc9(String ndc9) {
        _ndc9 = ndc9;
    }

    @Override
    public String getItemId() {
        if (_itemId == null) {
            return StringPool.BLANK;
        } else {
            return _itemId;
        }
    }

    @Override
    public void setItemId(String itemId) {
        _itemId = itemId;
    }

    @Override
    public String getLastLotExpirationDate() {
        if (_lastLotExpirationDate == null) {
            return StringPool.BLANK;
        } else {
            return _lastLotExpirationDate;
        }
    }

    @Override
    public void setLastLotExpirationDate(String lastLotExpirationDate) {
        _lastLotExpirationDate = lastLotExpirationDate;
    }

    @Override
    public String getErrorField() {
        if (_errorField == null) {
            return StringPool.BLANK;
        } else {
            return _errorField;
        }
    }

    @Override
    public void setErrorField(String errorField) {
        _errorField = errorField;
    }

    @Override
    public String getItemCode() {
        if (_itemCode == null) {
            return StringPool.BLANK;
        } else {
            return _itemCode;
        }
    }

    @Override
    public void setItemCode(String itemCode) {
        _itemCode = itemCode;
    }

    @Override
    public String getStrength() {
        if (_strength == null) {
            return StringPool.BLANK;
        } else {
            return _strength;
        }
    }

    @Override
    public void setStrength(String strength) {
        _strength = strength;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getBrand() {
        if (_brand == null) {
            return StringPool.BLANK;
        } else {
            return _brand;
        }
    }

    @Override
    public void setBrand(String brand) {
        _brand = brand;
    }

    @Override
    public String getNdc8() {
        if (_ndc8 == null) {
            return StringPool.BLANK;
        } else {
            return _ndc8;
        }
    }

    @Override
    public void setNdc8(String ndc8) {
        _ndc8 = ndc8;
    }

    @Override
    public String getLabelerCode() {
        if (_labelerCode == null) {
            return StringPool.BLANK;
        } else {
            return _labelerCode;
        }
    }

    @Override
    public void setLabelerCode(String labelerCode) {
        _labelerCode = labelerCode;
    }

    @Override
    public String getUdc3() {
        if (_udc3 == null) {
            return StringPool.BLANK;
        } else {
            return _udc3;
        }
    }

    @Override
    public void setUdc3(String udc3) {
        _udc3 = udc3;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getUdc2() {
        if (_udc2 == null) {
            return StringPool.BLANK;
        } else {
            return _udc2;
        }
    }

    @Override
    public void setUdc2(String udc2) {
        _udc2 = udc2;
    }

    @Override
    public String getAddChgDelIndicator() {
        if (_addChgDelIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _addChgDelIndicator;
        }
    }

    @Override
    public void setAddChgDelIndicator(String addChgDelIndicator) {
        _addChgDelIndicator = addChgDelIndicator;
    }

    @Override
    public String getUdc1() {
        if (_udc1 == null) {
            return StringPool.BLANK;
        } else {
            return _udc1;
        }
    }

    @Override
    public void setUdc1(String udc1) {
        _udc1 = udc1;
    }

    @Override
    public String getAcquiredAmp() {
        if (_acquiredAmp == null) {
            return StringPool.BLANK;
        } else {
            return _acquiredAmp;
        }
    }

    @Override
    public void setAcquiredAmp(String acquiredAmp) {
        _acquiredAmp = acquiredAmp;
    }

    @Override
    public String getDiscontinuationDate() {
        if (_discontinuationDate == null) {
            return StringPool.BLANK;
        } else {
            return _discontinuationDate;
        }
    }

    @Override
    public void setDiscontinuationDate(String discontinuationDate) {
        _discontinuationDate = discontinuationDate;
    }

    @Override
    public String getItemMasterIntfid() {
        if (_itemMasterIntfid == null) {
            return StringPool.BLANK;
        } else {
            return _itemMasterIntfid;
        }
    }

    @Override
    public void setItemMasterIntfid(String itemMasterIntfid) {
        _itemMasterIntfid = itemMasterIntfid;
    }

    @Override
    public Date getIntfInsertedDate() {
        return _intfInsertedDate;
    }

    @Override
    public void setIntfInsertedDate(Date intfInsertedDate) {
        _intfInsertedDate = intfInsertedDate;
    }

    @Override
    public String getDivestitureDate() {
        if (_divestitureDate == null) {
            return StringPool.BLANK;
        } else {
            return _divestitureDate;
        }
    }

    @Override
    public void setDivestitureDate(String divestitureDate) {
        _divestitureDate = divestitureDate;
    }

    @Override
    public String getModifiedBy() {
        if (_modifiedBy == null) {
            return StringPool.BLANK;
        } else {
            return _modifiedBy;
        }
    }

    @Override
    public void setModifiedBy(String modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getBaseCpiPeriod() {
        if (_baseCpiPeriod == null) {
            return StringPool.BLANK;
        } else {
            return _baseCpiPeriod;
        }
    }

    @Override
    public void setBaseCpiPeriod(String baseCpiPeriod) {
        _baseCpiPeriod = baseCpiPeriod;
    }

    @Override
    public String getClottingFactorEndDate() {
        if (_clottingFactorEndDate == null) {
            return StringPool.BLANK;
        } else {
            return _clottingFactorEndDate;
        }
    }

    @Override
    public void setClottingFactorEndDate(String clottingFactorEndDate) {
        _clottingFactorEndDate = clottingFactorEndDate;
    }

    @Override
    public String getDosesPerUnit() {
        if (_dosesPerUnit == null) {
            return StringPool.BLANK;
        } else {
            return _dosesPerUnit;
        }
    }

    @Override
    public void setDosesPerUnit(String dosesPerUnit) {
        _dosesPerUnit = dosesPerUnit;
    }

    @Override
    public String getManufacturerId() {
        if (_manufacturerId == null) {
            return StringPool.BLANK;
        } else {
            return _manufacturerId;
        }
    }

    @Override
    public void setManufacturerId(String manufacturerId) {
        _manufacturerId = manufacturerId;
    }

    @Override
    public String getClottingFactorIndicator() {
        if (_clottingFactorIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _clottingFactorIndicator;
        }
    }

    @Override
    public void setClottingFactorIndicator(String clottingFactorIndicator) {
        _clottingFactorIndicator = clottingFactorIndicator;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public String getAcquisitionDate() {
        if (_acquisitionDate == null) {
            return StringPool.BLANK;
        } else {
            return _acquisitionDate;
        }
    }

    @Override
    public void setAcquisitionDate(String acquisitionDate) {
        _acquisitionDate = acquisitionDate;
    }

    @Override
    public String getDualPricingIndicator() {
        if (_dualPricingIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _dualPricingIndicator;
        }
    }

    @Override
    public void setDualPricingIndicator(String dualPricingIndicator) {
        _dualPricingIndicator = dualPricingIndicator;
    }

    @Override
    public String getNonFederalExpirationDate() {
        if (_nonFederalExpirationDate == null) {
            return StringPool.BLANK;
        } else {
            return _nonFederalExpirationDate;
        }
    }

    @Override
    public void setNonFederalExpirationDate(String nonFederalExpirationDate) {
        _nonFederalExpirationDate = nonFederalExpirationDate;
    }

    @Override
    public String getErrorCode() {
        if (_errorCode == null) {
            return StringPool.BLANK;
        } else {
            return _errorCode;
        }
    }

    @Override
    public void setErrorCode(String errorCode) {
        _errorCode = errorCode;
    }

    @Override
    public String getNewFormulation() {
        if (_newFormulation == null) {
            return StringPool.BLANK;
        } else {
            return _newFormulation;
        }
    }

    @Override
    public void setNewFormulation(String newFormulation) {
        _newFormulation = newFormulation;
    }

    @Override
    public String getObraBamp() {
        if (_obraBamp == null) {
            return StringPool.BLANK;
        } else {
            return _obraBamp;
        }
    }

    @Override
    public void setObraBamp(String obraBamp) {
        _obraBamp = obraBamp;
    }

    @Override
    public String getBrandId() {
        if (_brandId == null) {
            return StringPool.BLANK;
        } else {
            return _brandId;
        }
    }

    @Override
    public void setBrandId(String brandId) {
        _brandId = brandId;
    }

    @Override
    public String getItemStatus() {
        if (_itemStatus == null) {
            return StringPool.BLANK;
        } else {
            return _itemStatus;
        }
    }

    @Override
    public void setItemStatus(String itemStatus) {
        _itemStatus = itemStatus;
    }

    @Override
    public String getAuthorizedGenericStartDate() {
        if (_authorizedGenericStartDate == null) {
            return StringPool.BLANK;
        } else {
            return _authorizedGenericStartDate;
        }
    }

    @Override
    public void setAuthorizedGenericStartDate(String authorizedGenericStartDate) {
        _authorizedGenericStartDate = authorizedGenericStartDate;
    }

    @Override
    public String getNewFormulationStartDate() {
        if (_newFormulationStartDate == null) {
            return StringPool.BLANK;
        } else {
            return _newFormulationStartDate;
        }
    }

    @Override
    public void setNewFormulationStartDate(String newFormulationStartDate) {
        _newFormulationStartDate = newFormulationStartDate;
    }

    @Override
    public String getItemCategory() {
        if (_itemCategory == null) {
            return StringPool.BLANK;
        } else {
            return _itemCategory;
        }
    }

    @Override
    public void setItemCategory(String itemCategory) {
        _itemCategory = itemCategory;
    }

    @Override
    public String getItemEndDate() {
        if (_itemEndDate == null) {
            return StringPool.BLANK;
        } else {
            return _itemEndDate;
        }
    }

    @Override
    public void setItemEndDate(String itemEndDate) {
        _itemEndDate = itemEndDate;
    }

    @Override
    public String getItemType() {
        if (_itemType == null) {
            return StringPool.BLANK;
        } else {
            return _itemType;
        }
    }

    @Override
    public void setItemType(String itemType) {
        _itemType = itemType;
    }

    @Override
    public String getPediatricExclusiveEndDate() {
        if (_pediatricExclusiveEndDate == null) {
            return StringPool.BLANK;
        } else {
            return _pediatricExclusiveEndDate;
        }
    }

    @Override
    public void setPediatricExclusiveEndDate(String pediatricExclusiveEndDate) {
        _pediatricExclusiveEndDate = pediatricExclusiveEndDate;
    }

    @Override
    public String getOrganizationKey() {
        if (_organizationKey == null) {
            return StringPool.BLANK;
        } else {
            return _organizationKey;
        }
    }

    @Override
    public void setOrganizationKey(String organizationKey) {
        _organizationKey = organizationKey;
    }

    @Override
    public String getFirstSaleDate() {
        if (_firstSaleDate == null) {
            return StringPool.BLANK;
        } else {
            return _firstSaleDate;
        }
    }

    @Override
    public void setFirstSaleDate(String firstSaleDate) {
        _firstSaleDate = firstSaleDate;
    }

    @Override
    public String getShelfLifeType() {
        if (_shelfLifeType == null) {
            return StringPool.BLANK;
        } else {
            return _shelfLifeType;
        }
    }

    @Override
    public void setShelfLifeType(String shelfLifeType) {
        _shelfLifeType = shelfLifeType;
    }

    @Override
    public String getItemStartDate() {
        if (_itemStartDate == null) {
            return StringPool.BLANK;
        } else {
            return _itemStartDate;
        }
    }

    @Override
    public void setItemStartDate(String itemStartDate) {
        _itemStartDate = itemStartDate;
    }

    @Override
    public String getItemTypeIndication() {
        if (_itemTypeIndication == null) {
            return StringPool.BLANK;
        } else {
            return _itemTypeIndication;
        }
    }

    @Override
    public void setItemTypeIndication(String itemTypeIndication) {
        _itemTypeIndication = itemTypeIndication;
    }

    @Override
    public String getAcquiredBamp() {
        if (_acquiredBamp == null) {
            return StringPool.BLANK;
        } else {
            return _acquiredBamp;
        }
    }

    @Override
    public void setAcquiredBamp(String acquiredBamp) {
        _acquiredBamp = acquiredBamp;
    }

    @Override
    public String getForm() {
        if (_form == null) {
            return StringPool.BLANK;
        } else {
            return _form;
        }
    }

    @Override
    public void setForm(String form) {
        _form = form;
    }

    @Override
    public String getItemClass() {
        if (_itemClass == null) {
            return StringPool.BLANK;
        } else {
            return _itemClass;
        }
    }

    @Override
    public void setItemClass(String itemClass) {
        _itemClass = itemClass;
    }

    @Override
    public String getManufacturerNo() {
        if (_manufacturerNo == null) {
            return StringPool.BLANK;
        } else {
            return _manufacturerNo;
        }
    }

    @Override
    public void setManufacturerNo(String manufacturerNo) {
        _manufacturerNo = manufacturerNo;
    }

    @Override
    public String getPediatricExclusiveIndicator() {
        if (_pediatricExclusiveIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _pediatricExclusiveIndicator;
        }
    }

    @Override
    public void setPediatricExclusiveIndicator(
        String pediatricExclusiveIndicator) {
        _pediatricExclusiveIndicator = pediatricExclusiveIndicator;
    }

    @Override
    public String getPackageSizeCode() {
        if (_packageSizeCode == null) {
            return StringPool.BLANK;
        } else {
            return _packageSizeCode;
        }
    }

    @Override
    public void setPackageSizeCode(String packageSizeCode) {
        _packageSizeCode = packageSizeCode;
    }

    @Override
    public String getDisplayBrand() {
        if (_displayBrand == null) {
            return StringPool.BLANK;
        } else {
            return _displayBrand;
        }
    }

    @Override
    public void setDisplayBrand(String displayBrand) {
        _displayBrand = displayBrand;
    }

    @Override
    public String getDra() {
        if (_dra == null) {
            return StringPool.BLANK;
        } else {
            return _dra;
        }
    }

    @Override
    public void setDra(String dra) {
        _dra = dra;
    }

    @Override
    public String getReasonForFailure() {
        if (_reasonForFailure == null) {
            return StringPool.BLANK;
        } else {
            return _reasonForFailure;
        }
    }

    @Override
    public void setReasonForFailure(String reasonForFailure) {
        _reasonForFailure = reasonForFailure;
    }

    @Override
    public String getPackageSizeIntroDate() {
        if (_packageSizeIntroDate == null) {
            return StringPool.BLANK;
        } else {
            return _packageSizeIntroDate;
        }
    }

    @Override
    public void setPackageSizeIntroDate(String packageSizeIntroDate) {
        _packageSizeIntroDate = packageSizeIntroDate;
    }

    @Override
    public String getUpps() {
        if (_upps == null) {
            return StringPool.BLANK;
        } else {
            return _upps;
        }
    }

    @Override
    public void setUpps(String upps) {
        _upps = upps;
    }

    @Override
    public int getIvldItemMasterSid() {
        return _ivldItemMasterSid;
    }

    @Override
    public void setIvldItemMasterSid(int ivldItemMasterSid) {
        _ivldItemMasterSid = ivldItemMasterSid;
    }

    @Override
    public String getPackageSize() {
        if (_packageSize == null) {
            return StringPool.BLANK;
        } else {
            return _packageSize;
        }
    }

    @Override
    public void setPackageSize(String packageSize) {
        _packageSize = packageSize;
    }

    @Override
    public String getShelfLife() {
        if (_shelfLife == null) {
            return StringPool.BLANK;
        } else {
            return _shelfLife;
        }
    }

    @Override
    public void setShelfLife(String shelfLife) {
        _shelfLife = shelfLife;
    }

    @Override
    public String getMarketTerminationDate() {
        if (_marketTerminationDate == null) {
            return StringPool.BLANK;
        } else {
            return _marketTerminationDate;
        }
    }

    @Override
    public void setMarketTerminationDate(String marketTerminationDate) {
        _marketTerminationDate = marketTerminationDate;
    }

    @Override
    public boolean getCheckRecord() {
        return _checkRecord;
    }

    @Override
    public boolean isCheckRecord() {
        return _checkRecord;
    }

    @Override
    public void setCheckRecord(boolean checkRecord) {
        _checkRecord = checkRecord;
    }

    @Override
    public IvldItemMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (IvldItemMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        IvldItemMasterImpl ivldItemMasterImpl = new IvldItemMasterImpl();

        ivldItemMasterImpl.setItemNo(getItemNo());
        ivldItemMasterImpl.setUdc6(getUdc6());
        ivldItemMasterImpl.setCreatedDate(getCreatedDate());
        ivldItemMasterImpl.setNewFormulationIndicator(getNewFormulationIndicator());
        ivldItemMasterImpl.setUdc5(getUdc5());
        ivldItemMasterImpl.setNewFormulationEndDate(getNewFormulationEndDate());
        ivldItemMasterImpl.setUdc4(getUdc4());
        ivldItemMasterImpl.setClottingFactorStartDate(getClottingFactorStartDate());
        ivldItemMasterImpl.setSecondaryUom(getSecondaryUom());
        ivldItemMasterImpl.setItemDesc(getItemDesc());
        ivldItemMasterImpl.setAuthorizedGenericEndDate(getAuthorizedGenericEndDate());
        ivldItemMasterImpl.setManufacturerName(getManufacturerName());
        ivldItemMasterImpl.setItemName(getItemName());
        ivldItemMasterImpl.setReprocessedFlag(getReprocessedFlag());
        ivldItemMasterImpl.setStatus(getStatus());
        ivldItemMasterImpl.setBaseCpi(getBaseCpi());
        ivldItemMasterImpl.setBaselineAmp(getBaselineAmp());
        ivldItemMasterImpl.setAuthorizedGeneric(getAuthorizedGeneric());
        ivldItemMasterImpl.setTherapeuticClass(getTherapeuticClass());
        ivldItemMasterImpl.setItemFamilyId(getItemFamilyId());
        ivldItemMasterImpl.setPediatricExclusiveStartDate(getPediatricExclusiveStartDate());
        ivldItemMasterImpl.setCreatedBy(getCreatedBy());
        ivldItemMasterImpl.setPrimaryUom(getPrimaryUom());
        ivldItemMasterImpl.setNdc9(getNdc9());
        ivldItemMasterImpl.setItemId(getItemId());
        ivldItemMasterImpl.setLastLotExpirationDate(getLastLotExpirationDate());
        ivldItemMasterImpl.setErrorField(getErrorField());
        ivldItemMasterImpl.setItemCode(getItemCode());
        ivldItemMasterImpl.setStrength(getStrength());
        ivldItemMasterImpl.setModifiedDate(getModifiedDate());
        ivldItemMasterImpl.setBrand(getBrand());
        ivldItemMasterImpl.setNdc8(getNdc8());
        ivldItemMasterImpl.setLabelerCode(getLabelerCode());
        ivldItemMasterImpl.setUdc3(getUdc3());
        ivldItemMasterImpl.setSource(getSource());
        ivldItemMasterImpl.setUdc2(getUdc2());
        ivldItemMasterImpl.setAddChgDelIndicator(getAddChgDelIndicator());
        ivldItemMasterImpl.setUdc1(getUdc1());
        ivldItemMasterImpl.setAcquiredAmp(getAcquiredAmp());
        ivldItemMasterImpl.setDiscontinuationDate(getDiscontinuationDate());
        ivldItemMasterImpl.setItemMasterIntfid(getItemMasterIntfid());
        ivldItemMasterImpl.setIntfInsertedDate(getIntfInsertedDate());
        ivldItemMasterImpl.setDivestitureDate(getDivestitureDate());
        ivldItemMasterImpl.setModifiedBy(getModifiedBy());
        ivldItemMasterImpl.setBaseCpiPeriod(getBaseCpiPeriod());
        ivldItemMasterImpl.setClottingFactorEndDate(getClottingFactorEndDate());
        ivldItemMasterImpl.setDosesPerUnit(getDosesPerUnit());
        ivldItemMasterImpl.setManufacturerId(getManufacturerId());
        ivldItemMasterImpl.setClottingFactorIndicator(getClottingFactorIndicator());
        ivldItemMasterImpl.setBatchId(getBatchId());
        ivldItemMasterImpl.setAcquisitionDate(getAcquisitionDate());
        ivldItemMasterImpl.setDualPricingIndicator(getDualPricingIndicator());
        ivldItemMasterImpl.setNonFederalExpirationDate(getNonFederalExpirationDate());
        ivldItemMasterImpl.setErrorCode(getErrorCode());
        ivldItemMasterImpl.setNewFormulation(getNewFormulation());
        ivldItemMasterImpl.setObraBamp(getObraBamp());
        ivldItemMasterImpl.setBrandId(getBrandId());
        ivldItemMasterImpl.setItemStatus(getItemStatus());
        ivldItemMasterImpl.setAuthorizedGenericStartDate(getAuthorizedGenericStartDate());
        ivldItemMasterImpl.setNewFormulationStartDate(getNewFormulationStartDate());
        ivldItemMasterImpl.setItemCategory(getItemCategory());
        ivldItemMasterImpl.setItemEndDate(getItemEndDate());
        ivldItemMasterImpl.setItemType(getItemType());
        ivldItemMasterImpl.setPediatricExclusiveEndDate(getPediatricExclusiveEndDate());
        ivldItemMasterImpl.setOrganizationKey(getOrganizationKey());
        ivldItemMasterImpl.setFirstSaleDate(getFirstSaleDate());
        ivldItemMasterImpl.setShelfLifeType(getShelfLifeType());
        ivldItemMasterImpl.setItemStartDate(getItemStartDate());
        ivldItemMasterImpl.setItemTypeIndication(getItemTypeIndication());
        ivldItemMasterImpl.setAcquiredBamp(getAcquiredBamp());
        ivldItemMasterImpl.setForm(getForm());
        ivldItemMasterImpl.setItemClass(getItemClass());
        ivldItemMasterImpl.setManufacturerNo(getManufacturerNo());
        ivldItemMasterImpl.setPediatricExclusiveIndicator(getPediatricExclusiveIndicator());
        ivldItemMasterImpl.setPackageSizeCode(getPackageSizeCode());
        ivldItemMasterImpl.setDisplayBrand(getDisplayBrand());
        ivldItemMasterImpl.setDra(getDra());
        ivldItemMasterImpl.setReasonForFailure(getReasonForFailure());
        ivldItemMasterImpl.setPackageSizeIntroDate(getPackageSizeIntroDate());
        ivldItemMasterImpl.setUpps(getUpps());
        ivldItemMasterImpl.setIvldItemMasterSid(getIvldItemMasterSid());
        ivldItemMasterImpl.setPackageSize(getPackageSize());
        ivldItemMasterImpl.setShelfLife(getShelfLife());
        ivldItemMasterImpl.setMarketTerminationDate(getMarketTerminationDate());
        ivldItemMasterImpl.setCheckRecord(getCheckRecord());

        ivldItemMasterImpl.resetOriginalValues();

        return ivldItemMasterImpl;
    }

    @Override
    public int compareTo(IvldItemMaster ivldItemMaster) {
        int primaryKey = ivldItemMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof IvldItemMaster)) {
            return false;
        }

        IvldItemMaster ivldItemMaster = (IvldItemMaster) obj;

        int primaryKey = ivldItemMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<IvldItemMaster> toCacheModel() {
        IvldItemMasterCacheModel ivldItemMasterCacheModel = new IvldItemMasterCacheModel();

        ivldItemMasterCacheModel.itemNo = getItemNo();

        String itemNo = ivldItemMasterCacheModel.itemNo;

        if ((itemNo != null) && (itemNo.length() == 0)) {
            ivldItemMasterCacheModel.itemNo = null;
        }

        ivldItemMasterCacheModel.udc6 = getUdc6();

        String udc6 = ivldItemMasterCacheModel.udc6;

        if ((udc6 != null) && (udc6.length() == 0)) {
            ivldItemMasterCacheModel.udc6 = null;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            ivldItemMasterCacheModel.createdDate = createdDate.getTime();
        } else {
            ivldItemMasterCacheModel.createdDate = Long.MIN_VALUE;
        }

        ivldItemMasterCacheModel.newFormulationIndicator = getNewFormulationIndicator();

        String newFormulationIndicator = ivldItemMasterCacheModel.newFormulationIndicator;

        if ((newFormulationIndicator != null) &&
                (newFormulationIndicator.length() == 0)) {
            ivldItemMasterCacheModel.newFormulationIndicator = null;
        }

        ivldItemMasterCacheModel.udc5 = getUdc5();

        String udc5 = ivldItemMasterCacheModel.udc5;

        if ((udc5 != null) && (udc5.length() == 0)) {
            ivldItemMasterCacheModel.udc5 = null;
        }

        ivldItemMasterCacheModel.newFormulationEndDate = getNewFormulationEndDate();

        String newFormulationEndDate = ivldItemMasterCacheModel.newFormulationEndDate;

        if ((newFormulationEndDate != null) &&
                (newFormulationEndDate.length() == 0)) {
            ivldItemMasterCacheModel.newFormulationEndDate = null;
        }

        ivldItemMasterCacheModel.udc4 = getUdc4();

        String udc4 = ivldItemMasterCacheModel.udc4;

        if ((udc4 != null) && (udc4.length() == 0)) {
            ivldItemMasterCacheModel.udc4 = null;
        }

        ivldItemMasterCacheModel.clottingFactorStartDate = getClottingFactorStartDate();

        String clottingFactorStartDate = ivldItemMasterCacheModel.clottingFactorStartDate;

        if ((clottingFactorStartDate != null) &&
                (clottingFactorStartDate.length() == 0)) {
            ivldItemMasterCacheModel.clottingFactorStartDate = null;
        }

        ivldItemMasterCacheModel.secondaryUom = getSecondaryUom();

        String secondaryUom = ivldItemMasterCacheModel.secondaryUom;

        if ((secondaryUom != null) && (secondaryUom.length() == 0)) {
            ivldItemMasterCacheModel.secondaryUom = null;
        }

        ivldItemMasterCacheModel.itemDesc = getItemDesc();

        String itemDesc = ivldItemMasterCacheModel.itemDesc;

        if ((itemDesc != null) && (itemDesc.length() == 0)) {
            ivldItemMasterCacheModel.itemDesc = null;
        }

        ivldItemMasterCacheModel.authorizedGenericEndDate = getAuthorizedGenericEndDate();

        String authorizedGenericEndDate = ivldItemMasterCacheModel.authorizedGenericEndDate;

        if ((authorizedGenericEndDate != null) &&
                (authorizedGenericEndDate.length() == 0)) {
            ivldItemMasterCacheModel.authorizedGenericEndDate = null;
        }

        ivldItemMasterCacheModel.manufacturerName = getManufacturerName();

        String manufacturerName = ivldItemMasterCacheModel.manufacturerName;

        if ((manufacturerName != null) && (manufacturerName.length() == 0)) {
            ivldItemMasterCacheModel.manufacturerName = null;
        }

        ivldItemMasterCacheModel.itemName = getItemName();

        String itemName = ivldItemMasterCacheModel.itemName;

        if ((itemName != null) && (itemName.length() == 0)) {
            ivldItemMasterCacheModel.itemName = null;
        }

        ivldItemMasterCacheModel.reprocessedFlag = getReprocessedFlag();

        String reprocessedFlag = ivldItemMasterCacheModel.reprocessedFlag;

        if ((reprocessedFlag != null) && (reprocessedFlag.length() == 0)) {
            ivldItemMasterCacheModel.reprocessedFlag = null;
        }

        ivldItemMasterCacheModel.status = getStatus();

        String status = ivldItemMasterCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            ivldItemMasterCacheModel.status = null;
        }

        ivldItemMasterCacheModel.baseCpi = getBaseCpi();

        String baseCpi = ivldItemMasterCacheModel.baseCpi;

        if ((baseCpi != null) && (baseCpi.length() == 0)) {
            ivldItemMasterCacheModel.baseCpi = null;
        }

        ivldItemMasterCacheModel.baselineAmp = getBaselineAmp();

        String baselineAmp = ivldItemMasterCacheModel.baselineAmp;

        if ((baselineAmp != null) && (baselineAmp.length() == 0)) {
            ivldItemMasterCacheModel.baselineAmp = null;
        }

        ivldItemMasterCacheModel.authorizedGeneric = getAuthorizedGeneric();

        String authorizedGeneric = ivldItemMasterCacheModel.authorizedGeneric;

        if ((authorizedGeneric != null) && (authorizedGeneric.length() == 0)) {
            ivldItemMasterCacheModel.authorizedGeneric = null;
        }

        ivldItemMasterCacheModel.therapeuticClass = getTherapeuticClass();

        String therapeuticClass = ivldItemMasterCacheModel.therapeuticClass;

        if ((therapeuticClass != null) && (therapeuticClass.length() == 0)) {
            ivldItemMasterCacheModel.therapeuticClass = null;
        }

        ivldItemMasterCacheModel.itemFamilyId = getItemFamilyId();

        String itemFamilyId = ivldItemMasterCacheModel.itemFamilyId;

        if ((itemFamilyId != null) && (itemFamilyId.length() == 0)) {
            ivldItemMasterCacheModel.itemFamilyId = null;
        }

        ivldItemMasterCacheModel.pediatricExclusiveStartDate = getPediatricExclusiveStartDate();

        String pediatricExclusiveStartDate = ivldItemMasterCacheModel.pediatricExclusiveStartDate;

        if ((pediatricExclusiveStartDate != null) &&
                (pediatricExclusiveStartDate.length() == 0)) {
            ivldItemMasterCacheModel.pediatricExclusiveStartDate = null;
        }

        ivldItemMasterCacheModel.createdBy = getCreatedBy();

        String createdBy = ivldItemMasterCacheModel.createdBy;

        if ((createdBy != null) && (createdBy.length() == 0)) {
            ivldItemMasterCacheModel.createdBy = null;
        }

        ivldItemMasterCacheModel.primaryUom = getPrimaryUom();

        String primaryUom = ivldItemMasterCacheModel.primaryUom;

        if ((primaryUom != null) && (primaryUom.length() == 0)) {
            ivldItemMasterCacheModel.primaryUom = null;
        }

        ivldItemMasterCacheModel.ndc9 = getNdc9();

        String ndc9 = ivldItemMasterCacheModel.ndc9;

        if ((ndc9 != null) && (ndc9.length() == 0)) {
            ivldItemMasterCacheModel.ndc9 = null;
        }

        ivldItemMasterCacheModel.itemId = getItemId();

        String itemId = ivldItemMasterCacheModel.itemId;

        if ((itemId != null) && (itemId.length() == 0)) {
            ivldItemMasterCacheModel.itemId = null;
        }

        ivldItemMasterCacheModel.lastLotExpirationDate = getLastLotExpirationDate();

        String lastLotExpirationDate = ivldItemMasterCacheModel.lastLotExpirationDate;

        if ((lastLotExpirationDate != null) &&
                (lastLotExpirationDate.length() == 0)) {
            ivldItemMasterCacheModel.lastLotExpirationDate = null;
        }

        ivldItemMasterCacheModel.errorField = getErrorField();

        String errorField = ivldItemMasterCacheModel.errorField;

        if ((errorField != null) && (errorField.length() == 0)) {
            ivldItemMasterCacheModel.errorField = null;
        }

        ivldItemMasterCacheModel.itemCode = getItemCode();

        String itemCode = ivldItemMasterCacheModel.itemCode;

        if ((itemCode != null) && (itemCode.length() == 0)) {
            ivldItemMasterCacheModel.itemCode = null;
        }

        ivldItemMasterCacheModel.strength = getStrength();

        String strength = ivldItemMasterCacheModel.strength;

        if ((strength != null) && (strength.length() == 0)) {
            ivldItemMasterCacheModel.strength = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            ivldItemMasterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            ivldItemMasterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        ivldItemMasterCacheModel.brand = getBrand();

        String brand = ivldItemMasterCacheModel.brand;

        if ((brand != null) && (brand.length() == 0)) {
            ivldItemMasterCacheModel.brand = null;
        }

        ivldItemMasterCacheModel.ndc8 = getNdc8();

        String ndc8 = ivldItemMasterCacheModel.ndc8;

        if ((ndc8 != null) && (ndc8.length() == 0)) {
            ivldItemMasterCacheModel.ndc8 = null;
        }

        ivldItemMasterCacheModel.labelerCode = getLabelerCode();

        String labelerCode = ivldItemMasterCacheModel.labelerCode;

        if ((labelerCode != null) && (labelerCode.length() == 0)) {
            ivldItemMasterCacheModel.labelerCode = null;
        }

        ivldItemMasterCacheModel.udc3 = getUdc3();

        String udc3 = ivldItemMasterCacheModel.udc3;

        if ((udc3 != null) && (udc3.length() == 0)) {
            ivldItemMasterCacheModel.udc3 = null;
        }

        ivldItemMasterCacheModel.source = getSource();

        String source = ivldItemMasterCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            ivldItemMasterCacheModel.source = null;
        }

        ivldItemMasterCacheModel.udc2 = getUdc2();

        String udc2 = ivldItemMasterCacheModel.udc2;

        if ((udc2 != null) && (udc2.length() == 0)) {
            ivldItemMasterCacheModel.udc2 = null;
        }

        ivldItemMasterCacheModel.addChgDelIndicator = getAddChgDelIndicator();

        String addChgDelIndicator = ivldItemMasterCacheModel.addChgDelIndicator;

        if ((addChgDelIndicator != null) && (addChgDelIndicator.length() == 0)) {
            ivldItemMasterCacheModel.addChgDelIndicator = null;
        }

        ivldItemMasterCacheModel.udc1 = getUdc1();

        String udc1 = ivldItemMasterCacheModel.udc1;

        if ((udc1 != null) && (udc1.length() == 0)) {
            ivldItemMasterCacheModel.udc1 = null;
        }

        ivldItemMasterCacheModel.acquiredAmp = getAcquiredAmp();

        String acquiredAmp = ivldItemMasterCacheModel.acquiredAmp;

        if ((acquiredAmp != null) && (acquiredAmp.length() == 0)) {
            ivldItemMasterCacheModel.acquiredAmp = null;
        }

        ivldItemMasterCacheModel.discontinuationDate = getDiscontinuationDate();

        String discontinuationDate = ivldItemMasterCacheModel.discontinuationDate;

        if ((discontinuationDate != null) &&
                (discontinuationDate.length() == 0)) {
            ivldItemMasterCacheModel.discontinuationDate = null;
        }

        ivldItemMasterCacheModel.itemMasterIntfid = getItemMasterIntfid();

        String itemMasterIntfid = ivldItemMasterCacheModel.itemMasterIntfid;

        if ((itemMasterIntfid != null) && (itemMasterIntfid.length() == 0)) {
            ivldItemMasterCacheModel.itemMasterIntfid = null;
        }

        Date intfInsertedDate = getIntfInsertedDate();

        if (intfInsertedDate != null) {
            ivldItemMasterCacheModel.intfInsertedDate = intfInsertedDate.getTime();
        } else {
            ivldItemMasterCacheModel.intfInsertedDate = Long.MIN_VALUE;
        }

        ivldItemMasterCacheModel.divestitureDate = getDivestitureDate();

        String divestitureDate = ivldItemMasterCacheModel.divestitureDate;

        if ((divestitureDate != null) && (divestitureDate.length() == 0)) {
            ivldItemMasterCacheModel.divestitureDate = null;
        }

        ivldItemMasterCacheModel.modifiedBy = getModifiedBy();

        String modifiedBy = ivldItemMasterCacheModel.modifiedBy;

        if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
            ivldItemMasterCacheModel.modifiedBy = null;
        }

        ivldItemMasterCacheModel.baseCpiPeriod = getBaseCpiPeriod();

        String baseCpiPeriod = ivldItemMasterCacheModel.baseCpiPeriod;

        if ((baseCpiPeriod != null) && (baseCpiPeriod.length() == 0)) {
            ivldItemMasterCacheModel.baseCpiPeriod = null;
        }

        ivldItemMasterCacheModel.clottingFactorEndDate = getClottingFactorEndDate();

        String clottingFactorEndDate = ivldItemMasterCacheModel.clottingFactorEndDate;

        if ((clottingFactorEndDate != null) &&
                (clottingFactorEndDate.length() == 0)) {
            ivldItemMasterCacheModel.clottingFactorEndDate = null;
        }

        ivldItemMasterCacheModel.dosesPerUnit = getDosesPerUnit();

        String dosesPerUnit = ivldItemMasterCacheModel.dosesPerUnit;

        if ((dosesPerUnit != null) && (dosesPerUnit.length() == 0)) {
            ivldItemMasterCacheModel.dosesPerUnit = null;
        }

        ivldItemMasterCacheModel.manufacturerId = getManufacturerId();

        String manufacturerId = ivldItemMasterCacheModel.manufacturerId;

        if ((manufacturerId != null) && (manufacturerId.length() == 0)) {
            ivldItemMasterCacheModel.manufacturerId = null;
        }

        ivldItemMasterCacheModel.clottingFactorIndicator = getClottingFactorIndicator();

        String clottingFactorIndicator = ivldItemMasterCacheModel.clottingFactorIndicator;

        if ((clottingFactorIndicator != null) &&
                (clottingFactorIndicator.length() == 0)) {
            ivldItemMasterCacheModel.clottingFactorIndicator = null;
        }

        ivldItemMasterCacheModel.batchId = getBatchId();

        String batchId = ivldItemMasterCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            ivldItemMasterCacheModel.batchId = null;
        }

        ivldItemMasterCacheModel.acquisitionDate = getAcquisitionDate();

        String acquisitionDate = ivldItemMasterCacheModel.acquisitionDate;

        if ((acquisitionDate != null) && (acquisitionDate.length() == 0)) {
            ivldItemMasterCacheModel.acquisitionDate = null;
        }

        ivldItemMasterCacheModel.dualPricingIndicator = getDualPricingIndicator();

        String dualPricingIndicator = ivldItemMasterCacheModel.dualPricingIndicator;

        if ((dualPricingIndicator != null) &&
                (dualPricingIndicator.length() == 0)) {
            ivldItemMasterCacheModel.dualPricingIndicator = null;
        }

        ivldItemMasterCacheModel.nonFederalExpirationDate = getNonFederalExpirationDate();

        String nonFederalExpirationDate = ivldItemMasterCacheModel.nonFederalExpirationDate;

        if ((nonFederalExpirationDate != null) &&
                (nonFederalExpirationDate.length() == 0)) {
            ivldItemMasterCacheModel.nonFederalExpirationDate = null;
        }

        ivldItemMasterCacheModel.errorCode = getErrorCode();

        String errorCode = ivldItemMasterCacheModel.errorCode;

        if ((errorCode != null) && (errorCode.length() == 0)) {
            ivldItemMasterCacheModel.errorCode = null;
        }

        ivldItemMasterCacheModel.newFormulation = getNewFormulation();

        String newFormulation = ivldItemMasterCacheModel.newFormulation;

        if ((newFormulation != null) && (newFormulation.length() == 0)) {
            ivldItemMasterCacheModel.newFormulation = null;
        }

        ivldItemMasterCacheModel.obraBamp = getObraBamp();

        String obraBamp = ivldItemMasterCacheModel.obraBamp;

        if ((obraBamp != null) && (obraBamp.length() == 0)) {
            ivldItemMasterCacheModel.obraBamp = null;
        }

        ivldItemMasterCacheModel.brandId = getBrandId();

        String brandId = ivldItemMasterCacheModel.brandId;

        if ((brandId != null) && (brandId.length() == 0)) {
            ivldItemMasterCacheModel.brandId = null;
        }

        ivldItemMasterCacheModel.itemStatus = getItemStatus();

        String itemStatus = ivldItemMasterCacheModel.itemStatus;

        if ((itemStatus != null) && (itemStatus.length() == 0)) {
            ivldItemMasterCacheModel.itemStatus = null;
        }

        ivldItemMasterCacheModel.authorizedGenericStartDate = getAuthorizedGenericStartDate();

        String authorizedGenericStartDate = ivldItemMasterCacheModel.authorizedGenericStartDate;

        if ((authorizedGenericStartDate != null) &&
                (authorizedGenericStartDate.length() == 0)) {
            ivldItemMasterCacheModel.authorizedGenericStartDate = null;
        }

        ivldItemMasterCacheModel.newFormulationStartDate = getNewFormulationStartDate();

        String newFormulationStartDate = ivldItemMasterCacheModel.newFormulationStartDate;

        if ((newFormulationStartDate != null) &&
                (newFormulationStartDate.length() == 0)) {
            ivldItemMasterCacheModel.newFormulationStartDate = null;
        }

        ivldItemMasterCacheModel.itemCategory = getItemCategory();

        String itemCategory = ivldItemMasterCacheModel.itemCategory;

        if ((itemCategory != null) && (itemCategory.length() == 0)) {
            ivldItemMasterCacheModel.itemCategory = null;
        }

        ivldItemMasterCacheModel.itemEndDate = getItemEndDate();

        String itemEndDate = ivldItemMasterCacheModel.itemEndDate;

        if ((itemEndDate != null) && (itemEndDate.length() == 0)) {
            ivldItemMasterCacheModel.itemEndDate = null;
        }

        ivldItemMasterCacheModel.itemType = getItemType();

        String itemType = ivldItemMasterCacheModel.itemType;

        if ((itemType != null) && (itemType.length() == 0)) {
            ivldItemMasterCacheModel.itemType = null;
        }

        ivldItemMasterCacheModel.pediatricExclusiveEndDate = getPediatricExclusiveEndDate();

        String pediatricExclusiveEndDate = ivldItemMasterCacheModel.pediatricExclusiveEndDate;

        if ((pediatricExclusiveEndDate != null) &&
                (pediatricExclusiveEndDate.length() == 0)) {
            ivldItemMasterCacheModel.pediatricExclusiveEndDate = null;
        }

        ivldItemMasterCacheModel.organizationKey = getOrganizationKey();

        String organizationKey = ivldItemMasterCacheModel.organizationKey;

        if ((organizationKey != null) && (organizationKey.length() == 0)) {
            ivldItemMasterCacheModel.organizationKey = null;
        }

        ivldItemMasterCacheModel.firstSaleDate = getFirstSaleDate();

        String firstSaleDate = ivldItemMasterCacheModel.firstSaleDate;

        if ((firstSaleDate != null) && (firstSaleDate.length() == 0)) {
            ivldItemMasterCacheModel.firstSaleDate = null;
        }

        ivldItemMasterCacheModel.shelfLifeType = getShelfLifeType();

        String shelfLifeType = ivldItemMasterCacheModel.shelfLifeType;

        if ((shelfLifeType != null) && (shelfLifeType.length() == 0)) {
            ivldItemMasterCacheModel.shelfLifeType = null;
        }

        ivldItemMasterCacheModel.itemStartDate = getItemStartDate();

        String itemStartDate = ivldItemMasterCacheModel.itemStartDate;

        if ((itemStartDate != null) && (itemStartDate.length() == 0)) {
            ivldItemMasterCacheModel.itemStartDate = null;
        }

        ivldItemMasterCacheModel.itemTypeIndication = getItemTypeIndication();

        String itemTypeIndication = ivldItemMasterCacheModel.itemTypeIndication;

        if ((itemTypeIndication != null) && (itemTypeIndication.length() == 0)) {
            ivldItemMasterCacheModel.itemTypeIndication = null;
        }

        ivldItemMasterCacheModel.acquiredBamp = getAcquiredBamp();

        String acquiredBamp = ivldItemMasterCacheModel.acquiredBamp;

        if ((acquiredBamp != null) && (acquiredBamp.length() == 0)) {
            ivldItemMasterCacheModel.acquiredBamp = null;
        }

        ivldItemMasterCacheModel.form = getForm();

        String form = ivldItemMasterCacheModel.form;

        if ((form != null) && (form.length() == 0)) {
            ivldItemMasterCacheModel.form = null;
        }

        ivldItemMasterCacheModel.itemClass = getItemClass();

        String itemClass = ivldItemMasterCacheModel.itemClass;

        if ((itemClass != null) && (itemClass.length() == 0)) {
            ivldItemMasterCacheModel.itemClass = null;
        }

        ivldItemMasterCacheModel.manufacturerNo = getManufacturerNo();

        String manufacturerNo = ivldItemMasterCacheModel.manufacturerNo;

        if ((manufacturerNo != null) && (manufacturerNo.length() == 0)) {
            ivldItemMasterCacheModel.manufacturerNo = null;
        }

        ivldItemMasterCacheModel.pediatricExclusiveIndicator = getPediatricExclusiveIndicator();

        String pediatricExclusiveIndicator = ivldItemMasterCacheModel.pediatricExclusiveIndicator;

        if ((pediatricExclusiveIndicator != null) &&
                (pediatricExclusiveIndicator.length() == 0)) {
            ivldItemMasterCacheModel.pediatricExclusiveIndicator = null;
        }

        ivldItemMasterCacheModel.packageSizeCode = getPackageSizeCode();

        String packageSizeCode = ivldItemMasterCacheModel.packageSizeCode;

        if ((packageSizeCode != null) && (packageSizeCode.length() == 0)) {
            ivldItemMasterCacheModel.packageSizeCode = null;
        }

        ivldItemMasterCacheModel.displayBrand = getDisplayBrand();

        String displayBrand = ivldItemMasterCacheModel.displayBrand;

        if ((displayBrand != null) && (displayBrand.length() == 0)) {
            ivldItemMasterCacheModel.displayBrand = null;
        }

        ivldItemMasterCacheModel.dra = getDra();

        String dra = ivldItemMasterCacheModel.dra;

        if ((dra != null) && (dra.length() == 0)) {
            ivldItemMasterCacheModel.dra = null;
        }

        ivldItemMasterCacheModel.reasonForFailure = getReasonForFailure();

        String reasonForFailure = ivldItemMasterCacheModel.reasonForFailure;

        if ((reasonForFailure != null) && (reasonForFailure.length() == 0)) {
            ivldItemMasterCacheModel.reasonForFailure = null;
        }

        ivldItemMasterCacheModel.packageSizeIntroDate = getPackageSizeIntroDate();

        String packageSizeIntroDate = ivldItemMasterCacheModel.packageSizeIntroDate;

        if ((packageSizeIntroDate != null) &&
                (packageSizeIntroDate.length() == 0)) {
            ivldItemMasterCacheModel.packageSizeIntroDate = null;
        }

        ivldItemMasterCacheModel.upps = getUpps();

        String upps = ivldItemMasterCacheModel.upps;

        if ((upps != null) && (upps.length() == 0)) {
            ivldItemMasterCacheModel.upps = null;
        }

        ivldItemMasterCacheModel.ivldItemMasterSid = getIvldItemMasterSid();

        ivldItemMasterCacheModel.packageSize = getPackageSize();

        String packageSize = ivldItemMasterCacheModel.packageSize;

        if ((packageSize != null) && (packageSize.length() == 0)) {
            ivldItemMasterCacheModel.packageSize = null;
        }

        ivldItemMasterCacheModel.shelfLife = getShelfLife();

        String shelfLife = ivldItemMasterCacheModel.shelfLife;

        if ((shelfLife != null) && (shelfLife.length() == 0)) {
            ivldItemMasterCacheModel.shelfLife = null;
        }

        ivldItemMasterCacheModel.marketTerminationDate = getMarketTerminationDate();

        String marketTerminationDate = ivldItemMasterCacheModel.marketTerminationDate;

        if ((marketTerminationDate != null) &&
                (marketTerminationDate.length() == 0)) {
            ivldItemMasterCacheModel.marketTerminationDate = null;
        }

        ivldItemMasterCacheModel.checkRecord = getCheckRecord();

        return ivldItemMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(171);

        sb.append("{itemNo=");
        sb.append(getItemNo());
        sb.append(", udc6=");
        sb.append(getUdc6());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", newFormulationIndicator=");
        sb.append(getNewFormulationIndicator());
        sb.append(", udc5=");
        sb.append(getUdc5());
        sb.append(", newFormulationEndDate=");
        sb.append(getNewFormulationEndDate());
        sb.append(", udc4=");
        sb.append(getUdc4());
        sb.append(", clottingFactorStartDate=");
        sb.append(getClottingFactorStartDate());
        sb.append(", secondaryUom=");
        sb.append(getSecondaryUom());
        sb.append(", itemDesc=");
        sb.append(getItemDesc());
        sb.append(", authorizedGenericEndDate=");
        sb.append(getAuthorizedGenericEndDate());
        sb.append(", manufacturerName=");
        sb.append(getManufacturerName());
        sb.append(", itemName=");
        sb.append(getItemName());
        sb.append(", reprocessedFlag=");
        sb.append(getReprocessedFlag());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", baseCpi=");
        sb.append(getBaseCpi());
        sb.append(", baselineAmp=");
        sb.append(getBaselineAmp());
        sb.append(", authorizedGeneric=");
        sb.append(getAuthorizedGeneric());
        sb.append(", therapeuticClass=");
        sb.append(getTherapeuticClass());
        sb.append(", itemFamilyId=");
        sb.append(getItemFamilyId());
        sb.append(", pediatricExclusiveStartDate=");
        sb.append(getPediatricExclusiveStartDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", primaryUom=");
        sb.append(getPrimaryUom());
        sb.append(", ndc9=");
        sb.append(getNdc9());
        sb.append(", itemId=");
        sb.append(getItemId());
        sb.append(", lastLotExpirationDate=");
        sb.append(getLastLotExpirationDate());
        sb.append(", errorField=");
        sb.append(getErrorField());
        sb.append(", itemCode=");
        sb.append(getItemCode());
        sb.append(", strength=");
        sb.append(getStrength());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", brand=");
        sb.append(getBrand());
        sb.append(", ndc8=");
        sb.append(getNdc8());
        sb.append(", labelerCode=");
        sb.append(getLabelerCode());
        sb.append(", udc3=");
        sb.append(getUdc3());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", udc2=");
        sb.append(getUdc2());
        sb.append(", addChgDelIndicator=");
        sb.append(getAddChgDelIndicator());
        sb.append(", udc1=");
        sb.append(getUdc1());
        sb.append(", acquiredAmp=");
        sb.append(getAcquiredAmp());
        sb.append(", discontinuationDate=");
        sb.append(getDiscontinuationDate());
        sb.append(", itemMasterIntfid=");
        sb.append(getItemMasterIntfid());
        sb.append(", intfInsertedDate=");
        sb.append(getIntfInsertedDate());
        sb.append(", divestitureDate=");
        sb.append(getDivestitureDate());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", baseCpiPeriod=");
        sb.append(getBaseCpiPeriod());
        sb.append(", clottingFactorEndDate=");
        sb.append(getClottingFactorEndDate());
        sb.append(", dosesPerUnit=");
        sb.append(getDosesPerUnit());
        sb.append(", manufacturerId=");
        sb.append(getManufacturerId());
        sb.append(", clottingFactorIndicator=");
        sb.append(getClottingFactorIndicator());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", acquisitionDate=");
        sb.append(getAcquisitionDate());
        sb.append(", dualPricingIndicator=");
        sb.append(getDualPricingIndicator());
        sb.append(", nonFederalExpirationDate=");
        sb.append(getNonFederalExpirationDate());
        sb.append(", errorCode=");
        sb.append(getErrorCode());
        sb.append(", newFormulation=");
        sb.append(getNewFormulation());
        sb.append(", obraBamp=");
        sb.append(getObraBamp());
        sb.append(", brandId=");
        sb.append(getBrandId());
        sb.append(", itemStatus=");
        sb.append(getItemStatus());
        sb.append(", authorizedGenericStartDate=");
        sb.append(getAuthorizedGenericStartDate());
        sb.append(", newFormulationStartDate=");
        sb.append(getNewFormulationStartDate());
        sb.append(", itemCategory=");
        sb.append(getItemCategory());
        sb.append(", itemEndDate=");
        sb.append(getItemEndDate());
        sb.append(", itemType=");
        sb.append(getItemType());
        sb.append(", pediatricExclusiveEndDate=");
        sb.append(getPediatricExclusiveEndDate());
        sb.append(", organizationKey=");
        sb.append(getOrganizationKey());
        sb.append(", firstSaleDate=");
        sb.append(getFirstSaleDate());
        sb.append(", shelfLifeType=");
        sb.append(getShelfLifeType());
        sb.append(", itemStartDate=");
        sb.append(getItemStartDate());
        sb.append(", itemTypeIndication=");
        sb.append(getItemTypeIndication());
        sb.append(", acquiredBamp=");
        sb.append(getAcquiredBamp());
        sb.append(", form=");
        sb.append(getForm());
        sb.append(", itemClass=");
        sb.append(getItemClass());
        sb.append(", manufacturerNo=");
        sb.append(getManufacturerNo());
        sb.append(", pediatricExclusiveIndicator=");
        sb.append(getPediatricExclusiveIndicator());
        sb.append(", packageSizeCode=");
        sb.append(getPackageSizeCode());
        sb.append(", displayBrand=");
        sb.append(getDisplayBrand());
        sb.append(", dra=");
        sb.append(getDra());
        sb.append(", reasonForFailure=");
        sb.append(getReasonForFailure());
        sb.append(", packageSizeIntroDate=");
        sb.append(getPackageSizeIntroDate());
        sb.append(", upps=");
        sb.append(getUpps());
        sb.append(", ivldItemMasterSid=");
        sb.append(getIvldItemMasterSid());
        sb.append(", packageSize=");
        sb.append(getPackageSize());
        sb.append(", shelfLife=");
        sb.append(getShelfLife());
        sb.append(", marketTerminationDate=");
        sb.append(getMarketTerminationDate());
        sb.append(", checkRecord=");
        sb.append(getCheckRecord());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(259);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.parttwo.model.IvldItemMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>itemNo</column-name><column-value><![CDATA[");
        sb.append(getItemNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>udc6</column-name><column-value><![CDATA[");
        sb.append(getUdc6());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newFormulationIndicator</column-name><column-value><![CDATA[");
        sb.append(getNewFormulationIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>udc5</column-name><column-value><![CDATA[");
        sb.append(getUdc5());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newFormulationEndDate</column-name><column-value><![CDATA[");
        sb.append(getNewFormulationEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>udc4</column-name><column-value><![CDATA[");
        sb.append(getUdc4());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clottingFactorStartDate</column-name><column-value><![CDATA[");
        sb.append(getClottingFactorStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>secondaryUom</column-name><column-value><![CDATA[");
        sb.append(getSecondaryUom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemDesc</column-name><column-value><![CDATA[");
        sb.append(getItemDesc());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorizedGenericEndDate</column-name><column-value><![CDATA[");
        sb.append(getAuthorizedGenericEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>manufacturerName</column-name><column-value><![CDATA[");
        sb.append(getManufacturerName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemName</column-name><column-value><![CDATA[");
        sb.append(getItemName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reprocessedFlag</column-name><column-value><![CDATA[");
        sb.append(getReprocessedFlag());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baseCpi</column-name><column-value><![CDATA[");
        sb.append(getBaseCpi());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baselineAmp</column-name><column-value><![CDATA[");
        sb.append(getBaselineAmp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorizedGeneric</column-name><column-value><![CDATA[");
        sb.append(getAuthorizedGeneric());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>therapeuticClass</column-name><column-value><![CDATA[");
        sb.append(getTherapeuticClass());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemFamilyId</column-name><column-value><![CDATA[");
        sb.append(getItemFamilyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pediatricExclusiveStartDate</column-name><column-value><![CDATA[");
        sb.append(getPediatricExclusiveStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>primaryUom</column-name><column-value><![CDATA[");
        sb.append(getPrimaryUom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ndc9</column-name><column-value><![CDATA[");
        sb.append(getNdc9());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemId</column-name><column-value><![CDATA[");
        sb.append(getItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastLotExpirationDate</column-name><column-value><![CDATA[");
        sb.append(getLastLotExpirationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>errorField</column-name><column-value><![CDATA[");
        sb.append(getErrorField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemCode</column-name><column-value><![CDATA[");
        sb.append(getItemCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>strength</column-name><column-value><![CDATA[");
        sb.append(getStrength());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brand</column-name><column-value><![CDATA[");
        sb.append(getBrand());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ndc8</column-name><column-value><![CDATA[");
        sb.append(getNdc8());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>labelerCode</column-name><column-value><![CDATA[");
        sb.append(getLabelerCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>udc3</column-name><column-value><![CDATA[");
        sb.append(getUdc3());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>udc2</column-name><column-value><![CDATA[");
        sb.append(getUdc2());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>addChgDelIndicator</column-name><column-value><![CDATA[");
        sb.append(getAddChgDelIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>udc1</column-name><column-value><![CDATA[");
        sb.append(getUdc1());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>acquiredAmp</column-name><column-value><![CDATA[");
        sb.append(getAcquiredAmp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discontinuationDate</column-name><column-value><![CDATA[");
        sb.append(getDiscontinuationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemMasterIntfid</column-name><column-value><![CDATA[");
        sb.append(getItemMasterIntfid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>intfInsertedDate</column-name><column-value><![CDATA[");
        sb.append(getIntfInsertedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>divestitureDate</column-name><column-value><![CDATA[");
        sb.append(getDivestitureDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baseCpiPeriod</column-name><column-value><![CDATA[");
        sb.append(getBaseCpiPeriod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clottingFactorEndDate</column-name><column-value><![CDATA[");
        sb.append(getClottingFactorEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dosesPerUnit</column-name><column-value><![CDATA[");
        sb.append(getDosesPerUnit());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>manufacturerId</column-name><column-value><![CDATA[");
        sb.append(getManufacturerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clottingFactorIndicator</column-name><column-value><![CDATA[");
        sb.append(getClottingFactorIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>acquisitionDate</column-name><column-value><![CDATA[");
        sb.append(getAcquisitionDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dualPricingIndicator</column-name><column-value><![CDATA[");
        sb.append(getDualPricingIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nonFederalExpirationDate</column-name><column-value><![CDATA[");
        sb.append(getNonFederalExpirationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>errorCode</column-name><column-value><![CDATA[");
        sb.append(getErrorCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newFormulation</column-name><column-value><![CDATA[");
        sb.append(getNewFormulation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>obraBamp</column-name><column-value><![CDATA[");
        sb.append(getObraBamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandId</column-name><column-value><![CDATA[");
        sb.append(getBrandId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemStatus</column-name><column-value><![CDATA[");
        sb.append(getItemStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorizedGenericStartDate</column-name><column-value><![CDATA[");
        sb.append(getAuthorizedGenericStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newFormulationStartDate</column-name><column-value><![CDATA[");
        sb.append(getNewFormulationStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemCategory</column-name><column-value><![CDATA[");
        sb.append(getItemCategory());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemEndDate</column-name><column-value><![CDATA[");
        sb.append(getItemEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemType</column-name><column-value><![CDATA[");
        sb.append(getItemType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pediatricExclusiveEndDate</column-name><column-value><![CDATA[");
        sb.append(getPediatricExclusiveEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationKey</column-name><column-value><![CDATA[");
        sb.append(getOrganizationKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstSaleDate</column-name><column-value><![CDATA[");
        sb.append(getFirstSaleDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shelfLifeType</column-name><column-value><![CDATA[");
        sb.append(getShelfLifeType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemStartDate</column-name><column-value><![CDATA[");
        sb.append(getItemStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemTypeIndication</column-name><column-value><![CDATA[");
        sb.append(getItemTypeIndication());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>acquiredBamp</column-name><column-value><![CDATA[");
        sb.append(getAcquiredBamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>form</column-name><column-value><![CDATA[");
        sb.append(getForm());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemClass</column-name><column-value><![CDATA[");
        sb.append(getItemClass());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>manufacturerNo</column-name><column-value><![CDATA[");
        sb.append(getManufacturerNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pediatricExclusiveIndicator</column-name><column-value><![CDATA[");
        sb.append(getPediatricExclusiveIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageSizeCode</column-name><column-value><![CDATA[");
        sb.append(getPackageSizeCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>displayBrand</column-name><column-value><![CDATA[");
        sb.append(getDisplayBrand());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dra</column-name><column-value><![CDATA[");
        sb.append(getDra());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reasonForFailure</column-name><column-value><![CDATA[");
        sb.append(getReasonForFailure());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageSizeIntroDate</column-name><column-value><![CDATA[");
        sb.append(getPackageSizeIntroDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>upps</column-name><column-value><![CDATA[");
        sb.append(getUpps());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ivldItemMasterSid</column-name><column-value><![CDATA[");
        sb.append(getIvldItemMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageSize</column-name><column-value><![CDATA[");
        sb.append(getPackageSize());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shelfLife</column-name><column-value><![CDATA[");
        sb.append(getShelfLife());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketTerminationDate</column-name><column-value><![CDATA[");
        sb.append(getMarketTerminationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>checkRecord</column-name><column-value><![CDATA[");
        sb.append(getCheckRecord());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
