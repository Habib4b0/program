/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.parttwo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.parttwo.model.CffAdditionalInfo;
import com.stpl.app.parttwo.model.CffAdditionalInfoModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CffAdditionalInfo service. Represents a row in the &quot;CFF_ADDITIONAL_INFO&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CffAdditionalInfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CffAdditionalInfoImpl}.
 * </p>
 *
 * @author
 * @see CffAdditionalInfoImpl
 * @see CffAdditionalInfo
 * @see CffAdditionalInfoModel
 * @generated
 */
@ProviderType
public class CffAdditionalInfoModelImpl extends BaseModelImpl<CffAdditionalInfo>
	implements CffAdditionalInfoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cff additional info model instance should use the {@link CffAdditionalInfo} interface instead.
	 */
	public static final String TABLE_NAME = "CFF_ADDITIONAL_INFO";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.INTEGER },
			{ "CFF_MASTER_SID", Types.INTEGER },
			{ "CFF_ADDITIONAL_INFO_SID", Types.INTEGER },
			{ "NOTES", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CFF_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CFF_ADDITIONAL_INFO_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NOTES", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table CFF_ADDITIONAL_INFO (CREATED_DATE DATE null,CREATED_BY INTEGER,CFF_MASTER_SID INTEGER,CFF_ADDITIONAL_INFO_SID INTEGER not null primary key IDENTITY,NOTES VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CFF_ADDITIONAL_INFO";
	public static final String ORDER_BY_JPQL = " ORDER BY cffAdditionalInfo.cffAdditionalInfoSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CFF_ADDITIONAL_INFO.CFF_ADDITIONAL_INFO_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.parttwo.model.CffAdditionalInfo"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.parttwo.model.CffAdditionalInfo"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.parttwo.model.CffAdditionalInfo"));

	public CffAdditionalInfoModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _cffAdditionalInfoSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setCffAdditionalInfoSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cffAdditionalInfoSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CffAdditionalInfo.class;
	}

	@Override
	public String getModelClassName() {
		return CffAdditionalInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("cffMasterSid", getCffMasterSid());
		attributes.put("cffAdditionalInfoSid", getCffAdditionalInfoSid());
		attributes.put("notes", getNotes());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Integer cffMasterSid = (Integer)attributes.get("cffMasterSid");

		if (cffMasterSid != null) {
			setCffMasterSid(cffMasterSid);
		}

		Integer cffAdditionalInfoSid = (Integer)attributes.get(
				"cffAdditionalInfoSid");

		if (cffAdditionalInfoSid != null) {
			setCffAdditionalInfoSid(cffAdditionalInfoSid);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public int getCffMasterSid() {
		return _cffMasterSid;
	}

	@Override
	public void setCffMasterSid(int cffMasterSid) {
		_cffMasterSid = cffMasterSid;
	}

	@Override
	public int getCffAdditionalInfoSid() {
		return _cffAdditionalInfoSid;
	}

	@Override
	public void setCffAdditionalInfoSid(int cffAdditionalInfoSid) {
		_cffAdditionalInfoSid = cffAdditionalInfoSid;
	}

	@Override
	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	@Override
	public CffAdditionalInfo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CffAdditionalInfo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CffAdditionalInfoImpl cffAdditionalInfoImpl = new CffAdditionalInfoImpl();

		cffAdditionalInfoImpl.setCreatedDate(getCreatedDate());
		cffAdditionalInfoImpl.setCreatedBy(getCreatedBy());
		cffAdditionalInfoImpl.setCffMasterSid(getCffMasterSid());
		cffAdditionalInfoImpl.setCffAdditionalInfoSid(getCffAdditionalInfoSid());
		cffAdditionalInfoImpl.setNotes(getNotes());

		cffAdditionalInfoImpl.resetOriginalValues();

		return cffAdditionalInfoImpl;
	}

	@Override
	public int compareTo(CffAdditionalInfo cffAdditionalInfo) {
		int primaryKey = cffAdditionalInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CffAdditionalInfo)) {
			return false;
		}

		CffAdditionalInfo cffAdditionalInfo = (CffAdditionalInfo)obj;

		int primaryKey = cffAdditionalInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<CffAdditionalInfo> toCacheModel() {
		CffAdditionalInfoCacheModel cffAdditionalInfoCacheModel = new CffAdditionalInfoCacheModel();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			cffAdditionalInfoCacheModel.createdDate = createdDate.getTime();
		}
		else {
			cffAdditionalInfoCacheModel.createdDate = Long.MIN_VALUE;
		}

		cffAdditionalInfoCacheModel.createdBy = getCreatedBy();

		cffAdditionalInfoCacheModel.cffMasterSid = getCffMasterSid();

		cffAdditionalInfoCacheModel.cffAdditionalInfoSid = getCffAdditionalInfoSid();

		cffAdditionalInfoCacheModel.notes = getNotes();

		String notes = cffAdditionalInfoCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			cffAdditionalInfoCacheModel.notes = null;
		}

		return cffAdditionalInfoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", cffMasterSid=");
		sb.append(getCffMasterSid());
		sb.append(", cffAdditionalInfoSid=");
		sb.append(getCffAdditionalInfoSid());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.parttwo.model.CffAdditionalInfo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cffMasterSid</column-name><column-value><![CDATA[");
		sb.append(getCffMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cffAdditionalInfoSid</column-name><column-value><![CDATA[");
		sb.append(getCffAdditionalInfoSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CffAdditionalInfo.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CffAdditionalInfo.class
		};
	private Date _createdDate;
	private int _createdBy;
	private int _cffMasterSid;
	private int _cffAdditionalInfoSid;
	private String _notes;
	private CffAdditionalInfo _escapedModel;
}