/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.stpl.app.model.ProjectionProdHierarchy;
import com.stpl.app.model.ProjectionProdHierarchyModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ProjectionProdHierarchy service. Represents a row in the &quot;PROJECTION_PROD_HIERARCHY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProjectionProdHierarchyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectionProdHierarchyImpl}.
 * </p>
 *
 * @author
 * @see ProjectionProdHierarchyImpl
 * @see ProjectionProdHierarchy
 * @see ProjectionProdHierarchyModel
 * @generated
 */
@ProviderType
public class ProjectionProdHierarchyModelImpl extends BaseModelImpl<ProjectionProdHierarchy>
	implements ProjectionProdHierarchyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a projection prod hierarchy model instance should use the {@link ProjectionProdHierarchy} interface instead.
	 */
	public static final String TABLE_NAME = "PROJECTION_PROD_HIERARCHY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PROJECTION_MASTER_SID", Types.INTEGER },
			{ "PROJECTION_PROD_HIERARCHY_SID", Types.INTEGER },
			{ "RELATIONSHIP_LEVEL_SID", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PROJECTION_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PROJECTION_PROD_HIERARCHY_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RELATIONSHIP_LEVEL_SID", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table PROJECTION_PROD_HIERARCHY (PROJECTION_MASTER_SID INTEGER,PROJECTION_PROD_HIERARCHY_SID INTEGER not null primary key IDENTITY,RELATIONSHIP_LEVEL_SID INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table PROJECTION_PROD_HIERARCHY";
	public static final String ORDER_BY_JPQL = " ORDER BY projectionProdHierarchy.projectionProdHierarchySid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PROJECTION_PROD_HIERARCHY.PROJECTION_PROD_HIERARCHY_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.ProjectionProdHierarchy"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.ProjectionProdHierarchy"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.ProjectionProdHierarchy"));

	public ProjectionProdHierarchyModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _projectionProdHierarchySid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setProjectionProdHierarchySid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectionProdHierarchySid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectionProdHierarchy.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectionProdHierarchy.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("projectionMasterSid", getProjectionMasterSid());
		attributes.put("projectionProdHierarchySid",
			getProjectionProdHierarchySid());
		attributes.put("relationshipLevelSid", getRelationshipLevelSid());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer projectionMasterSid = (Integer)attributes.get(
				"projectionMasterSid");

		if (projectionMasterSid != null) {
			setProjectionMasterSid(projectionMasterSid);
		}

		Integer projectionProdHierarchySid = (Integer)attributes.get(
				"projectionProdHierarchySid");

		if (projectionProdHierarchySid != null) {
			setProjectionProdHierarchySid(projectionProdHierarchySid);
		}

		Integer relationshipLevelSid = (Integer)attributes.get(
				"relationshipLevelSid");

		if (relationshipLevelSid != null) {
			setRelationshipLevelSid(relationshipLevelSid);
		}
	}

	@Override
	public int getProjectionMasterSid() {
		return _projectionMasterSid;
	}

	@Override
	public void setProjectionMasterSid(int projectionMasterSid) {
		_projectionMasterSid = projectionMasterSid;
	}

	@Override
	public int getProjectionProdHierarchySid() {
		return _projectionProdHierarchySid;
	}

	@Override
	public void setProjectionProdHierarchySid(int projectionProdHierarchySid) {
		_projectionProdHierarchySid = projectionProdHierarchySid;
	}

	@Override
	public int getRelationshipLevelSid() {
		return _relationshipLevelSid;
	}

	@Override
	public void setRelationshipLevelSid(int relationshipLevelSid) {
		_relationshipLevelSid = relationshipLevelSid;
	}

	@Override
	public ProjectionProdHierarchy toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProjectionProdHierarchy)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectionProdHierarchyImpl projectionProdHierarchyImpl = new ProjectionProdHierarchyImpl();

		projectionProdHierarchyImpl.setProjectionMasterSid(getProjectionMasterSid());
		projectionProdHierarchyImpl.setProjectionProdHierarchySid(getProjectionProdHierarchySid());
		projectionProdHierarchyImpl.setRelationshipLevelSid(getRelationshipLevelSid());

		projectionProdHierarchyImpl.resetOriginalValues();

		return projectionProdHierarchyImpl;
	}

	@Override
	public int compareTo(ProjectionProdHierarchy projectionProdHierarchy) {
		int primaryKey = projectionProdHierarchy.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProjectionProdHierarchy)) {
			return false;
		}

		ProjectionProdHierarchy projectionProdHierarchy = (ProjectionProdHierarchy)obj;

		int primaryKey = projectionProdHierarchy.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ProjectionProdHierarchy> toCacheModel() {
		ProjectionProdHierarchyCacheModel projectionProdHierarchyCacheModel = new ProjectionProdHierarchyCacheModel();

		projectionProdHierarchyCacheModel.projectionMasterSid = getProjectionMasterSid();

		projectionProdHierarchyCacheModel.projectionProdHierarchySid = getProjectionProdHierarchySid();

		projectionProdHierarchyCacheModel.relationshipLevelSid = getRelationshipLevelSid();

		return projectionProdHierarchyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{projectionMasterSid=");
		sb.append(getProjectionMasterSid());
		sb.append(", projectionProdHierarchySid=");
		sb.append(getProjectionProdHierarchySid());
		sb.append(", relationshipLevelSid=");
		sb.append(getRelationshipLevelSid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.ProjectionProdHierarchy");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>projectionMasterSid</column-name><column-value><![CDATA[");
		sb.append(getProjectionMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionProdHierarchySid</column-name><column-value><![CDATA[");
		sb.append(getProjectionProdHierarchySid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relationshipLevelSid</column-name><column-value><![CDATA[");
		sb.append(getRelationshipLevelSid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProjectionProdHierarchy.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProjectionProdHierarchy.class
		};
	private int _projectionMasterSid;
	private int _projectionProdHierarchySid;
	private int _relationshipLevelSid;
	private ProjectionProdHierarchy _escapedModel;
}