package com.stpl.app.parttwo.model;

import com.stpl.portal.model.BaseModel;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.service.ServiceContext;

import com.stpl.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
 * The base model interface for the CffProdHierarchy service. Represents a row in the &quot;CFF_PROD_HIERARCHY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.stpl.app.parttwo.model.impl.CffProdHierarchyModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.stpl.app.parttwo.model.impl.CffProdHierarchyImpl}.
 * </p>
 *
 * @author
 * @see CffProdHierarchy
 * @see com.stpl.app.parttwo.model.impl.CffProdHierarchyImpl
 * @see com.stpl.app.parttwo.model.impl.CffProdHierarchyModelImpl
 * @generated
 */
public interface CffProdHierarchyModel extends BaseModel<CffProdHierarchy> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a cff prod hierarchy model instance should use the {@link CffProdHierarchy} interface instead.
     */

    /**
     * Returns the primary key of this cff prod hierarchy.
     *
     * @return the primary key of this cff prod hierarchy
     */
    public int getPrimaryKey();

    /**
     * Sets the primary key of this cff prod hierarchy.
     *
     * @param primaryKey the primary key of this cff prod hierarchy
     */
    public void setPrimaryKey(int primaryKey);

    /**
     * Returns the cff master sid of this cff prod hierarchy.
     *
     * @return the cff master sid of this cff prod hierarchy
     */
    public int getCffMasterSid();

    /**
     * Sets the cff master sid of this cff prod hierarchy.
     *
     * @param cffMasterSid the cff master sid of this cff prod hierarchy
     */
    public void setCffMasterSid(int cffMasterSid);

    /**
     * Returns the relationship level sid of this cff prod hierarchy.
     *
     * @return the relationship level sid of this cff prod hierarchy
     */
    public int getRelationshipLevelSid();

    /**
     * Sets the relationship level sid of this cff prod hierarchy.
     *
     * @param relationshipLevelSid the relationship level sid of this cff prod hierarchy
     */
    public void setRelationshipLevelSid(int relationshipLevelSid);

    /**
     * Returns the cff prod hierarchy sid of this cff prod hierarchy.
     *
     * @return the cff prod hierarchy sid of this cff prod hierarchy
     */
    public int getCffProdHierarchySid();

    /**
     * Sets the cff prod hierarchy sid of this cff prod hierarchy.
     *
     * @param cffProdHierarchySid the cff prod hierarchy sid of this cff prod hierarchy
     */
    public void setCffProdHierarchySid(int cffProdHierarchySid);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    @Override
    public Object clone();

    @Override
    public int compareTo(CffProdHierarchy cffProdHierarchy);

    @Override
    public int hashCode();

    @Override
    public CacheModel<CffProdHierarchy> toCacheModel();

    @Override
    public CffProdHierarchy toEscapedModel();

    @Override
    public CffProdHierarchy toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
