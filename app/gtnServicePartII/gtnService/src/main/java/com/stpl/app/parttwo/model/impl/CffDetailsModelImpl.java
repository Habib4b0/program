/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.parttwo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.parttwo.model.CffDetails;
import com.stpl.app.parttwo.model.CffDetailsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CffDetails service. Represents a row in the &quot;CFF_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CffDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CffDetailsImpl}.
 * </p>
 *
 * @author
 * @see CffDetailsImpl
 * @see CffDetails
 * @see CffDetailsModel
 * @generated
 */
@ProviderType
public class CffDetailsModelImpl extends BaseModelImpl<CffDetails>
	implements CffDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cff details model instance should use the {@link CffDetails} interface instead.
	 */
	public static final String TABLE_NAME = "CFF_DETAILS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CCP_DETAILS_SID", Types.INTEGER },
			{ "PROJECTION_MASTER_SID", Types.INTEGER },
			{ "CFF_MASTER_SID", Types.INTEGER },
			{ "INBOUND_STATUS", Types.VARCHAR },
			{ "CFF_DETAILS_SID", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CCP_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PROJECTION_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CFF_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CFF_DETAILS_SID", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table CFF_DETAILS (CCP_DETAILS_SID INTEGER,PROJECTION_MASTER_SID INTEGER,CFF_MASTER_SID INTEGER,INBOUND_STATUS VARCHAR(75) null,CFF_DETAILS_SID INTEGER not null primary key IDENTITY)";
	public static final String TABLE_SQL_DROP = "drop table CFF_DETAILS";
	public static final String ORDER_BY_JPQL = " ORDER BY cffDetails.cffDetailsSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CFF_DETAILS.CFF_DETAILS_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.parttwo.model.CffDetails"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.parttwo.model.CffDetails"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.parttwo.model.CffDetails"));

	public CffDetailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _cffDetailsSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setCffDetailsSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cffDetailsSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CffDetails.class;
	}

	@Override
	public String getModelClassName() {
		return CffDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ccpDetailsSid", getCcpDetailsSid());
		attributes.put("projectionMasterSid", getProjectionMasterSid());
		attributes.put("cffMasterSid", getCffMasterSid());
		attributes.put("inboundStatus", getInboundStatus());
		attributes.put("cffDetailsSid", getCffDetailsSid());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer ccpDetailsSid = (Integer)attributes.get("ccpDetailsSid");

		if (ccpDetailsSid != null) {
			setCcpDetailsSid(ccpDetailsSid);
		}

		Integer projectionMasterSid = (Integer)attributes.get(
				"projectionMasterSid");

		if (projectionMasterSid != null) {
			setProjectionMasterSid(projectionMasterSid);
		}

		Integer cffMasterSid = (Integer)attributes.get("cffMasterSid");

		if (cffMasterSid != null) {
			setCffMasterSid(cffMasterSid);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}

		Integer cffDetailsSid = (Integer)attributes.get("cffDetailsSid");

		if (cffDetailsSid != null) {
			setCffDetailsSid(cffDetailsSid);
		}
	}

	@Override
	public int getCcpDetailsSid() {
		return _ccpDetailsSid;
	}

	@Override
	public void setCcpDetailsSid(int ccpDetailsSid) {
		_ccpDetailsSid = ccpDetailsSid;
	}

	@Override
	public int getProjectionMasterSid() {
		return _projectionMasterSid;
	}

	@Override
	public void setProjectionMasterSid(int projectionMasterSid) {
		_projectionMasterSid = projectionMasterSid;
	}

	@Override
	public int getCffMasterSid() {
		return _cffMasterSid;
	}

	@Override
	public void setCffMasterSid(int cffMasterSid) {
		_cffMasterSid = cffMasterSid;
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	@Override
	public int getCffDetailsSid() {
		return _cffDetailsSid;
	}

	@Override
	public void setCffDetailsSid(int cffDetailsSid) {
		_cffDetailsSid = cffDetailsSid;
	}

	@Override
	public CffDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CffDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CffDetailsImpl cffDetailsImpl = new CffDetailsImpl();

		cffDetailsImpl.setCcpDetailsSid(getCcpDetailsSid());
		cffDetailsImpl.setProjectionMasterSid(getProjectionMasterSid());
		cffDetailsImpl.setCffMasterSid(getCffMasterSid());
		cffDetailsImpl.setInboundStatus(getInboundStatus());
		cffDetailsImpl.setCffDetailsSid(getCffDetailsSid());

		cffDetailsImpl.resetOriginalValues();

		return cffDetailsImpl;
	}

	@Override
	public int compareTo(CffDetails cffDetails) {
		int primaryKey = cffDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CffDetails)) {
			return false;
		}

		CffDetails cffDetails = (CffDetails)obj;

		int primaryKey = cffDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<CffDetails> toCacheModel() {
		CffDetailsCacheModel cffDetailsCacheModel = new CffDetailsCacheModel();

		cffDetailsCacheModel.ccpDetailsSid = getCcpDetailsSid();

		cffDetailsCacheModel.projectionMasterSid = getProjectionMasterSid();

		cffDetailsCacheModel.cffMasterSid = getCffMasterSid();

		cffDetailsCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = cffDetailsCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			cffDetailsCacheModel.inboundStatus = null;
		}

		cffDetailsCacheModel.cffDetailsSid = getCffDetailsSid();

		return cffDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{ccpDetailsSid=");
		sb.append(getCcpDetailsSid());
		sb.append(", projectionMasterSid=");
		sb.append(getProjectionMasterSid());
		sb.append(", cffMasterSid=");
		sb.append(getCffMasterSid());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append(", cffDetailsSid=");
		sb.append(getCffDetailsSid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.parttwo.model.CffDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ccpDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getCcpDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionMasterSid</column-name><column-value><![CDATA[");
		sb.append(getProjectionMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cffMasterSid</column-name><column-value><![CDATA[");
		sb.append(getCffMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cffDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getCffDetailsSid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CffDetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CffDetails.class
		};
	private int _ccpDetailsSid;
	private int _projectionMasterSid;
	private int _cffMasterSid;
	private String _inboundStatus;
	private int _cffDetailsSid;
	private CffDetails _escapedModel;
}