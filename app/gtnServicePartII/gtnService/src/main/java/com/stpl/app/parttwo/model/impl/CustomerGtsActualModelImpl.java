/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.parttwo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.parttwo.model.CustomerGtsActual;
import com.stpl.app.parttwo.model.CustomerGtsActualModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CustomerGtsActual service. Represents a row in the &quot;CUSTOMER_GTS_ACTUAL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CustomerGtsActualModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomerGtsActualImpl}.
 * </p>
 *
 * @author
 * @see CustomerGtsActualImpl
 * @see CustomerGtsActual
 * @see CustomerGtsActualModel
 * @generated
 */
@ProviderType
public class CustomerGtsActualModelImpl extends BaseModelImpl<CustomerGtsActual>
	implements CustomerGtsActualModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a customer gts actual model instance should use the {@link CustomerGtsActual} interface instead.
	 */
	public static final String TABLE_NAME = "CUSTOMER_GTS_ACTUAL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PARENT_ACCOUNT_ID", Types.VARCHAR },
			{ "CONTRACT_ID", Types.VARCHAR },
			{ "ACCOUNT_ID", Types.VARCHAR },
			{ "CUSTOMER_GTS_ACTUAL_SID", Types.INTEGER },
			{ "ORDER_RECEIVED_DATE", Types.TIMESTAMP },
			{ "ITEM_ID", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "AMOUNT", Types.DOUBLE },
			{ "ORDER_NUMBER", Types.VARCHAR },
			{ "ORGANIZATION_KEY", Types.VARCHAR },
			{ "INVOICE_DATE", Types.TIMESTAMP },
			{ "CUSTOMER_GTS_ACTUAL_INTF_ID", Types.INTEGER },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.VARCHAR },
			{ "SOURCE", Types.VARCHAR },
			{ "BATCH_ID", Types.VARCHAR },
			{ "SALES_ID", Types.VARCHAR },
			{ "ITEM_UOM", Types.VARCHAR },
			{ "INBOUND_STATUS", Types.VARCHAR },
			{ "MODIFIED_BY", Types.VARCHAR },
			{ "INVOICE_NUMBER", Types.VARCHAR },
			{ "LOT_NO", Types.VARCHAR },
			{ "INVOICE_LINE_NUMBER", Types.VARCHAR },
			{ "QUANTITY", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PARENT_ACCOUNT_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CONTRACT_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACCOUNT_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CUSTOMER_GTS_ACTUAL_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ORDER_RECEIVED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ITEM_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ORDER_NUMBER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ORGANIZATION_KEY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INVOICE_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CUSTOMER_GTS_ACTUAL_INTF_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SALES_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_UOM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INVOICE_NUMBER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LOT_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INVOICE_LINE_NUMBER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("QUANTITY", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table CUSTOMER_GTS_ACTUAL (PARENT_ACCOUNT_ID VARCHAR(75) null,CONTRACT_ID VARCHAR(75) null,ACCOUNT_ID VARCHAR(75) null,CUSTOMER_GTS_ACTUAL_SID INTEGER not null primary key IDENTITY,ORDER_RECEIVED_DATE DATE null,ITEM_ID VARCHAR(75) null,MODIFIED_DATE DATE null,AMOUNT DOUBLE,ORDER_NUMBER VARCHAR(75) null,ORGANIZATION_KEY VARCHAR(75) null,INVOICE_DATE DATE null,CUSTOMER_GTS_ACTUAL_INTF_ID INTEGER,CREATED_DATE DATE null,CREATED_BY VARCHAR(75) null,SOURCE VARCHAR(75) null,BATCH_ID VARCHAR(75) null,SALES_ID VARCHAR(75) null,ITEM_UOM VARCHAR(75) null,INBOUND_STATUS VARCHAR(75) null,MODIFIED_BY VARCHAR(75) null,INVOICE_NUMBER VARCHAR(75) null,LOT_NO VARCHAR(75) null,INVOICE_LINE_NUMBER VARCHAR(75) null,QUANTITY DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table CUSTOMER_GTS_ACTUAL";
	public static final String ORDER_BY_JPQL = " ORDER BY customerGtsActual.customerGtsActualSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CUSTOMER_GTS_ACTUAL.CUSTOMER_GTS_ACTUAL_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.parttwo.model.CustomerGtsActual"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.parttwo.model.CustomerGtsActual"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.parttwo.model.CustomerGtsActual"));

	public CustomerGtsActualModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _customerGtsActualSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setCustomerGtsActualSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _customerGtsActualSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CustomerGtsActual.class;
	}

	@Override
	public String getModelClassName() {
		return CustomerGtsActual.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("parentAccountId", getParentAccountId());
		attributes.put("contractId", getContractId());
		attributes.put("accountId", getAccountId());
		attributes.put("customerGtsActualSid", getCustomerGtsActualSid());
		attributes.put("orderReceivedDate", getOrderReceivedDate());
		attributes.put("itemId", getItemId());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("amount", getAmount());
		attributes.put("orderNumber", getOrderNumber());
		attributes.put("organizationKey", getOrganizationKey());
		attributes.put("invoiceDate", getInvoiceDate());
		attributes.put("customerGtsActualIntfId", getCustomerGtsActualIntfId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("source", getSource());
		attributes.put("batchId", getBatchId());
		attributes.put("salesId", getSalesId());
		attributes.put("itemUom", getItemUom());
		attributes.put("inboundStatus", getInboundStatus());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("invoiceNumber", getInvoiceNumber());
		attributes.put("lotNo", getLotNo());
		attributes.put("invoiceLineNumber", getInvoiceLineNumber());
		attributes.put("quantity", getQuantity());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String parentAccountId = (String)attributes.get("parentAccountId");

		if (parentAccountId != null) {
			setParentAccountId(parentAccountId);
		}

		String contractId = (String)attributes.get("contractId");

		if (contractId != null) {
			setContractId(contractId);
		}

		String accountId = (String)attributes.get("accountId");

		if (accountId != null) {
			setAccountId(accountId);
		}

		Integer customerGtsActualSid = (Integer)attributes.get(
				"customerGtsActualSid");

		if (customerGtsActualSid != null) {
			setCustomerGtsActualSid(customerGtsActualSid);
		}

		Date orderReceivedDate = (Date)attributes.get("orderReceivedDate");

		if (orderReceivedDate != null) {
			setOrderReceivedDate(orderReceivedDate);
		}

		String itemId = (String)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		String orderNumber = (String)attributes.get("orderNumber");

		if (orderNumber != null) {
			setOrderNumber(orderNumber);
		}

		String organizationKey = (String)attributes.get("organizationKey");

		if (organizationKey != null) {
			setOrganizationKey(organizationKey);
		}

		Date invoiceDate = (Date)attributes.get("invoiceDate");

		if (invoiceDate != null) {
			setInvoiceDate(invoiceDate);
		}

		Integer customerGtsActualIntfId = (Integer)attributes.get(
				"customerGtsActualIntfId");

		if (customerGtsActualIntfId != null) {
			setCustomerGtsActualIntfId(customerGtsActualIntfId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		String salesId = (String)attributes.get("salesId");

		if (salesId != null) {
			setSalesId(salesId);
		}

		String itemUom = (String)attributes.get("itemUom");

		if (itemUom != null) {
			setItemUom(itemUom);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		String invoiceNumber = (String)attributes.get("invoiceNumber");

		if (invoiceNumber != null) {
			setInvoiceNumber(invoiceNumber);
		}

		String lotNo = (String)attributes.get("lotNo");

		if (lotNo != null) {
			setLotNo(lotNo);
		}

		String invoiceLineNumber = (String)attributes.get("invoiceLineNumber");

		if (invoiceLineNumber != null) {
			setInvoiceLineNumber(invoiceLineNumber);
		}

		Double quantity = (Double)attributes.get("quantity");

		if (quantity != null) {
			setQuantity(quantity);
		}
	}

	@Override
	public String getParentAccountId() {
		if (_parentAccountId == null) {
			return StringPool.BLANK;
		}
		else {
			return _parentAccountId;
		}
	}

	@Override
	public void setParentAccountId(String parentAccountId) {
		_parentAccountId = parentAccountId;
	}

	@Override
	public String getContractId() {
		if (_contractId == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractId;
		}
	}

	@Override
	public void setContractId(String contractId) {
		_contractId = contractId;
	}

	@Override
	public String getAccountId() {
		if (_accountId == null) {
			return StringPool.BLANK;
		}
		else {
			return _accountId;
		}
	}

	@Override
	public void setAccountId(String accountId) {
		_accountId = accountId;
	}

	@Override
	public int getCustomerGtsActualSid() {
		return _customerGtsActualSid;
	}

	@Override
	public void setCustomerGtsActualSid(int customerGtsActualSid) {
		_customerGtsActualSid = customerGtsActualSid;
	}

	@Override
	public Date getOrderReceivedDate() {
		return _orderReceivedDate;
	}

	@Override
	public void setOrderReceivedDate(Date orderReceivedDate) {
		_orderReceivedDate = orderReceivedDate;
	}

	@Override
	public String getItemId() {
		if (_itemId == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemId;
		}
	}

	@Override
	public void setItemId(String itemId) {
		_itemId = itemId;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		_amount = amount;
	}

	@Override
	public String getOrderNumber() {
		if (_orderNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _orderNumber;
		}
	}

	@Override
	public void setOrderNumber(String orderNumber) {
		_orderNumber = orderNumber;
	}

	@Override
	public String getOrganizationKey() {
		if (_organizationKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _organizationKey;
		}
	}

	@Override
	public void setOrganizationKey(String organizationKey) {
		_organizationKey = organizationKey;
	}

	@Override
	public Date getInvoiceDate() {
		return _invoiceDate;
	}

	@Override
	public void setInvoiceDate(Date invoiceDate) {
		_invoiceDate = invoiceDate;
	}

	@Override
	public int getCustomerGtsActualIntfId() {
		return _customerGtsActualIntfId;
	}

	@Override
	public void setCustomerGtsActualIntfId(int customerGtsActualIntfId) {
		_customerGtsActualIntfId = customerGtsActualIntfId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public String getSalesId() {
		if (_salesId == null) {
			return StringPool.BLANK;
		}
		else {
			return _salesId;
		}
	}

	@Override
	public void setSalesId(String salesId) {
		_salesId = salesId;
	}

	@Override
	public String getItemUom() {
		if (_itemUom == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemUom;
		}
	}

	@Override
	public void setItemUom(String itemUom) {
		_itemUom = itemUom;
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public String getInvoiceNumber() {
		if (_invoiceNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _invoiceNumber;
		}
	}

	@Override
	public void setInvoiceNumber(String invoiceNumber) {
		_invoiceNumber = invoiceNumber;
	}

	@Override
	public String getLotNo() {
		if (_lotNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _lotNo;
		}
	}

	@Override
	public void setLotNo(String lotNo) {
		_lotNo = lotNo;
	}

	@Override
	public String getInvoiceLineNumber() {
		if (_invoiceLineNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _invoiceLineNumber;
		}
	}

	@Override
	public void setInvoiceLineNumber(String invoiceLineNumber) {
		_invoiceLineNumber = invoiceLineNumber;
	}

	@Override
	public double getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(double quantity) {
		_quantity = quantity;
	}

	@Override
	public CustomerGtsActual toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CustomerGtsActual)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustomerGtsActualImpl customerGtsActualImpl = new CustomerGtsActualImpl();

		customerGtsActualImpl.setParentAccountId(getParentAccountId());
		customerGtsActualImpl.setContractId(getContractId());
		customerGtsActualImpl.setAccountId(getAccountId());
		customerGtsActualImpl.setCustomerGtsActualSid(getCustomerGtsActualSid());
		customerGtsActualImpl.setOrderReceivedDate(getOrderReceivedDate());
		customerGtsActualImpl.setItemId(getItemId());
		customerGtsActualImpl.setModifiedDate(getModifiedDate());
		customerGtsActualImpl.setAmount(getAmount());
		customerGtsActualImpl.setOrderNumber(getOrderNumber());
		customerGtsActualImpl.setOrganizationKey(getOrganizationKey());
		customerGtsActualImpl.setInvoiceDate(getInvoiceDate());
		customerGtsActualImpl.setCustomerGtsActualIntfId(getCustomerGtsActualIntfId());
		customerGtsActualImpl.setCreatedDate(getCreatedDate());
		customerGtsActualImpl.setCreatedBy(getCreatedBy());
		customerGtsActualImpl.setSource(getSource());
		customerGtsActualImpl.setBatchId(getBatchId());
		customerGtsActualImpl.setSalesId(getSalesId());
		customerGtsActualImpl.setItemUom(getItemUom());
		customerGtsActualImpl.setInboundStatus(getInboundStatus());
		customerGtsActualImpl.setModifiedBy(getModifiedBy());
		customerGtsActualImpl.setInvoiceNumber(getInvoiceNumber());
		customerGtsActualImpl.setLotNo(getLotNo());
		customerGtsActualImpl.setInvoiceLineNumber(getInvoiceLineNumber());
		customerGtsActualImpl.setQuantity(getQuantity());

		customerGtsActualImpl.resetOriginalValues();

		return customerGtsActualImpl;
	}

	@Override
	public int compareTo(CustomerGtsActual customerGtsActual) {
		int primaryKey = customerGtsActual.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CustomerGtsActual)) {
			return false;
		}

		CustomerGtsActual customerGtsActual = (CustomerGtsActual)obj;

		int primaryKey = customerGtsActual.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<CustomerGtsActual> toCacheModel() {
		CustomerGtsActualCacheModel customerGtsActualCacheModel = new CustomerGtsActualCacheModel();

		customerGtsActualCacheModel.parentAccountId = getParentAccountId();

		String parentAccountId = customerGtsActualCacheModel.parentAccountId;

		if ((parentAccountId != null) && (parentAccountId.length() == 0)) {
			customerGtsActualCacheModel.parentAccountId = null;
		}

		customerGtsActualCacheModel.contractId = getContractId();

		String contractId = customerGtsActualCacheModel.contractId;

		if ((contractId != null) && (contractId.length() == 0)) {
			customerGtsActualCacheModel.contractId = null;
		}

		customerGtsActualCacheModel.accountId = getAccountId();

		String accountId = customerGtsActualCacheModel.accountId;

		if ((accountId != null) && (accountId.length() == 0)) {
			customerGtsActualCacheModel.accountId = null;
		}

		customerGtsActualCacheModel.customerGtsActualSid = getCustomerGtsActualSid();

		Date orderReceivedDate = getOrderReceivedDate();

		if (orderReceivedDate != null) {
			customerGtsActualCacheModel.orderReceivedDate = orderReceivedDate.getTime();
		}
		else {
			customerGtsActualCacheModel.orderReceivedDate = Long.MIN_VALUE;
		}

		customerGtsActualCacheModel.itemId = getItemId();

		String itemId = customerGtsActualCacheModel.itemId;

		if ((itemId != null) && (itemId.length() == 0)) {
			customerGtsActualCacheModel.itemId = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			customerGtsActualCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			customerGtsActualCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		customerGtsActualCacheModel.amount = getAmount();

		customerGtsActualCacheModel.orderNumber = getOrderNumber();

		String orderNumber = customerGtsActualCacheModel.orderNumber;

		if ((orderNumber != null) && (orderNumber.length() == 0)) {
			customerGtsActualCacheModel.orderNumber = null;
		}

		customerGtsActualCacheModel.organizationKey = getOrganizationKey();

		String organizationKey = customerGtsActualCacheModel.organizationKey;

		if ((organizationKey != null) && (organizationKey.length() == 0)) {
			customerGtsActualCacheModel.organizationKey = null;
		}

		Date invoiceDate = getInvoiceDate();

		if (invoiceDate != null) {
			customerGtsActualCacheModel.invoiceDate = invoiceDate.getTime();
		}
		else {
			customerGtsActualCacheModel.invoiceDate = Long.MIN_VALUE;
		}

		customerGtsActualCacheModel.customerGtsActualIntfId = getCustomerGtsActualIntfId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			customerGtsActualCacheModel.createdDate = createdDate.getTime();
		}
		else {
			customerGtsActualCacheModel.createdDate = Long.MIN_VALUE;
		}

		customerGtsActualCacheModel.createdBy = getCreatedBy();

		String createdBy = customerGtsActualCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			customerGtsActualCacheModel.createdBy = null;
		}

		customerGtsActualCacheModel.source = getSource();

		String source = customerGtsActualCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			customerGtsActualCacheModel.source = null;
		}

		customerGtsActualCacheModel.batchId = getBatchId();

		String batchId = customerGtsActualCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			customerGtsActualCacheModel.batchId = null;
		}

		customerGtsActualCacheModel.salesId = getSalesId();

		String salesId = customerGtsActualCacheModel.salesId;

		if ((salesId != null) && (salesId.length() == 0)) {
			customerGtsActualCacheModel.salesId = null;
		}

		customerGtsActualCacheModel.itemUom = getItemUom();

		String itemUom = customerGtsActualCacheModel.itemUom;

		if ((itemUom != null) && (itemUom.length() == 0)) {
			customerGtsActualCacheModel.itemUom = null;
		}

		customerGtsActualCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = customerGtsActualCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			customerGtsActualCacheModel.inboundStatus = null;
		}

		customerGtsActualCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = customerGtsActualCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			customerGtsActualCacheModel.modifiedBy = null;
		}

		customerGtsActualCacheModel.invoiceNumber = getInvoiceNumber();

		String invoiceNumber = customerGtsActualCacheModel.invoiceNumber;

		if ((invoiceNumber != null) && (invoiceNumber.length() == 0)) {
			customerGtsActualCacheModel.invoiceNumber = null;
		}

		customerGtsActualCacheModel.lotNo = getLotNo();

		String lotNo = customerGtsActualCacheModel.lotNo;

		if ((lotNo != null) && (lotNo.length() == 0)) {
			customerGtsActualCacheModel.lotNo = null;
		}

		customerGtsActualCacheModel.invoiceLineNumber = getInvoiceLineNumber();

		String invoiceLineNumber = customerGtsActualCacheModel.invoiceLineNumber;

		if ((invoiceLineNumber != null) && (invoiceLineNumber.length() == 0)) {
			customerGtsActualCacheModel.invoiceLineNumber = null;
		}

		customerGtsActualCacheModel.quantity = getQuantity();

		return customerGtsActualCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{parentAccountId=");
		sb.append(getParentAccountId());
		sb.append(", contractId=");
		sb.append(getContractId());
		sb.append(", accountId=");
		sb.append(getAccountId());
		sb.append(", customerGtsActualSid=");
		sb.append(getCustomerGtsActualSid());
		sb.append(", orderReceivedDate=");
		sb.append(getOrderReceivedDate());
		sb.append(", itemId=");
		sb.append(getItemId());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", orderNumber=");
		sb.append(getOrderNumber());
		sb.append(", organizationKey=");
		sb.append(getOrganizationKey());
		sb.append(", invoiceDate=");
		sb.append(getInvoiceDate());
		sb.append(", customerGtsActualIntfId=");
		sb.append(getCustomerGtsActualIntfId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", salesId=");
		sb.append(getSalesId());
		sb.append(", itemUom=");
		sb.append(getItemUom());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", invoiceNumber=");
		sb.append(getInvoiceNumber());
		sb.append(", lotNo=");
		sb.append(getLotNo());
		sb.append(", invoiceLineNumber=");
		sb.append(getInvoiceLineNumber());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.parttwo.model.CustomerGtsActual");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>parentAccountId</column-name><column-value><![CDATA[");
		sb.append(getParentAccountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractId</column-name><column-value><![CDATA[");
		sb.append(getContractId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accountId</column-name><column-value><![CDATA[");
		sb.append(getAccountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerGtsActualSid</column-name><column-value><![CDATA[");
		sb.append(getCustomerGtsActualSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderReceivedDate</column-name><column-value><![CDATA[");
		sb.append(getOrderReceivedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderNumber</column-name><column-value><![CDATA[");
		sb.append(getOrderNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationKey</column-name><column-value><![CDATA[");
		sb.append(getOrganizationKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>invoiceDate</column-name><column-value><![CDATA[");
		sb.append(getInvoiceDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerGtsActualIntfId</column-name><column-value><![CDATA[");
		sb.append(getCustomerGtsActualIntfId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>salesId</column-name><column-value><![CDATA[");
		sb.append(getSalesId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemUom</column-name><column-value><![CDATA[");
		sb.append(getItemUom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>invoiceNumber</column-name><column-value><![CDATA[");
		sb.append(getInvoiceNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lotNo</column-name><column-value><![CDATA[");
		sb.append(getLotNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>invoiceLineNumber</column-name><column-value><![CDATA[");
		sb.append(getInvoiceLineNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CustomerGtsActual.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CustomerGtsActual.class
		};
	private String _parentAccountId;
	private String _contractId;
	private String _accountId;
	private int _customerGtsActualSid;
	private Date _orderReceivedDate;
	private String _itemId;
	private Date _modifiedDate;
	private double _amount;
	private String _orderNumber;
	private String _organizationKey;
	private Date _invoiceDate;
	private int _customerGtsActualIntfId;
	private Date _createdDate;
	private String _createdBy;
	private String _source;
	private String _batchId;
	private String _salesId;
	private String _itemUom;
	private String _inboundStatus;
	private String _modifiedBy;
	private String _invoiceNumber;
	private String _lotNo;
	private String _invoiceLineNumber;
	private double _quantity;
	private CustomerGtsActual _escapedModel;
}