/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.StChSalesProjectionMaster;
import com.stpl.app.model.StChSalesProjectionMasterModel;
import com.stpl.app.service.persistence.StChSalesProjectionMasterPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StChSalesProjectionMaster service. Represents a row in the &quot;ST_CH_SALES_PROJECTION_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link StChSalesProjectionMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StChSalesProjectionMasterImpl}.
 * </p>
 *
 * @author
 * @see StChSalesProjectionMasterImpl
 * @see StChSalesProjectionMaster
 * @see StChSalesProjectionMasterModel
 * @generated
 */
@ProviderType
public class StChSalesProjectionMasterModelImpl extends BaseModelImpl<StChSalesProjectionMaster>
	implements StChSalesProjectionMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a st ch sales projection master model instance should use the {@link StChSalesProjectionMaster} interface instead.
	 */
	public static final String TABLE_NAME = "ST_CH_SALES_PROJECTION_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "LAST_MODIFIED_DATE", Types.TIMESTAMP },
			{ "CHECK_RECORD", Types.BOOLEAN },
			{ "CALCULATION_PERIODS", Types.VARCHAR },
			{ "PROJECTION_DETAILS_SID", Types.INTEGER },
			{ "USER_ID", Types.INTEGER },
			{ "SESSION_ID", Types.INTEGER },
			{ "METHODOLOGY", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("LAST_MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CHECK_RECORD", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("CALCULATION_PERIODS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECTION_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("USER_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SESSION_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("METHODOLOGY", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table ST_CH_SALES_PROJECTION_MASTER (LAST_MODIFIED_DATE DATE null,CHECK_RECORD BOOLEAN,CALCULATION_PERIODS VARCHAR(75) null,PROJECTION_DETAILS_SID INTEGER not null IDENTITY,USER_ID INTEGER not null IDENTITY,SESSION_ID INTEGER not null IDENTITY,METHODOLOGY VARCHAR(75) null,primary key (PROJECTION_DETAILS_SID, USER_ID, SESSION_ID))";
	public static final String TABLE_SQL_DROP = "drop table ST_CH_SALES_PROJECTION_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY stChSalesProjectionMaster.id.projectionDetailsSid ASC, stChSalesProjectionMaster.id.userId ASC, stChSalesProjectionMaster.id.sessionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ST_CH_SALES_PROJECTION_MASTER.PROJECTION_DETAILS_SID ASC, ST_CH_SALES_PROJECTION_MASTER.USER_ID ASC, ST_CH_SALES_PROJECTION_MASTER.SESSION_ID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.StChSalesProjectionMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.StChSalesProjectionMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.StChSalesProjectionMaster"));

	public StChSalesProjectionMasterModelImpl() {
	}

	@Override
	public StChSalesProjectionMasterPK getPrimaryKey() {
		return new StChSalesProjectionMasterPK(_projectionDetailsSid, _userId,
			_sessionId);
	}

	@Override
	public void setPrimaryKey(StChSalesProjectionMasterPK primaryKey) {
		setProjectionDetailsSid(primaryKey.projectionDetailsSid);
		setUserId(primaryKey.userId);
		setSessionId(primaryKey.sessionId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new StChSalesProjectionMasterPK(_projectionDetailsSid, _userId,
			_sessionId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((StChSalesProjectionMasterPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return StChSalesProjectionMaster.class;
	}

	@Override
	public String getModelClassName() {
		return StChSalesProjectionMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lastModifiedDate", getLastModifiedDate());
		attributes.put("checkRecord", getCheckRecord());
		attributes.put("calculationPeriods", getCalculationPeriods());
		attributes.put("projectionDetailsSid", getProjectionDetailsSid());
		attributes.put("userId", getUserId());
		attributes.put("sessionId", getSessionId());
		attributes.put("methodology", getMethodology());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date lastModifiedDate = (Date)attributes.get("lastModifiedDate");

		if (lastModifiedDate != null) {
			setLastModifiedDate(lastModifiedDate);
		}

		Boolean checkRecord = (Boolean)attributes.get("checkRecord");

		if (checkRecord != null) {
			setCheckRecord(checkRecord);
		}

		String calculationPeriods = (String)attributes.get("calculationPeriods");

		if (calculationPeriods != null) {
			setCalculationPeriods(calculationPeriods);
		}

		Integer projectionDetailsSid = (Integer)attributes.get(
				"projectionDetailsSid");

		if (projectionDetailsSid != null) {
			setProjectionDetailsSid(projectionDetailsSid);
		}

		Integer userId = (Integer)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Integer sessionId = (Integer)attributes.get("sessionId");

		if (sessionId != null) {
			setSessionId(sessionId);
		}

		String methodology = (String)attributes.get("methodology");

		if (methodology != null) {
			setMethodology(methodology);
		}
	}

	@Override
	public Date getLastModifiedDate() {
		return _lastModifiedDate;
	}

	@Override
	public void setLastModifiedDate(Date lastModifiedDate) {
		_lastModifiedDate = lastModifiedDate;
	}

	@Override
	public boolean getCheckRecord() {
		return _checkRecord;
	}

	@Override
	public boolean isCheckRecord() {
		return _checkRecord;
	}

	@Override
	public void setCheckRecord(boolean checkRecord) {
		_checkRecord = checkRecord;
	}

	@Override
	public String getCalculationPeriods() {
		if (_calculationPeriods == null) {
			return StringPool.BLANK;
		}
		else {
			return _calculationPeriods;
		}
	}

	@Override
	public void setCalculationPeriods(String calculationPeriods) {
		_calculationPeriods = calculationPeriods;
	}

	@Override
	public int getProjectionDetailsSid() {
		return _projectionDetailsSid;
	}

	@Override
	public void setProjectionDetailsSid(int projectionDetailsSid) {
		_projectionDetailsSid = projectionDetailsSid;
	}

	@Override
	public int getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(int userId) {
		_userId = userId;
	}

	@Override
	public int getSessionId() {
		return _sessionId;
	}

	@Override
	public void setSessionId(int sessionId) {
		_sessionId = sessionId;
	}

	@Override
	public String getMethodology() {
		if (_methodology == null) {
			return StringPool.BLANK;
		}
		else {
			return _methodology;
		}
	}

	@Override
	public void setMethodology(String methodology) {
		_methodology = methodology;
	}

	@Override
	public StChSalesProjectionMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StChSalesProjectionMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StChSalesProjectionMasterImpl stChSalesProjectionMasterImpl = new StChSalesProjectionMasterImpl();

		stChSalesProjectionMasterImpl.setLastModifiedDate(getLastModifiedDate());
		stChSalesProjectionMasterImpl.setCheckRecord(getCheckRecord());
		stChSalesProjectionMasterImpl.setCalculationPeriods(getCalculationPeriods());
		stChSalesProjectionMasterImpl.setProjectionDetailsSid(getProjectionDetailsSid());
		stChSalesProjectionMasterImpl.setUserId(getUserId());
		stChSalesProjectionMasterImpl.setSessionId(getSessionId());
		stChSalesProjectionMasterImpl.setMethodology(getMethodology());

		stChSalesProjectionMasterImpl.resetOriginalValues();

		return stChSalesProjectionMasterImpl;
	}

	@Override
	public int compareTo(StChSalesProjectionMaster stChSalesProjectionMaster) {
		StChSalesProjectionMasterPK primaryKey = stChSalesProjectionMaster.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StChSalesProjectionMaster)) {
			return false;
		}

		StChSalesProjectionMaster stChSalesProjectionMaster = (StChSalesProjectionMaster)obj;

		StChSalesProjectionMasterPK primaryKey = stChSalesProjectionMaster.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<StChSalesProjectionMaster> toCacheModel() {
		StChSalesProjectionMasterCacheModel stChSalesProjectionMasterCacheModel = new StChSalesProjectionMasterCacheModel();

		stChSalesProjectionMasterCacheModel.stChSalesProjectionMasterPK = getPrimaryKey();

		Date lastModifiedDate = getLastModifiedDate();

		if (lastModifiedDate != null) {
			stChSalesProjectionMasterCacheModel.lastModifiedDate = lastModifiedDate.getTime();
		}
		else {
			stChSalesProjectionMasterCacheModel.lastModifiedDate = Long.MIN_VALUE;
		}

		stChSalesProjectionMasterCacheModel.checkRecord = getCheckRecord();

		stChSalesProjectionMasterCacheModel.calculationPeriods = getCalculationPeriods();

		String calculationPeriods = stChSalesProjectionMasterCacheModel.calculationPeriods;

		if ((calculationPeriods != null) && (calculationPeriods.length() == 0)) {
			stChSalesProjectionMasterCacheModel.calculationPeriods = null;
		}

		stChSalesProjectionMasterCacheModel.projectionDetailsSid = getProjectionDetailsSid();

		stChSalesProjectionMasterCacheModel.userId = getUserId();

		stChSalesProjectionMasterCacheModel.sessionId = getSessionId();

		stChSalesProjectionMasterCacheModel.methodology = getMethodology();

		String methodology = stChSalesProjectionMasterCacheModel.methodology;

		if ((methodology != null) && (methodology.length() == 0)) {
			stChSalesProjectionMasterCacheModel.methodology = null;
		}

		return stChSalesProjectionMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{lastModifiedDate=");
		sb.append(getLastModifiedDate());
		sb.append(", checkRecord=");
		sb.append(getCheckRecord());
		sb.append(", calculationPeriods=");
		sb.append(getCalculationPeriods());
		sb.append(", projectionDetailsSid=");
		sb.append(getProjectionDetailsSid());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", sessionId=");
		sb.append(getSessionId());
		sb.append(", methodology=");
		sb.append(getMethodology());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.StChSalesProjectionMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getLastModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkRecord</column-name><column-value><![CDATA[");
		sb.append(getCheckRecord());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calculationPeriods</column-name><column-value><![CDATA[");
		sb.append(getCalculationPeriods());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectionDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getProjectionDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sessionId</column-name><column-value><![CDATA[");
		sb.append(getSessionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>methodology</column-name><column-value><![CDATA[");
		sb.append(getMethodology());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = StChSalesProjectionMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			StChSalesProjectionMaster.class
		};
	private Date _lastModifiedDate;
	private boolean _checkRecord;
	private String _calculationPeriods;
	private int _projectionDetailsSid;
	private int _userId;
	private int _sessionId;
	private String _methodology;
	private StChSalesProjectionMaster _escapedModel;
}