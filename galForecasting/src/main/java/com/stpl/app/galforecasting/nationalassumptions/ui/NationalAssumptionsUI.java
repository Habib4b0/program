/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stpl.app.galforecasting.nationalassumptions.ui;

import com.stpl.app.galforecasting.nationalassumptions.ui.view.DataSelectionView;
import com.stpl.app.galforecasting.nationalassumptions.ui.view.NationalAssumptionsView;
import com.stpl.app.galforecasting.nationalassumptions.util.CommonUtils;
import static com.stpl.app.galforecasting.nationalassumptions.util.Constants.CommonConstants.ACTION;
import static com.stpl.app.galforecasting.nationalassumptions.util.Constants.CommonConstants.EQUAL;
import com.stpl.app.galforecasting.utils.Constant;
import static com.stpl.app.galforecasting.utils.Constant.PROJECTION_ID;
import static com.stpl.app.galforecasting.utils.Constant.USER_ID;
import com.stpl.portal.kernel.util.JavaConstants;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.Navigator;
import com.vaadin.server.Page;
import com.vaadin.server.VaadinRequest;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.UI;
import java.util.HashMap;
import javax.portlet.PortletConfig;
import javax.portlet.PortletRequest;
import org.apache.commons.lang.StringUtils;
import org.jboss.logging.Logger;

/**
 *
 * @author gopinath
 */
public class NationalAssumptionsUI extends UI {

    /**
     * The Constant serialVersionUID.
     */
    private static final long serialVersionUID = -1698071209409581013L;

    /**
     * The navigator.
     */
    @AutoGenerated
    private Navigator navigator;

    /**
     * The Constant LOGGER.
     */
    private static final Logger LOGGER = Logger.getLogger(NationalAssumptionsUI.class);
    /**
     * The projection id.
     */
    private String projectionId;

    /* (non-Javadoc)
     * @see com.vaadin.ui.UI#init(com.vaadin.server.VaadinRequest)
     */
    @Override
    protected void init(final VaadinRequest request) {
        try {
            LOGGER.info("Starting of init method");
            addStyleName("bootstrap bootstrap-ui bootstrap-forecast bootstrap-nm");
            final String userId = request.getRemoteUser();
            final String pageParameters = Page.getCurrent().getLocation().getQuery();
            PortletConfig portletConfig = (PortletConfig) request.getAttribute(JavaConstants.JAVAX_PORTLET_CONFIG);
            PortletRequest portletRequest = (PortletRequest) request.getAttribute(JavaConstants.JAVAX_PORTLET_REQUEST);
            com.stpl.app.galforecasting.utils.CommonUtils.setPortletSession(portletRequest.getPortletSession());
            com.stpl.app.galforecasting.utils.CommonUtils.setPortalConfig(portletConfig);

            if (pageParameters != null) {
                final String[] parameters = pageParameters.split("&");
                String parametersFromProjection[];

                parametersFromProjection = parameters[0].split(EQUAL.getConstant());

                final HashMap<String, String> hmValue = new HashMap<String, String>();
                hmValue.put(parametersFromProjection[0], parametersFromProjection[1]);
            }
            VaadinSession.getCurrent().setAttribute(USER_ID, userId);
            VaadinSession.getCurrent().setAttribute(ACTION.getConstant(), StringUtils.EMPTY);
            VaadinSession.getCurrent().setAttribute(Constant.PORTLET_NAME, portletConfig.getPortletName());
            CommonUtils.getUserName();
            CommonUtils.getStartandTodate();

            /**
             * Registering navigation views
             */
            navigator = new Navigator(this, this);
            navigator.addView(DataSelectionView.NAME, new DataSelectionView());
            navigator.addView(NationalAssumptionsView.NAME, NationalAssumptionsView.class);
            navigator.setErrorView(new DataSelectionView());

            if (projectionId == null) {
                VaadinSession.getCurrent().setAttribute(PROJECTION_ID, 0);
            } else {
                VaadinSession.getCurrent().setAttribute(PROJECTION_ID, Integer.parseInt(projectionId.trim()));

                navigator.navigateTo(DataSelectionView.NAME);
            }

        } catch (Exception ex) {
            LOGGER.error(ex.getMessage());
        }
        LOGGER.info("End of init method");
    }

}
