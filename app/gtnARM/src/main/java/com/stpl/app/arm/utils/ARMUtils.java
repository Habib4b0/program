/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stpl.app.arm.utils;

import com.stpl.app.arm.utils.ARMUtils.SalesVariables;
import com.stpl.app.utils.VariableConstants;
import com.stpl.ifs.ui.util.NumericConstants;
import com.stpl.ifs.util.constants.ARMConstants;
import com.stpl.ifs.util.constants.Trx8Constants;
import com.vaadin.server.Resource;
import com.vaadin.server.ThemeResource;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TreeMap;
import org.apache.commons.lang.StringUtils;

/**
 *
 * @author
 */
public class ARMUtils {

    public static final String PAYMENT_RATIO = "Payment Ratio";

    private ARMUtils() {
    }

    public static final DecimalFormat TWO_DECIMAL_CURRENCY = new DecimalFormat("$#,##,##0.00");
    public static final DecimalFormat ZERO_DECIMAL_CURRENCY = new DecimalFormat("$#,##,##0");
    public static final DecimalFormat ZERO_DECIMAL = new DecimalFormat("#,##,##0");
    public static final DecimalFormat TWO_DECIMAL_PERCENT = new DecimalFormat("#,##0.00");
    private static final String UDC_6 = "UDC_6";
    private static final String UDC_5 = "UDC_5";
    private static final String UDC_4 = "UDC_4";
    private static final String UDC_3 = "UDC_3";
    private static final String UDC_2 = "UDC_2";
    private static final String UDC_1 = "UDC_1";
    private static final String CATEGORY = "CATEGORY";
    private static final String FUTURE_2 = "FUTURE_2";
    private static final String FUTURE_1 = "FUTURE_1";
    private static final String PROJECT = "PROJECT";
    private static final String DIVISION = "DIVISION";
    private static final String COST_CENTER = "COST_CENTER";
    private static final String ACCOUNT_INDICATOR1 = "ACCOUNT_INDICATOR";
    private static final String ACCOUNT_TYPE = "ACCOUNT_TYPE";
    private static final String ADJUSTMENT_LEVEL = "ADJUSTMENT_LEVEL";
    private static final String ADJUSTMENT_TYPE = "ADJUSTMENT_TYPE";
    private static final String ACCOUNT = "ACCOUNT";
    private static final String CURRENCY = "CURRENCY";
    private static final String ACCOUNT_CATEGORY = "ACCOUNT_CATEGORY";
    private static final String WORK_FLOW_STATUS = "WORKFLOW_STATUS";
    private static final String WORKFLOW_NAME = "WORKFLOW_NAME";
    private static final String WORKFLOW_ID = "WORKFLOW_ID";

    private static final String[] ADJUSTMENT_RESERVE_SEARCH_HEADERS = new String[]{CommonConstant.COMPANY_NO_HEADER, CommonConstant.COMPANY_NAME_HEADER, CommonConstant.BUSINESS_UNIT_NO_HEADER, CommonConstant.BUSINESS_UNIT_NAME_HEADER, "Deduction Category", "Deduction Type", "Deduction Program", CommonConstant.CREATED_BY_HEADER, CommonConstant.CREATED_DATE_HEADER, CommonConstant.MODIFIED_DATE_HEADER, CommonConstant.SOURCE_HEADER};
    private static final Object[] ADJUSTMENT_RESERVE_SEARCH_COLUMNS = new Object[]{CommonConstant.COMPANY_NO, CommonConstant.COMPANY_NAME, CommonConstant.BUSINESS_UNIT_NO,
        CommonConstant.BUSINESS_UNIT_NAME, "deductionCategory", "deductionType", "deductionProgram",
        CommonConstant.CREATED_BY, CommonConstant.CREATED_DATE, CommonConstant.MODIFIED_DATE, CommonConstant.SOURCE};
    private static final String ACCOUNT_INDICATOR = "Account Indicator";
    private static final String DATE_TYPE = "Date Type";

    private static final String[] ADJUSTMENT_RESERVE_ADD_HEADERS_RESERVE_DETAILS = new String[]{"", CommonConstant.ADJUSTMENT_TYPE_HEADER, CommonConstant.ADJUSTMENT_LEVEL_HEADER, CommonConstant.ACCOUNT_CATEGORY_HEADER, CommonConstant.ACCOUNT_TYPE_HEADER, CommonConstant.ACCOUNT_HEADER, CommonConstant.ACCOUNT_DESCRIPTION_HEADER, ACCOUNT_INDICATOR, "Debit Indicator", "Credit Indicator", "Report Indicator", CommonConstant.COMPANY_NO_HEADER, CommonConstant.DIVISION_HEADER, CommonConstant.BUSINESS_UNIT_HEADER, CommonConstant.COST_CENTER_HEADER, CommonConstant.PROJECT_HEADER, CommonConstant.FUTURE_1_HEADER, CommonConstant.FUTURE_2_HEADER, "Balance Type", "Database", "Data Access Set", "Chart Of Accounts",
        "Ledger", "Category", CommonConstant.SOURCE_HEADER, "Currency", "Journal Name", "Journal Description", "Reverse Journal",
        "Reversal Period/Date", "Line Description", CommonConstant.UDC_1_HEADER, CommonConstant.UDC_2_HEADER, CommonConstant.UDC_3_HEADER, CommonConstant.UDC_4_HEADER, CommonConstant.UDC_5_HEADER, CommonConstant.UDC_6_HEADER};
    private static final Object[] ADJUSTMENT_RESERVE_ADD_COLUMNS_RESERVE_DETAILS = new Object[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_LEVEL.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_CATEGORY.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTDESCRIPTION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTINDICTOR.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.DEBIT_INDICATOR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.CREDIT_INDICATOR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.REPORT_INDICATOR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.COMPANYNO.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.DIVISION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BUSINESS_UNIT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.COST_CENTER.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.PROJECT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.FUTURE1.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.FUTURE2.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BALANCE_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.DATABASE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.DATA_ACCESS_SET.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.CHART_OF_ACCOUNTS.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.LEDGER.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.CATEGORY.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.SOURCE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.CURRENCY.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_NAME.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_DESCRIPTION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.REVERSE_JOURNAL.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.REVERSAL_PERIOD_DATE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.LINE_DESCRIPTION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC1.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC2.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC3.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC4.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC5.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC6.getConstant()};

    private static final Object[] ADJUSTMENT_RESERVE_FOR_EXCEL_COLUMNS_RESERVE_DETAILS = new Object[]{
        ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_TYPE_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_LEVEL_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_CATEGORY_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_TYPE_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTDESCRIPTION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_INDICTOR_STR.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.DEBIT_INDICATOR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.CREDIT_INDICATOR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.COMPANYNO.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.DIVISION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BUSINESS_UNIT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.COST_CENTER.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.PROJECT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.FUTURE1.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.FUTURE2.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BALANCE_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.DATABASE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.DATA_ACCESS_SET.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.CHART_OF_ACCOUNTS.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.LEDGER.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.CATEGORY.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.SOURCE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.CURRENCY_STR.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_NAME.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_DESCRIPTION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.REVERSE_JOURNAL.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.REVERSAL_PERIOD_DATE_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.LINE_DESCRIPTION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC1_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC2_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC3_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC4_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC5_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC6_STR.getConstant()};

    private static final Object[] REPORT_TYPE_SINGLE_VISIBLE_COLUMN = new Object[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_ACCOUNT.getConstant()};
    private static final String[] REPORT_TYPE_SINGLE_HEADER_COLUMN = new String[]{StringUtils.EMPTY, ARMConstants.getAccount()};

    private static final Object[] REPORT_TYPE_DOUBLE_VISIBLE_COLUMN = new Object[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_START_BALANCE.getConstant()};
    private static final String[] REPORT_TYPE_DOUBLE_HEADER_COLUMN = new String[]{StringUtils.EMPTY, ARMConstants.getStartBalance()};

    private static final Object[] REPORT_TYPE_PIPELINE_SINGLE_VISIBLE_COLUMN = new Object[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PIPELINE_ACCRUAL_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_ACCRUAL_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PIPELINE_INVENTORY_TRUPUP_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_REFORECAST_ADJ_TYPE.getConstant()};
    private static final String[] REPORT_TYPE_PIPELINE_SINGLE_HEADER_COLUMN = new String[]{StringUtils.EMPTY, ARMConstants.getAccount(), ARMConstants.getAdjustmentType(), ARMConstants.getAdjustmentType(), ARMConstants.getAdjustmentType(), ARMConstants.getAdjustmentType()};

    private static final Object[] REPORT_TYPE_PIPELINE_DOUBLE_VISIBLE_COLUMN = new Object[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_START_BALANCE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PIPELINE_ACCRUAL.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_ACCRUAL.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PIPELINE_INVENTORY_TRUPUP.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_REFORECAST.getConstant()};
    private static final String[] REPORT_TYPE_PIPELINE_DOUBLE_HEADER_COLUMN = new String[]{StringUtils.EMPTY, ARMConstants.getStartBalance(), ARMConstants.getPipelineAccrualHeader(), ARMConstants.getDemandAccrualConstant(), ARMConstants.getPipelineInverntorytrueupHeader(), ARMConstants.getDemandReforecastHeader()};

    private static final Object[] REPORT_TYPE_DEMAND_SINGLE_VISIBLE_COLUMN = new Object[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_ACCRUAL_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_REFORECAST_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_TRUEUP_ADJ_TYPE.getConstant()};
    private static final String[] REPORT_TYPE_DEMAND_SINGLE_HEADER_COLUMN = new String[]{StringUtils.EMPTY, ARMConstants.getAccount(), ARMConstants.getAdjustmentType(), ARMConstants.getAdjustmentType(), ARMConstants.getAdjustmentType()};

    private static final Object[] REPORT_TYPE_DEMAND_DOUBLE_VISIBLE_COLUMN = new Object[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_START_BALANCE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_ACCRUAL.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_REFORECAST.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_TRUEUP.getConstant()};
    private static final String[] REPORT_TYPE_DEMAND_DOUBLE_HEADER_COLUMN = new String[]{StringUtils.EMPTY, ARMConstants.getStartBalance(), ARMConstants.getDemandAccrualConstant(), ARMConstants.getDemandReforecastHeader(), ARMConstants.getPaymentTrueUp()};

    private static final Object[] REPORT_TYPE_LIABILITY_SINGLE_VISIBLE_COLUMN = new Object[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_FEES_ACCRUAL_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_INFLATION_ADJUTMENT_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_CREDIT_CARD_FEES_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_OTHER_FIXED_DOLLAR_FEES_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_INVENTORY_VALUATION_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PAYMENT_TRUEUP_ADJ_TYPE.getConstant()};
    private static final String[] REPORT_TYPE_LIABILITY_SINGLE_HEADER_COLUMN = new String[]{StringUtils.EMPTY, ARMConstants.getAccount(), ARMConstants.getAdjustmentType(), ARMConstants.getAdjustmentType(), ARMConstants.getAdjustmentType(), ARMConstants.getAdjustmentType(), ARMConstants.getAdjustmentType(), ARMConstants.getAdjustmentType()};

    private static final Object[] REPORT_TYPE_LIABILITY_DOUBLE_VISIBLE_COLUMN = new Object[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_START_BALANCE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_FEES_ACCRUAL.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_INFLATION_ADJUTMENT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_CREDIT_CARD_FEES.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_OTHER_FIXED_DOLLAR_FEES.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_INVENTORY_VALUATION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PAYMENT_TRUEUP.getConstant()};
    private static final String[] REPORT_TYPE_LIABILITY_DOUBLE_HEADER_COLUMN = new String[]{StringUtils.EMPTY, ARMConstants.getStartBalance(), ARMConstants.getFeesAcrual(), ARMConstants.getInflationAdjustment(), ARMConstants.getCreditCardfees(), ARMConstants.getOtherFixedDollarAdjustment(), ARMConstants.getInventoryValuation(), ARMConstants.getPaymentTrueUp()};

    private static final Object[] REPORT_TYPE_RETURN_SINGLE_VISIBLE_COLUMN = new Object[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_RETURN_RESERVE_ADJ_TYPE.getConstant()};
    private static final String[] REPORT_TYPE_RETURN_SINGLE_HEADER_COLUMN = new String[]{StringUtils.EMPTY, ARMConstants.getAccount(), ARMConstants.getAdjustmentType()};

    private static final Object[] REPORT_TYPE_RETURN_DOUBLE_VISIBLE_COLUMN = new Object[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_START_BALANCE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_RETURN_RESERVE.getConstant()};
    private static final String[] REPORT_TYPE_RETURN_DOUBLE_HEADER_COLUMN = new String[]{StringUtils.EMPTY, ARMConstants.getStartBalance(), ARMConstants.getReturnReserve()};
    private static final Object[] REPORT_TYPE_SINGLEVISIBLE_COLUMN = new Object[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PIPELINE_ACCRUAL_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_ACCRUAL_ADJ_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_TRUEUP_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PIPELINE_INVENTORY_TRUPUP_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_REFORECAST_ADJ_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_FEES_ACCRUAL_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_INFLATION_ADJUTMENT_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_CREDIT_CARD_FEES_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_OTHER_FIXED_DOLLAR_FEES_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_INVENTORY_VALUATION_ADJ_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PAYMENT_TRUEUP_ADJ_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_RETURN_RESERVE_ADJ_TYPE.getConstant()};
    private static final Object[] BAL_SUMMARY_CONF_COMBO_HEADER = new Object[]{
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PIPELINE_ACCRUAL_ADJ_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_ACCRUAL_ADJ_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PIPELINE_INVENTORY_TRUPUP_ADJ_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_REFORECAST_ADJ_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_TRUEUP_ADJ_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_FEES_ACCRUAL_ADJ_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_INFLATION_ADJUTMENT_ADJ_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_CREDIT_CARD_FEES_ADJ_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_OTHER_FIXED_DOLLAR_FEES_ADJ_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_INVENTORY_VALUATION_ADJ_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PAYMENT_TRUEUP_ADJ_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_RETURN_RESERVE_ADJ_TYPE.getConstant()};

    private static final Object[] ADJUSTMENT_RESERVE_COLUMN = new String[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_ADJUSTMENT_TYPE.getConstant()};
    private static final String[] ADJUSTMENT_RESERVE_HEADER = new String[]{StringUtils.EMPTY, ARMConstants.getAdjustmentType()};

    private static final Object[] ADJUSTMENT_RESERVE_TX1_COLUMN = new String[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_ADJUSTMENT_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_PIPELINE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_PIPELINE_ACCOUNT.getConstant()};
    private static final String[] ADJUSTMENT_RESERVE_TX1_HEADER = new String[]{StringUtils.EMPTY, ARMConstants.getAdjustmentType(), ARMConstants.getPipelineAccrualHeader(), ARMConstants.getAccount()};

    private static final Object[] ADJUSTMENT_RESERVE_TX2_COLUMN = new String[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_ADJUSTMENT_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST_ACCOUNT.getConstant()};
    private static final String[] ADJUSTMENT_RESERVE_TX2_HEADER = new String[]{StringUtils.EMPTY, ARMConstants.getAdjustmentType(), ARMConstants.getDemandAccrualConstant(), ARMConstants.getAccount(), ARMConstants.getDemandReforecastHeader(), ARMConstants.getAccount()};

    private static final Object[] ADJUSTMENT_RESERVE_TX3_COLUMN = new String[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_ADJUSTMENT_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_PIPELINE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_PIPELINE_ACCOUNT.getConstant()};
    private static final String[] ADJUSTMENT_RESERVE_TX3_HEADER = new String[]{StringUtils.EMPTY, ARMConstants.getAdjustmentType(), ARMConstants.getCurrentPipeline(), ARMConstants.getAccount()};

    private static final Object[] ADJUSTMENT_RESERVE_TX4_COLUMN = new String[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_ADJUSTMENT_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST_ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_PAYMENT_RECON.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_PAYMENT_RECON_ACCOUNT.getConstant()};
    private static final String[] ADJUSTMENT_RESERVE_TX4_HEADER = new String[]{StringUtils.EMPTY, ARMConstants.getAdjustmentType(), ARMConstants.getDemandAccrualConstant(), ARMConstants.getAccount(), ARMConstants.getDemandReforecastHeader(), ARMConstants.getAccount(), ARMConstants.getPaymentTrueUp(), ARMConstants.getAccount()};

    private static final Object[] ADJUSTMENT_RESERVE_TX5_COLUMN = new String[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_ADJUSTMENT_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST_ACCOUNT.getConstant()};
    private static final String[] ADJUSTMENT_RESERVE_TX5_HEADER = new String[]{StringUtils.EMPTY, ARMConstants.getAdjustmentType(), ARMConstants.getDemandAccrualConstant(), ARMConstants.getAccount(), ARMConstants.getDemandReforecastHeader(), ARMConstants.getAccount()};

    private static final Object[] ADJUSTMENT_RESERVE_TX_COLUMN = new String[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_ADJUSTMENT_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_BALANCE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_BALANCE_ACCOUNT.getConstant()};
    private static final String[] ADJUSTMENT_RESERVE_TX_HEADER = new String[]{StringUtils.EMPTY, ARMConstants.getAdjustmentType(), ARMConstants.getTrx7CurrentBalance(), ARMConstants.getAccount()};

    private static final Object[] ADJUSTMENT_RESERVECOLUMN = new String[]{ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_ADJUSTMENT_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_PIPELINE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_PIPELINE_ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST_ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_PIPELINE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_PIPELINE_ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_PAYMENT_RECON.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_PAYMENT_RECON_ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_BALANCE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_BALANCE_ACCOUNT.getConstant()};

    private static final String[] ARM_ADJ_SUMMARY_CONF_COMBO_HEADERS = new String[]{
        ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_PIPELINE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_PAYMENT_RECON.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_PIPELINE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_BALANCE.getConstant()};
    private static final String[] ARM_ADJ_SUMMARY_CONF_CUSTOM_MENUBAR_HEADERS = new String[]{
        ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_PIPELINE_ACCOUNT.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_ACCOUNT.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_ACCOUNT.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST_ACCOUNT.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_PAYMENT_RECON_ACCOUNT.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_PIPELINE_ACCOUNT.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_BALANCE_ACCOUNT.getConstant()};
    private static final String[] ARM_CONFIG_DETAIL_TEXTFIELD_GENERATOR = new String[]{
        ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTDESCRIPTION.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.COMPANYNO.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.DIVISION.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BUSINESS_UNIT.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.COST_CENTER.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.PROJECT.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.FUTURE1.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.FUTURE2.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.DATABASE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.BALANCE_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.DATA_ACCESS_SET.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.CHART_OF_ACCOUNTS.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.LEDGER.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.CATEGORY.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.SOURCE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_NAME.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_DESCRIPTION.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.REVERSE_JOURNAL.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.LINE_DESCRIPTION.getConstant()};

    private static final String[] ARM_CONFIG_DETAIL_COMBOBOX_GENERATOR = new String[]{
        ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_CATEGORY.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_TYPE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTINDICTOR.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.CURRENCY.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.REVERSAL_PERIOD_DATE.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.UDC1.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.UDC2.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.UDC3.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.UDC4.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.UDC5.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.UDC6.getConstant()
    };
    private static final String[] ADJUSTMENT_RESERVE_MASSUPDATE_HEADER = new String[]{CommonConstant.ADJUSTMENT_TYPE_HEADER, CommonConstant.ADJUSTMENT_LEVEL_HEADER, CommonConstant.ACCOUNT_CATEGORY_HEADER, CommonConstant.ACCOUNT_TYPE_HEADER, CommonConstant.ACCOUNT_HEADER, CommonConstant.ACCOUNT_DESCRIPTION_HEADER, ACCOUNT_INDICATOR,
        "Debit Indicator", "Credit Indicator", "Report Indicator", CommonConstant.DIVISION_HEADER, CommonConstant.COST_CENTER_HEADER, CommonConstant.PROJECT_HEADER, CommonConstant.FUTURE_1_HEADER, CommonConstant.FUTURE_2_HEADER, "Balance Type", "Database", "Data Access Set", "Chart Of Accounts",
        "Ledger", "Category", CommonConstant.SOURCE_HEADER, "Currency", "Journal Name", "Journal Description", "Reverse Journal",
        "Reversal Period/Date", "Line Description", CommonConstant.UDC_1_HEADER, CommonConstant.UDC_2_HEADER, CommonConstant.UDC_3_HEADER, CommonConstant.UDC_4_HEADER, CommonConstant.UDC_5_HEADER, CommonConstant.UDC_6_HEADER};

    private static final Object[] ADJUSTMENT_CONFIG_COLUMN = new String[]{"transactionName", "transactionDesc", "methodology", "redemptionPeriod", CommonConstant.CREATED_DATE,
        CommonConstant.CREATED_BY, CommonConstant.MODIFIED_DATE, CommonConstant.MODIFIED_BY_VISIBLE_COLUMN};
    private static final String[] ADJUSTMENT_CONFIG_HEADER = new String[]{"Adjustment Type Name", "Adjustment Type Desc", "Methodology", "Redemption Period", CommonConstant.CREATED_DATE_HEADER, CommonConstant.CREATED_BY_HEADER, CommonConstant.MODIFIED_DATE_HEADER, "Modified By"};

    private static final Object[] ADJUSTMENT_RESERVE_MASSUPDATE_COLUMN = new Object[]{
        ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_LEVEL.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_CATEGORY.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTDESCRIPTION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTINDICTOR.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.DEBIT_INDICATOR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.CREDIT_INDICATOR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.REPORT_INDICATOR.getConstant(), CommonConstant.DIVISION_VISIBLE_COLUMN, ADJUSTMENT_RESERVE_CONSTANTS.COST_CENTER.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.PROJECT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.FUTURE1.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.FUTURE2.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BALANCE_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.DATABASE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.DATA_ACCESS_SET.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.CHART_OF_ACCOUNTS.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.LEDGER.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.CATEGORY.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.SOURCE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.CURRENCY.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_NAME.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_DESCRIPTION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.REVERSE_JOURNAL.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.REVERSAL_PERIOD_DATE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.LINE_DESCRIPTION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC1.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC2.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC3.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC4.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC5.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC6.getConstant()};
    private static final String[] ADJUSTMENT_RESERVE_ADD_HEADERS_GTN_DETAILS = {"", CommonConstant.ADJUSTMENT_TYPE_HEADER, CommonConstant.ADJUSTMENT_LEVEL_HEADER, CommonConstant.ACCOUNT_CATEGORY_HEADER, CommonConstant.ACCOUNT_TYPE_HEADER, CommonConstant.ACCOUNT_HEADER, CommonConstant.ACCOUNT_DESCRIPTION_HEADER, ACCOUNT_INDICATOR,
        "GL Company No", CommonConstant.DIVISION_HEADER, CommonConstant.BUSINESS_UNIT_HEADER, CommonConstant.COST_CENTER_HEADER, CommonConstant.PROJECT_HEADER, CommonConstant.FUTURE_1_HEADER, CommonConstant.FUTURE_2_HEADER, CommonConstant.UDC_1_HEADER, CommonConstant.UDC_2_HEADER, CommonConstant.UDC_3_HEADER, CommonConstant.UDC_4_HEADER, CommonConstant.UDC_5_HEADER, CommonConstant.UDC_6_HEADER};

    private static final Object[] ADJUSTMENT_RESERVE_ADD_COLUMNS_GTN_DETAILS = {ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), CommonConstant.ADJUSTMENT_TYPE_VISIBLE_COLUMN, CommonConstant.ADJUSTMENT_LEVEL_VISIBLE_COLUMN, CommonConstant.ACCOUNT_CATEGORY_VISIBLE_COLUMN, CommonConstant.ACCOUNT_TYPE_VISIBLE_COLUMN,
        CommonConstant.ACCOUNT, CommonConstant.ACCOUNT_DESCRIPTION_VISIBLE_COLUMN, CommonConstant.ACCOUNT_INDICTOR_VISIBLE_COLUMN,
        ADJUSTMENT_RESERVE_CONSTANTS.COMPANYNO.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.DIVISION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BUSINESS_UNIT.getConstant(), CommonConstant.COST_CENTER_VISIBLE_COLUMN, CommonConstant.PROJECT_VISIBLE_COLUMN, CommonConstant.FUTURE1_VISIBLE_COLUMN, CommonConstant.FUTURE2_VISIBLE_COLUMN,
        "udc1", "udc2", "udc3", "udc4", "udc5", "udc6"};
    private static final Object[] ADJUSTMENT_RESERVE_FOR_EXCEL_COLUMNS_GTN_DETAILS = {ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_TYPE_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_LEVEL_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_CATEGORY_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_TYPE_STR.getConstant(),
        CommonConstant.ACCOUNT, CommonConstant.ACCOUNT_DESCRIPTION_VISIBLE_COLUMN, ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_INDICTOR_STR.getConstant(),
        ADJUSTMENT_RESERVE_CONSTANTS.COMPANYNO.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.DIVISION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BUSINESS_UNIT.getConstant(), CommonConstant.COST_CENTER_VISIBLE_COLUMN, CommonConstant.PROJECT_VISIBLE_COLUMN, CommonConstant.FUTURE1_VISIBLE_COLUMN, CommonConstant.FUTURE2_VISIBLE_COLUMN,
        ADJUSTMENT_RESERVE_CONSTANTS.UDC1_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC2_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC3_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC4_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC5_STR.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.UDC6_STR.getConstant()};
    private static final String[] ADJUSTMENT_GTN_DETAILS_Header = {CommonConstant.ADJUSTMENT_TYPE_HEADER, CommonConstant.ADJUSTMENT_LEVEL_HEADER, CommonConstant.ACCOUNT_CATEGORY_HEADER, CommonConstant.ACCOUNT_TYPE_HEADER, CommonConstant.ACCOUNT_HEADER, CommonConstant.ACCOUNT_DESCRIPTION_HEADER, ACCOUNT_INDICATOR, CommonConstant.DIVISION_HEADER, CommonConstant.COST_CENTER_HEADER, CommonConstant.PROJECT_HEADER, CommonConstant.FUTURE_1_HEADER, CommonConstant.FUTURE_2_HEADER, CommonConstant.UDC_1_HEADER, CommonConstant.UDC_2_HEADER, CommonConstant.UDC_3_HEADER, CommonConstant.UDC_4_HEADER, CommonConstant.UDC_5_HEADER, CommonConstant.UDC_6_HEADER};
    private static final Object[] ADJUSTMENT_GTN_DETAILS_COLUMNS = {CommonConstant.ADJUSTMENT_TYPE_VISIBLE_COLUMN, CommonConstant.ADJUSTMENT_LEVEL_VISIBLE_COLUMN, CommonConstant.ACCOUNT_CATEGORY_VISIBLE_COLUMN, CommonConstant.ACCOUNT_TYPE_VISIBLE_COLUMN,
        CommonConstant.ACCOUNT, CommonConstant.ACCOUNT_DESCRIPTION_VISIBLE_COLUMN, CommonConstant.ACCOUNT_INDICTOR_VISIBLE_COLUMN, CommonConstant.DIVISION_VISIBLE_COLUMN, CommonConstant.COST_CENTER_VISIBLE_COLUMN, CommonConstant.PROJECT_VISIBLE_COLUMN, CommonConstant.FUTURE1_VISIBLE_COLUMN, CommonConstant.FUTURE2_VISIBLE_COLUMN,
        "udc1", "udc2", "udc3", "udc4", "udc5", "udc6"};
    private static final Object[] FIRST_ROW_LEFT_COLUMNS = {CommonConstant.MONTH_VISIBLE_COLUMN};
    private static final String[] FIRST_ROW_LEFT_HEADERS = {""};
    private static final Object[] SECOND_ROW_LEFT_COLUMNS = {CommonConstant.CHECK_RECORD, CommonConstant.MONTH_VISIBLE_COLUMN};
    private static final String[] SECOND_ROW_LEFT_HEADERS = {"", CommonConstant.MONTH_HEADER};
    private static final String[] FIRST_ROW_INVENTORY_RATE_RIGHT_HEADERS = {CommonConstant.INVENTORY_HEADER, CommonConstant.RATES_HEADER};
    private static final Object[] FIRST_ROW_INVENTORY_RATE_RIGHT_COLUMNS = {CommonConstant.INVENTORY_VISIBLE_COLUMN, CommonConstant.RATES_VISIBLE_COLUMN};

    private static final String[] FIRST_ROW_Trx6_RATE_RIGHT_HEADERS = {CommonConstant.INVENTORY_HEADER};
    private static final Object[] FIRST_ROW_Trx6_RATE_RIGHT_COLUMNS = {CommonConstant.INVENTORY_VISIBLE_COLUMN};

    private static final String[] FIRST_ROW_Trx7_RATE_RIGHT_HEADERS = {CommonConstant.SALES_HEADER};
    private static final Object[] FIRST_ROW_Trx7_RATE_RIGHT_COLUMNS = {CommonConstant.SALES_VISIBLE_COLUMN};

    private static final String[] SECOND_ROW_INVENTORY_RATE_RIGHT_HEADERS = {CommonConstant.INVENTORY_DETAILS_HEADER, "Inventory Customer", "Inventory Calculation", CommonConstant.PRICE_HEADER, "Reserve Date", CommonConstant.RATE_BASIS_HEADER, CommonConstant.RATE_FREQUENCY_HEADER, CommonConstant.RATE_PERIOD_HEADER};

    private static final Object[] SECOND_ROW_INVENTORY_RATE_RIGHT_COLUMNS = {CommonConstant.INVENTORY_DETAILS_VISIBLE_COLUMN, CommonConstant.INVENTORY_CUSTOMER_VISIBLE_COLUMN, CommonConstant.INVENTORY_CALCULATION_VISIBLE_COLUMN, CommonConstant.PRICE_VISIBLE_COLUMN, CommonConstant.RESERVE_DATE_VISIBLE_COLUMN, CommonConstant.RATE_BASIS_VISIBLE_COLUMN, CommonConstant.RATE_FREQUENCY_VISIBLE_COLUMN, CommonConstant.RATE_PERIOD_VISIBLE_COLUMN};

    private static final String[] SECOND_ROW_SALES_RATE_RIGHT_HEADERS = {DATE_TYPE, CommonConstant.PRICE_HEADER, CommonConstant.EXCLUSION_DETAILS_HEADER, CommonConstant.RATE_BASIS_HEADER, CommonConstant.RATE_FREQUENCY_HEADER, CommonConstant.RATE_PERIOD_HEADER};

    private static final Object[] SECOND_ROW_SALES_RATE_RIGHT_COLUMNS = {CommonConstant.DATE_TYPE_VISIBLE_COLUMN, CommonConstant.PRICE_VISIBLE_COLUMN, CommonConstant.EXCLUSION_DETAILS_VISIBLE_COLUMN, CommonConstant.RATE_BASIS_VISIBLE_COLUMN, CommonConstant.RATE_FREQUENCY_VISIBLE_COLUMN, CommonConstant.RATE_PERIOD_VISIBLE_COLUMN};

    private static final String[] EXCEL_ROW_SALES_RATE_SINGLE_HEADERS = {CommonConstant.MONTH_HEADER, DATE_TYPE, CommonConstant.PRICE_HEADER, CommonConstant.EXCLUSION_DETAILS_HEADER, CommonConstant.RATE_BASIS_HEADER, CommonConstant.RATE_FREQUENCY_HEADER, CommonConstant.RATE_PERIOD_HEADER};

    private static final Object[] EXCEL_ROW_SALES_RATE_SINGLE_COLUMNS = {CommonConstant.EXCELMONTH_VISIBLE_COLUMN, "exceldateType", CommonConstant.EXCELPRICE_VISIBLE_COLUMN, "excelexclusionDetails", CommonConstant.EXCELRATE_BASIS_VISIBLE_COLUMN, "excelrateFrequency", "excelratePeriod"};
    private static final String[] EXCEL_ROW_INVENTORY_RATE_SINGLE_HEADERS = {CommonConstant.MONTH_HEADER, CommonConstant.INVENTORY_DETAILS_HEADER, "Inventory Customer", "Inventory Calculation", CommonConstant.PRICE_HEADER, "Reserve Date", CommonConstant.RATE_BASIS_HEADER, CommonConstant.RATE_FREQUENCY_HEADER, CommonConstant.RATE_PERIOD_HEADER};
    private static final Object[] EXCEL_ROW_INVENTORY_RATE_SINGLE_COLUMNS = {CommonConstant.EXCELMONTH_VISIBLE_COLUMN, "excelinventoryDetails", "excelinventoryCustomer", "excelinventoryCalculation", CommonConstant.EXCELPRICE_VISIBLE_COLUMN, "excelreserveDate", CommonConstant.EXCELRATE_BASIS_VISIBLE_COLUMN, "excelrateFrequency", "excelratePeriod"};

    private static final Object[] EXCEL_ROW_Trx6_SINGLE_COLUMNS = {CommonConstant.EXCELMONTH_VISIBLE_COLUMN, "excelinventoryDetails", "excelbaseLinePrice", "exceladjustmentPrice"};
    private static final String[] EXCEL_ROW_Trx6_RATE_SINGLE_HEADERS = {CommonConstant.MONTH_HEADER, CommonConstant.INVENTORY_DETAILS_HEADER, CommonConstant.BASELINE_PRICE_HEADER, CommonConstant.ADJUSTED_PRICE_HEADER};

    private static final Object[] EXCEL_ROW_Trx7_SINGLE_COLUMNS = {CommonConstant.EXCELMONTH_VISIBLE_COLUMN, "exceldateType", CommonConstant.EXCELPRICE_VISIBLE_COLUMN, "excelexclusionDetails"};
    private static final String[] EXCEL_ROW_Trx7_RATE_SINGLE_HEADERS = {CommonConstant.MONTH_HEADER, DATE_TYPE, CommonConstant.PRICE_HEADER, CommonConstant.EXCLUSION_DETAILS_HEADER};

    private static final Object[] EXCEL_ROW_RATE_SINGLE_COLUMNS_TRX8 = {CommonConstant.EXCELMONTH_VISIBLE_COLUMN, CommonConstant.EXCELRATE_BASIS_VISIBLE_COLUMN};
    private static final String[] EXCEL_ROW_RATE_SINGLE_HEADERS_TRX8 = {CommonConstant.MONTH_HEADER, CommonConstant.RATE_BASIS_HEADER};

    private static final Object[] EXCEL_ROW_INVENTORY_COLUMNS = {CommonConstant.MONTH_VISIBLE_COLUMN, CommonConstant.INVENTORY_DETAILS_VISIBLE_COLUMN, CommonConstant.INVENTORY_CUSTOMER_VISIBLE_COLUMN, CommonConstant.INVENTORY_CALCULATION_VISIBLE_COLUMN, CommonConstant.PRICE_VISIBLE_COLUMN, CommonConstant.RESERVE_DATE_VISIBLE_COLUMN};
    private static final Object[] EXCEL_ROW_SALES_COLUMNS = {CommonConstant.MONTH_VISIBLE_COLUMN, CommonConstant.DATE_TYPE_VISIBLE_COLUMN, CommonConstant.PRICE_VISIBLE_COLUMN, CommonConstant.EXCLUSION_DETAILS_VISIBLE_COLUMN};
    private static final Object[] EXCEL_ROW_RATE_COLUMNS = {CommonConstant.RATE_BASIS_VISIBLE_COLUMN, CommonConstant.RATE_FREQUENCY_VISIBLE_COLUMN, CommonConstant.RATE_PERIOD_VISIBLE_COLUMN};

    private static final String[] FIRST_ROW_SALES_RATE_RIGHT_HEADERS = {CommonConstant.SALES_HEADER, CommonConstant.RATES_HEADER};
    private static final Object[] FIRST_ROW_SALES_RATE_RIGHT_COLUMNS = {CommonConstant.SALES_VISIBLE_COLUMN, CommonConstant.RATES_VISIBLE_COLUMN};

    private static final Object[] SECOND_ROW_INVENTORY_COLUMNS = {CommonConstant.INVENTORY_DETAILS_VISIBLE_COLUMN, CommonConstant.INVENTORY_CUSTOMER_VISIBLE_COLUMN, CommonConstant.INVENTORY_CALCULATION_VISIBLE_COLUMN, CommonConstant.PRICE_VISIBLE_COLUMN, CommonConstant.RESERVE_DATE_VISIBLE_COLUMN};
    private static final Object[] SECOND_ROW_SALES_COLUMNS = {CommonConstant.DATE_TYPE_VISIBLE_COLUMN, CommonConstant.PRICE_VISIBLE_COLUMN, CommonConstant.EXCLUSION_DETAILS_VISIBLE_COLUMN};
    private static final Object[] SECOND_ROW_RATE_COLUMNS = {CommonConstant.RATE_BASIS_VISIBLE_COLUMN, CommonConstant.RATE_FREQUENCY_VISIBLE_COLUMN, CommonConstant.RATE_PERIOD_VISIBLE_COLUMN};

    private static final String[] VIEW_LOOKUP_HEADERS = {CommonConstant.VIEW_NAME_HEADER, CommonConstant.CREATED_BY_HEADER, CommonConstant.CREATED_DATE_HEADER};
    private static final Object[] VIEW_LOOKUP_COLUMNS = {CommonConstant.VIEW_NAME_VISIBLE_COLUMN, CommonConstant.CREATED_BY, CommonConstant.CREATED_DATE};

    private static final String[] INVENTORY_VIEW_LOOKUP_HEADERS = {CommonConstant.VIEW_NAME_HEADER, "View Type", "View Category", CommonConstant.CREATED_DATE_HEADER, CommonConstant.CREATED_BY_HEADER, CommonConstant.MODIFIED_DATE_HEADER, "Modified By"};
    private static final Object[] INVENTORY_VIEW_LOOKUP_COLUMNS = {CommonConstant.VIEW_NAME_VISIBLE_COLUMN, "viewType", "viewCategory", CommonConstant.CREATED_DATE, CommonConstant.CREATED_BY, CommonConstant.MODIFIED_DATE, CommonConstant.MODIFIED_BY_VISIBLE_COLUMN};

    private static final String[] PRIVATE_VIEW_LOOKUP_HEADERS = {CommonConstant.VIEW_NAME_HEADER, CommonConstant.ADJUSTMENT_TYPE_HEADER, "Description", CommonConstant.COMPANY_HEADER, CommonConstant.BUSINESS_UNIT_HEADER, "Time Period: From", "Time Period: To", "Deduction Level", "Customer Hierarchy",
        "Customer Relationship", CommonConstant.CUSTOMER_LEVEL_HEADER, "Product Hierarchy", "Product Relationship", "Product Level", CommonConstant.CREATED_DATE_HEADER, CommonConstant.MODIFIED_DATE_HEADER, CommonConstant.CREATED_BY_HEADER};
    private static final Object[] PRIVATE_VIEW_LOOKUP_COLUMNS = {CommonConstant.VIEW_NAME_VISIBLE_COLUMN, CommonConstant.ADJUSTMENT_TYPE_VISIBLE_COLUMN, "projectionDescription", CommonConstant.COMPANY_NAME, CommonConstant.BU_COMPANY_NAME_VISIBLE_COLUMN, CommonConstant.FROM_PERIOD, CommonConstant.TO_PERIOD, CommonConstant.DEDUCTION_LEVELS_VISIBLE_COLUMN, CommonConstant.CUSTOMER_HIERARCHY_NAME_VISIBLE_COLUMN, CommonConstant.CUSTOMER_RELATIONSHIP_VISIBLE_COLUMN, CommonConstant.CUSTOMER_HIERARCHY_LEVEL_VISIBLE_COLUMN, CommonConstant.PRODUCT_HIERARCHY_NAME_VISIBLE_COLUMN, CommonConstant.PRODUCT_RELATIONSHIP_VISIBLE_COLUMN, CommonConstant.PRODUCT_HIERARCHY_LEVEL_VISIBLE_COLUMN, CommonConstant.CREATED_DATE, CommonConstant.MODIFIED_DATE, CommonConstant.CREATED_BY_STRING};

    private static final String[] PRIVATE_VIEW_LOOKUP_HEADERS_ADJ_SUMM = {CommonConstant.VIEW_NAME_HEADER, CommonConstant.COMPANY_HEADER, CommonConstant.BUSINESS_UNIT_HEADER, "Time Period: From", "Time Period: To", "Deduction Level", "Customer Hierarchy",
        "Customer Relationship", CommonConstant.CUSTOMER_LEVEL_HEADER, "Product Hierarchy", "Product Relationship", "Product Level", CommonConstant.CREATED_DATE_HEADER, CommonConstant.MODIFIED_DATE_HEADER, CommonConstant.CREATED_BY_HEADER};
    private static final Object[] PRIVATE_VIEW_LOOKUP_COLUMNS_ADJ_SUMM = {CommonConstant.VIEW_NAME_VISIBLE_COLUMN, CommonConstant.COMPANY_NAME, CommonConstant.BU_COMPANY_NAME_VISIBLE_COLUMN, CommonConstant.FROM_PERIOD, CommonConstant.TO_PERIOD, CommonConstant.DEDUCTION_LEVELS_VISIBLE_COLUMN, CommonConstant.CUSTOMER_HIERARCHY_NAME_VISIBLE_COLUMN, CommonConstant.CUSTOMER_RELATIONSHIP_VISIBLE_COLUMN, CommonConstant.CUSTOMER_HIERARCHY_LEVEL_VISIBLE_COLUMN, CommonConstant.PRODUCT_HIERARCHY_NAME_VISIBLE_COLUMN, CommonConstant.PRODUCT_RELATIONSHIP_VISIBLE_COLUMN, CommonConstant.PRODUCT_HIERARCHY_LEVEL_VISIBLE_COLUMN, CommonConstant.CREATED_DATE, CommonConstant.MODIFIED_DATE, CommonConstant.CREATED_BY_STRING};

    private static final String[] EXCLUSION_LOOKUP_AVIALABLE_HEADERS = {"Available Values"};
    private static final Object[] EXCLUSION_LOOKUP_AVIALABLE_COLUMNS = {"values"};
    private static final String[] EXCLUSION_LOOKUP_SELECTED_HEADERS = {"Excluded Field", "Values"};
    private static final Object[] EXCLUSION_LOOKUP_SELECTED_COLUMNS = {"excludedField", "values"};

    private static final Object[] HIERARCHY_LOOKUP_COLUMNS = {"hierarchyName", "highestLevel", "lowestLevel", CommonConstant.CREATED_DATE, CommonConstant.MODIFIED_DATE};
    private static final String[] HIERARCHY_LOOKUP_HEADERS = {"Hierarchy Name", " Highest Level", " Lowest Level", " Created Date", " Modified Date"};

    private static final Object[] CUSTOMER_GROUP_LOOKUP_COLUMNS = {"customerGroupName", "customerGroupNo", "customerGroupDesc"};
    private static final String[] CUSTOMER_GROUP_LOOKUP_HEADERS = {"Customer Group Name", " Customer Group #", "Customer Group desc"};

    private static final Object[] EXCLUSION_RATE_LOOKUP_HEADERS = {CommonConstant.VIEW_NAME_VISIBLE_COLUMN, CommonConstant.CREATED_BY, CommonConstant.CREATED_DATE};
    private static final String[] EXCLUSION_RATE_LOOKUP_COLUMNS = {CommonConstant.VIEW_NAME_HEADER, CommonConstant.CREATED_BY_HEADER, " Created Date"};

    private static final Object[] CUSTOMER_GROUP_INVENTORY_COLUMNS = {"customerGroupName", "include", "indicator"};
    private static final String[] CUSTOMER_GROUP_INVENTORY_HEADERS = {"Customer Group Name", "Include", "+/- Indicator"};

    private static final Object[] PIPELINE_ACCRUAL_LEFT_COLUMN = {"group"};

    private static final Object[] ACCOUNT_CONFIG_SEARCH_COLUMNS = {CommonConstant.COMPANY_NO, CommonConstant.COMPANY_NAME, CommonConstant.BUSINESS_UNIT_NO, CommonConstant.BUSINESS_UNIT_NAME, CommonConstant.ACCOUNT, CommonConstant.COST_CENTRE, "brand", CommonConstant.CREATED_BY, CommonConstant.CREATED_DATE, CommonConstant.MODIFIED_DATE, CommonConstant.SOURCE};
    private static final String[] ACCOUNT_CONFIG_SEARCH_HEADERS = {CommonConstant.COMPANY_NO_HEADER, CommonConstant.COMPANY_NAME_HEADER, CommonConstant.BUSINESS_UNIT_NO_HEADER, CommonConstant.BUSINESS_UNIT_NAME_HEADER, CommonConstant.ACCOUNT_HEADER, CommonConstant.COST_CENTER_HEADER, CommonConstant.BRAND_LEVEL_FILTER, CommonConstant.CREATED_BY_HEADER, CommonConstant.CREATED_DATE_HEADER, CommonConstant.MODIFIED_DATE_HEADER, CommonConstant.SOURCE_HEADER};

    private static final Object[] ACCOUNT_CONFIG_ADDMODE_COLUMNS = {CommonConstant.CHECK_RECORD, CommonConstant.COMPANY_NO_HELPER_DTO, CommonConstant.COMPANY_NAME, CommonConstant.BUSINESS_NO_HELPER_DTO, CommonConstant.BUSINESS_UNIT_NAME, CommonConstant.ACCOUNT, CommonConstant.BRAND_DDLB, CommonConstant.COST_CENTRE, CommonConstant.CREATED_BY, CommonConstant.CREATED_DATE, CommonConstant.MODIFIED_DATE, CommonConstant.SOURCE};
    private static final String[] ACCOUNT_CONFIG_ADDMODE_HEADERS = {"", CommonConstant.COMPANY_NO_HEADER, CommonConstant.COMPANY_NAME_HEADER, CommonConstant.BUSINESS_UNIT_NO_HEADER, CommonConstant.BUSINESS_UNIT_NAME_HEADER, CommonConstant.ACCOUNT_HEADER, CommonConstant.BRAND_LEVEL_FILTER, CommonConstant.COST_CENTER_HEADER, CommonConstant.CREATED_BY_HEADER, CommonConstant.CREATED_DATE_HEADER, CommonConstant.MODIFIED_DATE_HEADER, CommonConstant.SOURCE_HEADER};

    private static final Object[] ACCOUNT_CONFIG_EDITMODE_COLUMNS = {CommonConstant.CHECK_RECORD, CommonConstant.COMPANY_ID_WITH_NAME, CommonConstant.COMPANY_NAME, CommonConstant.BU_ID_WITH_NAME, CommonConstant.BUSINESS_UNIT_NAME, CommonConstant.ACCOUNT, CommonConstant.BRAND_DDLB, CommonConstant.COST_CENTRE, CommonConstant.CREATED_BY, CommonConstant.CREATED_DATE, CommonConstant.MODIFIED_DATE, CommonConstant.SOURCE};
    private static final String[] ACCOUNT_CONFIG_EDITMODE_HEADERS = {"", CommonConstant.COMPANY_NO_HEADER, CommonConstant.COMPANY_NAME_HEADER, CommonConstant.BUSINESS_UNIT_NO_HEADER, CommonConstant.BUSINESS_UNIT_NAME_HEADER, CommonConstant.ACCOUNT_HEADER, CommonConstant.BRAND_LEVEL_FILTER, CommonConstant.COST_CENTER_HEADER, CommonConstant.CREATED_BY_HEADER, CommonConstant.CREATED_DATE_HEADER, CommonConstant.MODIFIED_DATE_HEADER, CommonConstant.SOURCE_HEADER};

    private static final Object[] ACCOUNT_CONFIG_VIEWMODE_COLUMNS = {CommonConstant.COMPANY_ID_WITH_NAME, CommonConstant.COMPANY_NAME, CommonConstant.BU_ID_WITH_NAME, CommonConstant.BUSINESS_UNIT_NAME, CommonConstant.ACCOUNT, "brandWithIdName", CommonConstant.COST_CENTRE, CommonConstant.CREATED_BY, CommonConstant.CREATED_DATE, CommonConstant.MODIFIED_DATE, CommonConstant.SOURCE};
    private static final String[] ACCOUNT_CONFIG_VIEWMODE_HEADERS = {CommonConstant.COMPANY_NO_HEADER, CommonConstant.COMPANY_NAME_HEADER, CommonConstant.BUSINESS_UNIT_NO_HEADER, CommonConstant.BUSINESS_UNIT_NAME_HEADER, CommonConstant.ACCOUNT_HEADER, CommonConstant.BRAND_LEVEL_FILTER, CommonConstant.COST_CENTER_HEADER, CommonConstant.CREATED_BY_HEADER, CommonConstant.CREATED_DATE_HEADER, CommonConstant.MODIFIED_DATE_HEADER, CommonConstant.SOURCE_HEADER};

    private static final Object[] ACCOUNT_CONFIG_COMBOBOX_PROPERTIES = new Object[]{CommonConstant.COMPANY_NO_HELPER_DTO, CommonConstant.BUSINESS_NO_HELPER_DTO, CommonConstant.ACCOUNT, CommonConstant.BRAND_DDLB, CommonConstant.COST_CENTRE};
    private static final Object[] ACCOUNT_CONFIG_COMBOBOX = new Object[]{CommonConstant.COMPANY_NO_HELPER_DTO, CommonConstant.BUSINESS_NO_HELPER_DTO, CommonConstant.BRAND_DDLB, CommonConstant.ACCOUNT};

    private static final Object[] EXCEL_ACCOUNT_CONFIG_SEARCH_COLUMNS = {CommonConstant.COMPANY_ID_WITH_NAME, CommonConstant.COMPANY_NAME, CommonConstant.BU_ID_WITH_NAME, CommonConstant.BUSINESS_UNIT_NAME, CommonConstant.ACCOUNT, CommonConstant.COST_CENTRE, "brandWithIdName", CommonConstant.CREATED_BY, CommonConstant.CREATED_DATE, CommonConstant.MODIFIED_DATE, CommonConstant.SOURCE};

    private static final String[] EXCEL_ACCOUNT_CONFIG_SEARCH_HEADERS = {CommonConstant.COMPANY_NO_HEADER, CommonConstant.COMPANY_NAME_HEADER, CommonConstant.BUSINESS_UNIT_NO_HEADER, CommonConstant.BUSINESS_UNIT_NAME_HEADER, CommonConstant.ACCOUNT_HEADER, CommonConstant.COST_CENTER_HEADER, CommonConstant.BRAND_LEVEL_FILTER, CommonConstant.CREATED_BY_HEADER, CommonConstant.CREATED_DATE_HEADER, CommonConstant.MODIFIED_DATE_HEADER, CommonConstant.SOURCE_HEADER};

    private static final String[] ACCOUNT_CONFIG_MASS_UPDATE_VALUES = new String[]{CommonConstant.COMPANY_NO_HEADER, CommonConstant.BUSINESS_UNIT_NO_HEADER, CommonConstant.ACCOUNT_HEADER, CommonConstant.BRAND_LEVEL_FILTER, CommonConstant.COST_CENTER_HEADER};

    public static String[] getAccountConfigMassUpdateValues() {
        return ACCOUNT_CONFIG_MASS_UPDATE_VALUES.clone();
    }

    public static final String CENTER_CHECK = "center-check";
    public static final String Q = "Q";
    public static final String S = "S";
    public static final String CLOSE = "CLOSE";
    public static final String ADD = "ADD";
    public static final String ADD_SMALL = "Add";
    public static final String EDIT = "Edit";
    public static final String COPY = "Copy";
    public static final String DELETE = "Delete";
    public static final String VIEW = "View";
    public static final String BOOTSTRAP = "bootstrap";
    public static final String ZERO_STRING = "0";
    public static final String BOOTSTRAP_FORECAST_BOOTSTRAP_NM = "bootstrap-forecast bootstrap-nm";
    public static final String FILTERCOMBOBOX = "filterComboBox";
    public static final String DB_CURRENT_DATE = "getdate()";
    public static final String PROPERTY_ID = "propertyId";
    public static final String ITEM_ID = "itemId";
    public static final String CONTAINER = "container";
    public static final Resource EXCEL_EXPORT_IMAGE = new ThemeResource("img/excel.png");
    private final DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    private final DateFormat dbDate = new SimpleDateFormat(CommonConstant.YYYY_M_MDD);
    private final DateFormat mmddyyyy = new SimpleDateFormat(MM_DD_YYYY);

    private final SimpleDateFormat fmtID = new SimpleDateFormat("hhmmssms");

    public static final String MM_DD_YYYY = "MM/dd/yyyy";
    public static final String YYYY_MM_DD_HH_MM_SS_SSS = "yyyy-MM-dd hh:mm:ss.SSS";
    public static final String YYYY_MM_DD = CommonConstant.YYYY_M_MDD;
    public static final String MM_DD_YYYY_HH_MM_SS = "MM/dd/yyyy hh:mm:ss";
    public static final String NULL = "null";
    public static final String CHAR_ASTERISK = "*";
    public static final String CHAR_PERCENT = "%";
    public static final String CHAR_QUS = "?";
    public static final String SPACE = " ";
    public static final String HIPHEN = "-";
    public static final String LEVEL = "Level";
    public static final String PRIMARY = "Primary";
    public static final String SECONDARY = "Secondary";
    public static final String INDICATOR_LEVEL_CUSTOMER = CommonConstant.CUSTOMER_LEVEL_HEADER;
    public static final String INDICATOR_LEVEL_CONTRACT = "Contract Level";
    public static final String COMPANY_MASTER = "COMPANY_MASTER";
    public static final String CONTRACT_MASTER = "CONTRACT_MASTER";
    public static final String ITEM_MASTER = "ITEM_MASTER";
    public static final String POSITIVE = "Positive";
    public static final String NEGATIVE = "Negative";
    private static final String[] ADJUSTMENT_RESERVE_TEXT_BOX = new String[]{ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT.toString(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTDESCRIPTION.toString(), ADJUSTMENT_RESERVE_CONSTANTS.COST_CENTER.toString(), ADJUSTMENT_RESERVE_CONSTANTS.PROJECT.toString(), ADJUSTMENT_RESERVE_CONSTANTS.FUTURE1.toString(), ADJUSTMENT_RESERVE_CONSTANTS.FUTURE2.toString(), ADJUSTMENT_RESERVE_CONSTANTS.BALANCE_TYPE.toString(), ADJUSTMENT_RESERVE_CONSTANTS.DATABASE.toString(), ADJUSTMENT_RESERVE_CONSTANTS.DATA_ACCESS_SET.toString(), ADJUSTMENT_RESERVE_CONSTANTS.CHART_OF_ACCOUNTS.toString(), ADJUSTMENT_RESERVE_CONSTANTS.CATEGORY.toString(), ADJUSTMENT_RESERVE_CONSTANTS.SOURCE.toString(), ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_NAME.toString(), ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_DESCRIPTION.toString(), ADJUSTMENT_RESERVE_CONSTANTS.REVERSE_JOURNAL.toString(), ADJUSTMENT_RESERVE_CONSTANTS.LINE_DESCRIPTION.toString(), ADJUSTMENT_RESERVE_CONSTANTS.LEDGER.toString(), ADJUSTMENT_RESERVE_CONSTANTS.DIVISION.toString()};
    private static final String[] ADJUSTMENT_RESERVE_COMBOBOX = new String[]{ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_TYPE.toString(), ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_LEVEL.toString(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_TYPE.toString(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_CATEGORY.toString(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTINDICTOR.toString(),
        ADJUSTMENT_RESERVE_CONSTANTS.DEBIT_INDICATOR.toString(), ADJUSTMENT_RESERVE_CONSTANTS.CREDIT_INDICATOR.toString(), ADJUSTMENT_RESERVE_CONSTANTS.REPORT_INDICATOR.toString(), ADJUSTMENT_RESERVE_CONSTANTS.CURRENCY.toString(), ADJUSTMENT_RESERVE_CONSTANTS.REVERSAL_PERIOD_DATE.toString(), ADJUSTMENT_RESERVE_CONSTANTS.UDC1.toString(), ADJUSTMENT_RESERVE_CONSTANTS.UDC2.toString(), ADJUSTMENT_RESERVE_CONSTANTS.UDC3.toString(), ADJUSTMENT_RESERVE_CONSTANTS.UDC4.toString(), ADJUSTMENT_RESERVE_CONSTANTS.UDC5.toString(), ADJUSTMENT_RESERVE_CONSTANTS.UDC6.toString()};
    private static Map<String, String> dropDownMap;
    protected static volatile Map<String, String> descriptionForFilter;
    protected static volatile Map<String, String> textFieldDescription;
    protected static Map<String, String> dbVariableColumnMap;
    protected static Map<String, String> udcMap;
    protected static Map<String, String> visibleToDBColumnMap;
    protected static Map<String, String> visibleToDBColumnMapForConfig;
    protected static Map<String, String> visibleToDBColumnMapForConfigForSort;
    private static Map<String, String> listNameMapper = new HashMap<>();
    private static Map<String, String> adjustmentSummaryAccountMapper;
    private static Map<String, String> adjustmentSummaryVisibleToDBColumnMap;
    protected static volatile Map<String, String> adjustmentSummaryVisibleToDBColumnMapForFilter;
    private static Map<String, String> balanceSummaryVisibleToDBColumnMap;
    private static final Map<String, String> VIEW_FILTER_MAP = new HashMap<>();
    private static final Map<String, String> VIEW_FILTER_MAPS = new HashMap<>();
    private static final Map<String, String> VIEW_FILTER_GTN = new HashMap<>();
    private static final Map<String, String> VIEW_SELECT_GTN = new HashMap<>();
    private static final Map<String, String> VIEW_SELECT_MAP = new HashMap<>();

    /**
     * The Constant BALANCE_SUMMARY_REPORT.
     */
    public static final String BALANCE_SUMMARY_REPORT = "Balance Summary Report";
    public static final String FIXED_DOLLAR_ADJUSTMENT = "Fixed Dollar Adjustment";

    private static final String[] ADJUSTMENT_DEMAND_PIPELINE_RESERVE_VARIABLE_COMBOBOX = new String[]{ARMConstants.getAdjustmentType(), ARMConstants.getBalanceType(), ARMConstants.getDatabase(), ARMConstants.getDataAccessSet(), ARMConstants.getChartOfAccounts(), ARMConstants.getLedger(),
        ARMConstants.getCategory(), ARMConstants.getSource(), ARMConstants.getCurrency(), ARMConstants.getAccountingDate(), ARMConstants.getBatchName(),
        ARMConstants.getJournalName(), ARMConstants.getJournalDescription(), ARMConstants.getReverseJournal(), ARMConstants.getReversalPeriodDate(), ARMConstants.getCompany(), ARMConstants.getDivision(),
        ARMConstants.getBusinessUnit(), ARMConstants.getCostCenter(), ARMConstants.getAccount(), ARMConstants.getBrand(), ARMConstants.getProject(), ARMConstants.getFuture1(),
        ARMConstants.getFuture2(), ARMConstants.getDebit(), ARMConstants.getCredit(), ARMConstants.getLineDescription(), ARMConstants.getUDC1(), ARMConstants.getUDC2(),
        ARMConstants.getUDC3(), ARMConstants.getUDC4(), ARMConstants.getUDC5(), ARMConstants.getUDC6(), ARMConstants.getAccountCategory(), ARMConstants.getAccountType(),
        ARMConstants.getAdjustmentLevel(), ARMConstants.getAccountIndictor(), ARMConstants.getAccountDescription(), ARMConstants.getRedemptionPeriod(), ARMConstants.getCalculation_Period(),
        ARMConstants.getWorkFlowID(), ARMConstants.getWorkFlowName(), ARMConstants.getWorkFlowStatus()
    };

    private static final String[] ADJUSTMENT_DEMAND_PIPELINE_GTN_VARIABLE_COMBOBOX = new String[]{ARMConstants.getAdjustmentType(), ARMConstants.getDeductionType(), ARMConstants.getGLMonth(),
        ARMConstants.getGLYear(), ARMConstants.getGLString(), ARMConstants.getGLCompanyId(), ARMConstants.getDivision(), ARMConstants.getBusinessUnitId(), ARMConstants.getCostCenter(),
        ARMConstants.getAccount(), ARMConstants.getBrandId(), ARMConstants.getProject(), ARMConstants.getFuture1(), ARMConstants.getFuture2(), ARMConstants.getItemNo(),
        ARMConstants.getDeductionAmount(), ARMConstants.getGLCompanyNo(), ARMConstants.getGLCompanyName(), ARMConstants.getBusinessUnitNo(), ARMConstants.getBusinessUnitName(),
        ARMConstants.getGLDate(), ARMConstants.getCreatedDate(), ARMConstants.getRedemptionPeriod(), ARMConstants.getDetailContractId(), ARMConstants.getDetailContractNo(),
        ARMConstants.getDetailContractName(), ARMConstants.getCompanyId(), ARMConstants.getCompanyNo(), ARMConstants.getCompanyName(), ARMConstants.getItemId(), ARMConstants.getItemName(),
        ARMConstants.getBrandName(), ARMConstants.getDeductionId(), ARMConstants.getDeductionNo(), ARMConstants.getDeductionName(), ARMConstants.getDeductionCategory(),
        ARMConstants.getDeductionProgram(), ARMConstants.getDeductionInclusion(), ARMConstants.getDeductionUDC1(), ARMConstants.getDeductionUDC2(), ARMConstants.getDeductionUDC3(),
        ARMConstants.getDeductionUDC4(), ARMConstants.getDeductionUDC5(), ARMConstants.getDeductionUDC6(), ARMConstants.getDeductionRate(), ARMConstants.getUDC1(), ARMConstants.getUDC2(),
        ARMConstants.getUDC3(), ARMConstants.getUDC4(), ARMConstants.getUDC5(), ARMConstants.getUDC6(), ARMConstants.getAccountType(), ARMConstants.getAccountCategory(),
        ARMConstants.getAdjustmentLevel(), ARMConstants.getAccountDescription(), ARMConstants.getAccountIndictor(), ARMConstants.getCalculation_Period(), ARMConstants.getWorkFlowID(),
        ARMConstants.getWorkFlowName(), ARMConstants.getWorkFlowStatus()
    };

    private static final String[] ADJUSTMENT_DEMAND_SUMMARY_RESERVE_VARIABLE_COMBOBOX = new String[]{ARMConstants.getAdjustmentType(), ARMConstants.getBalanceType(), ARMConstants.getDatabase(), ARMConstants.getDataAccessSet(), ARMConstants.getChartOfAccounts(), ARMConstants.getLedger(),
        ARMConstants.getCategory(), ARMConstants.getSource(), ARMConstants.getCurrency(), ARMConstants.getAccountingDate(), ARMConstants.getBatchName(),
        ARMConstants.getJournalName(), ARMConstants.getJournalDescription(), ARMConstants.getReverseJournal(), ARMConstants.getReversalPeriodDate(), ARMConstants.getCompany(), ARMConstants.getDivision(),
        ARMConstants.getBusinessUnit(), ARMConstants.getCostCenter(), ARMConstants.getAccount(), ARMConstants.getBrand(), ARMConstants.getProject(), ARMConstants.getFuture1(),
        ARMConstants.getFuture2(), ARMConstants.getDebit(), ARMConstants.getCredit(), ARMConstants.getLineDescription(), ARMConstants.getUDC1(), ARMConstants.getUDC2(),
        ARMConstants.getUDC3(), ARMConstants.getUDC4(), ARMConstants.getUDC5(), ARMConstants.getUDC6(), ARMConstants.getAccountCategory(), ARMConstants.getAccountType(),
        ARMConstants.getAdjustmentLevel(), ARMConstants.getAccountIndictor(), ARMConstants.getAccountDescription(), ARMConstants.getRedemptionPeriod(), ARMConstants.getCalculation_Period(),
        ARMConstants.getWorkFlowID(), ARMConstants.getWorkFlowName(), ARMConstants.getWorkFlowStatus()};

    private static final String[] ADJUSTMENT_DEMAND_SUMMARY_GTN_VARIABLE_COMBOBOX = new String[]{ARMConstants.getAdjustmentType(), ARMConstants.getDeductionType(), ARMConstants.getGLMonth(),
        ARMConstants.getGLYear(), ARMConstants.getGLString(), ARMConstants.getGLCompanyId(), ARMConstants.getDivision(), ARMConstants.getBusinessUnitId(), ARMConstants.getCostCenter(),
        ARMConstants.getAccount(), ARMConstants.getBrandId(), ARMConstants.getProject(), ARMConstants.getFuture1(), ARMConstants.getFuture2(), ARMConstants.getItemNo(),
        ARMConstants.getDeductionAmount(), ARMConstants.getGLCompanyNo(), ARMConstants.getGLCompanyName(), ARMConstants.getBusinessUnitNo(), ARMConstants.getBusinessUnitName(),
        ARMConstants.getGLDate(), ARMConstants.getCreatedDate(), ARMConstants.getRedemptionPeriod(), ARMConstants.getDetailContractId(), ARMConstants.getDetailContractNo(),
        ARMConstants.getDetailContractName(), ARMConstants.getCompanyId(), ARMConstants.getCompanyNo(), ARMConstants.getCompanyName(), ARMConstants.getItemId(), ARMConstants.getItemName(),
        ARMConstants.getBrandName(), ARMConstants.getDeductionId(), ARMConstants.getDeductionNo(), ARMConstants.getDeductionName(), ARMConstants.getDeductionCategory(),
        ARMConstants.getDeductionProgram(), ARMConstants.getDeductionInclusion(), ARMConstants.getDeductionUDC1(), ARMConstants.getDeductionUDC2(), ARMConstants.getDeductionUDC3(),
        ARMConstants.getDeductionUDC4(), ARMConstants.getDeductionUDC5(), ARMConstants.getDeductionUDC6(), ARMConstants.getDeductionRate(), ARMConstants.getUDC1(), ARMConstants.getUDC2(),
        ARMConstants.getUDC3(), ARMConstants.getUDC4(), ARMConstants.getUDC5(), ARMConstants.getUDC6(), ARMConstants.getAccountType(), ARMConstants.getAccountCategory(),
        ARMConstants.getAdjustmentLevel(), ARMConstants.getAccountDescription(), ARMConstants.getAccountIndictor(), ARMConstants.getCalculation_Period(), ARMConstants.getWorkFlowID(),
        ARMConstants.getWorkFlowName(), ARMConstants.getWorkFlowStatus()};

    private static final Object[] ADJUSTMENT_RESERVE_ADD_COLUMNS_RESERVE_DETAILS_FOR_EXCEL = new Object[]{CommonConstant.ADJUSTMENT_TYPESTR, "adjustmentLevelstr", CommonConstant.ACCOUNT_CATEGORYSTR, CommonConstant.ACCOUNT_TYPESTR, ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTDESCRIPTION.getConstant(), CommonConstant.ACCOUNT_INDICTORSTR, "debitIndicatorstr", "creditIndicatorstr", "reportIndicatorStr", ADJUSTMENT_RESERVE_CONSTANTS.COMPANYNO.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.DIVISION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BUSINESS_UNIT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.COST_CENTER.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.PROJECT.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.FUTURE1.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.FUTURE2.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BALANCE_TYPE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.DATABASE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.DATA_ACCESS_SET.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.CHART_OF_ACCOUNTS.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.LEDGER.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.CATEGORY.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.SOURCE.getConstant(), "currencystr",
        ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_NAME.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_DESCRIPTION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.REVERSE_JOURNAL.getConstant(), "reversalPeriodDatestr", ADJUSTMENT_RESERVE_CONSTANTS.LINE_DESCRIPTION.getConstant(), CommonConstant.UDC1_STR, CommonConstant.UDC2_STR, CommonConstant.UDC3_STR, CommonConstant.UDC4_STR, CommonConstant.UDC5_STR, CommonConstant.UDC6_STR};

    private static final Object[] ADJUSTMENT_RESERVE_ADD_COLUMNS_GTN_DETAILS_FOR_EXCEL = {CommonConstant.ADJUSTMENT_TYPESTR, "adjustmentLevelstr", CommonConstant.ACCOUNT_CATEGORYSTR, CommonConstant.ACCOUNT_TYPESTR,
        CommonConstant.ACCOUNT, CommonConstant.ACCOUNT_DESCRIPTION_VISIBLE_COLUMN, CommonConstant.ACCOUNT_INDICTORSTR,
        ADJUSTMENT_RESERVE_CONSTANTS.COMPANYNO.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.DIVISION.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.BUSINESS_UNIT.getConstant(), CommonConstant.COST_CENTER_VISIBLE_COLUMN, CommonConstant.PROJECT_VISIBLE_COLUMN, CommonConstant.FUTURE1_VISIBLE_COLUMN, CommonConstant.FUTURE2_VISIBLE_COLUMN, CommonConstant.UDC1_STR, CommonConstant.UDC2_STR, CommonConstant.UDC3_STR, CommonConstant.UDC4_STR, CommonConstant.UDC5_STR, CommonConstant.UDC6_STR};

    public static synchronized Object getDBColumnForAdjustmnetType() {
        if (dbVariableColumnMap == null) {
            dbVariableColumnMap = new HashMap<>();
            dbVariableColumnMap.put("Demand  Accrual", "Sum(PIPELINE_ACCRUAL)           AS PIPELINE_ACCRUAL");
            dbVariableColumnMap.put("Demand Payment Reconciliation True-Up", "Sum(DEMAND_ACCRUAL)             AS DEMAND_ACCRUAL");
            dbVariableColumnMap.put("Demand Reforecast True-Up", "Sum(PIPELINE_INENTORY_TRUE_UP)  AS PIPELINE_INENTORY_TRUE_UP");
            dbVariableColumnMap.put("Pipeline Accrual", " Sum(DEMAND_PAYMENT_TRUE_UP)     AS DEMAND_PAYMENT_TRUE_UP");
            dbVariableColumnMap.put("Pipeline Inventory True-Up", "Sum(DEMAND_ACCRUAL_RE_FORECAST) AS DEMAND_ACCRUAL_RE_FORECAST ");
        }
        return dbVariableColumnMap;
    }

    public static enum ADJUSTMENT_RESERVE_CONSTANTS {

        CHECK_RECORD(CommonConstant.CHECK_RECORD),
        ADJUSTMENT_TYPE(CommonConstant.ADJUSTMENT_TYPE_VISIBLE_COLUMN),
        ADJUSTMENT_LEVEL(CommonConstant.ADJUSTMENT_LEVEL_VISIBLE_COLUMN),
        ACCOUNT_CATEGORY(CommonConstant.ACCOUNT_CATEGORY_VISIBLE_COLUMN),
        ACCOUNT_TYPE(CommonConstant.ACCOUNT_TYPE_VISIBLE_COLUMN),
        ACCOUNT(CommonConstant.ACCOUNT),
        ACCOUNTDESCRIPTION(CommonConstant.ACCOUNT_DESCRIPTION_VISIBLE_COLUMN),
        ACCOUNTINDICTOR(CommonConstant.ACCOUNT_INDICTOR_VISIBLE_COLUMN),
        DEBIT_INDICATOR("debitIndicator"),
        CREDIT_INDICATOR("creditIndicator"),
        REPORT_INDICATOR("reportIndicator"),
        COMPANYNO(CommonConstant.COMPANY_NO),
        DIVISION(CommonConstant.DIVISION_VISIBLE_COLUMN),
        BUSINESS_UNIT("businessUnit"),
        COST_CENTER(CommonConstant.COST_CENTER_VISIBLE_COLUMN),
        PROJECT(CommonConstant.PROJECT_VISIBLE_COLUMN),
        FUTURE1(CommonConstant.FUTURE1_VISIBLE_COLUMN),
        FUTURE2(CommonConstant.FUTURE2_VISIBLE_COLUMN),
        BALANCE_TYPE("balanceType"),
        DATABASE("database"),
        DATA_ACCESS_SET("dataAccessSet"),
        CHART_OF_ACCOUNTS("chartOfAccounts"),
        LEDGER("ledger"),
        CATEGORY("category"),
        SOURCE(CommonConstant.SOURCE),
        CURRENCY("currency"),
        JOURNAL_NAME("journalName"),
        JOURNAL_DESCRIPTION("journalDescription"),
        REVERSE_JOURNAL("reverseJournal"),
        REVERSAL_PERIOD_DATE("reversalPeriodDate"),
        LINE_DESCRIPTION("lineDescription"),
        UDC1("udc1"),
        UDC2("udc2"),
        UDC3("udc3"),
        UDC4("udc4"),
        UDC5("udc5"),
        UDC6("udc6"),
        ADJUSTMENT_TYPE_STR(CommonConstant.ADJUSTMENT_TYPESTR),
        ADJUSTMENT_LEVEL_STR(CommonConstant.ADJUSTMENT_TYPESTR),
        ACCOUNT_CATEGORY_STR(CommonConstant.ACCOUNT_CATEGORYSTR),
        ACCOUNT_TYPE_STR(CommonConstant.ACCOUNT_TYPESTR),
        ACCOUNT_INDICTOR_STR(CommonConstant.ACCOUNT_INDICTORSTR),
        CURRENCY_STR("currencystr"),
        REVERSAL_PERIOD_DATE_STR("reversalPeriodDatestr"),
        UDC1_STR(CommonConstant.UDC1_STR),
        UDC2_STR(CommonConstant.UDC2_STR),
        UDC3_STR(CommonConstant.UDC3_STR),
        UDC4_STR(CommonConstant.UDC4_STR),
        UDC5_STR("udc55Str"),
        UDC6_STR(CommonConstant.UDC6_STR),
        GL_COMPANY_NO("gLCompanyNo"),
        COMPANY_NAME(CommonConstant.COMPANY_NAME),
        BUSINESS_UNIT_NAME(CommonConstant.BUSINESS_UNIT_NAME),
        DEDUCTION_CATEGORY("deductionCategory"),
        DEDUCTION_TYPE("deductionType"),
        DEDUCTION_PROGRAM("deductionProgram"),
        CREATED_BY(CommonConstant.CREATED_BY),
        CREATED_DATE(CommonConstant.CREATED_DATE),
        MODIFIED_DATE(CommonConstant.MODIFIED_DATE),
        CURRENT_PIPELINE_ACCRUAL("currentpipelineAccrual"),
        DEMAND_ACCRUAL("demandAccrual"),
        DEMAND_ACCRUAL_REFORCAST("demandAccrualReforecast"),
        CURRENT_BALANCE("currentbalance"),
        DEMAND_PAYMENT_RECON("demandPaymentRecon"),
        CURRENT_PIPELINE_ACCOUNT("currentPipelineAccout"),
        DEMAND_ACCRUAL_ACCOUNT("demandAccrualAccount"),
        DEMAND_ACCRUAL_REFORECAST_ACCOUNT("demandAccrualreforecastAccount"),
        DEMAND_ACCRUAL_RECON_ACCOUNT("demandAccrualReconAccount"),
        CURRENT_BALANCE_ACCOUNT("currentBalanceAccount"),
        BUSINESS_UNIT_NO(CommonConstant.BUSINESS_UNIT_NO),
        ADJUSTMENT_TYPE_PIEPLINE("pipelineAdjustmentType"),
        ADJ_SUMMARY_ADJUSTMENT_TYPE("adjSummaryAdjustmentType"),
        ADJ_SUMMARY_PIPELINE("adjSummaryPipeLineAccrual"),
        ADJ_SUMMARY_PIPELINE_ACCOUNT("adjSummaryPipeLineAccrualAccount"),
        ADJ_SUMMARY_DEMAND("adjSummaryDemandAccrual"),
        ADJ_SUMMARY_DEMAND_ACCOUNT("adjSummaryDemandAccrualAccount"),
        ADJ_SUMMARY_DEMAND_REFORECAST("adjSummaryDemandForecast"),
        ADJ_SUMMARY_DEMAND_REFORECAST_ACCOUNT("adjSummaryDemandForecastAccount"),
        ADJ_SUMMARY_CURRENT_PIPELINE("adjSummaryCurrentPipleLine"),
        ADJ_SUMMARY_CURRENT_PIPELINE_ACCOUNT("adjSummaryCurrentPipleLineAccount"),
        ADJ_SUMMARY_DEMAND_PAYMENT_RECON("adjSummarydemandPaymentRecon"),
        ADJ_SUMMARY_DEMAND_PAYMENT_RECON_ACCOUNT("adjSummarydemandPaymentReconAccount"),
        ADJ_SUMMARY_CURRENT_BALANCE("adjSummaryCurrentBalance"),
        ADJ_SUMMARY_CURRENT_BALANCE_ACCOUNT("adjSummaryCurrentBalanceAccount"),
        ADJUSTMENT_TYPE_DEMAND("demandAdjustmentType"),
        ADJUSTMENT_TYPE_INVENTORY("inventoryAdjustmentType"),
        ADJUSTMENT_TYPE_DEMAND_REFORECAST("reforecastAdjustmentType"),
        ADJUSTMENT_TYPE_DEMAND_TRUEUP("demandTrueupAdjustmentType"),
        ADJUSTMENT_TYPE_FEES_ACCRUAL("feesAccrualAdjustmentType"),
        ADJUSTMENT_TYPE_INFLATION("inflationAdjustmentType"),
        ADJUSTMENT_TYPE_CREDIT_CARD_FEES("creditcardFeesAdjustmentType"),
        ADJUSTMENT_TYPE_OTHER_FIXED_DOLLAR_FEES("otherfixedFeesAdjustmentType"),
        ADJUSTMENT_TYPE_INVERNTORY_INVALUATION("inventoryInflationAdjustmentType"),
        ADJUSTMENT_TYPE_PAYMNET_TRUEUP("paymentTrueAdjustmentType"),
        ADJUSTMENT_TYPE_RETURN_RESERVE("returnReserveAdjustmentType"),
        BAL_SUMMARY_START_BALANCE("startBalance"),
        BAL_SUMMARY_ACCOUNT("balSummaryAccount"),
        BAL_SUMMARY_PIPELINE_ACCRUAL("balSummaryPipelineAccrual"),
        BAL_SUMMARY_PIPELINE_ACCRUAL_ADJ_TYPE("balSummaryPipelineAccrualAdjustmentType"),
        BAL_SUMMARY_DEMAND_ACCRUAL("balSummaryDemandAccrual"),
        BAL_SUMMARY_DEMAND_ACCRUAL_ADJ_TYPE("balSummaryDemandAccrualAdjustmentType"),
        BAL_SUMMARY_PIPELINE_INVENTORY_TRUPUP("balSummaryPipelinelineInventoryTrueup"),
        BAL_SUMMARY_PIPELINE_INVENTORY_TRUPUP_ADJ_TYPE("balSummaryPipelinelineInventoryTrueupAdjustmentType"),
        BAL_SUMMARY_DEMAND_REFORECAST("balSummaryDemandReforecast"),
        BAL_SUMMARY_DEMAND_REFORECAST_ADJ_TYPE("balSummaryDemandReforecastAdjustmentType"),
        BAL_SUMMARY_DEMAND_TRUEUP("balSummaryDemandTrueup"),
        BAL_SUMMARY_DEMAND_TRUEUP_ADJ_TYPE("balSummaryDemandTrueupAdjustmentType"),
        BAL_SUMMARY_FEES_ACCRUAL("balSummaryFeesAccrual"),
        BAL_SUMMARY_FEES_ACCRUAL_ADJ_TYPE("balSummaryFeesAccrualAdjustmentType"),
        BAL_SUMMARY_INFLATION_ADJUTMENT("balSummaryInflationAdjustment"),
        BAL_SUMMARY_INFLATION_ADJUTMENT_ADJ_TYPE("balSummaryInflationAdjustmentAdjustmentType"),
        BAL_SUMMARY_CREDIT_CARD_FEES("balSummaryCreditCardFees"),
        BAL_SUMMARY_CREDIT_CARD_FEES_ADJ_TYPE("balSummaryCreditCardFeesAdjustmentType"),
        BAL_SUMMARY_OTHER_FIXED_DOLLAR_FEES("balSummaryOtherFixedDollarFees"),
        BAL_SUMMARY_OTHER_FIXED_DOLLAR_FEES_ADJ_TYPE("balSummaryOtherFixedDollarFeesAdjustmentType"),
        BAL_SUMMARY_INVENTORY_VALUATION("balSummaryInventoryValuation"),
        BAL_SUMMARY_INVENTORY_VALUATION_ADJ_TYPE("balSummaryInventoryValuationAdjustmentType"),
        BAL_SUMMARY_PAYMENT_TRUEUP("balSummaryPaymentTrueup"),
        BAL_SUMMARY_PAYMENT_TRUEUP_ADJ_TYPE("balSummaryPaymentTrueupAdjustmentType"),
        BAL_SUMMARY_RETURN_RESERVE("balSummaryReturnReserve"),
        BAL_SUMMARY_RETURN_RESERVE_ADJ_TYPE("balSummaryReturnReserveAdjustmentType"),
        TRANSACTION_1(TRANSACTION_PIPELINE_ACCRUAL),
        TRANSACTION_2("Transaction 2 - Demand Accrual"),
        TRANSACTION_3(TRANSACTION_INVENTORY),
        TRANSACTION_4("Transaction 4 - Demand Payment Recon"),
        TRANSACTION_5("Transaction 5 - Demand Reforecast True-up"),
        TRANSACTION_6(TRANSACTION_INFLATION_ADJUSTMENT),
        TRANSACTION_7("Transaction 7 - Distribution Fees"),
        TRANSACTION_8("Transaction 8 - Return Reserve"),
        ERROR("Error");

        /* The constant */
        private String constant;

        /**
         * Instantiates a new indicator constants.
         *
         * @param constant the constant
         */
        private ADJUSTMENT_RESERVE_CONSTANTS(String constant) {
            this.constant = constant;
        }

        /**
         * Gets the constant.
         *
         * @return the constant
         */
        public String getConstant() {
            return constant;
        }

        /**
         * To string.
         *
         * @return the string
         */
        @Override
        public String toString() {
            return constant;
        }
    }

    public static enum SalesVariables {

        TOTAL_UNITS("Total Units"),
        TOTAL_SALES("Total Sales"),
        EXCLUDED_UNITS("Excluded Units"),
        EXCLUDED_SALES("Excluded Sales"),
        NET_UNITS("Net Units"),
        NET_SALES("Net Sales"),
        PRICE(CommonConstant.PRICE_HEADER),
        PRICE_OVERRIDE("Price Override"),
        NET_CALCULATED_SALES("Net Calculated Sales"),
        SALES_VARIANCE("Sales Variance"),
        SALES_VARIANCE_PER("Sales Variance %"),
        ST_ARM_PIPELINE_SALES("ST_ARM_PIPELINE_SALES"),
        ST_ARM_PIPELINE_RATE("ST_ARM_PIPELINE_RATE"),
        ST_ARM_PIPELINE_EXCLUSION_DETAILS("ST_ARM_PIPELINE_EXCLUSION_DETAILS");
        private String constant;

        private SalesVariables(String constant) {
            this.constant = constant;
        }

        @Override
        public String toString() {
            return constant;
        }

        public static String[] names() {
            return Arrays.toString(SalesVariables.values()).replaceAll(CommonConstant.DOLLAR, StringUtils.EMPTY).split(",");
        }

    }

    public static enum ADJUSTMENT_CONFIG_CONSTANTS {

        TRANSACTION_NAME("transactionName", "TRANSACTION_NAME"),
        TRANSACTION_DESC("transactionDesc", "TRANSACTION_DESC"),
        METHODOLOGY("methodology", "Ht.DESCRIPTION"),
        REDEMPTION_PERIOD("redemptionPeriod", REDEMPTION_PERIOD1),
        CREATED_DATE(CommonConstant.CREATED_DATE, " CONVERT(VARCHAR(10), AC.CREATED_DATE, 101) "),
        CREATED_DATE_FORSORT(CommonConstant.CREATED_DATE, "AC.CREATED_DATE"),
        CREATED_BY(CommonConstant.CREATED_BY, "(crt.lastName+' '+crt.firstName)"),
        MODIFIED_DATE(CommonConstant.MODIFIED_DATE, "CONVERT(VARCHAR(10), AC.MODIFIED_DATE, 101) "),
        MODIFIED_DATE_FORSORT(CommonConstant.MODIFIED_DATE, "AC.MODIFIED_DATE"),
        MODIFIED_BY(CommonConstant.MODIFIED_BY_VISIBLE_COLUMN, "(mod.lastName+' '+mod.firstName)");
        private String constant;
        private String dbColumn;

        private ADJUSTMENT_CONFIG_CONSTANTS(String constant, String dbColumn) {
            this.dbColumn = dbColumn;
            this.constant = constant;
        }

        @Override
        public String toString() {
            return constant;
        }

        public String getPropertyId() {
            return constant;
        }

        public String getDBColumn() {
            return dbColumn;
        }

        public static String[] names() {
            return Arrays.toString(SalesVariables.values()).replaceAll(CommonConstant.DOLLAR, StringUtils.EMPTY).split(",");
        }
    }
    private static final String REDEMPTION_PERIOD1 = "REDEMPTION_PERIOD";

    private static final String[] MONTHS = new DateFormatSymbols().getMonths();

    public static String[] getMONTHS() {
        return MONTHS.clone();
    }

    public static synchronized Map<String, String> getDropDownMap() {
        if (dropDownMap == null) {
            dropDownMap = new HashMap<>();
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_TYPE.getConstant(), "ARM_ADJUSTMENT_TYPE");
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_LEVEL.getConstant(), "ARM_ADJUSTMENT_LEVEL");
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_CATEGORY.getConstant(), ACCOUNT_CATEGORY);
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_TYPE.getConstant(), "ARM_ACCOUNT_TYPE");
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTINDICTOR.getConstant(), "ACCOUNT_INDICTOR");
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.DEBIT_INDICATOR.getConstant(), "CRDIT_DEBIT_INDICATOR");
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.CREDIT_INDICATOR.getConstant(), "CRDIT_DEBIT_INDICATOR");
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.REPORT_INDICATOR.getConstant(), REPORT_INDICATOR);
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.CURRENCY.getConstant(), CURRENCY);
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.REVERSAL_PERIOD_DATE.getConstant(), REVERSAL_PERIOD);
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC1.getConstant(), "ARM_UDC_1");
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC2.getConstant(), "ARM_UDC_2");
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC3.getConstant(), "ARM_UDC_3");
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC4.getConstant(), "ARM_UDC_4");
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC5.getConstant(), "ARM_UDC_5");
            dropDownMap.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC6.getConstant(), "ARM_UDC_6");
        }
        return dropDownMap;
    }
    private static final String REVERSAL_PERIOD = "REVERSAL_PERIOD";
    private static final String REPORT_INDICATOR = "REPORT_INDICATOR";

    public static synchronized Map<String, String> getAdjustmentSummaryAccountMap() {
        if (adjustmentSummaryAccountMapper == null) {
            adjustmentSummaryAccountMapper = new HashMap<>();
            adjustmentSummaryAccountMapper.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_PIPELINE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_PIPELINE_ACCOUNT.getConstant());
            adjustmentSummaryAccountMapper.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_ACCOUNT.getConstant());
            adjustmentSummaryAccountMapper.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST_ACCOUNT.getConstant());
            adjustmentSummaryAccountMapper.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_PAYMENT_RECON.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_PAYMENT_RECON_ACCOUNT.getConstant());
            adjustmentSummaryAccountMapper.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_BALANCE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_BALANCE_ACCOUNT.getConstant());
            adjustmentSummaryAccountMapper.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_PIPELINE.getConstant(), ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_PIPELINE_ACCOUNT.getConstant());
        }
        return adjustmentSummaryAccountMapper;
    }

    public static synchronized Map<String, String> getAdjustmentSummaryVisibleToDBColumnMap() {
        if (adjustmentSummaryVisibleToDBColumnMap == null) {
            adjustmentSummaryVisibleToDBColumnMap = new HashMap<>();
            adjustmentSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), CommonConstant.CHECK_RECORD_VALUE);
            adjustmentSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_ADJUSTMENT_TYPE.getConstant(), "TRANSACTION_NAME");
            adjustmentSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_PIPELINE.getConstant(), CommonConstant.CURRENT_BALANCE_VALUE);
            adjustmentSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_PIPELINE_ACCOUNT.getConstant(), CommonConstant.CURRENT_BALANCE_ACC_VALUE);
            adjustmentSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND.getConstant(), "DEMAND_ACCRUAL");
            adjustmentSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_ACCOUNT.getConstant(), "DEMAND_ACCRUAL_ACC");
            adjustmentSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST.getConstant(), "DEMAND_REFORECAST");
            adjustmentSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST_ACCOUNT.getConstant(), "DEMAND_REFORECAST_ACC");
            adjustmentSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_PAYMENT_RECON.getConstant(), "DEMAND_PAYMENT_RECON");
            adjustmentSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_PAYMENT_RECON_ACCOUNT.getConstant(), "DEMAND_PAYMENT_RECON_ACC");
            adjustmentSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_BALANCE.getConstant(), CommonConstant.CURRENT_BALANCE_VALUE);
            adjustmentSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_BALANCE_ACCOUNT.getConstant(), CommonConstant.CURRENT_BALANCE_ACC_VALUE);
            adjustmentSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_PIPELINE.getConstant(), CommonConstant.CURRENT_BALANCE_VALUE);
            adjustmentSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_PIPELINE_ACCOUNT.getConstant(), CommonConstant.CURRENT_BALANCE_ACC_VALUE);
        }
        return adjustmentSummaryVisibleToDBColumnMap;
    }

    public static synchronized Map<String, String> getBalanceSummaryVisibleToDBColumnMap() {
        if (balanceSummaryVisibleToDBColumnMap == null) {
            balanceSummaryVisibleToDBColumnMap = new HashMap<>();
            balanceSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), CommonConstant.CHECK_RECORD_VALUE);
            balanceSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_ACCOUNT.getConstant(), ACCOUNT);
            balanceSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PIPELINE_ACCRUAL_ADJ_TYPE.getConstant(), "PIPELINE_ACCRUAL");
            balanceSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_ACCRUAL_ADJ_TYPE.getConstant(), "DEMAND_ACCRUAL");
            balanceSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PIPELINE_INVENTORY_TRUPUP_ADJ_TYPE.getConstant(), "PIPELINE_INVENTORY");
            balanceSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_REFORECAST_ADJ_TYPE.getConstant(), "DEMAND_REFORECAST");
            balanceSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_DEMAND_TRUEUP_ADJ_TYPE.getConstant(), "DEMAND_PAYMENT_TRUE_UP");
            balanceSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_FEES_ACCRUAL_ADJ_TYPE.getConstant(), "FEES_ACCRUAL");
            balanceSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_INFLATION_ADJUTMENT_ADJ_TYPE.getConstant(), "INFLATION_ADJ");
            balanceSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_CREDIT_CARD_FEES_ADJ_TYPE.getConstant(), "CREDIT_CARD_FEES");
            balanceSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_OTHER_FIXED_DOLLAR_FEES_ADJ_TYPE.getConstant(), "OTHER_FIXED_DOLLAR_FEES");
            balanceSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_INVENTORY_VALUATION_ADJ_TYPE.getConstant(), "INVENTORY_VALULATION");
            balanceSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_PAYMENT_TRUEUP_ADJ_TYPE.getConstant(), "DEMAND_PAYMENT_TRUE_UP");
            balanceSummaryVisibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BAL_SUMMARY_RETURN_RESERVE_ADJ_TYPE.getConstant(), "RETURN_RESERVE");
        }
        return balanceSummaryVisibleToDBColumnMap;
    }

    public static synchronized Map<String, String> getUDCMap() {
        if (udcMap == null) {
            udcMap = new HashMap<>();
            udcMap.put("UDC1", "UDC1");
            udcMap.put("UDC2", "UDC2");
            udcMap.put("UDC3", "UDC3");
            udcMap.put("UDC4", "UDC4");
            udcMap.put("UDC5", "UDC5");
            udcMap.put("UDC6", "UDC6");
        }
        return udcMap;
    }

    public static synchronized Map<String, String> getVisibleToDBColumnMap() {
        if (visibleToDBColumnMap == null) {
            visibleToDBColumnMap = new HashMap<>();
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), CommonConstant.CHECK_RECORD_VALUE);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_TYPE.getConstant(), ADJUSTMENT_TYPE);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_LEVEL.getConstant(), ADJUSTMENT_LEVEL);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_CATEGORY.getConstant(), ACCOUNT_CATEGORY);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_TYPE.getConstant(), ACCOUNT_TYPE);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTINDICTOR.getConstant(), ACCOUNT_INDICATOR1);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.CURRENCY.getConstant(), CURRENCY);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT.getConstant(), ACCOUNT);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTDESCRIPTION.getConstant(), VariableConstants.ACCOUNT_DESC);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BUSINESS_UNIT.getConstant(), REVERSAL_PERIOD);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.COST_CENTER.getConstant(), COST_CENTER);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.DIVISION.getConstant(), DIVISION);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.PROJECT.getConstant(), PROJECT);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.FUTURE1.getConstant(), FUTURE_1);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.FUTURE2.getConstant(), FUTURE_2);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BALANCE_TYPE.getConstant(), VariableConstants.BALANCE_TYPE);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.DATABASE.getConstant(), DATABASE);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.DATA_ACCESS_SET.getConstant(), VariableConstants.DATA_ACCESS_SET);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.CHART_OF_ACCOUNTS.getConstant(), VariableConstants.CHART_OF_ACCOUNTS);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.CATEGORY.getConstant(), CATEGORY);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.SOURCE.getConstant(), SOURCE);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_NAME.getConstant(), VariableConstants.JOURNAL_NAME);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_DESCRIPTION.getConstant(), VariableConstants.JOURNAL_DESCRIPTION);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.REVERSE_JOURNAL.getConstant(), VariableConstants.REVERSE_JOURNAL);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.LINE_DESCRIPTION.getConstant(), VariableConstants.LINE_DESCRIPTION);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC1.getConstant(), UDC_1);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC2.getConstant(), UDC_2);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC3.getConstant(), UDC_3);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC4.getConstant(), UDC_4);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC5.getConstant(), UDC_5);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC6.getConstant(), UDC_6);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.LEDGER.getConstant(), VariableConstants.LEDGER);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.DEBIT_INDICATOR.getConstant(), DEBIT);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.CREDIT_INDICATOR.getConstant(), CREDIT);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.REPORT_INDICATOR.getConstant(), REPORT_INDICATOR);
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.REVERSAL_PERIOD_DATE.getConstant(), "REVERSAL_PERIOD_DATE");
            //Adjustment reserve config. landing screen sorting
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.COMPANYNO.getConstant(), "cm.COMPANY_NO");
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.COMPANY_NAME.getConstant(), "cm.COMPANY_NAME");
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BUSINESS_UNIT_NO.getConstant(), "bu.COMPANY_NO");
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BUSINESS_UNIT_NAME.getConstant(), "bu.COMPANY_NAME");
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.BUSINESS_UNIT_NAME.getConstant(), "bu.COMPANY_NAME");
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.DEDUCTION_CATEGORY.getConstant(), "rs_c.DESCRIPTION");
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.DEDUCTION_TYPE.getConstant(), "rs_t.DESCRIPTION");
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.DEDUCTION_PROGRAM.getConstant(), "RS_P.DESCRIPTION");
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.CREATED_BY.getConstant(), "adj.CREATED_BY");
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.CREATED_DATE.getConstant(), "adj.CREATED_DATE");
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.MODIFIED_DATE.getConstant(), "adj.MODIFIED_DATE");
            visibleToDBColumnMap.put(ADJUSTMENT_RESERVE_CONSTANTS.CREATED_DATE.getConstant(), "adj.CREATED_DATE");
        }
        return visibleToDBColumnMap;
    }
    private static final String SOURCE = "SOURCE";
    private static final String DATABASE = "[DATABASE]";
    private static final String DEBIT = "DEBIT";
    private static final String CREDIT = "CREDIT";

    public static synchronized Map<String, String> getVisibleToDBColumnMapForConfig() {
        if (visibleToDBColumnMapForConfig == null) {
            visibleToDBColumnMapForConfig = new HashMap<>();
            visibleToDBColumnMapForConfig.put(ADJUSTMENT_CONFIG_CONSTANTS.TRANSACTION_NAME.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.TRANSACTION_NAME.getDBColumn());
            visibleToDBColumnMapForConfig.put(ADJUSTMENT_CONFIG_CONSTANTS.TRANSACTION_DESC.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.TRANSACTION_DESC.getDBColumn());
            visibleToDBColumnMapForConfig.put(ADJUSTMENT_CONFIG_CONSTANTS.METHODOLOGY.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.METHODOLOGY.getDBColumn());
            visibleToDBColumnMapForConfig.put(ADJUSTMENT_CONFIG_CONSTANTS.REDEMPTION_PERIOD.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.REDEMPTION_PERIOD.getDBColumn());
            visibleToDBColumnMapForConfig.put(ADJUSTMENT_CONFIG_CONSTANTS.CREATED_DATE.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.CREATED_DATE.getDBColumn());
            visibleToDBColumnMapForConfig.put(ADJUSTMENT_CONFIG_CONSTANTS.CREATED_BY.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.CREATED_BY.getDBColumn());
            visibleToDBColumnMapForConfig.put(ADJUSTMENT_CONFIG_CONSTANTS.MODIFIED_DATE.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.MODIFIED_DATE.getDBColumn());
            visibleToDBColumnMapForConfig.put(ADJUSTMENT_CONFIG_CONSTANTS.MODIFIED_BY.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.MODIFIED_BY.getDBColumn());
        }
        return visibleToDBColumnMapForConfig;
    }

    public synchronized static Map<String, String> getVisibleToDBColumnMapForConfigForSort() {
        if (visibleToDBColumnMapForConfigForSort == null) {
            visibleToDBColumnMapForConfigForSort = new HashMap<>();
            visibleToDBColumnMapForConfigForSort.put(ADJUSTMENT_CONFIG_CONSTANTS.TRANSACTION_NAME.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.TRANSACTION_NAME.getDBColumn());
            visibleToDBColumnMapForConfigForSort.put(ADJUSTMENT_CONFIG_CONSTANTS.TRANSACTION_DESC.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.TRANSACTION_DESC.getDBColumn());
            visibleToDBColumnMapForConfigForSort.put(ADJUSTMENT_CONFIG_CONSTANTS.METHODOLOGY.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.METHODOLOGY.getDBColumn());
            visibleToDBColumnMapForConfigForSort.put(ADJUSTMENT_CONFIG_CONSTANTS.REDEMPTION_PERIOD.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.REDEMPTION_PERIOD.getDBColumn());
            visibleToDBColumnMapForConfigForSort.put(ADJUSTMENT_CONFIG_CONSTANTS.CREATED_DATE.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.CREATED_DATE_FORSORT.getDBColumn());
            visibleToDBColumnMapForConfigForSort.put(ADJUSTMENT_CONFIG_CONSTANTS.CREATED_BY.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.CREATED_BY.getDBColumn());
            visibleToDBColumnMapForConfigForSort.put(ADJUSTMENT_CONFIG_CONSTANTS.MODIFIED_DATE.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.MODIFIED_DATE_FORSORT.getDBColumn());
            visibleToDBColumnMapForConfigForSort.put(ADJUSTMENT_CONFIG_CONSTANTS.MODIFIED_BY.getPropertyId(), ADJUSTMENT_CONFIG_CONSTANTS.MODIFIED_BY.getDBColumn());
        }
        return visibleToDBColumnMapForConfigForSort;
    }

    public static final String COMPANY_SMALL = CommonConstant.COMPANY_HEADER;
    public static final String CUSTOMER_SMALL = CommonConstant.CUSTOMER;
    public static final String INDICATOR_LEVEL_NDC = "NDC Level";
    public static final String TRADING_PARTNER = "Trading Partner";
    public static final String CONTRACT_SMALL = CommonConstant.CONTRACT;
    public static final String NDC = "NDC";
    public static final String REGEX_EXTRACT_DIGITS = "\\D+";
    public static final String HIERARCHYDEFINITIONSID = "hierarchyDefinitionSid";
    public static final String LEVELNAME = "levelName";
    public static final String SCREEN_NAME = "screenName";
    public static final String FIELD_NAME = "fieldName";
    public static final String TRUE = "true";
    public static final String PRODUCT = "Product";
    public static final String CUSTOMERORPRODUCT = "Customer/Product";
    public static final String CUSTOMERORPRODUCT_COLUMN = "group";
    public static final String INDICATOR = "indicator";
    public static final String DOT = ".";
    public static final String HIERARACHY_NO_PROPERTY = "hierarchyNo";

    public static Map listNameMapper() {
        if (listNameMapper.isEmpty()) {
            listNameMapper.put(VariableConstants.INVENTORY_CUSTOMER, "ARM_INVENTORY_CUSTOMER");
            listNameMapper.put(VariableConstants.PRICE, CommonConstant.ARM_PERIOD_BASIS);
            listNameMapper.put(VariableConstants.RESERVE_DATE, CommonConstant.ARM_PERIOD_BASIS);
            listNameMapper.put(VariableConstants.RATE_BASIS, "ARM_RATE_BASIS");
            listNameMapper.put(VariableConstants.RATE_FREQUENCY, "PAYMENT_FREQUENCY");
            listNameMapper.put(VariableConstants.RATE_PERIOD, CommonConstant.ARM_PERIOD_BASIS);
            listNameMapper.put(VariableConstants.DATE_TYPE, "ARM_DATE_TYPE");
            listNameMapper.put(VariableConstants.INVENTORY_DETAILS, "ARM_INVENTORY_DETAILS");
            listNameMapper.put(VariableConstants.ADJUSTED_PRICE, CommonConstant.ARM_PERIOD_BASIS);
            listNameMapper.put(VariableConstants.BASELINE_PRICE, CommonConstant.ARM_PERIOD_BASIS);
        }
        return listNameMapper;
    }

    public static final String FILTER_TABLE = "filtertable";
    public static final String BOOTSTRAP_UI = "bootstrap-ui";
    public static final String BOOTSTRAP_NM = "bootstrap-nm";
    public static final int ZERO = 0;
    public static final String PORTLET_NAME = "PortelName";
    public static final String USER_ID = "userId";
    public static final String MM = "MM";
    public static final String PRIVATE_VIEW = "Private View";
    public static final String PUBLIC_VIEW = "Public View";
    public static final String PRIVATE = "Private";
    public static final String PUBLIC = "Public";
    public static final String SAVE = "save";
    public static final String UPDATE = "update";
    public static final String PROJECTION_ID = "projectionId";
    public static final String HIERARCHY_NO = "hierarchyNo";
    public static final String COMMA = ",";
    public static final String HORIZONTAL = "horizontal";
    public static final String FAIL = "fail";
    public static final String STRING_ONE = "1";
    public static final String COUNTER_VALUE = "counterValue";
    //Added for workflow
    public static final String WORKFLOW_NOT_SAVED = "Not Saved";
    public static final String WORKFLOW_STATUS = "WorkflowStatus";
    public static final String BUSINESS_PROCESS_TYPE_ARM = "ARM";
    public static final String WORKFLOW_APPROVAL = "Interface - Workflow Approval";
    /**
     * The success.
     */
    public static final String SUCCESS = "success";
    /**
     * The projection master sid.
     */
    public static final String PROJECTION_MASTER_SID = "projectionMasterSid";
    public static final String R = "R";
    public static final String INDICATOR_LOGIC_CUSTOMER_HIERARCHY = "C";
    /**
     * The descriptionForFilter.
     */
    public static final String DESCRIPTION = "description";
    public static final String LIST_NAME = "listName";
    public static final String SEARCH_TEXT = "searchText";
    public static final String NOTES = "Notes";
    public static final String FILTERBAR = "filterbar";
    public static final String SPECIAL_CHAR = "([0-9|a-z|A-Z|\\.|\\,|\\_|\\-|\\@|\\#|\\$|\\&|\\%|\\s|\\/|\\(|\\!|\\)])*";
    public static final String EQUAL = "=";
    public static final String DATE_FORMAT = CommonConstant.YYYY_M_MDD;
    public static final String VIEW_SMALL = "view";
    public static final String EDIT_SMALL = "edit";
    public static final String SUBMITTED = "Submitted";
    private static final List<String> salesVariablesList = new ArrayList<>();
    private static final List<String> trx7salesVariablesList = new ArrayList<>();
    /**
     * The yes.
     */
    public static final String YES = "YES";
    public static final String REPORT_INDICATOR_YES = "Yes";
    public static final String REPORT_INDICATOR_NO = "No";
    
    public static final char CLOSE_BRACES = ')';
    public static final char UNDERSCORE = '_';
    public static final char COMMA_CHAR = ',';
    public static final char SINGLE_QUOTES = '\'';
    public static final char EMPTY_CHARACTER = '\0';

    public static enum frequencyVarables {

        MONTHLY("Monthly"),
        QUARTERLY("Quarterly"),
        SEMI_ANNUALLY("Semi-Annually"),
        ANNUALLY("Annually");
        private String constant;

        private frequencyVarables(String constant) {
            this.constant = constant;
        }

        @Override
        public String toString() {
            return constant;
        }

    }

    public static enum levelVariablesVarables {

        CUSTOMER(CommonConstant.CUSTOMER),
        CONTRACT(CommonConstant.CONTRACT),
        BRAND(CommonConstant.BRAND_LEVEL_FILTER),
        DEDUCTION(CommonConstant.DEDUCTION),
        DEDUCTION_PROGRAM("DEDUCTION PROGRAM"),
        DEDUCTION_TYPE("DEDUCTION TYPE"),
        DEDUCTION_CATEGORY("DEDUCTION CATEGORY"),
        DEDUCTION_CATEGORY2("DEDUCTION CATEGORY 2"),
        DEDUCTION_CATEGORY3("DEDUCTION CATEGORY 3"),
        DEDUCTION_CATEGORY4("DEDUCTION CATEGORY 4"),
        DEDUCTION_CATEGORY5("DEDUCTION CATEGORY 5"),
        DEDUCTION_CATEGORY6("DEDUCTION CATEGORY 6"),
        ITEM("Product");

        private String constant;

        private levelVariablesVarables(String constant) {
            this.constant = constant;
        }

        @Override
        public String toString() {
            return constant;
        }

    }

    public static List<String> getSalesVariables() {
        if (salesVariablesList.isEmpty()) {
            salesVariablesList.addAll(Arrays.asList(VariableConstants.getVariableSalesVisibleColumn()));
            salesVariablesList.add(VariableConstants.GROUP);
            salesVariablesList.add(VariableConstants.PRODUCT_NAME);
            salesVariablesList.add(VariableConstants.PRODUCT_MASTER_SID);
            salesVariablesList.add(VariableConstants.CHILDREN_ALLOWED);
        }
        return new ArrayList<>(salesVariablesList);
    }
    private static final Map<Integer, String> SUMMARY_LEVEL = new HashMap();
    private static final Map<Integer, String> SUMMARY_LEVEL_DEDUCTION_PRODUCT = new HashMap();
    private static final Map<Integer, String> SUMMARY_LEVEL_DEDUCTION_CUSTOMER = new HashMap();
    private static final Map<Integer, String> DEMAND_SUMMARY_LEVEL = new HashMap();
    private static final Map<Integer, String> RETURNS_SUMMARY_LEVEL = new HashMap();

    private static final Map<Integer, String> PIPELINE_SUMMARY_LEVEL = new HashMap();
    private static final Map<Integer, String> TRX7_SUMMARY_LEVEL = new HashMap();
    private static final Map<String, Map<Integer, String>> ADJ_SUMMARY_LEVEL = new HashMap();
    private static final Map<String, String> VIEW_NAME = new HashMap();
    private static final TreeMap<String, Integer> MASTERSIDS = new TreeMap<>();
    private static final TreeMap<String, Integer> MASTERSIDSFORTRX6 = new TreeMap<>();
    private static final Map<String, String> DEDUCTION_VALUES = new HashMap();
    private static final Map<String, String> DEDUCTION_VALUES_LEVELS = new HashMap();
    private static final Map<String, String> DEDUCTION_VALUES_MULTIPLE_PERIOD = new HashMap();
    private static final Map<String, String> DBColumnMapInventoryTrx6 = new HashMap();
    private static final Map<String, String> SUMMARY_VIEW_TYPE = new HashMap();
    private static final Map<String, Map<Integer, String>> LEVEL_FILTER_NAME = new HashMap();
    private static final Map<String, Map<Integer, String>> TRX8_RATES_LEVEL_FILTER_NAME = new HashMap();
    private static final Map<String, Map<Integer, String>> TRX8_RESERVEDATA_LEVEL_FILTER_NAME = new HashMap();
    private static final Map<String, Map<Integer, String>> TRX8_LEVEL_FILTER_NAME = new HashMap();
    private static final Map<String, Map<Integer, String>> TRX7_LEVEL_FILTER_NAME = new HashMap();
    private static final Map<String, Map<Integer, String>> PIPELINE_LEVEL_FILTER_NAME = new HashMap();
    private static final Map<String, Map<Integer, String>> RETURNS_LEVEL_FILTER_NAME = new HashMap();
    private static final Map<String, Map<Integer, String>> LEVEL_FILTER_NAME_MULTI_PERIOD = new HashMap();
    private static final Map<String, String> LEVEL_EXCEL_QUERY_NAME = new HashMap();
    private static final Map<String, String> DEDUCTION_LEVEL_QUERY_NAME = new HashMap();
    private static final Map<String, String[]> LEVEL_MAP = new HashMap<>();
    private static final Map<String, String> PROFILE_MAP = new HashMap<>();

    public static Map<Integer, String> getSummaryLevel() {

        if (SUMMARY_LEVEL.isEmpty()) {
            SUMMARY_LEVEL.put(1, levelVariablesVarables.DEDUCTION.toString());
            SUMMARY_LEVEL.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            SUMMARY_LEVEL.put(NumericConstants.THREE, levelVariablesVarables.CUSTOMER.toString());
            SUMMARY_LEVEL.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            SUMMARY_LEVEL.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());
        }
        return SUMMARY_LEVEL;
    }

    public static Map<Integer, String> getSummaryDeductionProductLevel() {

        if (SUMMARY_LEVEL_DEDUCTION_PRODUCT.isEmpty()) {
            SUMMARY_LEVEL_DEDUCTION_PRODUCT.put(1, levelVariablesVarables.BRAND.toString());
            SUMMARY_LEVEL_DEDUCTION_PRODUCT.put(NumericConstants.TWO, levelVariablesVarables.ITEM.toString());
        }
        return SUMMARY_LEVEL_DEDUCTION_PRODUCT;
    }

    public static Map<Integer, String> getSummaryDeductionCustomerLevel() {

        if (SUMMARY_LEVEL_DEDUCTION_CUSTOMER.isEmpty()) {
            SUMMARY_LEVEL_DEDUCTION_CUSTOMER.put(1, levelVariablesVarables.CUSTOMER.toString());
            SUMMARY_LEVEL_DEDUCTION_CUSTOMER.put(NumericConstants.TWO, levelVariablesVarables.BRAND.toString());
            SUMMARY_LEVEL_DEDUCTION_CUSTOMER.put(NumericConstants.THREE, levelVariablesVarables.ITEM.toString());
        }
        return SUMMARY_LEVEL_DEDUCTION_CUSTOMER;
    }

    public static Map<Integer, String> getDemandSummaryLevelsinglePeriod() {

        if (DEMAND_SUMMARY_LEVEL.isEmpty()) {
            DEMAND_SUMMARY_LEVEL.put(1, levelVariablesVarables.DEDUCTION.toString());
            DEMAND_SUMMARY_LEVEL.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            DEMAND_SUMMARY_LEVEL.put(NumericConstants.THREE, levelVariablesVarables.CONTRACT.toString());
            DEMAND_SUMMARY_LEVEL.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            DEMAND_SUMMARY_LEVEL.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());
        }
        return DEMAND_SUMMARY_LEVEL;
    }

    public static Map<Integer, String> getPipelineSummaryLevelSinglePeriod() {

        if (PIPELINE_SUMMARY_LEVEL.isEmpty()) {
            PIPELINE_SUMMARY_LEVEL.put(1, levelVariablesVarables.CUSTOMER.toString());
            PIPELINE_SUMMARY_LEVEL.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            PIPELINE_SUMMARY_LEVEL.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            PIPELINE_SUMMARY_LEVEL.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());
        }
        return PIPELINE_SUMMARY_LEVEL;
    }

    public static Map<Integer, String> getTrx7SummaryLevelSinglePeriod() {

        if (TRX7_SUMMARY_LEVEL.isEmpty()) {
            TRX7_SUMMARY_LEVEL.put(1, levelVariablesVarables.CONTRACT.toString());
            TRX7_SUMMARY_LEVEL.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            TRX7_SUMMARY_LEVEL.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            TRX7_SUMMARY_LEVEL.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());
        }
        return TRX7_SUMMARY_LEVEL;
    }

    public static Map<Integer, String> getTrx7SummaryCustomerContractSinglePeriod() {

        if (TRX7_SUMMARY_LEVEL.isEmpty()) {
            TRX7_SUMMARY_LEVEL.put(1, levelVariablesVarables.CUSTOMER.toString());
            TRX7_SUMMARY_LEVEL.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            TRX7_SUMMARY_LEVEL.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            TRX7_SUMMARY_LEVEL.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());
        }
        return TRX7_SUMMARY_LEVEL;
    }

    public static Map<String, String> getViewName() {

        if (VIEW_NAME.isEmpty()) {
            VIEW_NAME.put(ARMConstants.getDeductionProduct(), CommonConstant.BRAND_LEVEL_FILTER);
            VIEW_NAME.put(ARMConstants.getDeductionCustomer(), CommonConstant.CUSTOMER);
            VIEW_NAME.put(ARMConstants.getDeductionCustomerContract(), CommonConstant.CUSTOMER);
            VIEW_NAME.put(CommonConstant.DEDUCTION, CommonConstant.DEDUCTION);
            VIEW_NAME.put(CommonConstant.DEDUCTION_CONTRACT, CommonConstant.CONTRACT);
        }
        return VIEW_NAME;
    }
    private static final Map<String, String> deductionLevelMap = new HashMap<>();

    public static Map<String, String> loadDedutionMap() {
        if (deductionLevelMap.isEmpty()) {
            deductionLevelMap.put(ARMConstants.getDeductionCategory(), "A.RS_CATEGORY,1");
            deductionLevelMap.put(ARMConstants.getDeductionType(), "A.RS_TYPE,1");
            deductionLevelMap.put(ARMConstants.getDeductionProgram(), "A.REBATE_PROGRAM_TYPE,1");
            deductionLevelMap.put(ARMConstants.getDeduction(), "A.RS_ID,1");
            deductionLevelMap.put(ARMConstants.getDeductionCategory2(), "U.UDC2,1");
            deductionLevelMap.put(ARMConstants.getDeductionCategory3(), "U.UDC3,1");
            deductionLevelMap.put(ARMConstants.getDeductionCategory4(), "U.UDC4,1");
            deductionLevelMap.put(ARMConstants.getDeductionCategory5(), "U.UDC5,1");
            deductionLevelMap.put(ARMConstants.getDeductionCategory6(), "U.UDC6,1");
        }
        return deductionLevelMap;
    }

    public static Map<Integer, String> getADJSummaryLevel(String value) {

        if (ADJ_SUMMARY_LEVEL.isEmpty()) {
            Map<Integer, String> summaryLevelBrand = new HashMap();
            Map<Integer, String> summaryLevelCustomerded = new HashMap();
            Map<Integer, String> summaryLevelDedutionCustomer = new HashMap();
            Map<Integer, String> summaryLevelDedutionContract = new HashMap();
            summaryLevelBrand.put(1, levelVariablesVarables.DEDUCTION.toString());
            summaryLevelBrand.put(NumericConstants.TWO, levelVariablesVarables.BRAND.toString());
            summaryLevelBrand.put(NumericConstants.THREE, levelVariablesVarables.ITEM.toString());

            summaryLevelCustomerded.put(1, levelVariablesVarables.CUSTOMER.toString());
            summaryLevelCustomerded.put(NumericConstants.TWO, levelVariablesVarables.DEDUCTION.toString());
            summaryLevelCustomerded.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            summaryLevelCustomerded.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            summaryLevelDedutionCustomer.put(1, levelVariablesVarables.DEDUCTION.toString());
            summaryLevelDedutionCustomer.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            summaryLevelDedutionCustomer.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            summaryLevelDedutionCustomer.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            summaryLevelDedutionContract.put(1, levelVariablesVarables.DEDUCTION.toString());
            summaryLevelDedutionContract.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            summaryLevelDedutionContract.put(NumericConstants.THREE, levelVariablesVarables.CONTRACT.toString());
            summaryLevelDedutionContract.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            summaryLevelDedutionContract.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());

            ADJ_SUMMARY_LEVEL.put(ARMConstants.getDeductionProduct(), summaryLevelBrand);
            ADJ_SUMMARY_LEVEL.put(ARMConstants.getCustomerDedection(), summaryLevelCustomerded);
            ADJ_SUMMARY_LEVEL.put(ARMConstants.getDeductionCustomer(), summaryLevelDedutionCustomer);
            ADJ_SUMMARY_LEVEL.put(ARMConstants.getDeductionCustomerContract(), summaryLevelDedutionContract);
        }
        return ADJ_SUMMARY_LEVEL.get(value);
    }

    public static Map<Integer, String> getLevelAndLevelFilterMultiPeriod(String value) {

        if (LEVEL_FILTER_NAME_MULTI_PERIOD.isEmpty()) {
            Map<Integer, String> demandSummaryLevelBrand = new HashMap();
            Map<Integer, String> demandSummaryLevelCustomerded = new HashMap();
            Map<Integer, String> demandSummaryLevelDedutionCustomer = new HashMap();
            Map<Integer, String> demandSummaryLevelDedutionContract = new HashMap();
            Map<Integer, String> trx6Levels = new HashMap();

            demandSummaryLevelBrand.put(1, levelVariablesVarables.DEDUCTION.toString());
            demandSummaryLevelBrand.put(NumericConstants.TWO, levelVariablesVarables.BRAND.toString());
            demandSummaryLevelBrand.put(NumericConstants.THREE, levelVariablesVarables.ITEM.toString());

            demandSummaryLevelCustomerded.put(1, levelVariablesVarables.CUSTOMER.toString());
            demandSummaryLevelCustomerded.put(NumericConstants.TWO, levelVariablesVarables.DEDUCTION.toString());
            demandSummaryLevelCustomerded.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            demandSummaryLevelCustomerded.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            demandSummaryLevelDedutionCustomer.put(1, levelVariablesVarables.DEDUCTION.toString());
            demandSummaryLevelDedutionCustomer.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            demandSummaryLevelDedutionCustomer.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            demandSummaryLevelDedutionCustomer.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            demandSummaryLevelDedutionContract.put(1, levelVariablesVarables.DEDUCTION.toString());
            demandSummaryLevelDedutionContract.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            demandSummaryLevelDedutionContract.put(NumericConstants.THREE, levelVariablesVarables.CONTRACT.toString());
            demandSummaryLevelDedutionContract.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            demandSummaryLevelDedutionContract.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());

            trx6Levels.put(1, levelVariablesVarables.CUSTOMER.toString());
            trx6Levels.put(NumericConstants.TWO, levelVariablesVarables.BRAND.toString());
            trx6Levels.put(NumericConstants.THREE, levelVariablesVarables.ITEM.toString());

            LEVEL_FILTER_NAME_MULTI_PERIOD.put(ARMConstants.getDeductionProduct(), demandSummaryLevelBrand);
            LEVEL_FILTER_NAME_MULTI_PERIOD.put(ARMConstants.getCustomerDedection(), demandSummaryLevelCustomerded);
            LEVEL_FILTER_NAME_MULTI_PERIOD.put(ARMConstants.getDeductionCustomer(), demandSummaryLevelDedutionCustomer);
            LEVEL_FILTER_NAME_MULTI_PERIOD.put(ARMConstants.getDeductionCustomerContract(), demandSummaryLevelDedutionContract);
            LEVEL_FILTER_NAME_MULTI_PERIOD.put("Trx6_Inventory", trx6Levels);
        }
        return LEVEL_FILTER_NAME_MULTI_PERIOD.get(value);
    }

    public static String getLevelExcelQueryName(String value) {
        if (LEVEL_EXCEL_QUERY_NAME.isEmpty()) {

            LEVEL_EXCEL_QUERY_NAME.put(levelVariablesVarables.BRAND.toString().toUpperCase(Locale.ENGLISH), "B");
            LEVEL_EXCEL_QUERY_NAME.put(levelVariablesVarables.ITEM.toString().toUpperCase(Locale.ENGLISH), "I");
            LEVEL_EXCEL_QUERY_NAME.put(levelVariablesVarables.DEDUCTION.toString().toUpperCase(Locale.ENGLISH), "D");
            LEVEL_EXCEL_QUERY_NAME.put(levelVariablesVarables.DEDUCTION_CATEGORY.toString().toUpperCase(Locale.ENGLISH), "DC");
            LEVEL_EXCEL_QUERY_NAME.put(levelVariablesVarables.DEDUCTION_CATEGORY2.toString().toUpperCase(Locale.ENGLISH), "DC2");
            LEVEL_EXCEL_QUERY_NAME.put(levelVariablesVarables.DEDUCTION_CATEGORY3.toString().toUpperCase(Locale.ENGLISH), "DC3");
            LEVEL_EXCEL_QUERY_NAME.put(levelVariablesVarables.DEDUCTION_CATEGORY4.toString().toUpperCase(Locale.ENGLISH), "DC4");
            LEVEL_EXCEL_QUERY_NAME.put(levelVariablesVarables.DEDUCTION_CATEGORY5.toString().toUpperCase(Locale.ENGLISH), "DC5");
            LEVEL_EXCEL_QUERY_NAME.put(levelVariablesVarables.DEDUCTION_CATEGORY6.toString().toUpperCase(Locale.ENGLISH), "DC6");
            LEVEL_EXCEL_QUERY_NAME.put(levelVariablesVarables.DEDUCTION_PROGRAM.toString().toUpperCase(Locale.ENGLISH), "DP");
            LEVEL_EXCEL_QUERY_NAME.put(levelVariablesVarables.DEDUCTION_TYPE.toString().toUpperCase(Locale.ENGLISH), "DT");
            LEVEL_EXCEL_QUERY_NAME.put(levelVariablesVarables.CUSTOMER.toString().toUpperCase(Locale.ENGLISH), "T");
            LEVEL_EXCEL_QUERY_NAME.put(levelVariablesVarables.CONTRACT.toString().toUpperCase(Locale.ENGLISH), "C");
        }
        return LEVEL_EXCEL_QUERY_NAME.get(value.toUpperCase(Locale.ENGLISH));
    }

    public static String getDeductionLevelQueryName(String value) {
        if (DEDUCTION_LEVEL_QUERY_NAME.isEmpty()) {
            DEDUCTION_LEVEL_QUERY_NAME.put(ARMConstants.getDeduction(), ARMConstants.getDeduction());
            DEDUCTION_LEVEL_QUERY_NAME.put(ARMConstants.getDeductionCategory(), ARMConstants.getDeductionCategory());
            DEDUCTION_LEVEL_QUERY_NAME.put(ARMConstants.getDeductionCategory2(), ARMConstants.getDeductionCategory2());
            DEDUCTION_LEVEL_QUERY_NAME.put(ARMConstants.getDeductionCategory3(), ARMConstants.getDeductionCategory3());
            DEDUCTION_LEVEL_QUERY_NAME.put(ARMConstants.getDeductionCategory4(), ARMConstants.getDeductionCategory4());
            DEDUCTION_LEVEL_QUERY_NAME.put(ARMConstants.getDeductionCategory5(), ARMConstants.getDeductionCategory5());
            DEDUCTION_LEVEL_QUERY_NAME.put(ARMConstants.getDeductionCategory6(), ARMConstants.getDeductionCategory6());
            DEDUCTION_LEVEL_QUERY_NAME.put(ARMConstants.getDeductionProgram(), ARMConstants.getDeductionProgram());
            DEDUCTION_LEVEL_QUERY_NAME.put(ARMConstants.getDeductionType(), ARMConstants.getDeductionType());
        }
        return DEDUCTION_LEVEL_QUERY_NAME.get(value);
    }

    public static Map<Integer, String> getLevelAndLevelFilter(String value) {

        if (LEVEL_FILTER_NAME.isEmpty()) {
            Map<Integer, String> salesSummaryLevelBrand = new HashMap();
            Map<Integer, String> salesSummaryLevelCustomerded = new HashMap();
            Map<Integer, String> salesSummaryLevelDedutionCustomer = new HashMap();
            Map<Integer, String> salesSummaryLevelDedutionContract = new HashMap();
            Map<Integer, String> salesSummaryLeveldedutionContract = new HashMap();
            Map<Integer, String> salesSummaryLevelnondedutionContract = new HashMap();
            Map<Integer, String> salesSummaryLevelDedutionContractCustomer = new HashMap();
            Map<Integer, String> salesSummaryLevelnondedutionContractCustomer = new HashMap();
            Map<Integer, String> salesSummaryLevelRatesDedutionCustomer = new HashMap();

            salesSummaryLevelBrand.put(1, levelVariablesVarables.BRAND.toString());
            salesSummaryLevelBrand.put(NumericConstants.TWO, levelVariablesVarables.ITEM.toString());

            salesSummaryLevelCustomerded.put(1, levelVariablesVarables.CUSTOMER.toString());
            salesSummaryLevelCustomerded.put(NumericConstants.TWO, levelVariablesVarables.DEDUCTION.toString());
            salesSummaryLevelCustomerded.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            salesSummaryLevelCustomerded.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            salesSummaryLevelDedutionCustomer.put(1, levelVariablesVarables.CUSTOMER.toString());
            salesSummaryLevelDedutionCustomer.put(NumericConstants.TWO, levelVariablesVarables.BRAND.toString());
            salesSummaryLevelDedutionCustomer.put(NumericConstants.THREE, levelVariablesVarables.ITEM.toString());

            salesSummaryLeveldedutionContract.put(1, levelVariablesVarables.CONTRACT.toString());
            salesSummaryLeveldedutionContract.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            salesSummaryLeveldedutionContract.put(NumericConstants.THREE, levelVariablesVarables.ITEM.toString());

            salesSummaryLevelDedutionContract.put(1, levelVariablesVarables.DEDUCTION.toString());
            salesSummaryLevelDedutionContract.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            salesSummaryLevelDedutionContract.put(NumericConstants.THREE, levelVariablesVarables.CONTRACT.toString());
            salesSummaryLevelDedutionContract.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            salesSummaryLevelDedutionContract.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());

            salesSummaryLevelDedutionContractCustomer.put(1, levelVariablesVarables.DEDUCTION.toString());
            salesSummaryLevelDedutionContractCustomer.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            salesSummaryLevelDedutionContractCustomer.put(NumericConstants.THREE, levelVariablesVarables.CUSTOMER.toString());
            salesSummaryLevelDedutionContractCustomer.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            salesSummaryLevelDedutionContractCustomer.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());

            salesSummaryLevelnondedutionContractCustomer.put(1, levelVariablesVarables.CONTRACT.toString());
            salesSummaryLevelnondedutionContractCustomer.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            salesSummaryLevelnondedutionContractCustomer.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            salesSummaryLevelnondedutionContractCustomer.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            salesSummaryLevelnondedutionContract.put(1, levelVariablesVarables.CUSTOMER.toString());
            salesSummaryLevelnondedutionContract.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            salesSummaryLevelnondedutionContract.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            salesSummaryLevelnondedutionContract.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            salesSummaryLevelRatesDedutionCustomer.put(NumericConstants.ONE, levelVariablesVarables.CUSTOMER.toString());
            salesSummaryLevelRatesDedutionCustomer.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            salesSummaryLevelRatesDedutionCustomer.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            salesSummaryLevelRatesDedutionCustomer.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            LEVEL_FILTER_NAME.put(ARMConstants.getDeductionProduct(), salesSummaryLevelBrand);
            LEVEL_FILTER_NAME.put(ARMConstants.getCustomerDedection(), salesSummaryLevelCustomerded);
            LEVEL_FILTER_NAME.put(ARMConstants.getDeductionCustomer(), salesSummaryLevelDedutionCustomer);
            LEVEL_FILTER_NAME.put(ARMConstants.getDeductionCustomerContract(), salesSummaryLevelDedutionContract);
            LEVEL_FILTER_NAME.put(CommonConstant.DEDUCTION_CONTRACT, salesSummaryLeveldedutionContract);
            LEVEL_FILTER_NAME.put(ARMConstants.getDeductionContractCustomer(), salesSummaryLevelDedutionContractCustomer);
            LEVEL_FILTER_NAME.put("non" + ARMConstants.getDeductionContractCustomer(), salesSummaryLevelnondedutionContractCustomer);
            LEVEL_FILTER_NAME.put("non" + ARMConstants.getDeductionCustomerContract(), salesSummaryLevelnondedutionContract);
            LEVEL_FILTER_NAME.put(ARMConstants.getDeductionCustomer() + "RATES", salesSummaryLevelDedutionCustomer);

        }
        return LEVEL_FILTER_NAME.get(value);
    }

    public static Map<Integer, String> getPipeLineLevelAndLevelFilter(String value) {

        if (PIPELINE_LEVEL_FILTER_NAME.isEmpty()) {
            Map<Integer, String> pipelineSummaryLevelBrand = new HashMap();
            Map<Integer, String> pipelineSummaryLevelCustomerded = new HashMap();
            Map<Integer, String> pipelineSummaryLevelDedutionCustomer = new HashMap();
            Map<Integer, String> pipelineSummaryLevelDedutionContract = new HashMap();
            Map<Integer, String> pipelineSummaryLevelDedutionContractCustomer = new HashMap();

            Map<Integer, String> pipelineSummaryLevelnondedutionContract = new HashMap();
            pipelineSummaryLevelBrand.put(1, levelVariablesVarables.BRAND.toString());
            pipelineSummaryLevelBrand.put(NumericConstants.TWO, levelVariablesVarables.ITEM.toString());

            pipelineSummaryLevelCustomerded.put(1, levelVariablesVarables.CUSTOMER.toString());
            pipelineSummaryLevelCustomerded.put(NumericConstants.TWO, levelVariablesVarables.DEDUCTION.toString());
            pipelineSummaryLevelCustomerded.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            pipelineSummaryLevelCustomerded.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            pipelineSummaryLevelDedutionCustomer.put(1, levelVariablesVarables.CUSTOMER.toString());
            pipelineSummaryLevelDedutionCustomer.put(NumericConstants.TWO, levelVariablesVarables.BRAND.toString());
            pipelineSummaryLevelDedutionCustomer.put(NumericConstants.THREE, levelVariablesVarables.ITEM.toString());

            pipelineSummaryLevelDedutionContract.put(1, levelVariablesVarables.DEDUCTION.toString());
            pipelineSummaryLevelDedutionContract.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            pipelineSummaryLevelDedutionContract.put(NumericConstants.THREE, levelVariablesVarables.CONTRACT.toString());
            pipelineSummaryLevelDedutionContract.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            pipelineSummaryLevelDedutionContract.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());

            pipelineSummaryLevelDedutionContractCustomer.put(1, levelVariablesVarables.DEDUCTION.toString());
            pipelineSummaryLevelDedutionContractCustomer.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            pipelineSummaryLevelDedutionContractCustomer.put(NumericConstants.THREE, levelVariablesVarables.CUSTOMER.toString());
            pipelineSummaryLevelDedutionContractCustomer.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            pipelineSummaryLevelDedutionContractCustomer.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());

            pipelineSummaryLevelnondedutionContract.put(1, levelVariablesVarables.CUSTOMER.toString());
            pipelineSummaryLevelnondedutionContract.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            pipelineSummaryLevelnondedutionContract.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            pipelineSummaryLevelnondedutionContract.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            PIPELINE_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionProduct(), pipelineSummaryLevelBrand);
            PIPELINE_LEVEL_FILTER_NAME.put(ARMConstants.getCustomerDedection(), pipelineSummaryLevelCustomerded);
            PIPELINE_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionCustomer(), pipelineSummaryLevelDedutionCustomer);
            PIPELINE_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionCustomerContract(), pipelineSummaryLevelDedutionContract);
            PIPELINE_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionContractCustomer(), pipelineSummaryLevelDedutionContractCustomer);
            PIPELINE_LEVEL_FILTER_NAME.put("non" + ARMConstants.getDeductionCustomerContract(), pipelineSummaryLevelnondedutionContract);
        }
        return PIPELINE_LEVEL_FILTER_NAME.get(value);
    }

    public static Map<Integer, String> getReturnsLevelAndLevelFilter(String value) {

        if (RETURNS_LEVEL_FILTER_NAME.isEmpty()) {
            Map<Integer, String> summaryLevelBrand = new HashMap();
            Map<Integer, String> summaryLevelDedutionCustomer = new HashMap();
            Map<Integer, String> summaryLevelDedutionContract = new HashMap();

            summaryLevelBrand.put(1, levelVariablesVarables.BRAND.toString());
            summaryLevelBrand.put(NumericConstants.TWO, levelVariablesVarables.ITEM.toString());

            summaryLevelDedutionCustomer.put(NumericConstants.ONE, levelVariablesVarables.CUSTOMER.toString());
            summaryLevelDedutionCustomer.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            summaryLevelDedutionCustomer.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            summaryLevelDedutionCustomer.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            summaryLevelDedutionContract.put(NumericConstants.ONE, levelVariablesVarables.CONTRACT.toString());
            summaryLevelDedutionContract.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            summaryLevelDedutionContract.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            summaryLevelDedutionContract.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            RETURNS_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionProduct(), summaryLevelBrand);
            RETURNS_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionCustomer(), summaryLevelDedutionCustomer);
            RETURNS_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionContract(), summaryLevelDedutionContract);
        }
        return RETURNS_LEVEL_FILTER_NAME.get(value);
    }

    public static TreeMap<String, Integer> getMasterIdsMap() {
        MASTERSIDS.put(levelVariablesVarables.DEDUCTION.toString(), null);
        MASTERSIDS.put(levelVariablesVarables.CONTRACT.toString(), null);
        MASTERSIDS.put(levelVariablesVarables.CUSTOMER.toString(), null);
        MASTERSIDS.put(levelVariablesVarables.BRAND.toString(), null);
        MASTERSIDS.put(levelVariablesVarables.ITEM.toString(), null);
        return MASTERSIDS;
    }

    public static TreeMap<String, Integer> getMasterIdsMapForTrx6() {
        MASTERSIDSFORTRX6.put(levelVariablesVarables.CUSTOMER.toString(), null);
        MASTERSIDSFORTRX6.put(levelVariablesVarables.BRAND.toString(), null);
        MASTERSIDSFORTRX6.put(levelVariablesVarables.ITEM.toString(), null);
        return MASTERSIDSFORTRX6;
    }

    public static Map<String, String> getDeductionValuesMap() {
        DEDUCTION_VALUES.put(ARMConstants.getDeduction(), " B.RS_MODEL_SID ");
        DEDUCTION_VALUES.put(ARMConstants.getDeductionCategory(), " B.RS_CATEGORY_SID ");
        DEDUCTION_VALUES.put(CommonConstant.DEDUCTION_CATEGORY_KEY, " B.UDC1_SID ");
        DEDUCTION_VALUES.put(ARMConstants.getDeductionCategory2(), " B.UDC2_SID ");
        DEDUCTION_VALUES.put(ARMConstants.getDeductionCategory3(), " B.UDC3_SID ");
        DEDUCTION_VALUES.put(ARMConstants.getDeductionCategory4(), " B.UDC4_SID ");
        DEDUCTION_VALUES.put(ARMConstants.getDeductionCategory5(), " B.UDC5_SID ");
        DEDUCTION_VALUES.put(ARMConstants.getDeductionCategory6(), " B.UDC6_SID ");
        DEDUCTION_VALUES.put(ARMConstants.getDeductionProgram(), " B.REBATE_PROGRAM_TYPE_SID ");
        DEDUCTION_VALUES.put(ARMConstants.getDeductionType(), " B.RS_TYPE_SID ");
        return DEDUCTION_VALUES;
    }

    public static Map<String, String> getDeductionValuesMapForLevel() {
        DEDUCTION_VALUES_LEVELS.put(ARMConstants.getDeduction(), " B.RS_MODEL_SID ");
        DEDUCTION_VALUES_LEVELS.put(ARMConstants.getDeductionCategory(), "  B.RS_CATEGORY ");
        DEDUCTION_VALUES_LEVELS.put(CommonConstant.DEDUCTION_CATEGORY_KEY, " U.UDC1 ");
        DEDUCTION_VALUES_LEVELS.put(ARMConstants.getDeductionCategory2(), " U.UDC2");
        DEDUCTION_VALUES_LEVELS.put(ARMConstants.getDeductionCategory3(), " U.UDC3");
        DEDUCTION_VALUES_LEVELS.put(ARMConstants.getDeductionCategory4(), " U.UDC4");
        DEDUCTION_VALUES_LEVELS.put(ARMConstants.getDeductionCategory5(), " U.UDC5");
        DEDUCTION_VALUES_LEVELS.put(ARMConstants.getDeductionCategory6(), " U.UDC6");
        DEDUCTION_VALUES_LEVELS.put(ARMConstants.getDeductionProgram(), " B.REBATE_PROGRAM_TYPE ");
        DEDUCTION_VALUES_LEVELS.put(ARMConstants.getDeductionType(), " B.RS_TYPE ");
        return DEDUCTION_VALUES_LEVELS;
    }

    public static Map<String, String> getDeductionValuesMapForMultiplePeriod() {
        DEDUCTION_VALUES_MULTIPLE_PERIOD.put(ARMConstants.getDeduction(), " R.RS_MODEL_SID ");
        DEDUCTION_VALUES_MULTIPLE_PERIOD.put(ARMConstants.getDeductionCategory(), "  R.RS_CATEGORY ");
        DEDUCTION_VALUES_MULTIPLE_PERIOD.put(CommonConstant.DEDUCTION_CATEGORY_KEY, " U.UDC1 ");
        DEDUCTION_VALUES_MULTIPLE_PERIOD.put(ARMConstants.getDeductionCategory2(), " U.UDC2");
        DEDUCTION_VALUES_MULTIPLE_PERIOD.put(ARMConstants.getDeductionCategory3(), " U.UDC3");
        DEDUCTION_VALUES_MULTIPLE_PERIOD.put(ARMConstants.getDeductionCategory4(), " U.UDC4");
        DEDUCTION_VALUES_MULTIPLE_PERIOD.put(ARMConstants.getDeductionCategory5(), " U.UDC5");
        DEDUCTION_VALUES_MULTIPLE_PERIOD.put(ARMConstants.getDeductionCategory6(), " U.UDC6");
        DEDUCTION_VALUES_MULTIPLE_PERIOD.put(ARMConstants.getDeductionProgram(), " R.REBATE_PROGRAM_TYPE ");
        DEDUCTION_VALUES_MULTIPLE_PERIOD.put(ARMConstants.getDeductionType(), " R.RS_TYPE ");
        return DEDUCTION_VALUES_MULTIPLE_PERIOD;
    }

    public static String getSummaryViewType(String value) {
        SUMMARY_VIEW_TYPE.put(ARMConstants.getDeductionProduct(), "DEDUCTION_PRODUCT");
        SUMMARY_VIEW_TYPE.put(ARMConstants.getCustomerDedection(), "CUSTOMER_DEDUCTION");
        SUMMARY_VIEW_TYPE.put(ARMConstants.getDeductionCustomer(), "DEDUCTION_CUSTOMER");
        SUMMARY_VIEW_TYPE.put(ARMConstants.getDeductionCustomerContract(), "DEDUCTION_CUSTOMER_CONTRACT");
        SUMMARY_VIEW_TYPE.put(CommonConstant.DEDUCTION_CONTRACT, "DEDUCTION_CONTRACT");

        return SUMMARY_VIEW_TYPE.get(value);
    }

    public static Map<String, String> loadViewFilterMap() {
        if (VIEW_FILTER_MAP.isEmpty()) {
            VIEW_FILTER_MAP.put(CommonConstant.VIEW_NAME_VISIBLE_COLUMN, "FVM.VIEW_NAME");
            VIEW_FILTER_MAP.put(CommonConstant.ADJUSTMENT_TYPE_VISIBLE_COLUMN, "PM.FORECASTING_TYPE");
            VIEW_FILTER_MAP.put("projectionDescription", "PM.PROJECTION_DESCRIPTION");
            VIEW_FILTER_MAP.put(CommonConstant.COMPANY_NAME, "CM.COMPANY_NAME");

            VIEW_FILTER_MAP.put(CommonConstant.BU_COMPANY_NAME_VISIBLE_COLUMN, "CM_BU.COMPANY_NAME");
            VIEW_FILTER_MAP.put(CommonConstant.FROM_PERIOD, "PM.FROM_DATE");
            VIEW_FILTER_MAP.put(CommonConstant.TO_PERIOD, "PM.TO_DATE");
            VIEW_FILTER_MAP.put(CommonConstant.DEDUCTION_LEVELS_VISIBLE_COLUMN, "AM.DEDUCTION_LEVEL");
            VIEW_FILTER_MAP.put(CommonConstant.CUSTOMER_HIERARCHY_NAME_VISIBLE_COLUMN, "HD1.HIERARCHY_NAME");
            VIEW_FILTER_MAP.put(CommonConstant.CUSTOMER_RELATIONSHIP_VISIBLE_COLUMN, "CUST_RB.RELATIONSHIP_NAME");
            VIEW_FILTER_MAP.put(CommonConstant.CUSTOMER_HIERARCHY_LEVEL_VISIBLE_COLUMN, "PM.CUSTOMER_HIERARCHY_LEVEL");
            VIEW_FILTER_MAP.put(CommonConstant.PRODUCT_HIERARCHY_NAME_VISIBLE_COLUMN, "HD2.HIERARCHY_NAME");
            VIEW_FILTER_MAP.put(CommonConstant.PRODUCT_RELATIONSHIP_VISIBLE_COLUMN, "PROD_RB.RELATIONSHIP_NAME");
            VIEW_FILTER_MAP.put(CommonConstant.PRODUCT_HIERARCHY_LEVEL_VISIBLE_COLUMN, "PM.PRODUCT_HIERARCHY_LEVEL");
            VIEW_FILTER_MAP.put("createdDateString", "FVM.CREATED_DATE");
            VIEW_FILTER_MAP.put(CommonConstant.CREATED_DATE, "FVM.CREATED_DATE");
            VIEW_FILTER_MAP.put(CommonConstant.MODIFIED_DATE, "FVM.MODIFIED_DATE");
            VIEW_FILTER_MAP.put(CommonConstant.CREATED_BY_STRING, "FVM.CREATED_BY");
        }
        return VIEW_FILTER_MAP;
    }

    public static String[] getLevelMap(String levelName) {
        if (LEVEL_MAP.isEmpty()) {
            LEVEL_MAP.put(ARMConstants.getDeductionCategory(), new String[]{"A.RS_CATEGORY,H1.DESCRIPTION AS CATEGORY", CATEGORY});
            LEVEL_MAP.put(ARMConstants.getDeductionType(), new String[]{"A.RS_TYPE,H2.DESCRIPTION AS TYPE", "TYPE"});
            LEVEL_MAP.put(ARMConstants.getDeductionProgram(), new String[]{"A.REBATE_PROGRAM_TYPE,H3.DESCRIPTION AS PROGRAM_TYPE", "PROGRAM_TYPE"});
            LEVEL_MAP.put(ARMConstants.getDeductionCategory2(), new String[]{"U.UDC2,H5.DESCRIPTION AS UDC", "UDC", "UDC2"});
            LEVEL_MAP.put(ARMConstants.getDeductionCategory3(), new String[]{"U.UDC3,H6.DESCRIPTION AS UDC", "UDC", "UDC3"});
            LEVEL_MAP.put(ARMConstants.getDeductionCategory4(), new String[]{"U.UDC4,H7.DESCRIPTION AS UDC", "UDC", "UDC4"});
            LEVEL_MAP.put(ARMConstants.getDeductionCategory5(), new String[]{"U.UDC5,H8.DESCRIPTION AS UDC", "UDC", "UDC5"});
            LEVEL_MAP.put(ARMConstants.getDeductionCategory6(), new String[]{"U.UDC6,H9.DESCRIPTION AS UDC", "UDC", "UDC6"});
            LEVEL_MAP.put(ARMConstants.getDeduction(), new String[]{"A.RS_MODEL_SID,A.RS_ID + '- ' + A.RS_NAME AS RS_MODEL_ID", "RS_MODEL_ID"});
        }
        return LEVEL_MAP.get(levelName);
    }

    public static Map<String, String> loadProfileFilterMap() {
        if (PROFILE_MAP.isEmpty()) {
            PROFILE_MAP.put("profileName", "PROFILE_NAME");
            PROFILE_MAP.put("profileDesc", "PROFILE_DESCRIPTION");
        }
        return PROFILE_MAP;
    }
    public static final String TOTAL = "Total";
    public static final String DEMAND_ACCRUAL_EDIT_TABLE = "ST_ARM_DEMAND_ADJ_SUMMARY";
    public static final String DEMAND_ACCRUAL_VIEW_TABLE = "ARM_DEMAND_ADJ_SUMMARY";
    private static final Map<Integer, String> DEDUCTION_LEVEL_MAP = new HashMap<>();

    public static Map<Integer, String> deductionLevelMap() {
        if (DEDUCTION_LEVEL_MAP.isEmpty()) {
            DEDUCTION_LEVEL_MAP.put(1, ARMConstants.getDeductionCategory());
            DEDUCTION_LEVEL_MAP.put(NumericConstants.TWO, ARMConstants.getDeductionType());
            DEDUCTION_LEVEL_MAP.put(NumericConstants.THREE, ARMConstants.getDeductionProgram());
            DEDUCTION_LEVEL_MAP.put(NumericConstants.FOUR, ARMConstants.getDeductionCategory2());
            DEDUCTION_LEVEL_MAP.put(NumericConstants.FIVE, ARMConstants.getDeductionCategory3());
            DEDUCTION_LEVEL_MAP.put(NumericConstants.SIX, ARMConstants.getDeductionCategory4());
            DEDUCTION_LEVEL_MAP.put(NumericConstants.SEVEN, ARMConstants.getDeductionCategory5());
            DEDUCTION_LEVEL_MAP.put(NumericConstants.EIGHT, ARMConstants.getDeductionCategory6());
            DEDUCTION_LEVEL_MAP.put(NumericConstants.NINE, ARMConstants.getDeduction());
        }
        return DEDUCTION_LEVEL_MAP;
    }

    public static enum Trx6_Variables {

        TOTAL_INVENTORY("Total Inventory", "TotalInventory"),
        BASELINE_PRICE(CommonConstant.BASELINE_PRICE_HEADER, "BaselinePrice"),
        BASELINE_PRICE_OVERRIDE("Baseline Price Override", "BaselinePriceOverride"),
        BASELINE_CALCULATED_AMOUNT("Baseline Calculated Amount", "BaselineCalculatedAmount"),
        ADJUSTED_PRICE(CommonConstant.ADJUSTED_PRICE_HEADER, "AdjustedPrice"),
        ADJUSTED_PRICE_OVERRIDE("Adjusted Price Override", "AdjustedPriceOverride"),
        ADJUSTED_CALCULATED_AMOUNT("Adjusted Calculated Amount", "AdjustedCalculatedAmount"),
        PRICE_CHANGE("Price Change", "PriceChange"),
        PRICE_CHANGE_PERCENT("Price Change %", "PriceChangePercent"),
        NET_CALCULATED_AMOUNT("Net Calculated Amount", "NetCalculatedAmount"),
        INFLATION_FACTOR("Inflation Factor", "InflationFactor"),
        INFLATION_ADJUSTMENT("Inflation Adjustment", "InflationsAdjustment");
        private String constant;
        private String column;

        private Trx6_Variables(String constant, String column) {
            this.constant = constant;
            this.column = column;

        }

        @Override
        public String toString() {
            return constant;
        }

        public String getColumn() {
            return column;
        }

        public static String[] names() {
            return Arrays.toString(Trx6_Variables.values()).replaceAll(CommonConstant.DOLLAR, StringUtils.EMPTY).split(",");
        }

    }

    private static final String[] VARIABLE_VISIBLE_COLUMN_TRX6 = new String[]{CommonConstant.CURRENT_BALANCE, CommonConstant.CALCULATED_ADJUSTMENT, CommonConstant.ADJUSTMENT_RATIO, CommonConstant.VARIANCE};

    public static enum Trx6_Inventory_Variables {

        CURRENT_BALANCE(CommonConstant.CURRENT_BALANCE, "Current Balance "),
        CALCULATED_ADJUSTMENT(CommonConstant.CALCULATED_ADJUSTMENT, "Calculated Adjustment"),
        VARIANCE(CommonConstant.VARIANCE, "Variance"),
        OVERRIDE("override", "Override"),
        ADJUSTMENT("adjustment", "Adjustment"),
        ADJUSTMENT_RATIO(CommonConstant.ADJUSTMENT_RATIO, "Adjustment Ratio");
        private String constant;
        private String header;

        private Trx6_Inventory_Variables(String constant, String header) {
            this.constant = constant;
            this.header = header;
        }

        @Override
        public String toString() {
            return constant;
        }

        public String getHeader() {
            return header;
        }

        public static String[] names() {
            return Arrays.toString(Trx6_Variables.values()).replaceAll(CommonConstant.DOLLAR, StringUtils.EMPTY).split(",");
        }

    }

    public static Map<String, String> getDBColumnMapForInventoyTrx6() {
        DBColumnMapInventoryTrx6.put(Trx6_Variables.BASELINE_PRICE_OVERRIDE.getColumn(), "BASELINE_PRICE_OVERRIDE");
        DBColumnMapInventoryTrx6.put(Trx6_Variables.ADJUSTED_PRICE_OVERRIDE.getColumn(), "ADJUSTED_PRICE_OVERRIDE");
        DBColumnMapInventoryTrx6.put(Trx6_Variables.INFLATION_FACTOR.getColumn(), "INFLATION_FACTOR");
        return DBColumnMapInventoryTrx6;
    }

    public static String getFormattedValue(Object value, DecimalFormat format) {
        return format.format(Double.valueOf(value.toString()));
    }

    private static final String[] VARIABLE_SUMMARY_HEADER = {ARMUtils.Trx6_Inventory_Variables.CURRENT_BALANCE.getHeader(), ARMUtils.Trx6_Inventory_Variables.CALCULATED_ADJUSTMENT.getHeader(), ARMUtils.Trx6_Inventory_Variables.ADJUSTMENT_RATIO.getHeader(), ARMUtils.Trx6_Inventory_Variables.VARIANCE.getHeader(),
        ARMUtils.Trx6_Inventory_Variables.OVERRIDE.getHeader(), ARMUtils.Trx6_Inventory_Variables.ADJUSTMENT.getHeader()};
    private static final String[] VARIABLE_INVENTORY_VISIBLE_COLUMN = {"TotalInventory", "BaselinePrice", "BaselinePriceOverride", "BaselineCalculatedAmount", "AdjustedPrice", "AdjustedPriceOverride", "AdjustedCalculatedAmount", "PriceChange", "PriceChangePercent", "NetCalculatedAmount", "InflationFactor", "InflationsAdjustment"};
    private static final String[] VARIABLE_VISIBLE_COLUMN_TRX6_DECUTION = new String[]{CommonConstant.CURRENT_BALANCE, CommonConstant.CALCULATED_ADJUSTMENT, CommonConstant.ADJUSTMENT_RATIO, CommonConstant.VARIANCE, "override", "adjustment"};

    private static final String[] FIRST_ROW_INVENTORY_RATE_RIGHT_HEADERS_FOR_TRX6 = {CommonConstant.INVENTORY_HEADER};
    private static final Object[] FIRST_ROW_INVENTORY_RATE_RIGHT_COLUMNS_FOR_TRX6 = {CommonConstant.INVENTORY_VISIBLE_COLUMN};
    private static final String[] SECOND_ROW_INVENTORY_RATE_RIGHT_HEADERS_FOR_TRX6 = {CommonConstant.INVENTORY_DETAILS_HEADER, CommonConstant.BASELINE_PRICE_HEADER, CommonConstant.ADJUSTED_PRICE_HEADER};
    private static final Object[] SECOND_ROW_INVENTORY_RATE_RIGHT_COLUMNS_FOR_TRX6 = {CommonConstant.INVENTORY_DETAILS_VISIBLE_COLUMN, "baselinePrice", "adjustedPrice"};

    private static final String[] FIRST_ROW_INVENTORY_RATE_RIGHT_HEADERS_FOR_TRX7 = {CommonConstant.SALES_HEADER};
    private static final Object[] FIRST_ROW_INVENTORY_RATE_RIGHT_COLUMNS_FOR_TRX7 = {CommonConstant.SALES_VISIBLE_COLUMN};
    private static final String[] SECOND_ROW_INVENTORY_RATE_RIGHT_HEADERS_FOR_TRX7 = {DATE_TYPE, CommonConstant.PRICE_HEADER, CommonConstant.EXCLUSION_DETAILS_HEADER};
    private static final Object[] SECOND_ROW_INVENTORY_RATE_RIGHT_COLUMNS_FOR_TRX7 = {CommonConstant.DATE_TYPE_VISIBLE_COLUMN, CommonConstant.PRICE_VISIBLE_COLUMN, CommonConstant.EXCLUSION_DETAILS_VISIBLE_COLUMN};

    private static final String[] FIRST_ROW_RATE_RIGHT_HEADERS_FOR_TRX8 = {CommonConstant.RATES_HEADER};
    private static final Object[] FIRST_ROW_RATE_RIGHT_COLUMNS_FOR_TRX8 = {CommonConstant.RATES_VISIBLE_COLUMN};
    private static final String[] SECOND_ROW_RATE_RIGHT_HEADERS_FOR_TRX8 = {CommonConstant.RATE_BASIS_HEADER};
    private static final Object[] SECOND_ROW_RATE_RIGHT_COLUMNS_FOR_TRX8 = {CommonConstant.RATE_BASIS_VISIBLE_COLUMN};

    public static String[] getVariableSummaryHeader() {
        return VARIABLE_SUMMARY_HEADER.clone();
    }

    public static String[] getVariableInventoryVisibleColumn() {
        return VARIABLE_INVENTORY_VISIBLE_COLUMN.clone();
    }

    public static String[] getVariableVisibleColumnTrx6Decution() {
        return VARIABLE_VISIBLE_COLUMN_TRX6_DECUTION.clone();
    }

    public static String[] getFirstRowInventoryRateRightHeadersForTrx6() {
        return FIRST_ROW_INVENTORY_RATE_RIGHT_HEADERS_FOR_TRX6.clone();
    }

    public static Object[] getFirstRowInventoryRateRightColumnsForTrx6() {
        return FIRST_ROW_INVENTORY_RATE_RIGHT_COLUMNS_FOR_TRX6.clone();
    }

    public static String[] getSecondRowInventoryRateRightHeadersForTrx6() {
        return SECOND_ROW_INVENTORY_RATE_RIGHT_HEADERS_FOR_TRX6.clone();
    }

    public static Object[] getSecondRowInventoryRateRightColumnsForTrx6() {
        return SECOND_ROW_INVENTORY_RATE_RIGHT_COLUMNS_FOR_TRX6.clone();
    }

    public static String[] getFirstRowInventoryRateRightHeadersForTrx7() {
        return FIRST_ROW_INVENTORY_RATE_RIGHT_HEADERS_FOR_TRX7.clone();
    }

    public static Object[] getFirstRowInventoryRateRightColumnsForTrx7() {
        return FIRST_ROW_INVENTORY_RATE_RIGHT_COLUMNS_FOR_TRX7.clone();
    }

    public static String[] getSecondRowInventoryRateRightHeadersForTrx7() {
        return SECOND_ROW_INVENTORY_RATE_RIGHT_HEADERS_FOR_TRX7.clone();
    }

    public static Object[] getSecondRowInventoryRateRightColumnsForTrx7() {
        return SECOND_ROW_INVENTORY_RATE_RIGHT_COLUMNS_FOR_TRX7.clone();
    }

    public static String[] getFirstRowRateRightHeadersForTrx8() {
        return FIRST_ROW_RATE_RIGHT_HEADERS_FOR_TRX8.clone();
    }

    public static Object[] getFirstRowRateRightColumnsForTrx8() {
        return FIRST_ROW_RATE_RIGHT_COLUMNS_FOR_TRX8.clone();
    }

    public static String[] getSecondRowRateRightHeadersForTrx8() {
        return SECOND_ROW_RATE_RIGHT_HEADERS_FOR_TRX8.clone();
    }

    public static Object[] getSecondRowRateRightColumnsForTrx8() {
        return SECOND_ROW_RATE_RIGHT_COLUMNS_FOR_TRX8.clone();
    }

    public static Map<Integer, String> getTYrx7LevelAndLevelFilter(String value) {

        if (TRX7_LEVEL_FILTER_NAME.isEmpty()) {
            Map<Integer, String> summaryLevelBrand = new HashMap();
            Map<Integer, String> summaryLevelCustomerded = new HashMap();
            Map<Integer, String> summaryLevelDedutionCustomer = new HashMap();
            Map<Integer, String> summaryLevelDedutionContract = new HashMap();
            Map<Integer, String> summaryleveldedutionContract = new HashMap();
            Map<Integer, String> summarylevelnondedutionContract = new HashMap();
            Map<Integer, String> summaryLevelDedutionSales = new HashMap();
            Map<Integer, String> summaryLevelSalesDedutionCustomer = new HashMap();
            Map<Integer, String> summaryLevelSalesDedutionContractCustomer = new HashMap();

            summaryLevelBrand.put(1, levelVariablesVarables.BRAND.toString());
            summaryLevelBrand.put(NumericConstants.TWO, levelVariablesVarables.ITEM.toString());

            summaryLevelCustomerded.put(1, levelVariablesVarables.CUSTOMER.toString());
            summaryLevelCustomerded.put(NumericConstants.TWO, levelVariablesVarables.DEDUCTION.toString());
            summaryLevelCustomerded.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            summaryLevelCustomerded.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            summaryLevelDedutionCustomer.put(1, levelVariablesVarables.CUSTOMER.toString());
            summaryLevelDedutionCustomer.put(NumericConstants.TWO, levelVariablesVarables.BRAND.toString());
            summaryLevelDedutionCustomer.put(NumericConstants.THREE, levelVariablesVarables.ITEM.toString());

            summaryleveldedutionContract.put(1, levelVariablesVarables.CONTRACT.toString());
            summaryleveldedutionContract.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            summaryleveldedutionContract.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            summaryleveldedutionContract.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            summaryLevelDedutionContract.put(1, levelVariablesVarables.DEDUCTION.toString());
            summaryLevelDedutionContract.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            summaryLevelDedutionContract.put(NumericConstants.THREE, levelVariablesVarables.CONTRACT.toString());
            summaryLevelDedutionContract.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            summaryLevelDedutionContract.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());

            summarylevelnondedutionContract.put(1, levelVariablesVarables.CUSTOMER.toString());
            summarylevelnondedutionContract.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            summarylevelnondedutionContract.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            summarylevelnondedutionContract.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            summaryLevelDedutionSales.put(1, levelVariablesVarables.CUSTOMER.toString());
            summaryLevelDedutionSales.put(NumericConstants.TWO, levelVariablesVarables.BRAND.toString());
            summaryLevelDedutionSales.put(NumericConstants.THREE, levelVariablesVarables.ITEM.toString());

            summaryLevelSalesDedutionCustomer.put(NumericConstants.ONE, levelVariablesVarables.CUSTOMER.toString());
            summaryLevelSalesDedutionCustomer.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            summaryLevelSalesDedutionCustomer.put(NumericConstants.THREE, levelVariablesVarables.BRAND.toString());
            summaryLevelSalesDedutionCustomer.put(NumericConstants.FOUR, levelVariablesVarables.ITEM.toString());

            summaryLevelSalesDedutionContractCustomer.put(1, levelVariablesVarables.DEDUCTION.toString());
            summaryLevelSalesDedutionContractCustomer.put(NumericConstants.THREE, levelVariablesVarables.CUSTOMER.toString());
            summaryLevelSalesDedutionContractCustomer.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            summaryLevelSalesDedutionContractCustomer.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            summaryLevelSalesDedutionContractCustomer.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());

            TRX7_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionProduct(), summaryLevelBrand);
            TRX7_LEVEL_FILTER_NAME.put(ARMConstants.getCustomerDedection(), summaryLevelCustomerded);
            TRX7_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionCustomer(), summaryLevelDedutionCustomer);
            TRX7_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionCustomerContract(), summaryLevelDedutionContract);
            TRX7_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionContractCustomer(), summaryLevelSalesDedutionContractCustomer);
            TRX7_LEVEL_FILTER_NAME.put(CommonConstant.DEDUCTION_CONTRACT, summaryleveldedutionContract);
            TRX7_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionProduct() + CommonConstant.SALES_HEADER, summaryLevelDedutionSales);//Added for GAL-1127
            TRX7_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionCustomer() + "Sales", summaryLevelSalesDedutionCustomer); // Added for GAL-12573
            TRX7_LEVEL_FILTER_NAME.put("non" + ARMConstants.getDeductionCustomerContract(), summarylevelnondedutionContract);

        }
        return TRX7_LEVEL_FILTER_NAME.get(value);
    }

    public static Map<Integer, String> getTYrx8LevelAndLevelFilter(String value) {

        if (TRX8_LEVEL_FILTER_NAME.isEmpty()) {
            Map<Integer, String> summaryLevelDeductionProduct = new HashMap();
            Map<Integer, String> summaryLevelDedutionCustomer = new HashMap();
            Map<Integer, String> summaryLevelDedutionContract = new HashMap();

            summaryLevelDeductionProduct.put(NumericConstants.ONE, levelVariablesVarables.DEDUCTION.toString());
            summaryLevelDeductionProduct.put(NumericConstants.TWO, levelVariablesVarables.BRAND.toString());
            summaryLevelDeductionProduct.put(NumericConstants.THREE, levelVariablesVarables.ITEM.toString());

            summaryLevelDedutionCustomer.put(NumericConstants.ONE, levelVariablesVarables.DEDUCTION.toString());
            summaryLevelDedutionCustomer.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            summaryLevelDedutionCustomer.put(NumericConstants.THREE, levelVariablesVarables.CONTRACT.toString());
            summaryLevelDedutionCustomer.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            summaryLevelDedutionCustomer.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());

            summaryLevelDedutionContract.put(NumericConstants.ONE, levelVariablesVarables.DEDUCTION.toString());
            summaryLevelDedutionContract.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            summaryLevelDedutionContract.put(NumericConstants.THREE, levelVariablesVarables.CUSTOMER.toString());
            summaryLevelDedutionContract.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            summaryLevelDedutionContract.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());

            TRX8_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionProduct(), summaryLevelDeductionProduct);
            TRX8_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionCustomer(), summaryLevelDedutionCustomer);
            TRX8_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionContract(), summaryLevelDedutionContract);
        }
        return TRX8_LEVEL_FILTER_NAME.get(value);
    }

    public static List<String> getTrx7SalesVariables() {
        if (trx7salesVariablesList.isEmpty()) {
            trx7salesVariablesList.addAll(Arrays.asList(VariableConstants.getVariableSalesVisibleColumn()));
            trx7salesVariablesList.add(VariableConstants.GROUP);
            trx7salesVariablesList.add(VariableConstants.PRODUCT_NAME);
            trx7salesVariablesList.add(VariableConstants.PRODUCT_MASTER_SID);
            trx7salesVariablesList.add(VariableConstants.CHILDREN_ALLOWED);
            trx7salesVariablesList.add(VariableConstants.LEVEL_NAME);
            trx7salesVariablesList.add(VariableConstants.COMPANY_SID);
            trx7salesVariablesList.add(VariableConstants.BRNAD_ID);
        }
        return new ArrayList<>(trx7salesVariablesList);
    }

    private static final String[] RETURNS_DATA_HEADERS = {Trx8Constants.getSku(),
        Trx8Constants.getBrand(), Trx8Constants.getExpandedBrand(),
        Trx8Constants.getDescription(), Trx8Constants.getMaximum(),
        Trx8Constants.get75thPercentile(), Trx8Constants.get50thPercentile(),
        Trx8Constants.get25thPercentile(), Trx8Constants.getUpperOb(),
        Trx8Constants.getLowerOb(), Trx8Constants.getIs_Outliner(),
        Trx8Constants.getOriginalSaleMonth(), Trx8Constants.getOriginalSaleUnits(),
        Trx8Constants.getOriginalSaleDollars(), Trx8Constants.getASP(),
        Trx8Constants.getCumReturnUnits(), Trx8Constants.getActualReturnRate(),
        Trx8Constants.getWeightedAvgMonths(), Trx8Constants.getFirstReturnDate(),
        Trx8Constants.getLastReturnDate(), Trx8Constants.getMaxExpiredMonth(),
        Trx8Constants.getMaxExpiredMonthsPlusCutOff(), Trx8Constants.getCutOffDate(),
        Trx8Constants.getPastExpiration(), Trx8Constants.getReturnComplete(),
        Trx8Constants.getExpectedReturnRate(), Trx8Constants.getEstimatedReturnUnits(),
        Trx8Constants.getActualEstimatedReturnUnits(), Trx8Constants.getAdjEstimatedReturnUnits(),
        Trx8Constants.getValueatOriginalASP(), Trx8Constants.getAdjValueatOriginalASP(), Trx8Constants.getVersion()};

    public static String[] getReturnsDataHeaders() {
        return RETURNS_DATA_HEADERS.clone();
    }

    public static String[] getRetrunsDataColumns() {
        return RETRUNS_DATA_COLUMNS.clone();
    }
    public static final String VERSION = "version.31";
    public static final String ORIG_SALE_UNITS = "orig_sale_units.12";
    public static final String ORIG_SALE_DOLLARS = "orig_sale_dollars.13";
    public static final String ASP = "asp.14";
    public static final String CUM_RETURN_UNITS = "cum_return_units.15";
    public static final String VALUE_AT_ORIG_ASP = "value_at_orig_asp.29";
    public static final String ADJ_VALUE_AT_ORIG_ASP = "adj_value_at_orig_asp.30";
    public static final String EXPECTED_RETURN_RATE = "expected_return_rate.25";
    public static final String ACTUAL_RETURN_RATE16 = "actual_return_rate.16";
    private static final String MAXIMUM4 = "maximum.4";
    private static final String PCT_75TH5 = "pct_75th.5";
    private static final String PCT_25TH7 = "pct_25th.7";
    private static final String PCT_50TH6 = "pct_50th.6";
    private static final String UPPER_LIMIT8 = "upper_limit.8";
    private static final String LOWER_LIMIT9 = "lower_limit.9";
    private static final String ORIG_SALE_MONTH11 = "orig_sale_month.11";
    private static final String WITHIN_50QRTILE10 = "within_50qrtile.10";

    private static final String[] RETRUNS_DATA_COLUMNS = {"sku.0",
        "brand.1",
        "brand.2",
        "description.3", MAXIMUM4, PCT_75TH5, PCT_50TH6, PCT_25TH7, UPPER_LIMIT8, LOWER_LIMIT9, WITHIN_50QRTILE10, ORIG_SALE_MONTH11, ORIG_SALE_UNITS, ORIG_SALE_DOLLARS, ASP, CUM_RETURN_UNITS, ACTUAL_RETURN_RATE16,
        "weighted_avg_months.17",
        "first_return.18",
        "last_return.19",
        "max_expired_month.20",
        "max_expired_mons_pluscutoff.21",
        "orig_sale_month_cut_off.22",
        "past_expiration.23",
        "return_complete.24", EXPECTED_RETURN_RATE,
        "estimated_return_units.26",
        "pos_estimated_return_units.27",
        "adj_estimated_return_units.28", VALUE_AT_ORIG_ASP, ADJ_VALUE_AT_ORIG_ASP, VERSION};
    private static final String[] DEFAULT_CHECKED_COLS = {"sku.0", "brand.1",
        "value.1", UPPER_LIMIT8, WITHIN_50QRTILE10, ORIG_SALE_MONTH11, ORIG_SALE_UNITS, ASP, CUM_RETURN_UNITS, "past_expiration.23", "return_complete.24", EXPECTED_RETURN_RATE, VERSION};

    private static final String[] MM_DD_YYYY_COLUMNS = {ORIG_SALE_MONTH11,
        "first_return.18", "last_return.19",
        "max_expired_month.20",
        "max_expired_mons_pluscutoff.21",
        "orig_sale_month_cut_off.22", VERSION};
    private static final String[] RIGHT_ALIGNED_COLUMNS = {MAXIMUM4, PCT_75TH5, PCT_50TH6, PCT_25TH7, UPPER_LIMIT8, LOWER_LIMIT9, ORIG_SALE_UNITS, ORIG_SALE_DOLLARS, ASP, CUM_RETURN_UNITS, ACTUAL_RETURN_RATE16, EXPECTED_RETURN_RATE, VALUE_AT_ORIG_ASP, ADJ_VALUE_AT_ORIG_ASP};
    private static final String[] CURRENCY_TWO_DEC_COLUMNS = {ORIG_SALE_DOLLARS, ASP, VALUE_AT_ORIG_ASP, ADJ_VALUE_AT_ORIG_ASP};
    private static final String[] PERCENT_TWO_DEC_COLUMNS = {ACTUAL_RETURN_RATE16, EXPECTED_RETURN_RATE};

    private static final String[] DECIMAL_SIX = {MAXIMUM4, PCT_75TH5, PCT_50TH6, PCT_25TH7, UPPER_LIMIT8, LOWER_LIMIT9,
        ORIG_SALE_UNITS,
        CUM_RETURN_UNITS,
        "weighted_avg_months.17",
        "estimated_return_units.26",
        "pos_estimated_return_units.27",
        "adj_estimated_return_units.28",};

    public static String[] getDecimalSix() {
        return DECIMAL_SIX.clone();
    }

    public static String[] getDefaultCheckedCols() {
        return DEFAULT_CHECKED_COLS.clone();
    }

    public static String[] getReturnReserveDataHeaders() {
        return RETURN_RESERVE_DATA_HEADERS.clone();
    }

    public static String[] getReturnReserveDataColumns() {
        return RETURN_RESERVE_DATA_COLUMNS.clone();
    }

    public static String[] getReturnReserveSummaryDeductionHeaders() {
        return RETURN_RESERVE_SUMMARY_DEDUCTION_HEADERS.clone();
    }

    public static String[] getReturnReserveSummaryDeductionColumns() {
        return RETURN_RESERVE_SUMMARY_DEDUCTION_COLUMNS.clone();
    }

    public static String[] getReturnReserveSummaryHeaders() {
        return RETURN_RESERVE_SUMMARY_HEADERS.clone();
    }

    public static String[] getReturnReserveSummaryColumns() {
        return RETURN_RESERVE_SUMMARY_COLUMNS.clone();
    }

    public static String[] getReturnReserveRatesColumns() {
        return RETURN_RESERVE_RATES_COLUMNS.clone();
    }

    public static String[] getReturnReserveRatesHeaders() {
        return RETURN_RESERVE_RATES_HEADERS.clone();
    }

    private static final String[] RETURN_RESERVE_DATA_HEADERS = {Trx8Constants.getBrand(), Trx8Constants.getEstimatedReturnUnits(), Trx8Constants.getActualEstimatedReturnUnits(),
        Trx8Constants.getAdjEstimatedReturnUnits(), Trx8Constants.getValueatOriginalASP(), Trx8Constants.getAdjValueatOriginalASP()};

    private static final String[] RETURN_RESERVE_DATA_COLUMNS = {"brand.0", "estimatedReturnUnits.1", "actualEstimatedReturnUnits.2",
        "adjEstimatedReturnUnits.3", "valueatOriginalASP.4", "adjValueatOriginalASP.5"};

    private static final String[] RETURN_RESERVE_SUMMARY_DEDUCTION_HEADERS = {
        Trx8Constants.getCurrentBalance(),
        Trx8Constants.getProjectedBalance(),
        Trx8Constants.getRatio(),
        Trx8Constants.getVariance(),
        Trx8Constants.getOverride(),
        Trx8Constants.getAdjustment()};

    private static final String[] RETURN_RESERVE_SUMMARY_DEDUCTION_COLUMNS = {
        Trx8Constants.getCurrentBalanceColumn(),
        Trx8Constants.getProjectedBalanceColumn(),
        Trx8Constants.getRatioColumn(),
        Trx8Constants.getVarianceColumn(),
        Trx8Constants.getOverrideColumn(),
        Trx8Constants.getAdjustmentColumn()};
    private static final String[] RETURN_RESERVE_SUMMARY_HEADERS = {
        Trx8Constants.getCurrentBalance(),
        Trx8Constants.getProjectedBalance(),
        Trx8Constants.getRatio(),
        Trx8Constants.getVariance()};

    private static final String[] RETURN_RESERVE_SUMMARY_COLUMNS = {
        Trx8Constants.getCurrentBalanceColumn(),
        Trx8Constants.getProjectedBalanceColumn(),
        Trx8Constants.getRatioColumn(),
        Trx8Constants.getVarianceColumn()};

    private static final String[] RETURN_RESERVE_RATES_COLUMNS = {Trx8Constants.getMethodologyColumn() + ".0",
        Trx8Constants.getRateColumn() + ".1",
        Trx8Constants.getOverrideColumn() + ".2"};

    private static final String[] RETURN_RESERVE_RATES_HEADERS = {Trx8Constants.getMethodology(),
        Trx8Constants.getRate(),
        Trx8Constants.getOverride()};

    public static Map<Integer, String> getTrx8LevelAndLevelFilter(String value) {

        if (TRX8_RATES_LEVEL_FILTER_NAME.isEmpty()) {
            Map<Integer, String> rateDeductionProduct = new HashMap();
            Map<Integer, String> rateDeductionCustomer = new HashMap();
            Map<Integer, String> rateDeductionContract = new HashMap();

            rateDeductionProduct.put(NumericConstants.ONE, levelVariablesVarables.DEDUCTION.toString());
            rateDeductionProduct.put(NumericConstants.TWO, levelVariablesVarables.BRAND.toString());
            rateDeductionProduct.put(NumericConstants.THREE, levelVariablesVarables.ITEM.toString());

            rateDeductionCustomer.put(NumericConstants.ONE, levelVariablesVarables.DEDUCTION.toString());
            rateDeductionCustomer.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            rateDeductionCustomer.put(NumericConstants.THREE, levelVariablesVarables.CONTRACT.toString());
            rateDeductionCustomer.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            rateDeductionCustomer.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());

            rateDeductionContract.put(NumericConstants.ONE, levelVariablesVarables.DEDUCTION.toString());
            rateDeductionContract.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            rateDeductionContract.put(NumericConstants.THREE, levelVariablesVarables.CUSTOMER.toString());
            rateDeductionContract.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            rateDeductionContract.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());

            TRX8_RATES_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionProduct(), rateDeductionProduct);
            TRX8_RATES_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionContract(), rateDeductionContract);
            TRX8_RATES_LEVEL_FILTER_NAME.put(ARMConstants.getDeductionCustomer(), rateDeductionCustomer);
        }
        return TRX8_RATES_LEVEL_FILTER_NAME.get(value);
    }

    public static Map<Integer, String> getReserveDataLevelAndLevelFilter(String value) {

        if (TRX8_RESERVEDATA_LEVEL_FILTER_NAME.isEmpty()) {
            Map<Integer, String> reserveDataCustomerContract = new HashMap();
            Map<Integer, String> reserveDataContractCustomer = new HashMap();

            reserveDataCustomerContract.put(NumericConstants.ONE, levelVariablesVarables.DEDUCTION.toString());
            reserveDataCustomerContract.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            reserveDataCustomerContract.put(NumericConstants.THREE, levelVariablesVarables.CONTRACT.toString());
            reserveDataCustomerContract.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            reserveDataCustomerContract.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());

            reserveDataContractCustomer.put(NumericConstants.ONE, levelVariablesVarables.DEDUCTION.toString());
            reserveDataContractCustomer.put(NumericConstants.TWO, levelVariablesVarables.CONTRACT.toString());
            reserveDataContractCustomer.put(NumericConstants.THREE, levelVariablesVarables.CUSTOMER.toString());
            reserveDataContractCustomer.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            reserveDataContractCustomer.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());

            TRX8_RESERVEDATA_LEVEL_FILTER_NAME.put("Contract Customer", reserveDataContractCustomer);
            TRX8_RESERVEDATA_LEVEL_FILTER_NAME.put("Customer Contract", reserveDataCustomerContract);
        }
        return TRX8_RESERVEDATA_LEVEL_FILTER_NAME.get(value);
    }

    public static final String DATA_SELECTION_MESSAGE = "The month/year combination you selected in the ‘From’ drop down list box does not have interfaced Returns data.  Please select another month/year combination.";
    public static final String SELECTION_CRITERIA = "Selection criteria";
    public static final String CONTRACT_CUSTOMER = "Contract Customer";
    public static final String CUSTOMER_CONTRACT = "Customer Contract";
    public static final String FROM_AND_TO_PERIOD = "The ‘To Period’ date cannot be before the ‘From Period’ date.";

    public static String[] getAdjustmentReserveSearchHeaders() {
        return ADJUSTMENT_RESERVE_SEARCH_HEADERS.clone();
    }

    public static Object[] getAdjustmentReserveSearchColumns() {
        return ADJUSTMENT_RESERVE_SEARCH_COLUMNS.clone();
    }

    public static String[] getAdjustmentReserveAddHeadersReserveDetails() {
        return ADJUSTMENT_RESERVE_ADD_HEADERS_RESERVE_DETAILS.clone();
    }

    public static Object[] getAdjustmentReserveAddColumnsReserveDetails() {
        return ADJUSTMENT_RESERVE_ADD_COLUMNS_RESERVE_DETAILS.clone();
    }

    public static Object[] getAdjustmentReserveForExcelColumnsReserveDetails() {
        return ADJUSTMENT_RESERVE_FOR_EXCEL_COLUMNS_RESERVE_DETAILS.clone();
    }

    public static Object[] getReportTypeSingleVisibleColumn() {
        return REPORT_TYPE_SINGLE_VISIBLE_COLUMN.clone();
    }

    public static String[] getReportTypeSingleHeaderColumn() {
        return REPORT_TYPE_SINGLE_HEADER_COLUMN.clone();
    }

    public static Object[] getReportTypeDoubleVisibleColumn() {
        return REPORT_TYPE_DOUBLE_VISIBLE_COLUMN.clone();
    }

    public static String[] getReportTypeDoubleHeaderColumn() {
        return REPORT_TYPE_DOUBLE_HEADER_COLUMN.clone();
    }

    public static Object[] getReportTypePipelineSingleVisibleColumn() {
        return REPORT_TYPE_PIPELINE_SINGLE_VISIBLE_COLUMN.clone();
    }

    public static String[] getReportTypePipelineSingleHeaderColumn() {
        return REPORT_TYPE_PIPELINE_SINGLE_HEADER_COLUMN.clone();
    }

    public static Object[] getReportTypePipelineDoubleVisibleColumn() {
        return REPORT_TYPE_PIPELINE_DOUBLE_VISIBLE_COLUMN.clone();
    }

    public static String[] getReportTypePipelineDoubleHeaderColumn() {
        return REPORT_TYPE_PIPELINE_DOUBLE_HEADER_COLUMN.clone();
    }

    public static Object[] getReportTypeDemandSingleVisibleColumn() {
        return REPORT_TYPE_DEMAND_SINGLE_VISIBLE_COLUMN.clone();
    }

    public static String[] getReportTypeDemandSingleHeaderColumn() {
        return REPORT_TYPE_DEMAND_SINGLE_HEADER_COLUMN.clone();
    }

    public static Object[] getReportTypeDemandDoubleVisibleColumn() {
        return REPORT_TYPE_DEMAND_DOUBLE_VISIBLE_COLUMN.clone();
    }

    public static String[] getReportTypeDemandDoubleHeaderColumn() {
        return REPORT_TYPE_DEMAND_DOUBLE_HEADER_COLUMN.clone();
    }

    public static Object[] getReportTypeLiabilitySingleVisibleColumn() {
        return REPORT_TYPE_LIABILITY_SINGLE_VISIBLE_COLUMN.clone();
    }

    public static String[] getReportTypeLiabilitySingleHeaderColumn() {
        return REPORT_TYPE_LIABILITY_SINGLE_HEADER_COLUMN.clone();
    }

    public static Object[] getReportTypeLiabilityDoubleVisibleColumn() {
        return REPORT_TYPE_LIABILITY_DOUBLE_VISIBLE_COLUMN.clone();
    }

    public static String[] getReportTypeLiabilityDoubleHeaderColumn() {
        return REPORT_TYPE_LIABILITY_DOUBLE_HEADER_COLUMN.clone();
    }

    public static Object[] getReportTypeReturnSingleVisibleColumn() {
        return REPORT_TYPE_RETURN_SINGLE_VISIBLE_COLUMN.clone();
    }

    public static String[] getReportTypeReturnSingleHeaderColumn() {
        return REPORT_TYPE_RETURN_SINGLE_HEADER_COLUMN.clone();
    }

    public static Object[] getReportTypeReturnDoubleVisibleColumn() {
        return REPORT_TYPE_RETURN_DOUBLE_VISIBLE_COLUMN.clone();
    }

    public static String[] getReportTypeReturnDoubleHeaderColumn() {
        return REPORT_TYPE_RETURN_DOUBLE_HEADER_COLUMN.clone();
    }

    public static Object[] getReportTypeSinglevisibleColumnInReserve() {
        return REPORT_TYPE_SINGLEVISIBLE_COLUMN.clone();
    }

    public static Object[] getBalSummaryConfComboHeader() {
        return BAL_SUMMARY_CONF_COMBO_HEADER.clone();
    }

    public static Object[] getAdjustmentReserveColumn() {
        return ADJUSTMENT_RESERVE_COLUMN.clone();
    }

    public static String[] getAdjustmentReserveHeader() {
        return ADJUSTMENT_RESERVE_HEADER.clone();
    }

    public static Object[] getAdjustmentReserveTx1Column() {
        return ADJUSTMENT_RESERVE_TX1_COLUMN.clone();
    }

    public static String[] getAdjustmentReserveTx1Header() {
        return ADJUSTMENT_RESERVE_TX1_HEADER.clone();
    }

    public static Object[] getAdjustmentReserveTx2Column() {
        return ADJUSTMENT_RESERVE_TX2_COLUMN.clone();
    }

    public static Object[] getAdjustmentReserveTx3Column() {
        return ADJUSTMENT_RESERVE_TX3_COLUMN.clone();
    }

    public static String[] getAdjustmentReserveTx3Header() {
        return ADJUSTMENT_RESERVE_TX3_HEADER.clone();
    }

    public static Object[] getAdjustmentReserveTx4Column() {
        return ADJUSTMENT_RESERVE_TX4_COLUMN.clone();
    }

    public static String[] getAdjustmentReserveTx4Header() {
        return ADJUSTMENT_RESERVE_TX4_HEADER.clone();
    }

    public static Object[] getAdjustmentReserveTx5Column() {
        return ADJUSTMENT_RESERVE_TX5_COLUMN.clone();
    }

    public static String[] getAdjustmentReserveTx5Header() {
        return ADJUSTMENT_RESERVE_TX5_HEADER.clone();
    }

    public static Object[] getAdjustmentReserveTxColumn() {
        return ADJUSTMENT_RESERVE_TX_COLUMN.clone();
    }

    public static String[] getAdjustmentReserveTxHeader() {
        return ADJUSTMENT_RESERVE_TX_HEADER.clone();
    }

    public static Object[] getAdjustmentReserveColumnVar() {
        return ADJUSTMENT_RESERVECOLUMN.clone();
    }

    public static String[] getAdjustmentReserveTx2Header() {
        return ADJUSTMENT_RESERVE_TX2_HEADER.clone();
    }

    public static String[] getArmAdjSummaryConfComboHeaders() {
        return ARM_ADJ_SUMMARY_CONF_COMBO_HEADERS.clone();
    }

    public static String[] getArmAdjSummaryConfCustomMenubarHeaders() {
        return ARM_ADJ_SUMMARY_CONF_CUSTOM_MENUBAR_HEADERS.clone();
    }

    public static String[] getArmConfigDetailTextfieldGenerator() {
        return ARM_CONFIG_DETAIL_TEXTFIELD_GENERATOR.clone();
    }

    public static String[] getArmConfigDetailComboboxGenerator() {
        return ARM_CONFIG_DETAIL_COMBOBOX_GENERATOR.clone();
    }

    public static String[] getAdjustmentReserveMassupdateHeader() {
        return ADJUSTMENT_RESERVE_MASSUPDATE_HEADER.clone();
    }

    public static Object[] getAdjustmentConfigColumn() {
        return ADJUSTMENT_CONFIG_COLUMN.clone();
    }

    public static String[] getAdjustmentConfigHeader() {
        return ADJUSTMENT_CONFIG_HEADER.clone();
    }

    public static Object[] getAdjustmentReserveMassupdateColumn() {
        return ADJUSTMENT_RESERVE_MASSUPDATE_COLUMN.clone();
    }

    public static String[] getAdjustmentReserveAddHeadersGtnDetails() {
        return ADJUSTMENT_RESERVE_ADD_HEADERS_GTN_DETAILS.clone();
    }

    public static Object[] getAdjustmentReserveAddColumnsGtnDetails() {
        return ADJUSTMENT_RESERVE_ADD_COLUMNS_GTN_DETAILS.clone();
    }

    public static Object[] getAdjustmentReserveForExcelColumnsGtnDetails() {
        return ADJUSTMENT_RESERVE_FOR_EXCEL_COLUMNS_GTN_DETAILS.clone();
    }

    public static String[] getAdjustmentGtnDetailsHeader() {
        return ADJUSTMENT_GTN_DETAILS_Header.clone();
    }

    public static Object[] getAdjustmentGtnDetailsColumns() {
        return ADJUSTMENT_GTN_DETAILS_COLUMNS.clone();
    }

    public static Object[] getFirstRowLeftColumns() {
        return FIRST_ROW_LEFT_COLUMNS.clone();
    }

    public static String[] getFirstRowLeftHeaders() {
        return FIRST_ROW_LEFT_HEADERS.clone();
    }

    public static Object[] getSecondRowLeftColumns() {
        return SECOND_ROW_LEFT_COLUMNS.clone();
    }

    public static String[] getSecondRowLeftHeaders() {
        return SECOND_ROW_LEFT_HEADERS.clone();
    }

    public static String[] getFirstRowInventoryRateRightHeaders() {
        return FIRST_ROW_INVENTORY_RATE_RIGHT_HEADERS.clone();
    }

    public static Object[] getFirstRowInventoryRateRightColumns() {
        return FIRST_ROW_INVENTORY_RATE_RIGHT_COLUMNS.clone();
    }

    public static String[] getFirstRowTrx6RateRightHeaders() {
        return FIRST_ROW_Trx6_RATE_RIGHT_HEADERS.clone();
    }

    public static Object[] getFirstRowTrx6RateRightColumns() {
        return FIRST_ROW_Trx6_RATE_RIGHT_COLUMNS.clone();
    }

    public static String[] getFirstRowTrx7RateRightHeaders() {
        return FIRST_ROW_Trx7_RATE_RIGHT_HEADERS.clone();
    }

    public static Object[] getFirstRowTrx7RateRightColumns() {
        return FIRST_ROW_Trx7_RATE_RIGHT_COLUMNS.clone();
    }

    public static String[] getSecondRowInventoryRateRightHeaders() {
        return SECOND_ROW_INVENTORY_RATE_RIGHT_HEADERS.clone();
    }

    public static Object[] getSecondRowInventoryRateRightColumns() {
        return SECOND_ROW_INVENTORY_RATE_RIGHT_COLUMNS.clone();
    }

    public static String[] getSecondRowSalesRateRightHeaders() {
        return SECOND_ROW_SALES_RATE_RIGHT_HEADERS.clone();
    }

    public static Object[] getSecondRowSalesRateRightColumns() {
        return SECOND_ROW_SALES_RATE_RIGHT_COLUMNS.clone();
    }

    public static String[] getExcelRowSalesRateSingleHeaders() {
        return EXCEL_ROW_SALES_RATE_SINGLE_HEADERS.clone();
    }

    public static Object[] getExcelRowSalesRateSingleColumns() {
        return EXCEL_ROW_SALES_RATE_SINGLE_COLUMNS.clone();
    }

    public static String[] getExcelRowInventoryRateSingleHeaders() {
        return EXCEL_ROW_INVENTORY_RATE_SINGLE_HEADERS.clone();
    }

    public static Object[] getExcelRowInventoryRateSingleColumns() {
        return EXCEL_ROW_INVENTORY_RATE_SINGLE_COLUMNS.clone();
    }

    public static Object[] getExcelRowTrx6SingleColumns() {
        return EXCEL_ROW_Trx6_SINGLE_COLUMNS.clone();
    }

    public static String[] getExcelRowTrx6RateSingleHeaders() {
        return EXCEL_ROW_Trx6_RATE_SINGLE_HEADERS.clone();
    }

    public static Object[] getExcelRowTrx7SingleColumns() {
        return EXCEL_ROW_Trx7_SINGLE_COLUMNS.clone();
    }

    public static String[] getExcelRowTrx7RateSingleHeaders() {
        return EXCEL_ROW_Trx7_RATE_SINGLE_HEADERS.clone();
    }

    public static Object[] getExcelRowRateSingleColumnsTrx8() {
        return EXCEL_ROW_RATE_SINGLE_COLUMNS_TRX8.clone();
    }

    public static String[] getExcelRowRateSingleHeadersTrx8() {
        return EXCEL_ROW_RATE_SINGLE_HEADERS_TRX8.clone();
    }

    public static Object[] getExcelRowInventoryColumns() {
        return EXCEL_ROW_INVENTORY_COLUMNS.clone();
    }

    public static Object[] getExcelRowSalesColumns() {
        return EXCEL_ROW_SALES_COLUMNS.clone();
    }

    public static Object[] getExcelRowRateColumns() {
        return EXCEL_ROW_RATE_COLUMNS.clone();
    }

    public static String[] getVariableVisibleColumnTrx6() {
        return VARIABLE_VISIBLE_COLUMN_TRX6.clone();
    }

    public static String[] getFirstRowSalesRateRightHeaders() {
        return FIRST_ROW_SALES_RATE_RIGHT_HEADERS.clone();
    }

    public static Object[] getFirstRowSalesRateRightColumns() {
        return FIRST_ROW_SALES_RATE_RIGHT_COLUMNS.clone();
    }

    public static Object[] getSecondRowInventoryColumns() {
        return SECOND_ROW_INVENTORY_COLUMNS.clone();
    }

    public static Object[] getSecondRowSalesColumns() {
        return SECOND_ROW_SALES_COLUMNS.clone();
    }

    public static Object[] getSecondRowRateColumns() {
        return SECOND_ROW_RATE_COLUMNS.clone();
    }

    public static String[] getViewLookupHeaders() {
        return VIEW_LOOKUP_HEADERS.clone();
    }

    public static Object[] getViewLookupColumns() {
        return VIEW_LOOKUP_COLUMNS.clone();
    }

    public static String[] getInventoryViewLookupHeaders() {
        return INVENTORY_VIEW_LOOKUP_HEADERS.clone();
    }

    public static Object[] getInventoryViewLookupColumns() {
        return INVENTORY_VIEW_LOOKUP_COLUMNS.clone();
    }

    public static String[] getPrivateViewLookupHeaders() {
        return PRIVATE_VIEW_LOOKUP_HEADERS.clone();
    }

    public static Object[] getPrivateViewLookupColumns() {
        return PRIVATE_VIEW_LOOKUP_COLUMNS.clone();
    }

    public static String[] getPrivateViewLookupHeadersAdjSumm() {
        return PRIVATE_VIEW_LOOKUP_HEADERS_ADJ_SUMM.clone();
    }

    public static Object[] getPrivateViewLookupColumnsAdjSumm() {
        return PRIVATE_VIEW_LOOKUP_COLUMNS_ADJ_SUMM.clone();
    }

    public static Object[] getPipelineAccrualLeftColumn() {
        return PIPELINE_ACCRUAL_LEFT_COLUMN.clone();
    }

    public static String[] getExclusionLookupAvialableHeaders() {
        return EXCLUSION_LOOKUP_AVIALABLE_HEADERS.clone();
    }

    public static Object[] getExclusionLookupAvialableColumns() {
        return EXCLUSION_LOOKUP_AVIALABLE_COLUMNS.clone();
    }

    public static String[] getExclusionLookupSelectedHeaders() {
        return EXCLUSION_LOOKUP_SELECTED_HEADERS.clone();
    }

    public static Object[] getExclusionLookupSelectedColumns() {
        return EXCLUSION_LOOKUP_SELECTED_COLUMNS.clone();
    }

    public static Object[] getHierarchyLookupColumns() {
        return HIERARCHY_LOOKUP_COLUMNS.clone();
    }

    public static String[] getHierarchyLookupHeaders() {
        return HIERARCHY_LOOKUP_HEADERS.clone();
    }

    public static Object[] getCustomerGroupLookupColumns() {
        return CUSTOMER_GROUP_LOOKUP_COLUMNS.clone();
    }

    public static String[] getCustomerGroupLookupHeaders() {
        return CUSTOMER_GROUP_LOOKUP_HEADERS.clone();
    }

    public static Object[] getExclusionRateLookupHeaders() {
        return EXCLUSION_RATE_LOOKUP_HEADERS.clone();
    }

    public static String[] getExclusionRateLookupColumns() {
        return EXCLUSION_RATE_LOOKUP_COLUMNS.clone();
    }

    public static Object[] getCustomerGroupInventoryColumns() {
        return CUSTOMER_GROUP_INVENTORY_COLUMNS.clone();
    }

    public static String[] getCustomerGroupInventoryHeaders() {
        return CUSTOMER_GROUP_INVENTORY_HEADERS.clone();
    }

    public static Object[] getAccountConfigSearchColumns() {
        return ACCOUNT_CONFIG_SEARCH_COLUMNS.clone();
    }

    public static String[] getAccountConfigSearchHeaders() {
        return ACCOUNT_CONFIG_SEARCH_HEADERS.clone();
    }

    public static Object[] getAccountConfigAddmodeColumns() {
        return ACCOUNT_CONFIG_ADDMODE_COLUMNS.clone();
    }

    public static String[] getAccountConfigAddmodeHeaders() {
        return ACCOUNT_CONFIG_ADDMODE_HEADERS.clone();
    }

    public static Object[] getAccountConfigCopymodeColumns() {
        return ACCOUNT_CONFIG_ADDMODE_COLUMNS.clone();
    }

    public static String[] getAccountConfigCopymodeHeaders() {
        return ACCOUNT_CONFIG_ADDMODE_HEADERS.clone();
    }

    public static Object[] getAccountConfigEditmodeColumns() {
        return ACCOUNT_CONFIG_EDITMODE_COLUMNS.clone();
    }

    public static String[] getAccountConfigEditmodeHeaders() {
        return ACCOUNT_CONFIG_EDITMODE_HEADERS.clone();
    }

    public static Object[] getAccountConfigViewmodeColumns() {
        return ACCOUNT_CONFIG_VIEWMODE_COLUMNS.clone();
    }

    public static String[] getAccountConfigViewmodeHeaders() {
        return ACCOUNT_CONFIG_VIEWMODE_HEADERS.clone();
    }

    public static Object[] getAccountConfigComboboxProperties() {
        return ACCOUNT_CONFIG_COMBOBOX_PROPERTIES.clone();
    }

    public static Object[] getAccountConfigCopyModeComboboxProperties() {
        return ACCOUNT_CONFIG_COMBOBOX_PROPERTIES.clone();
    }

    public static Object[] getAccountConfigCombobox() {
        return ACCOUNT_CONFIG_COMBOBOX.clone();
    }

    public static Object[] getExcelAccountConfigSearchColumns() {
        return EXCEL_ACCOUNT_CONFIG_SEARCH_COLUMNS.clone();
    }

    public static String[] getExcelAccountConfigSearchHeaders() {
        return EXCEL_ACCOUNT_CONFIG_SEARCH_HEADERS.clone();
    }

    public static String[] getAdjustmentReserveTextBox() {
        return ADJUSTMENT_RESERVE_TEXT_BOX.clone();
    }

    public static String[] getAdjustmentReserveCombobox() {
        return ADJUSTMENT_RESERVE_COMBOBOX.clone();
    }

    public static String[] getAdjustmentDemandPipelineReserveVariableCombobox() {
        return ADJUSTMENT_DEMAND_PIPELINE_RESERVE_VARIABLE_COMBOBOX.clone();
    }

    public static String[] getAdjustmentDemandPipelineGtnVariableCombobox() {
        return ADJUSTMENT_DEMAND_PIPELINE_GTN_VARIABLE_COMBOBOX.clone();
    }

    public static String[] getAdjustmentDemandSummaryReserveVariableCombobox() {
        return ADJUSTMENT_DEMAND_SUMMARY_RESERVE_VARIABLE_COMBOBOX.clone();
    }

    public static String[] getAdjustmentDemandSummaryGtnVariableCombobox() {
        return ADJUSTMENT_DEMAND_SUMMARY_GTN_VARIABLE_COMBOBOX.clone();
    }

    public static Object[] getAdjustmentReserveAddColumnsReserveDetailsForExcel() {
        return ADJUSTMENT_RESERVE_ADD_COLUMNS_RESERVE_DETAILS_FOR_EXCEL.clone();
    }

    public static Object[] getAdjustmentReserveAddColumnsGtnDetailsForExcel() {
        return ADJUSTMENT_RESERVE_ADD_COLUMNS_GTN_DETAILS_FOR_EXCEL.clone();
    }

    public static Object[] getPercentTwoDecColumns() {
        return PERCENT_TWO_DEC_COLUMNS.clone();
    }

    public static Object[] getCurrencyTwoDecColumns() {
        return CURRENCY_TWO_DEC_COLUMNS.clone();
    }

    public static Object[] getDateAlignColumns() {
        return MM_DD_YYYY_COLUMNS.clone();
    }

    public static Object[] getRightAlignColumns() {
        return RIGHT_ALIGNED_COLUMNS.clone();
    }

    public DateFormat getDateFormatter() {
        return dateFormatter;
    }

    public DateFormat getDbDate() {
        return dbDate;
    }

    public SimpleDateFormat getFmtID() {
        return fmtID;
    }

    public DateFormat getmmddyyyy() {
        return mmddyyyy;
    }

    private static ARMUtils object;

    public static synchronized ARMUtils getInstance() {
        if (object == null) {
            object = new ARMUtils();
        }
        return object;
    }
    public static final String TRANSACTION_PIPELINE_ACCRUAL = "Transaction 1 - Pipeline Accrual";
    public static final String TRANSACTION_INFLATION_ADJUSTMENT = "Transaction 6 - Inflation Adjustment";
    public static final String TRANSACTION_INVENTORY = "Transaction 3 - Pipeline Inventory True-up";
    public static final String TRANSACTION_DISTRIBUTION = "Transaction 7 - Distribution Fees";
    public static final String TRANSACTION_RETURNS = "Transaction 8 - Return Reserve";
    public static final String DEFAULT_FROM_TO_DATE = "1900-01-01";
    public static final String NULL_CAPS = "NULL";

    public static Map<Integer, String> getReturnsDemandSummaryLevelsinglePeriod() {

        if (RETURNS_SUMMARY_LEVEL.isEmpty()) {
            RETURNS_SUMMARY_LEVEL.put(1, levelVariablesVarables.DEDUCTION.toString());
            RETURNS_SUMMARY_LEVEL.put(NumericConstants.TWO, levelVariablesVarables.CUSTOMER.toString());
            RETURNS_SUMMARY_LEVEL.put(NumericConstants.THREE, levelVariablesVarables.CONTRACT.toString());
            RETURNS_SUMMARY_LEVEL.put(NumericConstants.FOUR, levelVariablesVarables.BRAND.toString());
            RETURNS_SUMMARY_LEVEL.put(NumericConstants.FIVE, levelVariablesVarables.ITEM.toString());
        }
        return RETURNS_SUMMARY_LEVEL;
    }

    public static Map<String, String> loadViewFilterMapForAdjustment() {
        if (VIEW_FILTER_MAPS.isEmpty()) {
            VIEW_FILTER_MAPS.put(CommonConstant.ADJUSTMENT_TYPE0, ADJUSTMENT_TYPE);
            VIEW_FILTER_MAPS.put("balanceType.1", VariableConstants.BALANCE_TYPE);
            VIEW_FILTER_MAPS.put("database.2", DATABASE);
            VIEW_FILTER_MAPS.put("dataAccessSet.3", VariableConstants.DATA_ACCESS_SET);
            VIEW_FILTER_MAPS.put("chartOfAccounts.4", VariableConstants.CHART_OF_ACCOUNTS);
            VIEW_FILTER_MAPS.put("ledger.5", VariableConstants.LEDGER);
            VIEW_FILTER_MAPS.put("category.6", CATEGORY);
            VIEW_FILTER_MAPS.put("source.7", SOURCE);
            VIEW_FILTER_MAPS.put("h_currency.8", CURRENCY);
            VIEW_FILTER_MAPS.put(VariableConstants.ACCOUNTING_DATE_9, "ACCOUNTING_DATE");
            VIEW_FILTER_MAPS.put("batchName.10", "BATCH_NAME");
            VIEW_FILTER_MAPS.put("journalName.11", VariableConstants.JOURNAL_NAME);
            VIEW_FILTER_MAPS.put("journalDescription.12", VariableConstants.JOURNAL_DESCRIPTION);
            VIEW_FILTER_MAPS.put("reverseJournal.13", VariableConstants.REVERSE_JOURNAL);
            VIEW_FILTER_MAPS.put("h_reversalPeriodOrDate.14", "REVERSAL_PERIOD_DATE");
            VIEW_FILTER_MAPS.put(CommonConstant.COMPANY15, "COMPANY");
            VIEW_FILTER_MAPS.put(VariableConstants.DIVISION_16, DIVISION);
            VIEW_FILTER_MAPS.put("businessUnit.17", BUSINESS_UNIT);
            VIEW_FILTER_MAPS.put(CommonConstant.COST_CENTER18, COST_CENTER);
            VIEW_FILTER_MAPS.put(CommonConstant.ACCOUNT19, ACCOUNT);
            VIEW_FILTER_MAPS.put(CommonConstant.BRAND20, "BRAND");
            VIEW_FILTER_MAPS.put(CommonConstant.PROJECT21, PROJECT);
            VIEW_FILTER_MAPS.put(CommonConstant.FUTURE122, FUTURE_1);
            VIEW_FILTER_MAPS.put(CommonConstant.FUTURE223, FUTURE_2);
            VIEW_FILTER_MAPS.put(CommonConstant.DEBIT24, DEBIT);
            VIEW_FILTER_MAPS.put(CommonConstant.CREDIT25, CREDIT);
            VIEW_FILTER_MAPS.put(CommonConstant.LINE_DESCRIPTION26, VariableConstants.LINE_DESCRIPTION);
            VIEW_FILTER_MAPS.put(CommonConstant.UDC127, UDC_1);
            VIEW_FILTER_MAPS.put("h_udc2.28", UDC_2);
            VIEW_FILTER_MAPS.put("h_udc3.29", UDC_3);
            VIEW_FILTER_MAPS.put("h_udc4.30", UDC_4);
            VIEW_FILTER_MAPS.put("h_udc5.31", UDC_5);
            VIEW_FILTER_MAPS.put("h_udc6.32", UDC_6);
            VIEW_FILTER_MAPS.put("h_accountCategory.33", ACCOUNT_CATEGORY);
            VIEW_FILTER_MAPS.put(CommonConstant.ACCOUNT_TYPE34, ACCOUNT_TYPE);
            VIEW_FILTER_MAPS.put("h_adjustmentLevel.35", ADJUSTMENT_LEVEL);
            VIEW_FILTER_MAPS.put("h_accountIndicator.36", ACCOUNT_INDICATOR1);
            VIEW_FILTER_MAPS.put("accountDescription.37", "ACCOUNT_DESC ");
            VIEW_FILTER_MAPS.put("redemptionPeriodDate.38", REDEMPTION_PERIOD1);
            VIEW_FILTER_MAPS.put("calculationPriodDate.39", "CALCULATION_PERIOD");
            VIEW_FILTER_MAPS.put("workFlowId.40", WORKFLOW_ID);
            VIEW_FILTER_MAPS.put("workFlowName.41", WORKFLOW_NAME);
            VIEW_FILTER_MAPS.put("h_workFlowStatus.42", WORK_FLOW_STATUS);
        }
        return VIEW_FILTER_MAPS;
    }
    private static final String BUSINESS_UNIT = "BUSINESS_UNIT";

    public static Map<String, String> loadSelectForReserveAdjustmentExcel() {
        if (VIEW_SELECT_MAP.isEmpty()) {
            VIEW_SELECT_MAP.put(CommonConstant.ADJUSTMENT_TYPE0, ADJUSTMENT_TYPE);
            VIEW_SELECT_MAP.put("balanceType.1", VariableConstants.BALANCE_TYPE);
            VIEW_SELECT_MAP.put("database.2", DATABASE);
            VIEW_SELECT_MAP.put("dataAccessSet.3", VariableConstants.DATA_ACCESS_SET);
            VIEW_SELECT_MAP.put("chartOfAccounts.4", VariableConstants.CHART_OF_ACCOUNTS);
            VIEW_SELECT_MAP.put("ledger.5", VariableConstants.LEDGER);
            VIEW_SELECT_MAP.put("category.6", CATEGORY);
            VIEW_SELECT_MAP.put("source.7", SOURCE);
            VIEW_SELECT_MAP.put("h_currency.8", "HT.DESCRIPTION");
            VIEW_SELECT_MAP.put(VariableConstants.ACCOUNTING_DATE_9, "CONVERT(VARCHAR(10),ACCOUNTING_DATE,101)");
            VIEW_SELECT_MAP.put("batchName.10", "BATCH_NAME");
            VIEW_SELECT_MAP.put("journalName.11", VariableConstants.JOURNAL_NAME);
            VIEW_SELECT_MAP.put("journalDescription.12", VariableConstants.JOURNAL_DESCRIPTION);
            VIEW_SELECT_MAP.put("reverseJournal.13", VariableConstants.REVERSE_JOURNAL);
            VIEW_SELECT_MAP.put("h_reversalPeriodOrDate.14", "HT1.DESCRIPTION");
            VIEW_SELECT_MAP.put(CommonConstant.COMPANY15, "COMPANY");
            VIEW_SELECT_MAP.put(VariableConstants.DIVISION_16, DIVISION);
            VIEW_SELECT_MAP.put("businessUnit.17", BUSINESS_UNIT);
            VIEW_SELECT_MAP.put(CommonConstant.COST_CENTER18, COST_CENTER);
            VIEW_SELECT_MAP.put(CommonConstant.ACCOUNT19, ACCOUNT);
            VIEW_SELECT_MAP.put(CommonConstant.BRAND20, "BRAND");
            VIEW_SELECT_MAP.put(CommonConstant.PROJECT21, PROJECT);
            VIEW_SELECT_MAP.put(CommonConstant.FUTURE122, FUTURE_1);
            VIEW_SELECT_MAP.put(CommonConstant.FUTURE223, FUTURE_2);
            VIEW_SELECT_MAP.put(CommonConstant.DEBIT24, "'$'+convert(varchar(28),DEBIT)");
            VIEW_SELECT_MAP.put(CommonConstant.CREDIT25, "'$'+convert(varchar(28),CREDIT)");
            VIEW_SELECT_MAP.put(CommonConstant.LINE_DESCRIPTION26, VariableConstants.LINE_DESCRIPTION);
            VIEW_SELECT_MAP.put(CommonConstant.UDC127, UDC_1);
            VIEW_SELECT_MAP.put("h_udc2.28", "HT2.DESCRIPTION");
            VIEW_SELECT_MAP.put("h_udc3.29", "HT3.DESCRIPTION");
            VIEW_SELECT_MAP.put("h_udc4.30", "HT4.DESCRIPTION");
            VIEW_SELECT_MAP.put("h_udc5.31", "HT5.DESCRIPTION");
            VIEW_SELECT_MAP.put("h_udc6.32", "HT6.DESCRIPTION");
            VIEW_SELECT_MAP.put("h_accountCategory.33", "HT7.DESCRIPTION");
            VIEW_SELECT_MAP.put(CommonConstant.ACCOUNT_TYPE34, ACCOUNT_TYPE);
            VIEW_SELECT_MAP.put("h_adjustmentLevel.35", "HT8.DESCRIPTION");
            VIEW_SELECT_MAP.put("h_accountIndicator.36", "HT9.DESCRIPTION");
            VIEW_SELECT_MAP.put("accountDescription.37", "ACCOUNT_DESC ");
            VIEW_SELECT_MAP.put("redemptionPeriodDate.38", "CONVERT(VARCHAR(10),REDEMPTION_PERIOD,101)");
            VIEW_SELECT_MAP.put("calculationPriodDate.39", "CONVERT(VARCHAR(10),CALCULATION_PERIOD,101)");
            VIEW_SELECT_MAP.put("workFlowId.40", WORKFLOW_ID);
            VIEW_SELECT_MAP.put("workFlowName.41", WORKFLOW_NAME);
            VIEW_SELECT_MAP.put("h_workFlowStatus.42", "HT10.DESCRIPTION");
        }
        return VIEW_SELECT_MAP;
    }

    public static Map<String, String> loadViewFilterMapForAdjustmentDetailGTN() {
        if (VIEW_FILTER_GTN.isEmpty()) {
            VIEW_FILTER_GTN.put(CommonConstant.ADJUSTMENT_TYPE0, ADJUSTMENT_TYPE);
            VIEW_FILTER_GTN.put(CommonConstant.DEDUCTION_TYPE1, "DEDUCTION_TYPE");
            VIEW_FILTER_GTN.put(VariableConstants.GLMONTH_2, "GL_MONTH");
            VIEW_FILTER_GTN.put(CommonConstant.GL_YEAR3, "GL_YEAR");
            VIEW_FILTER_GTN.put(CommonConstant.GL_STRING4, "GL_STRING");
            VIEW_FILTER_GTN.put(CommonConstant.GL_COMPANY_ID5, "GL_COMPANY_ID");
            VIEW_FILTER_GTN.put(CommonConstant.DIVISION6, DIVISION);
            VIEW_FILTER_GTN.put("businessUnitID.7", "BUSINESS_UNIT_ID");
            VIEW_FILTER_GTN.put(VariableConstants.COST_CENTER_8, COST_CENTER);
            VIEW_FILTER_GTN.put(CommonConstant.ACCOUNT9, ACCOUNT);
            VIEW_FILTER_GTN.put(CommonConstant.BRAND_ID10, "BRAND_ID");
            VIEW_FILTER_GTN.put(CommonConstant.PROJECT11, PROJECT);
            VIEW_FILTER_GTN.put(CommonConstant.FUTURE112, FUTURE_1);
            VIEW_FILTER_GTN.put(CommonConstant.FUTURE213, FUTURE_2);
            VIEW_FILTER_GTN.put(CommonConstant.ITEM_NO14, "ITEM_NO");
            VIEW_FILTER_GTN.put(CommonConstant.DEDUCTION_AMOUNT15, "DEDUCTION_AMOUNT");
            VIEW_FILTER_GTN.put("glCompanyNo.16", "GL_COMPANY_NO");
            VIEW_FILTER_GTN.put("glCompanyName.17", "GL_COMPANY_NAME");
            VIEW_FILTER_GTN.put("businessUnitNo.18", "BUSINESS_UNIT_NO");
            VIEW_FILTER_GTN.put("businessUnitName.19", "BUSINESS_UNIT_NAME");
            VIEW_FILTER_GTN.put("glDate.20", "GL_DATE");
            VIEW_FILTER_GTN.put("createdDate.21", "CREATED_DATE");
            VIEW_FILTER_GTN.put("redemptionPeriodDate.22", REDEMPTION_PERIOD1);
            VIEW_FILTER_GTN.put("contractID.23", "CONTRACT_ID");
            VIEW_FILTER_GTN.put("contractNo.24", "CONTRACT_NO");
            VIEW_FILTER_GTN.put("contractName.25", "CONTRACT_NAME");
            VIEW_FILTER_GTN.put("companyID.26", "COMPANY_ID");
            VIEW_FILTER_GTN.put("companyNo.27", COMPANY_NO);
            VIEW_FILTER_GTN.put("companyName.28", "COMPANY_NAME");
            VIEW_FILTER_GTN.put("itemID.29", "ITEM_ID");
            VIEW_FILTER_GTN.put("itemName.30", "ITEM_NAME");
            VIEW_FILTER_GTN.put("brandName.31", "BRAND_NAME");
            VIEW_FILTER_GTN.put("deductionID.32", "DEDUCTION_ID");
            VIEW_FILTER_GTN.put("deductionNo.33", "DEDUCTION_NO");
            VIEW_FILTER_GTN.put("deductionName.34", "DEDUCTION_NAME");
            VIEW_FILTER_GTN.put("h_deductionCategory.35", "DEDUCTION_CATEGORY");
            VIEW_FILTER_GTN.put("h_deductionProgram.36", "DEDUCTION_PROGRAM");
            VIEW_FILTER_GTN.put("h_deductionInclusion.37", "DEDUCTION_INCLUSION");
            VIEW_FILTER_GTN.put("h_deductionUDC1.38", "DEDUCTION_UDC_1");
            VIEW_FILTER_GTN.put("h_deductionUDC2.39", "DEDUCTION_UDC_2");
            VIEW_FILTER_GTN.put("h_deductionUDC3.40", "DEDUCTION_UDC_3");
            VIEW_FILTER_GTN.put("h_deductionUDC4.41", "DEDUCTION_UDC_4");
            VIEW_FILTER_GTN.put("h_deductionUDC5.42", "DEDUCTION_UDC_5");
            VIEW_FILTER_GTN.put("h_deductionUDC6.43", "DEDUCTION_UDC_6");
            VIEW_FILTER_GTN.put("deductionRate.44", "DEDUCTION_RATE");
            VIEW_FILTER_GTN.put(CommonConstant.UDC145, UDC_1);
            VIEW_FILTER_GTN.put("h_udc2.46", UDC_2);
            VIEW_FILTER_GTN.put("h_udc3.47", UDC_3);
            VIEW_FILTER_GTN.put("h_udc4.48", UDC_4);
            VIEW_FILTER_GTN.put("h_udc5.49", UDC_5);
            VIEW_FILTER_GTN.put("h_udc6.50", UDC_6);
            VIEW_FILTER_GTN.put(VariableConstants.H_ACCOUNT_TYPE_51, ACCOUNT_TYPE);
            VIEW_FILTER_GTN.put("h_accountCategory.52", ACCOUNT_CATEGORY);
            VIEW_FILTER_GTN.put("h_adjustmentLevel.53", ADJUSTMENT_LEVEL);
            VIEW_FILTER_GTN.put("accountDescription.54", "ACCOUNT_DESCRIPTION");
            VIEW_FILTER_GTN.put("h_accountIndicator.55", ACCOUNT_INDICATOR1);
            VIEW_FILTER_GTN.put("calculationPriodDate.56", "CALCULATION_PERIOD");
            VIEW_FILTER_GTN.put("workFlowId.57", WORKFLOW_ID);
            VIEW_FILTER_GTN.put("workFlowName.58", WORKFLOW_NAME);
            VIEW_FILTER_GTN.put("h_workFlowStatus.59", WORK_FLOW_STATUS);
        }
        return VIEW_FILTER_GTN;
    }
    private static final String COMPANY_NO = "COMPANY_NO";

    public static Map<String, String> loadSelectForGTNAdjustmentExcel() {
        if (VIEW_SELECT_GTN.isEmpty()) {
            VIEW_SELECT_GTN.put(CommonConstant.ADJUSTMENT_TYPE0, "ADJUSTMENT_TYPE");
            VIEW_SELECT_GTN.put(CommonConstant.DEDUCTION_TYPE1, "DEDUCTION_TYPE");
            VIEW_SELECT_GTN.put(VariableConstants.GLMONTH_2, "CONVERT(VARCHAR(20),GL_MONTH)");
            VIEW_SELECT_GTN.put(CommonConstant.GL_YEAR3, "CONVERT(VARCHAR(20),GL_YEAR)");
            VIEW_SELECT_GTN.put(CommonConstant.GL_STRING4, "GL_STRING");
            VIEW_SELECT_GTN.put(CommonConstant.GL_COMPANY_ID5, "GL_COMPANY_ID");
            VIEW_SELECT_GTN.put(CommonConstant.DIVISION6, "DIVISION");
            VIEW_SELECT_GTN.put("businessUnitID.7", "BUSINESS_UNIT_ID");
            VIEW_SELECT_GTN.put(VariableConstants.COST_CENTER_8, "COST_CENTER");
            VIEW_SELECT_GTN.put(CommonConstant.ACCOUNT9, "ACCOUNT");
            VIEW_SELECT_GTN.put(CommonConstant.BRAND_ID10, "BRAND_ID");
            VIEW_SELECT_GTN.put(CommonConstant.PROJECT11, "PROJECT");
            VIEW_SELECT_GTN.put(CommonConstant.FUTURE112, "FUTURE_1");
            VIEW_SELECT_GTN.put(CommonConstant.FUTURE213, "FUTURE_2");
            VIEW_SELECT_GTN.put(CommonConstant.ITEM_NO14, "ITEM_NO");
            VIEW_SELECT_GTN.put(CommonConstant.DEDUCTION_AMOUNT15, "'$'+convert(varchar(28),DEDUCTION_AMOUNT)");
            VIEW_SELECT_GTN.put("glCompanyNo.16", "GL_COMPANY_NO");
            VIEW_SELECT_GTN.put("glCompanyName.17", "GL_COMPANY_NAME");
            VIEW_SELECT_GTN.put("businessUnitNo.18", "BUSINESS_UNIT_NO");
            VIEW_SELECT_GTN.put("businessUnitName.19", "BUSINESS_UNIT_NAME");
            VIEW_SELECT_GTN.put("glDate.20", "CONVERT(VARCHAR(10),GL_DATE,101)");
            VIEW_SELECT_GTN.put("createdDate.21", "CONVERT(VARCHAR(10),A.CREATED_DATE,101)");
            VIEW_SELECT_GTN.put("redemptionPeriodDate.22", "CONVERT(VARCHAR(10),REDEMPTION_PERIOD,101)");
            VIEW_SELECT_GTN.put("contractID.23", "CONTRACT_ID");
            VIEW_SELECT_GTN.put("contractNo.24", "CONTRACT_NO");
            VIEW_SELECT_GTN.put("contractName.25", "CONTRACT_NAME");
            VIEW_SELECT_GTN.put("companyID.26", "COMPANY_ID");
            VIEW_SELECT_GTN.put("companyNo.27", COMPANY_NO);
            VIEW_SELECT_GTN.put("companyName.28", "COMPANY_NAME");
            VIEW_SELECT_GTN.put("itemID.29", "ITEM_ID");
            VIEW_SELECT_GTN.put("itemName.30", "ITEM_NAME");
            VIEW_SELECT_GTN.put("brandName.31", "BRAND_NAME");
            VIEW_SELECT_GTN.put("deductionID.32", "DEDUCTION_ID");
            VIEW_SELECT_GTN.put("deductionNo.33", "DEDUCTION_NO");
            VIEW_SELECT_GTN.put("deductionName.34", "DEDUCTION_NAME");
            VIEW_SELECT_GTN.put("h_deductionCategory.35", "HT11.DESCRIPTION");
            VIEW_SELECT_GTN.put("h_deductionProgram.36", "HT12.DESCRIPTION");
            VIEW_SELECT_GTN.put("h_deductionInclusion.37", "HT13.DESCRIPTION");
            VIEW_SELECT_GTN.put("h_deductionUDC1.38", "HT14.DESCRIPTION");
            VIEW_SELECT_GTN.put("h_deductionUDC2.39", "HT15.DESCRIPTION");
            VIEW_SELECT_GTN.put("h_deductionUDC3.40", "HT16.DESCRIPTION");
            VIEW_SELECT_GTN.put("h_deductionUDC4.41", "HT17.DESCRIPTION");
            VIEW_SELECT_GTN.put("h_deductionUDC5.42", "HT18.DESCRIPTION");
            VIEW_SELECT_GTN.put("h_deductionUDC6.43", "HT19.DESCRIPTION");
            VIEW_SELECT_GTN.put("deductionRate.44", "convert(varchar(28),DEDUCTION_RATE)+'%'");
            VIEW_SELECT_GTN.put(CommonConstant.UDC145, UDC_1);
            VIEW_SELECT_GTN.put("h_udc2.46", "HT20.DESCRIPTION");
            VIEW_SELECT_GTN.put("h_udc3.47", "HT21.DESCRIPTION");
            VIEW_SELECT_GTN.put("h_udc4.48", "HT22.DESCRIPTION");
            VIEW_SELECT_GTN.put("h_udc5.49", "HT23.DESCRIPTION");
            VIEW_SELECT_GTN.put("h_udc6.50", "HT24.DESCRIPTION");
            VIEW_SELECT_GTN.put(VariableConstants.H_ACCOUNT_TYPE_51, "HT25.DESCRIPTION");
            VIEW_SELECT_GTN.put("h_accountCategory.52", "HT26.DESCRIPTION");
            VIEW_SELECT_GTN.put("h_adjustmentLevel.53", "HT27.DESCRIPTION");
            VIEW_SELECT_GTN.put("accountDescription.54", "ACCOUNT_DESCRIPTION");
            VIEW_SELECT_GTN.put("h_accountIndicator.55", "HT28.DESCRIPTION");
            VIEW_SELECT_GTN.put("calculationPriodDate.56", "CONVERT(VARCHAR(10),CALCULATION_PERIOD,101)");
            VIEW_SELECT_GTN.put("workFlowId.57", WORKFLOW_ID);
            VIEW_SELECT_GTN.put("workFlowName.58", WORKFLOW_NAME);
            VIEW_SELECT_GTN.put("h_workFlowStatus.59", "HT29.DESCRIPTION");
        }
        return VIEW_SELECT_GTN;
    }

    private static final Map<String, String> deductionLevelMapForInflation = new HashMap<>();

    public static Map<String, String> loadDedutionMapForInflation() {
        if (deductionLevelMapForInflation.isEmpty()) {
            deductionLevelMapForInflation.put(ARMConstants.getDeductionCategory(), "A.RS_CATEGORY,HT.DESCRIPTION");
            deductionLevelMapForInflation.put(ARMConstants.getDeductionType(), "A.RS_TYPE,HT.DESCRIPTION");
            deductionLevelMapForInflation.put(ARMConstants.getDeductionProgram(), "A.REBATE_PROGRAM_TYPE,HT.DESCRIPTION");
            deductionLevelMapForInflation.put(ARMConstants.getDeduction(), "A.RS_ID,HT.DESCRIPTION");
            deductionLevelMapForInflation.put(ARMConstants.getDeductionCategory2(), "U.UDC2,HT.DESCRIPTION");
            deductionLevelMapForInflation.put(ARMConstants.getDeductionCategory3(), "U.UDC3,HT.DESCRIPTION");
            deductionLevelMapForInflation.put(ARMConstants.getDeductionCategory4(), "U.UDC4,HT.DESCRIPTION");
            deductionLevelMapForInflation.put(ARMConstants.getDeductionCategory5(), "U.UDC5,HT.DESCRIPTION");
            deductionLevelMapForInflation.put(ARMConstants.getDeductionCategory6(), "U.UDC6,HT.DESCRIPTION");
        }
        return deductionLevelMapForInflation;
    }

    public static final String YYYY_M_MDD_H_HMMSS_S = "yyyy-MM-dd HH:mm:ss.S";
    public static final String DOUBLE_HIPHEN = "--";

    public static Map<String, String> getAdjustmentSummaryVisibleToDBColumnMapForFilter() {
        if (adjustmentSummaryVisibleToDBColumnMapForFilter == null) {
            adjustmentSummaryVisibleToDBColumnMapForFilter = new HashMap<>();
            adjustmentSummaryVisibleToDBColumnMapForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.CHECK_RECORD.getConstant(), CommonConstant.CHECK_RECORD_VALUE);
            adjustmentSummaryVisibleToDBColumnMapForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_ADJUSTMENT_TYPE.getConstant(), "AM.TRANSACTION_NAME");
            adjustmentSummaryVisibleToDBColumnMapForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_PIPELINE.getConstant(), VariableConstants.CUTRANSACTION_NAME);
            adjustmentSummaryVisibleToDBColumnMapForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_PIPELINE_ACCOUNT.getConstant(), CommonConstant.CURRENT_BALANCE_ACC_VALUE);
            adjustmentSummaryVisibleToDBColumnMapForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND.getConstant(), "DEM.TRANSACTION_NAME");
            adjustmentSummaryVisibleToDBColumnMapForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_ACCOUNT.getConstant(), "DEMAND_ACCRUAL_ACC");
            adjustmentSummaryVisibleToDBColumnMapForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST.getConstant(), "DEF.TRANSACTION_NAME");
            adjustmentSummaryVisibleToDBColumnMapForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_REFORECAST_ACCOUNT.getConstant(), "DEMAND_REFORECAST_ACC");
            adjustmentSummaryVisibleToDBColumnMapForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_PAYMENT_RECON.getConstant(), "DER.TRANSACTION_NAME");
            adjustmentSummaryVisibleToDBColumnMapForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_DEMAND_PAYMENT_RECON_ACCOUNT.getConstant(), "DEMAND_PAYMENT_RECON_ACC");
            adjustmentSummaryVisibleToDBColumnMapForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_BALANCE.getConstant(), VariableConstants.CUTRANSACTION_NAME);
            adjustmentSummaryVisibleToDBColumnMapForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_BALANCE_ACCOUNT.getConstant(), CommonConstant.CURRENT_BALANCE_ACC_VALUE);
            adjustmentSummaryVisibleToDBColumnMapForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_PIPELINE.getConstant(), VariableConstants.CUTRANSACTION_NAME);
            adjustmentSummaryVisibleToDBColumnMapForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJ_SUMMARY_CURRENT_PIPELINE_ACCOUNT.getConstant(), CommonConstant.CURRENT_BALANCE_ACC_VALUE);
        }
        return adjustmentSummaryVisibleToDBColumnMapForFilter;
    }

    public static Map<String, String> getDescriptionForFilter() {
        if (descriptionForFilter == null) {
            descriptionForFilter = new HashMap<>();
            descriptionForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ADJUSTMENT_LEVEL.getConstant(), "ADJUSTMENT_LEVEL");
            descriptionForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_CATEGORY.getConstant(), ACCOUNT_CATEGORY);
            descriptionForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT_TYPE.getConstant(), "ACCOUNT_TYPE");
            descriptionForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTINDICTOR.getConstant(), ACCOUNT_INDICATOR1);
            descriptionForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.CURRENCY.getConstant(), CURRENCY);
            descriptionForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.REVERSAL_PERIOD_DATE.getConstant(), REVERSAL_PERIOD);
            descriptionForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC1.getConstant(), "UDC_1");
            descriptionForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC2.getConstant(), "UDC_2");
            descriptionForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC3.getConstant(), "UDC_3");
            descriptionForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC4.getConstant(), "UDC_4");
            descriptionForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC5.getConstant(), "UDC_5");
            descriptionForFilter.put(ADJUSTMENT_RESERVE_CONSTANTS.UDC6.getConstant(), "UDC_6");
        }
        return descriptionForFilter;
    }

    public static Map<String, String> getTextFieldDescription() {
        if (textFieldDescription == null) {
            textFieldDescription = new HashMap<>();
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNT.getConstant(), ACCOUNT);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.ACCOUNTDESCRIPTION.getConstant(), VariableConstants.ACCOUNT_DESC);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.COMPANYNO.getConstant(), COMPANY_NO);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.DIVISION.getConstant(), DIVISION);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.BUSINESS_UNIT.getConstant(), BUSINESS_UNIT);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.COST_CENTER.getConstant(), COST_CENTER);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.PROJECT.getConstant(), PROJECT);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.FUTURE1.getConstant(), FUTURE_1);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.FUTURE2.getConstant(), FUTURE_2);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.DATABASE.getConstant(), DATABASE);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.BALANCE_TYPE.getConstant(), VariableConstants.BALANCE_TYPE);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.DATA_ACCESS_SET.getConstant(), VariableConstants.DATA_ACCESS_SET);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.CHART_OF_ACCOUNTS.getConstant(), VariableConstants.CHART_OF_ACCOUNTS);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.LEDGER.getConstant(), VariableConstants.LEDGER);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.CATEGORY.getConstant(), CATEGORY);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.SOURCE.getConstant(), SOURCE);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_NAME.getConstant(), VariableConstants.JOURNAL_NAME);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.JOURNAL_DESCRIPTION.getConstant(), VariableConstants.JOURNAL_DESCRIPTION);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.REVERSE_JOURNAL.getConstant(), VariableConstants.REVERSE_JOURNAL);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.LINE_DESCRIPTION.getConstant(), VariableConstants.LINE_DESCRIPTION);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.DEBIT_INDICATOR.getConstant(), DEBIT);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.CREDIT_INDICATOR.getConstant(), CREDIT);
            textFieldDescription.put(ADJUSTMENT_RESERVE_CONSTANTS.REPORT_INDICATOR.getConstant(), REPORT_INDICATOR);
        }
        return textFieldDescription;
    }

    public String getSidValue(String key) {
        Map<String, String> map = new HashMap<>();
        map.put(ARMConstants.getDeduction(), "R.RS_CONTRACT_SID");
        map.put(ARMConstants.getDeductionCategory(), "R.RS_CATEGORY");
        map.put(ARMConstants.getDeductionType(), "R.RS_TYPE");
        map.put(ARMConstants.getDeductionProgram(), "R.REBATE_PROGRAM_TYPE");
        map.put(ARMConstants.getDeductionCategory2(), "U.UDC2");
        map.put(ARMConstants.getDeductionCategory3(), "U.UDC3");
        map.put(ARMConstants.getDeductionCategory4(), "U.UDC4");
        map.put(ARMConstants.getDeductionCategory5(), "U.UDC5");
        map.put(ARMConstants.getDeductionCategory6(), "U.UDC6");
        return map.get(key);

    }

    public static int getIntegerValue(String value) {
        return Integer.valueOf(value);
    }
}
