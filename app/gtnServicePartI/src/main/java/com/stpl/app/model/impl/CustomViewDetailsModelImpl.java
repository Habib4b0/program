package com.stpl.app.model.impl;

import com.stpl.app.model.CustomViewDetails;
import com.stpl.app.model.CustomViewDetailsModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CustomViewDetails service. Represents a row in the &quot;CUSTOM_VIEW_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.CustomViewDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomViewDetailsImpl}.
 * </p>
 *
 * @author
 * @see CustomViewDetailsImpl
 * @see com.stpl.app.model.CustomViewDetails
 * @see com.stpl.app.model.CustomViewDetailsModel
 * @generated
 */
public class CustomViewDetailsModelImpl extends BaseModelImpl<CustomViewDetails>
    implements CustomViewDetailsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a custom view details model instance should use the {@link com.stpl.app.model.CustomViewDetails} interface instead.
     */
    public static final String TABLE_NAME = "CUSTOM_VIEW_DETAILS";
    public static final Object[][] TABLE_COLUMNS = {
            { "HIERARCHY_ID", Types.INTEGER },
            { "HIERARCHY_INDICATOR", Types.VARCHAR },
            { "CUSTOM_VIEW_MASTER_SID", Types.INTEGER },
            { "CUSTOM_VIEW_DETAILS_SID", Types.INTEGER },
            { "LEVEL_NO", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table CUSTOM_VIEW_DETAILS (HIERARCHY_ID INTEGER,HIERARCHY_INDICATOR VARCHAR(75) null,CUSTOM_VIEW_MASTER_SID INTEGER,CUSTOM_VIEW_DETAILS_SID INTEGER not null primary key IDENTITY,LEVEL_NO INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table CUSTOM_VIEW_DETAILS";
    public static final String ORDER_BY_JPQL = " ORDER BY customViewDetails.customViewDetailsSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY CUSTOM_VIEW_DETAILS.CUSTOM_VIEW_DETAILS_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.CustomViewDetails"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.CustomViewDetails"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.CustomViewDetails"));
    private static ClassLoader _classLoader = CustomViewDetails.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            CustomViewDetails.class
        };
    private int _hierarchyId;
    private String _hierarchyIndicator;
    private int _customViewMasterSid;
    private int _customViewDetailsSid;
    private int _levelNo;
    private CustomViewDetails _escapedModel;

    public CustomViewDetailsModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _customViewDetailsSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setCustomViewDetailsSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _customViewDetailsSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return CustomViewDetails.class;
    }

    @Override
    public String getModelClassName() {
        return CustomViewDetails.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("hierarchyId", getHierarchyId());
        attributes.put("hierarchyIndicator", getHierarchyIndicator());
        attributes.put("customViewMasterSid", getCustomViewMasterSid());
        attributes.put("customViewDetailsSid", getCustomViewDetailsSid());
        attributes.put("levelNo", getLevelNo());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer hierarchyId = (Integer) attributes.get("hierarchyId");

        if (hierarchyId != null) {
            setHierarchyId(hierarchyId);
        }

        String hierarchyIndicator = (String) attributes.get(
                "hierarchyIndicator");

        if (hierarchyIndicator != null) {
            setHierarchyIndicator(hierarchyIndicator);
        }

        Integer customViewMasterSid = (Integer) attributes.get(
                "customViewMasterSid");

        if (customViewMasterSid != null) {
            setCustomViewMasterSid(customViewMasterSid);
        }

        Integer customViewDetailsSid = (Integer) attributes.get(
                "customViewDetailsSid");

        if (customViewDetailsSid != null) {
            setCustomViewDetailsSid(customViewDetailsSid);
        }

        Integer levelNo = (Integer) attributes.get("levelNo");

        if (levelNo != null) {
            setLevelNo(levelNo);
        }
    }

    @Override
    public int getHierarchyId() {
        return _hierarchyId;
    }

    @Override
    public void setHierarchyId(int hierarchyId) {
        _hierarchyId = hierarchyId;
    }

    @Override
    public String getHierarchyIndicator() {
        if (_hierarchyIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _hierarchyIndicator;
        }
    }

    @Override
    public void setHierarchyIndicator(String hierarchyIndicator) {
        _hierarchyIndicator = hierarchyIndicator;
    }

    @Override
    public int getCustomViewMasterSid() {
        return _customViewMasterSid;
    }

    @Override
    public void setCustomViewMasterSid(int customViewMasterSid) {
        _customViewMasterSid = customViewMasterSid;
    }

    @Override
    public int getCustomViewDetailsSid() {
        return _customViewDetailsSid;
    }

    @Override
    public void setCustomViewDetailsSid(int customViewDetailsSid) {
        _customViewDetailsSid = customViewDetailsSid;
    }

    @Override
    public int getLevelNo() {
        return _levelNo;
    }

    @Override
    public void setLevelNo(int levelNo) {
        _levelNo = levelNo;
    }

    @Override
    public CustomViewDetails toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (CustomViewDetails) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CustomViewDetailsImpl customViewDetailsImpl = new CustomViewDetailsImpl();

        customViewDetailsImpl.setHierarchyId(getHierarchyId());
        customViewDetailsImpl.setHierarchyIndicator(getHierarchyIndicator());
        customViewDetailsImpl.setCustomViewMasterSid(getCustomViewMasterSid());
        customViewDetailsImpl.setCustomViewDetailsSid(getCustomViewDetailsSid());
        customViewDetailsImpl.setLevelNo(getLevelNo());

        customViewDetailsImpl.resetOriginalValues();

        return customViewDetailsImpl;
    }

    @Override
    public int compareTo(CustomViewDetails customViewDetails) {
        int primaryKey = customViewDetails.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof CustomViewDetails)) {
            return false;
        }

        CustomViewDetails customViewDetails = (CustomViewDetails) obj;

        int primaryKey = customViewDetails.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<CustomViewDetails> toCacheModel() {
        CustomViewDetailsCacheModel customViewDetailsCacheModel = new CustomViewDetailsCacheModel();

        customViewDetailsCacheModel.hierarchyId = getHierarchyId();

        customViewDetailsCacheModel.hierarchyIndicator = getHierarchyIndicator();

        String hierarchyIndicator = customViewDetailsCacheModel.hierarchyIndicator;

        if ((hierarchyIndicator != null) && (hierarchyIndicator.length() == 0)) {
            customViewDetailsCacheModel.hierarchyIndicator = null;
        }

        customViewDetailsCacheModel.customViewMasterSid = getCustomViewMasterSid();

        customViewDetailsCacheModel.customViewDetailsSid = getCustomViewDetailsSid();

        customViewDetailsCacheModel.levelNo = getLevelNo();

        return customViewDetailsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{hierarchyId=");
        sb.append(getHierarchyId());
        sb.append(", hierarchyIndicator=");
        sb.append(getHierarchyIndicator());
        sb.append(", customViewMasterSid=");
        sb.append(getCustomViewMasterSid());
        sb.append(", customViewDetailsSid=");
        sb.append(getCustomViewDetailsSid());
        sb.append(", levelNo=");
        sb.append(getLevelNo());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.CustomViewDetails");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>hierarchyId</column-name><column-value><![CDATA[");
        sb.append(getHierarchyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hierarchyIndicator</column-name><column-value><![CDATA[");
        sb.append(getHierarchyIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>customViewMasterSid</column-name><column-value><![CDATA[");
        sb.append(getCustomViewMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>customViewDetailsSid</column-name><column-value><![CDATA[");
        sb.append(getCustomViewDetailsSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>levelNo</column-name><column-value><![CDATA[");
        sb.append(getLevelNo());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
