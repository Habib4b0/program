/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.parttwo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.parttwo.model.AcFdAdjustmentSelection;
import com.stpl.app.parttwo.model.AcFdAdjustmentSelectionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AcFdAdjustmentSelection service. Represents a row in the &quot;AC_FD_ADJUSTMENT_SELECTION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AcFdAdjustmentSelectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AcFdAdjustmentSelectionImpl}.
 * </p>
 *
 * @author
 * @see AcFdAdjustmentSelectionImpl
 * @see AcFdAdjustmentSelection
 * @see AcFdAdjustmentSelectionModel
 * @generated
 */
@ProviderType
public class AcFdAdjustmentSelectionModelImpl extends BaseModelImpl<AcFdAdjustmentSelection>
	implements AcFdAdjustmentSelectionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ac fd adjustment selection model instance should use the {@link AcFdAdjustmentSelection} interface instead.
	 */
	public static final String TABLE_NAME = "AC_FD_ADJUSTMENT_SELECTION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "METHODOLOGY_START_DATE", Types.VARCHAR },
			{ "ALLOCATION_METHOD", Types.INTEGER },
			{ "START_DATE", Types.TIMESTAMP },
			{ "TOTAL_FIXED_DOLLAR_ADJ", Types.DOUBLE },
			{ "CALCULATION_FLAG", Types.BOOLEAN },
			{ "RATE_CORRECTION", Types.DOUBLE },
			{ "BUSINESS_DAYS", Types.INTEGER },
			{ "GL_IMPACT_DATE", Types.TIMESTAMP },
			{ "SALES_BASIS", Types.INTEGER },
			{ "RELEASE_TYPE", Types.BOOLEAN },
			{ "ACC_CLOSURE_MASTER_SID", Types.INTEGER },
			{ "RELEASE_AMOUNT", Types.DOUBLE },
			{ "SUGGESTED_ADJ", Types.DOUBLE },
			{ "METHODOLOGY_END_DATE", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("METHODOLOGY_START_DATE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ALLOCATION_METHOD", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("TOTAL_FIXED_DOLLAR_ADJ", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("CALCULATION_FLAG", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("RATE_CORRECTION", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("BUSINESS_DAYS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("GL_IMPACT_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("SALES_BASIS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RELEASE_TYPE", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("ACC_CLOSURE_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RELEASE_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("SUGGESTED_ADJ", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("METHODOLOGY_END_DATE", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table AC_FD_ADJUSTMENT_SELECTION (METHODOLOGY_START_DATE VARCHAR(75) null,ALLOCATION_METHOD INTEGER,START_DATE DATE null,TOTAL_FIXED_DOLLAR_ADJ DOUBLE,CALCULATION_FLAG BOOLEAN,RATE_CORRECTION DOUBLE,BUSINESS_DAYS INTEGER,GL_IMPACT_DATE DATE null,SALES_BASIS INTEGER,RELEASE_TYPE BOOLEAN,ACC_CLOSURE_MASTER_SID INTEGER not null primary key,RELEASE_AMOUNT DOUBLE,SUGGESTED_ADJ DOUBLE,METHODOLOGY_END_DATE VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table AC_FD_ADJUSTMENT_SELECTION";
	public static final String ORDER_BY_JPQL = " ORDER BY acFdAdjustmentSelection.accClosureMasterSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY AC_FD_ADJUSTMENT_SELECTION.ACC_CLOSURE_MASTER_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.parttwo.model.AcFdAdjustmentSelection"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.parttwo.model.AcFdAdjustmentSelection"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.parttwo.model.AcFdAdjustmentSelection"));

	public AcFdAdjustmentSelectionModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _accClosureMasterSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setAccClosureMasterSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accClosureMasterSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AcFdAdjustmentSelection.class;
	}

	@Override
	public String getModelClassName() {
		return AcFdAdjustmentSelection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("methodologyStartDate", getMethodologyStartDate());
		attributes.put("allocationMethod", getAllocationMethod());
		attributes.put("startDate", getStartDate());
		attributes.put("totalFixedDollarAdj", getTotalFixedDollarAdj());
		attributes.put("calculationFlag", getCalculationFlag());
		attributes.put("rateCorrection", getRateCorrection());
		attributes.put("businessDays", getBusinessDays());
		attributes.put("glImpactDate", getGlImpactDate());
		attributes.put("salesBasis", getSalesBasis());
		attributes.put("releaseType", getReleaseType());
		attributes.put("accClosureMasterSid", getAccClosureMasterSid());
		attributes.put("releaseAmount", getReleaseAmount());
		attributes.put("suggestedAdj", getSuggestedAdj());
		attributes.put("methodologyEndDate", getMethodologyEndDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String methodologyStartDate = (String)attributes.get(
				"methodologyStartDate");

		if (methodologyStartDate != null) {
			setMethodologyStartDate(methodologyStartDate);
		}

		Integer allocationMethod = (Integer)attributes.get("allocationMethod");

		if (allocationMethod != null) {
			setAllocationMethod(allocationMethod);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Double totalFixedDollarAdj = (Double)attributes.get(
				"totalFixedDollarAdj");

		if (totalFixedDollarAdj != null) {
			setTotalFixedDollarAdj(totalFixedDollarAdj);
		}

		Boolean calculationFlag = (Boolean)attributes.get("calculationFlag");

		if (calculationFlag != null) {
			setCalculationFlag(calculationFlag);
		}

		Double rateCorrection = (Double)attributes.get("rateCorrection");

		if (rateCorrection != null) {
			setRateCorrection(rateCorrection);
		}

		Integer businessDays = (Integer)attributes.get("businessDays");

		if (businessDays != null) {
			setBusinessDays(businessDays);
		}

		Date glImpactDate = (Date)attributes.get("glImpactDate");

		if (glImpactDate != null) {
			setGlImpactDate(glImpactDate);
		}

		Integer salesBasis = (Integer)attributes.get("salesBasis");

		if (salesBasis != null) {
			setSalesBasis(salesBasis);
		}

		Boolean releaseType = (Boolean)attributes.get("releaseType");

		if (releaseType != null) {
			setReleaseType(releaseType);
		}

		Integer accClosureMasterSid = (Integer)attributes.get(
				"accClosureMasterSid");

		if (accClosureMasterSid != null) {
			setAccClosureMasterSid(accClosureMasterSid);
		}

		Double releaseAmount = (Double)attributes.get("releaseAmount");

		if (releaseAmount != null) {
			setReleaseAmount(releaseAmount);
		}

		Double suggestedAdj = (Double)attributes.get("suggestedAdj");

		if (suggestedAdj != null) {
			setSuggestedAdj(suggestedAdj);
		}

		String methodologyEndDate = (String)attributes.get("methodologyEndDate");

		if (methodologyEndDate != null) {
			setMethodologyEndDate(methodologyEndDate);
		}
	}

	@Override
	public String getMethodologyStartDate() {
		if (_methodologyStartDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _methodologyStartDate;
		}
	}

	@Override
	public void setMethodologyStartDate(String methodologyStartDate) {
		_methodologyStartDate = methodologyStartDate;
	}

	@Override
	public int getAllocationMethod() {
		return _allocationMethod;
	}

	@Override
	public void setAllocationMethod(int allocationMethod) {
		_allocationMethod = allocationMethod;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public double getTotalFixedDollarAdj() {
		return _totalFixedDollarAdj;
	}

	@Override
	public void setTotalFixedDollarAdj(double totalFixedDollarAdj) {
		_totalFixedDollarAdj = totalFixedDollarAdj;
	}

	@Override
	public boolean getCalculationFlag() {
		return _calculationFlag;
	}

	@Override
	public boolean isCalculationFlag() {
		return _calculationFlag;
	}

	@Override
	public void setCalculationFlag(boolean calculationFlag) {
		_calculationFlag = calculationFlag;
	}

	@Override
	public double getRateCorrection() {
		return _rateCorrection;
	}

	@Override
	public void setRateCorrection(double rateCorrection) {
		_rateCorrection = rateCorrection;
	}

	@Override
	public int getBusinessDays() {
		return _businessDays;
	}

	@Override
	public void setBusinessDays(int businessDays) {
		_businessDays = businessDays;
	}

	@Override
	public Date getGlImpactDate() {
		return _glImpactDate;
	}

	@Override
	public void setGlImpactDate(Date glImpactDate) {
		_glImpactDate = glImpactDate;
	}

	@Override
	public int getSalesBasis() {
		return _salesBasis;
	}

	@Override
	public void setSalesBasis(int salesBasis) {
		_salesBasis = salesBasis;
	}

	@Override
	public boolean getReleaseType() {
		return _releaseType;
	}

	@Override
	public boolean isReleaseType() {
		return _releaseType;
	}

	@Override
	public void setReleaseType(boolean releaseType) {
		_releaseType = releaseType;
	}

	@Override
	public int getAccClosureMasterSid() {
		return _accClosureMasterSid;
	}

	@Override
	public void setAccClosureMasterSid(int accClosureMasterSid) {
		_accClosureMasterSid = accClosureMasterSid;
	}

	@Override
	public double getReleaseAmount() {
		return _releaseAmount;
	}

	@Override
	public void setReleaseAmount(double releaseAmount) {
		_releaseAmount = releaseAmount;
	}

	@Override
	public double getSuggestedAdj() {
		return _suggestedAdj;
	}

	@Override
	public void setSuggestedAdj(double suggestedAdj) {
		_suggestedAdj = suggestedAdj;
	}

	@Override
	public String getMethodologyEndDate() {
		if (_methodologyEndDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _methodologyEndDate;
		}
	}

	@Override
	public void setMethodologyEndDate(String methodologyEndDate) {
		_methodologyEndDate = methodologyEndDate;
	}

	@Override
	public AcFdAdjustmentSelection toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AcFdAdjustmentSelection)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AcFdAdjustmentSelectionImpl acFdAdjustmentSelectionImpl = new AcFdAdjustmentSelectionImpl();

		acFdAdjustmentSelectionImpl.setMethodologyStartDate(getMethodologyStartDate());
		acFdAdjustmentSelectionImpl.setAllocationMethod(getAllocationMethod());
		acFdAdjustmentSelectionImpl.setStartDate(getStartDate());
		acFdAdjustmentSelectionImpl.setTotalFixedDollarAdj(getTotalFixedDollarAdj());
		acFdAdjustmentSelectionImpl.setCalculationFlag(getCalculationFlag());
		acFdAdjustmentSelectionImpl.setRateCorrection(getRateCorrection());
		acFdAdjustmentSelectionImpl.setBusinessDays(getBusinessDays());
		acFdAdjustmentSelectionImpl.setGlImpactDate(getGlImpactDate());
		acFdAdjustmentSelectionImpl.setSalesBasis(getSalesBasis());
		acFdAdjustmentSelectionImpl.setReleaseType(getReleaseType());
		acFdAdjustmentSelectionImpl.setAccClosureMasterSid(getAccClosureMasterSid());
		acFdAdjustmentSelectionImpl.setReleaseAmount(getReleaseAmount());
		acFdAdjustmentSelectionImpl.setSuggestedAdj(getSuggestedAdj());
		acFdAdjustmentSelectionImpl.setMethodologyEndDate(getMethodologyEndDate());

		acFdAdjustmentSelectionImpl.resetOriginalValues();

		return acFdAdjustmentSelectionImpl;
	}

	@Override
	public int compareTo(AcFdAdjustmentSelection acFdAdjustmentSelection) {
		int primaryKey = acFdAdjustmentSelection.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AcFdAdjustmentSelection)) {
			return false;
		}

		AcFdAdjustmentSelection acFdAdjustmentSelection = (AcFdAdjustmentSelection)obj;

		int primaryKey = acFdAdjustmentSelection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<AcFdAdjustmentSelection> toCacheModel() {
		AcFdAdjustmentSelectionCacheModel acFdAdjustmentSelectionCacheModel = new AcFdAdjustmentSelectionCacheModel();

		acFdAdjustmentSelectionCacheModel.methodologyStartDate = getMethodologyStartDate();

		String methodologyStartDate = acFdAdjustmentSelectionCacheModel.methodologyStartDate;

		if ((methodologyStartDate != null) &&
				(methodologyStartDate.length() == 0)) {
			acFdAdjustmentSelectionCacheModel.methodologyStartDate = null;
		}

		acFdAdjustmentSelectionCacheModel.allocationMethod = getAllocationMethod();

		Date startDate = getStartDate();

		if (startDate != null) {
			acFdAdjustmentSelectionCacheModel.startDate = startDate.getTime();
		}
		else {
			acFdAdjustmentSelectionCacheModel.startDate = Long.MIN_VALUE;
		}

		acFdAdjustmentSelectionCacheModel.totalFixedDollarAdj = getTotalFixedDollarAdj();

		acFdAdjustmentSelectionCacheModel.calculationFlag = getCalculationFlag();

		acFdAdjustmentSelectionCacheModel.rateCorrection = getRateCorrection();

		acFdAdjustmentSelectionCacheModel.businessDays = getBusinessDays();

		Date glImpactDate = getGlImpactDate();

		if (glImpactDate != null) {
			acFdAdjustmentSelectionCacheModel.glImpactDate = glImpactDate.getTime();
		}
		else {
			acFdAdjustmentSelectionCacheModel.glImpactDate = Long.MIN_VALUE;
		}

		acFdAdjustmentSelectionCacheModel.salesBasis = getSalesBasis();

		acFdAdjustmentSelectionCacheModel.releaseType = getReleaseType();

		acFdAdjustmentSelectionCacheModel.accClosureMasterSid = getAccClosureMasterSid();

		acFdAdjustmentSelectionCacheModel.releaseAmount = getReleaseAmount();

		acFdAdjustmentSelectionCacheModel.suggestedAdj = getSuggestedAdj();

		acFdAdjustmentSelectionCacheModel.methodologyEndDate = getMethodologyEndDate();

		String methodologyEndDate = acFdAdjustmentSelectionCacheModel.methodologyEndDate;

		if ((methodologyEndDate != null) && (methodologyEndDate.length() == 0)) {
			acFdAdjustmentSelectionCacheModel.methodologyEndDate = null;
		}

		return acFdAdjustmentSelectionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{methodologyStartDate=");
		sb.append(getMethodologyStartDate());
		sb.append(", allocationMethod=");
		sb.append(getAllocationMethod());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", totalFixedDollarAdj=");
		sb.append(getTotalFixedDollarAdj());
		sb.append(", calculationFlag=");
		sb.append(getCalculationFlag());
		sb.append(", rateCorrection=");
		sb.append(getRateCorrection());
		sb.append(", businessDays=");
		sb.append(getBusinessDays());
		sb.append(", glImpactDate=");
		sb.append(getGlImpactDate());
		sb.append(", salesBasis=");
		sb.append(getSalesBasis());
		sb.append(", releaseType=");
		sb.append(getReleaseType());
		sb.append(", accClosureMasterSid=");
		sb.append(getAccClosureMasterSid());
		sb.append(", releaseAmount=");
		sb.append(getReleaseAmount());
		sb.append(", suggestedAdj=");
		sb.append(getSuggestedAdj());
		sb.append(", methodologyEndDate=");
		sb.append(getMethodologyEndDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.parttwo.model.AcFdAdjustmentSelection");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>methodologyStartDate</column-name><column-value><![CDATA[");
		sb.append(getMethodologyStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allocationMethod</column-name><column-value><![CDATA[");
		sb.append(getAllocationMethod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalFixedDollarAdj</column-name><column-value><![CDATA[");
		sb.append(getTotalFixedDollarAdj());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calculationFlag</column-name><column-value><![CDATA[");
		sb.append(getCalculationFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rateCorrection</column-name><column-value><![CDATA[");
		sb.append(getRateCorrection());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessDays</column-name><column-value><![CDATA[");
		sb.append(getBusinessDays());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>glImpactDate</column-name><column-value><![CDATA[");
		sb.append(getGlImpactDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>salesBasis</column-name><column-value><![CDATA[");
		sb.append(getSalesBasis());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>releaseType</column-name><column-value><![CDATA[");
		sb.append(getReleaseType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accClosureMasterSid</column-name><column-value><![CDATA[");
		sb.append(getAccClosureMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>releaseAmount</column-name><column-value><![CDATA[");
		sb.append(getReleaseAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>suggestedAdj</column-name><column-value><![CDATA[");
		sb.append(getSuggestedAdj());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>methodologyEndDate</column-name><column-value><![CDATA[");
		sb.append(getMethodologyEndDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AcFdAdjustmentSelection.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AcFdAdjustmentSelection.class
		};
	private String _methodologyStartDate;
	private int _allocationMethod;
	private Date _startDate;
	private double _totalFixedDollarAdj;
	private boolean _calculationFlag;
	private double _rateCorrection;
	private int _businessDays;
	private Date _glImpactDate;
	private int _salesBasis;
	private boolean _releaseType;
	private int _accClosureMasterSid;
	private double _releaseAmount;
	private double _suggestedAdj;
	private String _methodologyEndDate;
	private AcFdAdjustmentSelection _escapedModel;
}