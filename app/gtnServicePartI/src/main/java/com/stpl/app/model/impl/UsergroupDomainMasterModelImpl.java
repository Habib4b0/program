package com.stpl.app.model.impl;

import com.stpl.app.model.UsergroupDomainMaster;
import com.stpl.app.model.UsergroupDomainMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UsergroupDomainMaster service. Represents a row in the &quot;USERGROUP_DOMAIN_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.UsergroupDomainMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UsergroupDomainMasterImpl}.
 * </p>
 *
 * @author
 * @see UsergroupDomainMasterImpl
 * @see com.stpl.app.model.UsergroupDomainMaster
 * @see com.stpl.app.model.UsergroupDomainMasterModel
 * @generated
 */
public class UsergroupDomainMasterModelImpl extends BaseModelImpl<UsergroupDomainMaster>
    implements UsergroupDomainMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a usergroup domain master model instance should use the {@link com.stpl.app.model.UsergroupDomainMaster} interface instead.
     */
    public static final String TABLE_NAME = "USERGROUP_DOMAIN_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "CREATED_BY", Types.INTEGER },
            { "USERGROUP_DOMAIN_SID", Types.INTEGER },
            { "USERS_SID", Types.INTEGER },
            { "MODIFIED_BY", Types.INTEGER },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "DOMAIN_ID", Types.INTEGER },
            { "PROCESSED", Types.VARCHAR },
            { "USERGROUP_ID", Types.INTEGER },
            { "VERSION_NO", Types.INTEGER },
            { "IS_ACTIVE", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table USERGROUP_DOMAIN_MASTER (CREATED_BY INTEGER,USERGROUP_DOMAIN_SID INTEGER not null primary key IDENTITY,USERS_SID INTEGER,MODIFIED_BY INTEGER,CREATED_DATE DATE null,DOMAIN_ID INTEGER,PROCESSED VARCHAR(75) null,USERGROUP_ID INTEGER,VERSION_NO INTEGER,IS_ACTIVE VARCHAR(75) null,MODIFIED_DATE DATE null)";
    public static final String TABLE_SQL_DROP = "drop table USERGROUP_DOMAIN_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY usergroupDomainMaster.usergroupDomainSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY USERGROUP_DOMAIN_MASTER.USERGROUP_DOMAIN_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.UsergroupDomainMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.UsergroupDomainMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.UsergroupDomainMaster"));
    private static ClassLoader _classLoader = UsergroupDomainMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            UsergroupDomainMaster.class
        };
    private int _createdBy;
    private int _usergroupDomainSid;
    private int _usersSid;
    private int _modifiedBy;
    private Date _createdDate;
    private int _domainId;
    private String _processed;
    private int _usergroupId;
    private int _versionNo;
    private String _isActive;
    private Date _modifiedDate;
    private UsergroupDomainMaster _escapedModel;

    public UsergroupDomainMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _usergroupDomainSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setUsergroupDomainSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _usergroupDomainSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return UsergroupDomainMaster.class;
    }

    @Override
    public String getModelClassName() {
        return UsergroupDomainMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("createdBy", getCreatedBy());
        attributes.put("usergroupDomainSid", getUsergroupDomainSid());
        attributes.put("usersSid", getUsersSid());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("domainId", getDomainId());
        attributes.put("processed", getProcessed());
        attributes.put("usergroupId", getUsergroupId());
        attributes.put("versionNo", getVersionNo());
        attributes.put("isActive", getIsActive());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Integer usergroupDomainSid = (Integer) attributes.get(
                "usergroupDomainSid");

        if (usergroupDomainSid != null) {
            setUsergroupDomainSid(usergroupDomainSid);
        }

        Integer usersSid = (Integer) attributes.get("usersSid");

        if (usersSid != null) {
            setUsersSid(usersSid);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Integer domainId = (Integer) attributes.get("domainId");

        if (domainId != null) {
            setDomainId(domainId);
        }

        String processed = (String) attributes.get("processed");

        if (processed != null) {
            setProcessed(processed);
        }

        Integer usergroupId = (Integer) attributes.get("usergroupId");

        if (usergroupId != null) {
            setUsergroupId(usergroupId);
        }

        Integer versionNo = (Integer) attributes.get("versionNo");

        if (versionNo != null) {
            setVersionNo(versionNo);
        }

        String isActive = (String) attributes.get("isActive");

        if (isActive != null) {
            setIsActive(isActive);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public int getUsergroupDomainSid() {
        return _usergroupDomainSid;
    }

    @Override
    public void setUsergroupDomainSid(int usergroupDomainSid) {
        _usergroupDomainSid = usergroupDomainSid;
    }

    @Override
    public int getUsersSid() {
        return _usersSid;
    }

    @Override
    public void setUsersSid(int usersSid) {
        _usersSid = usersSid;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public int getDomainId() {
        return _domainId;
    }

    @Override
    public void setDomainId(int domainId) {
        _domainId = domainId;
    }

    @Override
    public String getProcessed() {
        if (_processed == null) {
            return StringPool.BLANK;
        } else {
            return _processed;
        }
    }

    @Override
    public void setProcessed(String processed) {
        _processed = processed;
    }

    @Override
    public int getUsergroupId() {
        return _usergroupId;
    }

    @Override
    public void setUsergroupId(int usergroupId) {
        _usergroupId = usergroupId;
    }

    @Override
    public int getVersionNo() {
        return _versionNo;
    }

    @Override
    public void setVersionNo(int versionNo) {
        _versionNo = versionNo;
    }

    @Override
    public String getIsActive() {
        if (_isActive == null) {
            return StringPool.BLANK;
        } else {
            return _isActive;
        }
    }

    @Override
    public void setIsActive(String isActive) {
        _isActive = isActive;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public UsergroupDomainMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (UsergroupDomainMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        UsergroupDomainMasterImpl usergroupDomainMasterImpl = new UsergroupDomainMasterImpl();

        usergroupDomainMasterImpl.setCreatedBy(getCreatedBy());
        usergroupDomainMasterImpl.setUsergroupDomainSid(getUsergroupDomainSid());
        usergroupDomainMasterImpl.setUsersSid(getUsersSid());
        usergroupDomainMasterImpl.setModifiedBy(getModifiedBy());
        usergroupDomainMasterImpl.setCreatedDate(getCreatedDate());
        usergroupDomainMasterImpl.setDomainId(getDomainId());
        usergroupDomainMasterImpl.setProcessed(getProcessed());
        usergroupDomainMasterImpl.setUsergroupId(getUsergroupId());
        usergroupDomainMasterImpl.setVersionNo(getVersionNo());
        usergroupDomainMasterImpl.setIsActive(getIsActive());
        usergroupDomainMasterImpl.setModifiedDate(getModifiedDate());

        usergroupDomainMasterImpl.resetOriginalValues();

        return usergroupDomainMasterImpl;
    }

    @Override
    public int compareTo(UsergroupDomainMaster usergroupDomainMaster) {
        int primaryKey = usergroupDomainMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof UsergroupDomainMaster)) {
            return false;
        }

        UsergroupDomainMaster usergroupDomainMaster = (UsergroupDomainMaster) obj;

        int primaryKey = usergroupDomainMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<UsergroupDomainMaster> toCacheModel() {
        UsergroupDomainMasterCacheModel usergroupDomainMasterCacheModel = new UsergroupDomainMasterCacheModel();

        usergroupDomainMasterCacheModel.createdBy = getCreatedBy();

        usergroupDomainMasterCacheModel.usergroupDomainSid = getUsergroupDomainSid();

        usergroupDomainMasterCacheModel.usersSid = getUsersSid();

        usergroupDomainMasterCacheModel.modifiedBy = getModifiedBy();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            usergroupDomainMasterCacheModel.createdDate = createdDate.getTime();
        } else {
            usergroupDomainMasterCacheModel.createdDate = Long.MIN_VALUE;
        }

        usergroupDomainMasterCacheModel.domainId = getDomainId();

        usergroupDomainMasterCacheModel.processed = getProcessed();

        String processed = usergroupDomainMasterCacheModel.processed;

        if ((processed != null) && (processed.length() == 0)) {
            usergroupDomainMasterCacheModel.processed = null;
        }

        usergroupDomainMasterCacheModel.usergroupId = getUsergroupId();

        usergroupDomainMasterCacheModel.versionNo = getVersionNo();

        usergroupDomainMasterCacheModel.isActive = getIsActive();

        String isActive = usergroupDomainMasterCacheModel.isActive;

        if ((isActive != null) && (isActive.length() == 0)) {
            usergroupDomainMasterCacheModel.isActive = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            usergroupDomainMasterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            usergroupDomainMasterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return usergroupDomainMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(23);

        sb.append("{createdBy=");
        sb.append(getCreatedBy());
        sb.append(", usergroupDomainSid=");
        sb.append(getUsergroupDomainSid());
        sb.append(", usersSid=");
        sb.append(getUsersSid());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", domainId=");
        sb.append(getDomainId());
        sb.append(", processed=");
        sb.append(getProcessed());
        sb.append(", usergroupId=");
        sb.append(getUsergroupId());
        sb.append(", versionNo=");
        sb.append(getVersionNo());
        sb.append(", isActive=");
        sb.append(getIsActive());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(37);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.UsergroupDomainMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>usergroupDomainSid</column-name><column-value><![CDATA[");
        sb.append(getUsergroupDomainSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>usersSid</column-name><column-value><![CDATA[");
        sb.append(getUsersSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>domainId</column-name><column-value><![CDATA[");
        sb.append(getDomainId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>processed</column-name><column-value><![CDATA[");
        sb.append(getProcessed());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>usergroupId</column-name><column-value><![CDATA[");
        sb.append(getUsergroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>versionNo</column-name><column-value><![CDATA[");
        sb.append(getVersionNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isActive</column-name><column-value><![CDATA[");
        sb.append(getIsActive());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
