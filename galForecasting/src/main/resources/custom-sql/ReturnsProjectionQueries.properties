# To change this license header, choose License Headers in Project Properties.
# To change this template file, choose Tools | Templates
# and open the template in the editor.

RETURN_DETAILS_INSERT = INSERT INTO returns_details \
            (projection_master_sid, \
             item_master_sid) \
(SELECT PPH.projection_master_sid, \
        RLD.relationship_level_values \
 FROM   projection_prod_hierarchy PPH, \
        relationship_level_definition RLD \
 WHERE  RLD.relationship_level_sid = PPH.relationship_level_sid \
        AND RLD.level_name IN ( 'Product', 'Item', 'NDC' ) \
        AND PPH.projection_master_sid = @PROJECTION_ID) \

RETURNS_SALES_QUERY = SELECT RLD.HIERARCHY_NO,RLD.RELATIONSHIP_LEVEL_SID,RLD.LEVEL_NAME FROM RELATIONSHIP_LEVEL_DEFINITION RLD \
JOIN PROJECTION_PROD_HIERARCHY PPH ON RLD.RELATIONSHIP_LEVEL_SID = PPH.RELATIONSHIP_LEVEL_SID \
WHERE PPH.PROJECTION_MASTER_SID = @PROJECTION_SID \
 AND RLD.LEVEL_NO = @LEVEL_NO \

RETURN_MAIN_TABLE_INSERT = MERGE RETURNS_PROJ_MASTER AS TARGET \
		USING ( \
		SELECT RETURNS_DETAILS_SID,\
		METHODOLOGY, \
		METHODOLOGY_START_DATE, \
		METHODOLOGY_END_DATE, \
		CALCULATION_PERIODS, \
		LAG, \
        CLOSED_DATE, \
        LOE_DATE, \
        CHECK_RECORD \
		FROM dbo.ST_RETURNS_PROJ_MASTER \
		  WHERE USER_ID=@USER_ID AND SESSION_ID=@SESSION_ID \
		) AS SOURCE \
		ON (TARGET.RETURNS_DETAILS_SID=SOURCE.RETURNS_DETAILS_SID) \
		 WHEN MATCHED \
		  THEN   \
		UPDATE SET \
		TARGET.METHODOLOGY=SOURCE.METHODOLOGY, \
		TARGET.METHODOLOGY_START_DATE=SOURCE.METHODOLOGY_START_DATE \
		,TARGET.METHODOLOGY_END_DATE=SOURCE.METHODOLOGY_END_DATE, \
		TARGET.CALCULATION_PERIODS=SOURCE.CALCULATION_PERIODS ,TARGET.LAG=SOURCE.LAG, \
                TARGET.CLOSED_DATE=SOURCE.CLOSED_DATE, \
		TARGET.LOE_DATE=SOURCE.LOE_DATE, \
		TARGET.CHECK_RECORD=SOURCE.CHECK_RECORD \
		WHEN NOT MATCHED BY TARGET \
		THEN  \
		INSERT VALUES(SOURCE.RETURNS_DETAILS_SID, \
		SOURCE.METHODOLOGY, \
		SOURCE.METHODOLOGY_START_DATE, \
		SOURCE.METHODOLOGY_END_DATE, \
		SOURCE.CALCULATION_PERIODS, \
		SOURCE.LAG, \
                SOURCE.CLOSED_DATE, \
		SOURCE.LOE_DATE, \
		SOURCE.CHECK_RECORD); \
MERGE RETURNS_ACTUALS AS TARGET \
USING ( \
		SELECT RETURNS_DETAILS_SID, \
		PERIOD_SID, \
		ACTUAL_RETURN_PERCENT, \
		ACTUAL_RPU, \
		ACTUAL_RETURN_AMOUNT, \
                ORIG_SALE_UNITS, \
                ORIG_SALE_DOLLARS, \
                CUM_RETURN_UNITS, \
                ASP, \
                EXPECTED_RETURN_RATE \
		FROM dbo.ST_RETURNS_ACTUALS  \
		WHERE USER_ID=@USER_ID AND SESSION_ID=@SESSION_ID \
		) AS SOURCE \
		ON (TARGET.RETURNS_DETAILS_SID=SOURCE.RETURNS_DETAILS_SID AND TARGET.PERIOD_SID=SOURCE.PERIOD_SID) \
		WHEN MATCHED \
		THEN   \
		UPDATE SET \
		TARGET.ACTUAL_RETURN_PERCENT=SOURCE.ACTUAL_RETURN_PERCENT, \
		TARGET.ACTUAL_RPU=SOURCE.ACTUAL_RPU, \
		TARGET.ACTUAL_RETURN_AMOUNT=SOURCE.ACTUAL_RETURN_AMOUNT, \
                TARGET.ORIG_SALE_UNITS = SOURCE.ORIG_SALE_UNITS, \
                TARGET.ORIG_SALE_DOLLARS = SOURCE.ORIG_SALE_DOLLARS, \
                TARGET.CUM_RETURN_UNITS = SOURCE.CUM_RETURN_UNITS, \
                TARGET.ASP = SOURCE.ASP, \
                TARGET.EXPECTED_RETURN_RATE = SOURCE.EXPECTED_RETURN_RATE \
		WHEN NOT MATCHED BY TARGET \
		THEN  INSERT VALUES(SOURCE.RETURNS_DETAILS_SID, \
		SOURCE.PERIOD_SID, \
		SOURCE.ACTUAL_RETURN_PERCENT, \
		SOURCE.ACTUAL_RPU, \
		SOURCE.ACTUAL_RETURN_AMOUNT, \
                SOURCE.ORIG_SALE_UNITS, \
                SOURCE.ORIG_SALE_DOLLARS, \
                SOURCE.CUM_RETURN_UNITS, \
                SOURCE.ASP, \
                SOURCE.expected_return_rate);  \
     MERGE RETURNS_PROJ_DETAILS AS TARGET \
		USING ( \
		SELECT RETURNS_DETAILS_SID, \
		PERIOD_SID, \
		GROWTH_RATE, \
		PROJECTED_RETURN_PERCENT, \
		PROJECTED_RPU,  \
		PROJECTED_RETURN_AMOUNT,  \
		PROJECTED_RETURN_UNITS, \
                REFRESHED_NAME, \
                ACTIVE_EXFACTORY_SALES_AMOUNT, \
                ACTIVE_EXFACTORY_SALES_UNITS  \
		FROM dbo.ST_RETURNS_PROJ_DETAILS  \
		WHERE USER_ID=@USER_ID AND SESSION_ID=@SESSION_ID \
		) AS SOURCE \
		ON (TARGET.RETURNS_DETAILS_SID=SOURCE.RETURNS_DETAILS_SID AND TARGET.PERIOD_SID=SOURCE.PERIOD_SID) \
		WHEN MATCHED \
		THEN  UPDATE SET    TARGET.PERIOD_SID=SOURCE.PERIOD_SID, \
		TARGET.GROWTH_RATE=SOURCE.GROWTH_RATE, \
		TARGET.PROJECTED_RETURN_PERCENT=SOURCE.PROJECTED_RETURN_PERCENT, \
		TARGET.PROJECTED_RPU=SOURCE.PROJECTED_RPU, \
		TARGET.PROJECTED_RETURN_AMOUNT=SOURCE.PROJECTED_RETURN_AMOUNT, \
		TARGET.PROJECTED_RETURN_UNITS=SOURCE.PROJECTED_RETURN_UNITS, \
                TARGET.REFRESHED_NAME = SOURCE.REFRESHED_NAME, \
                TARGET.ACTIVE_EXFACTORY_SALES_AMOUNT = SOURCE.ACTIVE_EXFACTORY_SALES_AMOUNT, \
                TARGET.ACTIVE_EXFACTORY_SALES_UNITS = SOURCE.ACTIVE_EXFACTORY_SALES_UNITS  \
		WHEN NOT MATCHED BY TARGET \
		THEN  INSERT VALUES(SOURCE.RETURNS_DETAILS_SID, \
		SOURCE.PERIOD_SID, \
		SOURCE.GROWTH_RATE,\
		SOURCE.PROJECTED_RETURN_PERCENT, \
		SOURCE.PROJECTED_RPU, \
		SOURCE.PROJECTED_RETURN_AMOUNT, \
		SOURCE.PROJECTED_RETURN_UNITS, \
                SOURCE.ACTIVE_EXFACTORY_SALES_AMOUNT, \
                SOURCE.ACTIVE_EXFACTORY_SALES_UNITS, \
                SOURCE.REFRESHED_NAME); \



DELETE_RETURN_PROJECTION =Delete from ST_RETURNS_ACTUALS where RETURNS_DETAILS_SID IN(select RETURNS_DETAILS_SID from RETURNS_DETAILS where PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID ); \
Delete from ST_RETURNS_PROJ_MASTER where RETURNS_DETAILS_SID IN(select RETURNS_DETAILS_SID from RETURNS_DETAILS where PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID ); \
Delete from ST_RETURNS_PROJ_DETAILS where RETURNS_DETAILS_SID IN(select RETURNS_DETAILS_SID from RETURNS_DETAILS where PROJECTION_MASTER_SID= @PROJECTION_MASTER_SID); \
Delete from RETURNS_ACTUALS where RETURNS_DETAILS_SID IN(select RETURNS_DETAILS_SID from RETURNS_DETAILS where PROJECTION_MASTER_SID= @PROJECTION_MASTER_SID); \
Delete from RETURNS_PROJ_MASTER where RETURNS_DETAILS_SID IN(select RETURNS_DETAILS_SID from RETURNS_DETAILS where PROJECTION_MASTER_SID= @PROJECTION_MASTER_SID); \
Delete from RETURNS_PROJ_DETAILS where RETURNS_DETAILS_SID IN(select RETURNS_DETAILS_SID from RETURNS_DETAILS where PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID ); \
Delete from RETURNS_DETAILS where PROJECTION_MASTER_SID= @PROJECTION_MASTER_SID; \
Delete from PROJECTION_PROD_HIERARCHY where PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID ; \
Delete from RETURNS_MAP where PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID ; \
Delete from RETURNS_PROJECTION_SELECTION where PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID; \ Delete from PROJECTION_MASTER where PROJECTION_MASTER_SID= @PROJECTION_MASTER_SID; \

RETURN_DETAILS_RESULTS = SELECT HIERARCHY_NO,RETURNS_DETAILS_SID,LEVEL_NO FROM RETURNS_MAP WHERE PROJECTION_MASTER_SID = @PROJECTION_ID ORDER BY HIERARCHY_NO desc; 

RETURNS_MAP_INSERT = DELETE FROM RETURNS_MAP WHERE PROJECTION_MASTER_SID = @PROJECTION_SID ; \
  DECLARE @MAX INT=0  \
DECLARE @PROJECTION INT=@PROJECTION_SID \
DECLARE @RELATIONSHIP_LEVEL_DEFINITION AS TABLE \
  ( \
     HIERARCHY_NO              VARCHAR(50), \
     RELATIONSHIP_LEVEL_VALUES VARCHAR(50), \
     PARENT_NODE               VARCHAR(100), \
     RETRUNS_DETAILS_SID       INT, \
     LEVEL_NO                  INT \
  ) \
INSERT INTO @RELATIONSHIP_LEVEL_DEFINITION \
            (HIERARCHY_NO, \
             RELATIONSHIP_LEVEL_VALUES, \
             PARENT_NODE, \
             LEVEL_NO, \
             RETRUNS_DETAILS_SID) \
SELECT    DISTINCT HIERARCHY_NO, \
                   RELATIONSHIP_LEVEL_VALUES, \
                   PARENT_NODE, \
                   LEVEL_NO, \
                   COALESCE(RD.RETURNS_DETAILS_SID, RELATIONSHIP_LEVEL_VALUES) AS RETRUNS_DETAILS_SID \
FROM      RELATIONSHIP_LEVEL_DEFINITION RLD \
JOIN      PROJECTION_PROD_HIERARCHY PPH ON RLD.RELATIONSHIP_LEVEL_SID = PPH.RELATIONSHIP_LEVEL_SID \
LEFT JOIN RETURNS_DETAILS RD ON RD.PROJECTION_MASTER_SID = PPH.PROJECTION_MASTER_SID \
                            AND RLD.RELATIONSHIP_LEVEL_VALUES = RD.ITEM_MASTER_SID \
WHERE     PPH.PROJECTION_MASTER_SID = @PROJECTION \
SET @MAX=(SELECT Max(LEVEL_NO) \
          FROM   @RELATIONSHIP_LEVEL_DEFINITION) \
DECLARE @RELATIONSHIP_LEVEL_VALUES AS TABLE \
  (  \
     HIERARCHY_NO                    VARCHAR(50), \
     RELATIONSHIP_LEVEL_VALUES_BASE  VARCHAR(50), \
     RELATIONSHIP_LEVEL_VALUES_CHILD VARCHAR(100), \
     LEVEL_NO                        INT \
  ) \
INSERT INTO @RELATIONSHIP_LEVEL_VALUES \
            (HIERARCHY_NO, \
             RELATIONSHIP_LEVEL_VALUES_BASE, \
             RELATIONSHIP_LEVEL_VALUES_CHILD, \
             LEVEL_NO) \
SELECT    A.HIERARCHY_NO, \
          A.RETRUNS_DETAILS_SID AS COL1, \
          B.RETRUNS_DETAILS_SID AS COL2, \
          B.LEVEL_NO \
FROM      @RELATIONSHIP_LEVEL_DEFINITION A \
LEFT JOIN @RELATIONSHIP_LEVEL_DEFINITION B ON A.RETRUNS_DETAILS_SID = CONVERT(INT, Substring(B.PARENT_NODE, Charindex('~', B.PARENT_NODE) + 1, Len(B.PARENT_NODE))) \
DECLARE @TEMP_LEVEL AS TABLE \
  ( \
     PROJECTION_MASTER_SID VARCHAR(50), \
     HIERARCHY_NO          VARCHAR(50), \
     RELATION_VALUES       VARCHAR(100), \
     LEVEL_NO              INT \
  ) \
INSERT INTO @TEMP_LEVEL \
            (PROJECTION_MASTER_SID, \
             HIERARCHY_NO, \
             RELATION_VALUES, \
             LEVEL_NO) \
SELECT @PROJECTION AS PROJECTION, \
       C.HIERARCHY_NO, \
       RELATION_VALUES= Stuff((SELECT    ',' \
                                         + CONVERT(VARCHAR(100), COALESCE(B.RELATIONSHIP_LEVEL_VALUES_CHILD, COALESCE(A.RELATIONSHIP_LEVEL_VALUES_CHILD, A.RELATIONSHIP_LEVEL_VALUES_BASE))) \
                               FROM      @RELATIONSHIP_LEVEL_VALUES A \
                               LEFT JOIN @RELATIONSHIP_LEVEL_VALUES B ON A.RELATIONSHIP_LEVEL_VALUES_CHILD = B.RELATIONSHIP_LEVEL_VALUES_BASE \
                               WHERE     C.HIERARCHY_NO = A.HIERARCHY_NO \
                               ORDER     BY A.HIERARCHY_NO \
                               FOR XML PATH('')), 1, 1, ''), \
       LEVEL_NO \
FROM   @RELATIONSHIP_LEVEL_DEFINITION C \
INSERT INTO RETURNS_MAP \
            (PROJECTION_MASTER_SID, \
             HIERARCHY_NO, \
             RETURNS_DETAILS_SID, \
             LEVEL_NO) \
SELECT PROJECTION_MASTER_SID, \
       HIERARCHY_NO, \
       RETURN_DETAILS_SID= ( CASE \
                               WHEN LEVEL_NO = 1 \
                                    AND @MAX = 4 THEN (SELECT DISTINCT Stuff((SELECT  ',' \
                                                                            + Cast(RELATION_VALUES AS VARCHAR(100)) \
                                                                     FROM   @TEMP_LEVEL \
                                                                     WHERE  LEVEL_NO = t.LEVEL_NO \
                                                                     FOR XML PATH(''), TYPE) .value('.', 'NVARCHAR(MAX)'), 1, 1, '') List_Output \
                                                       FROM   @TEMP_LEVEL t \
                                                       WHERE  LEVEL_NO = 2) \
                               ELSE RELATION_VALUES \
                             END ), \
       LEVEL_NO \
FROM   @TEMP_LEVEL  \
ORDER BY LEVEL_NO \
 


RETURNS_SALES_QUERY_RESULTS = SELECT @FREQUENCY@ , P.YEAR, \
       RT_M.HIERARCHY_NO,  \
       RT_M.LEVEL_NO, \
       Max(R_MASTER.LAG)  AS LAG, \
       Max(R_MASTER.CLOSED_DATE) AS CLOSED_DATE, \
       Max(R_MASTER.LOE_DATE) AS LOE_DATE , \
       COALESCE(Sum(A.CUM_RETURN_UNITS) / NULLIF(Sum(A.ORIG_SALE_UNITS), 0), 0) * 100   AS ACTUAL_RETURN_PERCENT, \
       COALESCE(( COALESCE(Sum(A.CUM_RETURN_UNITS) / NULLIF(Sum(A.ORIG_SALE_UNITS), 0), 0) * Sum(A.ORIG_SALE_DOLLARS) ) / NULLIF(Sum(A.ORIG_SALE_UNITS), 0), 0)  AS ACTUAL_RPU, \
       Sum(A.ACTUAL_RETURN_AMOUNT)  AS ACTUAL_RETURN_AMOUNT, \
       COALESCE(Sum(A.PROJECTED_RETURN_UNITS) / NULLIF(Sum(A.ACTIVE_EXFACTORY_SALES_UNITS), 0), 0) * 100 AS PROJECTED_RETURN_PERCENT, \
       COALESCE(( ( COALESCE(Sum(A.PROJECTED_RETURN_UNITS) / NULLIF(Sum(A.ACTIVE_EXFACTORY_SALES_UNITS), 0), 0) ) * Sum(A.ACTIVE_EXFACTORY_SALES_AMOUNT) ) / NULLIF(Sum(A.ACTIVE_EXFACTORY_SALES_UNITS), 0), 0) AS PROJECTED_RPU, \
       Sum(A.PROJECTED_RETURN_AMOUNT) AS PROJECTED_RETURN_AMOUNT, \
       Avg(A.GROWTH_RATE) AS GROWTH_RATE, \
       Min(CASE( R_MASTER.CHECK_RECORD ) \
             WHEN 1 THEN 1 \
             ELSE 0 \
          END) CHECK_RECORD, \
       SUM(CASE( R_MASTER.CHECK_RECORD ) \
             WHEN 1 THEN 0 \
             ELSE 1 \
          END) / @FREQUENCY_DIVISION UNCHECK_RECORD \
FROM   ST_RETURNS_PROJ_MASTER R_MASTER \
JOIN   (SELECT          COALESCE(R_ACTUALS.RETURNS_DETAILS_SID, R_PROJ.RETURNS_DETAILS_SID)AS RETURNS_DETAILS_SID, \
                        COALESCE(R_ACTUALS.PERIOD_SID, R_PROJ.PERIOD_SID) AS PERIOD_SID, \
                        R_ACTUALS.ACTUAL_RETURN_PERCENT, \
                        R_ACTUALS.ACTUAL_RPU, \
                        R_ACTUALS.ACTUAL_RETURN_AMOUNT, \
                        R_ACTUALS.CUM_RETURN_UNITS, \
                        R_ACTUALS.ASP, \
                        R_ACTUALS.ORIG_SALE_DOLLARS, \
                        R_ACTUALS.ORIG_SALE_UNITS, \
                        R_PROJ.PROJECTED_RETURN_PERCENT, \
                        R_PROJ.PROJECTED_RPU, \
                        R_PROJ.PROJECTED_RETURN_AMOUNT, \
                        R_PROJ.PROJECTED_RETURN_UNITS, \
                        R_PROJ.ACTIVE_EXFACTORY_SALES_AMOUNT, \
                        R_PROJ.ACTIVE_EXFACTORY_SALES_UNITS, \
                        R_PROJ.GROWTH_RATE \
        FROM            (SELECT RETURNS_DETAILS_SID, \
                                PERIOD_SID, \
                                ACTUAL_RETURN_PERCENT, \
                                ACTUAL_RPU, \
                                ACTUAL_RETURN_AMOUNT, \
                                CUM_RETURN_UNITS, \
                                ASP, \
                                ORIG_SALE_DOLLARS, \
                                ORIG_SALE_UNITS \
                         FROM   ST_RETURNS_ACTUALS NAP \
                         WHERE  NAP.RETURNS_DETAILS_SID IN ( @RD_SID ) \
                                AND NAP.SESSION_ID = @SESSION_ID \
                                AND NAP.[USER_ID] = @USER_ID) R_ACTUALS \
        FULL OUTER JOIN (SELECT RETURNS_DETAILS_SID, \
                                PERIOD_SID, \
                                PROJECTED_RETURN_PERCENT, \
                                PROJECTED_RPU, \
                                PROJECTED_RETURN_AMOUNT, \
                                PROJECTED_RETURN_UNITS, \
                                ACTIVE_EXFACTORY_SALES_AMOUNT, \
                                ACTIVE_EXFACTORY_SALES_UNITS, \
                                GROWTH_RATE \
                         FROM   ST_RETURNS_PROJ_DETAILS NPP \
                         WHERE  RETURNS_DETAILS_SID IN ( @RD_SID ) \
                                AND NPP.SESSION_ID = @SESSION_ID \
                                AND NPP.[USER_ID] = @USER_ID) R_PROJ ON R_ACTUALS.RETURNS_DETAILS_SID = R_PROJ.RETURNS_DETAILS_SID \
                                                                    AND R_ACTUALS.PERIOD_SID = R_PROJ.PERIOD_SID)A ON A.RETURNS_DETAILS_SID = R_MASTER.RETURNS_DETAILS_SID \
                                                                    AND R_MASTER.USER_ID=@USER_ID  AND R_MASTER.SESSION_ID=@SESSION_ID \
JOIN   PERIOD P ON P.PERIOD_SID = A.PERIOD_SID  \
JOIN   (SELECT DISTINCT A.PROJECTION_MASTER_SID, \
                    A.HIERARCHY_NO, \
                    A.LEVEL_NO, \
                    B.TOKEN \
        FROM        RETURNS_MAP A \
        CROSS APPLY (SELECT Token \
                     FROM   UDF_SPLITSTRING(A.RETURNS_DETAILS_SID, ','))B \
        WHERE       LEVEL_NO = @LEVEL_NO and PROJECTION_MASTER_SID = @PROJECTION_SID )RT_M ON RT_M.token = A.RETURNS_DETAILS_SID \
        AND R_MASTER.USER_ID=@USER_ID AND R_MASTER.SESSION_ID=@SESSION_ID GROUP BY RT_M.HIERARCHY_NO,  \
          RT_M.LEVEL_NO,P.YEAR 

RETURNS_MANNUAL_ENTRY_QUERY= UPDATE ST_RETURNS_PROJ_DETAILS SET @USER_ENTERED_PROPERTY_VALUE=@USER_ENTERED_VALUE,REFRESHED_NAME='@USER_ENTERED_PROPERTY_VALUE'   where RETURNS_DETAILS_SID \  in (   \ @RETURNS_DETAILS_SID ) AND PERIOD_SID in(SELECT PERIOD_SID FROM PERIOD where YEAR ='@YEAR' @FREQUENCY )  AND  USER_ID = '@USER_ID'  AND SESSION_ID ='@SESSION_ID'; 


RETURNS_EDIT_TEMP_INSERT_QUERY= INSERT INTO ST_RETURNS_PROJ_MASTER( \
RETURNS_DETAILS_SID \
,METHODOLOGY,\
METHODOLOGY_START_DATE,\
METHODOLOGY_END_DATE, \
CALCULATION_PERIODS, \
LAG, \
CLOSED_DATE, \
LOE_DATE, \
CHECK_RECORD, \
USER_ID, \
SESSION_ID \
			) \
		SELECT  A.RETURNS_DETAILS_SID, \
			A.METHODOLOGY, \
			A.METHODOLOGY_START_DATE, \
			A.METHODOLOGY_END_DATE, \
			A.CALCULATION_PERIODS, \
			A.LAG,  \
                        A.CLOSED_DATE, \
                        A.LOE_DATE, \
                        A.CHECK_RECORD, \
			@USER_ID, \
			@SESSION_ID \
			FROM dbo.RETURNS_PROJ_MASTER A, \
			dbo.RETURNS_DETAILS B \
		WHERE A.RETURNS_DETAILS_SID=B.RETURNS_DETAILS_SID \
			AND B.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID; \
  INSERT INTO ST_RETURNS_ACTUALS( \
			RETURNS_DETAILS_SID,  \
			PERIOD_SID,  \
			ACTUAL_RETURN_PERCENT,  \
			ACTUAL_RPU,  \
			ACTUAL_RETURN_AMOUNT, \
                        ORIG_SALE_UNITS, \
                        ORIG_SALE_DOLLARS, \
                        CUM_RETURN_UNITS, \
                        ASP, \
                        EXPECTED_RETURN_RATE, \
			USER_ID,  \
			SESSION_ID  \
			) \  SELECT  A.RETURNS_DETAILS_SID,   \
			A.PERIOD_SID,    \
			A.ACTUAL_RETURN_PERCENT,   \
			A.ACTUAL_RPU,   \
			A.ACTUAL_RETURN_AMOUNT,  \
                        A.ORIG_SALE_UNITS,  \
                        A.ORIG_SALE_DOLLARS,  \
                        A.CUM_RETURN_UNITS,  \
                        A.ASP,  \
                        A.EXPECTED_RETURN_RATE,   \
			@USER_ID,   \
			@SESSION_ID \
		FROM dbo.RETURNS_ACTUALS A, \
			dbo.RETURNS_DETAILS B \
		WHERE A.RETURNS_DETAILS_SID=B.RETURNS_DETAILS_SID \
			AND B.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID; \
  INSERT INTO ST_RETURNS_PROJ_DETAILS( \
			RETURNS_DETAILS_SID,  \
			PERIOD_SID,  \
			GROWTH_RATE,  \
			PROJECTED_RETURN_PERCENT,  \
			PROJECTED_RPU,  \
                        PROJECTED_RETURN_AMOUNT,  \
                        PROJECTED_RETURN_UNITS,  \
                        REFRESHED_NAME, \
                        ACTIVE_EXFACTORY_SALES_AMOUNT, \
                        ACTIVE_EXFACTORY_SALES_UNITS, \
			USER_ID,  \
			SESSION_ID \
			) \
		SELECT   A.RETURNS_DETAILS_SID,  \
			A.PERIOD_SID,  \
			A.GROWTH_RATE, \
			A.PROJECTED_RETURN_PERCENT,  \
			A.PROJECTED_RPU,  \
                        A.PROJECTED_RETURN_AMOUNT,  \
                        A.PROJECTED_RETURN_UNITS,  \
                        A.REFRESHED_NAME, \
                        A.ACTIVE_EXFACTORY_SALES_AMOUNT, \
                        A.ACTIVE_EXFACTORY_SALES_UNITS, \
			@USER_ID,  \
			@SESSION_ID \
		FROM dbo.RETURNS_PROJ_DETAILS A, \
			dbo.RETURNS_DETAILS B \
		WHERE A.RETURNS_DETAILS_SID=B.RETURNS_DETAILS_SID \
			AND B.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID; 

SALES_AMOUNT_QUERY = SELECT returns_details_sid,Sum(active_exfactory_sales_amount),SUM(ACTIVE_EXFACTORY_SALES_UNITS) AS UNITS \
FROM   st_returns_proj_details  \
WHERE  returns_details_sid IN ( @RETURN_SID )  \
       AND period_sid IN(SELECT period_sid  \
                         FROM   period  \
                         WHERE  year = '@YEAR'  \
                                @FREQUENCY)  \
       AND user_id = @USER_ID \
       AND session_id = @SESSION_ID  \
GROUP  BY returns_details_sid;


RETURNS_DELETE_TEMP= DELETE FROM ST_RETURNS_ACTUALS WHERE USER_ID=@USER_ID AND SESSION_ID=@SESSION_ID;\
    DELETE FROM ST_RETURNS_PROJ_DETAILS WHERE USER_ID=@USER_ID AND SESSION_ID=@SESSION_ID;\
    DELETE FROM ST_RETURNS_PROJ_MASTER WHERE USER_ID=@USER_ID AND SESSION_ID=@SESSION_ID;
#this is for nm discount table delete
DISC_DELETE_TEMP= DELETE FROM ST_NM_ACTUAL_DISCOUNT WHERE USER_ID=@USER_ID AND SESSION_ID=@SESSION_ID;\
    DELETE FROM ST_NM_DISCOUNT_PROJECTION WHERE USER_ID=@USER_ID AND SESSION_ID=@SESSION_ID;\
    DELETE FROM ST_NM_DISCOUNT_PROJ_MASTER WHERE USER_ID=@USER_ID AND SESSION_ID=@SESSION_ID;

DISC_EDIT_TEMP_INSERT_QUERY= INSERT INTO ST_NM_DISCOUNT_PROJ_MASTER(PROJECTION_DETAILS_SID,\
			RS_MODEL_SID,\
			METHODOLOGY,\
			PRICE_GROUP_TYPE,\
			NET_FLAG,\
			USER_GROUP,\
			CHECK_RECORD,\
			BASELINE_PERIODS,\
			SELECTED_PERIODS,\
			USER_ID,\
			SESSION_ID,\
			LAST_MODIFIED_DATE,\
                        CALCULATION_PERIODS,\
                        CALCULATION_BASED,\
                        FORECAST_START_PERIOD_SID,\
                        FORECAST_END_PERIOD_SID) \
                        SELECT  A.PROJECTION_DETAILS_SID,\
			A.RS_MODEL_SID,\
			A.METHODOLOGY,\
			A.PRICE_GROUP_TYPE,\
			A.NET_FLAG,\
			A.USER_GROUP,\
			A.CHECK_RECORD,\
			A.BASELINE_PERIODS,\
			A.SELECTED_PERIODS,\
			@USER_ID, \
			@SESSION_ID, \
                        GetDate() as LAST_MODIFIED_DATE,\
                        A.CALCULATION_PERIODS,\
                        A.CALCULATION_BASED,\
                        A.FORECAST_START_PERIOD_SID,\
                        A.FORECAST_END_PERIOD_SID \
                        FROM dbo.NM_DISCOUNT_PROJ_MASTER A, \
			dbo.PROJECTION_DETAILS B \
		WHERE A.PROJECTION_DETAILS_SID=B.PROJECTION_DETAILS_SID \
			AND B.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID; \
  INSERT INTO ST_NM_ACTUAL_DISCOUNT(\
                        PROJECTION_DETAILS_SID,\
			RS_MODEL_SID,\
                        PERIOD_SID,\
                        ACTUAL_SALES,\
                        ACTUAL_RATE,\
                        ACTUAL_PROJECTION_SALES,\
                        ACTUAL_PROJECTION_RATE,\
                        ACTUAL_RPU,\
                        ACTUAL_PROJECTION_RPU,\
			USER_ID,\
			SESSION_ID )\
			   SELECT \
                       A.PROJECTION_DETAILS_SID,\
                       A.RS_MODEL_SID,\
                       A.PERIOD_SID,\
                       A.ACTUAL_SALES,\
                       A.ACTUAL_RATE,\
                       A.ACTUAL_PROJECTION_SALES,\
                       A.ACTUAL_PROJECTION_RATE,\
                       A.ACTUAL_RPU,\
                       A.ACTUAL_PROJECTION_RPU,\
			@USER_ID,\
			@SESSION_ID \
		FROM dbo.NM_ACTUAL_DISCOUNT A,\
			dbo.PROJECTION_DETAILS B \
		WHERE A.PROJECTION_DETAILS_SID=B.PROJECTION_DETAILS_SID \
			AND B.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID;\
    INSERT INTO ST_NM_DISCOUNT_PROJECTION(\
			PROJECTION_DETAILS_SID,\
                        RS_MODEL_SID,\
                        PERIOD_SID,\
                        PROJECTION_SALES,\
                        PROJECTION_RATE,\
                        ADJUSTMENT_TYPE,\
                        ADJUSTMENT_BASIS,\
                        ADJUSTMENT_VALUE, \
                        ADJUSTMENT_METHODOLOGY,\
                        PROJECTION_RPU,\
                        GROWTH,\
                        REFRESHED_NAME,\
                        REFRESHED_VALUE,\
                        DISCOUNT_RATE,\
                        USER_ID,\
                        SESSION_ID)\
                        SELECT   \
                        A.PROJECTION_DETAILS_SID, \
                        A.RS_MODEL_SID, \
                        A.PERIOD_SID, \
                        A.PROJECTION_SALES, \
                        A.PROJECTION_RATE, \
                        A.ADJUSTMENT_TYPE, \
                        A.ADJUSTMENT_BASIS, \
                        A.ADJUSTMENT_VALUE,\
                        A.ADJUSTMENT_METHODOLOGY,\
                        A.PROJECTION_RPU,\
                        A.GROWTH,\
                        A.REFRESHED_NAME,\
                        A.REFRESHED_VALUE,\
                        A.DISCOUNT_RATE, \
                            @USER_ID, \
			@SESSION_ID  \
		FROM dbo.NM_DISCOUNT_PROJECTION A, \
			dbo.PROJECTION_DETAILS B  \
		WHERE A.PROJECTION_DETAILS_SID=B.PROJECTION_DETAILS_SID \
			AND B.PROJECTION_MASTER_SID=@PROJECTION_MASTER_SID;\ 

MASS_UPDATE_QUERY1 = UPDATE sp SET    @FIELD_NAME=@FIELD_VALUE \
FROM   st_returns_proj_details SP \
JOIN   period P \
ON     p.period_sid = sp.period_sid \
WHERE  sp.user_id =@USER_ID \
AND    sp.session_id =@SESSION_ID \
AND    sp.returns_details_sid IN (@RETURNS_DETAILS_SID) \
AND    p.period_sid           IN \
       (@PERIOD_QUERY);


MASS_UPDATE_PERIOD_QUERY = SELECT period_sid \
              FROM   "PERIOD" \
              WHERE  "YEAR" >=@START_YEAR \
              AND    "YEAR" <=@END_YEAR \
              AND    p.period_sid NOT IN \
                     ( \
                            SELECT period_sid \
                            FROM   "PERIOD" \
                            WHERE  "YEAR" =@START_YEAR @START_FREQUENCY ) \
              AND    p.period_sid NOT IN \
                     ( \
                            SELECT period_sid \
                            FROM   "PERIOD" \
                            WHERE  "YEAR" = @END_YEAR @END_FREQUENCY )

SALES_AMOUNT_QUERY_MASS_UPDATE = SELECT @FREQUENCY_SELECTION p.year, sp.returns_details_sid,  \
       ISNULL(Sum(active_exfactory_sales_amount),0) AS sales ,ISNULL(SUM(ACTIVE_EXFACTORY_SALES_UNITS),0)  AS units \
FROM   st_returns_proj_details SP  \
JOIN   period P \
ON     p.period_sid = sp.period_sid  \
WHERE  sp.user_id =@USER_ID  \
AND    sp.session_id =@SESSION_ID  \
AND    returns_details_sid IN ( @RETURN_SID )  \
AND    p.period_sid IN (@PERIOD_QUERY) GROUP BY P.YEAR,@FREQUENCY SP.RETURNS_DETAILS_SID 

