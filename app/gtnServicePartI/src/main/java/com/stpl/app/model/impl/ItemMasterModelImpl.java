package com.stpl.app.model.impl;

import com.stpl.app.model.ItemMaster;
import com.stpl.app.model.ItemMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ItemMaster service. Represents a row in the &quot;ITEM_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.ItemMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemMasterImpl}.
 * </p>
 *
 * @author
 * @see ItemMasterImpl
 * @see com.stpl.app.model.ItemMaster
 * @see com.stpl.app.model.ItemMasterModel
 * @generated
 */
public class ItemMasterModelImpl extends BaseModelImpl<ItemMaster>
    implements ItemMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a item master model instance should use the {@link com.stpl.app.model.ItemMaster} interface instead.
     */
    public static final String TABLE_NAME = "ITEM_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "ITEM_STATUS", Types.INTEGER },
            { "ITEM_DESC", Types.VARCHAR },
            { "AUTHORIZED_GENERIC_START_DATE", Types.TIMESTAMP },
            { "ACQUIRED_AMP", Types.DOUBLE },
            { "NEW_FORMULATION_START_DATE", Types.TIMESTAMP },
            { "MARKET_TERMINATION_DATE", Types.TIMESTAMP },
            { "OBRA_BAMP", Types.DOUBLE },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "THERAPEUTIC_CLASS", Types.INTEGER },
            { "ORGANIZATION_KEY", Types.INTEGER },
            { "ACQUIRED_BAMP", Types.DOUBLE },
            { "PEDIATRIC_EXCLUSIVE_END_DATE", Types.TIMESTAMP },
            { "SOURCE", Types.VARCHAR },
            { "NEW_FORMULATION", Types.VARCHAR },
            { "DIVESTITURE_DATE", Types.TIMESTAMP },
            { "PRIMARY_UOM", Types.INTEGER },
            { "NEW_FORMULATION_END_DATE", Types.TIMESTAMP },
            { "MODIFIED_BY", Types.INTEGER },
            { "INBOUND_STATUS", Types.VARCHAR },
            { "PACKAGE_SIZE_CODE", Types.VARCHAR },
            { "SECONDARY_UOM", Types.INTEGER },
            { "DISCONTINUATION_DATE", Types.TIMESTAMP },
            { "PACKAGE_SIZE_INTRO_DATE", Types.TIMESTAMP },
            { "MANUFACTURER_ID", Types.VARCHAR },
            { "ITEM_END_DATE", Types.TIMESTAMP },
            { "ITEM_FAMILY_ID", Types.VARCHAR },
            { "STRENGTH", Types.INTEGER },
            { "ITEM_CATEGORY", Types.INTEGER },
            { "UPPS", Types.DOUBLE },
            { "SHELF_LIFE_TYPE", Types.INTEGER },
            { "PEDIATRIC_EXCLUSIVE_INDICATOR", Types.VARCHAR },
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "ITEM_TYPE_INDICATION", Types.VARCHAR },
            { "ACQUISITION_DATE", Types.TIMESTAMP },
            { "CLOTTING_FACTOR_INDICATOR", Types.VARCHAR },
            { "FORM", Types.INTEGER },
            { "ITEM_NAME", Types.VARCHAR },
            { "SHELF_LIFE", Types.VARCHAR },
            { "PEDIATRIC_EXCLUSIVE_START_DATE", Types.TIMESTAMP },
            { "FIRST_SALE_DATE", Types.TIMESTAMP },
            { "ITEM_MASTER_SID", Types.INTEGER },
            { "ITEM_TYPE", Types.INTEGER },
            { "ITEM_ID", Types.VARCHAR },
            { "BRAND_MASTER_SID", Types.INTEGER },
            { "BASELINE_AMP", Types.DOUBLE },
            { "DUAL_PRICING_INDICATOR", Types.VARCHAR },
            { "DOSES_PER_UNIT", Types.VARCHAR },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "CREATED_BY", Types.INTEGER },
            { "AUTHORIZED_GENERIC", Types.VARCHAR },
            { "ITEM_START_DATE", Types.TIMESTAMP },
            { "NDC9", Types.VARCHAR },
            { "AUTHORIZED_GENERIC_END_DATE", Types.TIMESTAMP },
            { "ITEM_NO", Types.VARCHAR },
            { "PACKAGE_SIZE", Types.VARCHAR },
            { "NDC8", Types.VARCHAR },
            { "BASE_CPI", Types.DOUBLE },
            { "LABELER_CODE", Types.VARCHAR },
            { "ITEM_CLASS", Types.INTEGER },
            { "CLOTTING_FACTOR_END_DATE", Types.TIMESTAMP },
            { "DRA", Types.DOUBLE },
            { "BASE_CPI_PERIOD", Types.TIMESTAMP },
            { "NEW_FORMULATION_INDICATOR", Types.VARCHAR },
            { "LAST_LOT_EXPIRATION_DATE", Types.TIMESTAMP },
            { "BATCH_ID", Types.VARCHAR },
            { "ITEM_CODE", Types.VARCHAR },
            { "CLOTTING_FACTOR_START_DATE", Types.TIMESTAMP },
            { "NON_FEDERAL_EXPIRATION_DATE", Types.TIMESTAMP },
            { "INTERNAL_NOTES", Types.VARCHAR },
            { "BASE_CPI_PRECISION", Types.INTEGER },
            { "BASELINE_AMP_PRECISION", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table ITEM_MASTER (ITEM_STATUS INTEGER,ITEM_DESC VARCHAR(75) null,AUTHORIZED_GENERIC_START_DATE DATE null,ACQUIRED_AMP DOUBLE,NEW_FORMULATION_START_DATE DATE null,MARKET_TERMINATION_DATE DATE null,OBRA_BAMP DOUBLE,MODIFIED_DATE DATE null,THERAPEUTIC_CLASS INTEGER,ORGANIZATION_KEY INTEGER,ACQUIRED_BAMP DOUBLE,PEDIATRIC_EXCLUSIVE_END_DATE DATE null,SOURCE VARCHAR(75) null,NEW_FORMULATION VARCHAR(75) null,DIVESTITURE_DATE DATE null,PRIMARY_UOM INTEGER,NEW_FORMULATION_END_DATE DATE null,MODIFIED_BY INTEGER,INBOUND_STATUS VARCHAR(75) null,PACKAGE_SIZE_CODE VARCHAR(75) null,SECONDARY_UOM INTEGER,DISCONTINUATION_DATE DATE null,PACKAGE_SIZE_INTRO_DATE DATE null,MANUFACTURER_ID VARCHAR(75) null,ITEM_END_DATE DATE null,ITEM_FAMILY_ID VARCHAR(75) null,STRENGTH INTEGER,ITEM_CATEGORY INTEGER,UPPS DOUBLE,SHELF_LIFE_TYPE INTEGER,PEDIATRIC_EXCLUSIVE_INDICATOR VARCHAR(75) null,RECORD_LOCK_STATUS BOOLEAN,ITEM_TYPE_INDICATION VARCHAR(75) null,ACQUISITION_DATE DATE null,CLOTTING_FACTOR_INDICATOR VARCHAR(75) null,FORM INTEGER,ITEM_NAME VARCHAR(75) null,SHELF_LIFE VARCHAR(75) null,PEDIATRIC_EXCLUSIVE_START_DATE DATE null,FIRST_SALE_DATE DATE null,ITEM_MASTER_SID INTEGER not null primary key IDENTITY,ITEM_TYPE INTEGER,ITEM_ID VARCHAR(75) null,BRAND_MASTER_SID INTEGER,BASELINE_AMP DOUBLE,DUAL_PRICING_INDICATOR VARCHAR(75) null,DOSES_PER_UNIT VARCHAR(75) null,CREATED_DATE DATE null,CREATED_BY INTEGER,AUTHORIZED_GENERIC VARCHAR(75) null,ITEM_START_DATE DATE null,NDC9 VARCHAR(75) null,AUTHORIZED_GENERIC_END_DATE DATE null,ITEM_NO VARCHAR(75) null,PACKAGE_SIZE VARCHAR(75) null,NDC8 VARCHAR(75) null,BASE_CPI DOUBLE,LABELER_CODE VARCHAR(75) null,ITEM_CLASS INTEGER,CLOTTING_FACTOR_END_DATE DATE null,DRA DOUBLE,BASE_CPI_PERIOD DATE null,NEW_FORMULATION_INDICATOR VARCHAR(75) null,LAST_LOT_EXPIRATION_DATE DATE null,BATCH_ID VARCHAR(75) null,ITEM_CODE VARCHAR(75) null,CLOTTING_FACTOR_START_DATE DATE null,NON_FEDERAL_EXPIRATION_DATE DATE null,INTERNAL_NOTES VARCHAR(75) null,BASE_CPI_PRECISION INTEGER,BASELINE_AMP_PRECISION INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table ITEM_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY itemMaster.itemMasterSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ITEM_MASTER.ITEM_MASTER_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.ItemMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.ItemMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stpl.app.model.ItemMaster"),
            true);
    public static long FORM_COLUMN_BITMASK = 1L;
    public static long ITEMID_COLUMN_BITMASK = 2L;
    public static long ITEMNAME_COLUMN_BITMASK = 4L;
    public static long ITEMNO_COLUMN_BITMASK = 8L;
    public static long ITEMSTATUS_COLUMN_BITMASK = 16L;
    public static long ITEMTYPE_COLUMN_BITMASK = 32L;
    public static long MANUFACTURERID_COLUMN_BITMASK = 64L;
    public static long PRIMARYUOM_COLUMN_BITMASK = 128L;
    public static long STRENGTH_COLUMN_BITMASK = 256L;
    public static long ITEMMASTERSID_COLUMN_BITMASK = 512L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.ItemMaster"));
    private static ClassLoader _classLoader = ItemMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ItemMaster.class
        };
    private int _itemStatus;
    private int _originalItemStatus;
    private boolean _setOriginalItemStatus;
    private String _itemDesc;
    private Date _authorizedGenericStartDate;
    private double _acquiredAmp;
    private Date _newFormulationStartDate;
    private Date _marketTerminationDate;
    private double _obraBamp;
    private Date _modifiedDate;
    private int _therapeuticClass;
    private int _organizationKey;
    private double _acquiredBamp;
    private Date _pediatricExclusiveEndDate;
    private String _source;
    private String _newFormulation;
    private Date _divestitureDate;
    private int _primaryUom;
    private int _originalPrimaryUom;
    private boolean _setOriginalPrimaryUom;
    private Date _newFormulationEndDate;
    private int _modifiedBy;
    private String _inboundStatus;
    private String _packageSizeCode;
    private int _secondaryUom;
    private Date _discontinuationDate;
    private Date _packageSizeIntroDate;
    private String _manufacturerId;
    private String _originalManufacturerId;
    private Date _itemEndDate;
    private String _itemFamilyId;
    private int _strength;
    private int _originalStrength;
    private boolean _setOriginalStrength;
    private int _itemCategory;
    private double _upps;
    private int _shelfLifeType;
    private String _pediatricExclusiveIndicator;
    private boolean _recordLockStatus;
    private String _itemTypeIndication;
    private Date _acquisitionDate;
    private String _clottingFactorIndicator;
    private int _form;
    private int _originalForm;
    private boolean _setOriginalForm;
    private String _itemName;
    private String _originalItemName;
    private String _shelfLife;
    private Date _pediatricExclusiveStartDate;
    private Date _firstSaleDate;
    private int _itemMasterSid;
    private int _itemType;
    private int _originalItemType;
    private boolean _setOriginalItemType;
    private String _itemId;
    private String _originalItemId;
    private int _brandMasterSid;
    private double _baselineAmp;
    private String _dualPricingIndicator;
    private String _dosesPerUnit;
    private Date _createdDate;
    private int _createdBy;
    private String _authorizedGeneric;
    private Date _itemStartDate;
    private String _ndc9;
    private Date _authorizedGenericEndDate;
    private String _itemNo;
    private String _originalItemNo;
    private String _packageSize;
    private String _ndc8;
    private double _baseCpi;
    private String _labelerCode;
    private int _itemClass;
    private Date _clottingFactorEndDate;
    private double _dra;
    private Date _baseCpiPeriod;
    private String _newFormulationIndicator;
    private Date _lastLotExpirationDate;
    private String _batchId;
    private String _itemCode;
    private Date _clottingFactorStartDate;
    private Date _nonFederalExpirationDate;
    private String _internalNotes;
    private int _baseCpiPrecision;
    private int _baselineAmpPrecision;
    private long _columnBitmask;
    private ItemMaster _escapedModel;

    public ItemMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _itemMasterSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setItemMasterSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _itemMasterSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ItemMaster.class;
    }

    @Override
    public String getModelClassName() {
        return ItemMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("itemStatus", getItemStatus());
        attributes.put("itemDesc", getItemDesc());
        attributes.put("authorizedGenericStartDate",
            getAuthorizedGenericStartDate());
        attributes.put("acquiredAmp", getAcquiredAmp());
        attributes.put("newFormulationStartDate", getNewFormulationStartDate());
        attributes.put("marketTerminationDate", getMarketTerminationDate());
        attributes.put("obraBamp", getObraBamp());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("therapeuticClass", getTherapeuticClass());
        attributes.put("organizationKey", getOrganizationKey());
        attributes.put("acquiredBamp", getAcquiredBamp());
        attributes.put("pediatricExclusiveEndDate",
            getPediatricExclusiveEndDate());
        attributes.put("source", getSource());
        attributes.put("newFormulation", getNewFormulation());
        attributes.put("divestitureDate", getDivestitureDate());
        attributes.put("primaryUom", getPrimaryUom());
        attributes.put("newFormulationEndDate", getNewFormulationEndDate());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("inboundStatus", getInboundStatus());
        attributes.put("packageSizeCode", getPackageSizeCode());
        attributes.put("secondaryUom", getSecondaryUom());
        attributes.put("discontinuationDate", getDiscontinuationDate());
        attributes.put("packageSizeIntroDate", getPackageSizeIntroDate());
        attributes.put("manufacturerId", getManufacturerId());
        attributes.put("itemEndDate", getItemEndDate());
        attributes.put("itemFamilyId", getItemFamilyId());
        attributes.put("strength", getStrength());
        attributes.put("itemCategory", getItemCategory());
        attributes.put("upps", getUpps());
        attributes.put("shelfLifeType", getShelfLifeType());
        attributes.put("pediatricExclusiveIndicator",
            getPediatricExclusiveIndicator());
        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("itemTypeIndication", getItemTypeIndication());
        attributes.put("acquisitionDate", getAcquisitionDate());
        attributes.put("clottingFactorIndicator", getClottingFactorIndicator());
        attributes.put("form", getForm());
        attributes.put("itemName", getItemName());
        attributes.put("shelfLife", getShelfLife());
        attributes.put("pediatricExclusiveStartDate",
            getPediatricExclusiveStartDate());
        attributes.put("firstSaleDate", getFirstSaleDate());
        attributes.put("itemMasterSid", getItemMasterSid());
        attributes.put("itemType", getItemType());
        attributes.put("itemId", getItemId());
        attributes.put("brandMasterSid", getBrandMasterSid());
        attributes.put("baselineAmp", getBaselineAmp());
        attributes.put("dualPricingIndicator", getDualPricingIndicator());
        attributes.put("dosesPerUnit", getDosesPerUnit());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("authorizedGeneric", getAuthorizedGeneric());
        attributes.put("itemStartDate", getItemStartDate());
        attributes.put("ndc9", getNdc9());
        attributes.put("authorizedGenericEndDate", getAuthorizedGenericEndDate());
        attributes.put("itemNo", getItemNo());
        attributes.put("packageSize", getPackageSize());
        attributes.put("ndc8", getNdc8());
        attributes.put("baseCpi", getBaseCpi());
        attributes.put("labelerCode", getLabelerCode());
        attributes.put("itemClass", getItemClass());
        attributes.put("clottingFactorEndDate", getClottingFactorEndDate());
        attributes.put("dra", getDra());
        attributes.put("baseCpiPeriod", getBaseCpiPeriod());
        attributes.put("newFormulationIndicator", getNewFormulationIndicator());
        attributes.put("lastLotExpirationDate", getLastLotExpirationDate());
        attributes.put("batchId", getBatchId());
        attributes.put("itemCode", getItemCode());
        attributes.put("clottingFactorStartDate", getClottingFactorStartDate());
        attributes.put("nonFederalExpirationDate", getNonFederalExpirationDate());
        attributes.put("internalNotes", getInternalNotes());
        attributes.put("baseCpiPrecision", getBaseCpiPrecision());
        attributes.put("baselineAmpPrecision", getBaselineAmpPrecision());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer itemStatus = (Integer) attributes.get("itemStatus");

        if (itemStatus != null) {
            setItemStatus(itemStatus);
        }

        String itemDesc = (String) attributes.get("itemDesc");

        if (itemDesc != null) {
            setItemDesc(itemDesc);
        }

        Date authorizedGenericStartDate = (Date) attributes.get(
                "authorizedGenericStartDate");

        if (authorizedGenericStartDate != null) {
            setAuthorizedGenericStartDate(authorizedGenericStartDate);
        }

        Double acquiredAmp = (Double) attributes.get("acquiredAmp");

        if (acquiredAmp != null) {
            setAcquiredAmp(acquiredAmp);
        }

        Date newFormulationStartDate = (Date) attributes.get(
                "newFormulationStartDate");

        if (newFormulationStartDate != null) {
            setNewFormulationStartDate(newFormulationStartDate);
        }

        Date marketTerminationDate = (Date) attributes.get(
                "marketTerminationDate");

        if (marketTerminationDate != null) {
            setMarketTerminationDate(marketTerminationDate);
        }

        Double obraBamp = (Double) attributes.get("obraBamp");

        if (obraBamp != null) {
            setObraBamp(obraBamp);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer therapeuticClass = (Integer) attributes.get("therapeuticClass");

        if (therapeuticClass != null) {
            setTherapeuticClass(therapeuticClass);
        }

        Integer organizationKey = (Integer) attributes.get("organizationKey");

        if (organizationKey != null) {
            setOrganizationKey(organizationKey);
        }

        Double acquiredBamp = (Double) attributes.get("acquiredBamp");

        if (acquiredBamp != null) {
            setAcquiredBamp(acquiredBamp);
        }

        Date pediatricExclusiveEndDate = (Date) attributes.get(
                "pediatricExclusiveEndDate");

        if (pediatricExclusiveEndDate != null) {
            setPediatricExclusiveEndDate(pediatricExclusiveEndDate);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String newFormulation = (String) attributes.get("newFormulation");

        if (newFormulation != null) {
            setNewFormulation(newFormulation);
        }

        Date divestitureDate = (Date) attributes.get("divestitureDate");

        if (divestitureDate != null) {
            setDivestitureDate(divestitureDate);
        }

        Integer primaryUom = (Integer) attributes.get("primaryUom");

        if (primaryUom != null) {
            setPrimaryUom(primaryUom);
        }

        Date newFormulationEndDate = (Date) attributes.get(
                "newFormulationEndDate");

        if (newFormulationEndDate != null) {
            setNewFormulationEndDate(newFormulationEndDate);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }

        String packageSizeCode = (String) attributes.get("packageSizeCode");

        if (packageSizeCode != null) {
            setPackageSizeCode(packageSizeCode);
        }

        Integer secondaryUom = (Integer) attributes.get("secondaryUom");

        if (secondaryUom != null) {
            setSecondaryUom(secondaryUom);
        }

        Date discontinuationDate = (Date) attributes.get("discontinuationDate");

        if (discontinuationDate != null) {
            setDiscontinuationDate(discontinuationDate);
        }

        Date packageSizeIntroDate = (Date) attributes.get(
                "packageSizeIntroDate");

        if (packageSizeIntroDate != null) {
            setPackageSizeIntroDate(packageSizeIntroDate);
        }

        String manufacturerId = (String) attributes.get("manufacturerId");

        if (manufacturerId != null) {
            setManufacturerId(manufacturerId);
        }

        Date itemEndDate = (Date) attributes.get("itemEndDate");

        if (itemEndDate != null) {
            setItemEndDate(itemEndDate);
        }

        String itemFamilyId = (String) attributes.get("itemFamilyId");

        if (itemFamilyId != null) {
            setItemFamilyId(itemFamilyId);
        }

        Integer strength = (Integer) attributes.get("strength");

        if (strength != null) {
            setStrength(strength);
        }

        Integer itemCategory = (Integer) attributes.get("itemCategory");

        if (itemCategory != null) {
            setItemCategory(itemCategory);
        }

        Double upps = (Double) attributes.get("upps");

        if (upps != null) {
            setUpps(upps);
        }

        Integer shelfLifeType = (Integer) attributes.get("shelfLifeType");

        if (shelfLifeType != null) {
            setShelfLifeType(shelfLifeType);
        }

        String pediatricExclusiveIndicator = (String) attributes.get(
                "pediatricExclusiveIndicator");

        if (pediatricExclusiveIndicator != null) {
            setPediatricExclusiveIndicator(pediatricExclusiveIndicator);
        }

        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        String itemTypeIndication = (String) attributes.get(
                "itemTypeIndication");

        if (itemTypeIndication != null) {
            setItemTypeIndication(itemTypeIndication);
        }

        Date acquisitionDate = (Date) attributes.get("acquisitionDate");

        if (acquisitionDate != null) {
            setAcquisitionDate(acquisitionDate);
        }

        String clottingFactorIndicator = (String) attributes.get(
                "clottingFactorIndicator");

        if (clottingFactorIndicator != null) {
            setClottingFactorIndicator(clottingFactorIndicator);
        }

        Integer form = (Integer) attributes.get("form");

        if (form != null) {
            setForm(form);
        }

        String itemName = (String) attributes.get("itemName");

        if (itemName != null) {
            setItemName(itemName);
        }

        String shelfLife = (String) attributes.get("shelfLife");

        if (shelfLife != null) {
            setShelfLife(shelfLife);
        }

        Date pediatricExclusiveStartDate = (Date) attributes.get(
                "pediatricExclusiveStartDate");

        if (pediatricExclusiveStartDate != null) {
            setPediatricExclusiveStartDate(pediatricExclusiveStartDate);
        }

        Date firstSaleDate = (Date) attributes.get("firstSaleDate");

        if (firstSaleDate != null) {
            setFirstSaleDate(firstSaleDate);
        }

        Integer itemMasterSid = (Integer) attributes.get("itemMasterSid");

        if (itemMasterSid != null) {
            setItemMasterSid(itemMasterSid);
        }

        Integer itemType = (Integer) attributes.get("itemType");

        if (itemType != null) {
            setItemType(itemType);
        }

        String itemId = (String) attributes.get("itemId");

        if (itemId != null) {
            setItemId(itemId);
        }

        Integer brandMasterSid = (Integer) attributes.get("brandMasterSid");

        if (brandMasterSid != null) {
            setBrandMasterSid(brandMasterSid);
        }

        Double baselineAmp = (Double) attributes.get("baselineAmp");

        if (baselineAmp != null) {
            setBaselineAmp(baselineAmp);
        }

        String dualPricingIndicator = (String) attributes.get(
                "dualPricingIndicator");

        if (dualPricingIndicator != null) {
            setDualPricingIndicator(dualPricingIndicator);
        }

        String dosesPerUnit = (String) attributes.get("dosesPerUnit");

        if (dosesPerUnit != null) {
            setDosesPerUnit(dosesPerUnit);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        String authorizedGeneric = (String) attributes.get("authorizedGeneric");

        if (authorizedGeneric != null) {
            setAuthorizedGeneric(authorizedGeneric);
        }

        Date itemStartDate = (Date) attributes.get("itemStartDate");

        if (itemStartDate != null) {
            setItemStartDate(itemStartDate);
        }

        String ndc9 = (String) attributes.get("ndc9");

        if (ndc9 != null) {
            setNdc9(ndc9);
        }

        Date authorizedGenericEndDate = (Date) attributes.get(
                "authorizedGenericEndDate");

        if (authorizedGenericEndDate != null) {
            setAuthorizedGenericEndDate(authorizedGenericEndDate);
        }

        String itemNo = (String) attributes.get("itemNo");

        if (itemNo != null) {
            setItemNo(itemNo);
        }

        String packageSize = (String) attributes.get("packageSize");

        if (packageSize != null) {
            setPackageSize(packageSize);
        }

        String ndc8 = (String) attributes.get("ndc8");

        if (ndc8 != null) {
            setNdc8(ndc8);
        }

        Double baseCpi = (Double) attributes.get("baseCpi");

        if (baseCpi != null) {
            setBaseCpi(baseCpi);
        }

        String labelerCode = (String) attributes.get("labelerCode");

        if (labelerCode != null) {
            setLabelerCode(labelerCode);
        }

        Integer itemClass = (Integer) attributes.get("itemClass");

        if (itemClass != null) {
            setItemClass(itemClass);
        }

        Date clottingFactorEndDate = (Date) attributes.get(
                "clottingFactorEndDate");

        if (clottingFactorEndDate != null) {
            setClottingFactorEndDate(clottingFactorEndDate);
        }

        Double dra = (Double) attributes.get("dra");

        if (dra != null) {
            setDra(dra);
        }

        Date baseCpiPeriod = (Date) attributes.get("baseCpiPeriod");

        if (baseCpiPeriod != null) {
            setBaseCpiPeriod(baseCpiPeriod);
        }

        String newFormulationIndicator = (String) attributes.get(
                "newFormulationIndicator");

        if (newFormulationIndicator != null) {
            setNewFormulationIndicator(newFormulationIndicator);
        }

        Date lastLotExpirationDate = (Date) attributes.get(
                "lastLotExpirationDate");

        if (lastLotExpirationDate != null) {
            setLastLotExpirationDate(lastLotExpirationDate);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        String itemCode = (String) attributes.get("itemCode");

        if (itemCode != null) {
            setItemCode(itemCode);
        }

        Date clottingFactorStartDate = (Date) attributes.get(
                "clottingFactorStartDate");

        if (clottingFactorStartDate != null) {
            setClottingFactorStartDate(clottingFactorStartDate);
        }

        Date nonFederalExpirationDate = (Date) attributes.get(
                "nonFederalExpirationDate");

        if (nonFederalExpirationDate != null) {
            setNonFederalExpirationDate(nonFederalExpirationDate);
        }

        String internalNotes = (String) attributes.get("internalNotes");

        if (internalNotes != null) {
            setInternalNotes(internalNotes);
        }

        Integer baseCpiPrecision = (Integer) attributes.get("baseCpiPrecision");

        if (baseCpiPrecision != null) {
            setBaseCpiPrecision(baseCpiPrecision);
        }

        Integer baselineAmpPrecision = (Integer) attributes.get(
                "baselineAmpPrecision");

        if (baselineAmpPrecision != null) {
            setBaselineAmpPrecision(baselineAmpPrecision);
        }
    }

    @Override
    public int getItemStatus() {
        return _itemStatus;
    }

    @Override
    public void setItemStatus(int itemStatus) {
        _columnBitmask |= ITEMSTATUS_COLUMN_BITMASK;

        if (!_setOriginalItemStatus) {
            _setOriginalItemStatus = true;

            _originalItemStatus = _itemStatus;
        }

        _itemStatus = itemStatus;
    }

    public int getOriginalItemStatus() {
        return _originalItemStatus;
    }

    @Override
    public String getItemDesc() {
        if (_itemDesc == null) {
            return StringPool.BLANK;
        } else {
            return _itemDesc;
        }
    }

    @Override
    public void setItemDesc(String itemDesc) {
        _itemDesc = itemDesc;
    }

    @Override
    public Date getAuthorizedGenericStartDate() {
        return _authorizedGenericStartDate;
    }

    @Override
    public void setAuthorizedGenericStartDate(Date authorizedGenericStartDate) {
        _authorizedGenericStartDate = authorizedGenericStartDate;
    }

    @Override
    public double getAcquiredAmp() {
        return _acquiredAmp;
    }

    @Override
    public void setAcquiredAmp(double acquiredAmp) {
        _acquiredAmp = acquiredAmp;
    }

    @Override
    public Date getNewFormulationStartDate() {
        return _newFormulationStartDate;
    }

    @Override
    public void setNewFormulationStartDate(Date newFormulationStartDate) {
        _newFormulationStartDate = newFormulationStartDate;
    }

    @Override
    public Date getMarketTerminationDate() {
        return _marketTerminationDate;
    }

    @Override
    public void setMarketTerminationDate(Date marketTerminationDate) {
        _marketTerminationDate = marketTerminationDate;
    }

    @Override
    public double getObraBamp() {
        return _obraBamp;
    }

    @Override
    public void setObraBamp(double obraBamp) {
        _obraBamp = obraBamp;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public int getTherapeuticClass() {
        return _therapeuticClass;
    }

    @Override
    public void setTherapeuticClass(int therapeuticClass) {
        _therapeuticClass = therapeuticClass;
    }

    @Override
    public int getOrganizationKey() {
        return _organizationKey;
    }

    @Override
    public void setOrganizationKey(int organizationKey) {
        _organizationKey = organizationKey;
    }

    @Override
    public double getAcquiredBamp() {
        return _acquiredBamp;
    }

    @Override
    public void setAcquiredBamp(double acquiredBamp) {
        _acquiredBamp = acquiredBamp;
    }

    @Override
    public Date getPediatricExclusiveEndDate() {
        return _pediatricExclusiveEndDate;
    }

    @Override
    public void setPediatricExclusiveEndDate(Date pediatricExclusiveEndDate) {
        _pediatricExclusiveEndDate = pediatricExclusiveEndDate;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getNewFormulation() {
        if (_newFormulation == null) {
            return StringPool.BLANK;
        } else {
            return _newFormulation;
        }
    }

    @Override
    public void setNewFormulation(String newFormulation) {
        _newFormulation = newFormulation;
    }

    @Override
    public Date getDivestitureDate() {
        return _divestitureDate;
    }

    @Override
    public void setDivestitureDate(Date divestitureDate) {
        _divestitureDate = divestitureDate;
    }

    @Override
    public int getPrimaryUom() {
        return _primaryUom;
    }

    @Override
    public void setPrimaryUom(int primaryUom) {
        _columnBitmask |= PRIMARYUOM_COLUMN_BITMASK;

        if (!_setOriginalPrimaryUom) {
            _setOriginalPrimaryUom = true;

            _originalPrimaryUom = _primaryUom;
        }

        _primaryUom = primaryUom;
    }

    public int getOriginalPrimaryUom() {
        return _originalPrimaryUom;
    }

    @Override
    public Date getNewFormulationEndDate() {
        return _newFormulationEndDate;
    }

    @Override
    public void setNewFormulationEndDate(Date newFormulationEndDate) {
        _newFormulationEndDate = newFormulationEndDate;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    @Override
    public String getPackageSizeCode() {
        if (_packageSizeCode == null) {
            return StringPool.BLANK;
        } else {
            return _packageSizeCode;
        }
    }

    @Override
    public void setPackageSizeCode(String packageSizeCode) {
        _packageSizeCode = packageSizeCode;
    }

    @Override
    public int getSecondaryUom() {
        return _secondaryUom;
    }

    @Override
    public void setSecondaryUom(int secondaryUom) {
        _secondaryUom = secondaryUom;
    }

    @Override
    public Date getDiscontinuationDate() {
        return _discontinuationDate;
    }

    @Override
    public void setDiscontinuationDate(Date discontinuationDate) {
        _discontinuationDate = discontinuationDate;
    }

    @Override
    public Date getPackageSizeIntroDate() {
        return _packageSizeIntroDate;
    }

    @Override
    public void setPackageSizeIntroDate(Date packageSizeIntroDate) {
        _packageSizeIntroDate = packageSizeIntroDate;
    }

    @Override
    public String getManufacturerId() {
        if (_manufacturerId == null) {
            return StringPool.BLANK;
        } else {
            return _manufacturerId;
        }
    }

    @Override
    public void setManufacturerId(String manufacturerId) {
        _columnBitmask |= MANUFACTURERID_COLUMN_BITMASK;

        if (_originalManufacturerId == null) {
            _originalManufacturerId = _manufacturerId;
        }

        _manufacturerId = manufacturerId;
    }

    public String getOriginalManufacturerId() {
        return GetterUtil.getString(_originalManufacturerId);
    }

    @Override
    public Date getItemEndDate() {
        return _itemEndDate;
    }

    @Override
    public void setItemEndDate(Date itemEndDate) {
        _itemEndDate = itemEndDate;
    }

    @Override
    public String getItemFamilyId() {
        if (_itemFamilyId == null) {
            return StringPool.BLANK;
        } else {
            return _itemFamilyId;
        }
    }

    @Override
    public void setItemFamilyId(String itemFamilyId) {
        _itemFamilyId = itemFamilyId;
    }

    @Override
    public int getStrength() {
        return _strength;
    }

    @Override
    public void setStrength(int strength) {
        _columnBitmask |= STRENGTH_COLUMN_BITMASK;

        if (!_setOriginalStrength) {
            _setOriginalStrength = true;

            _originalStrength = _strength;
        }

        _strength = strength;
    }

    public int getOriginalStrength() {
        return _originalStrength;
    }

    @Override
    public int getItemCategory() {
        return _itemCategory;
    }

    @Override
    public void setItemCategory(int itemCategory) {
        _itemCategory = itemCategory;
    }

    @Override
    public double getUpps() {
        return _upps;
    }

    @Override
    public void setUpps(double upps) {
        _upps = upps;
    }

    @Override
    public int getShelfLifeType() {
        return _shelfLifeType;
    }

    @Override
    public void setShelfLifeType(int shelfLifeType) {
        _shelfLifeType = shelfLifeType;
    }

    @Override
    public String getPediatricExclusiveIndicator() {
        if (_pediatricExclusiveIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _pediatricExclusiveIndicator;
        }
    }

    @Override
    public void setPediatricExclusiveIndicator(
        String pediatricExclusiveIndicator) {
        _pediatricExclusiveIndicator = pediatricExclusiveIndicator;
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public String getItemTypeIndication() {
        if (_itemTypeIndication == null) {
            return StringPool.BLANK;
        } else {
            return _itemTypeIndication;
        }
    }

    @Override
    public void setItemTypeIndication(String itemTypeIndication) {
        _itemTypeIndication = itemTypeIndication;
    }

    @Override
    public Date getAcquisitionDate() {
        return _acquisitionDate;
    }

    @Override
    public void setAcquisitionDate(Date acquisitionDate) {
        _acquisitionDate = acquisitionDate;
    }

    @Override
    public String getClottingFactorIndicator() {
        if (_clottingFactorIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _clottingFactorIndicator;
        }
    }

    @Override
    public void setClottingFactorIndicator(String clottingFactorIndicator) {
        _clottingFactorIndicator = clottingFactorIndicator;
    }

    @Override
    public int getForm() {
        return _form;
    }

    @Override
    public void setForm(int form) {
        _columnBitmask |= FORM_COLUMN_BITMASK;

        if (!_setOriginalForm) {
            _setOriginalForm = true;

            _originalForm = _form;
        }

        _form = form;
    }

    public int getOriginalForm() {
        return _originalForm;
    }

    @Override
    public String getItemName() {
        if (_itemName == null) {
            return StringPool.BLANK;
        } else {
            return _itemName;
        }
    }

    @Override
    public void setItemName(String itemName) {
        _columnBitmask |= ITEMNAME_COLUMN_BITMASK;

        if (_originalItemName == null) {
            _originalItemName = _itemName;
        }

        _itemName = itemName;
    }

    public String getOriginalItemName() {
        return GetterUtil.getString(_originalItemName);
    }

    @Override
    public String getShelfLife() {
        if (_shelfLife == null) {
            return StringPool.BLANK;
        } else {
            return _shelfLife;
        }
    }

    @Override
    public void setShelfLife(String shelfLife) {
        _shelfLife = shelfLife;
    }

    @Override
    public Date getPediatricExclusiveStartDate() {
        return _pediatricExclusiveStartDate;
    }

    @Override
    public void setPediatricExclusiveStartDate(Date pediatricExclusiveStartDate) {
        _pediatricExclusiveStartDate = pediatricExclusiveStartDate;
    }

    @Override
    public Date getFirstSaleDate() {
        return _firstSaleDate;
    }

    @Override
    public void setFirstSaleDate(Date firstSaleDate) {
        _firstSaleDate = firstSaleDate;
    }

    @Override
    public int getItemMasterSid() {
        return _itemMasterSid;
    }

    @Override
    public void setItemMasterSid(int itemMasterSid) {
        _itemMasterSid = itemMasterSid;
    }

    @Override
    public int getItemType() {
        return _itemType;
    }

    @Override
    public void setItemType(int itemType) {
        _columnBitmask |= ITEMTYPE_COLUMN_BITMASK;

        if (!_setOriginalItemType) {
            _setOriginalItemType = true;

            _originalItemType = _itemType;
        }

        _itemType = itemType;
    }

    public int getOriginalItemType() {
        return _originalItemType;
    }

    @Override
    public String getItemId() {
        if (_itemId == null) {
            return StringPool.BLANK;
        } else {
            return _itemId;
        }
    }

    @Override
    public void setItemId(String itemId) {
        _columnBitmask |= ITEMID_COLUMN_BITMASK;

        if (_originalItemId == null) {
            _originalItemId = _itemId;
        }

        _itemId = itemId;
    }

    public String getOriginalItemId() {
        return GetterUtil.getString(_originalItemId);
    }

    @Override
    public int getBrandMasterSid() {
        return _brandMasterSid;
    }

    @Override
    public void setBrandMasterSid(int brandMasterSid) {
        _brandMasterSid = brandMasterSid;
    }

    @Override
    public double getBaselineAmp() {
        return _baselineAmp;
    }

    @Override
    public void setBaselineAmp(double baselineAmp) {
        _baselineAmp = baselineAmp;
    }

    @Override
    public String getDualPricingIndicator() {
        if (_dualPricingIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _dualPricingIndicator;
        }
    }

    @Override
    public void setDualPricingIndicator(String dualPricingIndicator) {
        _dualPricingIndicator = dualPricingIndicator;
    }

    @Override
    public String getDosesPerUnit() {
        if (_dosesPerUnit == null) {
            return StringPool.BLANK;
        } else {
            return _dosesPerUnit;
        }
    }

    @Override
    public void setDosesPerUnit(String dosesPerUnit) {
        _dosesPerUnit = dosesPerUnit;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public String getAuthorizedGeneric() {
        if (_authorizedGeneric == null) {
            return StringPool.BLANK;
        } else {
            return _authorizedGeneric;
        }
    }

    @Override
    public void setAuthorizedGeneric(String authorizedGeneric) {
        _authorizedGeneric = authorizedGeneric;
    }

    @Override
    public Date getItemStartDate() {
        return _itemStartDate;
    }

    @Override
    public void setItemStartDate(Date itemStartDate) {
        _itemStartDate = itemStartDate;
    }

    @Override
    public String getNdc9() {
        if (_ndc9 == null) {
            return StringPool.BLANK;
        } else {
            return _ndc9;
        }
    }

    @Override
    public void setNdc9(String ndc9) {
        _ndc9 = ndc9;
    }

    @Override
    public Date getAuthorizedGenericEndDate() {
        return _authorizedGenericEndDate;
    }

    @Override
    public void setAuthorizedGenericEndDate(Date authorizedGenericEndDate) {
        _authorizedGenericEndDate = authorizedGenericEndDate;
    }

    @Override
    public String getItemNo() {
        if (_itemNo == null) {
            return StringPool.BLANK;
        } else {
            return _itemNo;
        }
    }

    @Override
    public void setItemNo(String itemNo) {
        _columnBitmask |= ITEMNO_COLUMN_BITMASK;

        if (_originalItemNo == null) {
            _originalItemNo = _itemNo;
        }

        _itemNo = itemNo;
    }

    public String getOriginalItemNo() {
        return GetterUtil.getString(_originalItemNo);
    }

    @Override
    public String getPackageSize() {
        if (_packageSize == null) {
            return StringPool.BLANK;
        } else {
            return _packageSize;
        }
    }

    @Override
    public void setPackageSize(String packageSize) {
        _packageSize = packageSize;
    }

    @Override
    public String getNdc8() {
        if (_ndc8 == null) {
            return StringPool.BLANK;
        } else {
            return _ndc8;
        }
    }

    @Override
    public void setNdc8(String ndc8) {
        _ndc8 = ndc8;
    }

    @Override
    public double getBaseCpi() {
        return _baseCpi;
    }

    @Override
    public void setBaseCpi(double baseCpi) {
        _baseCpi = baseCpi;
    }

    @Override
    public String getLabelerCode() {
        if (_labelerCode == null) {
            return StringPool.BLANK;
        } else {
            return _labelerCode;
        }
    }

    @Override
    public void setLabelerCode(String labelerCode) {
        _labelerCode = labelerCode;
    }

    @Override
    public int getItemClass() {
        return _itemClass;
    }

    @Override
    public void setItemClass(int itemClass) {
        _itemClass = itemClass;
    }

    @Override
    public Date getClottingFactorEndDate() {
        return _clottingFactorEndDate;
    }

    @Override
    public void setClottingFactorEndDate(Date clottingFactorEndDate) {
        _clottingFactorEndDate = clottingFactorEndDate;
    }

    @Override
    public double getDra() {
        return _dra;
    }

    @Override
    public void setDra(double dra) {
        _dra = dra;
    }

    @Override
    public Date getBaseCpiPeriod() {
        return _baseCpiPeriod;
    }

    @Override
    public void setBaseCpiPeriod(Date baseCpiPeriod) {
        _baseCpiPeriod = baseCpiPeriod;
    }

    @Override
    public String getNewFormulationIndicator() {
        if (_newFormulationIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _newFormulationIndicator;
        }
    }

    @Override
    public void setNewFormulationIndicator(String newFormulationIndicator) {
        _newFormulationIndicator = newFormulationIndicator;
    }

    @Override
    public Date getLastLotExpirationDate() {
        return _lastLotExpirationDate;
    }

    @Override
    public void setLastLotExpirationDate(Date lastLotExpirationDate) {
        _lastLotExpirationDate = lastLotExpirationDate;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public String getItemCode() {
        if (_itemCode == null) {
            return StringPool.BLANK;
        } else {
            return _itemCode;
        }
    }

    @Override
    public void setItemCode(String itemCode) {
        _itemCode = itemCode;
    }

    @Override
    public Date getClottingFactorStartDate() {
        return _clottingFactorStartDate;
    }

    @Override
    public void setClottingFactorStartDate(Date clottingFactorStartDate) {
        _clottingFactorStartDate = clottingFactorStartDate;
    }

    @Override
    public Date getNonFederalExpirationDate() {
        return _nonFederalExpirationDate;
    }

    @Override
    public void setNonFederalExpirationDate(Date nonFederalExpirationDate) {
        _nonFederalExpirationDate = nonFederalExpirationDate;
    }

    @Override
    public String getInternalNotes() {
        if (_internalNotes == null) {
            return StringPool.BLANK;
        } else {
            return _internalNotes;
        }
    }

    @Override
    public void setInternalNotes(String internalNotes) {
        _internalNotes = internalNotes;
    }

    @Override
    public int getBaseCpiPrecision() {
        return _baseCpiPrecision;
    }

    @Override
    public void setBaseCpiPrecision(int baseCpiPrecision) {
        _baseCpiPrecision = baseCpiPrecision;
    }

    @Override
    public int getBaselineAmpPrecision() {
        return _baselineAmpPrecision;
    }

    @Override
    public void setBaselineAmpPrecision(int baselineAmpPrecision) {
        _baselineAmpPrecision = baselineAmpPrecision;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ItemMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ItemMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ItemMasterImpl itemMasterImpl = new ItemMasterImpl();

        itemMasterImpl.setItemStatus(getItemStatus());
        itemMasterImpl.setItemDesc(getItemDesc());
        itemMasterImpl.setAuthorizedGenericStartDate(getAuthorizedGenericStartDate());
        itemMasterImpl.setAcquiredAmp(getAcquiredAmp());
        itemMasterImpl.setNewFormulationStartDate(getNewFormulationStartDate());
        itemMasterImpl.setMarketTerminationDate(getMarketTerminationDate());
        itemMasterImpl.setObraBamp(getObraBamp());
        itemMasterImpl.setModifiedDate(getModifiedDate());
        itemMasterImpl.setTherapeuticClass(getTherapeuticClass());
        itemMasterImpl.setOrganizationKey(getOrganizationKey());
        itemMasterImpl.setAcquiredBamp(getAcquiredBamp());
        itemMasterImpl.setPediatricExclusiveEndDate(getPediatricExclusiveEndDate());
        itemMasterImpl.setSource(getSource());
        itemMasterImpl.setNewFormulation(getNewFormulation());
        itemMasterImpl.setDivestitureDate(getDivestitureDate());
        itemMasterImpl.setPrimaryUom(getPrimaryUom());
        itemMasterImpl.setNewFormulationEndDate(getNewFormulationEndDate());
        itemMasterImpl.setModifiedBy(getModifiedBy());
        itemMasterImpl.setInboundStatus(getInboundStatus());
        itemMasterImpl.setPackageSizeCode(getPackageSizeCode());
        itemMasterImpl.setSecondaryUom(getSecondaryUom());
        itemMasterImpl.setDiscontinuationDate(getDiscontinuationDate());
        itemMasterImpl.setPackageSizeIntroDate(getPackageSizeIntroDate());
        itemMasterImpl.setManufacturerId(getManufacturerId());
        itemMasterImpl.setItemEndDate(getItemEndDate());
        itemMasterImpl.setItemFamilyId(getItemFamilyId());
        itemMasterImpl.setStrength(getStrength());
        itemMasterImpl.setItemCategory(getItemCategory());
        itemMasterImpl.setUpps(getUpps());
        itemMasterImpl.setShelfLifeType(getShelfLifeType());
        itemMasterImpl.setPediatricExclusiveIndicator(getPediatricExclusiveIndicator());
        itemMasterImpl.setRecordLockStatus(getRecordLockStatus());
        itemMasterImpl.setItemTypeIndication(getItemTypeIndication());
        itemMasterImpl.setAcquisitionDate(getAcquisitionDate());
        itemMasterImpl.setClottingFactorIndicator(getClottingFactorIndicator());
        itemMasterImpl.setForm(getForm());
        itemMasterImpl.setItemName(getItemName());
        itemMasterImpl.setShelfLife(getShelfLife());
        itemMasterImpl.setPediatricExclusiveStartDate(getPediatricExclusiveStartDate());
        itemMasterImpl.setFirstSaleDate(getFirstSaleDate());
        itemMasterImpl.setItemMasterSid(getItemMasterSid());
        itemMasterImpl.setItemType(getItemType());
        itemMasterImpl.setItemId(getItemId());
        itemMasterImpl.setBrandMasterSid(getBrandMasterSid());
        itemMasterImpl.setBaselineAmp(getBaselineAmp());
        itemMasterImpl.setDualPricingIndicator(getDualPricingIndicator());
        itemMasterImpl.setDosesPerUnit(getDosesPerUnit());
        itemMasterImpl.setCreatedDate(getCreatedDate());
        itemMasterImpl.setCreatedBy(getCreatedBy());
        itemMasterImpl.setAuthorizedGeneric(getAuthorizedGeneric());
        itemMasterImpl.setItemStartDate(getItemStartDate());
        itemMasterImpl.setNdc9(getNdc9());
        itemMasterImpl.setAuthorizedGenericEndDate(getAuthorizedGenericEndDate());
        itemMasterImpl.setItemNo(getItemNo());
        itemMasterImpl.setPackageSize(getPackageSize());
        itemMasterImpl.setNdc8(getNdc8());
        itemMasterImpl.setBaseCpi(getBaseCpi());
        itemMasterImpl.setLabelerCode(getLabelerCode());
        itemMasterImpl.setItemClass(getItemClass());
        itemMasterImpl.setClottingFactorEndDate(getClottingFactorEndDate());
        itemMasterImpl.setDra(getDra());
        itemMasterImpl.setBaseCpiPeriod(getBaseCpiPeriod());
        itemMasterImpl.setNewFormulationIndicator(getNewFormulationIndicator());
        itemMasterImpl.setLastLotExpirationDate(getLastLotExpirationDate());
        itemMasterImpl.setBatchId(getBatchId());
        itemMasterImpl.setItemCode(getItemCode());
        itemMasterImpl.setClottingFactorStartDate(getClottingFactorStartDate());
        itemMasterImpl.setNonFederalExpirationDate(getNonFederalExpirationDate());
        itemMasterImpl.setInternalNotes(getInternalNotes());
        itemMasterImpl.setBaseCpiPrecision(getBaseCpiPrecision());
        itemMasterImpl.setBaselineAmpPrecision(getBaselineAmpPrecision());

        itemMasterImpl.resetOriginalValues();

        return itemMasterImpl;
    }

    @Override
    public int compareTo(ItemMaster itemMaster) {
        int primaryKey = itemMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ItemMaster)) {
            return false;
        }

        ItemMaster itemMaster = (ItemMaster) obj;

        int primaryKey = itemMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ItemMasterModelImpl itemMasterModelImpl = this;

        itemMasterModelImpl._originalItemStatus = itemMasterModelImpl._itemStatus;

        itemMasterModelImpl._setOriginalItemStatus = false;

        itemMasterModelImpl._originalPrimaryUom = itemMasterModelImpl._primaryUom;

        itemMasterModelImpl._setOriginalPrimaryUom = false;

        itemMasterModelImpl._originalManufacturerId = itemMasterModelImpl._manufacturerId;

        itemMasterModelImpl._originalStrength = itemMasterModelImpl._strength;

        itemMasterModelImpl._setOriginalStrength = false;

        itemMasterModelImpl._originalForm = itemMasterModelImpl._form;

        itemMasterModelImpl._setOriginalForm = false;

        itemMasterModelImpl._originalItemName = itemMasterModelImpl._itemName;

        itemMasterModelImpl._originalItemType = itemMasterModelImpl._itemType;

        itemMasterModelImpl._setOriginalItemType = false;

        itemMasterModelImpl._originalItemId = itemMasterModelImpl._itemId;

        itemMasterModelImpl._originalItemNo = itemMasterModelImpl._itemNo;

        itemMasterModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ItemMaster> toCacheModel() {
        ItemMasterCacheModel itemMasterCacheModel = new ItemMasterCacheModel();

        itemMasterCacheModel.itemStatus = getItemStatus();

        itemMasterCacheModel.itemDesc = getItemDesc();

        String itemDesc = itemMasterCacheModel.itemDesc;

        if ((itemDesc != null) && (itemDesc.length() == 0)) {
            itemMasterCacheModel.itemDesc = null;
        }

        Date authorizedGenericStartDate = getAuthorizedGenericStartDate();

        if (authorizedGenericStartDate != null) {
            itemMasterCacheModel.authorizedGenericStartDate = authorizedGenericStartDate.getTime();
        } else {
            itemMasterCacheModel.authorizedGenericStartDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.acquiredAmp = getAcquiredAmp();

        Date newFormulationStartDate = getNewFormulationStartDate();

        if (newFormulationStartDate != null) {
            itemMasterCacheModel.newFormulationStartDate = newFormulationStartDate.getTime();
        } else {
            itemMasterCacheModel.newFormulationStartDate = Long.MIN_VALUE;
        }

        Date marketTerminationDate = getMarketTerminationDate();

        if (marketTerminationDate != null) {
            itemMasterCacheModel.marketTerminationDate = marketTerminationDate.getTime();
        } else {
            itemMasterCacheModel.marketTerminationDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.obraBamp = getObraBamp();

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            itemMasterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            itemMasterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.therapeuticClass = getTherapeuticClass();

        itemMasterCacheModel.organizationKey = getOrganizationKey();

        itemMasterCacheModel.acquiredBamp = getAcquiredBamp();

        Date pediatricExclusiveEndDate = getPediatricExclusiveEndDate();

        if (pediatricExclusiveEndDate != null) {
            itemMasterCacheModel.pediatricExclusiveEndDate = pediatricExclusiveEndDate.getTime();
        } else {
            itemMasterCacheModel.pediatricExclusiveEndDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.source = getSource();

        String source = itemMasterCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            itemMasterCacheModel.source = null;
        }

        itemMasterCacheModel.newFormulation = getNewFormulation();

        String newFormulation = itemMasterCacheModel.newFormulation;

        if ((newFormulation != null) && (newFormulation.length() == 0)) {
            itemMasterCacheModel.newFormulation = null;
        }

        Date divestitureDate = getDivestitureDate();

        if (divestitureDate != null) {
            itemMasterCacheModel.divestitureDate = divestitureDate.getTime();
        } else {
            itemMasterCacheModel.divestitureDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.primaryUom = getPrimaryUom();

        Date newFormulationEndDate = getNewFormulationEndDate();

        if (newFormulationEndDate != null) {
            itemMasterCacheModel.newFormulationEndDate = newFormulationEndDate.getTime();
        } else {
            itemMasterCacheModel.newFormulationEndDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.modifiedBy = getModifiedBy();

        itemMasterCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = itemMasterCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            itemMasterCacheModel.inboundStatus = null;
        }

        itemMasterCacheModel.packageSizeCode = getPackageSizeCode();

        String packageSizeCode = itemMasterCacheModel.packageSizeCode;

        if ((packageSizeCode != null) && (packageSizeCode.length() == 0)) {
            itemMasterCacheModel.packageSizeCode = null;
        }

        itemMasterCacheModel.secondaryUom = getSecondaryUom();

        Date discontinuationDate = getDiscontinuationDate();

        if (discontinuationDate != null) {
            itemMasterCacheModel.discontinuationDate = discontinuationDate.getTime();
        } else {
            itemMasterCacheModel.discontinuationDate = Long.MIN_VALUE;
        }

        Date packageSizeIntroDate = getPackageSizeIntroDate();

        if (packageSizeIntroDate != null) {
            itemMasterCacheModel.packageSizeIntroDate = packageSizeIntroDate.getTime();
        } else {
            itemMasterCacheModel.packageSizeIntroDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.manufacturerId = getManufacturerId();

        String manufacturerId = itemMasterCacheModel.manufacturerId;

        if ((manufacturerId != null) && (manufacturerId.length() == 0)) {
            itemMasterCacheModel.manufacturerId = null;
        }

        Date itemEndDate = getItemEndDate();

        if (itemEndDate != null) {
            itemMasterCacheModel.itemEndDate = itemEndDate.getTime();
        } else {
            itemMasterCacheModel.itemEndDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.itemFamilyId = getItemFamilyId();

        String itemFamilyId = itemMasterCacheModel.itemFamilyId;

        if ((itemFamilyId != null) && (itemFamilyId.length() == 0)) {
            itemMasterCacheModel.itemFamilyId = null;
        }

        itemMasterCacheModel.strength = getStrength();

        itemMasterCacheModel.itemCategory = getItemCategory();

        itemMasterCacheModel.upps = getUpps();

        itemMasterCacheModel.shelfLifeType = getShelfLifeType();

        itemMasterCacheModel.pediatricExclusiveIndicator = getPediatricExclusiveIndicator();

        String pediatricExclusiveIndicator = itemMasterCacheModel.pediatricExclusiveIndicator;

        if ((pediatricExclusiveIndicator != null) &&
                (pediatricExclusiveIndicator.length() == 0)) {
            itemMasterCacheModel.pediatricExclusiveIndicator = null;
        }

        itemMasterCacheModel.recordLockStatus = getRecordLockStatus();

        itemMasterCacheModel.itemTypeIndication = getItemTypeIndication();

        String itemTypeIndication = itemMasterCacheModel.itemTypeIndication;

        if ((itemTypeIndication != null) && (itemTypeIndication.length() == 0)) {
            itemMasterCacheModel.itemTypeIndication = null;
        }

        Date acquisitionDate = getAcquisitionDate();

        if (acquisitionDate != null) {
            itemMasterCacheModel.acquisitionDate = acquisitionDate.getTime();
        } else {
            itemMasterCacheModel.acquisitionDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.clottingFactorIndicator = getClottingFactorIndicator();

        String clottingFactorIndicator = itemMasterCacheModel.clottingFactorIndicator;

        if ((clottingFactorIndicator != null) &&
                (clottingFactorIndicator.length() == 0)) {
            itemMasterCacheModel.clottingFactorIndicator = null;
        }

        itemMasterCacheModel.form = getForm();

        itemMasterCacheModel.itemName = getItemName();

        String itemName = itemMasterCacheModel.itemName;

        if ((itemName != null) && (itemName.length() == 0)) {
            itemMasterCacheModel.itemName = null;
        }

        itemMasterCacheModel.shelfLife = getShelfLife();

        String shelfLife = itemMasterCacheModel.shelfLife;

        if ((shelfLife != null) && (shelfLife.length() == 0)) {
            itemMasterCacheModel.shelfLife = null;
        }

        Date pediatricExclusiveStartDate = getPediatricExclusiveStartDate();

        if (pediatricExclusiveStartDate != null) {
            itemMasterCacheModel.pediatricExclusiveStartDate = pediatricExclusiveStartDate.getTime();
        } else {
            itemMasterCacheModel.pediatricExclusiveStartDate = Long.MIN_VALUE;
        }

        Date firstSaleDate = getFirstSaleDate();

        if (firstSaleDate != null) {
            itemMasterCacheModel.firstSaleDate = firstSaleDate.getTime();
        } else {
            itemMasterCacheModel.firstSaleDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.itemMasterSid = getItemMasterSid();

        itemMasterCacheModel.itemType = getItemType();

        itemMasterCacheModel.itemId = getItemId();

        String itemId = itemMasterCacheModel.itemId;

        if ((itemId != null) && (itemId.length() == 0)) {
            itemMasterCacheModel.itemId = null;
        }

        itemMasterCacheModel.brandMasterSid = getBrandMasterSid();

        itemMasterCacheModel.baselineAmp = getBaselineAmp();

        itemMasterCacheModel.dualPricingIndicator = getDualPricingIndicator();

        String dualPricingIndicator = itemMasterCacheModel.dualPricingIndicator;

        if ((dualPricingIndicator != null) &&
                (dualPricingIndicator.length() == 0)) {
            itemMasterCacheModel.dualPricingIndicator = null;
        }

        itemMasterCacheModel.dosesPerUnit = getDosesPerUnit();

        String dosesPerUnit = itemMasterCacheModel.dosesPerUnit;

        if ((dosesPerUnit != null) && (dosesPerUnit.length() == 0)) {
            itemMasterCacheModel.dosesPerUnit = null;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            itemMasterCacheModel.createdDate = createdDate.getTime();
        } else {
            itemMasterCacheModel.createdDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.createdBy = getCreatedBy();

        itemMasterCacheModel.authorizedGeneric = getAuthorizedGeneric();

        String authorizedGeneric = itemMasterCacheModel.authorizedGeneric;

        if ((authorizedGeneric != null) && (authorizedGeneric.length() == 0)) {
            itemMasterCacheModel.authorizedGeneric = null;
        }

        Date itemStartDate = getItemStartDate();

        if (itemStartDate != null) {
            itemMasterCacheModel.itemStartDate = itemStartDate.getTime();
        } else {
            itemMasterCacheModel.itemStartDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.ndc9 = getNdc9();

        String ndc9 = itemMasterCacheModel.ndc9;

        if ((ndc9 != null) && (ndc9.length() == 0)) {
            itemMasterCacheModel.ndc9 = null;
        }

        Date authorizedGenericEndDate = getAuthorizedGenericEndDate();

        if (authorizedGenericEndDate != null) {
            itemMasterCacheModel.authorizedGenericEndDate = authorizedGenericEndDate.getTime();
        } else {
            itemMasterCacheModel.authorizedGenericEndDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.itemNo = getItemNo();

        String itemNo = itemMasterCacheModel.itemNo;

        if ((itemNo != null) && (itemNo.length() == 0)) {
            itemMasterCacheModel.itemNo = null;
        }

        itemMasterCacheModel.packageSize = getPackageSize();

        String packageSize = itemMasterCacheModel.packageSize;

        if ((packageSize != null) && (packageSize.length() == 0)) {
            itemMasterCacheModel.packageSize = null;
        }

        itemMasterCacheModel.ndc8 = getNdc8();

        String ndc8 = itemMasterCacheModel.ndc8;

        if ((ndc8 != null) && (ndc8.length() == 0)) {
            itemMasterCacheModel.ndc8 = null;
        }

        itemMasterCacheModel.baseCpi = getBaseCpi();

        itemMasterCacheModel.labelerCode = getLabelerCode();

        String labelerCode = itemMasterCacheModel.labelerCode;

        if ((labelerCode != null) && (labelerCode.length() == 0)) {
            itemMasterCacheModel.labelerCode = null;
        }

        itemMasterCacheModel.itemClass = getItemClass();

        Date clottingFactorEndDate = getClottingFactorEndDate();

        if (clottingFactorEndDate != null) {
            itemMasterCacheModel.clottingFactorEndDate = clottingFactorEndDate.getTime();
        } else {
            itemMasterCacheModel.clottingFactorEndDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.dra = getDra();

        Date baseCpiPeriod = getBaseCpiPeriod();

        if (baseCpiPeriod != null) {
            itemMasterCacheModel.baseCpiPeriod = baseCpiPeriod.getTime();
        } else {
            itemMasterCacheModel.baseCpiPeriod = Long.MIN_VALUE;
        }

        itemMasterCacheModel.newFormulationIndicator = getNewFormulationIndicator();

        String newFormulationIndicator = itemMasterCacheModel.newFormulationIndicator;

        if ((newFormulationIndicator != null) &&
                (newFormulationIndicator.length() == 0)) {
            itemMasterCacheModel.newFormulationIndicator = null;
        }

        Date lastLotExpirationDate = getLastLotExpirationDate();

        if (lastLotExpirationDate != null) {
            itemMasterCacheModel.lastLotExpirationDate = lastLotExpirationDate.getTime();
        } else {
            itemMasterCacheModel.lastLotExpirationDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.batchId = getBatchId();

        String batchId = itemMasterCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            itemMasterCacheModel.batchId = null;
        }

        itemMasterCacheModel.itemCode = getItemCode();

        String itemCode = itemMasterCacheModel.itemCode;

        if ((itemCode != null) && (itemCode.length() == 0)) {
            itemMasterCacheModel.itemCode = null;
        }

        Date clottingFactorStartDate = getClottingFactorStartDate();

        if (clottingFactorStartDate != null) {
            itemMasterCacheModel.clottingFactorStartDate = clottingFactorStartDate.getTime();
        } else {
            itemMasterCacheModel.clottingFactorStartDate = Long.MIN_VALUE;
        }

        Date nonFederalExpirationDate = getNonFederalExpirationDate();

        if (nonFederalExpirationDate != null) {
            itemMasterCacheModel.nonFederalExpirationDate = nonFederalExpirationDate.getTime();
        } else {
            itemMasterCacheModel.nonFederalExpirationDate = Long.MIN_VALUE;
        }

        itemMasterCacheModel.internalNotes = getInternalNotes();

        String internalNotes = itemMasterCacheModel.internalNotes;

        if ((internalNotes != null) && (internalNotes.length() == 0)) {
            itemMasterCacheModel.internalNotes = null;
        }

        itemMasterCacheModel.baseCpiPrecision = getBaseCpiPrecision();

        itemMasterCacheModel.baselineAmpPrecision = getBaselineAmpPrecision();

        return itemMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(143);

        sb.append("{itemStatus=");
        sb.append(getItemStatus());
        sb.append(", itemDesc=");
        sb.append(getItemDesc());
        sb.append(", authorizedGenericStartDate=");
        sb.append(getAuthorizedGenericStartDate());
        sb.append(", acquiredAmp=");
        sb.append(getAcquiredAmp());
        sb.append(", newFormulationStartDate=");
        sb.append(getNewFormulationStartDate());
        sb.append(", marketTerminationDate=");
        sb.append(getMarketTerminationDate());
        sb.append(", obraBamp=");
        sb.append(getObraBamp());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", therapeuticClass=");
        sb.append(getTherapeuticClass());
        sb.append(", organizationKey=");
        sb.append(getOrganizationKey());
        sb.append(", acquiredBamp=");
        sb.append(getAcquiredBamp());
        sb.append(", pediatricExclusiveEndDate=");
        sb.append(getPediatricExclusiveEndDate());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", newFormulation=");
        sb.append(getNewFormulation());
        sb.append(", divestitureDate=");
        sb.append(getDivestitureDate());
        sb.append(", primaryUom=");
        sb.append(getPrimaryUom());
        sb.append(", newFormulationEndDate=");
        sb.append(getNewFormulationEndDate());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append(", packageSizeCode=");
        sb.append(getPackageSizeCode());
        sb.append(", secondaryUom=");
        sb.append(getSecondaryUom());
        sb.append(", discontinuationDate=");
        sb.append(getDiscontinuationDate());
        sb.append(", packageSizeIntroDate=");
        sb.append(getPackageSizeIntroDate());
        sb.append(", manufacturerId=");
        sb.append(getManufacturerId());
        sb.append(", itemEndDate=");
        sb.append(getItemEndDate());
        sb.append(", itemFamilyId=");
        sb.append(getItemFamilyId());
        sb.append(", strength=");
        sb.append(getStrength());
        sb.append(", itemCategory=");
        sb.append(getItemCategory());
        sb.append(", upps=");
        sb.append(getUpps());
        sb.append(", shelfLifeType=");
        sb.append(getShelfLifeType());
        sb.append(", pediatricExclusiveIndicator=");
        sb.append(getPediatricExclusiveIndicator());
        sb.append(", recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", itemTypeIndication=");
        sb.append(getItemTypeIndication());
        sb.append(", acquisitionDate=");
        sb.append(getAcquisitionDate());
        sb.append(", clottingFactorIndicator=");
        sb.append(getClottingFactorIndicator());
        sb.append(", form=");
        sb.append(getForm());
        sb.append(", itemName=");
        sb.append(getItemName());
        sb.append(", shelfLife=");
        sb.append(getShelfLife());
        sb.append(", pediatricExclusiveStartDate=");
        sb.append(getPediatricExclusiveStartDate());
        sb.append(", firstSaleDate=");
        sb.append(getFirstSaleDate());
        sb.append(", itemMasterSid=");
        sb.append(getItemMasterSid());
        sb.append(", itemType=");
        sb.append(getItemType());
        sb.append(", itemId=");
        sb.append(getItemId());
        sb.append(", brandMasterSid=");
        sb.append(getBrandMasterSid());
        sb.append(", baselineAmp=");
        sb.append(getBaselineAmp());
        sb.append(", dualPricingIndicator=");
        sb.append(getDualPricingIndicator());
        sb.append(", dosesPerUnit=");
        sb.append(getDosesPerUnit());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", authorizedGeneric=");
        sb.append(getAuthorizedGeneric());
        sb.append(", itemStartDate=");
        sb.append(getItemStartDate());
        sb.append(", ndc9=");
        sb.append(getNdc9());
        sb.append(", authorizedGenericEndDate=");
        sb.append(getAuthorizedGenericEndDate());
        sb.append(", itemNo=");
        sb.append(getItemNo());
        sb.append(", packageSize=");
        sb.append(getPackageSize());
        sb.append(", ndc8=");
        sb.append(getNdc8());
        sb.append(", baseCpi=");
        sb.append(getBaseCpi());
        sb.append(", labelerCode=");
        sb.append(getLabelerCode());
        sb.append(", itemClass=");
        sb.append(getItemClass());
        sb.append(", clottingFactorEndDate=");
        sb.append(getClottingFactorEndDate());
        sb.append(", dra=");
        sb.append(getDra());
        sb.append(", baseCpiPeriod=");
        sb.append(getBaseCpiPeriod());
        sb.append(", newFormulationIndicator=");
        sb.append(getNewFormulationIndicator());
        sb.append(", lastLotExpirationDate=");
        sb.append(getLastLotExpirationDate());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", itemCode=");
        sb.append(getItemCode());
        sb.append(", clottingFactorStartDate=");
        sb.append(getClottingFactorStartDate());
        sb.append(", nonFederalExpirationDate=");
        sb.append(getNonFederalExpirationDate());
        sb.append(", internalNotes=");
        sb.append(getInternalNotes());
        sb.append(", baseCpiPrecision=");
        sb.append(getBaseCpiPrecision());
        sb.append(", baselineAmpPrecision=");
        sb.append(getBaselineAmpPrecision());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(217);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.ItemMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>itemStatus</column-name><column-value><![CDATA[");
        sb.append(getItemStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemDesc</column-name><column-value><![CDATA[");
        sb.append(getItemDesc());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorizedGenericStartDate</column-name><column-value><![CDATA[");
        sb.append(getAuthorizedGenericStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>acquiredAmp</column-name><column-value><![CDATA[");
        sb.append(getAcquiredAmp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newFormulationStartDate</column-name><column-value><![CDATA[");
        sb.append(getNewFormulationStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketTerminationDate</column-name><column-value><![CDATA[");
        sb.append(getMarketTerminationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>obraBamp</column-name><column-value><![CDATA[");
        sb.append(getObraBamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>therapeuticClass</column-name><column-value><![CDATA[");
        sb.append(getTherapeuticClass());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationKey</column-name><column-value><![CDATA[");
        sb.append(getOrganizationKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>acquiredBamp</column-name><column-value><![CDATA[");
        sb.append(getAcquiredBamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pediatricExclusiveEndDate</column-name><column-value><![CDATA[");
        sb.append(getPediatricExclusiveEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newFormulation</column-name><column-value><![CDATA[");
        sb.append(getNewFormulation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>divestitureDate</column-name><column-value><![CDATA[");
        sb.append(getDivestitureDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>primaryUom</column-name><column-value><![CDATA[");
        sb.append(getPrimaryUom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newFormulationEndDate</column-name><column-value><![CDATA[");
        sb.append(getNewFormulationEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageSizeCode</column-name><column-value><![CDATA[");
        sb.append(getPackageSizeCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>secondaryUom</column-name><column-value><![CDATA[");
        sb.append(getSecondaryUom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discontinuationDate</column-name><column-value><![CDATA[");
        sb.append(getDiscontinuationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageSizeIntroDate</column-name><column-value><![CDATA[");
        sb.append(getPackageSizeIntroDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>manufacturerId</column-name><column-value><![CDATA[");
        sb.append(getManufacturerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemEndDate</column-name><column-value><![CDATA[");
        sb.append(getItemEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemFamilyId</column-name><column-value><![CDATA[");
        sb.append(getItemFamilyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>strength</column-name><column-value><![CDATA[");
        sb.append(getStrength());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemCategory</column-name><column-value><![CDATA[");
        sb.append(getItemCategory());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>upps</column-name><column-value><![CDATA[");
        sb.append(getUpps());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shelfLifeType</column-name><column-value><![CDATA[");
        sb.append(getShelfLifeType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pediatricExclusiveIndicator</column-name><column-value><![CDATA[");
        sb.append(getPediatricExclusiveIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemTypeIndication</column-name><column-value><![CDATA[");
        sb.append(getItemTypeIndication());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>acquisitionDate</column-name><column-value><![CDATA[");
        sb.append(getAcquisitionDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clottingFactorIndicator</column-name><column-value><![CDATA[");
        sb.append(getClottingFactorIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>form</column-name><column-value><![CDATA[");
        sb.append(getForm());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemName</column-name><column-value><![CDATA[");
        sb.append(getItemName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shelfLife</column-name><column-value><![CDATA[");
        sb.append(getShelfLife());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pediatricExclusiveStartDate</column-name><column-value><![CDATA[");
        sb.append(getPediatricExclusiveStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstSaleDate</column-name><column-value><![CDATA[");
        sb.append(getFirstSaleDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
        sb.append(getItemMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemType</column-name><column-value><![CDATA[");
        sb.append(getItemType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemId</column-name><column-value><![CDATA[");
        sb.append(getItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandMasterSid</column-name><column-value><![CDATA[");
        sb.append(getBrandMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baselineAmp</column-name><column-value><![CDATA[");
        sb.append(getBaselineAmp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dualPricingIndicator</column-name><column-value><![CDATA[");
        sb.append(getDualPricingIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dosesPerUnit</column-name><column-value><![CDATA[");
        sb.append(getDosesPerUnit());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorizedGeneric</column-name><column-value><![CDATA[");
        sb.append(getAuthorizedGeneric());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemStartDate</column-name><column-value><![CDATA[");
        sb.append(getItemStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ndc9</column-name><column-value><![CDATA[");
        sb.append(getNdc9());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorizedGenericEndDate</column-name><column-value><![CDATA[");
        sb.append(getAuthorizedGenericEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemNo</column-name><column-value><![CDATA[");
        sb.append(getItemNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageSize</column-name><column-value><![CDATA[");
        sb.append(getPackageSize());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ndc8</column-name><column-value><![CDATA[");
        sb.append(getNdc8());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baseCpi</column-name><column-value><![CDATA[");
        sb.append(getBaseCpi());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>labelerCode</column-name><column-value><![CDATA[");
        sb.append(getLabelerCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemClass</column-name><column-value><![CDATA[");
        sb.append(getItemClass());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clottingFactorEndDate</column-name><column-value><![CDATA[");
        sb.append(getClottingFactorEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dra</column-name><column-value><![CDATA[");
        sb.append(getDra());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baseCpiPeriod</column-name><column-value><![CDATA[");
        sb.append(getBaseCpiPeriod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newFormulationIndicator</column-name><column-value><![CDATA[");
        sb.append(getNewFormulationIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastLotExpirationDate</column-name><column-value><![CDATA[");
        sb.append(getLastLotExpirationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemCode</column-name><column-value><![CDATA[");
        sb.append(getItemCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clottingFactorStartDate</column-name><column-value><![CDATA[");
        sb.append(getClottingFactorStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nonFederalExpirationDate</column-name><column-value><![CDATA[");
        sb.append(getNonFederalExpirationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>internalNotes</column-name><column-value><![CDATA[");
        sb.append(getInternalNotes());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baseCpiPrecision</column-name><column-value><![CDATA[");
        sb.append(getBaseCpiPrecision());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baselineAmpPrecision</column-name><column-value><![CDATA[");
        sb.append(getBaselineAmpPrecision());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
