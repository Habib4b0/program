/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.parttwo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.parttwo.model.VwCustomerGtsForecast;
import com.stpl.app.parttwo.model.VwCustomerGtsForecastModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VwCustomerGtsForecast service. Represents a row in the &quot;VW_CUSTOMER_GTS_FORECAST&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VwCustomerGtsForecastModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VwCustomerGtsForecastImpl}.
 * </p>
 *
 * @author
 * @see VwCustomerGtsForecastImpl
 * @see VwCustomerGtsForecast
 * @see VwCustomerGtsForecastModel
 * @generated
 */
@ProviderType
public class VwCustomerGtsForecastModelImpl extends BaseModelImpl<VwCustomerGtsForecast>
	implements VwCustomerGtsForecastModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vw customer gts forecast model instance should use the {@link VwCustomerGtsForecast} interface instead.
	 */
	public static final String TABLE_NAME = "VW_CUSTOMER_GTS_FORECAST";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PRICE", Types.DOUBLE },
			{ "FORECAST_YEAR", Types.VARCHAR },
			{ "DEDUCTION_AMOUNT", Types.DOUBLE },
			{ "DEDUCTION_ID", Types.VARCHAR },
			{ "FORECAST_DATE", Types.TIMESTAMP },
			{ "ITEM_ID", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "SOURCE", Types.VARCHAR },
			{ "CREATED_BY", Types.VARCHAR },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "ADD_CHG_DEL_INDICATOR", Types.VARCHAR },
			{ "MODIFIED_BY", Types.VARCHAR },
			{ "SALES_AMOUNT", Types.DOUBLE },
			{ "UDC6", Types.VARCHAR },
			{ "UDC5", Types.VARCHAR },
			{ "DEDUCTION_TYPE", Types.VARCHAR },
			{ "UDC4", Types.VARCHAR },
			{ "UNITS", Types.DOUBLE },
			{ "DEDUCTION_RATE", Types.DOUBLE },
			{ "UDC1", Types.VARCHAR },
			{ "CUSTOMER_GTS_FORECAST_SID", Types.INTEGER },
			{ "UDC2", Types.VARCHAR },
			{ "UDC3", Types.VARCHAR },
			{ "COUNTRY", Types.VARCHAR },
			{ "COMPANY_ID", Types.VARCHAR },
			{ "FORECAST_VALUE_TYPE", Types.VARCHAR },
			{ "DEDUCTION_CATEGORY", Types.VARCHAR },
			{ "ADJUSTMENT_CODE", Types.VARCHAR },
			{ "DEDUCTION_PROGRAM_TYPE", Types.VARCHAR },
			{ "CUSTOMER_GTS_FORECAST_INTF_ID", Types.INTEGER },
			{ "SALES_INCLUSION", Types.VARCHAR },
			{ "FORECAST_VER", Types.VARCHAR },
			{ "BATCH_ID", Types.VARCHAR },
			{ "PRICE_TYPE", Types.VARCHAR },
			{ "FORECAST_MONTH", Types.VARCHAR },
			{ "DEDUCTION_INCLUSION", Types.VARCHAR },
			{ "SEGMENT", Types.VARCHAR },
			{ "BRAND", Types.VARCHAR },
			{ "FORECAST_NAME", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("FORECAST_YEAR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("DEDUCTION_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ITEM_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ADD_CHG_DEL_INDICATOR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SALES_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("UDC6", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UDC5", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UDC4", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UNITS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("DEDUCTION_RATE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("UDC1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CUSTOMER_GTS_FORECAST_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UDC3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COUNTRY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COMPANY_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_VALUE_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_CATEGORY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ADJUSTMENT_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_PROGRAM_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CUSTOMER_GTS_FORECAST_INTF_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SALES_INCLUSION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_VER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PRICE_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_MONTH", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_INCLUSION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SEGMENT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BRAND", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORECAST_NAME", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table VW_CUSTOMER_GTS_FORECAST (PRICE DOUBLE,FORECAST_YEAR VARCHAR(75) null,DEDUCTION_AMOUNT DOUBLE,DEDUCTION_ID VARCHAR(75) null,FORECAST_DATE DATE null,ITEM_ID VARCHAR(75) null,MODIFIED_DATE DATE null,SOURCE VARCHAR(75) null,CREATED_BY VARCHAR(75) null,CREATED_DATE DATE null,ADD_CHG_DEL_INDICATOR VARCHAR(75) null,MODIFIED_BY VARCHAR(75) null,SALES_AMOUNT DOUBLE,UDC6 VARCHAR(75) null,UDC5 VARCHAR(75) null,DEDUCTION_TYPE VARCHAR(75) null,UDC4 VARCHAR(75) null,UNITS DOUBLE,DEDUCTION_RATE DOUBLE,UDC1 VARCHAR(75) null,CUSTOMER_GTS_FORECAST_SID INTEGER not null primary key,UDC2 VARCHAR(75) null,UDC3 VARCHAR(75) null,COUNTRY VARCHAR(75) null,COMPANY_ID VARCHAR(75) null,FORECAST_VALUE_TYPE VARCHAR(75) null,DEDUCTION_CATEGORY VARCHAR(75) null,ADJUSTMENT_CODE VARCHAR(75) null,DEDUCTION_PROGRAM_TYPE VARCHAR(75) null,CUSTOMER_GTS_FORECAST_INTF_ID INTEGER,SALES_INCLUSION VARCHAR(75) null,FORECAST_VER VARCHAR(75) null,BATCH_ID VARCHAR(75) null,PRICE_TYPE VARCHAR(75) null,FORECAST_MONTH VARCHAR(75) null,DEDUCTION_INCLUSION VARCHAR(75) null,SEGMENT VARCHAR(75) null,BRAND VARCHAR(75) null,FORECAST_NAME VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table VW_CUSTOMER_GTS_FORECAST";
	public static final String ORDER_BY_JPQL = " ORDER BY vwCustomerGtsForecast.customerGtsForecastSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY VW_CUSTOMER_GTS_FORECAST.CUSTOMER_GTS_FORECAST_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.parttwo.model.VwCustomerGtsForecast"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.parttwo.model.VwCustomerGtsForecast"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.parttwo.model.VwCustomerGtsForecast"));

	public VwCustomerGtsForecastModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _customerGtsForecastSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setCustomerGtsForecastSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _customerGtsForecastSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VwCustomerGtsForecast.class;
	}

	@Override
	public String getModelClassName() {
		return VwCustomerGtsForecast.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("price", getPrice());
		attributes.put("forecastYear", getForecastYear());
		attributes.put("deductionAmount", getDeductionAmount());
		attributes.put("deductionId", getDeductionId());
		attributes.put("forecastDate", getForecastDate());
		attributes.put("itemId", getItemId());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("source", getSource());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("addChgDelIndicator", getAddChgDelIndicator());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("salesAmount", getSalesAmount());
		attributes.put("udc6", getUdc6());
		attributes.put("udc5", getUdc5());
		attributes.put("deductionType", getDeductionType());
		attributes.put("udc4", getUdc4());
		attributes.put("units", getUnits());
		attributes.put("deductionRate", getDeductionRate());
		attributes.put("udc1", getUdc1());
		attributes.put("customerGtsForecastSid", getCustomerGtsForecastSid());
		attributes.put("udc2", getUdc2());
		attributes.put("udc3", getUdc3());
		attributes.put("country", getCountry());
		attributes.put("companyIdString", getCompanyIdString());
		attributes.put("forecastValueType", getForecastValueType());
		attributes.put("deductionCategory", getDeductionCategory());
		attributes.put("adjustmentCode", getAdjustmentCode());
		attributes.put("deductionProgramType", getDeductionProgramType());
		attributes.put("customerGtsForecastIntfId",
			getCustomerGtsForecastIntfId());
		attributes.put("salesInclusion", getSalesInclusion());
		attributes.put("forecastVer", getForecastVer());
		attributes.put("batchId", getBatchId());
		attributes.put("priceType", getPriceType());
		attributes.put("forecastMonth", getForecastMonth());
		attributes.put("deductionInclusion", getDeductionInclusion());
		attributes.put("segment", getSegment());
		attributes.put("brand", getBrand());
		attributes.put("forecastName", getForecastName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Double price = (Double)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		String forecastYear = (String)attributes.get("forecastYear");

		if (forecastYear != null) {
			setForecastYear(forecastYear);
		}

		Double deductionAmount = (Double)attributes.get("deductionAmount");

		if (deductionAmount != null) {
			setDeductionAmount(deductionAmount);
		}

		String deductionId = (String)attributes.get("deductionId");

		if (deductionId != null) {
			setDeductionId(deductionId);
		}

		Date forecastDate = (Date)attributes.get("forecastDate");

		if (forecastDate != null) {
			setForecastDate(forecastDate);
		}

		String itemId = (String)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String addChgDelIndicator = (String)attributes.get("addChgDelIndicator");

		if (addChgDelIndicator != null) {
			setAddChgDelIndicator(addChgDelIndicator);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Double salesAmount = (Double)attributes.get("salesAmount");

		if (salesAmount != null) {
			setSalesAmount(salesAmount);
		}

		String udc6 = (String)attributes.get("udc6");

		if (udc6 != null) {
			setUdc6(udc6);
		}

		String udc5 = (String)attributes.get("udc5");

		if (udc5 != null) {
			setUdc5(udc5);
		}

		String deductionType = (String)attributes.get("deductionType");

		if (deductionType != null) {
			setDeductionType(deductionType);
		}

		String udc4 = (String)attributes.get("udc4");

		if (udc4 != null) {
			setUdc4(udc4);
		}

		Double units = (Double)attributes.get("units");

		if (units != null) {
			setUnits(units);
		}

		Double deductionRate = (Double)attributes.get("deductionRate");

		if (deductionRate != null) {
			setDeductionRate(deductionRate);
		}

		String udc1 = (String)attributes.get("udc1");

		if (udc1 != null) {
			setUdc1(udc1);
		}

		Integer customerGtsForecastSid = (Integer)attributes.get(
				"customerGtsForecastSid");

		if (customerGtsForecastSid != null) {
			setCustomerGtsForecastSid(customerGtsForecastSid);
		}

		String udc2 = (String)attributes.get("udc2");

		if (udc2 != null) {
			setUdc2(udc2);
		}

		String udc3 = (String)attributes.get("udc3");

		if (udc3 != null) {
			setUdc3(udc3);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		String companyIdString = (String)attributes.get("companyIdString");

		if (companyIdString != null) {
			setCompanyIdString(companyIdString);
		}

		String forecastValueType = (String)attributes.get("forecastValueType");

		if (forecastValueType != null) {
			setForecastValueType(forecastValueType);
		}

		String deductionCategory = (String)attributes.get("deductionCategory");

		if (deductionCategory != null) {
			setDeductionCategory(deductionCategory);
		}

		String adjustmentCode = (String)attributes.get("adjustmentCode");

		if (adjustmentCode != null) {
			setAdjustmentCode(adjustmentCode);
		}

		String deductionProgramType = (String)attributes.get(
				"deductionProgramType");

		if (deductionProgramType != null) {
			setDeductionProgramType(deductionProgramType);
		}

		Integer customerGtsForecastIntfId = (Integer)attributes.get(
				"customerGtsForecastIntfId");

		if (customerGtsForecastIntfId != null) {
			setCustomerGtsForecastIntfId(customerGtsForecastIntfId);
		}

		String salesInclusion = (String)attributes.get("salesInclusion");

		if (salesInclusion != null) {
			setSalesInclusion(salesInclusion);
		}

		String forecastVer = (String)attributes.get("forecastVer");

		if (forecastVer != null) {
			setForecastVer(forecastVer);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		String priceType = (String)attributes.get("priceType");

		if (priceType != null) {
			setPriceType(priceType);
		}

		String forecastMonth = (String)attributes.get("forecastMonth");

		if (forecastMonth != null) {
			setForecastMonth(forecastMonth);
		}

		String deductionInclusion = (String)attributes.get("deductionInclusion");

		if (deductionInclusion != null) {
			setDeductionInclusion(deductionInclusion);
		}

		String segment = (String)attributes.get("segment");

		if (segment != null) {
			setSegment(segment);
		}

		String brand = (String)attributes.get("brand");

		if (brand != null) {
			setBrand(brand);
		}

		String forecastName = (String)attributes.get("forecastName");

		if (forecastName != null) {
			setForecastName(forecastName);
		}
	}

	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	@Override
	public String getForecastYear() {
		if (_forecastYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastYear;
		}
	}

	@Override
	public void setForecastYear(String forecastYear) {
		_forecastYear = forecastYear;
	}

	@Override
	public double getDeductionAmount() {
		return _deductionAmount;
	}

	@Override
	public void setDeductionAmount(double deductionAmount) {
		_deductionAmount = deductionAmount;
	}

	@Override
	public String getDeductionId() {
		if (_deductionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionId;
		}
	}

	@Override
	public void setDeductionId(String deductionId) {
		_deductionId = deductionId;
	}

	@Override
	public Date getForecastDate() {
		return _forecastDate;
	}

	@Override
	public void setForecastDate(Date forecastDate) {
		_forecastDate = forecastDate;
	}

	@Override
	public String getItemId() {
		if (_itemId == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemId;
		}
	}

	@Override
	public void setItemId(String itemId) {
		_itemId = itemId;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getAddChgDelIndicator() {
		if (_addChgDelIndicator == null) {
			return StringPool.BLANK;
		}
		else {
			return _addChgDelIndicator;
		}
	}

	@Override
	public void setAddChgDelIndicator(String addChgDelIndicator) {
		_addChgDelIndicator = addChgDelIndicator;
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public double getSalesAmount() {
		return _salesAmount;
	}

	@Override
	public void setSalesAmount(double salesAmount) {
		_salesAmount = salesAmount;
	}

	@Override
	public String getUdc6() {
		if (_udc6 == null) {
			return StringPool.BLANK;
		}
		else {
			return _udc6;
		}
	}

	@Override
	public void setUdc6(String udc6) {
		_udc6 = udc6;
	}

	@Override
	public String getUdc5() {
		if (_udc5 == null) {
			return StringPool.BLANK;
		}
		else {
			return _udc5;
		}
	}

	@Override
	public void setUdc5(String udc5) {
		_udc5 = udc5;
	}

	@Override
	public String getDeductionType() {
		if (_deductionType == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionType;
		}
	}

	@Override
	public void setDeductionType(String deductionType) {
		_deductionType = deductionType;
	}

	@Override
	public String getUdc4() {
		if (_udc4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _udc4;
		}
	}

	@Override
	public void setUdc4(String udc4) {
		_udc4 = udc4;
	}

	@Override
	public double getUnits() {
		return _units;
	}

	@Override
	public void setUnits(double units) {
		_units = units;
	}

	@Override
	public double getDeductionRate() {
		return _deductionRate;
	}

	@Override
	public void setDeductionRate(double deductionRate) {
		_deductionRate = deductionRate;
	}

	@Override
	public String getUdc1() {
		if (_udc1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _udc1;
		}
	}

	@Override
	public void setUdc1(String udc1) {
		_udc1 = udc1;
	}

	@Override
	public int getCustomerGtsForecastSid() {
		return _customerGtsForecastSid;
	}

	@Override
	public void setCustomerGtsForecastSid(int customerGtsForecastSid) {
		_customerGtsForecastSid = customerGtsForecastSid;
	}

	@Override
	public String getUdc2() {
		if (_udc2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _udc2;
		}
	}

	@Override
	public void setUdc2(String udc2) {
		_udc2 = udc2;
	}

	@Override
	public String getUdc3() {
		if (_udc3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _udc3;
		}
	}

	@Override
	public void setUdc3(String udc3) {
		_udc3 = udc3;
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public String getCompanyIdString() {
		if (_companyIdString == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyIdString;
		}
	}

	@Override
	public void setCompanyIdString(String companyIdString) {
		_companyIdString = companyIdString;
	}

	@Override
	public String getForecastValueType() {
		if (_forecastValueType == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastValueType;
		}
	}

	@Override
	public void setForecastValueType(String forecastValueType) {
		_forecastValueType = forecastValueType;
	}

	@Override
	public String getDeductionCategory() {
		if (_deductionCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionCategory;
		}
	}

	@Override
	public void setDeductionCategory(String deductionCategory) {
		_deductionCategory = deductionCategory;
	}

	@Override
	public String getAdjustmentCode() {
		if (_adjustmentCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _adjustmentCode;
		}
	}

	@Override
	public void setAdjustmentCode(String adjustmentCode) {
		_adjustmentCode = adjustmentCode;
	}

	@Override
	public String getDeductionProgramType() {
		if (_deductionProgramType == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionProgramType;
		}
	}

	@Override
	public void setDeductionProgramType(String deductionProgramType) {
		_deductionProgramType = deductionProgramType;
	}

	@Override
	public int getCustomerGtsForecastIntfId() {
		return _customerGtsForecastIntfId;
	}

	@Override
	public void setCustomerGtsForecastIntfId(int customerGtsForecastIntfId) {
		_customerGtsForecastIntfId = customerGtsForecastIntfId;
	}

	@Override
	public String getSalesInclusion() {
		if (_salesInclusion == null) {
			return StringPool.BLANK;
		}
		else {
			return _salesInclusion;
		}
	}

	@Override
	public void setSalesInclusion(String salesInclusion) {
		_salesInclusion = salesInclusion;
	}

	@Override
	public String getForecastVer() {
		if (_forecastVer == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastVer;
		}
	}

	@Override
	public void setForecastVer(String forecastVer) {
		_forecastVer = forecastVer;
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public String getPriceType() {
		if (_priceType == null) {
			return StringPool.BLANK;
		}
		else {
			return _priceType;
		}
	}

	@Override
	public void setPriceType(String priceType) {
		_priceType = priceType;
	}

	@Override
	public String getForecastMonth() {
		if (_forecastMonth == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastMonth;
		}
	}

	@Override
	public void setForecastMonth(String forecastMonth) {
		_forecastMonth = forecastMonth;
	}

	@Override
	public String getDeductionInclusion() {
		if (_deductionInclusion == null) {
			return StringPool.BLANK;
		}
		else {
			return _deductionInclusion;
		}
	}

	@Override
	public void setDeductionInclusion(String deductionInclusion) {
		_deductionInclusion = deductionInclusion;
	}

	@Override
	public String getSegment() {
		if (_segment == null) {
			return StringPool.BLANK;
		}
		else {
			return _segment;
		}
	}

	@Override
	public void setSegment(String segment) {
		_segment = segment;
	}

	@Override
	public String getBrand() {
		if (_brand == null) {
			return StringPool.BLANK;
		}
		else {
			return _brand;
		}
	}

	@Override
	public void setBrand(String brand) {
		_brand = brand;
	}

	@Override
	public String getForecastName() {
		if (_forecastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _forecastName;
		}
	}

	@Override
	public void setForecastName(String forecastName) {
		_forecastName = forecastName;
	}

	@Override
	public VwCustomerGtsForecast toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VwCustomerGtsForecast)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VwCustomerGtsForecastImpl vwCustomerGtsForecastImpl = new VwCustomerGtsForecastImpl();

		vwCustomerGtsForecastImpl.setPrice(getPrice());
		vwCustomerGtsForecastImpl.setForecastYear(getForecastYear());
		vwCustomerGtsForecastImpl.setDeductionAmount(getDeductionAmount());
		vwCustomerGtsForecastImpl.setDeductionId(getDeductionId());
		vwCustomerGtsForecastImpl.setForecastDate(getForecastDate());
		vwCustomerGtsForecastImpl.setItemId(getItemId());
		vwCustomerGtsForecastImpl.setModifiedDate(getModifiedDate());
		vwCustomerGtsForecastImpl.setSource(getSource());
		vwCustomerGtsForecastImpl.setCreatedBy(getCreatedBy());
		vwCustomerGtsForecastImpl.setCreatedDate(getCreatedDate());
		vwCustomerGtsForecastImpl.setAddChgDelIndicator(getAddChgDelIndicator());
		vwCustomerGtsForecastImpl.setModifiedBy(getModifiedBy());
		vwCustomerGtsForecastImpl.setSalesAmount(getSalesAmount());
		vwCustomerGtsForecastImpl.setUdc6(getUdc6());
		vwCustomerGtsForecastImpl.setUdc5(getUdc5());
		vwCustomerGtsForecastImpl.setDeductionType(getDeductionType());
		vwCustomerGtsForecastImpl.setUdc4(getUdc4());
		vwCustomerGtsForecastImpl.setUnits(getUnits());
		vwCustomerGtsForecastImpl.setDeductionRate(getDeductionRate());
		vwCustomerGtsForecastImpl.setUdc1(getUdc1());
		vwCustomerGtsForecastImpl.setCustomerGtsForecastSid(getCustomerGtsForecastSid());
		vwCustomerGtsForecastImpl.setUdc2(getUdc2());
		vwCustomerGtsForecastImpl.setUdc3(getUdc3());
		vwCustomerGtsForecastImpl.setCountry(getCountry());
		vwCustomerGtsForecastImpl.setCompanyIdString(getCompanyIdString());
		vwCustomerGtsForecastImpl.setForecastValueType(getForecastValueType());
		vwCustomerGtsForecastImpl.setDeductionCategory(getDeductionCategory());
		vwCustomerGtsForecastImpl.setAdjustmentCode(getAdjustmentCode());
		vwCustomerGtsForecastImpl.setDeductionProgramType(getDeductionProgramType());
		vwCustomerGtsForecastImpl.setCustomerGtsForecastIntfId(getCustomerGtsForecastIntfId());
		vwCustomerGtsForecastImpl.setSalesInclusion(getSalesInclusion());
		vwCustomerGtsForecastImpl.setForecastVer(getForecastVer());
		vwCustomerGtsForecastImpl.setBatchId(getBatchId());
		vwCustomerGtsForecastImpl.setPriceType(getPriceType());
		vwCustomerGtsForecastImpl.setForecastMonth(getForecastMonth());
		vwCustomerGtsForecastImpl.setDeductionInclusion(getDeductionInclusion());
		vwCustomerGtsForecastImpl.setSegment(getSegment());
		vwCustomerGtsForecastImpl.setBrand(getBrand());
		vwCustomerGtsForecastImpl.setForecastName(getForecastName());

		vwCustomerGtsForecastImpl.resetOriginalValues();

		return vwCustomerGtsForecastImpl;
	}

	@Override
	public int compareTo(VwCustomerGtsForecast vwCustomerGtsForecast) {
		int primaryKey = vwCustomerGtsForecast.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VwCustomerGtsForecast)) {
			return false;
		}

		VwCustomerGtsForecast vwCustomerGtsForecast = (VwCustomerGtsForecast)obj;

		int primaryKey = vwCustomerGtsForecast.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<VwCustomerGtsForecast> toCacheModel() {
		VwCustomerGtsForecastCacheModel vwCustomerGtsForecastCacheModel = new VwCustomerGtsForecastCacheModel();

		vwCustomerGtsForecastCacheModel.price = getPrice();

		vwCustomerGtsForecastCacheModel.forecastYear = getForecastYear();

		String forecastYear = vwCustomerGtsForecastCacheModel.forecastYear;

		if ((forecastYear != null) && (forecastYear.length() == 0)) {
			vwCustomerGtsForecastCacheModel.forecastYear = null;
		}

		vwCustomerGtsForecastCacheModel.deductionAmount = getDeductionAmount();

		vwCustomerGtsForecastCacheModel.deductionId = getDeductionId();

		String deductionId = vwCustomerGtsForecastCacheModel.deductionId;

		if ((deductionId != null) && (deductionId.length() == 0)) {
			vwCustomerGtsForecastCacheModel.deductionId = null;
		}

		Date forecastDate = getForecastDate();

		if (forecastDate != null) {
			vwCustomerGtsForecastCacheModel.forecastDate = forecastDate.getTime();
		}
		else {
			vwCustomerGtsForecastCacheModel.forecastDate = Long.MIN_VALUE;
		}

		vwCustomerGtsForecastCacheModel.itemId = getItemId();

		String itemId = vwCustomerGtsForecastCacheModel.itemId;

		if ((itemId != null) && (itemId.length() == 0)) {
			vwCustomerGtsForecastCacheModel.itemId = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			vwCustomerGtsForecastCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			vwCustomerGtsForecastCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		vwCustomerGtsForecastCacheModel.source = getSource();

		String source = vwCustomerGtsForecastCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			vwCustomerGtsForecastCacheModel.source = null;
		}

		vwCustomerGtsForecastCacheModel.createdBy = getCreatedBy();

		String createdBy = vwCustomerGtsForecastCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			vwCustomerGtsForecastCacheModel.createdBy = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			vwCustomerGtsForecastCacheModel.createdDate = createdDate.getTime();
		}
		else {
			vwCustomerGtsForecastCacheModel.createdDate = Long.MIN_VALUE;
		}

		vwCustomerGtsForecastCacheModel.addChgDelIndicator = getAddChgDelIndicator();

		String addChgDelIndicator = vwCustomerGtsForecastCacheModel.addChgDelIndicator;

		if ((addChgDelIndicator != null) && (addChgDelIndicator.length() == 0)) {
			vwCustomerGtsForecastCacheModel.addChgDelIndicator = null;
		}

		vwCustomerGtsForecastCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = vwCustomerGtsForecastCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			vwCustomerGtsForecastCacheModel.modifiedBy = null;
		}

		vwCustomerGtsForecastCacheModel.salesAmount = getSalesAmount();

		vwCustomerGtsForecastCacheModel.udc6 = getUdc6();

		String udc6 = vwCustomerGtsForecastCacheModel.udc6;

		if ((udc6 != null) && (udc6.length() == 0)) {
			vwCustomerGtsForecastCacheModel.udc6 = null;
		}

		vwCustomerGtsForecastCacheModel.udc5 = getUdc5();

		String udc5 = vwCustomerGtsForecastCacheModel.udc5;

		if ((udc5 != null) && (udc5.length() == 0)) {
			vwCustomerGtsForecastCacheModel.udc5 = null;
		}

		vwCustomerGtsForecastCacheModel.deductionType = getDeductionType();

		String deductionType = vwCustomerGtsForecastCacheModel.deductionType;

		if ((deductionType != null) && (deductionType.length() == 0)) {
			vwCustomerGtsForecastCacheModel.deductionType = null;
		}

		vwCustomerGtsForecastCacheModel.udc4 = getUdc4();

		String udc4 = vwCustomerGtsForecastCacheModel.udc4;

		if ((udc4 != null) && (udc4.length() == 0)) {
			vwCustomerGtsForecastCacheModel.udc4 = null;
		}

		vwCustomerGtsForecastCacheModel.units = getUnits();

		vwCustomerGtsForecastCacheModel.deductionRate = getDeductionRate();

		vwCustomerGtsForecastCacheModel.udc1 = getUdc1();

		String udc1 = vwCustomerGtsForecastCacheModel.udc1;

		if ((udc1 != null) && (udc1.length() == 0)) {
			vwCustomerGtsForecastCacheModel.udc1 = null;
		}

		vwCustomerGtsForecastCacheModel.customerGtsForecastSid = getCustomerGtsForecastSid();

		vwCustomerGtsForecastCacheModel.udc2 = getUdc2();

		String udc2 = vwCustomerGtsForecastCacheModel.udc2;

		if ((udc2 != null) && (udc2.length() == 0)) {
			vwCustomerGtsForecastCacheModel.udc2 = null;
		}

		vwCustomerGtsForecastCacheModel.udc3 = getUdc3();

		String udc3 = vwCustomerGtsForecastCacheModel.udc3;

		if ((udc3 != null) && (udc3.length() == 0)) {
			vwCustomerGtsForecastCacheModel.udc3 = null;
		}

		vwCustomerGtsForecastCacheModel.country = getCountry();

		String country = vwCustomerGtsForecastCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			vwCustomerGtsForecastCacheModel.country = null;
		}

		vwCustomerGtsForecastCacheModel.companyIdString = getCompanyIdString();

		String companyIdString = vwCustomerGtsForecastCacheModel.companyIdString;

		if ((companyIdString != null) && (companyIdString.length() == 0)) {
			vwCustomerGtsForecastCacheModel.companyIdString = null;
		}

		vwCustomerGtsForecastCacheModel.forecastValueType = getForecastValueType();

		String forecastValueType = vwCustomerGtsForecastCacheModel.forecastValueType;

		if ((forecastValueType != null) && (forecastValueType.length() == 0)) {
			vwCustomerGtsForecastCacheModel.forecastValueType = null;
		}

		vwCustomerGtsForecastCacheModel.deductionCategory = getDeductionCategory();

		String deductionCategory = vwCustomerGtsForecastCacheModel.deductionCategory;

		if ((deductionCategory != null) && (deductionCategory.length() == 0)) {
			vwCustomerGtsForecastCacheModel.deductionCategory = null;
		}

		vwCustomerGtsForecastCacheModel.adjustmentCode = getAdjustmentCode();

		String adjustmentCode = vwCustomerGtsForecastCacheModel.adjustmentCode;

		if ((adjustmentCode != null) && (adjustmentCode.length() == 0)) {
			vwCustomerGtsForecastCacheModel.adjustmentCode = null;
		}

		vwCustomerGtsForecastCacheModel.deductionProgramType = getDeductionProgramType();

		String deductionProgramType = vwCustomerGtsForecastCacheModel.deductionProgramType;

		if ((deductionProgramType != null) &&
				(deductionProgramType.length() == 0)) {
			vwCustomerGtsForecastCacheModel.deductionProgramType = null;
		}

		vwCustomerGtsForecastCacheModel.customerGtsForecastIntfId = getCustomerGtsForecastIntfId();

		vwCustomerGtsForecastCacheModel.salesInclusion = getSalesInclusion();

		String salesInclusion = vwCustomerGtsForecastCacheModel.salesInclusion;

		if ((salesInclusion != null) && (salesInclusion.length() == 0)) {
			vwCustomerGtsForecastCacheModel.salesInclusion = null;
		}

		vwCustomerGtsForecastCacheModel.forecastVer = getForecastVer();

		String forecastVer = vwCustomerGtsForecastCacheModel.forecastVer;

		if ((forecastVer != null) && (forecastVer.length() == 0)) {
			vwCustomerGtsForecastCacheModel.forecastVer = null;
		}

		vwCustomerGtsForecastCacheModel.batchId = getBatchId();

		String batchId = vwCustomerGtsForecastCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			vwCustomerGtsForecastCacheModel.batchId = null;
		}

		vwCustomerGtsForecastCacheModel.priceType = getPriceType();

		String priceType = vwCustomerGtsForecastCacheModel.priceType;

		if ((priceType != null) && (priceType.length() == 0)) {
			vwCustomerGtsForecastCacheModel.priceType = null;
		}

		vwCustomerGtsForecastCacheModel.forecastMonth = getForecastMonth();

		String forecastMonth = vwCustomerGtsForecastCacheModel.forecastMonth;

		if ((forecastMonth != null) && (forecastMonth.length() == 0)) {
			vwCustomerGtsForecastCacheModel.forecastMonth = null;
		}

		vwCustomerGtsForecastCacheModel.deductionInclusion = getDeductionInclusion();

		String deductionInclusion = vwCustomerGtsForecastCacheModel.deductionInclusion;

		if ((deductionInclusion != null) && (deductionInclusion.length() == 0)) {
			vwCustomerGtsForecastCacheModel.deductionInclusion = null;
		}

		vwCustomerGtsForecastCacheModel.segment = getSegment();

		String segment = vwCustomerGtsForecastCacheModel.segment;

		if ((segment != null) && (segment.length() == 0)) {
			vwCustomerGtsForecastCacheModel.segment = null;
		}

		vwCustomerGtsForecastCacheModel.brand = getBrand();

		String brand = vwCustomerGtsForecastCacheModel.brand;

		if ((brand != null) && (brand.length() == 0)) {
			vwCustomerGtsForecastCacheModel.brand = null;
		}

		vwCustomerGtsForecastCacheModel.forecastName = getForecastName();

		String forecastName = vwCustomerGtsForecastCacheModel.forecastName;

		if ((forecastName != null) && (forecastName.length() == 0)) {
			vwCustomerGtsForecastCacheModel.forecastName = null;
		}

		return vwCustomerGtsForecastCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(79);

		sb.append("{price=");
		sb.append(getPrice());
		sb.append(", forecastYear=");
		sb.append(getForecastYear());
		sb.append(", deductionAmount=");
		sb.append(getDeductionAmount());
		sb.append(", deductionId=");
		sb.append(getDeductionId());
		sb.append(", forecastDate=");
		sb.append(getForecastDate());
		sb.append(", itemId=");
		sb.append(getItemId());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", addChgDelIndicator=");
		sb.append(getAddChgDelIndicator());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", salesAmount=");
		sb.append(getSalesAmount());
		sb.append(", udc6=");
		sb.append(getUdc6());
		sb.append(", udc5=");
		sb.append(getUdc5());
		sb.append(", deductionType=");
		sb.append(getDeductionType());
		sb.append(", udc4=");
		sb.append(getUdc4());
		sb.append(", units=");
		sb.append(getUnits());
		sb.append(", deductionRate=");
		sb.append(getDeductionRate());
		sb.append(", udc1=");
		sb.append(getUdc1());
		sb.append(", customerGtsForecastSid=");
		sb.append(getCustomerGtsForecastSid());
		sb.append(", udc2=");
		sb.append(getUdc2());
		sb.append(", udc3=");
		sb.append(getUdc3());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", companyIdString=");
		sb.append(getCompanyIdString());
		sb.append(", forecastValueType=");
		sb.append(getForecastValueType());
		sb.append(", deductionCategory=");
		sb.append(getDeductionCategory());
		sb.append(", adjustmentCode=");
		sb.append(getAdjustmentCode());
		sb.append(", deductionProgramType=");
		sb.append(getDeductionProgramType());
		sb.append(", customerGtsForecastIntfId=");
		sb.append(getCustomerGtsForecastIntfId());
		sb.append(", salesInclusion=");
		sb.append(getSalesInclusion());
		sb.append(", forecastVer=");
		sb.append(getForecastVer());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", priceType=");
		sb.append(getPriceType());
		sb.append(", forecastMonth=");
		sb.append(getForecastMonth());
		sb.append(", deductionInclusion=");
		sb.append(getDeductionInclusion());
		sb.append(", segment=");
		sb.append(getSegment());
		sb.append(", brand=");
		sb.append(getBrand());
		sb.append(", forecastName=");
		sb.append(getForecastName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(121);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.parttwo.model.VwCustomerGtsForecast");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastYear</column-name><column-value><![CDATA[");
		sb.append(getForecastYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionAmount</column-name><column-value><![CDATA[");
		sb.append(getDeductionAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionId</column-name><column-value><![CDATA[");
		sb.append(getDeductionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastDate</column-name><column-value><![CDATA[");
		sb.append(getForecastDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addChgDelIndicator</column-name><column-value><![CDATA[");
		sb.append(getAddChgDelIndicator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>salesAmount</column-name><column-value><![CDATA[");
		sb.append(getSalesAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc6</column-name><column-value><![CDATA[");
		sb.append(getUdc6());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc5</column-name><column-value><![CDATA[");
		sb.append(getUdc5());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionType</column-name><column-value><![CDATA[");
		sb.append(getDeductionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc4</column-name><column-value><![CDATA[");
		sb.append(getUdc4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>units</column-name><column-value><![CDATA[");
		sb.append(getUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionRate</column-name><column-value><![CDATA[");
		sb.append(getDeductionRate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc1</column-name><column-value><![CDATA[");
		sb.append(getUdc1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerGtsForecastSid</column-name><column-value><![CDATA[");
		sb.append(getCustomerGtsForecastSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc2</column-name><column-value><![CDATA[");
		sb.append(getUdc2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc3</column-name><column-value><![CDATA[");
		sb.append(getUdc3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyIdString</column-name><column-value><![CDATA[");
		sb.append(getCompanyIdString());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastValueType</column-name><column-value><![CDATA[");
		sb.append(getForecastValueType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionCategory</column-name><column-value><![CDATA[");
		sb.append(getDeductionCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adjustmentCode</column-name><column-value><![CDATA[");
		sb.append(getAdjustmentCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionProgramType</column-name><column-value><![CDATA[");
		sb.append(getDeductionProgramType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerGtsForecastIntfId</column-name><column-value><![CDATA[");
		sb.append(getCustomerGtsForecastIntfId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>salesInclusion</column-name><column-value><![CDATA[");
		sb.append(getSalesInclusion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastVer</column-name><column-value><![CDATA[");
		sb.append(getForecastVer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceType</column-name><column-value><![CDATA[");
		sb.append(getPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastMonth</column-name><column-value><![CDATA[");
		sb.append(getForecastMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionInclusion</column-name><column-value><![CDATA[");
		sb.append(getDeductionInclusion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>segment</column-name><column-value><![CDATA[");
		sb.append(getSegment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brand</column-name><column-value><![CDATA[");
		sb.append(getBrand());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forecastName</column-name><column-value><![CDATA[");
		sb.append(getForecastName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VwCustomerGtsForecast.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VwCustomerGtsForecast.class
		};
	private double _price;
	private String _forecastYear;
	private double _deductionAmount;
	private String _deductionId;
	private Date _forecastDate;
	private String _itemId;
	private Date _modifiedDate;
	private String _source;
	private String _createdBy;
	private Date _createdDate;
	private String _addChgDelIndicator;
	private String _modifiedBy;
	private double _salesAmount;
	private String _udc6;
	private String _udc5;
	private String _deductionType;
	private String _udc4;
	private double _units;
	private double _deductionRate;
	private String _udc1;
	private int _customerGtsForecastSid;
	private String _udc2;
	private String _udc3;
	private String _country;
	private String _companyIdString;
	private String _forecastValueType;
	private String _deductionCategory;
	private String _adjustmentCode;
	private String _deductionProgramType;
	private int _customerGtsForecastIntfId;
	private String _salesInclusion;
	private String _forecastVer;
	private String _batchId;
	private String _priceType;
	private String _forecastMonth;
	private String _deductionInclusion;
	private String _segment;
	private String _brand;
	private String _forecastName;
	private VwCustomerGtsForecast _escapedModel;
}