package com.stpl.app.model.impl;

import com.stpl.app.model.ActualsMaster;
import com.stpl.app.model.ActualsMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ActualsMaster service. Represents a row in the &quot;ACTUALS_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.ActualsMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ActualsMasterImpl}.
 * </p>
 *
 * @author
 * @see ActualsMasterImpl
 * @see com.stpl.app.model.ActualsMaster
 * @see com.stpl.app.model.ActualsMasterModel
 * @generated
 */
public class ActualsMasterModelImpl extends BaseModelImpl<ActualsMaster>
    implements ActualsMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a actuals master model instance should use the {@link com.stpl.app.model.ActualsMaster} interface instead.
     */
    public static final String TABLE_NAME = "ACTUALS_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "QUANTITY_INCLUSION", Types.VARCHAR },
            { "MANDATED_DISCOUNT_AMOUNT", Types.DOUBLE },
            { "ITEM_NO", Types.VARCHAR },
            { "ANALYSIS_CODE", Types.VARCHAR },
            { "RECORD_SEQUENCE", Types.VARCHAR },
            { "MODIFIED_BY", Types.INTEGER },
            { "SETTLEMENT_METHOD_NO", Types.VARCHAR },
            { "QUANTITY", Types.DOUBLE },
            { "ACCOUNT_ID", Types.VARCHAR },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "PROVISION_CLAIM_INDICATOR", Types.VARCHAR },
            { "DISPENSED_DATE", Types.TIMESTAMP },
            { "IS_ACTIVE", Types.VARCHAR },
            { "BATCH_ID", Types.VARCHAR },
            { "ACCRUAL_ACTUAL_END_DATE", Types.TIMESTAMP },
            { "MARKET_ID", Types.VARCHAR },
            { "BRAND_ID", Types.VARCHAR },
            { "ACCOUNT_NAME", Types.VARCHAR },
            { "AMOUNT", Types.DOUBLE },
            { "ACTUALS_MASTER_SID", Types.INTEGER },
            { "ACCT_IDENTIFIER_CODE_QUALIFIER", Types.VARCHAR },
            { "ORGANIZATION_KEY", Types.VARCHAR },
            { "CREATED_BY", Types.INTEGER },
            { "ACCRUAL_PROCESSED", Types.VARCHAR },
            { "PARENTCOM_DIVMKT_BRAND_PRODKEY", Types.VARCHAR },
            { "CASH_PAID_DATE", Types.TIMESTAMP },
            { "SALES_AMOUNT", Types.DOUBLE },
            { "ACCRUAL_ACTUAL_START_DATE", Types.TIMESTAMP },
            { "SETTLEMENT_NO", Types.VARCHAR },
            { "PRICE", Types.DOUBLE },
            { "UPLOAD_DATE", Types.TIMESTAMP },
            { "CLAIM_INDICATOR", Types.VARCHAR },
            { "ITEM_ID", Types.VARCHAR },
            { "PRICE_ADJUSTMENT_NAME", Types.VARCHAR },
            { "CONTRACT_ID", Types.VARCHAR },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "ACTUAL_ID", Types.VARCHAR },
            { "PROVISION_ID", Types.VARCHAR },
            { "SENT_OUT", Types.VARCHAR },
            { "RECORD_LOCK_STATUS", Types.BOOLEAN },
            { "DIVISION_ID", Types.VARCHAR },
            { "ITEM_IDENTIFIER_CODE_QUALIFIER", Types.VARCHAR },
            { "PROGRAM_STATE_CODE", Types.VARCHAR },
            { "SOURCE", Types.VARCHAR },
            { "INVOICE_LINE_NO", Types.VARCHAR },
            { "ACCOUNT_NO", Types.VARCHAR },
            { "COM_DIV_MKT_BRAND_PROD_KEY", Types.VARCHAR },
            { "INBOUND_STATUS", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table ACTUALS_MASTER (QUANTITY_INCLUSION VARCHAR(75) null,MANDATED_DISCOUNT_AMOUNT DOUBLE,ITEM_NO VARCHAR(75) null,ANALYSIS_CODE VARCHAR(75) null,RECORD_SEQUENCE VARCHAR(75) null,MODIFIED_BY INTEGER,SETTLEMENT_METHOD_NO VARCHAR(75) null,QUANTITY DOUBLE,ACCOUNT_ID VARCHAR(75) null,CREATED_DATE DATE null,PROVISION_CLAIM_INDICATOR VARCHAR(75) null,DISPENSED_DATE DATE null,IS_ACTIVE VARCHAR(75) null,BATCH_ID VARCHAR(75) null,ACCRUAL_ACTUAL_END_DATE DATE null,MARKET_ID VARCHAR(75) null,BRAND_ID VARCHAR(75) null,ACCOUNT_NAME VARCHAR(75) null,AMOUNT DOUBLE,ACTUALS_MASTER_SID INTEGER not null primary key IDENTITY,ACCT_IDENTIFIER_CODE_QUALIFIER VARCHAR(75) null,ORGANIZATION_KEY VARCHAR(75) null,CREATED_BY INTEGER,ACCRUAL_PROCESSED VARCHAR(75) null,PARENTCOM_DIVMKT_BRAND_PRODKEY VARCHAR(75) null,CASH_PAID_DATE DATE null,SALES_AMOUNT DOUBLE,ACCRUAL_ACTUAL_START_DATE DATE null,SETTLEMENT_NO VARCHAR(75) null,PRICE DOUBLE,UPLOAD_DATE DATE null,CLAIM_INDICATOR VARCHAR(75) null,ITEM_ID VARCHAR(75) null,PRICE_ADJUSTMENT_NAME VARCHAR(75) null,CONTRACT_ID VARCHAR(75) null,MODIFIED_DATE DATE null,ACTUAL_ID VARCHAR(75) null,PROVISION_ID VARCHAR(75) null,SENT_OUT VARCHAR(75) null,RECORD_LOCK_STATUS BOOLEAN,DIVISION_ID VARCHAR(75) null,ITEM_IDENTIFIER_CODE_QUALIFIER VARCHAR(75) null,PROGRAM_STATE_CODE VARCHAR(75) null,SOURCE VARCHAR(75) null,INVOICE_LINE_NO VARCHAR(75) null,ACCOUNT_NO VARCHAR(75) null,COM_DIV_MKT_BRAND_PROD_KEY VARCHAR(75) null,INBOUND_STATUS VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table ACTUALS_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY actualsMaster.actualsMasterSid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ACTUALS_MASTER.ACTUALS_MASTER_SID ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.ActualsMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.ActualsMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stpl.app.model.ActualsMaster"),
            true);
    public static long ACCOUNTID_COLUMN_BITMASK = 1L;
    public static long ACCOUNTNO_COLUMN_BITMASK = 2L;
    public static long ACTUALID_COLUMN_BITMASK = 4L;
    public static long BRANDID_COLUMN_BITMASK = 8L;
    public static long CONTRACTID_COLUMN_BITMASK = 16L;
    public static long DIVISIONID_COLUMN_BITMASK = 32L;
    public static long ITEMID_COLUMN_BITMASK = 64L;
    public static long ITEMNO_COLUMN_BITMASK = 128L;
    public static long MARKETID_COLUMN_BITMASK = 256L;
    public static long PROVISIONID_COLUMN_BITMASK = 512L;
    public static long ACTUALSMASTERSID_COLUMN_BITMASK = 1024L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.ActualsMaster"));
    private static ClassLoader _classLoader = ActualsMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ActualsMaster.class
        };
    private String _quantityInclusion;
    private double _mandatedDiscountAmount;
    private String _itemNo;
    private String _originalItemNo;
    private String _analysisCode;
    private String _recordSequence;
    private int _modifiedBy;
    private String _settlementMethodNo;
    private double _quantity;
    private String _accountId;
    private String _originalAccountId;
    private Date _createdDate;
    private String _provisionClaimIndicator;
    private Date _dispensedDate;
    private String _isActive;
    private String _batchId;
    private Date _accrualActualEndDate;
    private String _marketId;
    private String _originalMarketId;
    private String _brandId;
    private String _originalBrandId;
    private String _accountName;
    private double _amount;
    private int _actualsMasterSid;
    private String _acctIdentifierCodeQualifier;
    private String _organizationKey;
    private int _createdBy;
    private String _accrualProcessed;
    private String _parentcomDivmktBrandProdkey;
    private Date _cashPaidDate;
    private double _salesAmount;
    private Date _accrualActualStartDate;
    private String _settlementNo;
    private double _price;
    private Date _uploadDate;
    private String _claimIndicator;
    private String _itemId;
    private String _originalItemId;
    private String _priceAdjustmentName;
    private String _contractId;
    private String _originalContractId;
    private Date _modifiedDate;
    private String _actualId;
    private String _originalActualId;
    private String _provisionId;
    private String _originalProvisionId;
    private String _sentOut;
    private boolean _recordLockStatus;
    private String _divisionId;
    private String _originalDivisionId;
    private String _itemIdentifierCodeQualifier;
    private String _programStateCode;
    private String _source;
    private String _invoiceLineNo;
    private String _accountNo;
    private String _originalAccountNo;
    private String _comDivMktBrandProdKey;
    private String _inboundStatus;
    private long _columnBitmask;
    private ActualsMaster _escapedModel;

    public ActualsMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _actualsMasterSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setActualsMasterSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _actualsMasterSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ActualsMaster.class;
    }

    @Override
    public String getModelClassName() {
        return ActualsMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("quantityInclusion", getQuantityInclusion());
        attributes.put("mandatedDiscountAmount", getMandatedDiscountAmount());
        attributes.put("itemNo", getItemNo());
        attributes.put("analysisCode", getAnalysisCode());
        attributes.put("recordSequence", getRecordSequence());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("settlementMethodNo", getSettlementMethodNo());
        attributes.put("quantity", getQuantity());
        attributes.put("accountId", getAccountId());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("provisionClaimIndicator", getProvisionClaimIndicator());
        attributes.put("dispensedDate", getDispensedDate());
        attributes.put("isActive", getIsActive());
        attributes.put("batchId", getBatchId());
        attributes.put("accrualActualEndDate", getAccrualActualEndDate());
        attributes.put("marketId", getMarketId());
        attributes.put("brandId", getBrandId());
        attributes.put("accountName", getAccountName());
        attributes.put("amount", getAmount());
        attributes.put("actualsMasterSid", getActualsMasterSid());
        attributes.put("acctIdentifierCodeQualifier",
            getAcctIdentifierCodeQualifier());
        attributes.put("organizationKey", getOrganizationKey());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("accrualProcessed", getAccrualProcessed());
        attributes.put("parentcomDivmktBrandProdkey",
            getParentcomDivmktBrandProdkey());
        attributes.put("cashPaidDate", getCashPaidDate());
        attributes.put("salesAmount", getSalesAmount());
        attributes.put("accrualActualStartDate", getAccrualActualStartDate());
        attributes.put("settlementNo", getSettlementNo());
        attributes.put("price", getPrice());
        attributes.put("uploadDate", getUploadDate());
        attributes.put("claimIndicator", getClaimIndicator());
        attributes.put("itemId", getItemId());
        attributes.put("priceAdjustmentName", getPriceAdjustmentName());
        attributes.put("contractId", getContractId());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("actualId", getActualId());
        attributes.put("provisionId", getProvisionId());
        attributes.put("sentOut", getSentOut());
        attributes.put("recordLockStatus", getRecordLockStatus());
        attributes.put("divisionId", getDivisionId());
        attributes.put("itemIdentifierCodeQualifier",
            getItemIdentifierCodeQualifier());
        attributes.put("programStateCode", getProgramStateCode());
        attributes.put("source", getSource());
        attributes.put("invoiceLineNo", getInvoiceLineNo());
        attributes.put("accountNo", getAccountNo());
        attributes.put("comDivMktBrandProdKey", getComDivMktBrandProdKey());
        attributes.put("inboundStatus", getInboundStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String quantityInclusion = (String) attributes.get("quantityInclusion");

        if (quantityInclusion != null) {
            setQuantityInclusion(quantityInclusion);
        }

        Double mandatedDiscountAmount = (Double) attributes.get(
                "mandatedDiscountAmount");

        if (mandatedDiscountAmount != null) {
            setMandatedDiscountAmount(mandatedDiscountAmount);
        }

        String itemNo = (String) attributes.get("itemNo");

        if (itemNo != null) {
            setItemNo(itemNo);
        }

        String analysisCode = (String) attributes.get("analysisCode");

        if (analysisCode != null) {
            setAnalysisCode(analysisCode);
        }

        String recordSequence = (String) attributes.get("recordSequence");

        if (recordSequence != null) {
            setRecordSequence(recordSequence);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        String settlementMethodNo = (String) attributes.get(
                "settlementMethodNo");

        if (settlementMethodNo != null) {
            setSettlementMethodNo(settlementMethodNo);
        }

        Double quantity = (Double) attributes.get("quantity");

        if (quantity != null) {
            setQuantity(quantity);
        }

        String accountId = (String) attributes.get("accountId");

        if (accountId != null) {
            setAccountId(accountId);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String provisionClaimIndicator = (String) attributes.get(
                "provisionClaimIndicator");

        if (provisionClaimIndicator != null) {
            setProvisionClaimIndicator(provisionClaimIndicator);
        }

        Date dispensedDate = (Date) attributes.get("dispensedDate");

        if (dispensedDate != null) {
            setDispensedDate(dispensedDate);
        }

        String isActive = (String) attributes.get("isActive");

        if (isActive != null) {
            setIsActive(isActive);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        Date accrualActualEndDate = (Date) attributes.get(
                "accrualActualEndDate");

        if (accrualActualEndDate != null) {
            setAccrualActualEndDate(accrualActualEndDate);
        }

        String marketId = (String) attributes.get("marketId");

        if (marketId != null) {
            setMarketId(marketId);
        }

        String brandId = (String) attributes.get("brandId");

        if (brandId != null) {
            setBrandId(brandId);
        }

        String accountName = (String) attributes.get("accountName");

        if (accountName != null) {
            setAccountName(accountName);
        }

        Double amount = (Double) attributes.get("amount");

        if (amount != null) {
            setAmount(amount);
        }

        Integer actualsMasterSid = (Integer) attributes.get("actualsMasterSid");

        if (actualsMasterSid != null) {
            setActualsMasterSid(actualsMasterSid);
        }

        String acctIdentifierCodeQualifier = (String) attributes.get(
                "acctIdentifierCodeQualifier");

        if (acctIdentifierCodeQualifier != null) {
            setAcctIdentifierCodeQualifier(acctIdentifierCodeQualifier);
        }

        String organizationKey = (String) attributes.get("organizationKey");

        if (organizationKey != null) {
            setOrganizationKey(organizationKey);
        }

        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        String accrualProcessed = (String) attributes.get("accrualProcessed");

        if (accrualProcessed != null) {
            setAccrualProcessed(accrualProcessed);
        }

        String parentcomDivmktBrandProdkey = (String) attributes.get(
                "parentcomDivmktBrandProdkey");

        if (parentcomDivmktBrandProdkey != null) {
            setParentcomDivmktBrandProdkey(parentcomDivmktBrandProdkey);
        }

        Date cashPaidDate = (Date) attributes.get("cashPaidDate");

        if (cashPaidDate != null) {
            setCashPaidDate(cashPaidDate);
        }

        Double salesAmount = (Double) attributes.get("salesAmount");

        if (salesAmount != null) {
            setSalesAmount(salesAmount);
        }

        Date accrualActualStartDate = (Date) attributes.get(
                "accrualActualStartDate");

        if (accrualActualStartDate != null) {
            setAccrualActualStartDate(accrualActualStartDate);
        }

        String settlementNo = (String) attributes.get("settlementNo");

        if (settlementNo != null) {
            setSettlementNo(settlementNo);
        }

        Double price = (Double) attributes.get("price");

        if (price != null) {
            setPrice(price);
        }

        Date uploadDate = (Date) attributes.get("uploadDate");

        if (uploadDate != null) {
            setUploadDate(uploadDate);
        }

        String claimIndicator = (String) attributes.get("claimIndicator");

        if (claimIndicator != null) {
            setClaimIndicator(claimIndicator);
        }

        String itemId = (String) attributes.get("itemId");

        if (itemId != null) {
            setItemId(itemId);
        }

        String priceAdjustmentName = (String) attributes.get(
                "priceAdjustmentName");

        if (priceAdjustmentName != null) {
            setPriceAdjustmentName(priceAdjustmentName);
        }

        String contractId = (String) attributes.get("contractId");

        if (contractId != null) {
            setContractId(contractId);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String actualId = (String) attributes.get("actualId");

        if (actualId != null) {
            setActualId(actualId);
        }

        String provisionId = (String) attributes.get("provisionId");

        if (provisionId != null) {
            setProvisionId(provisionId);
        }

        String sentOut = (String) attributes.get("sentOut");

        if (sentOut != null) {
            setSentOut(sentOut);
        }

        Boolean recordLockStatus = (Boolean) attributes.get("recordLockStatus");

        if (recordLockStatus != null) {
            setRecordLockStatus(recordLockStatus);
        }

        String divisionId = (String) attributes.get("divisionId");

        if (divisionId != null) {
            setDivisionId(divisionId);
        }

        String itemIdentifierCodeQualifier = (String) attributes.get(
                "itemIdentifierCodeQualifier");

        if (itemIdentifierCodeQualifier != null) {
            setItemIdentifierCodeQualifier(itemIdentifierCodeQualifier);
        }

        String programStateCode = (String) attributes.get("programStateCode");

        if (programStateCode != null) {
            setProgramStateCode(programStateCode);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String invoiceLineNo = (String) attributes.get("invoiceLineNo");

        if (invoiceLineNo != null) {
            setInvoiceLineNo(invoiceLineNo);
        }

        String accountNo = (String) attributes.get("accountNo");

        if (accountNo != null) {
            setAccountNo(accountNo);
        }

        String comDivMktBrandProdKey = (String) attributes.get(
                "comDivMktBrandProdKey");

        if (comDivMktBrandProdKey != null) {
            setComDivMktBrandProdKey(comDivMktBrandProdKey);
        }

        String inboundStatus = (String) attributes.get("inboundStatus");

        if (inboundStatus != null) {
            setInboundStatus(inboundStatus);
        }
    }

    @Override
    public String getQuantityInclusion() {
        if (_quantityInclusion == null) {
            return StringPool.BLANK;
        } else {
            return _quantityInclusion;
        }
    }

    @Override
    public void setQuantityInclusion(String quantityInclusion) {
        _quantityInclusion = quantityInclusion;
    }

    @Override
    public double getMandatedDiscountAmount() {
        return _mandatedDiscountAmount;
    }

    @Override
    public void setMandatedDiscountAmount(double mandatedDiscountAmount) {
        _mandatedDiscountAmount = mandatedDiscountAmount;
    }

    @Override
    public String getItemNo() {
        if (_itemNo == null) {
            return StringPool.BLANK;
        } else {
            return _itemNo;
        }
    }

    @Override
    public void setItemNo(String itemNo) {
        _columnBitmask |= ITEMNO_COLUMN_BITMASK;

        if (_originalItemNo == null) {
            _originalItemNo = _itemNo;
        }

        _itemNo = itemNo;
    }

    public String getOriginalItemNo() {
        return GetterUtil.getString(_originalItemNo);
    }

    @Override
    public String getAnalysisCode() {
        if (_analysisCode == null) {
            return StringPool.BLANK;
        } else {
            return _analysisCode;
        }
    }

    @Override
    public void setAnalysisCode(String analysisCode) {
        _analysisCode = analysisCode;
    }

    @Override
    public String getRecordSequence() {
        if (_recordSequence == null) {
            return StringPool.BLANK;
        } else {
            return _recordSequence;
        }
    }

    @Override
    public void setRecordSequence(String recordSequence) {
        _recordSequence = recordSequence;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public String getSettlementMethodNo() {
        if (_settlementMethodNo == null) {
            return StringPool.BLANK;
        } else {
            return _settlementMethodNo;
        }
    }

    @Override
    public void setSettlementMethodNo(String settlementMethodNo) {
        _settlementMethodNo = settlementMethodNo;
    }

    @Override
    public double getQuantity() {
        return _quantity;
    }

    @Override
    public void setQuantity(double quantity) {
        _quantity = quantity;
    }

    @Override
    public String getAccountId() {
        if (_accountId == null) {
            return StringPool.BLANK;
        } else {
            return _accountId;
        }
    }

    @Override
    public void setAccountId(String accountId) {
        _columnBitmask |= ACCOUNTID_COLUMN_BITMASK;

        if (_originalAccountId == null) {
            _originalAccountId = _accountId;
        }

        _accountId = accountId;
    }

    public String getOriginalAccountId() {
        return GetterUtil.getString(_originalAccountId);
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public String getProvisionClaimIndicator() {
        if (_provisionClaimIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _provisionClaimIndicator;
        }
    }

    @Override
    public void setProvisionClaimIndicator(String provisionClaimIndicator) {
        _provisionClaimIndicator = provisionClaimIndicator;
    }

    @Override
    public Date getDispensedDate() {
        return _dispensedDate;
    }

    @Override
    public void setDispensedDate(Date dispensedDate) {
        _dispensedDate = dispensedDate;
    }

    @Override
    public String getIsActive() {
        if (_isActive == null) {
            return StringPool.BLANK;
        } else {
            return _isActive;
        }
    }

    @Override
    public void setIsActive(String isActive) {
        _isActive = isActive;
    }

    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @Override
    public Date getAccrualActualEndDate() {
        return _accrualActualEndDate;
    }

    @Override
    public void setAccrualActualEndDate(Date accrualActualEndDate) {
        _accrualActualEndDate = accrualActualEndDate;
    }

    @Override
    public String getMarketId() {
        if (_marketId == null) {
            return StringPool.BLANK;
        } else {
            return _marketId;
        }
    }

    @Override
    public void setMarketId(String marketId) {
        _columnBitmask |= MARKETID_COLUMN_BITMASK;

        if (_originalMarketId == null) {
            _originalMarketId = _marketId;
        }

        _marketId = marketId;
    }

    public String getOriginalMarketId() {
        return GetterUtil.getString(_originalMarketId);
    }

    @Override
    public String getBrandId() {
        if (_brandId == null) {
            return StringPool.BLANK;
        } else {
            return _brandId;
        }
    }

    @Override
    public void setBrandId(String brandId) {
        _columnBitmask |= BRANDID_COLUMN_BITMASK;

        if (_originalBrandId == null) {
            _originalBrandId = _brandId;
        }

        _brandId = brandId;
    }

    public String getOriginalBrandId() {
        return GetterUtil.getString(_originalBrandId);
    }

    @Override
    public String getAccountName() {
        if (_accountName == null) {
            return StringPool.BLANK;
        } else {
            return _accountName;
        }
    }

    @Override
    public void setAccountName(String accountName) {
        _accountName = accountName;
    }

    @Override
    public double getAmount() {
        return _amount;
    }

    @Override
    public void setAmount(double amount) {
        _amount = amount;
    }

    @Override
    public int getActualsMasterSid() {
        return _actualsMasterSid;
    }

    @Override
    public void setActualsMasterSid(int actualsMasterSid) {
        _actualsMasterSid = actualsMasterSid;
    }

    @Override
    public String getAcctIdentifierCodeQualifier() {
        if (_acctIdentifierCodeQualifier == null) {
            return StringPool.BLANK;
        } else {
            return _acctIdentifierCodeQualifier;
        }
    }

    @Override
    public void setAcctIdentifierCodeQualifier(
        String acctIdentifierCodeQualifier) {
        _acctIdentifierCodeQualifier = acctIdentifierCodeQualifier;
    }

    @Override
    public String getOrganizationKey() {
        if (_organizationKey == null) {
            return StringPool.BLANK;
        } else {
            return _organizationKey;
        }
    }

    @Override
    public void setOrganizationKey(String organizationKey) {
        _organizationKey = organizationKey;
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public String getAccrualProcessed() {
        if (_accrualProcessed == null) {
            return StringPool.BLANK;
        } else {
            return _accrualProcessed;
        }
    }

    @Override
    public void setAccrualProcessed(String accrualProcessed) {
        _accrualProcessed = accrualProcessed;
    }

    @Override
    public String getParentcomDivmktBrandProdkey() {
        if (_parentcomDivmktBrandProdkey == null) {
            return StringPool.BLANK;
        } else {
            return _parentcomDivmktBrandProdkey;
        }
    }

    @Override
    public void setParentcomDivmktBrandProdkey(
        String parentcomDivmktBrandProdkey) {
        _parentcomDivmktBrandProdkey = parentcomDivmktBrandProdkey;
    }

    @Override
    public Date getCashPaidDate() {
        return _cashPaidDate;
    }

    @Override
    public void setCashPaidDate(Date cashPaidDate) {
        _cashPaidDate = cashPaidDate;
    }

    @Override
    public double getSalesAmount() {
        return _salesAmount;
    }

    @Override
    public void setSalesAmount(double salesAmount) {
        _salesAmount = salesAmount;
    }

    @Override
    public Date getAccrualActualStartDate() {
        return _accrualActualStartDate;
    }

    @Override
    public void setAccrualActualStartDate(Date accrualActualStartDate) {
        _accrualActualStartDate = accrualActualStartDate;
    }

    @Override
    public String getSettlementNo() {
        if (_settlementNo == null) {
            return StringPool.BLANK;
        } else {
            return _settlementNo;
        }
    }

    @Override
    public void setSettlementNo(String settlementNo) {
        _settlementNo = settlementNo;
    }

    @Override
    public double getPrice() {
        return _price;
    }

    @Override
    public void setPrice(double price) {
        _price = price;
    }

    @Override
    public Date getUploadDate() {
        return _uploadDate;
    }

    @Override
    public void setUploadDate(Date uploadDate) {
        _uploadDate = uploadDate;
    }

    @Override
    public String getClaimIndicator() {
        if (_claimIndicator == null) {
            return StringPool.BLANK;
        } else {
            return _claimIndicator;
        }
    }

    @Override
    public void setClaimIndicator(String claimIndicator) {
        _claimIndicator = claimIndicator;
    }

    @Override
    public String getItemId() {
        if (_itemId == null) {
            return StringPool.BLANK;
        } else {
            return _itemId;
        }
    }

    @Override
    public void setItemId(String itemId) {
        _columnBitmask |= ITEMID_COLUMN_BITMASK;

        if (_originalItemId == null) {
            _originalItemId = _itemId;
        }

        _itemId = itemId;
    }

    public String getOriginalItemId() {
        return GetterUtil.getString(_originalItemId);
    }

    @Override
    public String getPriceAdjustmentName() {
        if (_priceAdjustmentName == null) {
            return StringPool.BLANK;
        } else {
            return _priceAdjustmentName;
        }
    }

    @Override
    public void setPriceAdjustmentName(String priceAdjustmentName) {
        _priceAdjustmentName = priceAdjustmentName;
    }

    @Override
    public String getContractId() {
        if (_contractId == null) {
            return StringPool.BLANK;
        } else {
            return _contractId;
        }
    }

    @Override
    public void setContractId(String contractId) {
        _columnBitmask |= CONTRACTID_COLUMN_BITMASK;

        if (_originalContractId == null) {
            _originalContractId = _contractId;
        }

        _contractId = contractId;
    }

    public String getOriginalContractId() {
        return GetterUtil.getString(_originalContractId);
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getActualId() {
        if (_actualId == null) {
            return StringPool.BLANK;
        } else {
            return _actualId;
        }
    }

    @Override
    public void setActualId(String actualId) {
        _columnBitmask |= ACTUALID_COLUMN_BITMASK;

        if (_originalActualId == null) {
            _originalActualId = _actualId;
        }

        _actualId = actualId;
    }

    public String getOriginalActualId() {
        return GetterUtil.getString(_originalActualId);
    }

    @Override
    public String getProvisionId() {
        if (_provisionId == null) {
            return StringPool.BLANK;
        } else {
            return _provisionId;
        }
    }

    @Override
    public void setProvisionId(String provisionId) {
        _columnBitmask |= PROVISIONID_COLUMN_BITMASK;

        if (_originalProvisionId == null) {
            _originalProvisionId = _provisionId;
        }

        _provisionId = provisionId;
    }

    public String getOriginalProvisionId() {
        return GetterUtil.getString(_originalProvisionId);
    }

    @Override
    public String getSentOut() {
        if (_sentOut == null) {
            return StringPool.BLANK;
        } else {
            return _sentOut;
        }
    }

    @Override
    public void setSentOut(String sentOut) {
        _sentOut = sentOut;
    }

    @Override
    public boolean getRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public boolean isRecordLockStatus() {
        return _recordLockStatus;
    }

    @Override
    public void setRecordLockStatus(boolean recordLockStatus) {
        _recordLockStatus = recordLockStatus;
    }

    @Override
    public String getDivisionId() {
        if (_divisionId == null) {
            return StringPool.BLANK;
        } else {
            return _divisionId;
        }
    }

    @Override
    public void setDivisionId(String divisionId) {
        _columnBitmask |= DIVISIONID_COLUMN_BITMASK;

        if (_originalDivisionId == null) {
            _originalDivisionId = _divisionId;
        }

        _divisionId = divisionId;
    }

    public String getOriginalDivisionId() {
        return GetterUtil.getString(_originalDivisionId);
    }

    @Override
    public String getItemIdentifierCodeQualifier() {
        if (_itemIdentifierCodeQualifier == null) {
            return StringPool.BLANK;
        } else {
            return _itemIdentifierCodeQualifier;
        }
    }

    @Override
    public void setItemIdentifierCodeQualifier(
        String itemIdentifierCodeQualifier) {
        _itemIdentifierCodeQualifier = itemIdentifierCodeQualifier;
    }

    @Override
    public String getProgramStateCode() {
        if (_programStateCode == null) {
            return StringPool.BLANK;
        } else {
            return _programStateCode;
        }
    }

    @Override
    public void setProgramStateCode(String programStateCode) {
        _programStateCode = programStateCode;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getInvoiceLineNo() {
        if (_invoiceLineNo == null) {
            return StringPool.BLANK;
        } else {
            return _invoiceLineNo;
        }
    }

    @Override
    public void setInvoiceLineNo(String invoiceLineNo) {
        _invoiceLineNo = invoiceLineNo;
    }

    @Override
    public String getAccountNo() {
        if (_accountNo == null) {
            return StringPool.BLANK;
        } else {
            return _accountNo;
        }
    }

    @Override
    public void setAccountNo(String accountNo) {
        _columnBitmask |= ACCOUNTNO_COLUMN_BITMASK;

        if (_originalAccountNo == null) {
            _originalAccountNo = _accountNo;
        }

        _accountNo = accountNo;
    }

    public String getOriginalAccountNo() {
        return GetterUtil.getString(_originalAccountNo);
    }

    @Override
    public String getComDivMktBrandProdKey() {
        if (_comDivMktBrandProdKey == null) {
            return StringPool.BLANK;
        } else {
            return _comDivMktBrandProdKey;
        }
    }

    @Override
    public void setComDivMktBrandProdKey(String comDivMktBrandProdKey) {
        _comDivMktBrandProdKey = comDivMktBrandProdKey;
    }

    @Override
    public String getInboundStatus() {
        if (_inboundStatus == null) {
            return StringPool.BLANK;
        } else {
            return _inboundStatus;
        }
    }

    @Override
    public void setInboundStatus(String inboundStatus) {
        _inboundStatus = inboundStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ActualsMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ActualsMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ActualsMasterImpl actualsMasterImpl = new ActualsMasterImpl();

        actualsMasterImpl.setQuantityInclusion(getQuantityInclusion());
        actualsMasterImpl.setMandatedDiscountAmount(getMandatedDiscountAmount());
        actualsMasterImpl.setItemNo(getItemNo());
        actualsMasterImpl.setAnalysisCode(getAnalysisCode());
        actualsMasterImpl.setRecordSequence(getRecordSequence());
        actualsMasterImpl.setModifiedBy(getModifiedBy());
        actualsMasterImpl.setSettlementMethodNo(getSettlementMethodNo());
        actualsMasterImpl.setQuantity(getQuantity());
        actualsMasterImpl.setAccountId(getAccountId());
        actualsMasterImpl.setCreatedDate(getCreatedDate());
        actualsMasterImpl.setProvisionClaimIndicator(getProvisionClaimIndicator());
        actualsMasterImpl.setDispensedDate(getDispensedDate());
        actualsMasterImpl.setIsActive(getIsActive());
        actualsMasterImpl.setBatchId(getBatchId());
        actualsMasterImpl.setAccrualActualEndDate(getAccrualActualEndDate());
        actualsMasterImpl.setMarketId(getMarketId());
        actualsMasterImpl.setBrandId(getBrandId());
        actualsMasterImpl.setAccountName(getAccountName());
        actualsMasterImpl.setAmount(getAmount());
        actualsMasterImpl.setActualsMasterSid(getActualsMasterSid());
        actualsMasterImpl.setAcctIdentifierCodeQualifier(getAcctIdentifierCodeQualifier());
        actualsMasterImpl.setOrganizationKey(getOrganizationKey());
        actualsMasterImpl.setCreatedBy(getCreatedBy());
        actualsMasterImpl.setAccrualProcessed(getAccrualProcessed());
        actualsMasterImpl.setParentcomDivmktBrandProdkey(getParentcomDivmktBrandProdkey());
        actualsMasterImpl.setCashPaidDate(getCashPaidDate());
        actualsMasterImpl.setSalesAmount(getSalesAmount());
        actualsMasterImpl.setAccrualActualStartDate(getAccrualActualStartDate());
        actualsMasterImpl.setSettlementNo(getSettlementNo());
        actualsMasterImpl.setPrice(getPrice());
        actualsMasterImpl.setUploadDate(getUploadDate());
        actualsMasterImpl.setClaimIndicator(getClaimIndicator());
        actualsMasterImpl.setItemId(getItemId());
        actualsMasterImpl.setPriceAdjustmentName(getPriceAdjustmentName());
        actualsMasterImpl.setContractId(getContractId());
        actualsMasterImpl.setModifiedDate(getModifiedDate());
        actualsMasterImpl.setActualId(getActualId());
        actualsMasterImpl.setProvisionId(getProvisionId());
        actualsMasterImpl.setSentOut(getSentOut());
        actualsMasterImpl.setRecordLockStatus(getRecordLockStatus());
        actualsMasterImpl.setDivisionId(getDivisionId());
        actualsMasterImpl.setItemIdentifierCodeQualifier(getItemIdentifierCodeQualifier());
        actualsMasterImpl.setProgramStateCode(getProgramStateCode());
        actualsMasterImpl.setSource(getSource());
        actualsMasterImpl.setInvoiceLineNo(getInvoiceLineNo());
        actualsMasterImpl.setAccountNo(getAccountNo());
        actualsMasterImpl.setComDivMktBrandProdKey(getComDivMktBrandProdKey());
        actualsMasterImpl.setInboundStatus(getInboundStatus());

        actualsMasterImpl.resetOriginalValues();

        return actualsMasterImpl;
    }

    @Override
    public int compareTo(ActualsMaster actualsMaster) {
        int primaryKey = actualsMaster.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ActualsMaster)) {
            return false;
        }

        ActualsMaster actualsMaster = (ActualsMaster) obj;

        int primaryKey = actualsMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ActualsMasterModelImpl actualsMasterModelImpl = this;

        actualsMasterModelImpl._originalItemNo = actualsMasterModelImpl._itemNo;

        actualsMasterModelImpl._originalAccountId = actualsMasterModelImpl._accountId;

        actualsMasterModelImpl._originalMarketId = actualsMasterModelImpl._marketId;

        actualsMasterModelImpl._originalBrandId = actualsMasterModelImpl._brandId;

        actualsMasterModelImpl._originalItemId = actualsMasterModelImpl._itemId;

        actualsMasterModelImpl._originalContractId = actualsMasterModelImpl._contractId;

        actualsMasterModelImpl._originalActualId = actualsMasterModelImpl._actualId;

        actualsMasterModelImpl._originalProvisionId = actualsMasterModelImpl._provisionId;

        actualsMasterModelImpl._originalDivisionId = actualsMasterModelImpl._divisionId;

        actualsMasterModelImpl._originalAccountNo = actualsMasterModelImpl._accountNo;

        actualsMasterModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ActualsMaster> toCacheModel() {
        ActualsMasterCacheModel actualsMasterCacheModel = new ActualsMasterCacheModel();

        actualsMasterCacheModel.quantityInclusion = getQuantityInclusion();

        String quantityInclusion = actualsMasterCacheModel.quantityInclusion;

        if ((quantityInclusion != null) && (quantityInclusion.length() == 0)) {
            actualsMasterCacheModel.quantityInclusion = null;
        }

        actualsMasterCacheModel.mandatedDiscountAmount = getMandatedDiscountAmount();

        actualsMasterCacheModel.itemNo = getItemNo();

        String itemNo = actualsMasterCacheModel.itemNo;

        if ((itemNo != null) && (itemNo.length() == 0)) {
            actualsMasterCacheModel.itemNo = null;
        }

        actualsMasterCacheModel.analysisCode = getAnalysisCode();

        String analysisCode = actualsMasterCacheModel.analysisCode;

        if ((analysisCode != null) && (analysisCode.length() == 0)) {
            actualsMasterCacheModel.analysisCode = null;
        }

        actualsMasterCacheModel.recordSequence = getRecordSequence();

        String recordSequence = actualsMasterCacheModel.recordSequence;

        if ((recordSequence != null) && (recordSequence.length() == 0)) {
            actualsMasterCacheModel.recordSequence = null;
        }

        actualsMasterCacheModel.modifiedBy = getModifiedBy();

        actualsMasterCacheModel.settlementMethodNo = getSettlementMethodNo();

        String settlementMethodNo = actualsMasterCacheModel.settlementMethodNo;

        if ((settlementMethodNo != null) && (settlementMethodNo.length() == 0)) {
            actualsMasterCacheModel.settlementMethodNo = null;
        }

        actualsMasterCacheModel.quantity = getQuantity();

        actualsMasterCacheModel.accountId = getAccountId();

        String accountId = actualsMasterCacheModel.accountId;

        if ((accountId != null) && (accountId.length() == 0)) {
            actualsMasterCacheModel.accountId = null;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            actualsMasterCacheModel.createdDate = createdDate.getTime();
        } else {
            actualsMasterCacheModel.createdDate = Long.MIN_VALUE;
        }

        actualsMasterCacheModel.provisionClaimIndicator = getProvisionClaimIndicator();

        String provisionClaimIndicator = actualsMasterCacheModel.provisionClaimIndicator;

        if ((provisionClaimIndicator != null) &&
                (provisionClaimIndicator.length() == 0)) {
            actualsMasterCacheModel.provisionClaimIndicator = null;
        }

        Date dispensedDate = getDispensedDate();

        if (dispensedDate != null) {
            actualsMasterCacheModel.dispensedDate = dispensedDate.getTime();
        } else {
            actualsMasterCacheModel.dispensedDate = Long.MIN_VALUE;
        }

        actualsMasterCacheModel.isActive = getIsActive();

        String isActive = actualsMasterCacheModel.isActive;

        if ((isActive != null) && (isActive.length() == 0)) {
            actualsMasterCacheModel.isActive = null;
        }

        actualsMasterCacheModel.batchId = getBatchId();

        String batchId = actualsMasterCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            actualsMasterCacheModel.batchId = null;
        }

        Date accrualActualEndDate = getAccrualActualEndDate();

        if (accrualActualEndDate != null) {
            actualsMasterCacheModel.accrualActualEndDate = accrualActualEndDate.getTime();
        } else {
            actualsMasterCacheModel.accrualActualEndDate = Long.MIN_VALUE;
        }

        actualsMasterCacheModel.marketId = getMarketId();

        String marketId = actualsMasterCacheModel.marketId;

        if ((marketId != null) && (marketId.length() == 0)) {
            actualsMasterCacheModel.marketId = null;
        }

        actualsMasterCacheModel.brandId = getBrandId();

        String brandId = actualsMasterCacheModel.brandId;

        if ((brandId != null) && (brandId.length() == 0)) {
            actualsMasterCacheModel.brandId = null;
        }

        actualsMasterCacheModel.accountName = getAccountName();

        String accountName = actualsMasterCacheModel.accountName;

        if ((accountName != null) && (accountName.length() == 0)) {
            actualsMasterCacheModel.accountName = null;
        }

        actualsMasterCacheModel.amount = getAmount();

        actualsMasterCacheModel.actualsMasterSid = getActualsMasterSid();

        actualsMasterCacheModel.acctIdentifierCodeQualifier = getAcctIdentifierCodeQualifier();

        String acctIdentifierCodeQualifier = actualsMasterCacheModel.acctIdentifierCodeQualifier;

        if ((acctIdentifierCodeQualifier != null) &&
                (acctIdentifierCodeQualifier.length() == 0)) {
            actualsMasterCacheModel.acctIdentifierCodeQualifier = null;
        }

        actualsMasterCacheModel.organizationKey = getOrganizationKey();

        String organizationKey = actualsMasterCacheModel.organizationKey;

        if ((organizationKey != null) && (organizationKey.length() == 0)) {
            actualsMasterCacheModel.organizationKey = null;
        }

        actualsMasterCacheModel.createdBy = getCreatedBy();

        actualsMasterCacheModel.accrualProcessed = getAccrualProcessed();

        String accrualProcessed = actualsMasterCacheModel.accrualProcessed;

        if ((accrualProcessed != null) && (accrualProcessed.length() == 0)) {
            actualsMasterCacheModel.accrualProcessed = null;
        }

        actualsMasterCacheModel.parentcomDivmktBrandProdkey = getParentcomDivmktBrandProdkey();

        String parentcomDivmktBrandProdkey = actualsMasterCacheModel.parentcomDivmktBrandProdkey;

        if ((parentcomDivmktBrandProdkey != null) &&
                (parentcomDivmktBrandProdkey.length() == 0)) {
            actualsMasterCacheModel.parentcomDivmktBrandProdkey = null;
        }

        Date cashPaidDate = getCashPaidDate();

        if (cashPaidDate != null) {
            actualsMasterCacheModel.cashPaidDate = cashPaidDate.getTime();
        } else {
            actualsMasterCacheModel.cashPaidDate = Long.MIN_VALUE;
        }

        actualsMasterCacheModel.salesAmount = getSalesAmount();

        Date accrualActualStartDate = getAccrualActualStartDate();

        if (accrualActualStartDate != null) {
            actualsMasterCacheModel.accrualActualStartDate = accrualActualStartDate.getTime();
        } else {
            actualsMasterCacheModel.accrualActualStartDate = Long.MIN_VALUE;
        }

        actualsMasterCacheModel.settlementNo = getSettlementNo();

        String settlementNo = actualsMasterCacheModel.settlementNo;

        if ((settlementNo != null) && (settlementNo.length() == 0)) {
            actualsMasterCacheModel.settlementNo = null;
        }

        actualsMasterCacheModel.price = getPrice();

        Date uploadDate = getUploadDate();

        if (uploadDate != null) {
            actualsMasterCacheModel.uploadDate = uploadDate.getTime();
        } else {
            actualsMasterCacheModel.uploadDate = Long.MIN_VALUE;
        }

        actualsMasterCacheModel.claimIndicator = getClaimIndicator();

        String claimIndicator = actualsMasterCacheModel.claimIndicator;

        if ((claimIndicator != null) && (claimIndicator.length() == 0)) {
            actualsMasterCacheModel.claimIndicator = null;
        }

        actualsMasterCacheModel.itemId = getItemId();

        String itemId = actualsMasterCacheModel.itemId;

        if ((itemId != null) && (itemId.length() == 0)) {
            actualsMasterCacheModel.itemId = null;
        }

        actualsMasterCacheModel.priceAdjustmentName = getPriceAdjustmentName();

        String priceAdjustmentName = actualsMasterCacheModel.priceAdjustmentName;

        if ((priceAdjustmentName != null) &&
                (priceAdjustmentName.length() == 0)) {
            actualsMasterCacheModel.priceAdjustmentName = null;
        }

        actualsMasterCacheModel.contractId = getContractId();

        String contractId = actualsMasterCacheModel.contractId;

        if ((contractId != null) && (contractId.length() == 0)) {
            actualsMasterCacheModel.contractId = null;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            actualsMasterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            actualsMasterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        actualsMasterCacheModel.actualId = getActualId();

        String actualId = actualsMasterCacheModel.actualId;

        if ((actualId != null) && (actualId.length() == 0)) {
            actualsMasterCacheModel.actualId = null;
        }

        actualsMasterCacheModel.provisionId = getProvisionId();

        String provisionId = actualsMasterCacheModel.provisionId;

        if ((provisionId != null) && (provisionId.length() == 0)) {
            actualsMasterCacheModel.provisionId = null;
        }

        actualsMasterCacheModel.sentOut = getSentOut();

        String sentOut = actualsMasterCacheModel.sentOut;

        if ((sentOut != null) && (sentOut.length() == 0)) {
            actualsMasterCacheModel.sentOut = null;
        }

        actualsMasterCacheModel.recordLockStatus = getRecordLockStatus();

        actualsMasterCacheModel.divisionId = getDivisionId();

        String divisionId = actualsMasterCacheModel.divisionId;

        if ((divisionId != null) && (divisionId.length() == 0)) {
            actualsMasterCacheModel.divisionId = null;
        }

        actualsMasterCacheModel.itemIdentifierCodeQualifier = getItemIdentifierCodeQualifier();

        String itemIdentifierCodeQualifier = actualsMasterCacheModel.itemIdentifierCodeQualifier;

        if ((itemIdentifierCodeQualifier != null) &&
                (itemIdentifierCodeQualifier.length() == 0)) {
            actualsMasterCacheModel.itemIdentifierCodeQualifier = null;
        }

        actualsMasterCacheModel.programStateCode = getProgramStateCode();

        String programStateCode = actualsMasterCacheModel.programStateCode;

        if ((programStateCode != null) && (programStateCode.length() == 0)) {
            actualsMasterCacheModel.programStateCode = null;
        }

        actualsMasterCacheModel.source = getSource();

        String source = actualsMasterCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            actualsMasterCacheModel.source = null;
        }

        actualsMasterCacheModel.invoiceLineNo = getInvoiceLineNo();

        String invoiceLineNo = actualsMasterCacheModel.invoiceLineNo;

        if ((invoiceLineNo != null) && (invoiceLineNo.length() == 0)) {
            actualsMasterCacheModel.invoiceLineNo = null;
        }

        actualsMasterCacheModel.accountNo = getAccountNo();

        String accountNo = actualsMasterCacheModel.accountNo;

        if ((accountNo != null) && (accountNo.length() == 0)) {
            actualsMasterCacheModel.accountNo = null;
        }

        actualsMasterCacheModel.comDivMktBrandProdKey = getComDivMktBrandProdKey();

        String comDivMktBrandProdKey = actualsMasterCacheModel.comDivMktBrandProdKey;

        if ((comDivMktBrandProdKey != null) &&
                (comDivMktBrandProdKey.length() == 0)) {
            actualsMasterCacheModel.comDivMktBrandProdKey = null;
        }

        actualsMasterCacheModel.inboundStatus = getInboundStatus();

        String inboundStatus = actualsMasterCacheModel.inboundStatus;

        if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
            actualsMasterCacheModel.inboundStatus = null;
        }

        return actualsMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(97);

        sb.append("{quantityInclusion=");
        sb.append(getQuantityInclusion());
        sb.append(", mandatedDiscountAmount=");
        sb.append(getMandatedDiscountAmount());
        sb.append(", itemNo=");
        sb.append(getItemNo());
        sb.append(", analysisCode=");
        sb.append(getAnalysisCode());
        sb.append(", recordSequence=");
        sb.append(getRecordSequence());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", settlementMethodNo=");
        sb.append(getSettlementMethodNo());
        sb.append(", quantity=");
        sb.append(getQuantity());
        sb.append(", accountId=");
        sb.append(getAccountId());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", provisionClaimIndicator=");
        sb.append(getProvisionClaimIndicator());
        sb.append(", dispensedDate=");
        sb.append(getDispensedDate());
        sb.append(", isActive=");
        sb.append(getIsActive());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", accrualActualEndDate=");
        sb.append(getAccrualActualEndDate());
        sb.append(", marketId=");
        sb.append(getMarketId());
        sb.append(", brandId=");
        sb.append(getBrandId());
        sb.append(", accountName=");
        sb.append(getAccountName());
        sb.append(", amount=");
        sb.append(getAmount());
        sb.append(", actualsMasterSid=");
        sb.append(getActualsMasterSid());
        sb.append(", acctIdentifierCodeQualifier=");
        sb.append(getAcctIdentifierCodeQualifier());
        sb.append(", organizationKey=");
        sb.append(getOrganizationKey());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", accrualProcessed=");
        sb.append(getAccrualProcessed());
        sb.append(", parentcomDivmktBrandProdkey=");
        sb.append(getParentcomDivmktBrandProdkey());
        sb.append(", cashPaidDate=");
        sb.append(getCashPaidDate());
        sb.append(", salesAmount=");
        sb.append(getSalesAmount());
        sb.append(", accrualActualStartDate=");
        sb.append(getAccrualActualStartDate());
        sb.append(", settlementNo=");
        sb.append(getSettlementNo());
        sb.append(", price=");
        sb.append(getPrice());
        sb.append(", uploadDate=");
        sb.append(getUploadDate());
        sb.append(", claimIndicator=");
        sb.append(getClaimIndicator());
        sb.append(", itemId=");
        sb.append(getItemId());
        sb.append(", priceAdjustmentName=");
        sb.append(getPriceAdjustmentName());
        sb.append(", contractId=");
        sb.append(getContractId());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", actualId=");
        sb.append(getActualId());
        sb.append(", provisionId=");
        sb.append(getProvisionId());
        sb.append(", sentOut=");
        sb.append(getSentOut());
        sb.append(", recordLockStatus=");
        sb.append(getRecordLockStatus());
        sb.append(", divisionId=");
        sb.append(getDivisionId());
        sb.append(", itemIdentifierCodeQualifier=");
        sb.append(getItemIdentifierCodeQualifier());
        sb.append(", programStateCode=");
        sb.append(getProgramStateCode());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", invoiceLineNo=");
        sb.append(getInvoiceLineNo());
        sb.append(", accountNo=");
        sb.append(getAccountNo());
        sb.append(", comDivMktBrandProdKey=");
        sb.append(getComDivMktBrandProdKey());
        sb.append(", inboundStatus=");
        sb.append(getInboundStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(148);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.ActualsMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>quantityInclusion</column-name><column-value><![CDATA[");
        sb.append(getQuantityInclusion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mandatedDiscountAmount</column-name><column-value><![CDATA[");
        sb.append(getMandatedDiscountAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemNo</column-name><column-value><![CDATA[");
        sb.append(getItemNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>analysisCode</column-name><column-value><![CDATA[");
        sb.append(getAnalysisCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordSequence</column-name><column-value><![CDATA[");
        sb.append(getRecordSequence());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>settlementMethodNo</column-name><column-value><![CDATA[");
        sb.append(getSettlementMethodNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>quantity</column-name><column-value><![CDATA[");
        sb.append(getQuantity());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>accountId</column-name><column-value><![CDATA[");
        sb.append(getAccountId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>provisionClaimIndicator</column-name><column-value><![CDATA[");
        sb.append(getProvisionClaimIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dispensedDate</column-name><column-value><![CDATA[");
        sb.append(getDispensedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isActive</column-name><column-value><![CDATA[");
        sb.append(getIsActive());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>accrualActualEndDate</column-name><column-value><![CDATA[");
        sb.append(getAccrualActualEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketId</column-name><column-value><![CDATA[");
        sb.append(getMarketId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandId</column-name><column-value><![CDATA[");
        sb.append(getBrandId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>accountName</column-name><column-value><![CDATA[");
        sb.append(getAccountName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>amount</column-name><column-value><![CDATA[");
        sb.append(getAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>actualsMasterSid</column-name><column-value><![CDATA[");
        sb.append(getActualsMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>acctIdentifierCodeQualifier</column-name><column-value><![CDATA[");
        sb.append(getAcctIdentifierCodeQualifier());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationKey</column-name><column-value><![CDATA[");
        sb.append(getOrganizationKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>accrualProcessed</column-name><column-value><![CDATA[");
        sb.append(getAccrualProcessed());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentcomDivmktBrandProdkey</column-name><column-value><![CDATA[");
        sb.append(getParentcomDivmktBrandProdkey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cashPaidDate</column-name><column-value><![CDATA[");
        sb.append(getCashPaidDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salesAmount</column-name><column-value><![CDATA[");
        sb.append(getSalesAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>accrualActualStartDate</column-name><column-value><![CDATA[");
        sb.append(getAccrualActualStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>settlementNo</column-name><column-value><![CDATA[");
        sb.append(getSettlementNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>price</column-name><column-value><![CDATA[");
        sb.append(getPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>uploadDate</column-name><column-value><![CDATA[");
        sb.append(getUploadDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>claimIndicator</column-name><column-value><![CDATA[");
        sb.append(getClaimIndicator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemId</column-name><column-value><![CDATA[");
        sb.append(getItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceAdjustmentName</column-name><column-value><![CDATA[");
        sb.append(getPriceAdjustmentName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contractId</column-name><column-value><![CDATA[");
        sb.append(getContractId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>actualId</column-name><column-value><![CDATA[");
        sb.append(getActualId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>provisionId</column-name><column-value><![CDATA[");
        sb.append(getProvisionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sentOut</column-name><column-value><![CDATA[");
        sb.append(getSentOut());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
        sb.append(getRecordLockStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>divisionId</column-name><column-value><![CDATA[");
        sb.append(getDivisionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemIdentifierCodeQualifier</column-name><column-value><![CDATA[");
        sb.append(getItemIdentifierCodeQualifier());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>programStateCode</column-name><column-value><![CDATA[");
        sb.append(getProgramStateCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>invoiceLineNo</column-name><column-value><![CDATA[");
        sb.append(getInvoiceLineNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>accountNo</column-name><column-value><![CDATA[");
        sb.append(getAccountNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>comDivMktBrandProdKey</column-name><column-value><![CDATA[");
        sb.append(getComDivMktBrandProdKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
        sb.append(getInboundStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
