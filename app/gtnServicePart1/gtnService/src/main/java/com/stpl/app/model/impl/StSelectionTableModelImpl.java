/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.StSelectionTable;
import com.stpl.app.model.StSelectionTableModel;
import com.stpl.app.service.persistence.StSelectionTablePK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StSelectionTable service. Represents a row in the &quot;ST_SELECTION_TABLE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link StSelectionTableModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StSelectionTableImpl}.
 * </p>
 *
 * @author
 * @see StSelectionTableImpl
 * @see StSelectionTable
 * @see StSelectionTableModel
 * @generated
 */
@ProviderType
public class StSelectionTableModelImpl extends BaseModelImpl<StSelectionTable>
	implements StSelectionTableModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a st selection table model instance should use the {@link StSelectionTable} interface instead.
	 */
	public static final String TABLE_NAME = "ST_SELECTION_TABLE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "SELECTION_TYPE", Types.VARCHAR },
			{ "USER_ID", Types.INTEGER },
			{ "SESSION_ID", Types.VARCHAR },
			{ "COMPANY_ITEM_SID", Types.INTEGER },
			{ "CHECK_RECORD", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("SELECTION_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("USER_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SESSION_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COMPANY_ITEM_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CHECK_RECORD", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table ST_SELECTION_TABLE (SELECTION_TYPE VARCHAR(75) not null IDENTITY,USER_ID INTEGER not null IDENTITY,SESSION_ID VARCHAR(75) not null IDENTITY,COMPANY_ITEM_SID INTEGER not null IDENTITY,CHECK_RECORD BOOLEAN,primary key (SELECTION_TYPE, USER_ID, SESSION_ID, COMPANY_ITEM_SID))";
	public static final String TABLE_SQL_DROP = "drop table ST_SELECTION_TABLE";
	public static final String ORDER_BY_JPQL = " ORDER BY stSelectionTable.id.selectionType ASC, stSelectionTable.id.userId ASC, stSelectionTable.id.sessionId ASC, stSelectionTable.id.companyItemSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ST_SELECTION_TABLE.SELECTION_TYPE ASC, ST_SELECTION_TABLE.USER_ID ASC, ST_SELECTION_TABLE.SESSION_ID ASC, ST_SELECTION_TABLE.COMPANY_ITEM_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.StSelectionTable"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.StSelectionTable"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.StSelectionTable"));

	public StSelectionTableModelImpl() {
	}

	@Override
	public StSelectionTablePK getPrimaryKey() {
		return new StSelectionTablePK(_selectionType, _userId, _sessionId,
			_companyItemSid);
	}

	@Override
	public void setPrimaryKey(StSelectionTablePK primaryKey) {
		setSelectionType(primaryKey.selectionType);
		setUserId(primaryKey.userId);
		setSessionId(primaryKey.sessionId);
		setCompanyItemSid(primaryKey.companyItemSid);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new StSelectionTablePK(_selectionType, _userId, _sessionId,
			_companyItemSid);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((StSelectionTablePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return StSelectionTable.class;
	}

	@Override
	public String getModelClassName() {
		return StSelectionTable.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("selectionType", getSelectionType());
		attributes.put("userId", getUserId());
		attributes.put("sessionId", getSessionId());
		attributes.put("companyItemSid", getCompanyItemSid());
		attributes.put("checkRecord", getCheckRecord());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String selectionType = (String)attributes.get("selectionType");

		if (selectionType != null) {
			setSelectionType(selectionType);
		}

		Integer userId = (Integer)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String sessionId = (String)attributes.get("sessionId");

		if (sessionId != null) {
			setSessionId(sessionId);
		}

		Integer companyItemSid = (Integer)attributes.get("companyItemSid");

		if (companyItemSid != null) {
			setCompanyItemSid(companyItemSid);
		}

		Boolean checkRecord = (Boolean)attributes.get("checkRecord");

		if (checkRecord != null) {
			setCheckRecord(checkRecord);
		}
	}

	@Override
	public String getSelectionType() {
		if (_selectionType == null) {
			return StringPool.BLANK;
		}
		else {
			return _selectionType;
		}
	}

	@Override
	public void setSelectionType(String selectionType) {
		_selectionType = selectionType;
	}

	@Override
	public int getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(int userId) {
		_userId = userId;
	}

	@Override
	public String getSessionId() {
		if (_sessionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _sessionId;
		}
	}

	@Override
	public void setSessionId(String sessionId) {
		_sessionId = sessionId;
	}

	@Override
	public int getCompanyItemSid() {
		return _companyItemSid;
	}

	@Override
	public void setCompanyItemSid(int companyItemSid) {
		_companyItemSid = companyItemSid;
	}

	@Override
	public boolean getCheckRecord() {
		return _checkRecord;
	}

	@Override
	public boolean isCheckRecord() {
		return _checkRecord;
	}

	@Override
	public void setCheckRecord(boolean checkRecord) {
		_checkRecord = checkRecord;
	}

	@Override
	public StSelectionTable toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StSelectionTable)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StSelectionTableImpl stSelectionTableImpl = new StSelectionTableImpl();

		stSelectionTableImpl.setSelectionType(getSelectionType());
		stSelectionTableImpl.setUserId(getUserId());
		stSelectionTableImpl.setSessionId(getSessionId());
		stSelectionTableImpl.setCompanyItemSid(getCompanyItemSid());
		stSelectionTableImpl.setCheckRecord(getCheckRecord());

		stSelectionTableImpl.resetOriginalValues();

		return stSelectionTableImpl;
	}

	@Override
	public int compareTo(StSelectionTable stSelectionTable) {
		StSelectionTablePK primaryKey = stSelectionTable.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StSelectionTable)) {
			return false;
		}

		StSelectionTable stSelectionTable = (StSelectionTable)obj;

		StSelectionTablePK primaryKey = stSelectionTable.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<StSelectionTable> toCacheModel() {
		StSelectionTableCacheModel stSelectionTableCacheModel = new StSelectionTableCacheModel();

		stSelectionTableCacheModel.stSelectionTablePK = getPrimaryKey();

		stSelectionTableCacheModel.selectionType = getSelectionType();

		String selectionType = stSelectionTableCacheModel.selectionType;

		if ((selectionType != null) && (selectionType.length() == 0)) {
			stSelectionTableCacheModel.selectionType = null;
		}

		stSelectionTableCacheModel.userId = getUserId();

		stSelectionTableCacheModel.sessionId = getSessionId();

		String sessionId = stSelectionTableCacheModel.sessionId;

		if ((sessionId != null) && (sessionId.length() == 0)) {
			stSelectionTableCacheModel.sessionId = null;
		}

		stSelectionTableCacheModel.companyItemSid = getCompanyItemSid();

		stSelectionTableCacheModel.checkRecord = getCheckRecord();

		return stSelectionTableCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{selectionType=");
		sb.append(getSelectionType());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", sessionId=");
		sb.append(getSessionId());
		sb.append(", companyItemSid=");
		sb.append(getCompanyItemSid());
		sb.append(", checkRecord=");
		sb.append(getCheckRecord());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.StSelectionTable");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>selectionType</column-name><column-value><![CDATA[");
		sb.append(getSelectionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sessionId</column-name><column-value><![CDATA[");
		sb.append(getSessionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyItemSid</column-name><column-value><![CDATA[");
		sb.append(getCompanyItemSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkRecord</column-name><column-value><![CDATA[");
		sb.append(getCheckRecord());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = StSelectionTable.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			StSelectionTable.class
		};
	private String _selectionType;
	private int _userId;
	private String _sessionId;
	private int _companyItemSid;
	private boolean _checkRecord;
	private StSelectionTable _escapedModel;
}