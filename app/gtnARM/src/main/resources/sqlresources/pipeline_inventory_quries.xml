<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->


<sql>
    
    <entity id="Summary_generate_Inventory">
        
        <query>
            <![CDATA[
               DECLARE @PROJECTION INT = ?
	,@DEDUCTION_LEVEL VARCHAR(50) = '?'
	,@VIEW VARCHAR(50) = '?' 
        ,@BASE_VIEW VARCHAR(50) = '?'
        DECLARE @ARM_INVENTORY_RATE AS TABLE (
	ARM_ADJUSTMENT_DETAILS_SID INT
	,ITEM_ID VARCHAR(50)
	,ITEM_NAME VARCHAR(100)
	,BRAND_ID VARCHAR(50)
	,BRAND_NAME VARCHAR(100)
	,COMPANY_ID VARCHAR(50)
	,COMPANY_NAME VARCHAR(100)
	,CONTRACT_ID VARCHAR(50)
	,[CONTRACT_NAME] VARCHAR(100)
	,RS_CATEGORY VARCHAR(50)
	,RS_TYPE VARCHAR(50)
	,REBATE_PROGRAM_TYPE VARCHAR(50)
	,RS_ID VARCHAR(50)
	,RS_NAME VARCHAR(100)
	,UDC1 VARCHAR(50)
	,UDC2 VARCHAR(50)
	,UDC3 VARCHAR(50)
	,UDC4 VARCHAR(50)
	,UDC5 VARCHAR(50)
	,UDC6 VARCHAR(50)
	,CURRENT_PIPELINE_INVENTORY NUMERIC(22, 6)
	,PROJECTED_PIPELINE_INVENTORY NUMERIC(22, 6)
	,PIPELINE_RATIO NUMERIC(22, 6)
	,VARIANCE NUMERIC(22, 6)
	,[OVERRIDE] NUMERIC(22, 6)
	,ADJUSTMENT NUMERIC(22, 6)
	,DEDUCTION_SET_1 VARCHAR(150)
	,DEDUCTION_SET_2 VARCHAR(150)
	,MASTER_SID INT 
	,LEVEL_NO INT 
	,ITEM_NO BIT
        ,LEVEL_NAME   VARCHAR(200)
        ,RANK_VIEW INT
	)

INSERT INTO @ARM_INVENTORY_RATE (
	ARM_ADJUSTMENT_DETAILS_SID
	,ITEM_ID
	,ITEM_NAME
	,BRAND_ID
	,BRAND_NAME
	,COMPANY_ID
	,COMPANY_NAME
	,CONTRACT_ID
	,[CONTRACT_NAME]
	,RS_CATEGORY
	,RS_TYPE
	,REBATE_PROGRAM_TYPE
	,RS_ID
	,RS_NAME
	,UDC1
	,UDC2
	,UDC3
	,UDC4
	,UDC5
	,UDC6
	,CURRENT_PIPELINE_INVENTORY
	,PROJECTED_PIPELINE_INVENTORY
	,PIPELINE_RATIO
	,VARIANCE
	,[OVERRIDE]
	,ADJUSTMENT
	,DEDUCTION_SET_1
	,DEDUCTION_SET_2
	,MASTER_SID
	,LEVEL_NO
	,ITEM_NO
        ,LEVEL_NAME
	,RANK_VIEW
	)
SELECT B.ARM_ADJUSTMENT_DETAILS_SID
	,IM.ITEM_ID
	,IM.ITEM_NAME
	,BM.BRAND_ID
	,BM.BRAND_NAME
	,CM.COMPANY_ID
	,CM.COMPANY_NAME
	,CON.CONTRACT_ID
	,CON.[CONTRACT_NAME]
	,RS_CAT.DESCRIPTION AS RS_CATEGORY
	,RS_TYP.DESCRIPTION AS RS_TYPE
	,REB_PRGM.DESCRIPTION AS REBATE_PROGRAM_TYPE
	,R.RS_ID
	,R.RS_NAME
	,U1.DESCRIPTION AS UDC1
	,U2.DESCRIPTION AS UDC2
	,U3.DESCRIPTION AS UDC3
	,U4.DESCRIPTION AS UDC4
	,U5.DESCRIPTION AS UDC5
	,U6.DESCRIPTION AS UDC6
	,A.CURRENT_PIPELINE_INVENTORY
	,A.PROJECTED_PIPELINE_INVENTORY
	,A.PIPELINE_RATIO
	,A.VARIANCE 
	,A.[OVERRIDE]
	,ISNULL(A.[OVERRIDE], A.VARIANCE)  AS ADJUSTMENT
	,
DEDUCTION_SET_1 = CASE
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION PROGRAM' THEN REB_PRGM.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY' THEN RS_CAT.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION TYPE' THEN RS_TYP.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION' THEN R.RS_ID
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 1' THEN U1.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 2' THEN U2.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 3' THEN U3.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 4' THEN U4.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 5' THEN U5.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 6' THEN U6.DESCRIPTION
END,
DEDUCTION_SET_2 = CASE
	WHEN @VIEW = 'PRODUCT' THEN IM.ITEM_ID
	WHEN @VIEW = 'BRAND' THEN BM.BRAND_NAME
	WHEN @VIEW = 'CUSTOMER' THEN CM.COMPANY_NAME
	WHEN @VIEW = 'CONTRACT' THEN CON.[CONTRACT_NAME]
	WHEN @VIEW  = 'DEDUCTION' THEN R.RS_ID

        WHEN @VIEW = 'DEDUCTION PROGRAM' THEN REB_PRGM.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION CATEGORY' THEN RS_CAT.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION TYPE' THEN RS_TYP.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION CATEGORY 1' THEN U1.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION CATEGORY 2' THEN U2.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION CATEGORY 3' THEN U3.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION CATEGORY 4' THEN U4.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION CATEGORY 5' THEN U5.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION CATEGORY 6' THEN U6.DESCRIPTION
END,
MASTER_SID = CASE
	WHEN @VIEW = 'PRODUCT' THEN IM.ITEM_MASTER_SID
	WHEN @VIEW = 'BRAND' THEN BM.BRAND_MASTER_SID
	WHEN @VIEW = 'CUSTOMER' THEN CM.COMPANY_MASTER_SID
	WHEN @VIEW = 'CONTRACT' THEN CON.CONTRACT_MASTER_SID
	WHEN @VIEW = 'DEDUCTION' THEN R.RS_MODEL_SID

        WHEN @VIEW = 'DEDUCTION PROGRAM' THEN REB_PRGM.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION CATEGORY' THEN RS_CAT.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION TYPE' THEN RS_TYP.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION CATEGORY 1' THEN U1.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION CATEGORY 2' THEN U2.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION CATEGORY 3' THEN U3.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION CATEGORY 4' THEN U4.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION CATEGORY 5' THEN U5.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION CATEGORY 6' THEN U6.HELPER_TABLE_SID
END,
   LEVEL_NO = CASE
		WHEN @DEDUCTION_LEVEL = 'DEDUCTION' 
                    AND @BASE_VIEW = 'DEDUCTION_CUSTOMER_CONTRACT' THEN CASE
			    WHEN @VIEW = 'PRODUCT' THEN 5
			    WHEN @VIEW = 'BRAND' THEN 4
                            WHEN @VIEW = 'CONTRACT' THEN 3
                            WHEN @VIEW = 'CUSTOMER' THEN 2
                            WHEN @VIEW = 'DEDUCTION' THEN 1

                            WHEN @VIEW = 'DEDUCTION PROGRAM' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION CATEGORY' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION TYPE' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION CATEGORY 1' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION CATEGORY 2' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION CATEGORY 3' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION CATEGORY 4' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION CATEGORY 5' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION CATEGORY 6' THEN 1
                    END
                    WHEN @DEDUCTION_LEVEL <> 'DEDUCTION' 
                   AND @BASE_VIEW <> 'DEDUCTION_CUSTOMER_CONTRACT' THEN CASE
                        WHEN @VIEW = 'PRODUCT' THEN 5
                        WHEN @VIEW = 'BRAND' THEN 4
			WHEN @VIEW = 'CUSTOMER' THEN 3
                        WHEN @VIEW = 'CONTRACT' THEN 2
                        WHEN @VIEW = 'DEDUCTION' THEN 1

                        WHEN @VIEW = 'DEDUCTION PROGRAM' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY' THEN 1 
                        WHEN @VIEW = 'DEDUCTION TYPE' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 1' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 2' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 3' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 4' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 5' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 6' THEN 1
		END
                       WHEN @DEDUCTION_LEVEL <> 'DEDUCTION'
                   AND @BASE_VIEW = 'DEDUCTION_CUSTOMER_CONTRACT' THEN CASE
                         WHEN @VIEW = 'PRODUCT' THEN 4
                         WHEN @VIEW = 'BRAND' THEN 3
                            WHEN @VIEW = 'CONTRACT' THEN 2
                            WHEN @VIEW = 'CUSTOMER' THEN 1
             END
               WHEN @DEDUCTION_LEVEL = 'DEDUCTION'
                   AND @BASE_VIEW <> 'DEDUCTION_CUSTOMER_CONTRACT' THEN CASE
                        WHEN @VIEW = 'PRODUCT' THEN 5
                        WHEN @VIEW = 'BRAND' THEN 4
			WHEN @VIEW = 'CUSTOMER' THEN 3
                        WHEN @VIEW = 'CONTRACT' THEN 2
                        WHEN @VIEW = 'DEDUCTION' THEN 1

                        WHEN @VIEW = 'DEDUCTION PROGRAM' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY' THEN 1 
                        WHEN @VIEW = 'DEDUCTION TYPE' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 1' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 2' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 3' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 4' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 5' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 6' THEN 1
             END
                    END,
ITEM_NO = CASE
	WHEN @VIEW = 'PRODUCT' THEN 0
	WHEN @VIEW = 'BRAND' THEN 1
	WHEN @VIEW = 'CUSTOMER' THEN 1
	WHEN @VIEW = 'CONTRACT' THEN 1
	WHEN @VIEW = 'DEDUCTION' THEN 1

        WHEN @VIEW = 'DEDUCTION PROGRAM' THEN 1 
        WHEN @VIEW = 'DEDUCTION CATEGORY' THEN 1 
        WHEN @VIEW = 'DEDUCTION TYPE' THEN 1 
        WHEN @VIEW = 'DEDUCTION CATEGORY 1' THEN 1 
        WHEN @VIEW = 'DEDUCTION CATEGORY 2' THEN 1 
        WHEN @VIEW = 'DEDUCTION CATEGORY 3' THEN 1 
        WHEN @VIEW = 'DEDUCTION CATEGORY 4' THEN 1 
        WHEN @VIEW = 'DEDUCTION CATEGORY 5' THEN 1 
        WHEN @VIEW = 'DEDUCTION CATEGORY 6' THEN 1
END,
  LEVEL_NAME= CASE
                      WHEN @VIEW='PRODUCT' THEN IM.ITEM_NAME
                       WHEN @VIEW='BRAND' THEN BM.BRAND_NAME
                                       WHEN @VIEW='CUSTOMER' THEN  CM.COMPANY_NAME
                                       WHEN @VIEW='CONTRACT' THEN CON.[CONTRACT_NAME]
                                       END,
RANK_VIEW = DENSE_RANK() OVER(
ORDER BY
	CASE
		WHEN @VIEW = 'PRODUCT' THEN IM.ITEM_MASTER_SID
		WHEN @VIEW = 'BRAND' THEN BM.BRAND_MASTER_SID
		WHEN @VIEW = 'CUSTOMER' THEN CM.COMPANY_MASTER_SID
		WHEN @VIEW = 'CONTRACT' THEN CON.CONTRACT_MASTER_SID
		WHEN @VIEW = 'DEDUCTION' THEN R.RS_MODEL_SID

                WHEN @VIEW = 'DEDUCTION PROGRAM' THEN REB_PRGM.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION CATEGORY' THEN RS_CAT.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION TYPE' THEN RS_TYP.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION CATEGORY 1' THEN U1.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION CATEGORY 2' THEN U2.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION CATEGORY 3' THEN U3.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION CATEGORY 4' THEN U4.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION CATEGORY 5' THEN U5.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION CATEGORY 6' THEN U6.HELPER_TABLE_SID
	END  )   
        FROM ARM_INVENTORY_RATE A
        JOIN ARM_ADJUSTMENT_DETAILS B ON A.ARM_ADJUSTMENT_DETAILS_SID = B.ARM_ADJUSTMENT_DETAILS_SID
        JOIN CCP_DETAILS C ON C.CCP_DETAILS_SID = B.CCP_DETAILS_SID
        JOIN ITEM_MASTER IM ON IM.ITEM_MASTER_SID = C.ITEM_MASTER_SID
        JOIN BRAND_MASTER BM ON BM.BRAND_MASTER_SID = IM.BRAND_MASTER_SID
        JOIN dbo.RS_CONTRACT R ON R.RS_MODEL_SID = B.RS_MODEL_SID
        AND R.CONTRACT_MASTER_SID=C.CONTRACT_MASTER_SID
        JOIN COMPANY_MASTER CM ON CM.COMPANY_MASTER_SID = C.COMPANY_MASTER_SID
        LEFT JOIN UDCS U ON U.MASTER_SID = R.RS_CONTRACT_SID
                AND U.MASTER_TYPE = 'RS_CONTRACT'
        LEFT JOIN HELPER_TABLE RS_CAT ON RS_CAT.HELPER_TABLE_SID = R.RS_CATEGORY
        LEFT JOIN HELPER_TABLE RS_TYP ON RS_CAT.HELPER_TABLE_SID = R.RS_TYPE
        LEFT JOIN HELPER_TABLE REB_PRGM ON RS_CAT.HELPER_TABLE_SID = R.REBATE_PROGRAM_TYPE
        LEFT JOIN HELPER_TABLE U1 ON U1.HELPER_TABLE_SID = U.UDC1
        LEFT JOIN HELPER_TABLE U2 ON U2.HELPER_TABLE_SID = U.UDC2
        LEFT JOIN HELPER_TABLE U3 ON U3.HELPER_TABLE_SID = U.UDC3
        LEFT JOIN HELPER_TABLE U4 ON U4.HELPER_TABLE_SID = U.UDC4
        LEFT JOIN HELPER_TABLE U5 ON U5.HELPER_TABLE_SID = U.UDC5
        LEFT JOIN HELPER_TABLE U6 ON U6.HELPER_TABLE_SID = U.UDC6
        JOIN CONTRACT_MASTER CON ON CON.CONTRACT_MASTER_SID = C.CONTRACT_MASTER_SID
        WHERE B.PROJECTION_MASTER_SID = @PROJECTION
          and R.RS_MODEL_SID like '?'
         and C.CONTRACT_MASTER_SID Like '?'
          and C.COMPANY_MASTER_SID like '?'
          and IM.BRAND_MASTER_SID like '?'
         and C.ITEM_MASTER_SID like '?'
         AND CASE
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION PROGRAM' THEN REB_PRGM.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY' THEN RS_CAT.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION TYPE' THEN RS_TYP.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION' THEN R.RS_ID
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 1' THEN U1.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 2' THEN U2.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 3' THEN U3.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 4' THEN U4.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 5' THEN U5.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 6' THEN U6.DESCRIPTION
END IN (?)
            ]]>  
        </query>
    </entity>
    
    <entity id="Summary_generate_Inventory_count">
        
        <query>
            <![CDATA[
               SELECT COUNT(DISTINCT DEDUCTION_SET_2) FROM @ARM_INVENTORY_RATE 
            ]]>  
        </query>
    </entity>
    
    <entity id="Summary_generate_Inventory_select">
        
        <query>
            <![CDATA[
               SELECT DEDUCTION_SET_1
	,DEDUCTION_SET_2
	,SUM(CURRENT_PIPELINE_INVENTORY) AS CURRENT_PIPELINE_INVENTORY
	,SUM(PROJECTED_PIPELINE_INVENTORY) AS PROJECTED_PIPELINE_INVENTORY
        ,ISNULL(SUM(CURRENT_PIPELINE_INVENTORY),0)/NULLIF(SUM(PROJECTED_PIPELINE_INVENTORY),0) AS PIPELINE_RATIO
        ,Sum(VARIANCE)  AS VARIANCE
	,CASE WHEN @VIEW='PRODUCT' THEN SUM([OVERRIDE])
        ELSE NULL END AS [OVERRIDE]
	,SUM(ISNULL([OVERRIDE], (VARIANCE))) AS ADJUSTMENT
	,LEVEL_NO
	,ITEM_NO
        ,MASTER_SID
        ,LEVEL_NAME
        FROM @ARM_INVENTORY_RATE  
        $$$$PAGE_CONTROL$$$$
        GROUP BY DEDUCTION_SET_1
	,DEDUCTION_SET_2
	,LEVEL_NO
	,ITEM_NO
        ,MASTER_SID
        ,LEVEL_NAME
            ]]>  
        </query>
    </entity>
    
    <entity id="Update_Summary_Inventory_Override">
        
        <query>
            <![CDATA[
                DECLARE @PROJECTION_MASTER_SID INT = ?, 
                    @ITEM_MASTER_SID       INT = ?, 
                    @OVERRIDE_VALUE        INT = ? ,
                    @CONTRACT_MASTER_SID   INT = ?,
                    @COMPANY_MASTER_SID   INT = ?,
                    @BRAND_MASTER_SID   INT = ?,
                    @RS_MODEL_SID   INT = ?

            UPDATE RATE 
            SET    RATE.TEMP_OVERRIDE = @OVERRIDE_VALUE 
            FROM   ? RATE 
                   JOIN(SELECT RATE.ARM_ADJUSTMENT_DETAILS_SID, 
                               COALESCE(abs(PROJECTED_PIPELINE_INVENTORY) / 
                                        NULLIF(Sum(abs(PROJECTED_PIPELINE_INVENTORY)) 
                                        OVER( 
                              PARTITION BY CCP.ITEM_MASTER_SID,CCP.COMPANY_MASTER_SID,CCP.CONTRACT_MASTER_SID, AD.RS_MODEL_SID), 0), 0) AS RATIO 
            FROM   ? RATE 
                   JOIN DBO.ARM_ADJUSTMENT_DETAILS AD 
                     ON AD.ARM_ADJUSTMENT_DETAILS_SID = 
                        RATE.ARM_ADJUSTMENT_DETAILS_SID 
                   JOIN DBO.CCP_DETAILS CCP 
                     ON CCP.CCP_DETAILS_SID = AD.CCP_DETAILS_SID 
                   JOIN DBO.ITEM_MASTER IM 
                     ON IM.ITEM_MASTER_SID = CCP.ITEM_MASTER_SID 
            WHERE  AD.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID 
                   AND CCP.ITEM_MASTER_SID = @ITEM_MASTER_SID 
                   AND CCP.CONTRACT_MASTER_SID LIKE @CONTRACT_MASTER_SID
                   AND CCP.COMPANY_MASTER_SID LIKE @COMPANY_MASTER_SID
                   AND IM.BRAND_MASTER_SID LIKE @BRAND_MASTER_SID
                   AND AD.RS_MODEL_SID = @RS_MODEL_SID) A 
         ON RATE.ARM_ADJUSTMENT_DETAILS_SID = A.ARM_ADJUSTMENT_DETAILS_SID 
	
            ]]>  
        </query>
    </entity>
    
    <entity id="Summary_generate_Inventory_select_orderby">
        
        <query>
            <![CDATA[
    ORDER BY
             DEDUCTION_SET_2
                ]]>  
        </query>
    </entity>
    
    <entity id="Calculate_Pacth_Summary_Inventory">
        
        <query>
            <![CDATA[
                DECLARE @PROJECTION_MASTER_SID INT = ?, 
                    @USER_ID INT = ?,
                    @SESSION_ID INT = ?,
                    @ITEM_MASTER_SID       INT = ?, 
                    @OVERRIDE_VALUE        INT = ? 

            UPDATE RATE 
            SET    RATE.OVERRIDE = A.RATIO * @OVERRIDE_VALUE 
            FROM   ARM_INVENTORY_RATE RATE 
                   JOIN(SELECT RATE.ARM_ADJUSTMENT_DETAILS_SID, 
                               COALESCE(PROJECTED_PIPELINE_INVENTORY / 
                                        NULLIF(Sum(PROJECTED_PIPELINE_INVENTORY) 
                                        OVER( 
                              PARTITION BY CCP.ITEM_MASTER_SID), 0), 0) AS RATIO 
            FROM   DBO.ST_ARM_INVENTORY_RATE RATE 
                   JOIN DBO.ARM_ADJUSTMENT_DETAILS AD 
                     ON AD.ARM_ADJUSTMENT_DETAILS_SID = 
                        RATE.ARM_ADJUSTMENT_DETAILS_SID 
                   JOIN DBO.CCP_DETAILS CCP 
                     ON CCP.CCP_DETAILS_SID = AD.CCP_DETAILS_SID 
                   JOIN DBO.ITEM_MASTER IM 
                     ON IM.ITEM_MASTER_SID = CCP.ITEM_MASTER_SID 
            WHERE  AD.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID 
                   AND RATE.USER_ID = @USER_ID
                   AND RATE.SESSION_ID = @SESSION_ID
                   AND CCP.ITEM_MASTER_SID = @ITEM_MASTER_SID 
                   AND CCP.CONTRACT_MASTER_SID LIKE '?' 
                   AND CCP.COMPANY_MASTER_SID LIKE '?' 
                   AND IM.BRAND_MASTER_SID LIKE '?') A 
         ON RATE.ARM_ADJUSTMENT_DETAILS_SID = A.ARM_ADJUSTMENT_DETAILS_SID 
	
            ]]>  
        </query>
    </entity>
    <entity id="getInventoryCount">
        <query>
    
     <![CDATA[
       DECLARE @VIEW                  VARCHAR(50)='[$VIEW]',
       @PROJECTION_MASTER_SID INT= [PROJECTION_MASTER_SID],
       @PRODUCT_MASTER_SID INT= [PRODUCT_MASTER_SID]
 
       SELECT COUNT(Distinct CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_MASTER_SID
                    WHEN @VIEW = 'BRAND' THEN IM.BRAND_MASTER_SID
                  END)
       FROM   ARM_INVENTORY AI
       JOIN ITEM_MASTER IM
         ON AI.ITEM_MASTER_SID = IM.ITEM_MASTER_SID
       WHERE  PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
      @COMP_CUST_MASTER_SID
       [BRAND_MASTER_SID] 
                  ]]>  
        </query>
    </entity>
    
   <entity id="getSalesBrandInventory">
        <query>
    
     <![CDATA[
       DECLARE @VIEW                  VARCHAR(50)='[$VIEW]',
       @PROJECTION_MASTER_SID INT= [PROJECTION_MASTER_SID],
       @PRODUCT_MASTER_SID INT= [PRODUCT_MASTER_SID],
       @LEVEL_FILTER    VARCHAR(50)='[LEVEL_FILTER]'
       SELECT
       MAINQ.INVENTORY_UNITS,
       MAINQ.TOTAL_INVENTORY,
       MAINQ.WEEKS_ON_HAND,
       MAINQ.UNITS_PER_RETAIL,
       MAINQ.PRICE,
       MAINQ.PRICEOVERRIDE,
       MAINQ.RETURN_RESERVE,
       MAINQ.NET_PIPELINE_VALUE,
       MAINQ.PRODUCT_NO,
       MAINQ.PRODUCT_NAME,
       MAINQ.PRODUCT_ID,
       MAINQ.BRAND_LEVEL,
       MAINQ.COMP_CUST_MASTER_SID,
       MAINQ.RANK_VIEW FROM (
       SELECT
       ISNULL(SUM(AI.INVENTORY_UNITS),0)            AS INVENTORY_UNITS,
       ISNULL(MAX(AI.TOTAL_INVENTORY),0)            AS TOTAL_INVENTORY,
       ISNULL(MAX(AI.WEEKS_ON_HAND),0)            AS WEEKS_ON_HAND,
       ISNULL(MAX(AI.UNITS_PER_RETAIL),0)         AS UNITS_PER_RETAIL,
       PRICE=CASE
                  WHEN @VIEW = 'ITEM' THEN ISNULL(MAX(AI.PRICE),0)
                  WHEN @VIEW = 'BRAND' THEN null
                END,
       PRICEOVERRIDE= CASE
                    WHEN @VIEW = 'ITEM' THEN MAX(AI.PRICE_OVERRIDE)
                    WHEN @VIEW = 'BRAND' THEN null
                  END,
       ISNULL(MAX(AI.RETURN_RESERVE),0)              AS RETURN_RESERVE,
       ISNULL(MAX(AI.NET_PIPELINE_VALUE),0)              AS NET_PIPELINE_VALUE,
       PRODUCT_NO= CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_NO+' - '+IM.ITEM_NAME
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_ID+' - '+BM.BRAND_NAME
                  END,
       PRODUCT_NAME= CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_NAME
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_NAME
                  END,
       PRODUCT_ID= CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_MASTER_SID
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_MASTER_SID
                  END,
        BRAND_LEVEL = CASE
	WHEN @LEVEL_FILTER = 'BRAND'  THEN CASE
		WHEN @VIEW = 'BRAND' OR  @VIEW = 'ITEM' THEN 0
	END
        WHEN @LEVEL_FILTER ='null' OR @LEVEL_FILTER = 'Product' OR @LEVEL_FILTER ='-Select One-' THEN CASE
		WHEN @VIEW = 'ITEM' THEN 0
		WHEN @VIEW = 'BRAND' THEN 1
	END
      END,
      @AI.REF_CUST_MASTER_SID AS COMP_CUST_MASTER_SID
      ,RANK_VIEW = DENSE_RANK() OVER(
      ORDER BY
      CASE
            WHEN @VIEW = 'ITEM' THEN IM.ITEM_MASTER_SID
             WHEN @VIEW = 'BRAND' THEN BM.BRAND_MASTER_SID 
      END  )
       FROM   ARM_INVENTORY AI
       JOIN ITEM_MASTER IM
         ON AI.ITEM_MASTER_SID = IM.ITEM_MASTER_SID
       JOIN BRAND_MASTER BM
         ON BM.BRAND_MASTER_SID = IM.BRAND_MASTER_SID
       WHERE  PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
         @COMP_CUST_MASTER_SID
       [BRAND_MASTER_SID] 
       GROUP  BY CASE
            WHEN @VIEW = 'ITEM' THEN IM.ITEM_NO+' - '+IM.ITEM_NAME
            WHEN @VIEW = 'BRAND' THEN BM.BRAND_ID+' - '+BM.BRAND_NAME
          END,
        CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_NAME
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_NAME
                  END,
        CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_MASTER_SID
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_MASTER_SID
                  END
        @AI.COMP_CUST_MASTER_SID
        ) MAINQ WHERE MAINQ.RANK_VIEW BETWEEN [START] AND [OFFSET]
                  ]]>  
        </query>
    </entity>
    
    <entity id="getInventoryCountEdit">
        <query>
    
     <![CDATA[
       DECLARE @VIEW                  VARCHAR(50)='[$VIEW]',
       @PROJECTION_MASTER_SID INT= [PROJECTION_MASTER_SID],
       @PRODUCT_MASTER_SID INT= [PRODUCT_MASTER_SID]
 
       SELECT COUNT(Distinct CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_MASTER_SID
                    WHEN @VIEW = 'BRAND' THEN IM.BRAND_MASTER_SID
                  END)
       FROM [TABLE] AI
       JOIN ITEM_MASTER IM
         ON AI.ITEM_MASTER_SID = IM.ITEM_MASTER_SID
       WHERE  PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
      @COMP_CUST_MASTER_SID
       [BRAND_MASTER_SID] 
                  ]]>  
        </query>
    </entity>
    
   <entity id="getSalesBrandInventoryEdit">
        <query>
    
     <![CDATA[
       DECLARE @VIEW                  VARCHAR(50)='[$VIEW]',
       @PROJECTION_MASTER_SID INT= [PROJECTION_MASTER_SID],
       @PRODUCT_MASTER_SID INT= [PRODUCT_MASTER_SID],
       @LEVEL_FILTER    VARCHAR(50)='[LEVEL_FILTER]'

        DECLARE @VAR1 INT=(SELECT COUNT(1) FROM COMPANY_GROUP A
      JOIN [TABLE] B ON B.COMP_CUST_MASTER_SID=A.COMPANY_GROUP_SID)

      IF(@VAR1>0)
      BEGIN
 
;WITH CTE AS(
  SELECT
       MAINQ.INVENTORY_UNITS,
       MAINQ.TOTAL_INVENTORY,
       MAINQ.WEEKS_ON_HAND,
       MAINQ.UNITS_PER_RETAIL,
       MAINQ.PRICE,
       MAINQ.PRICEOVERRIDE,
       MAINQ.RETURN_RESERVE,
       MAINQ.NET_PIPELINE_VALUE,
       MAINQ.PRODUCT_NO,
       MAINQ.PRODUCT_NAME,
       MAINQ.PRODUCT_ID,
       MAINQ.BRAND_LEVEL,
       MAINQ.COMP_CUST_MASTER_SID,
       MAINQ.RANK_VIEW FROM (
       SELECT
       ISNULL(SUM(AI.INVENTORY_UNITS),0)            AS INVENTORY_UNITS,
       ISNULL(MAX(AI.TOTAL_INVENTORY),0)            AS TOTAL_INVENTORY,
       
        CASE	
	    WHEN @VIEW = 'ITEM' THEN ISNULL(MAX(B.WEEKS_ON_HAND), 0)
            WHEN @VIEW = 'BRAND' THEN COALESCE(ISNULL(SUM(CASE
            WHEN CG.COMPANY_GROUP_NAME = 'WHA INVENTORY' THEN (INVENTORY_UNITS)
            ELSE 0
            END), 0) / NULLIF(SUM(CASE
            WHEN CG.COMPANY_GROUP_NAME = 'WHA INVENTORY' THEN (DEMAND_UNITS)
            ELSE 0
            END), 0), 0)
            END AS WEEKS_ON_HAND,
            
        CASE			
	    WHEN @VIEW = 'ITEM' THEN ISNULL(MAX(B.UNITS_PER_RETAIL), 0)
            WHEN @VIEW = 'BRAND' THEN ISNULL(SUM(AI.UNITS_PER_RETAIL), 0)
            END AS UNITS_PER_RETAIL,

       PRICE=CASE
                  WHEN @VIEW = 'ITEM' THEN ISNULL(MAX(AI.PRICE),0)
                  WHEN @VIEW = 'BRAND' THEN null
                END,
       PRICEOVERRIDE= CASE
                    WHEN @VIEW = 'ITEM' THEN MAX(AI.PRICE_OVERRIDE)
                    WHEN @VIEW = 'BRAND' THEN null
                  END,
       ISNULL(MAX(AI.RETURN_RESERVE),0)              AS RETURN_RESERVE,
       ISNULL(MAX(AI.NET_PIPELINE_VALUE),0)              AS NET_PIPELINE_VALUE,
       PRODUCT_NO= CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_NO+' - '+IM.ITEM_NAME
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_ID+' - '+BM.BRAND_NAME
                  END,
       PRODUCT_NAME= CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_NAME
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_NAME
                  END,
       PRODUCT_ID= CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_MASTER_SID
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_MASTER_SID
                  END,
        BRAND_LEVEL = CASE
	WHEN @LEVEL_FILTER = 'BRAND'  THEN CASE
		WHEN @VIEW = 'BRAND' OR  @VIEW = 'ITEM' THEN 0
	END
	WHEN @LEVEL_FILTER ='null' OR @LEVEL_FILTER = 'Product' OR @LEVEL_FILTER ='-Select One-' THEN CASE
		WHEN @VIEW = 'ITEM' THEN 0
		WHEN @VIEW = 'BRAND' THEN 1
	END
      END,
      @AI.REF_CUST_MASTER_SID  AS COMP_CUST_MASTER_SID
      ,RANK_VIEW = DENSE_RANK() OVER(
      ORDER BY
      CASE
            WHEN @VIEW = 'ITEM' THEN IM.ITEM_MASTER_SID
             WHEN @VIEW = 'BRAND' THEN BM.BRAND_MASTER_SID 
      END  )
       FROM   [TABLE] AI
       	JOIN (SELECT DISTINCT	
	ITEM_MASTER_SID,
        MAX(WEEKS_ON_HAND) WEEKS_ON_HAND,
        MAX(UNITS_PER_RETAIL) UNITS_PER_RETAIL
	FROM [TABLE]
        GROUP BY ITEM_MASTER_SID) B
                        		
	ON AI.ITEM_MASTER_SID = B.ITEM_MASTER_SID
       JOIN COMPANY_GROUP CG
        ON CG.COMPANY_GROUP_SID = AI.COMP_CUST_MASTER_SID
       
       JOIN ITEM_MASTER IM
         ON AI.ITEM_MASTER_SID = IM.ITEM_MASTER_SID
       JOIN BRAND_MASTER BM
         ON BM.BRAND_MASTER_SID = IM.BRAND_MASTER_SID
       WHERE  PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
        @COMP_CUST_MASTER_SID
       [BRAND_MASTER_SID] 
       
       GROUP  BY CASE
            WHEN @VIEW = 'ITEM' THEN IM.ITEM_NO+' - '+IM.ITEM_NAME
            WHEN @VIEW = 'BRAND' THEN BM.BRAND_ID+' - '+BM.BRAND_NAME
          END,
        CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_NAME
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_NAME
                  END,
        CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_MASTER_SID
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_MASTER_SID
                  END @AI.COMP_CUST_MASTER_SID
        ) MAINQ WHERE MAINQ.RANK_VIEW BETWEEN [START] AND [OFFSET])
        
        SELECT			
	  A.INVENTORY_UNITS,			
	  A.TOTAL_INVENTORY,			
	  B.WEEKS_ON_HAND,			
	  B.UNITS_PER_RETAIL,			
	  A.PRICE,			
	  A.PRICEOVERRIDE,			
	  A.RETURN_RESERVE,			
	  A.NET_PIPELINE_VALUE,			
	  A.PRODUCT_NO,			
	  A.PRODUCT_NAME,			
	  A.PRODUCT_ID,			
	  A.BRAND_LEVEL,			
	  A.COMP_CUST_MASTER_SID,			
	  A.RANK_VIEW			
	FROM CTE A			
	JOIN (SELECT DISTINCT			
	  PRODUCT_ID,			
	  MAX(WEEKS_ON_HAND) WEEKS_ON_HAND,			
	  MAX(UNITS_PER_RETAIL) UNITS_PER_RETAIL			
	FROM CTE			
	GROUP BY PRODUCT_ID) B			
	  ON A.PRODUCT_ID = B.PRODUCT_ID
          END
		ELSE

		BEGIN
		
     ;  WITH CTE AS(SELECT MAINQ.INVENTORY_UNITS,
        MAINQ.TOTAL_INVENTORY,
        MAINQ.WEEKS_ON_HAND,
        MAINQ.UNITS_PER_RETAIL,
        MAINQ.PRICE,
        MAINQ.PRICEOVERRIDE,
        MAINQ.RETURN_RESERVE,
        MAINQ.NET_PIPELINE_VALUE,
        MAINQ.PRODUCT_NO,
        MAINQ.PRODUCT_NAME,
        MAINQ.PRODUCT_ID,
        MAINQ.BRAND_LEVEL,
        MAINQ.COMP_CUST_MASTER_SID,
        MAINQ.RANK_VIEW
    FROM
        (
            SELECT
                ISNULL(
                    SUM(AI.INVENTORY_UNITS),
                    0
                ) AS INVENTORY_UNITS,
                ISNULL(
                    MAX(AI.TOTAL_INVENTORY),
                    0
                ) AS TOTAL_INVENTORY,
                CASE
                    WHEN @VIEW = 'ITEM' THEN ISNULL(
                        MAX(B.WEEKS_ON_HAND),
                        0
                    ) ELSE 
                           SUM(B.WEEKS_ON_HAND)
                END AS WEEKS_ON_HAND,
                CASE
                    WHEN @VIEW = 'ITEM' THEN ISNULL(
                        MAX(B.UNITS_PER_RETAIL),
                        0
                    )
                    WHEN @VIEW = 'BRAND' THEN ISNULL(
                        SUM(AI.UNITS_PER_RETAIL),
                        0
                    )
                END AS UNITS_PER_RETAIL,
                PRICE = CASE
                    WHEN @VIEW = 'ITEM' THEN ISNULL(
                        MAX(AI.PRICE),
                        0
                    )
                    WHEN @VIEW = 'BRAND' THEN NULL
                END,
                PRICEOVERRIDE = CASE
                    WHEN @VIEW = 'ITEM' THEN MAX(AI.PRICE_OVERRIDE)
                    WHEN @VIEW = 'BRAND' THEN NULL
                END,
                ISNULL(
                    MAX(AI.RETURN_RESERVE),
                    0
                ) AS RETURN_RESERVE,
                ISNULL(
                    MAX(AI.NET_PIPELINE_VALUE),
                    0
                ) AS NET_PIPELINE_VALUE,
                PRODUCT_NO = CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_NO + ' - ' + IM.ITEM_NAME
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_ID + ' - ' + BM.BRAND_NAME
                END,
                PRODUCT_NAME = CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_NAME
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_NAME
                END,
                PRODUCT_ID = CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_MASTER_SID
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_MASTER_SID
                END,
                BRAND_LEVEL = CASE
                    WHEN @LEVEL_FILTER = 'BRAND' THEN CASE
                        WHEN @VIEW = 'BRAND'
                        OR @VIEW = 'ITEM' THEN 0
                    END
                    WHEN @LEVEL_FILTER = 'null'
                    OR @LEVEL_FILTER = 'Product'
                    OR @LEVEL_FILTER = '-Select One-' THEN CASE
                        WHEN @VIEW = 'ITEM' THEN 0
                        WHEN @VIEW = 'BRAND' THEN 1
                    END
                END,
                AI.COMP_CUST_MASTER_SID AS COMP_CUST_MASTER_SID,
                RANK_VIEW = DENSE_RANK() OVER(
                ORDER BY
                    CASE
                        WHEN @VIEW = 'ITEM' THEN IM.ITEM_MASTER_SID
                        WHEN @VIEW = 'BRAND' THEN BM.BRAND_MASTER_SID
                    END
                )
            FROM
                [TABLE] AI JOIN(
                    SELECT
                        DISTINCT ITEM_MASTER_SID,
                        MAX(WEEKS_ON_HAND) WEEKS_ON_HAND,
                        MAX(UNITS_PER_RETAIL) UNITS_PER_RETAIL
                    FROM
                        [TABLE]
                    GROUP BY
                        ITEM_MASTER_SID
                ) B
                    ON AI.ITEM_MASTER_SID = B.ITEM_MASTER_SID
					 JOIN ITEM_MASTER IM
                    ON AI.ITEM_MASTER_SID = IM.ITEM_MASTER_SID JOIN BRAND_MASTER BM
                    ON BM.BRAND_MASTER_SID = IM.BRAND_MASTER_SID
            WHERE
                PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
                @COMP_CUST_MASTER_SID
                [BRAND_MASTER_SID] 
            GROUP BY
                CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_NO + ' - ' + IM.ITEM_NAME
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_ID + ' - ' + BM.BRAND_NAME
                END,
                CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_NAME
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_NAME
                END,
                CASE
                    WHEN @VIEW = 'ITEM' THEN IM.ITEM_MASTER_SID
                    WHEN @VIEW = 'BRAND' THEN BM.BRAND_MASTER_SID
                END,
                AI.COMP_CUST_MASTER_SID
        ) MAINQ
    WHERE
        MAINQ.RANK_VIEW BETWEEN 0 AND 2
) SELECT
    A.INVENTORY_UNITS,
    A.TOTAL_INVENTORY,
    B.WEEKS_ON_HAND,
    B.UNITS_PER_RETAIL,
    A.PRICE,
    A.PRICEOVERRIDE,
    A.RETURN_RESERVE,
    A.NET_PIPELINE_VALUE,
    A.PRODUCT_NO,
    A.PRODUCT_NAME,
    A.PRODUCT_ID,
    A.BRAND_LEVEL,
    A.COMP_CUST_MASTER_SID,
    A.RANK_VIEW
FROM
    CTE A JOIN(
        SELECT
            DISTINCT PRODUCT_ID,
            MAX(WEEKS_ON_HAND) WEEKS_ON_HAND,
            MAX(UNITS_PER_RETAIL) UNITS_PER_RETAIL
        FROM
            CTE
        GROUP BY
            PRODUCT_ID
    ) B
        ON A.PRODUCT_ID = B.PRODUCT_ID

		END
        
                  ]]>  
        </query>
    </entity>
        
    <entity id="Summary_generate_InventoryEdit">
        
        <query>
            <![CDATA[
               DECLARE @PROJECTION INT = ?
	,@DEDUCTION_LEVEL VARCHAR(50) = '?'
	,@VIEW VARCHAR(50) = '?' 
        ,@BASE_VIEW VARCHAR(50) = '?'
        DECLARE @ARM_INVENTORY_RATE AS TABLE (
	ARM_ADJUSTMENT_DETAILS_SID INT
	,ITEM_ID VARCHAR(50)
	,ITEM_NAME VARCHAR(100)
	,BRAND_ID VARCHAR(50)
	,BRAND_NAME VARCHAR(100)
	,COMPANY_ID VARCHAR(50)
	,COMPANY_NAME VARCHAR(100)
	,CONTRACT_ID VARCHAR(50)
	,[CONTRACT_NAME] VARCHAR(100)
	,RS_CATEGORY VARCHAR(50)
	,RS_TYPE VARCHAR(50)
	,REBATE_PROGRAM_TYPE VARCHAR(50)
	,RS_ID VARCHAR(50)
	,RS_NAME VARCHAR(100)
	,UDC1 VARCHAR(50)
	,UDC2 VARCHAR(50)
	,UDC3 VARCHAR(50)
	,UDC4 VARCHAR(50)
	,UDC5 VARCHAR(50)
	,UDC6 VARCHAR(50)
	,CURRENT_PIPELINE_INVENTORY NUMERIC(22, 6)
	,PROJECTED_PIPELINE_INVENTORY NUMERIC(22, 6)
	,PIPELINE_RATIO NUMERIC(22, 6)
	,VARIANCE NUMERIC(22, 6)
	,[OVERRIDE] NUMERIC(22, 6)
	,ADJUSTMENT NUMERIC(22, 6)
	,DEDUCTION_SET_1 VARCHAR(150)
	,DEDUCTION_SET_2 VARCHAR(150)
	,MASTER_SID INT 
	,LEVEL_NO INT 
	,ITEM_NO BIT
        ,LEVEL_NAME   VARCHAR(200)
        ,RANK_VIEW INT
	)

INSERT INTO @ARM_INVENTORY_RATE (
	ARM_ADJUSTMENT_DETAILS_SID
	,ITEM_ID
	,ITEM_NAME
	,BRAND_ID
	,BRAND_NAME
	,COMPANY_ID
	,COMPANY_NAME
	,CONTRACT_ID
	,[CONTRACT_NAME]
	,RS_CATEGORY
	,RS_TYPE
	,REBATE_PROGRAM_TYPE
	,RS_ID
	,RS_NAME
	,UDC1
	,UDC2
	,UDC3
	,UDC4
	,UDC5
	,UDC6
	,CURRENT_PIPELINE_INVENTORY
	,PROJECTED_PIPELINE_INVENTORY
	,PIPELINE_RATIO
	,VARIANCE
	,[OVERRIDE]
	,ADJUSTMENT
	,DEDUCTION_SET_1
	,DEDUCTION_SET_2
	,MASTER_SID
	,LEVEL_NO
	,ITEM_NO
        ,LEVEL_NAME
	,RANK_VIEW
	)
SELECT B.ARM_ADJUSTMENT_DETAILS_SID
	,IM.ITEM_ID
	,IM.ITEM_NAME
	,BM.BRAND_ID
	,BM.BRAND_NAME
	,CM.COMPANY_ID
	,CM.COMPANY_NAME
	,CON.CONTRACT_ID
	,CON.[CONTRACT_NAME]
	,RS_CAT.DESCRIPTION AS RS_CATEGORY
	,RS_TYP.DESCRIPTION AS RS_TYPE
	,REB_PRGM.DESCRIPTION AS REBATE_PROGRAM_TYPE
	,R.RS_ID
	,R.RS_NAME
	,U1.DESCRIPTION AS UDC1
	,U2.DESCRIPTION AS UDC2
	,U3.DESCRIPTION AS UDC3
	,U4.DESCRIPTION AS UDC4
	,U5.DESCRIPTION AS UDC5
	,U6.DESCRIPTION AS UDC6
	,A.CURRENT_PIPELINE_INVENTORY
	,A.PROJECTED_PIPELINE_INVENTORY
	,A.PIPELINE_RATIO
	,A.VARIANCE 
	,A.[OVERRIDE]
	,ISNULL(A.[OVERRIDE], A.VARIANCE)  AS ADJUSTMENT
	,
DEDUCTION_SET_1 = CASE
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION PROGRAM' THEN REB_PRGM.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY' THEN RS_CAT.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION TYPE' THEN RS_TYP.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION' THEN R.RS_ID
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 1' THEN U1.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 2' THEN U2.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 3' THEN U3.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 4' THEN U4.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 5' THEN U5.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 6' THEN U6.DESCRIPTION
END,
DEDUCTION_SET_2 = CASE
	WHEN @VIEW = 'PRODUCT' THEN IM.ITEM_ID
	WHEN @VIEW = 'BRAND' THEN BM.BRAND_NAME
	WHEN @VIEW = 'CUSTOMER' THEN CM.COMPANY_NAME
	WHEN @VIEW = 'CONTRACT' THEN CON.[CONTRACT_NAME]
	WHEN @VIEW  = 'DEDUCTION' THEN R.RS_ID

        WHEN @VIEW = 'DEDUCTION PROGRAM' THEN REB_PRGM.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION CATEGORY' THEN RS_CAT.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION TYPE' THEN RS_TYP.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION CATEGORY 1' THEN U1.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION CATEGORY 2' THEN U2.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION CATEGORY 3' THEN U3.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION CATEGORY 4' THEN U4.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION CATEGORY 5' THEN U5.DESCRIPTION 
        WHEN @VIEW = 'DEDUCTION CATEGORY 6' THEN U6.DESCRIPTION 
END,
MASTER_SID = CASE
	WHEN @VIEW = 'PRODUCT' THEN IM.ITEM_MASTER_SID
	WHEN @VIEW = 'BRAND' THEN BM.BRAND_MASTER_SID
	WHEN @VIEW = 'CUSTOMER' THEN CM.COMPANY_MASTER_SID
	WHEN @VIEW = 'CONTRACT' THEN CON.CONTRACT_MASTER_SID
	WHEN @VIEW = 'DEDUCTION' THEN R.RS_MODEL_SID

        WHEN @VIEW = 'DEDUCTION PROGRAM' THEN REB_PRGM.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION CATEGORY' THEN RS_CAT.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION TYPE' THEN RS_TYP.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION CATEGORY 1' THEN U1.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION CATEGORY 2' THEN U2.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION CATEGORY 3' THEN U3.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION CATEGORY 4' THEN U4.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION CATEGORY 5' THEN U5.HELPER_TABLE_SID 
        WHEN @VIEW = 'DEDUCTION CATEGORY 6' THEN U6.HELPER_TABLE_SID
END,
LEVEL_NO = CASE
		WHEN @DEDUCTION_LEVEL = 'DEDUCTION' 
                    AND @BASE_VIEW = 'DEDUCTION_CUSTOMER_CONTRACT' THEN CASE
			    WHEN @VIEW = 'PRODUCT' THEN 5
			    WHEN @VIEW = 'BRAND' THEN 4
                            WHEN @VIEW = 'CONTRACT' THEN 3
                            WHEN @VIEW = 'CUSTOMER' THEN 2
                            WHEN @VIEW = 'DEDUCTION' THEN 1

                            WHEN @VIEW = 'DEDUCTION PROGRAM' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION CATEGORY' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION TYPE' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION CATEGORY 1' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION CATEGORY 2' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION CATEGORY 3' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION CATEGORY 4' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION CATEGORY 5' THEN 1 
	                    WHEN @VIEW = 'DEDUCTION CATEGORY 6' THEN 1
                    END
                    WHEN @DEDUCTION_LEVEL <> 'DEDUCTION' 
                   AND @BASE_VIEW <> 'DEDUCTION_CUSTOMER_CONTRACT' THEN CASE
                        WHEN @VIEW = 'PRODUCT' THEN 5
                        WHEN @VIEW = 'BRAND' THEN 4
			WHEN @VIEW = 'CUSTOMER' THEN 3
                        WHEN @VIEW = 'CONTRACT' THEN 2
                        WHEN @VIEW = 'DEDUCTION' THEN 1

                        WHEN @VIEW = 'DEDUCTION PROGRAM' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY' THEN 1 
                        WHEN @VIEW = 'DEDUCTION TYPE' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 1' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 2' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 3' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 4' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 5' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 6' THEN 1
		END
                       WHEN @DEDUCTION_LEVEL <> 'DEDUCTION'
                   AND @BASE_VIEW = 'DEDUCTION_CUSTOMER_CONTRACT' THEN CASE
                         WHEN @VIEW = 'PRODUCT' THEN 4
                         WHEN @VIEW = 'BRAND' THEN 3
                            WHEN @VIEW = 'CONTRACT' THEN 2
                            WHEN @VIEW = 'CUSTOMER' THEN 1
             END
               WHEN @DEDUCTION_LEVEL = 'DEDUCTION'
                   AND @BASE_VIEW <> 'DEDUCTION_CUSTOMER_CONTRACT' THEN CASE
                        WHEN @VIEW = 'PRODUCT' THEN 5
                        WHEN @VIEW = 'BRAND' THEN 4
			WHEN @VIEW = 'CUSTOMER' THEN 3
                        WHEN @VIEW = 'CONTRACT' THEN 2
                        WHEN @VIEW = 'DEDUCTION' THEN 1

                        WHEN @VIEW = 'DEDUCTION PROGRAM' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY' THEN 1 
                        WHEN @VIEW = 'DEDUCTION TYPE' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 1' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 2' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 3' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 4' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 5' THEN 1 
                        WHEN @VIEW = 'DEDUCTION CATEGORY 6' THEN 1
             END
                    END,
ITEM_NO = CASE
	WHEN @VIEW = 'PRODUCT' THEN 0
	WHEN @VIEW = 'BRAND' THEN 1
	WHEN @VIEW = 'CUSTOMER' THEN 1
	WHEN @VIEW = 'CONTRACT' THEN 1
	WHEN @VIEW = 'DEDUCTION' THEN 1

        WHEN @VIEW = 'DEDUCTION PROGRAM' THEN 1 
        WHEN @VIEW = 'DEDUCTION CATEGORY' THEN 1 
        WHEN @VIEW = 'DEDUCTION TYPE' THEN 1 
        WHEN @VIEW = 'DEDUCTION CATEGORY 1' THEN 1 
        WHEN @VIEW = 'DEDUCTION CATEGORY 2' THEN 1 
        WHEN @VIEW = 'DEDUCTION CATEGORY 3' THEN 1 
        WHEN @VIEW = 'DEDUCTION CATEGORY 4' THEN 1 
        WHEN @VIEW = 'DEDUCTION CATEGORY 5' THEN 1 
        WHEN @VIEW = 'DEDUCTION CATEGORY 6' THEN 1
END,
  LEVEL_NAME= CASE
                      WHEN @VIEW='PRODUCT' THEN IM.ITEM_NAME
                       WHEN @VIEW='BRAND' THEN BM.BRAND_NAME
                                       WHEN @VIEW='CUSTOMER' THEN  CM.COMPANY_NAME
                                       WHEN @VIEW='CONTRACT' THEN CON.[CONTRACT_NAME]
                                       END,
RANK_VIEW = DENSE_RANK() OVER(
ORDER BY
	CASE
		WHEN @VIEW = 'PRODUCT' THEN IM.ITEM_MASTER_SID
		WHEN @VIEW = 'BRAND' THEN BM.BRAND_MASTER_SID
		WHEN @VIEW = 'CUSTOMER' THEN CM.COMPANY_MASTER_SID
		WHEN @VIEW = 'CONTRACT' THEN CON.CONTRACT_MASTER_SID
		WHEN @VIEW = 'DEDUCTION' THEN R.RS_MODEL_SID

                WHEN @VIEW = 'DEDUCTION PROGRAM' THEN REB_PRGM.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION CATEGORY' THEN RS_CAT.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION TYPE' THEN RS_TYP.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION CATEGORY 1' THEN U1.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION CATEGORY 2' THEN U2.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION CATEGORY 3' THEN U3.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION CATEGORY 4' THEN U4.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION CATEGORY 5' THEN U5.HELPER_TABLE_SID 
                WHEN @VIEW = 'DEDUCTION CATEGORY 6' THEN U6.HELPER_TABLE_SID
	END  )   
        FROM $$$$TABLE_NAME$$$$ A
        JOIN ARM_ADJUSTMENT_DETAILS B ON A.ARM_ADJUSTMENT_DETAILS_SID = B.ARM_ADJUSTMENT_DETAILS_SID
        JOIN CCP_DETAILS C ON C.CCP_DETAILS_SID = B.CCP_DETAILS_SID
        JOIN ITEM_MASTER IM ON IM.ITEM_MASTER_SID = C.ITEM_MASTER_SID
        JOIN BRAND_MASTER BM ON BM.BRAND_MASTER_SID = IM.BRAND_MASTER_SID
        JOIN dbo.RS_CONTRACT R ON R.RS_MODEL_SID = B.RS_MODEL_SID
        AND R.CONTRACT_MASTER_SID=C.CONTRACT_MASTER_SID
        JOIN ARM_DEDUCTION_SELECTION ADS ON ADS.RS_CONTRACT_SID=R.RS_CONTRACT_SID AND ADS.PROJECTION_MASTER_SID=@PROJECTION  
        JOIN COMPANY_MASTER CM ON CM.COMPANY_MASTER_SID = C.COMPANY_MASTER_SID
        LEFT JOIN UDCS U ON U.MASTER_SID = R.RS_CONTRACT_SID
                AND U.MASTER_TYPE = 'RS_CONTRACT'
        LEFT JOIN HELPER_TABLE RS_CAT ON RS_CAT.HELPER_TABLE_SID = R.RS_CATEGORY
        LEFT JOIN HELPER_TABLE RS_TYP ON RS_TYP.HELPER_TABLE_SID = R.RS_TYPE
        LEFT JOIN HELPER_TABLE REB_PRGM ON REB_PRGM.HELPER_TABLE_SID = R.REBATE_PROGRAM_TYPE
        LEFT JOIN HELPER_TABLE U1 ON U1.HELPER_TABLE_SID = U.UDC1
        LEFT JOIN HELPER_TABLE U2 ON U2.HELPER_TABLE_SID = U.UDC2
        LEFT JOIN HELPER_TABLE U3 ON U3.HELPER_TABLE_SID = U.UDC3
        LEFT JOIN HELPER_TABLE U4 ON U4.HELPER_TABLE_SID = U.UDC4
        LEFT JOIN HELPER_TABLE U5 ON U5.HELPER_TABLE_SID = U.UDC5
        LEFT JOIN HELPER_TABLE U6 ON U6.HELPER_TABLE_SID = U.UDC6
        JOIN CONTRACT_MASTER CON ON CON.CONTRACT_MASTER_SID = C.CONTRACT_MASTER_SID
        WHERE B.PROJECTION_MASTER_SID = @PROJECTION
        ?
        ?
          and R.RS_MODEL_SID like '?'
         and C.CONTRACT_MASTER_SID Like '?'
          and C.COMPANY_MASTER_SID like '?'
          and IM.BRAND_MASTER_SID like '?'
         and C.ITEM_MASTER_SID like '?'
         AND CASE
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION PROGRAM' THEN REB_PRGM.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY' THEN RS_CAT.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION TYPE' THEN RS_TYP.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION' THEN R.RS_ID
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 1' THEN U1.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 2' THEN U2.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 3' THEN U3.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 4' THEN U4.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 5' THEN U5.DESCRIPTION
	WHEN @DEDUCTION_LEVEL = 'DEDUCTION CATEGORY 6' THEN U6.DESCRIPTION
END IN (?)
            ]]>  
        </query>
    </entity>
    <entity id="PI_Inventory_updatePriceOverride">
        <query>
    
     <![CDATA[
      UPDATE  ? set PRICE_OVERRIDE = ? where ITEM_MASTER_SID = ? and PROJECTION_MASTER_SID = ?
        ]]>  
        </query>
    </entity>
    
    <entity id="TRANSACTION_3_Wf_Save_Query">
        <query>
            <![CDATA[
                DELETE
    ARM_INVENTORY
WHERE
    PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID;

DELETE
    RATE
FROM
    ARM_INVENTORY_RATE RATE
JOIN  ARM_ADJUSTMENT_DETAILS AAD ON
    AAD.ARM_ADJUSTMENT_DETAILS_SID = RATE.ARM_ADJUSTMENT_DETAILS_SID
WHERE
    PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID;


DELETE ARM_TR_INVENTORY_DETAILS WHERE
	PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID;

INSERT
    INTO
        dbo.ARM_INVENTORY(
            PROJECTION_MASTER_SID,
            ITEM_MASTER_SID,
            COMP_CUST_MASTER_SID,
            PERIOD_SID,
            INVENTORY_UNITS,
            TOTAL_INVENTORY,
            WEEKS_ON_HAND,
            UNITS_PER_RETAIL,
            PRICE,
            RETURN_RESERVE,
            NET_PIPELINE_VALUE,
            PRICE_OVERRIDE
        ) SELECT
            PROJECTION_MASTER_SID,
            ITEM_MASTER_SID,
            COMP_CUST_MASTER_SID,
            PERIOD_SID,
            INVENTORY_UNITS,
            TOTAL_INVENTORY,
            WEEKS_ON_HAND,
            UNITS_PER_RETAIL,
            PRICE,
            RETURN_RESERVE,
            NET_PIPELINE_VALUE,
            PRICE_OVERRIDE
        FROM
            ST_ARM_INVENTORY
        WHERE
            PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID

INSERT
    INTO
        ARM_INVENTORY_RATE(
            ARM_ADJUSTMENT_DETAILS_SID,
            PERIOD_SID,
            RATE,
            CURRENT_PIPELINE_INVENTORY,
            PROJECTED_PIPELINE_INVENTORY,
            PIPELINE_RATIO,
            VARIANCE,
            OVERRIDE,
            SALES_AMOUNT,
            DISCOUNT_AMOUNT
        ) SELECT
            RATE.ARM_ADJUSTMENT_DETAILS_SID,
            RATE.PERIOD_SID,
            RATE.RATE,
            RATE.CURRENT_PIPELINE_INVENTORY,
            RATE.PROJECTED_PIPELINE_INVENTORY,
            RATE.PIPELINE_RATIO,
            RATE.VARIANCE,
            RATE.OVERRIDE,
            RATE.SALES_AMOUNT,
            RATE.DISCOUNT_AMOUNT
        FROM
            ST_ARM_INVENTORY_RATE RATE
        JOIN ARM_ADJUSTMENT_DETAILS AAD ON
            AAD.ARM_ADJUSTMENT_DETAILS_SID = RATE.ARM_ADJUSTMENT_DETAILS_SID
        WHERE
            AAD.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID ;

INSERT
    INTO
        ARM_TR_INVENTORY_DETAILS(
            PROJECTION_MASTER_SID,
            CHECK_RECORD,
            "INDICATOR",
            COMPANY_MASTER_SID,
            COMPANY_GROUP_SID
            ) SELECT
                PROJECTION_MASTER_SID,
                CHECK_RECORD,
                "INDICATOR",
                COMPANY_MASTER_SID,
                COMPANY_GROUP_SID
            FROM
                ST_ARM_TR_INVENTORY_DETAILS
            WHERE
                PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID;
               
DELETE
    ST_ARM_INVENTORY
WHERE
    PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID;

DELETE
    RATE
FROM
    ST_ARM_INVENTORY_RATE RATE
JOIN  ARM_ADJUSTMENT_DETAILS AAD ON
    AAD.ARM_ADJUSTMENT_DETAILS_SID = RATE.ARM_ADJUSTMENT_DETAILS_SID
WHERE
    AAD.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID;


DELETE ST_ARM_TR_INVENTORY_DETAILS WHERE
	PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID;
   
            ]]>  
        </query>
    </entity>
    
    <entity id="TRANSACTION~3_Wf_Edit_Query">
        <query>
            <![CDATA[
                INSERT
    INTO
        ST_ARM_INVENTORY(
            PROJECTION_MASTER_SID,
            ITEM_MASTER_SID,
            COMP_CUST_MASTER_SID,
            PERIOD_SID,
            INVENTORY_UNITS,
            TOTAL_INVENTORY,
            WEEKS_ON_HAND,
            UNITS_PER_RETAIL,
            PRICE,
            RETURN_RESERVE,
            NET_PIPELINE_VALUE,
            PRICE_OVERRIDE
        ) SELECT
            PROJECTION_MASTER_SID,
            ITEM_MASTER_SID,
            COMP_CUST_MASTER_SID,
            PERIOD_SID,
            INVENTORY_UNITS,
            TOTAL_INVENTORY,
            WEEKS_ON_HAND,
            UNITS_PER_RETAIL,
            PRICE,
            RETURN_RESERVE,
            NET_PIPELINE_VALUE,
            PRICE_OVERRIDE
        FROM
            ARM_INVENTORY
        WHERE
            PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID

INSERT
    INTO
        ST_ARM_INVENTORY_RATE(
            ARM_ADJUSTMENT_DETAILS_SID,
            PERIOD_SID,
            RATE,
            CURRENT_PIPELINE_INVENTORY,
            PROJECTED_PIPELINE_INVENTORY,
            PIPELINE_RATIO,
            VARIANCE,
            OVERRIDE

        ) SELECT
            RATE.ARM_ADJUSTMENT_DETAILS_SID,
            RATE.PERIOD_SID,
            RATE.RATE,
            RATE.CURRENT_PIPELINE_INVENTORY,
            RATE.PROJECTED_PIPELINE_INVENTORY,
            RATE.PIPELINE_RATIO,
            RATE.VARIANCE,
            RATE.OVERRIDE
        FROM
            ARM_INVENTORY_RATE RATE
        JOIN ARM_ADJUSTMENT_DETAILS AAD ON
            AAD.ARM_ADJUSTMENT_DETAILS_SID = RATE.ARM_ADJUSTMENT_DETAILS_SID
        WHERE AAD.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
         
INSERT
    INTO
        ST_ARM_TR_INVENTORY_DETAILS(
            PROJECTION_MASTER_SID,
            CHECK_RECORD,
            "INDICATOR",
            COMPANY_MASTER_SID,
            COMPANY_GROUP_SID
            ) SELECT
                PROJECTION_MASTER_SID,
                CHECK_RECORD,
                "INDICATOR",
                COMPANY_MASTER_SID,
                COMPANY_GROUP_SID
            FROM
                ARM_TR_INVENTORY_DETAILS
            WHERE
                PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID;
            ]]>  
        </query>
    </entity>
    
    <entity id="getPIInventoryExcelQuery">
        <query>
             <![CDATA[
                                DECLARE @LEVEL                VARCHAR(30)='B,I',
                @MAX_VAL               INT=0,
                @I                     INT=1,
                @SQL                   NVARCHAR(max),
                @VAR                   VARCHAR(1000)='',
                @VAR_ADD                   VARCHAR(1000)='',
                @SQL_GROUP             NVARCHAR(max),
                @SQL_SELECT            NVARCHAR(max),
                @SQL_UNION             NVARCHAR(4000),
                @SQL_OUTER_SELECT      NVARCHAR(1000)='',
                @SQL_COUNT             NVARCHAR(1000)='',
                @SQL_ADD_COUNT         NVARCHAR(1000)='',
                @PROJECTION_MASTER_SID INT = @PROJECTIONMASTERSID,
                @USER_ID INT = @USERID,
                @SESSION_ID INT = @SESSIONID,
                @CUST INT

				



        Declare @ARM_INVENTORY_TABLE nVARCHAR(MAX)= CONCAT( 'ST_ARM_INVENTORY_', @USER_ID, '_', @SESSION_ID, '_', REPLACE( CONVERT( VARCHAR( 50 ), GETDATE(), 2 ), '.', '' ))
				
        IF OBJECT_ID('tempdb..#TEMP_TABLE')IS NOT NULL
        DROP TABLE #TEMP_TABLE

        CREATE TABLE #TEMP_TABLE
        (
                ID INT IDENTITY(1,1),
                STRING CHAR(2),
                COLUMN_NAME VARCHAR(50),
                COLUMN_ADD_NAME VARCHAR(50),
                ALIAS_NAME VARCHAR(50)
        )
				DECLARE @VAR1 INT=0
				SET @SQL=CONCAT('SELECT @VAR1=COUNT(1) FROM COMPANY_GROUP A JOIN 
				',@ARM_INVENTORY_TABLE,' B ON B.COMP_CUST_MASTER_SID=A.COMPANY_GROUP_SID')
				
				EXEC sp_executesql @sql,N'@VAR1 INT OUTPUT',@VAR1=@VAR1 OUTPUT
				
				
				
        IF (@VAR1>1)
        BEGIN
        SELECT @CUST=COMPANY_GROUP_SID FROM COMPANY_GROUP WHERE COMPANY_GROUP_NAME='WHA Inventory'
                SET @SQL=';WITH CTE
                     AS (SELECT IM.ITEM_MASTER_SID,
                                                IM.ITEM_NO,
                                                IM.ITEM_NAME,
                                BM.BRAND_MASTER_SID,
                                                BM.BRAND_ID,
                                                BM.BRAND_NAME,
                                ARP.COMP_CUST_MASTER_SID,
                                                ARP.INVENTORY_UNITS,
                                                ARP.TOTAL_INVENTORY,
                                                ARP.WEEKS_ON_HAND,
                                                ARP.UNITS_PER_RETAIL,
                                                ARP.PRICE,
                                                ARP.RETURN_RESERVE,
                                                ARP.NET_PIPELINE_VALUE,
                                                ARP.PRICE_OVERRIDE,
                                                                             ARP.DEMAND_UNITS

                         FROM   ' + @ARM_INVENTORY_TABLE + '  ARP
                                 JOIN ITEM_MASTER IM ON IM.ITEM_MASTER_SID=ARP.ITEM_MASTER_SID AND
                                                          ARP.PROJECTION_MASTER_SID= '+CONVERT(VARCHAR(10),@PROJECTION_MASTER_SID)+
                                'JOIN BRAND_MASTER BM ON BM.BRAND_MASTER_SID=IM.BRAND_MASTER_SID),CTE1 AS (SELECT ITEM_MASTER_SID AS ITEM
                                                 ,MAX(WEEKS_ON_HAND) AS WEEKS_ON_HAND,MAX(UNITS_PER_RETAIL) AS UNITS_PER_RETAIL,MAX(DEMAND_UNITS) AS DEMAND_UNITS
                                                                                         ,MAX(CASE WHEN COMP_CUST_MASTER_SID='+convert(varchar(10),@CUST)+' THEN INVENTORY_UNITS ELSE 0 END) AS INVENTORY_UNITS
                                                   FROM  CTE GROUP BY  ITEM_MASTER_SID),'


                --LEFT(@String, LEN(@String) - 1)
                INSERT INTO #TEMP_TABLE(STRING,COLUMN_NAME,COLUMN_ADD_NAME,ALIAS_NAME)
                SELECT token,CASE WHEN token='B' THEN 'BRAND_MASTER_SID'
                                                  WHEN token='I' THEN 'ITEM_MASTER_SID'
                                     END AS COLUMN_NAME,
                                         CASE WHEN token='B' THEN 'BRAND_ID+'' - ''+BRAND_NAME'
                                                  WHEN token='I' THEN 'ITEM_NO+'' - ''+ITEM_NAME'
                                     END AS COLUMN_ADD_NAME,
                                         CASE WHEN token='B' THEN 'BRAND '
                                                  WHEN token='I' THEN 'ITEM '
                                     END AS ALIAS_NAME
                FROM udf_splitstring(@LEVEL,',')

                SELECT  @MAX_VAL=MAX(ID) FROM #TEMP_TABLE

                WHILE(@I<=@MAX_VAL)

                BEGIN
                 SELECT
                    @SQL_SELECT=
                    STUFF((
                        SELECT ', NULL AS ' + U.COLUMN_NAME
                        FROM #TEMP_TABLE U
                        WHERE U.ID = ID AND U.ID>@I
                        ORDER BY U.ID
                        FOR XML PATH('')
                    ),1,1,'') ,
                        @SQL_COUNT=
                        STUFF((
                        SELECT ', ' + U.COLUMN_NAME
                        FROM #TEMP_TABLE U
                        WHERE U.ID = ID AND U.ID>@I
                        ORDER BY U.ID
                        FOR XML PATH('')
                    ),1,1,'') ,
                        @SQL_ADD_COUNT=
                        STUFF((
                        SELECT ', NULL AS ' + U.ALIAS_NAME
                        FROM #TEMP_TABLE U
                        WHERE U.ID = ID AND U.ID>@I
                        ORDER BY U.ID
                        FOR XML PATH('')
                    ),1,1,'')
                FROM #TEMP_TABLE
                 SET   @SQL_SELECT+=','
                  SET   @SQL_ADD_COUNT+=','
                 SET @SQL_SELECT=ISNULL(@SQL_SELECT,'')
                  SET @SQL_ADD_COUNT=ISNULL(@SQL_ADD_COUNT,'')
                 SET @SQL_COUNT=ISNULL(@SQL_COUNT,'')

                 SELECT @VAR=@VAR+COLUMN_NAME+','+COLUMN_ADD_NAME+' AS '+ALIAS_NAME+',', @SQL_UNION=STRING FROM #TEMP_TABLE WHERE ID=@I
                 SELECT @VAR_ADD+=COLUMN_NAME+','+COLUMN_ADD_NAME+',' FROM #TEMP_TABLE WHERE ID=@I

                 SELECT @SQL_OUTER_SELECT+='SELECT * FROM '+@SQL_UNION+' UNION ALL '
                 SET @VAR_ADD=LEFT(@VAR_ADD, LEN(@VAR) - 1)
                 SET @SQL+=CASE WHEN @I=1 THEN '' ELSE ',' END +@SQL_UNION+' AS (SELECT '+@VAR+@SQL_SELECT+@SQL_ADD_COUNT+'COMP_CUST_MASTER_SID, ISNULL(SUM(A.INVENTORY_UNITS),0)                       AS INVENTORY_UNITS,
                                ISNULL(SUM(TOTAL_INVENTORY),0)   AS TOTAL_INVENTORY,
                                ISNULL(SUM(B.INVENTORY_UNITS),0)/NULLIF(SUM(B.DEMAND_UNITS),0) AS WEEKS_ON_HAND,
                                ISNULL(SUM(A.UNITS_PER_RETAIL),0)                   AS UNITS_PER_RETAIL, '
                 SET @SQL+=CASE WHEN @SQL_UNION='B' THEN 'NULL AS PRICE,' ELSE 'ISNULL(SUM(PRICE),0)                   AS PRICE,' END
                 SET @SQL+=CASE WHEN @SQL_UNION='B' THEN 'NULL AS PRICE_OVERRIDE,' ELSE 'SUM(PRICE_OVERRIDE) AS PRICE_OVERRIDE,' END
                           SET @SQL+='ISNULL(SUM(RETURN_RESERVE),0)                   AS RETURN_RESERVE,
                                                ISNULL(SUM(NET_PIPELINE_VALUE),0) AS NET_PIPELINE_VALUE
                                        FROM   CTE A JOIN CTE1 B ON A.ITEM_MASTER_SID=B.ITEM
                         GROUP  BY '+@VAR_ADD+'COMP_CUST_MASTER_SID)'
                 SET @I+=1


                END
                SET @SQL_OUTER_SELECT=LEFT(@SQL_OUTER_SELECT, LEN(@SQL_OUTER_SELECT) - 10)
                SET @SQL+=@SQL_OUTER_SELECT
                PRINT @SQL
       EXEC (@SQL)
	   END
	   ELSE
	   BEGIN
	   SET @SQL=';WITH CTE
             AS (SELECT IM.ITEM_MASTER_SID,
                                        IM.ITEM_NO,
                                        IM.ITEM_NAME,
                        BM.BRAND_MASTER_SID,
                                        BM.BRAND_ID,
                                        BM.BRAND_NAME,
                        ARP.COMP_CUST_MASTER_SID,
                                        ARP.INVENTORY_UNITS,
                                        ARP.TOTAL_INVENTORY,
                                        ARP.WEEKS_ON_HAND,
                                        ARP.UNITS_PER_RETAIL,
                                        ARP.PRICE,
                                        ARP.RETURN_RESERVE,
                                        ARP.NET_PIPELINE_VALUE,
                                        ARP.PRICE_OVERRIDE,
                                                                     ARP.DEMAND_UNITS

                 FROM   ' + @ARM_INVENTORY_TABLE + '  ARP
                         JOIN ITEM_MASTER IM ON IM.ITEM_MASTER_SID=ARP.ITEM_MASTER_SID AND
                                                  ARP.PROJECTION_MASTER_SID= '+CONVERT(VARCHAR(10),@PROJECTION_MASTER_SID)+
                        'JOIN BRAND_MASTER BM ON BM.BRAND_MASTER_SID=IM.BRAND_MASTER_SID),
						CTE1 AS (SELECT ITEM_MASTER_SID AS ITEM
                                         ,MAX(WEEKS_ON_HAND) AS WEEKS_ON_HAND,MAX(UNITS_PER_RETAIL) AS UNITS_PER_RETAIL,MAX(DEMAND_UNITS) AS DEMAND_UNITS
                                                                                 ,MAX(INVENTORY_UNITS) AS INVENTORY_UNITS
                                           FROM  CTE GROUP BY  ITEM_MASTER_SID),'

        
        --LEFT(@String, LEN(@String) - 1)
        INSERT INTO #TEMP_TABLE(STRING,COLUMN_NAME,COLUMN_ADD_NAME,ALIAS_NAME)
        SELECT token,CASE WHEN token='B' THEN 'BRAND_MASTER_SID'
                                          WHEN token='I' THEN 'ITEM_MASTER_SID'
                             END AS COLUMN_NAME,
                                 CASE WHEN token='B' THEN 'BRAND_ID+'' - ''+BRAND_NAME'
                                          WHEN token='I' THEN 'ITEM_NO+'' - ''+ITEM_NAME'
                             END AS COLUMN_ADD_NAME,
                                 CASE WHEN token='B' THEN 'BRAND '
                                          WHEN token='I' THEN 'ITEM '
                             END AS ALIAS_NAME
        FROM udf_splitstring(@LEVEL,',')

        SELECT  @MAX_VAL=MAX(ID) FROM #TEMP_TABLE

        WHILE(@I<=@MAX_VAL)

        BEGIN
         SELECT
            @SQL_SELECT=
            STUFF((
                SELECT ', NULL AS ' + U.COLUMN_NAME
                FROM #TEMP_TABLE U
                WHERE U.ID = ID AND U.ID>@I
                ORDER BY U.ID
                FOR XML PATH('')
            ),1,1,'') ,
                @SQL_COUNT=
                STUFF((
                SELECT ', ' + U.COLUMN_NAME
                FROM #TEMP_TABLE U
                WHERE U.ID = ID AND U.ID>@I
                ORDER BY U.ID
                FOR XML PATH('')
            ),1,1,'') ,
                @SQL_ADD_COUNT=
                STUFF((
                SELECT ', NULL AS ' + U.ALIAS_NAME
                FROM #TEMP_TABLE U
                WHERE U.ID = ID AND U.ID>@I
                ORDER BY U.ID
                FOR XML PATH('')
            ),1,1,'')
        FROM #TEMP_TABLE
         SET   @SQL_SELECT+=','
          SET   @SQL_ADD_COUNT+=','
         SET @SQL_SELECT=ISNULL(@SQL_SELECT,'')
          SET @SQL_ADD_COUNT=ISNULL(@SQL_ADD_COUNT,'')
         SET @SQL_COUNT=ISNULL(@SQL_COUNT,'')

         SELECT @VAR=@VAR+COLUMN_NAME+','+COLUMN_ADD_NAME+' AS '+ALIAS_NAME+',', @SQL_UNION=STRING FROM #TEMP_TABLE WHERE ID=@I
         SELECT @VAR_ADD+=COLUMN_NAME+','+COLUMN_ADD_NAME+',' FROM #TEMP_TABLE WHERE ID=@I

         SELECT @SQL_OUTER_SELECT+='SELECT * FROM '+@SQL_UNION+' UNION ALL '
         SET @VAR_ADD=LEFT(@VAR_ADD, LEN(@VAR) - 1)
         SET @SQL+=CASE WHEN @I=1 THEN '' ELSE ',' END +@SQL_UNION+' AS (SELECT '+@VAR+@SQL_SELECT+@SQL_ADD_COUNT+'COMP_CUST_MASTER_SID, ISNULL(SUM(A.INVENTORY_UNITS),0)                       AS INVENTORY_UNITS,
                        ISNULL(SUM(TOTAL_INVENTORY),0)   AS TOTAL_INVENTORY,
                        ISNULL(SUM(B.WEEKS_ON_HAND),0) AS WEEKS_ON_HAND,
                        ISNULL(SUM(A.UNITS_PER_RETAIL),0)                   AS UNITS_PER_RETAIL, '
         SET @SQL+=CASE WHEN @SQL_UNION='B' THEN 'NULL AS PRICE,' ELSE 'ISNULL(SUM(PRICE),0)                   AS PRICE,' END
         SET @SQL+=CASE WHEN @SQL_UNION='B' THEN 'NULL AS PRICE_OVERRIDE,' ELSE 'SUM(PRICE_OVERRIDE) AS PRICE_OVERRIDE,' END
                   SET @SQL+='ISNULL(SUM(RETURN_RESERVE),0)                   AS RETURN_RESERVE,
                                        ISNULL(SUM(NET_PIPELINE_VALUE),0) AS NET_PIPELINE_VALUE
                                FROM   CTE A JOIN CTE1 B ON A.ITEM_MASTER_SID=B.ITEM
                 GROUP  BY '+@VAR_ADD+'COMP_CUST_MASTER_SID)'
         SET @I+=1


        END
        SET @SQL_OUTER_SELECT=LEFT(@SQL_OUTER_SELECT, LEN(@SQL_OUTER_SELECT) - 10)
        SET @SQL+=@SQL_OUTER_SELECT
        PRINT @SQL
       EXEC (@SQL)
	   END
             ]]>  
        </query>
    </entity>

    
    <entity id="getPIInventoryExcelQueryView">
        <query>
             <![CDATA[
                DECLARE @LEVEL                VARCHAR(30)='B,I', 
		@MAX_VAL               INT=0, 
                @I                     INT=1, 
                @SQL                   NVARCHAR(max), 
                @VAR                   VARCHAR(1000)='', 
                @VAR_ADD                   VARCHAR(1000)='', 
                @SQL_GROUP             NVARCHAR(max), 
                @SQL_SELECT            NVARCHAR(max), 
                @SQL_UNION             NVARCHAR(4000), 
                @SQL_OUTER_SELECT      NVARCHAR(1000)='', 
                @SQL_COUNT             NVARCHAR(1000)='',
                @SQL_ADD_COUNT         NVARCHAR(1000)='',
                @PROJECTION_MASTER_SID INT = @PROJECTIONMASTERSID,
                @USER_ID INT = @USERID,
                @SESSION_ID INT = @SESSIONID


        SET @SQL=';WITH CTE 
             AS (SELECT IM.ITEM_MASTER_SID, 
                                        IM.ITEM_NO,
                                        IM.ITEM_NAME,
                        BM.BRAND_MASTER_SID,
                                        BM.BRAND_ID,
                                        BM.BRAND_NAME,
                        ARP.COMP_CUST_MASTER_SID,
                                        ARP.INVENTORY_UNITS,
                                        ARP.TOTAL_INVENTORY,
                                        ARP.WEEKS_ON_HAND,
                                        ARP.UNITS_PER_RETAIL,
                                        ARP.PRICE,
                                        ARP.RETURN_RESERVE,
                                        ARP.NET_PIPELINE_VALUE,
                                        ARP.PRICE_OVERRIDE
                 FROM   ARM_INVENTORY ARP 
                         JOIN ITEM_MASTER IM ON IM.ITEM_MASTER_SID=ARP.ITEM_MASTER_SID AND ARP.PROJECTION_MASTER_SID= '+CONVERT(VARCHAR(10),@PROJECTION_MASTER_SID)+'
                         JOIN BRAND_MASTER BM ON BM.BRAND_MASTER_SID=IM.BRAND_MASTER_SID),'

        IF OBJECT_ID('tempdb..#TEMP_TABLE')IS NOT NULL
        DROP TABLE #TEMP_TABLE

        CREATE TABLE #TEMP_TABLE
        (
                ID INT IDENTITY(1,1),
                STRING CHAR(2),
                COLUMN_NAME VARCHAR(50),
                COLUMN_ADD_NAME VARCHAR(50),
                ALIAS_NAME VARCHAR(50)
        )
        --LEFT(@String, LEN(@String) - 1) 
        INSERT INTO #TEMP_TABLE(STRING,COLUMN_NAME,COLUMN_ADD_NAME,ALIAS_NAME)
        SELECT token,CASE WHEN token='B' THEN 'BRAND_MASTER_SID'  
                                          WHEN token='I' THEN 'ITEM_MASTER_SID'
                             END AS COLUMN_NAME,
                                 CASE WHEN token='B' THEN 'BRAND_ID+'' - ''+BRAND_NAME'  
                                          WHEN token='I' THEN 'ITEM_NO+'' - ''+ITEM_NAME'
                             END AS COLUMN_ADD_NAME,
                                 CASE WHEN token='B' THEN 'BRAND '  
                                          WHEN token='I' THEN 'ITEM '
                             END AS ALIAS_NAME
        FROM udf_splitstring(@LEVEL,',')

        SELECT  @MAX_VAL=MAX(ID) FROM #TEMP_TABLE

        WHILE(@I<=@MAX_VAL)

        BEGIN
         SELECT 
            @SQL_SELECT=
            STUFF((
                SELECT ', NULL AS ' + U.COLUMN_NAME 
                FROM #TEMP_TABLE U
                WHERE U.ID = ID AND U.ID>@I
                ORDER BY U.ID
                FOR XML PATH('')
            ),1,1,'') ,
                @SQL_COUNT=
                STUFF((
                SELECT ', ' + U.COLUMN_NAME 
                FROM #TEMP_TABLE U
                WHERE U.ID = ID AND U.ID>@I
                ORDER BY U.ID
                FOR XML PATH('')
            ),1,1,'') ,
                @SQL_ADD_COUNT=
                STUFF((
                SELECT ', NULL AS ' + U.ALIAS_NAME 
                FROM #TEMP_TABLE U
                WHERE U.ID = ID AND U.ID>@I
                ORDER BY U.ID
                FOR XML PATH('')
            ),1,1,'') 
        FROM #TEMP_TABLE
         SET   @SQL_SELECT+=','
          SET   @SQL_ADD_COUNT+=','
         SET @SQL_SELECT=ISNULL(@SQL_SELECT,'')
          SET @SQL_ADD_COUNT=ISNULL(@SQL_ADD_COUNT,'')
         SET @SQL_COUNT=ISNULL(@SQL_COUNT,'')

         SELECT @VAR=@VAR+COLUMN_NAME+','+COLUMN_ADD_NAME+' AS '+ALIAS_NAME+',', @SQL_UNION=STRING FROM #TEMP_TABLE WHERE ID=@I
         SELECT @VAR_ADD+=CASE WHEN @I=1 THEN '' ELSE ',' END +COLUMN_NAME+','+COLUMN_ADD_NAME+',' FROM #TEMP_TABLE WHERE ID=@I

         SELECT @SQL_OUTER_SELECT+='SELECT * FROM '+@SQL_UNION+' UNION ALL '
         SET @VAR_ADD=LEFT(@VAR_ADD, LEN(@VAR_ADD) - 1)
         SET @SQL+=CASE WHEN @I=1 THEN '' ELSE ',' END +@SQL_UNION+' AS (SELECT '+@VAR+@SQL_SELECT+@SQL_ADD_COUNT+'COMP_CUST_MASTER_SID, ISNULL(SUM(INVENTORY_UNITS),0)                       AS INVENTORY_UNITS, 
                        ISNULL(SUM(TOTAL_INVENTORY),0)   AS TOTAL_INVENTORY, 
                        ISNULL(SUM(WEEKS_ON_HAND),0) AS WEEKS_ON_HAND, 
                        ISNULL(SUM(UNITS_PER_RETAIL),0)                   AS UNITS_PER_RETAIL, '
         SET @SQL+=CASE WHEN @SQL_UNION='B' THEN 'NULL AS PRICE,' ELSE 'ISNULL(SUM(PRICE),0)                   AS PRICE,' END
         SET @SQL+=CASE WHEN @SQL_UNION='B' THEN 'NULL AS PRICE_OVERRIDE,' ELSE 'SUM(PRICE_OVERRIDE) AS PRICE_OVERRIDE,' END
                   SET @SQL+='ISNULL(SUM(RETURN_RESERVE),0)                   AS RETURN_RESERVE,
                                        ISNULL(SUM(NET_PIPELINE_VALUE),0) AS NET_PIPELINE_VALUE
                                FROM   CTE 
                 GROUP  BY '+@VAR_ADD+',COMP_CUST_MASTER_SID)'
         SET @I+=1


        END
        SET @SQL_OUTER_SELECT=LEFT(@SQL_OUTER_SELECT, LEN(@SQL_OUTER_SELECT) - 10) 
        SET @SQL+=@SQL_OUTER_SELECT
        PRINT @SQL
        EXEC (@SQL)    
             ]]>  
        </query>
    </entity>
    <entity id="LOAD_INVENTORY_CUSTOMERS">
        <query>
             <![CDATA[
               SELECT DISTINCT CM.COMPANY_MASTER_SID,CM.COMPANY_NAME  FROM INVENTORY_WD_ACTUAL_DT CGA  
                    JOIN DBO.COMPANY_MASTER CM ON CM.COMPANY_ID=CGA.COMPANY_ID    
             ]]>  
        </query>
    </entity>
    
    
        <entity id="Summary_PI_total_data">
        <query>
            <![CDATA[
       SELECT DEDUCTION_SET_1,
       'Total' as DEDUCTION_SET_2,
	   sum(CURRENT_PIPELINE_INVENTORY) as CURRENT_PIPELINE_INVENTORY,
	   Sum(PROJECTED_PIPELINE_INVENTORY)             AS PROJECTED_PIPELINE_INVENTORY,
         ISNULL(SUM(CURRENT_PIPELINE_INVENTORY),0)/NULLIF(SUM(PROJECTED_PIPELINE_INVENTORY),0) AS PIPELINE_RATIO,
         Sum(VARIANCE)   AS VARIANCE,
         Sum([OVERRIDE]) AS [OVERRIDE],
        SUM(ADJUSTMENT) AS  ADJUSTMENT ,
        0 as LEVEL_NO,
        0 as ITEM_NO,
        0 as MASTER_SID,
        null as LEVEL_NAME from 
        ($$$$CHILD_QUERY$$$$)a group by DEDUCTION_SET_1
        
           ]]>  
        </query>
    </entity>
    
    <entity id="update_pipelineinventory_overridecolumn">
        <query>
    
     <![CDATA[
         IF OBJECT_ID('TEMPDB..#TEMP_AMOUNT') IS NOT NULL 
  DROP TABLE #TEMP_AMOUNT 

CREATE TABLE #TEMP_AMOUNT 
  ( 
     ARM_ADJUSTMENT_DETAILS_SID INT, 
     PERIOD_SID                 INT, 
     ACCRUAL_AMOUNT             NUMERIC(22, 6), 
     INDICATOR                  BIT 
  ) 

INSERT INTO #TEMP_AMOUNT 
            (ARM_ADJUSTMENT_DETAILS_SID, 
             PERIOD_SID, 
             ACCRUAL_AMOUNT, 
             INDICATOR) 
SELECT ARM_ADJUSTMENT_DETAILS_SID, 
       PERIOD_SID, 
       ISNULL(OVERRIDE, VARIANCE) AS ACCRUAL_AMOUNT, 
       CASE 
         WHEN ISNULL(OVERRIDE, VARIANCE) > 0 THEN 0 
         WHEN ISNULL(OVERRIDE, VARIANCE) < 0 THEN 1 
       END                        AS INDICATOR 
FROM   ? 
WHERE  OVERRIDE IS NOT NULL 
       AND OVERRIDE != 0 

IF OBJECT_ID('TEMPDB..#CURRENT_LIABILITY') IS NOT NULL 
  DROP TABLE #CURRENT_LIABILITY 

CREATE TABLE #CURRENT_LIABILITY 
  ( 
     ARM_ADJUSTMENT_DETAILS_SID INT, 
     PERIOD_SID                 INT, 
     CREDIT_AMOUNT              NUMERIC(22, 6), 
     DEBIT_AMOUNT               NUMERIC(22, 6), 
     CURRENT_AMOUNT             NUMERIC(22, 6) 
  ) 

IF OBJECT_ID('TEMPDB..#CURRENT_EXPENSE') IS NOT NULL 
  DROP TABLE #CURRENT_EXPENSE 

CREATE TABLE #CURRENT_EXPENSE 
  ( 
     ARM_ADJUSTMENT_DETAILS_SID INT, 
     PERIOD_SID                 INT, 
     CREDIT_AMOUNT              NUMERIC(22, 6), 
     DEBIT_AMOUNT               NUMERIC(22, 6), 
     CURRENT_AMOUNT             NUMERIC(22, 6) 
  ) 

INSERT INTO #CURRENT_LIABILITY 
            (ARM_ADJUSTMENT_DETAILS_SID, 
             PERIOD_SID, 
             CREDIT_AMOUNT, 
             DEBIT_AMOUNT, 
             CURRENT_AMOUNT) 
SELECT TAM.ARM_ADJUSTMENT_DETAILS_SID, 
       ISNULL(A1.PERIOD_SID, A2.PERIOD_SID), 
       SUM(ABS(A1.ACCRUAL_AMOUNT))                                                     AS CREDIT_AMOUNT,
       SUM(ABS(A2.ACCRUAL_AMOUNT))                                                     AS DEBIT_AMOUNT,
       ISNULL(SUM(ABS(A1.ACCRUAL_AMOUNT)), 0) - ISNULL(SUM(ABS(A2.ACCRUAL_AMOUNT)), 0) AS CURRENT_AMOUNT
FROM   #TEMP_AMOUNT TAM 
       JOIN ARM_ADJ_RES_CCP AAC 
         ON TAM.ARM_ADJUSTMENT_DETAILS_SID = AAC.ARM_ADJUSTMENT_DETAILS_SID 
       INNER JOIN HELPER_TABLE HT 
               ON AAC.ACCOUNT_TYPE = HT.HELPER_TABLE_SID 
                  AND HT.DESCRIPTION = 'LIABILITY' 
       LEFT JOIN #TEMP_AMOUNT A1 
              ON AAC.ARM_ADJUSTMENT_DETAILS_SID = A1.ARM_ADJUSTMENT_DETAILS_SID 
                 AND AAC.CREDIT = A1.INDICATOR 
       LEFT JOIN #TEMP_AMOUNT A2 
              ON AAC.ARM_ADJUSTMENT_DETAILS_SID = A2.ARM_ADJUSTMENT_DETAILS_SID 
                 AND AAC.DEBIT = A2.INDICATOR 
GROUP  BY TAM.ARM_ADJUSTMENT_DETAILS_SID, 
          ISNULL(A1.PERIOD_SID, A2.PERIOD_SID) 

INSERT INTO #CURRENT_EXPENSE 
SELECT TAM.ARM_ADJUSTMENT_DETAILS_SID, 
       ISNULL(A1.PERIOD_SID, A2.PERIOD_SID), 
       SUM(ABS(A1.ACCRUAL_AMOUNT))                                                     AS CREDIT_AMOUNT,
       SUM(ABS(A2.ACCRUAL_AMOUNT))                                                     AS DEBIT_AMOUNT,
       ISNULL(SUM(ABS(A1.ACCRUAL_AMOUNT)), 0) - ISNULL(SUM(ABS(A2.ACCRUAL_AMOUNT)), 0) AS CURRENT_AMOUNT
FROM   #TEMP_AMOUNT TAM 
       JOIN ARM_ADJ_RES_CCP AAC 
         ON TAM.ARM_ADJUSTMENT_DETAILS_SID = AAC.ARM_ADJUSTMENT_DETAILS_SID 
       INNER JOIN HELPER_TABLE HT 
               ON AAC.ACCOUNT_TYPE = HT.HELPER_TABLE_SID 
                  AND HT.DESCRIPTION = 'EXPENSE' 
       LEFT JOIN #TEMP_AMOUNT A1 
              ON AAC.ARM_ADJUSTMENT_DETAILS_SID = A1.ARM_ADJUSTMENT_DETAILS_SID 
                 AND AAC.CREDIT = A1.INDICATOR 
       LEFT JOIN #TEMP_AMOUNT A2 
              ON AAC.ARM_ADJUSTMENT_DETAILS_SID = A2.ARM_ADJUSTMENT_DETAILS_SID 
                 AND AAC.DEBIT = A2.INDICATOR 
GROUP  BY TAM.ARM_ADJUSTMENT_DETAILS_SID, 
          ISNULL(A1.PERIOD_SID, A2.PERIOD_SID) 

UPDATE T 
SET    T.LIABILITY_AMOUNT = LIA.CURRENT_AMOUNT, 
       T.EXPENSE_AMOUNT = CEX.CURRENT_AMOUNT 
FROM   ? T 
       LEFT JOIN #CURRENT_LIABILITY LIA 
              ON T.ARM_ADJUSTMENT_DETAILS_SID = LIA.ARM_ADJUSTMENT_DETAILS_SID 
                 AND T.PERIOD_SID = LIA.PERIOD_SID 
       LEFT JOIN #CURRENT_EXPENSE CEX 
              ON T.ARM_ADJUSTMENT_DETAILS_SID = CEX.ARM_ADJUSTMENT_DETAILS_SID 
                 AND T.PERIOD_SID = CEX.PERIOD_SID  

     ]]>  
        </query>
    </entity>
    
    
</sql>
