/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.ImtdItemPriceRebateDetails;
import com.stpl.app.model.ImtdItemPriceRebateDetailsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ImtdItemPriceRebateDetails service. Represents a row in the &quot;IMTD_ITEM_PRICE_REBATE_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ImtdItemPriceRebateDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImtdItemPriceRebateDetailsImpl}.
 * </p>
 *
 * @author
 * @see ImtdItemPriceRebateDetailsImpl
 * @see ImtdItemPriceRebateDetails
 * @see ImtdItemPriceRebateDetailsModel
 * @generated
 */
@ProviderType
public class ImtdItemPriceRebateDetailsModelImpl extends BaseModelImpl<ImtdItemPriceRebateDetails>
	implements ImtdItemPriceRebateDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a imtd item price rebate details model instance should use the {@link ImtdItemPriceRebateDetails} interface instead.
	 */
	public static final String TABLE_NAME = "IMTD_ITEM_PRICE_REBATE_DETAILS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "FORMULA_METHOD_ID", Types.VARCHAR },
			{ "END_DATE", Types.TIMESTAMP },
			{ "PRICE_PROTECTION_START_DATE", Types.TIMESTAMP },
			{ "ITEM_PRICE_REVISION_DATE", Types.TIMESTAMP },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "RS_CHECK_RECORD", Types.BOOLEAN },
			{ "REBATE_REVISION_DATE", Types.TIMESTAMP },
			{ "CONTRACT_MASTER_SID", Types.INTEGER },
			{ "IMTD_CREATED_DATE", Types.TIMESTAMP },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "UDC6", Types.INTEGER },
			{ "UDC5", Types.INTEGER },
			{ "UDC4", Types.INTEGER },
			{ "CHECK_RECORD", Types.BOOLEAN },
			{ "UDC1", Types.INTEGER },
			{ "UDC2", Types.INTEGER },
			{ "UDC3", Types.INTEGER },
			{ "CONTRACT_PRICE_END_DATE", Types.TIMESTAMP },
			{ "TOTAL_VOLUME_COMMITMENT", Types.DOUBLE },
			{ "PRICE_PROTECTION_END_DATE", Types.TIMESTAMP },
			{ "RECORD_LOCK_STATUS", Types.VARCHAR },
			{ "START_DATE", Types.TIMESTAMP },
			{ "REBATE_PROGRAM_TYPE", Types.INTEGER },
			{ "SESSION_ID", Types.VARCHAR },
			{ "ITEM_NAME", Types.VARCHAR },
			{ "PRICE_REVISION", Types.DOUBLE },
			{ "RS_MODEL_SID", Types.INTEGER },
			{ "PRICE", Types.DOUBLE },
			{ "RS_ATTACHED_STATUS", Types.INTEGER },
			{ "ITEM_MASTER_SID", Types.INTEGER },
			{ "TOTAL_DOLLAR_COMMITMENT", Types.DOUBLE },
			{ "ITEM_TYPE", Types.INTEGER },
			{ "TOTAL_MARKET_SHARE_COMMITMNET", Types.DOUBLE },
			{ "ITEM_ID", Types.VARCHAR },
			{ "BASE_PRICE", Types.DOUBLE },
			{ "BUNDLE_NO", Types.VARCHAR },
			{ "FORMULA_NAME", Types.VARCHAR },
			{ "PS_STATUS", Types.INTEGER },
			{ "PRICE_TOLERANCE", Types.DOUBLE },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CREATED_BY", Types.INTEGER },
			{ "USERS_SID", Types.INTEGER },
			{ "PS_DETAILS_SID", Types.INTEGER },
			{ "SUGGESTED_PRICE", Types.DOUBLE },
			{ "PS_MODEL_SID", Types.INTEGER },
			{ "FORMULA_ID", Types.VARCHAR },
			{ "COMMITMENT_PERIOD", Types.VARCHAR },
			{ "ITEM_NO", Types.VARCHAR },
			{ "CONTRACT_PRICE", Types.DOUBLE },
			{ "IFP_DETAILS_SID", Types.INTEGER },
			{ "IFP_MODEL_SID", Types.INTEGER },
			{ "PRICE_TOLERANCE_TYPE", Types.VARCHAR },
			{ "REBATE_AMOUNT", Types.DOUBLE },
			{ "CONTRACT_PRICE_START_DATE", Types.TIMESTAMP },
			{ "REBATE_SCHEDULE_TYPE", Types.VARCHAR },
			{ "PRICE_TOLERANCE_FREQUENCY", Types.VARCHAR },
			{ "IMTD_ITEM_PRICE_REBATE_SID", Types.INTEGER },
			{ "REBATE_PLAN_SYSTEM_ID", Types.VARCHAR },
			{ "ATTACHED_DATE", Types.TIMESTAMP },
			{ "PRICE_PLAN_ID", Types.VARCHAR },
			{ "ITEM_REBATE_END_DATE", Types.TIMESTAMP },
			{ "PRICE_TYPE", Types.INTEGER },
			{ "PRICE_TOLERANCE_INTERVAL", Types.INTEGER },
			{ "RS_ATTACHED_DATE", Types.TIMESTAMP },
			{ "ITEM_REBATE_START_DATE", Types.TIMESTAMP },
			{ "OPERATION", Types.VARCHAR },
			{ "CFP_MODEL_SID", Types.INTEGER },
			{ "RS_DETAILS_SID", Types.INTEGER },
			{ "ATTACHED_STATUS", Types.INTEGER },
			{ "PRIMARY_UOM", Types.INTEGER },
			{ "PACKAGE_SIZE", Types.VARCHAR },
			{ "DEDUCTION_CALENDAR_MASTER_SID", Types.VARCHAR },
			{ "RS_CONTRACT_DETAILS_DEDUCTION_CALENDAR_NO", Types.VARCHAR },
			{ "RS_CONTRACT_DETAILS_DEDUCTION_CALENDAR_NAME", Types.VARCHAR },
			{ "NET_SALES_FORMULA_MASTER_SID", Types.VARCHAR },
			{ "RS_CONTRACT_DETAILS_NET_SALES_FORMULA_NO", Types.VARCHAR },
			{ "RS_CONTRACT_DETAILS_NET_SALES_FORMULA_NAME", Types.VARCHAR },
			{ "FORMULA_TYPE", Types.INTEGER },
			{ "NET_SALES_RULE", Types.INTEGER },
			{ "EVALUATION_RULE", Types.INTEGER },
			{ "EVALUATION_RULE_BUNDLE", Types.VARCHAR },
			{ "CALCULATION_RULE", Types.INTEGER },
			{ "CALCULATION_RULE_BUNDLE", Types.VARCHAR },
			{ "MAX_INCREMENTAL_CHANGE", Types.DOUBLE },
			{ "RESET_ELIGIBLE", Types.INTEGER },
			{ "RESET_TYPE", Types.INTEGER },
			{ "RESET_DATE", Types.TIMESTAMP },
			{ "RESET_INTERVAL", Types.INTEGER },
			{ "RESET_FREQUENCY", Types.INTEGER },
			{ "NET_PRICE_TYPE", Types.INTEGER },
			{ "NET_PRICE_TYPE_FORMULA", Types.VARCHAR },
			{ "PRICE_PROTECTION_PRICE_TYPE", Types.INTEGER },
			{ "NEP", Types.DOUBLE },
			{ "NEP_FORMULA", Types.INTEGER },
			{ "BRAND_MASTER_SID", Types.VARCHAR },
			{ "PRICE_PROTECTION_STATUS", Types.INTEGER },
			{ "BASE_PRICE_TYPE", Types.INTEGER },
			{ "BASE_PRICE_ENTRY", Types.DOUBLE },
			{ "BASE_PRICE_DATE", Types.TIMESTAMP },
			{ "BASE_PRICE_DDLB", Types.INTEGER },
			{ "NET_BASE_PRICE", Types.INTEGER },
			{ "SUBSEQUENT_PERIOD_PRICE_TYPE", Types.INTEGER },
			{ "RESET_PRICE_TYPE", Types.INTEGER },
			{ "NET_RESET_PRICE_TYPE", Types.INTEGER },
			{ "NET_RESET_PRICE_FORMULA_ID", Types.INTEGER },
			{ "NET_BASE_PRICE_FORMULA_ID", Types.INTEGER },
			{ "NET_SUBSEQUENT_PRICE_FORMULA_ID", Types.INTEGER },
			{ "NET_SUBSEQUENT_PERIOD_PRICE", Types.INTEGER },
			{ "RS_CONTRACT_DETAILS_REBATE_PLAN_NAME", Types.VARCHAR },
			{ "RS_CONTRACT_DETAILS_FORMULA_NO", Types.VARCHAR },
			{ "SOURCE", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("FORMULA_METHOD_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("END_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PRICE_PROTECTION_START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ITEM_PRICE_REVISION_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("RS_CHECK_RECORD", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("REBATE_REVISION_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CONTRACT_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("IMTD_CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC6", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC5", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC4", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CHECK_RECORD", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("UDC1", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC2", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("UDC3", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CONTRACT_PRICE_END_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("TOTAL_VOLUME_COMMITMENT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PRICE_PROTECTION_END_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("RECORD_LOCK_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("REBATE_PROGRAM_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SESSION_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PRICE_REVISION", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("RS_MODEL_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("RS_ATTACHED_STATUS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ITEM_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("TOTAL_DOLLAR_COMMITMENT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ITEM_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("TOTAL_MARKET_SHARE_COMMITMNET", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ITEM_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BASE_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("BUNDLE_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORMULA_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PS_STATUS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE_TOLERANCE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("USERS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PS_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SUGGESTED_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PS_MODEL_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("FORMULA_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COMMITMENT_PERIOD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CONTRACT_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("IFP_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("IFP_MODEL_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE_TOLERANCE_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REBATE_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("CONTRACT_PRICE_START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("REBATE_SCHEDULE_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PRICE_TOLERANCE_FREQUENCY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IMTD_ITEM_PRICE_REBATE_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("REBATE_PLAN_SYSTEM_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ATTACHED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PRICE_PLAN_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM_REBATE_END_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRICE_TOLERANCE_INTERVAL", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RS_ATTACHED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ITEM_REBATE_START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("OPERATION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CFP_MODEL_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RS_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ATTACHED_STATUS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRIMARY_UOM", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PACKAGE_SIZE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_CALENDAR_MASTER_SID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RS_CONTRACT_DETAILS_DEDUCTION_CALENDAR_NO",
			Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RS_CONTRACT_DETAILS_DEDUCTION_CALENDAR_NAME",
			Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NET_SALES_FORMULA_MASTER_SID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RS_CONTRACT_DETAILS_NET_SALES_FORMULA_NO",
			Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RS_CONTRACT_DETAILS_NET_SALES_FORMULA_NAME",
			Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FORMULA_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_SALES_RULE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("EVALUATION_RULE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("EVALUATION_RULE_BUNDLE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CALCULATION_RULE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CALCULATION_RULE_BUNDLE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MAX_INCREMENTAL_CHANGE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("RESET_ELIGIBLE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RESET_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RESET_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("RESET_INTERVAL", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RESET_FREQUENCY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_PRICE_TYPE_FORMULA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PRICE_PROTECTION_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NEP", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("NEP_FORMULA", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BRAND_MASTER_SID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PRICE_PROTECTION_STATUS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BASE_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("BASE_PRICE_ENTRY", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("BASE_PRICE_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("BASE_PRICE_DDLB", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_BASE_PRICE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SUBSEQUENT_PERIOD_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RESET_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_RESET_PRICE_TYPE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_RESET_PRICE_FORMULA_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_BASE_PRICE_FORMULA_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_SUBSEQUENT_PRICE_FORMULA_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_SUBSEQUENT_PERIOD_PRICE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RS_CONTRACT_DETAILS_REBATE_PLAN_NAME",
			Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RS_CONTRACT_DETAILS_FORMULA_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table IMTD_ITEM_PRICE_REBATE_DETAILS (FORMULA_METHOD_ID VARCHAR(75) null,END_DATE DATE null,PRICE_PROTECTION_START_DATE DATE null,ITEM_PRICE_REVISION_DATE DATE null,MODIFIED_DATE DATE null,RS_CHECK_RECORD BOOLEAN,REBATE_REVISION_DATE DATE null,CONTRACT_MASTER_SID INTEGER,IMTD_CREATED_DATE DATE null,MODIFIED_BY INTEGER,UDC6 INTEGER,UDC5 INTEGER,UDC4 INTEGER,CHECK_RECORD BOOLEAN,UDC1 INTEGER,UDC2 INTEGER,UDC3 INTEGER,CONTRACT_PRICE_END_DATE DATE null,TOTAL_VOLUME_COMMITMENT DOUBLE,PRICE_PROTECTION_END_DATE DATE null,RECORD_LOCK_STATUS VARCHAR(75) null,START_DATE DATE null,REBATE_PROGRAM_TYPE INTEGER,SESSION_ID VARCHAR(75) null,ITEM_NAME VARCHAR(75) null,PRICE_REVISION DOUBLE,RS_MODEL_SID INTEGER,PRICE DOUBLE,RS_ATTACHED_STATUS INTEGER,ITEM_MASTER_SID INTEGER,TOTAL_DOLLAR_COMMITMENT DOUBLE,ITEM_TYPE INTEGER,TOTAL_MARKET_SHARE_COMMITMNET DOUBLE,ITEM_ID VARCHAR(75) null,BASE_PRICE DOUBLE,BUNDLE_NO VARCHAR(75) null,FORMULA_NAME VARCHAR(75) null,PS_STATUS INTEGER,PRICE_TOLERANCE DOUBLE,CREATED_DATE DATE null,CREATED_BY INTEGER,USERS_SID INTEGER,PS_DETAILS_SID INTEGER,SUGGESTED_PRICE DOUBLE,PS_MODEL_SID INTEGER,FORMULA_ID VARCHAR(75) null,COMMITMENT_PERIOD VARCHAR(75) null,ITEM_NO VARCHAR(75) null,CONTRACT_PRICE DOUBLE,IFP_DETAILS_SID INTEGER,IFP_MODEL_SID INTEGER,PRICE_TOLERANCE_TYPE VARCHAR(75) null,REBATE_AMOUNT DOUBLE,CONTRACT_PRICE_START_DATE DATE null,REBATE_SCHEDULE_TYPE VARCHAR(75) null,PRICE_TOLERANCE_FREQUENCY VARCHAR(75) null,IMTD_ITEM_PRICE_REBATE_SID INTEGER not null primary key IDENTITY,REBATE_PLAN_SYSTEM_ID VARCHAR(75) null,ATTACHED_DATE DATE null,PRICE_PLAN_ID VARCHAR(75) null,ITEM_REBATE_END_DATE DATE null,PRICE_TYPE INTEGER,PRICE_TOLERANCE_INTERVAL INTEGER,RS_ATTACHED_DATE DATE null,ITEM_REBATE_START_DATE DATE null,OPERATION VARCHAR(75) null,CFP_MODEL_SID INTEGER,RS_DETAILS_SID INTEGER,ATTACHED_STATUS INTEGER,PRIMARY_UOM INTEGER,PACKAGE_SIZE VARCHAR(75) null,DEDUCTION_CALENDAR_MASTER_SID VARCHAR(75) null,RS_CONTRACT_DETAILS_DEDUCTION_CALENDAR_NO VARCHAR(75) null,RS_CONTRACT_DETAILS_DEDUCTION_CALENDAR_NAME VARCHAR(75) null,NET_SALES_FORMULA_MASTER_SID VARCHAR(75) null,RS_CONTRACT_DETAILS_NET_SALES_FORMULA_NO VARCHAR(75) null,RS_CONTRACT_DETAILS_NET_SALES_FORMULA_NAME VARCHAR(75) null,FORMULA_TYPE INTEGER,NET_SALES_RULE INTEGER,EVALUATION_RULE INTEGER,EVALUATION_RULE_BUNDLE VARCHAR(75) null,CALCULATION_RULE INTEGER,CALCULATION_RULE_BUNDLE VARCHAR(75) null,MAX_INCREMENTAL_CHANGE DOUBLE,RESET_ELIGIBLE INTEGER,RESET_TYPE INTEGER,RESET_DATE DATE null,RESET_INTERVAL INTEGER,RESET_FREQUENCY INTEGER,NET_PRICE_TYPE INTEGER,NET_PRICE_TYPE_FORMULA VARCHAR(75) null,PRICE_PROTECTION_PRICE_TYPE INTEGER,NEP DOUBLE,NEP_FORMULA INTEGER,BRAND_MASTER_SID VARCHAR(75) null,PRICE_PROTECTION_STATUS INTEGER,BASE_PRICE_TYPE INTEGER,BASE_PRICE_ENTRY DOUBLE,BASE_PRICE_DATE DATE null,BASE_PRICE_DDLB INTEGER,NET_BASE_PRICE INTEGER,SUBSEQUENT_PERIOD_PRICE_TYPE INTEGER,RESET_PRICE_TYPE INTEGER,NET_RESET_PRICE_TYPE INTEGER,NET_RESET_PRICE_FORMULA_ID INTEGER,NET_BASE_PRICE_FORMULA_ID INTEGER,NET_SUBSEQUENT_PRICE_FORMULA_ID INTEGER,NET_SUBSEQUENT_PERIOD_PRICE INTEGER,RS_CONTRACT_DETAILS_REBATE_PLAN_NAME VARCHAR(75) null,RS_CONTRACT_DETAILS_FORMULA_NO VARCHAR(75) null,SOURCE VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table IMTD_ITEM_PRICE_REBATE_DETAILS";
	public static final String ORDER_BY_JPQL = " ORDER BY imtdItemPriceRebateDetails.imtdItemPriceRebateSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY IMTD_ITEM_PRICE_REBATE_DETAILS.IMTD_ITEM_PRICE_REBATE_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.ImtdItemPriceRebateDetails"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.ImtdItemPriceRebateDetails"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.ImtdItemPriceRebateDetails"));

	public ImtdItemPriceRebateDetailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _imtdItemPriceRebateSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setImtdItemPriceRebateSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _imtdItemPriceRebateSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ImtdItemPriceRebateDetails.class;
	}

	@Override
	public String getModelClassName() {
		return ImtdItemPriceRebateDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("formulaMethodId", getFormulaMethodId());
		attributes.put("endDate", getEndDate());
		attributes.put("priceProtectionStartDate", getPriceProtectionStartDate());
		attributes.put("itemPriceRevisionDate", getItemPriceRevisionDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("rsCheckRecord", getRsCheckRecord());
		attributes.put("rebateRevisionDate", getRebateRevisionDate());
		attributes.put("contractMasterSid", getContractMasterSid());
		attributes.put("imtdCreatedDate", getImtdCreatedDate());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("udc6", getUdc6());
		attributes.put("udc5", getUdc5());
		attributes.put("udc4", getUdc4());
		attributes.put("checkRecord", getCheckRecord());
		attributes.put("udc1", getUdc1());
		attributes.put("udc2", getUdc2());
		attributes.put("udc3", getUdc3());
		attributes.put("contractPriceEndDate", getContractPriceEndDate());
		attributes.put("totalVolumeCommitment", getTotalVolumeCommitment());
		attributes.put("priceProtectionEndDate", getPriceProtectionEndDate());
		attributes.put("recordLockStatus", getRecordLockStatus());
		attributes.put("startDate", getStartDate());
		attributes.put("rebateProgramType", getRebateProgramType());
		attributes.put("sessionId", getSessionId());
		attributes.put("itemName", getItemName());
		attributes.put("priceRevision", getPriceRevision());
		attributes.put("rsModelSid", getRsModelSid());
		attributes.put("price", getPrice());
		attributes.put("rsAttachedStatus", getRsAttachedStatus());
		attributes.put("itemMasterSid", getItemMasterSid());
		attributes.put("totalDollarCommitment", getTotalDollarCommitment());
		attributes.put("itemType", getItemType());
		attributes.put("totalMarketShareCommitmnet",
			getTotalMarketShareCommitmnet());
		attributes.put("itemId", getItemId());
		attributes.put("basePrice", getBasePrice());
		attributes.put("bundleNo", getBundleNo());
		attributes.put("formulaName", getFormulaName());
		attributes.put("psStatus", getPsStatus());
		attributes.put("priceTolerance", getPriceTolerance());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("usersSid", getUsersSid());
		attributes.put("psDetailsSid", getPsDetailsSid());
		attributes.put("suggestedPrice", getSuggestedPrice());
		attributes.put("psModelSid", getPsModelSid());
		attributes.put("formulaId", getFormulaId());
		attributes.put("commitmentPeriod", getCommitmentPeriod());
		attributes.put("itemNo", getItemNo());
		attributes.put("contractPrice", getContractPrice());
		attributes.put("ifpDetailsSid", getIfpDetailsSid());
		attributes.put("ifpModelSid", getIfpModelSid());
		attributes.put("priceToleranceType", getPriceToleranceType());
		attributes.put("rebateAmount", getRebateAmount());
		attributes.put("contractPriceStartDate", getContractPriceStartDate());
		attributes.put("rebateScheduleType", getRebateScheduleType());
		attributes.put("priceToleranceFrequency", getPriceToleranceFrequency());
		attributes.put("imtdItemPriceRebateSid", getImtdItemPriceRebateSid());
		attributes.put("rebatePlanSystemId", getRebatePlanSystemId());
		attributes.put("attachedDate", getAttachedDate());
		attributes.put("pricePlanId", getPricePlanId());
		attributes.put("itemRebateEndDate", getItemRebateEndDate());
		attributes.put("priceType", getPriceType());
		attributes.put("priceToleranceInterval", getPriceToleranceInterval());
		attributes.put("rsAttachedDate", getRsAttachedDate());
		attributes.put("itemRebateStartDate", getItemRebateStartDate());
		attributes.put("operation", getOperation());
		attributes.put("cfpModelSid", getCfpModelSid());
		attributes.put("rsDetailsSid", getRsDetailsSid());
		attributes.put("attachedStatus", getAttachedStatus());
		attributes.put("primaryUom", getPrimaryUom());
		attributes.put("packageSize", getPackageSize());
		attributes.put("deductionCalendarMasterSid",
			getDeductionCalendarMasterSid());
		attributes.put("rsContractDetailsDeductionCalendarNo",
			getRsContractDetailsDeductionCalendarNo());
		attributes.put("rsContractDetailsDeductionCalendarName",
			getRsContractDetailsDeductionCalendarName());
		attributes.put("netSalesFormulaMasterSid", getNetSalesFormulaMasterSid());
		attributes.put("rsContractDetailsNetSalesFormulaNo",
			getRsContractDetailsNetSalesFormulaNo());
		attributes.put("rsContractDetailsNetSalesFormulaName",
			getRsContractDetailsNetSalesFormulaName());
		attributes.put("formulaType", getFormulaType());
		attributes.put("netSalesRule", getNetSalesRule());
		attributes.put("evaluationRule", getEvaluationRule());
		attributes.put("evaluationRuleBundle", getEvaluationRuleBundle());
		attributes.put("calculationRule", getCalculationRule());
		attributes.put("calculationRuleBundle", getCalculationRuleBundle());
		attributes.put("maxIncrementalChange", getMaxIncrementalChange());
		attributes.put("resetEligible", getResetEligible());
		attributes.put("resetType", getResetType());
		attributes.put("resetDate", getResetDate());
		attributes.put("resetInterval", getResetInterval());
		attributes.put("resetFrequency", getResetFrequency());
		attributes.put("netPriceType", getNetPriceType());
		attributes.put("netPriceTypeFormula", getNetPriceTypeFormula());
		attributes.put("priceProtectionPriceType", getPriceProtectionPriceType());
		attributes.put("nep", getNep());
		attributes.put("nepFormula", getNepFormula());
		attributes.put("brandMasterSid", getBrandMasterSid());
		attributes.put("priceProtectionStatus", getPriceProtectionStatus());
		attributes.put("basePriceType", getBasePriceType());
		attributes.put("basePriceEntry", getBasePriceEntry());
		attributes.put("basePriceDate", getBasePriceDate());
		attributes.put("basePriceDdlb", getBasePriceDdlb());
		attributes.put("netBasePrice", getNetBasePrice());
		attributes.put("subsequentPeriodPriceType",
			getSubsequentPeriodPriceType());
		attributes.put("resetPriceType", getResetPriceType());
		attributes.put("netResetPriceType", getNetResetPriceType());
		attributes.put("netResetPriceFormulaId", getNetResetPriceFormulaId());
		attributes.put("netBasePriceFormulaId", getNetBasePriceFormulaId());
		attributes.put("netSubsequentPriceFormulaId",
			getNetSubsequentPriceFormulaId());
		attributes.put("netSubsequentPeriodPrice", getNetSubsequentPeriodPrice());
		attributes.put("rsContractDetailsRebatePlanName",
			getRsContractDetailsRebatePlanName());
		attributes.put("rsContractDetailsFormulaNo",
			getRsContractDetailsFormulaNo());
		attributes.put("source", getSource());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String formulaMethodId = (String)attributes.get("formulaMethodId");

		if (formulaMethodId != null) {
			setFormulaMethodId(formulaMethodId);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Date priceProtectionStartDate = (Date)attributes.get(
				"priceProtectionStartDate");

		if (priceProtectionStartDate != null) {
			setPriceProtectionStartDate(priceProtectionStartDate);
		}

		Date itemPriceRevisionDate = (Date)attributes.get(
				"itemPriceRevisionDate");

		if (itemPriceRevisionDate != null) {
			setItemPriceRevisionDate(itemPriceRevisionDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Boolean rsCheckRecord = (Boolean)attributes.get("rsCheckRecord");

		if (rsCheckRecord != null) {
			setRsCheckRecord(rsCheckRecord);
		}

		Date rebateRevisionDate = (Date)attributes.get("rebateRevisionDate");

		if (rebateRevisionDate != null) {
			setRebateRevisionDate(rebateRevisionDate);
		}

		Integer contractMasterSid = (Integer)attributes.get("contractMasterSid");

		if (contractMasterSid != null) {
			setContractMasterSid(contractMasterSid);
		}

		Date imtdCreatedDate = (Date)attributes.get("imtdCreatedDate");

		if (imtdCreatedDate != null) {
			setImtdCreatedDate(imtdCreatedDate);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Integer udc6 = (Integer)attributes.get("udc6");

		if (udc6 != null) {
			setUdc6(udc6);
		}

		Integer udc5 = (Integer)attributes.get("udc5");

		if (udc5 != null) {
			setUdc5(udc5);
		}

		Integer udc4 = (Integer)attributes.get("udc4");

		if (udc4 != null) {
			setUdc4(udc4);
		}

		Boolean checkRecord = (Boolean)attributes.get("checkRecord");

		if (checkRecord != null) {
			setCheckRecord(checkRecord);
		}

		Integer udc1 = (Integer)attributes.get("udc1");

		if (udc1 != null) {
			setUdc1(udc1);
		}

		Integer udc2 = (Integer)attributes.get("udc2");

		if (udc2 != null) {
			setUdc2(udc2);
		}

		Integer udc3 = (Integer)attributes.get("udc3");

		if (udc3 != null) {
			setUdc3(udc3);
		}

		Date contractPriceEndDate = (Date)attributes.get("contractPriceEndDate");

		if (contractPriceEndDate != null) {
			setContractPriceEndDate(contractPriceEndDate);
		}

		Double totalVolumeCommitment = (Double)attributes.get(
				"totalVolumeCommitment");

		if (totalVolumeCommitment != null) {
			setTotalVolumeCommitment(totalVolumeCommitment);
		}

		Date priceProtectionEndDate = (Date)attributes.get(
				"priceProtectionEndDate");

		if (priceProtectionEndDate != null) {
			setPriceProtectionEndDate(priceProtectionEndDate);
		}

		String recordLockStatus = (String)attributes.get("recordLockStatus");

		if (recordLockStatus != null) {
			setRecordLockStatus(recordLockStatus);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Integer rebateProgramType = (Integer)attributes.get("rebateProgramType");

		if (rebateProgramType != null) {
			setRebateProgramType(rebateProgramType);
		}

		String sessionId = (String)attributes.get("sessionId");

		if (sessionId != null) {
			setSessionId(sessionId);
		}

		String itemName = (String)attributes.get("itemName");

		if (itemName != null) {
			setItemName(itemName);
		}

		Double priceRevision = (Double)attributes.get("priceRevision");

		if (priceRevision != null) {
			setPriceRevision(priceRevision);
		}

		Integer rsModelSid = (Integer)attributes.get("rsModelSid");

		if (rsModelSid != null) {
			setRsModelSid(rsModelSid);
		}

		Double price = (Double)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		Integer rsAttachedStatus = (Integer)attributes.get("rsAttachedStatus");

		if (rsAttachedStatus != null) {
			setRsAttachedStatus(rsAttachedStatus);
		}

		Integer itemMasterSid = (Integer)attributes.get("itemMasterSid");

		if (itemMasterSid != null) {
			setItemMasterSid(itemMasterSid);
		}

		Double totalDollarCommitment = (Double)attributes.get(
				"totalDollarCommitment");

		if (totalDollarCommitment != null) {
			setTotalDollarCommitment(totalDollarCommitment);
		}

		Integer itemType = (Integer)attributes.get("itemType");

		if (itemType != null) {
			setItemType(itemType);
		}

		Double totalMarketShareCommitmnet = (Double)attributes.get(
				"totalMarketShareCommitmnet");

		if (totalMarketShareCommitmnet != null) {
			setTotalMarketShareCommitmnet(totalMarketShareCommitmnet);
		}

		String itemId = (String)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		Double basePrice = (Double)attributes.get("basePrice");

		if (basePrice != null) {
			setBasePrice(basePrice);
		}

		String bundleNo = (String)attributes.get("bundleNo");

		if (bundleNo != null) {
			setBundleNo(bundleNo);
		}

		String formulaName = (String)attributes.get("formulaName");

		if (formulaName != null) {
			setFormulaName(formulaName);
		}

		Integer psStatus = (Integer)attributes.get("psStatus");

		if (psStatus != null) {
			setPsStatus(psStatus);
		}

		Double priceTolerance = (Double)attributes.get("priceTolerance");

		if (priceTolerance != null) {
			setPriceTolerance(priceTolerance);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Integer usersSid = (Integer)attributes.get("usersSid");

		if (usersSid != null) {
			setUsersSid(usersSid);
		}

		Integer psDetailsSid = (Integer)attributes.get("psDetailsSid");

		if (psDetailsSid != null) {
			setPsDetailsSid(psDetailsSid);
		}

		Double suggestedPrice = (Double)attributes.get("suggestedPrice");

		if (suggestedPrice != null) {
			setSuggestedPrice(suggestedPrice);
		}

		Integer psModelSid = (Integer)attributes.get("psModelSid");

		if (psModelSid != null) {
			setPsModelSid(psModelSid);
		}

		String formulaId = (String)attributes.get("formulaId");

		if (formulaId != null) {
			setFormulaId(formulaId);
		}

		String commitmentPeriod = (String)attributes.get("commitmentPeriod");

		if (commitmentPeriod != null) {
			setCommitmentPeriod(commitmentPeriod);
		}

		String itemNo = (String)attributes.get("itemNo");

		if (itemNo != null) {
			setItemNo(itemNo);
		}

		Double contractPrice = (Double)attributes.get("contractPrice");

		if (contractPrice != null) {
			setContractPrice(contractPrice);
		}

		Integer ifpDetailsSid = (Integer)attributes.get("ifpDetailsSid");

		if (ifpDetailsSid != null) {
			setIfpDetailsSid(ifpDetailsSid);
		}

		Integer ifpModelSid = (Integer)attributes.get("ifpModelSid");

		if (ifpModelSid != null) {
			setIfpModelSid(ifpModelSid);
		}

		String priceToleranceType = (String)attributes.get("priceToleranceType");

		if (priceToleranceType != null) {
			setPriceToleranceType(priceToleranceType);
		}

		Double rebateAmount = (Double)attributes.get("rebateAmount");

		if (rebateAmount != null) {
			setRebateAmount(rebateAmount);
		}

		Date contractPriceStartDate = (Date)attributes.get(
				"contractPriceStartDate");

		if (contractPriceStartDate != null) {
			setContractPriceStartDate(contractPriceStartDate);
		}

		String rebateScheduleType = (String)attributes.get("rebateScheduleType");

		if (rebateScheduleType != null) {
			setRebateScheduleType(rebateScheduleType);
		}

		String priceToleranceFrequency = (String)attributes.get(
				"priceToleranceFrequency");

		if (priceToleranceFrequency != null) {
			setPriceToleranceFrequency(priceToleranceFrequency);
		}

		Integer imtdItemPriceRebateSid = (Integer)attributes.get(
				"imtdItemPriceRebateSid");

		if (imtdItemPriceRebateSid != null) {
			setImtdItemPriceRebateSid(imtdItemPriceRebateSid);
		}

		String rebatePlanSystemId = (String)attributes.get("rebatePlanSystemId");

		if (rebatePlanSystemId != null) {
			setRebatePlanSystemId(rebatePlanSystemId);
		}

		Date attachedDate = (Date)attributes.get("attachedDate");

		if (attachedDate != null) {
			setAttachedDate(attachedDate);
		}

		String pricePlanId = (String)attributes.get("pricePlanId");

		if (pricePlanId != null) {
			setPricePlanId(pricePlanId);
		}

		Date itemRebateEndDate = (Date)attributes.get("itemRebateEndDate");

		if (itemRebateEndDate != null) {
			setItemRebateEndDate(itemRebateEndDate);
		}

		Integer priceType = (Integer)attributes.get("priceType");

		if (priceType != null) {
			setPriceType(priceType);
		}

		Integer priceToleranceInterval = (Integer)attributes.get(
				"priceToleranceInterval");

		if (priceToleranceInterval != null) {
			setPriceToleranceInterval(priceToleranceInterval);
		}

		Date rsAttachedDate = (Date)attributes.get("rsAttachedDate");

		if (rsAttachedDate != null) {
			setRsAttachedDate(rsAttachedDate);
		}

		Date itemRebateStartDate = (Date)attributes.get("itemRebateStartDate");

		if (itemRebateStartDate != null) {
			setItemRebateStartDate(itemRebateStartDate);
		}

		String operation = (String)attributes.get("operation");

		if (operation != null) {
			setOperation(operation);
		}

		Integer cfpModelSid = (Integer)attributes.get("cfpModelSid");

		if (cfpModelSid != null) {
			setCfpModelSid(cfpModelSid);
		}

		Integer rsDetailsSid = (Integer)attributes.get("rsDetailsSid");

		if (rsDetailsSid != null) {
			setRsDetailsSid(rsDetailsSid);
		}

		Integer attachedStatus = (Integer)attributes.get("attachedStatus");

		if (attachedStatus != null) {
			setAttachedStatus(attachedStatus);
		}

		Integer primaryUom = (Integer)attributes.get("primaryUom");

		if (primaryUom != null) {
			setPrimaryUom(primaryUom);
		}

		String packageSize = (String)attributes.get("packageSize");

		if (packageSize != null) {
			setPackageSize(packageSize);
		}

		String deductionCalendarMasterSid = (String)attributes.get(
				"deductionCalendarMasterSid");

		if (deductionCalendarMasterSid != null) {
			setDeductionCalendarMasterSid(deductionCalendarMasterSid);
		}

		String rsContractDetailsDeductionCalendarNo = (String)attributes.get(
				"rsContractDetailsDeductionCalendarNo");

		if (rsContractDetailsDeductionCalendarNo != null) {
			setRsContractDetailsDeductionCalendarNo(rsContractDetailsDeductionCalendarNo);
		}

		String rsContractDetailsDeductionCalendarName = (String)attributes.get(
				"rsContractDetailsDeductionCalendarName");

		if (rsContractDetailsDeductionCalendarName != null) {
			setRsContractDetailsDeductionCalendarName(rsContractDetailsDeductionCalendarName);
		}

		String netSalesFormulaMasterSid = (String)attributes.get(
				"netSalesFormulaMasterSid");

		if (netSalesFormulaMasterSid != null) {
			setNetSalesFormulaMasterSid(netSalesFormulaMasterSid);
		}

		String rsContractDetailsNetSalesFormulaNo = (String)attributes.get(
				"rsContractDetailsNetSalesFormulaNo");

		if (rsContractDetailsNetSalesFormulaNo != null) {
			setRsContractDetailsNetSalesFormulaNo(rsContractDetailsNetSalesFormulaNo);
		}

		String rsContractDetailsNetSalesFormulaName = (String)attributes.get(
				"rsContractDetailsNetSalesFormulaName");

		if (rsContractDetailsNetSalesFormulaName != null) {
			setRsContractDetailsNetSalesFormulaName(rsContractDetailsNetSalesFormulaName);
		}

		Integer formulaType = (Integer)attributes.get("formulaType");

		if (formulaType != null) {
			setFormulaType(formulaType);
		}

		Integer netSalesRule = (Integer)attributes.get("netSalesRule");

		if (netSalesRule != null) {
			setNetSalesRule(netSalesRule);
		}

		Integer evaluationRule = (Integer)attributes.get("evaluationRule");

		if (evaluationRule != null) {
			setEvaluationRule(evaluationRule);
		}

		String evaluationRuleBundle = (String)attributes.get(
				"evaluationRuleBundle");

		if (evaluationRuleBundle != null) {
			setEvaluationRuleBundle(evaluationRuleBundle);
		}

		Integer calculationRule = (Integer)attributes.get("calculationRule");

		if (calculationRule != null) {
			setCalculationRule(calculationRule);
		}

		String calculationRuleBundle = (String)attributes.get(
				"calculationRuleBundle");

		if (calculationRuleBundle != null) {
			setCalculationRuleBundle(calculationRuleBundle);
		}

		Double maxIncrementalChange = (Double)attributes.get(
				"maxIncrementalChange");

		if (maxIncrementalChange != null) {
			setMaxIncrementalChange(maxIncrementalChange);
		}

		Integer resetEligible = (Integer)attributes.get("resetEligible");

		if (resetEligible != null) {
			setResetEligible(resetEligible);
		}

		Integer resetType = (Integer)attributes.get("resetType");

		if (resetType != null) {
			setResetType(resetType);
		}

		Date resetDate = (Date)attributes.get("resetDate");

		if (resetDate != null) {
			setResetDate(resetDate);
		}

		Integer resetInterval = (Integer)attributes.get("resetInterval");

		if (resetInterval != null) {
			setResetInterval(resetInterval);
		}

		Integer resetFrequency = (Integer)attributes.get("resetFrequency");

		if (resetFrequency != null) {
			setResetFrequency(resetFrequency);
		}

		Integer netPriceType = (Integer)attributes.get("netPriceType");

		if (netPriceType != null) {
			setNetPriceType(netPriceType);
		}

		String netPriceTypeFormula = (String)attributes.get(
				"netPriceTypeFormula");

		if (netPriceTypeFormula != null) {
			setNetPriceTypeFormula(netPriceTypeFormula);
		}

		Integer priceProtectionPriceType = (Integer)attributes.get(
				"priceProtectionPriceType");

		if (priceProtectionPriceType != null) {
			setPriceProtectionPriceType(priceProtectionPriceType);
		}

		Double nep = (Double)attributes.get("nep");

		if (nep != null) {
			setNep(nep);
		}

		Integer nepFormula = (Integer)attributes.get("nepFormula");

		if (nepFormula != null) {
			setNepFormula(nepFormula);
		}

		String brandMasterSid = (String)attributes.get("brandMasterSid");

		if (brandMasterSid != null) {
			setBrandMasterSid(brandMasterSid);
		}

		Integer priceProtectionStatus = (Integer)attributes.get(
				"priceProtectionStatus");

		if (priceProtectionStatus != null) {
			setPriceProtectionStatus(priceProtectionStatus);
		}

		Integer basePriceType = (Integer)attributes.get("basePriceType");

		if (basePriceType != null) {
			setBasePriceType(basePriceType);
		}

		Double basePriceEntry = (Double)attributes.get("basePriceEntry");

		if (basePriceEntry != null) {
			setBasePriceEntry(basePriceEntry);
		}

		Date basePriceDate = (Date)attributes.get("basePriceDate");

		if (basePriceDate != null) {
			setBasePriceDate(basePriceDate);
		}

		Integer basePriceDdlb = (Integer)attributes.get("basePriceDdlb");

		if (basePriceDdlb != null) {
			setBasePriceDdlb(basePriceDdlb);
		}

		Integer netBasePrice = (Integer)attributes.get("netBasePrice");

		if (netBasePrice != null) {
			setNetBasePrice(netBasePrice);
		}

		Integer subsequentPeriodPriceType = (Integer)attributes.get(
				"subsequentPeriodPriceType");

		if (subsequentPeriodPriceType != null) {
			setSubsequentPeriodPriceType(subsequentPeriodPriceType);
		}

		Integer resetPriceType = (Integer)attributes.get("resetPriceType");

		if (resetPriceType != null) {
			setResetPriceType(resetPriceType);
		}

		Integer netResetPriceType = (Integer)attributes.get("netResetPriceType");

		if (netResetPriceType != null) {
			setNetResetPriceType(netResetPriceType);
		}

		Integer netResetPriceFormulaId = (Integer)attributes.get(
				"netResetPriceFormulaId");

		if (netResetPriceFormulaId != null) {
			setNetResetPriceFormulaId(netResetPriceFormulaId);
		}

		Integer netBasePriceFormulaId = (Integer)attributes.get(
				"netBasePriceFormulaId");

		if (netBasePriceFormulaId != null) {
			setNetBasePriceFormulaId(netBasePriceFormulaId);
		}

		Integer netSubsequentPriceFormulaId = (Integer)attributes.get(
				"netSubsequentPriceFormulaId");

		if (netSubsequentPriceFormulaId != null) {
			setNetSubsequentPriceFormulaId(netSubsequentPriceFormulaId);
		}

		Integer netSubsequentPeriodPrice = (Integer)attributes.get(
				"netSubsequentPeriodPrice");

		if (netSubsequentPeriodPrice != null) {
			setNetSubsequentPeriodPrice(netSubsequentPeriodPrice);
		}

		String rsContractDetailsRebatePlanName = (String)attributes.get(
				"rsContractDetailsRebatePlanName");

		if (rsContractDetailsRebatePlanName != null) {
			setRsContractDetailsRebatePlanName(rsContractDetailsRebatePlanName);
		}

		String rsContractDetailsFormulaNo = (String)attributes.get(
				"rsContractDetailsFormulaNo");

		if (rsContractDetailsFormulaNo != null) {
			setRsContractDetailsFormulaNo(rsContractDetailsFormulaNo);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}
	}

	@Override
	public String getFormulaMethodId() {
		if (_formulaMethodId == null) {
			return StringPool.BLANK;
		}
		else {
			return _formulaMethodId;
		}
	}

	@Override
	public void setFormulaMethodId(String formulaMethodId) {
		_formulaMethodId = formulaMethodId;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public Date getPriceProtectionStartDate() {
		return _priceProtectionStartDate;
	}

	@Override
	public void setPriceProtectionStartDate(Date priceProtectionStartDate) {
		_priceProtectionStartDate = priceProtectionStartDate;
	}

	@Override
	public Date getItemPriceRevisionDate() {
		return _itemPriceRevisionDate;
	}

	@Override
	public void setItemPriceRevisionDate(Date itemPriceRevisionDate) {
		_itemPriceRevisionDate = itemPriceRevisionDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public boolean getRsCheckRecord() {
		return _rsCheckRecord;
	}

	@Override
	public boolean isRsCheckRecord() {
		return _rsCheckRecord;
	}

	@Override
	public void setRsCheckRecord(boolean rsCheckRecord) {
		_rsCheckRecord = rsCheckRecord;
	}

	@Override
	public Date getRebateRevisionDate() {
		return _rebateRevisionDate;
	}

	@Override
	public void setRebateRevisionDate(Date rebateRevisionDate) {
		_rebateRevisionDate = rebateRevisionDate;
	}

	@Override
	public int getContractMasterSid() {
		return _contractMasterSid;
	}

	@Override
	public void setContractMasterSid(int contractMasterSid) {
		_contractMasterSid = contractMasterSid;
	}

	@Override
	public Date getImtdCreatedDate() {
		return _imtdCreatedDate;
	}

	@Override
	public void setImtdCreatedDate(Date imtdCreatedDate) {
		_imtdCreatedDate = imtdCreatedDate;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public int getUdc6() {
		return _udc6;
	}

	@Override
	public void setUdc6(int udc6) {
		_udc6 = udc6;
	}

	@Override
	public int getUdc5() {
		return _udc5;
	}

	@Override
	public void setUdc5(int udc5) {
		_udc5 = udc5;
	}

	@Override
	public int getUdc4() {
		return _udc4;
	}

	@Override
	public void setUdc4(int udc4) {
		_udc4 = udc4;
	}

	@Override
	public boolean getCheckRecord() {
		return _checkRecord;
	}

	@Override
	public boolean isCheckRecord() {
		return _checkRecord;
	}

	@Override
	public void setCheckRecord(boolean checkRecord) {
		_checkRecord = checkRecord;
	}

	@Override
	public int getUdc1() {
		return _udc1;
	}

	@Override
	public void setUdc1(int udc1) {
		_udc1 = udc1;
	}

	@Override
	public int getUdc2() {
		return _udc2;
	}

	@Override
	public void setUdc2(int udc2) {
		_udc2 = udc2;
	}

	@Override
	public int getUdc3() {
		return _udc3;
	}

	@Override
	public void setUdc3(int udc3) {
		_udc3 = udc3;
	}

	@Override
	public Date getContractPriceEndDate() {
		return _contractPriceEndDate;
	}

	@Override
	public void setContractPriceEndDate(Date contractPriceEndDate) {
		_contractPriceEndDate = contractPriceEndDate;
	}

	@Override
	public double getTotalVolumeCommitment() {
		return _totalVolumeCommitment;
	}

	@Override
	public void setTotalVolumeCommitment(double totalVolumeCommitment) {
		_totalVolumeCommitment = totalVolumeCommitment;
	}

	@Override
	public Date getPriceProtectionEndDate() {
		return _priceProtectionEndDate;
	}

	@Override
	public void setPriceProtectionEndDate(Date priceProtectionEndDate) {
		_priceProtectionEndDate = priceProtectionEndDate;
	}

	@Override
	public String getRecordLockStatus() {
		if (_recordLockStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _recordLockStatus;
		}
	}

	@Override
	public void setRecordLockStatus(String recordLockStatus) {
		_recordLockStatus = recordLockStatus;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public int getRebateProgramType() {
		return _rebateProgramType;
	}

	@Override
	public void setRebateProgramType(int rebateProgramType) {
		_rebateProgramType = rebateProgramType;
	}

	@Override
	public String getSessionId() {
		if (_sessionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _sessionId;
		}
	}

	@Override
	public void setSessionId(String sessionId) {
		_sessionId = sessionId;
	}

	@Override
	public String getItemName() {
		if (_itemName == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemName;
		}
	}

	@Override
	public void setItemName(String itemName) {
		_itemName = itemName;
	}

	@Override
	public double getPriceRevision() {
		return _priceRevision;
	}

	@Override
	public void setPriceRevision(double priceRevision) {
		_priceRevision = priceRevision;
	}

	@Override
	public int getRsModelSid() {
		return _rsModelSid;
	}

	@Override
	public void setRsModelSid(int rsModelSid) {
		_rsModelSid = rsModelSid;
	}

	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	@Override
	public int getRsAttachedStatus() {
		return _rsAttachedStatus;
	}

	@Override
	public void setRsAttachedStatus(int rsAttachedStatus) {
		_rsAttachedStatus = rsAttachedStatus;
	}

	@Override
	public int getItemMasterSid() {
		return _itemMasterSid;
	}

	@Override
	public void setItemMasterSid(int itemMasterSid) {
		_itemMasterSid = itemMasterSid;
	}

	@Override
	public double getTotalDollarCommitment() {
		return _totalDollarCommitment;
	}

	@Override
	public void setTotalDollarCommitment(double totalDollarCommitment) {
		_totalDollarCommitment = totalDollarCommitment;
	}

	@Override
	public int getItemType() {
		return _itemType;
	}

	@Override
	public void setItemType(int itemType) {
		_itemType = itemType;
	}

	@Override
	public double getTotalMarketShareCommitmnet() {
		return _totalMarketShareCommitmnet;
	}

	@Override
	public void setTotalMarketShareCommitmnet(double totalMarketShareCommitmnet) {
		_totalMarketShareCommitmnet = totalMarketShareCommitmnet;
	}

	@Override
	public String getItemId() {
		if (_itemId == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemId;
		}
	}

	@Override
	public void setItemId(String itemId) {
		_itemId = itemId;
	}

	@Override
	public double getBasePrice() {
		return _basePrice;
	}

	@Override
	public void setBasePrice(double basePrice) {
		_basePrice = basePrice;
	}

	@Override
	public String getBundleNo() {
		if (_bundleNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _bundleNo;
		}
	}

	@Override
	public void setBundleNo(String bundleNo) {
		_bundleNo = bundleNo;
	}

	@Override
	public String getFormulaName() {
		if (_formulaName == null) {
			return StringPool.BLANK;
		}
		else {
			return _formulaName;
		}
	}

	@Override
	public void setFormulaName(String formulaName) {
		_formulaName = formulaName;
	}

	@Override
	public int getPsStatus() {
		return _psStatus;
	}

	@Override
	public void setPsStatus(int psStatus) {
		_psStatus = psStatus;
	}

	@Override
	public double getPriceTolerance() {
		return _priceTolerance;
	}

	@Override
	public void setPriceTolerance(double priceTolerance) {
		_priceTolerance = priceTolerance;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public int getUsersSid() {
		return _usersSid;
	}

	@Override
	public void setUsersSid(int usersSid) {
		_usersSid = usersSid;
	}

	@Override
	public int getPsDetailsSid() {
		return _psDetailsSid;
	}

	@Override
	public void setPsDetailsSid(int psDetailsSid) {
		_psDetailsSid = psDetailsSid;
	}

	@Override
	public double getSuggestedPrice() {
		return _suggestedPrice;
	}

	@Override
	public void setSuggestedPrice(double suggestedPrice) {
		_suggestedPrice = suggestedPrice;
	}

	@Override
	public int getPsModelSid() {
		return _psModelSid;
	}

	@Override
	public void setPsModelSid(int psModelSid) {
		_psModelSid = psModelSid;
	}

	@Override
	public String getFormulaId() {
		if (_formulaId == null) {
			return StringPool.BLANK;
		}
		else {
			return _formulaId;
		}
	}

	@Override
	public void setFormulaId(String formulaId) {
		_formulaId = formulaId;
	}

	@Override
	public String getCommitmentPeriod() {
		if (_commitmentPeriod == null) {
			return StringPool.BLANK;
		}
		else {
			return _commitmentPeriod;
		}
	}

	@Override
	public void setCommitmentPeriod(String commitmentPeriod) {
		_commitmentPeriod = commitmentPeriod;
	}

	@Override
	public String getItemNo() {
		if (_itemNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemNo;
		}
	}

	@Override
	public void setItemNo(String itemNo) {
		_itemNo = itemNo;
	}

	@Override
	public double getContractPrice() {
		return _contractPrice;
	}

	@Override
	public void setContractPrice(double contractPrice) {
		_contractPrice = contractPrice;
	}

	@Override
	public int getIfpDetailsSid() {
		return _ifpDetailsSid;
	}

	@Override
	public void setIfpDetailsSid(int ifpDetailsSid) {
		_ifpDetailsSid = ifpDetailsSid;
	}

	@Override
	public int getIfpModelSid() {
		return _ifpModelSid;
	}

	@Override
	public void setIfpModelSid(int ifpModelSid) {
		_ifpModelSid = ifpModelSid;
	}

	@Override
	public String getPriceToleranceType() {
		if (_priceToleranceType == null) {
			return StringPool.BLANK;
		}
		else {
			return _priceToleranceType;
		}
	}

	@Override
	public void setPriceToleranceType(String priceToleranceType) {
		_priceToleranceType = priceToleranceType;
	}

	@Override
	public double getRebateAmount() {
		return _rebateAmount;
	}

	@Override
	public void setRebateAmount(double rebateAmount) {
		_rebateAmount = rebateAmount;
	}

	@Override
	public Date getContractPriceStartDate() {
		return _contractPriceStartDate;
	}

	@Override
	public void setContractPriceStartDate(Date contractPriceStartDate) {
		_contractPriceStartDate = contractPriceStartDate;
	}

	@Override
	public String getRebateScheduleType() {
		if (_rebateScheduleType == null) {
			return StringPool.BLANK;
		}
		else {
			return _rebateScheduleType;
		}
	}

	@Override
	public void setRebateScheduleType(String rebateScheduleType) {
		_rebateScheduleType = rebateScheduleType;
	}

	@Override
	public String getPriceToleranceFrequency() {
		if (_priceToleranceFrequency == null) {
			return StringPool.BLANK;
		}
		else {
			return _priceToleranceFrequency;
		}
	}

	@Override
	public void setPriceToleranceFrequency(String priceToleranceFrequency) {
		_priceToleranceFrequency = priceToleranceFrequency;
	}

	@Override
	public int getImtdItemPriceRebateSid() {
		return _imtdItemPriceRebateSid;
	}

	@Override
	public void setImtdItemPriceRebateSid(int imtdItemPriceRebateSid) {
		_imtdItemPriceRebateSid = imtdItemPriceRebateSid;
	}

	@Override
	public String getRebatePlanSystemId() {
		return _rebatePlanSystemId;
	}

	@Override
	public void setRebatePlanSystemId(String rebatePlanSystemId) {
		_rebatePlanSystemId = rebatePlanSystemId;
	}

	@Override
	public Date getAttachedDate() {
		return _attachedDate;
	}

	@Override
	public void setAttachedDate(Date attachedDate) {
		_attachedDate = attachedDate;
	}

	@Override
	public String getPricePlanId() {
		if (_pricePlanId == null) {
			return StringPool.BLANK;
		}
		else {
			return _pricePlanId;
		}
	}

	@Override
	public void setPricePlanId(String pricePlanId) {
		_pricePlanId = pricePlanId;
	}

	@Override
	public Date getItemRebateEndDate() {
		return _itemRebateEndDate;
	}

	@Override
	public void setItemRebateEndDate(Date itemRebateEndDate) {
		_itemRebateEndDate = itemRebateEndDate;
	}

	@Override
	public int getPriceType() {
		return _priceType;
	}

	@Override
	public void setPriceType(int priceType) {
		_priceType = priceType;
	}

	@Override
	public int getPriceToleranceInterval() {
		return _priceToleranceInterval;
	}

	@Override
	public void setPriceToleranceInterval(int priceToleranceInterval) {
		_priceToleranceInterval = priceToleranceInterval;
	}

	@Override
	public Date getRsAttachedDate() {
		return _rsAttachedDate;
	}

	@Override
	public void setRsAttachedDate(Date rsAttachedDate) {
		_rsAttachedDate = rsAttachedDate;
	}

	@Override
	public Date getItemRebateStartDate() {
		return _itemRebateStartDate;
	}

	@Override
	public void setItemRebateStartDate(Date itemRebateStartDate) {
		_itemRebateStartDate = itemRebateStartDate;
	}

	@Override
	public String getOperation() {
		if (_operation == null) {
			return StringPool.BLANK;
		}
		else {
			return _operation;
		}
	}

	@Override
	public void setOperation(String operation) {
		_operation = operation;
	}

	@Override
	public int getCfpModelSid() {
		return _cfpModelSid;
	}

	@Override
	public void setCfpModelSid(int cfpModelSid) {
		_cfpModelSid = cfpModelSid;
	}

	@Override
	public int getRsDetailsSid() {
		return _rsDetailsSid;
	}

	@Override
	public void setRsDetailsSid(int rsDetailsSid) {
		_rsDetailsSid = rsDetailsSid;
	}

	@Override
	public int getAttachedStatus() {
		return _attachedStatus;
	}

	@Override
	public void setAttachedStatus(int attachedStatus) {
		_attachedStatus = attachedStatus;
	}

	@Override
	public int getPrimaryUom() {
		return _primaryUom;
	}

	@Override
	public void setPrimaryUom(int primaryUom) {
		_primaryUom = primaryUom;
	}

	@Override
	public String getPackageSize() {
		if (_packageSize == null) {
			return StringPool.BLANK;
		}
		else {
			return _packageSize;
		}
	}

	@Override
	public void setPackageSize(String packageSize) {
		_packageSize = packageSize;
	}

	@Override
	public String getDeductionCalendarMasterSid() {
		return _deductionCalendarMasterSid;
	}

	@Override
	public void setDeductionCalendarMasterSid(String deductionCalendarMasterSid) {
		_deductionCalendarMasterSid = deductionCalendarMasterSid;
	}

	@Override
	public String getRsContractDetailsDeductionCalendarNo() {
		if (_rsContractDetailsDeductionCalendarNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _rsContractDetailsDeductionCalendarNo;
		}
	}

	@Override
	public void setRsContractDetailsDeductionCalendarNo(
		String rsContractDetailsDeductionCalendarNo) {
		_rsContractDetailsDeductionCalendarNo = rsContractDetailsDeductionCalendarNo;
	}

	@Override
	public String getRsContractDetailsDeductionCalendarName() {
		if (_rsContractDetailsDeductionCalendarName == null) {
			return StringPool.BLANK;
		}
		else {
			return _rsContractDetailsDeductionCalendarName;
		}
	}

	@Override
	public void setRsContractDetailsDeductionCalendarName(
		String rsContractDetailsDeductionCalendarName) {
		_rsContractDetailsDeductionCalendarName = rsContractDetailsDeductionCalendarName;
	}

	@Override
	public String getNetSalesFormulaMasterSid() {
		return _netSalesFormulaMasterSid;
	}

	@Override
	public void setNetSalesFormulaMasterSid(String netSalesFormulaMasterSid) {
		_netSalesFormulaMasterSid = netSalesFormulaMasterSid;
	}

	@Override
	public String getRsContractDetailsNetSalesFormulaNo() {
		if (_rsContractDetailsNetSalesFormulaNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _rsContractDetailsNetSalesFormulaNo;
		}
	}

	@Override
	public void setRsContractDetailsNetSalesFormulaNo(
		String rsContractDetailsNetSalesFormulaNo) {
		_rsContractDetailsNetSalesFormulaNo = rsContractDetailsNetSalesFormulaNo;
	}

	@Override
	public String getRsContractDetailsNetSalesFormulaName() {
		if (_rsContractDetailsNetSalesFormulaName == null) {
			return StringPool.BLANK;
		}
		else {
			return _rsContractDetailsNetSalesFormulaName;
		}
	}

	@Override
	public void setRsContractDetailsNetSalesFormulaName(
		String rsContractDetailsNetSalesFormulaName) {
		_rsContractDetailsNetSalesFormulaName = rsContractDetailsNetSalesFormulaName;
	}

	@Override
	public int getFormulaType() {
		return _formulaType;
	}

	@Override
	public void setFormulaType(int formulaType) {
		_formulaType = formulaType;
	}

	@Override
	public int getNetSalesRule() {
		return _netSalesRule;
	}

	@Override
	public void setNetSalesRule(int netSalesRule) {
		_netSalesRule = netSalesRule;
	}

	@Override
	public int getEvaluationRule() {
		return _evaluationRule;
	}

	@Override
	public void setEvaluationRule(int evaluationRule) {
		_evaluationRule = evaluationRule;
	}

	@Override
	public String getEvaluationRuleBundle() {
		return _evaluationRuleBundle;
	}

	@Override
	public void setEvaluationRuleBundle(String evaluationRuleBundle) {
		_evaluationRuleBundle = evaluationRuleBundle;
	}

	@Override
	public int getCalculationRule() {
		return _calculationRule;
	}

	@Override
	public void setCalculationRule(int calculationRule) {
		_calculationRule = calculationRule;
	}

	@Override
	public String getCalculationRuleBundle() {
		return _calculationRuleBundle;
	}

	@Override
	public void setCalculationRuleBundle(String calculationRuleBundle) {
		_calculationRuleBundle = calculationRuleBundle;
	}

	@Override
	public double getMaxIncrementalChange() {
		return _maxIncrementalChange;
	}

	@Override
	public void setMaxIncrementalChange(double maxIncrementalChange) {
		_maxIncrementalChange = maxIncrementalChange;
	}

	@Override
	public int getResetEligible() {
		return _resetEligible;
	}

	@Override
	public void setResetEligible(int resetEligible) {
		_resetEligible = resetEligible;
	}

	@Override
	public int getResetType() {
		return _resetType;
	}

	@Override
	public void setResetType(int resetType) {
		_resetType = resetType;
	}

	@Override
	public Date getResetDate() {
		return _resetDate;
	}

	@Override
	public void setResetDate(Date resetDate) {
		_resetDate = resetDate;
	}

	@Override
	public int getResetInterval() {
		return _resetInterval;
	}

	@Override
	public void setResetInterval(int resetInterval) {
		_resetInterval = resetInterval;
	}

	@Override
	public int getResetFrequency() {
		return _resetFrequency;
	}

	@Override
	public void setResetFrequency(int resetFrequency) {
		_resetFrequency = resetFrequency;
	}

	@Override
	public int getNetPriceType() {
		return _netPriceType;
	}

	@Override
	public void setNetPriceType(int netPriceType) {
		_netPriceType = netPriceType;
	}

	@Override
	public String getNetPriceTypeFormula() {
		return _netPriceTypeFormula;
	}

	@Override
	public void setNetPriceTypeFormula(String netPriceTypeFormula) {
		_netPriceTypeFormula = netPriceTypeFormula;
	}

	@Override
	public int getPriceProtectionPriceType() {
		return _priceProtectionPriceType;
	}

	@Override
	public void setPriceProtectionPriceType(int priceProtectionPriceType) {
		_priceProtectionPriceType = priceProtectionPriceType;
	}

	@Override
	public double getNep() {
		return _nep;
	}

	@Override
	public void setNep(double nep) {
		_nep = nep;
	}

	@Override
	public int getNepFormula() {
		return _nepFormula;
	}

	@Override
	public void setNepFormula(int nepFormula) {
		_nepFormula = nepFormula;
	}

	@Override
	public String getBrandMasterSid() {
		if (_brandMasterSid == null) {
			return StringPool.BLANK;
		}
		else {
			return _brandMasterSid;
		}
	}

	@Override
	public void setBrandMasterSid(String brandMasterSid) {
		_brandMasterSid = brandMasterSid;
	}

	@Override
	public int getPriceProtectionStatus() {
		return _priceProtectionStatus;
	}

	@Override
	public void setPriceProtectionStatus(int priceProtectionStatus) {
		_priceProtectionStatus = priceProtectionStatus;
	}

	@Override
	public int getBasePriceType() {
		return _basePriceType;
	}

	@Override
	public void setBasePriceType(int basePriceType) {
		_basePriceType = basePriceType;
	}

	@Override
	public double getBasePriceEntry() {
		return _basePriceEntry;
	}

	@Override
	public void setBasePriceEntry(double basePriceEntry) {
		_basePriceEntry = basePriceEntry;
	}

	@Override
	public Date getBasePriceDate() {
		return _basePriceDate;
	}

	@Override
	public void setBasePriceDate(Date basePriceDate) {
		_basePriceDate = basePriceDate;
	}

	@Override
	public int getBasePriceDdlb() {
		return _basePriceDdlb;
	}

	@Override
	public void setBasePriceDdlb(int basePriceDdlb) {
		_basePriceDdlb = basePriceDdlb;
	}

	@Override
	public int getNetBasePrice() {
		return _netBasePrice;
	}

	@Override
	public void setNetBasePrice(int netBasePrice) {
		_netBasePrice = netBasePrice;
	}

	@Override
	public int getSubsequentPeriodPriceType() {
		return _subsequentPeriodPriceType;
	}

	@Override
	public void setSubsequentPeriodPriceType(int subsequentPeriodPriceType) {
		_subsequentPeriodPriceType = subsequentPeriodPriceType;
	}

	@Override
	public int getResetPriceType() {
		return _resetPriceType;
	}

	@Override
	public void setResetPriceType(int resetPriceType) {
		_resetPriceType = resetPriceType;
	}

	@Override
	public int getNetResetPriceType() {
		return _netResetPriceType;
	}

	@Override
	public void setNetResetPriceType(int netResetPriceType) {
		_netResetPriceType = netResetPriceType;
	}

	@Override
	public int getNetResetPriceFormulaId() {
		return _netResetPriceFormulaId;
	}

	@Override
	public void setNetResetPriceFormulaId(int netResetPriceFormulaId) {
		_netResetPriceFormulaId = netResetPriceFormulaId;
	}

	@Override
	public int getNetBasePriceFormulaId() {
		return _netBasePriceFormulaId;
	}

	@Override
	public void setNetBasePriceFormulaId(int netBasePriceFormulaId) {
		_netBasePriceFormulaId = netBasePriceFormulaId;
	}

	@Override
	public int getNetSubsequentPriceFormulaId() {
		return _netSubsequentPriceFormulaId;
	}

	@Override
	public void setNetSubsequentPriceFormulaId(int netSubsequentPriceFormulaId) {
		_netSubsequentPriceFormulaId = netSubsequentPriceFormulaId;
	}

	@Override
	public int getNetSubsequentPeriodPrice() {
		return _netSubsequentPeriodPrice;
	}

	@Override
	public void setNetSubsequentPeriodPrice(int netSubsequentPeriodPrice) {
		_netSubsequentPeriodPrice = netSubsequentPeriodPrice;
	}

	@Override
	public String getRsContractDetailsRebatePlanName() {
		if (_rsContractDetailsRebatePlanName == null) {
			return StringPool.BLANK;
		}
		else {
			return _rsContractDetailsRebatePlanName;
		}
	}

	@Override
	public void setRsContractDetailsRebatePlanName(
		String rsContractDetailsRebatePlanName) {
		_rsContractDetailsRebatePlanName = rsContractDetailsRebatePlanName;
	}

	@Override
	public String getRsContractDetailsFormulaNo() {
		if (_rsContractDetailsFormulaNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _rsContractDetailsFormulaNo;
		}
	}

	@Override
	public void setRsContractDetailsFormulaNo(String rsContractDetailsFormulaNo) {
		_rsContractDetailsFormulaNo = rsContractDetailsFormulaNo;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public ImtdItemPriceRebateDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ImtdItemPriceRebateDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImtdItemPriceRebateDetailsImpl imtdItemPriceRebateDetailsImpl = new ImtdItemPriceRebateDetailsImpl();

		imtdItemPriceRebateDetailsImpl.setFormulaMethodId(getFormulaMethodId());
		imtdItemPriceRebateDetailsImpl.setEndDate(getEndDate());
		imtdItemPriceRebateDetailsImpl.setPriceProtectionStartDate(getPriceProtectionStartDate());
		imtdItemPriceRebateDetailsImpl.setItemPriceRevisionDate(getItemPriceRevisionDate());
		imtdItemPriceRebateDetailsImpl.setModifiedDate(getModifiedDate());
		imtdItemPriceRebateDetailsImpl.setRsCheckRecord(getRsCheckRecord());
		imtdItemPriceRebateDetailsImpl.setRebateRevisionDate(getRebateRevisionDate());
		imtdItemPriceRebateDetailsImpl.setContractMasterSid(getContractMasterSid());
		imtdItemPriceRebateDetailsImpl.setImtdCreatedDate(getImtdCreatedDate());
		imtdItemPriceRebateDetailsImpl.setModifiedBy(getModifiedBy());
		imtdItemPriceRebateDetailsImpl.setUdc6(getUdc6());
		imtdItemPriceRebateDetailsImpl.setUdc5(getUdc5());
		imtdItemPriceRebateDetailsImpl.setUdc4(getUdc4());
		imtdItemPriceRebateDetailsImpl.setCheckRecord(getCheckRecord());
		imtdItemPriceRebateDetailsImpl.setUdc1(getUdc1());
		imtdItemPriceRebateDetailsImpl.setUdc2(getUdc2());
		imtdItemPriceRebateDetailsImpl.setUdc3(getUdc3());
		imtdItemPriceRebateDetailsImpl.setContractPriceEndDate(getContractPriceEndDate());
		imtdItemPriceRebateDetailsImpl.setTotalVolumeCommitment(getTotalVolumeCommitment());
		imtdItemPriceRebateDetailsImpl.setPriceProtectionEndDate(getPriceProtectionEndDate());
		imtdItemPriceRebateDetailsImpl.setRecordLockStatus(getRecordLockStatus());
		imtdItemPriceRebateDetailsImpl.setStartDate(getStartDate());
		imtdItemPriceRebateDetailsImpl.setRebateProgramType(getRebateProgramType());
		imtdItemPriceRebateDetailsImpl.setSessionId(getSessionId());
		imtdItemPriceRebateDetailsImpl.setItemName(getItemName());
		imtdItemPriceRebateDetailsImpl.setPriceRevision(getPriceRevision());
		imtdItemPriceRebateDetailsImpl.setRsModelSid(getRsModelSid());
		imtdItemPriceRebateDetailsImpl.setPrice(getPrice());
		imtdItemPriceRebateDetailsImpl.setRsAttachedStatus(getRsAttachedStatus());
		imtdItemPriceRebateDetailsImpl.setItemMasterSid(getItemMasterSid());
		imtdItemPriceRebateDetailsImpl.setTotalDollarCommitment(getTotalDollarCommitment());
		imtdItemPriceRebateDetailsImpl.setItemType(getItemType());
		imtdItemPriceRebateDetailsImpl.setTotalMarketShareCommitmnet(getTotalMarketShareCommitmnet());
		imtdItemPriceRebateDetailsImpl.setItemId(getItemId());
		imtdItemPriceRebateDetailsImpl.setBasePrice(getBasePrice());
		imtdItemPriceRebateDetailsImpl.setBundleNo(getBundleNo());
		imtdItemPriceRebateDetailsImpl.setFormulaName(getFormulaName());
		imtdItemPriceRebateDetailsImpl.setPsStatus(getPsStatus());
		imtdItemPriceRebateDetailsImpl.setPriceTolerance(getPriceTolerance());
		imtdItemPriceRebateDetailsImpl.setCreatedDate(getCreatedDate());
		imtdItemPriceRebateDetailsImpl.setCreatedBy(getCreatedBy());
		imtdItemPriceRebateDetailsImpl.setUsersSid(getUsersSid());
		imtdItemPriceRebateDetailsImpl.setPsDetailsSid(getPsDetailsSid());
		imtdItemPriceRebateDetailsImpl.setSuggestedPrice(getSuggestedPrice());
		imtdItemPriceRebateDetailsImpl.setPsModelSid(getPsModelSid());
		imtdItemPriceRebateDetailsImpl.setFormulaId(getFormulaId());
		imtdItemPriceRebateDetailsImpl.setCommitmentPeriod(getCommitmentPeriod());
		imtdItemPriceRebateDetailsImpl.setItemNo(getItemNo());
		imtdItemPriceRebateDetailsImpl.setContractPrice(getContractPrice());
		imtdItemPriceRebateDetailsImpl.setIfpDetailsSid(getIfpDetailsSid());
		imtdItemPriceRebateDetailsImpl.setIfpModelSid(getIfpModelSid());
		imtdItemPriceRebateDetailsImpl.setPriceToleranceType(getPriceToleranceType());
		imtdItemPriceRebateDetailsImpl.setRebateAmount(getRebateAmount());
		imtdItemPriceRebateDetailsImpl.setContractPriceStartDate(getContractPriceStartDate());
		imtdItemPriceRebateDetailsImpl.setRebateScheduleType(getRebateScheduleType());
		imtdItemPriceRebateDetailsImpl.setPriceToleranceFrequency(getPriceToleranceFrequency());
		imtdItemPriceRebateDetailsImpl.setImtdItemPriceRebateSid(getImtdItemPriceRebateSid());
		imtdItemPriceRebateDetailsImpl.setRebatePlanSystemId(getRebatePlanSystemId());
		imtdItemPriceRebateDetailsImpl.setAttachedDate(getAttachedDate());
		imtdItemPriceRebateDetailsImpl.setPricePlanId(getPricePlanId());
		imtdItemPriceRebateDetailsImpl.setItemRebateEndDate(getItemRebateEndDate());
		imtdItemPriceRebateDetailsImpl.setPriceType(getPriceType());
		imtdItemPriceRebateDetailsImpl.setPriceToleranceInterval(getPriceToleranceInterval());
		imtdItemPriceRebateDetailsImpl.setRsAttachedDate(getRsAttachedDate());
		imtdItemPriceRebateDetailsImpl.setItemRebateStartDate(getItemRebateStartDate());
		imtdItemPriceRebateDetailsImpl.setOperation(getOperation());
		imtdItemPriceRebateDetailsImpl.setCfpModelSid(getCfpModelSid());
		imtdItemPriceRebateDetailsImpl.setRsDetailsSid(getRsDetailsSid());
		imtdItemPriceRebateDetailsImpl.setAttachedStatus(getAttachedStatus());
		imtdItemPriceRebateDetailsImpl.setPrimaryUom(getPrimaryUom());
		imtdItemPriceRebateDetailsImpl.setPackageSize(getPackageSize());
		imtdItemPriceRebateDetailsImpl.setDeductionCalendarMasterSid(getDeductionCalendarMasterSid());
		imtdItemPriceRebateDetailsImpl.setRsContractDetailsDeductionCalendarNo(getRsContractDetailsDeductionCalendarNo());
		imtdItemPriceRebateDetailsImpl.setRsContractDetailsDeductionCalendarName(getRsContractDetailsDeductionCalendarName());
		imtdItemPriceRebateDetailsImpl.setNetSalesFormulaMasterSid(getNetSalesFormulaMasterSid());
		imtdItemPriceRebateDetailsImpl.setRsContractDetailsNetSalesFormulaNo(getRsContractDetailsNetSalesFormulaNo());
		imtdItemPriceRebateDetailsImpl.setRsContractDetailsNetSalesFormulaName(getRsContractDetailsNetSalesFormulaName());
		imtdItemPriceRebateDetailsImpl.setFormulaType(getFormulaType());
		imtdItemPriceRebateDetailsImpl.setNetSalesRule(getNetSalesRule());
		imtdItemPriceRebateDetailsImpl.setEvaluationRule(getEvaluationRule());
		imtdItemPriceRebateDetailsImpl.setEvaluationRuleBundle(getEvaluationRuleBundle());
		imtdItemPriceRebateDetailsImpl.setCalculationRule(getCalculationRule());
		imtdItemPriceRebateDetailsImpl.setCalculationRuleBundle(getCalculationRuleBundle());
		imtdItemPriceRebateDetailsImpl.setMaxIncrementalChange(getMaxIncrementalChange());
		imtdItemPriceRebateDetailsImpl.setResetEligible(getResetEligible());
		imtdItemPriceRebateDetailsImpl.setResetType(getResetType());
		imtdItemPriceRebateDetailsImpl.setResetDate(getResetDate());
		imtdItemPriceRebateDetailsImpl.setResetInterval(getResetInterval());
		imtdItemPriceRebateDetailsImpl.setResetFrequency(getResetFrequency());
		imtdItemPriceRebateDetailsImpl.setNetPriceType(getNetPriceType());
		imtdItemPriceRebateDetailsImpl.setNetPriceTypeFormula(getNetPriceTypeFormula());
		imtdItemPriceRebateDetailsImpl.setPriceProtectionPriceType(getPriceProtectionPriceType());
		imtdItemPriceRebateDetailsImpl.setNep(getNep());
		imtdItemPriceRebateDetailsImpl.setNepFormula(getNepFormula());
		imtdItemPriceRebateDetailsImpl.setBrandMasterSid(getBrandMasterSid());
		imtdItemPriceRebateDetailsImpl.setPriceProtectionStatus(getPriceProtectionStatus());
		imtdItemPriceRebateDetailsImpl.setBasePriceType(getBasePriceType());
		imtdItemPriceRebateDetailsImpl.setBasePriceEntry(getBasePriceEntry());
		imtdItemPriceRebateDetailsImpl.setBasePriceDate(getBasePriceDate());
		imtdItemPriceRebateDetailsImpl.setBasePriceDdlb(getBasePriceDdlb());
		imtdItemPriceRebateDetailsImpl.setNetBasePrice(getNetBasePrice());
		imtdItemPriceRebateDetailsImpl.setSubsequentPeriodPriceType(getSubsequentPeriodPriceType());
		imtdItemPriceRebateDetailsImpl.setResetPriceType(getResetPriceType());
		imtdItemPriceRebateDetailsImpl.setNetResetPriceType(getNetResetPriceType());
		imtdItemPriceRebateDetailsImpl.setNetResetPriceFormulaId(getNetResetPriceFormulaId());
		imtdItemPriceRebateDetailsImpl.setNetBasePriceFormulaId(getNetBasePriceFormulaId());
		imtdItemPriceRebateDetailsImpl.setNetSubsequentPriceFormulaId(getNetSubsequentPriceFormulaId());
		imtdItemPriceRebateDetailsImpl.setNetSubsequentPeriodPrice(getNetSubsequentPeriodPrice());
		imtdItemPriceRebateDetailsImpl.setRsContractDetailsRebatePlanName(getRsContractDetailsRebatePlanName());
		imtdItemPriceRebateDetailsImpl.setRsContractDetailsFormulaNo(getRsContractDetailsFormulaNo());
		imtdItemPriceRebateDetailsImpl.setSource(getSource());

		imtdItemPriceRebateDetailsImpl.resetOriginalValues();

		return imtdItemPriceRebateDetailsImpl;
	}

	@Override
	public int compareTo(ImtdItemPriceRebateDetails imtdItemPriceRebateDetails) {
		int primaryKey = imtdItemPriceRebateDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ImtdItemPriceRebateDetails)) {
			return false;
		}

		ImtdItemPriceRebateDetails imtdItemPriceRebateDetails = (ImtdItemPriceRebateDetails)obj;

		int primaryKey = imtdItemPriceRebateDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ImtdItemPriceRebateDetails> toCacheModel() {
		ImtdItemPriceRebateDetailsCacheModel imtdItemPriceRebateDetailsCacheModel =
			new ImtdItemPriceRebateDetailsCacheModel();

		imtdItemPriceRebateDetailsCacheModel.formulaMethodId = getFormulaMethodId();

		String formulaMethodId = imtdItemPriceRebateDetailsCacheModel.formulaMethodId;

		if ((formulaMethodId != null) && (formulaMethodId.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.formulaMethodId = null;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			imtdItemPriceRebateDetailsCacheModel.endDate = endDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.endDate = Long.MIN_VALUE;
		}

		Date priceProtectionStartDate = getPriceProtectionStartDate();

		if (priceProtectionStartDate != null) {
			imtdItemPriceRebateDetailsCacheModel.priceProtectionStartDate = priceProtectionStartDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.priceProtectionStartDate = Long.MIN_VALUE;
		}

		Date itemPriceRevisionDate = getItemPriceRevisionDate();

		if (itemPriceRevisionDate != null) {
			imtdItemPriceRebateDetailsCacheModel.itemPriceRevisionDate = itemPriceRevisionDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.itemPriceRevisionDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			imtdItemPriceRebateDetailsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		imtdItemPriceRebateDetailsCacheModel.rsCheckRecord = getRsCheckRecord();

		Date rebateRevisionDate = getRebateRevisionDate();

		if (rebateRevisionDate != null) {
			imtdItemPriceRebateDetailsCacheModel.rebateRevisionDate = rebateRevisionDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.rebateRevisionDate = Long.MIN_VALUE;
		}

		imtdItemPriceRebateDetailsCacheModel.contractMasterSid = getContractMasterSid();

		Date imtdCreatedDate = getImtdCreatedDate();

		if (imtdCreatedDate != null) {
			imtdItemPriceRebateDetailsCacheModel.imtdCreatedDate = imtdCreatedDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.imtdCreatedDate = Long.MIN_VALUE;
		}

		imtdItemPriceRebateDetailsCacheModel.modifiedBy = getModifiedBy();

		imtdItemPriceRebateDetailsCacheModel.udc6 = getUdc6();

		imtdItemPriceRebateDetailsCacheModel.udc5 = getUdc5();

		imtdItemPriceRebateDetailsCacheModel.udc4 = getUdc4();

		imtdItemPriceRebateDetailsCacheModel.checkRecord = getCheckRecord();

		imtdItemPriceRebateDetailsCacheModel.udc1 = getUdc1();

		imtdItemPriceRebateDetailsCacheModel.udc2 = getUdc2();

		imtdItemPriceRebateDetailsCacheModel.udc3 = getUdc3();

		Date contractPriceEndDate = getContractPriceEndDate();

		if (contractPriceEndDate != null) {
			imtdItemPriceRebateDetailsCacheModel.contractPriceEndDate = contractPriceEndDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.contractPriceEndDate = Long.MIN_VALUE;
		}

		imtdItemPriceRebateDetailsCacheModel.totalVolumeCommitment = getTotalVolumeCommitment();

		Date priceProtectionEndDate = getPriceProtectionEndDate();

		if (priceProtectionEndDate != null) {
			imtdItemPriceRebateDetailsCacheModel.priceProtectionEndDate = priceProtectionEndDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.priceProtectionEndDate = Long.MIN_VALUE;
		}

		imtdItemPriceRebateDetailsCacheModel.recordLockStatus = getRecordLockStatus();

		String recordLockStatus = imtdItemPriceRebateDetailsCacheModel.recordLockStatus;

		if ((recordLockStatus != null) && (recordLockStatus.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.recordLockStatus = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			imtdItemPriceRebateDetailsCacheModel.startDate = startDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.startDate = Long.MIN_VALUE;
		}

		imtdItemPriceRebateDetailsCacheModel.rebateProgramType = getRebateProgramType();

		imtdItemPriceRebateDetailsCacheModel.sessionId = getSessionId();

		String sessionId = imtdItemPriceRebateDetailsCacheModel.sessionId;

		if ((sessionId != null) && (sessionId.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.sessionId = null;
		}

		imtdItemPriceRebateDetailsCacheModel.itemName = getItemName();

		String itemName = imtdItemPriceRebateDetailsCacheModel.itemName;

		if ((itemName != null) && (itemName.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.itemName = null;
		}

		imtdItemPriceRebateDetailsCacheModel.priceRevision = getPriceRevision();

		imtdItemPriceRebateDetailsCacheModel.rsModelSid = getRsModelSid();

		imtdItemPriceRebateDetailsCacheModel.price = getPrice();

		imtdItemPriceRebateDetailsCacheModel.rsAttachedStatus = getRsAttachedStatus();

		imtdItemPriceRebateDetailsCacheModel.itemMasterSid = getItemMasterSid();

		imtdItemPriceRebateDetailsCacheModel.totalDollarCommitment = getTotalDollarCommitment();

		imtdItemPriceRebateDetailsCacheModel.itemType = getItemType();

		imtdItemPriceRebateDetailsCacheModel.totalMarketShareCommitmnet = getTotalMarketShareCommitmnet();

		imtdItemPriceRebateDetailsCacheModel.itemId = getItemId();

		String itemId = imtdItemPriceRebateDetailsCacheModel.itemId;

		if ((itemId != null) && (itemId.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.itemId = null;
		}

		imtdItemPriceRebateDetailsCacheModel.basePrice = getBasePrice();

		imtdItemPriceRebateDetailsCacheModel.bundleNo = getBundleNo();

		String bundleNo = imtdItemPriceRebateDetailsCacheModel.bundleNo;

		if ((bundleNo != null) && (bundleNo.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.bundleNo = null;
		}

		imtdItemPriceRebateDetailsCacheModel.formulaName = getFormulaName();

		String formulaName = imtdItemPriceRebateDetailsCacheModel.formulaName;

		if ((formulaName != null) && (formulaName.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.formulaName = null;
		}

		imtdItemPriceRebateDetailsCacheModel.psStatus = getPsStatus();

		imtdItemPriceRebateDetailsCacheModel.priceTolerance = getPriceTolerance();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			imtdItemPriceRebateDetailsCacheModel.createdDate = createdDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.createdDate = Long.MIN_VALUE;
		}

		imtdItemPriceRebateDetailsCacheModel.createdBy = getCreatedBy();

		imtdItemPriceRebateDetailsCacheModel.usersSid = getUsersSid();

		imtdItemPriceRebateDetailsCacheModel.psDetailsSid = getPsDetailsSid();

		imtdItemPriceRebateDetailsCacheModel.suggestedPrice = getSuggestedPrice();

		imtdItemPriceRebateDetailsCacheModel.psModelSid = getPsModelSid();

		imtdItemPriceRebateDetailsCacheModel.formulaId = getFormulaId();

		String formulaId = imtdItemPriceRebateDetailsCacheModel.formulaId;

		if ((formulaId != null) && (formulaId.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.formulaId = null;
		}

		imtdItemPriceRebateDetailsCacheModel.commitmentPeriod = getCommitmentPeriod();

		String commitmentPeriod = imtdItemPriceRebateDetailsCacheModel.commitmentPeriod;

		if ((commitmentPeriod != null) && (commitmentPeriod.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.commitmentPeriod = null;
		}

		imtdItemPriceRebateDetailsCacheModel.itemNo = getItemNo();

		String itemNo = imtdItemPriceRebateDetailsCacheModel.itemNo;

		if ((itemNo != null) && (itemNo.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.itemNo = null;
		}

		imtdItemPriceRebateDetailsCacheModel.contractPrice = getContractPrice();

		imtdItemPriceRebateDetailsCacheModel.ifpDetailsSid = getIfpDetailsSid();

		imtdItemPriceRebateDetailsCacheModel.ifpModelSid = getIfpModelSid();

		imtdItemPriceRebateDetailsCacheModel.priceToleranceType = getPriceToleranceType();

		String priceToleranceType = imtdItemPriceRebateDetailsCacheModel.priceToleranceType;

		if ((priceToleranceType != null) && (priceToleranceType.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.priceToleranceType = null;
		}

		imtdItemPriceRebateDetailsCacheModel.rebateAmount = getRebateAmount();

		Date contractPriceStartDate = getContractPriceStartDate();

		if (contractPriceStartDate != null) {
			imtdItemPriceRebateDetailsCacheModel.contractPriceStartDate = contractPriceStartDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.contractPriceStartDate = Long.MIN_VALUE;
		}

		imtdItemPriceRebateDetailsCacheModel.rebateScheduleType = getRebateScheduleType();

		String rebateScheduleType = imtdItemPriceRebateDetailsCacheModel.rebateScheduleType;

		if ((rebateScheduleType != null) && (rebateScheduleType.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.rebateScheduleType = null;
		}

		imtdItemPriceRebateDetailsCacheModel.priceToleranceFrequency = getPriceToleranceFrequency();

		String priceToleranceFrequency = imtdItemPriceRebateDetailsCacheModel.priceToleranceFrequency;

		if ((priceToleranceFrequency != null) &&
				(priceToleranceFrequency.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.priceToleranceFrequency = null;
		}

		imtdItemPriceRebateDetailsCacheModel.imtdItemPriceRebateSid = getImtdItemPriceRebateSid();

		imtdItemPriceRebateDetailsCacheModel.rebatePlanSystemId = getRebatePlanSystemId();

		String rebatePlanSystemId = imtdItemPriceRebateDetailsCacheModel.rebatePlanSystemId;

		if ((rebatePlanSystemId != null) && (rebatePlanSystemId.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.rebatePlanSystemId = null;
		}

		Date attachedDate = getAttachedDate();

		if (attachedDate != null) {
			imtdItemPriceRebateDetailsCacheModel.attachedDate = attachedDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.attachedDate = Long.MIN_VALUE;
		}

		imtdItemPriceRebateDetailsCacheModel.pricePlanId = getPricePlanId();

		String pricePlanId = imtdItemPriceRebateDetailsCacheModel.pricePlanId;

		if ((pricePlanId != null) && (pricePlanId.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.pricePlanId = null;
		}

		Date itemRebateEndDate = getItemRebateEndDate();

		if (itemRebateEndDate != null) {
			imtdItemPriceRebateDetailsCacheModel.itemRebateEndDate = itemRebateEndDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.itemRebateEndDate = Long.MIN_VALUE;
		}

		imtdItemPriceRebateDetailsCacheModel.priceType = getPriceType();

		imtdItemPriceRebateDetailsCacheModel.priceToleranceInterval = getPriceToleranceInterval();

		Date rsAttachedDate = getRsAttachedDate();

		if (rsAttachedDate != null) {
			imtdItemPriceRebateDetailsCacheModel.rsAttachedDate = rsAttachedDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.rsAttachedDate = Long.MIN_VALUE;
		}

		Date itemRebateStartDate = getItemRebateStartDate();

		if (itemRebateStartDate != null) {
			imtdItemPriceRebateDetailsCacheModel.itemRebateStartDate = itemRebateStartDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.itemRebateStartDate = Long.MIN_VALUE;
		}

		imtdItemPriceRebateDetailsCacheModel.operation = getOperation();

		String operation = imtdItemPriceRebateDetailsCacheModel.operation;

		if ((operation != null) && (operation.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.operation = null;
		}

		imtdItemPriceRebateDetailsCacheModel.cfpModelSid = getCfpModelSid();

		imtdItemPriceRebateDetailsCacheModel.rsDetailsSid = getRsDetailsSid();

		imtdItemPriceRebateDetailsCacheModel.attachedStatus = getAttachedStatus();

		imtdItemPriceRebateDetailsCacheModel.primaryUom = getPrimaryUom();

		imtdItemPriceRebateDetailsCacheModel.packageSize = getPackageSize();

		String packageSize = imtdItemPriceRebateDetailsCacheModel.packageSize;

		if ((packageSize != null) && (packageSize.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.packageSize = null;
		}

		imtdItemPriceRebateDetailsCacheModel.deductionCalendarMasterSid = getDeductionCalendarMasterSid();

		String deductionCalendarMasterSid = imtdItemPriceRebateDetailsCacheModel.deductionCalendarMasterSid;

		if ((deductionCalendarMasterSid != null) &&
				(deductionCalendarMasterSid.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.deductionCalendarMasterSid = null;
		}

		imtdItemPriceRebateDetailsCacheModel.rsContractDetailsDeductionCalendarNo = getRsContractDetailsDeductionCalendarNo();

		String rsContractDetailsDeductionCalendarNo = imtdItemPriceRebateDetailsCacheModel.rsContractDetailsDeductionCalendarNo;

		if ((rsContractDetailsDeductionCalendarNo != null) &&
				(rsContractDetailsDeductionCalendarNo.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.rsContractDetailsDeductionCalendarNo = null;
		}

		imtdItemPriceRebateDetailsCacheModel.rsContractDetailsDeductionCalendarName = getRsContractDetailsDeductionCalendarName();

		String rsContractDetailsDeductionCalendarName = imtdItemPriceRebateDetailsCacheModel.rsContractDetailsDeductionCalendarName;

		if ((rsContractDetailsDeductionCalendarName != null) &&
				(rsContractDetailsDeductionCalendarName.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.rsContractDetailsDeductionCalendarName = null;
		}

		imtdItemPriceRebateDetailsCacheModel.netSalesFormulaMasterSid = getNetSalesFormulaMasterSid();

		String netSalesFormulaMasterSid = imtdItemPriceRebateDetailsCacheModel.netSalesFormulaMasterSid;

		if ((netSalesFormulaMasterSid != null) &&
				(netSalesFormulaMasterSid.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.netSalesFormulaMasterSid = null;
		}

		imtdItemPriceRebateDetailsCacheModel.rsContractDetailsNetSalesFormulaNo = getRsContractDetailsNetSalesFormulaNo();

		String rsContractDetailsNetSalesFormulaNo = imtdItemPriceRebateDetailsCacheModel.rsContractDetailsNetSalesFormulaNo;

		if ((rsContractDetailsNetSalesFormulaNo != null) &&
				(rsContractDetailsNetSalesFormulaNo.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.rsContractDetailsNetSalesFormulaNo = null;
		}

		imtdItemPriceRebateDetailsCacheModel.rsContractDetailsNetSalesFormulaName = getRsContractDetailsNetSalesFormulaName();

		String rsContractDetailsNetSalesFormulaName = imtdItemPriceRebateDetailsCacheModel.rsContractDetailsNetSalesFormulaName;

		if ((rsContractDetailsNetSalesFormulaName != null) &&
				(rsContractDetailsNetSalesFormulaName.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.rsContractDetailsNetSalesFormulaName = null;
		}

		imtdItemPriceRebateDetailsCacheModel.formulaType = getFormulaType();

		imtdItemPriceRebateDetailsCacheModel.netSalesRule = getNetSalesRule();

		imtdItemPriceRebateDetailsCacheModel.evaluationRule = getEvaluationRule();

		imtdItemPriceRebateDetailsCacheModel.evaluationRuleBundle = getEvaluationRuleBundle();

		String evaluationRuleBundle = imtdItemPriceRebateDetailsCacheModel.evaluationRuleBundle;

		if ((evaluationRuleBundle != null) &&
				(evaluationRuleBundle.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.evaluationRuleBundle = null;
		}

		imtdItemPriceRebateDetailsCacheModel.calculationRule = getCalculationRule();

		imtdItemPriceRebateDetailsCacheModel.calculationRuleBundle = getCalculationRuleBundle();

		String calculationRuleBundle = imtdItemPriceRebateDetailsCacheModel.calculationRuleBundle;

		if ((calculationRuleBundle != null) &&
				(calculationRuleBundle.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.calculationRuleBundle = null;
		}

		imtdItemPriceRebateDetailsCacheModel.maxIncrementalChange = getMaxIncrementalChange();

		imtdItemPriceRebateDetailsCacheModel.resetEligible = getResetEligible();

		imtdItemPriceRebateDetailsCacheModel.resetType = getResetType();

		Date resetDate = getResetDate();

		if (resetDate != null) {
			imtdItemPriceRebateDetailsCacheModel.resetDate = resetDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.resetDate = Long.MIN_VALUE;
		}

		imtdItemPriceRebateDetailsCacheModel.resetInterval = getResetInterval();

		imtdItemPriceRebateDetailsCacheModel.resetFrequency = getResetFrequency();

		imtdItemPriceRebateDetailsCacheModel.netPriceType = getNetPriceType();

		imtdItemPriceRebateDetailsCacheModel.netPriceTypeFormula = getNetPriceTypeFormula();

		String netPriceTypeFormula = imtdItemPriceRebateDetailsCacheModel.netPriceTypeFormula;

		if ((netPriceTypeFormula != null) &&
				(netPriceTypeFormula.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.netPriceTypeFormula = null;
		}

		imtdItemPriceRebateDetailsCacheModel.priceProtectionPriceType = getPriceProtectionPriceType();

		imtdItemPriceRebateDetailsCacheModel.nep = getNep();

		imtdItemPriceRebateDetailsCacheModel.nepFormula = getNepFormula();

		imtdItemPriceRebateDetailsCacheModel.brandMasterSid = getBrandMasterSid();

		String brandMasterSid = imtdItemPriceRebateDetailsCacheModel.brandMasterSid;

		if ((brandMasterSid != null) && (brandMasterSid.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.brandMasterSid = null;
		}

		imtdItemPriceRebateDetailsCacheModel.priceProtectionStatus = getPriceProtectionStatus();

		imtdItemPriceRebateDetailsCacheModel.basePriceType = getBasePriceType();

		imtdItemPriceRebateDetailsCacheModel.basePriceEntry = getBasePriceEntry();

		Date basePriceDate = getBasePriceDate();

		if (basePriceDate != null) {
			imtdItemPriceRebateDetailsCacheModel.basePriceDate = basePriceDate.getTime();
		}
		else {
			imtdItemPriceRebateDetailsCacheModel.basePriceDate = Long.MIN_VALUE;
		}

		imtdItemPriceRebateDetailsCacheModel.basePriceDdlb = getBasePriceDdlb();

		imtdItemPriceRebateDetailsCacheModel.netBasePrice = getNetBasePrice();

		imtdItemPriceRebateDetailsCacheModel.subsequentPeriodPriceType = getSubsequentPeriodPriceType();

		imtdItemPriceRebateDetailsCacheModel.resetPriceType = getResetPriceType();

		imtdItemPriceRebateDetailsCacheModel.netResetPriceType = getNetResetPriceType();

		imtdItemPriceRebateDetailsCacheModel.netResetPriceFormulaId = getNetResetPriceFormulaId();

		imtdItemPriceRebateDetailsCacheModel.netBasePriceFormulaId = getNetBasePriceFormulaId();

		imtdItemPriceRebateDetailsCacheModel.netSubsequentPriceFormulaId = getNetSubsequentPriceFormulaId();

		imtdItemPriceRebateDetailsCacheModel.netSubsequentPeriodPrice = getNetSubsequentPeriodPrice();

		imtdItemPriceRebateDetailsCacheModel.rsContractDetailsRebatePlanName = getRsContractDetailsRebatePlanName();

		String rsContractDetailsRebatePlanName = imtdItemPriceRebateDetailsCacheModel.rsContractDetailsRebatePlanName;

		if ((rsContractDetailsRebatePlanName != null) &&
				(rsContractDetailsRebatePlanName.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.rsContractDetailsRebatePlanName = null;
		}

		imtdItemPriceRebateDetailsCacheModel.rsContractDetailsFormulaNo = getRsContractDetailsFormulaNo();

		String rsContractDetailsFormulaNo = imtdItemPriceRebateDetailsCacheModel.rsContractDetailsFormulaNo;

		if ((rsContractDetailsFormulaNo != null) &&
				(rsContractDetailsFormulaNo.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.rsContractDetailsFormulaNo = null;
		}

		imtdItemPriceRebateDetailsCacheModel.source = getSource();

		String source = imtdItemPriceRebateDetailsCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			imtdItemPriceRebateDetailsCacheModel.source = null;
		}

		return imtdItemPriceRebateDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(223);

		sb.append("{formulaMethodId=");
		sb.append(getFormulaMethodId());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", priceProtectionStartDate=");
		sb.append(getPriceProtectionStartDate());
		sb.append(", itemPriceRevisionDate=");
		sb.append(getItemPriceRevisionDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", rsCheckRecord=");
		sb.append(getRsCheckRecord());
		sb.append(", rebateRevisionDate=");
		sb.append(getRebateRevisionDate());
		sb.append(", contractMasterSid=");
		sb.append(getContractMasterSid());
		sb.append(", imtdCreatedDate=");
		sb.append(getImtdCreatedDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", udc6=");
		sb.append(getUdc6());
		sb.append(", udc5=");
		sb.append(getUdc5());
		sb.append(", udc4=");
		sb.append(getUdc4());
		sb.append(", checkRecord=");
		sb.append(getCheckRecord());
		sb.append(", udc1=");
		sb.append(getUdc1());
		sb.append(", udc2=");
		sb.append(getUdc2());
		sb.append(", udc3=");
		sb.append(getUdc3());
		sb.append(", contractPriceEndDate=");
		sb.append(getContractPriceEndDate());
		sb.append(", totalVolumeCommitment=");
		sb.append(getTotalVolumeCommitment());
		sb.append(", priceProtectionEndDate=");
		sb.append(getPriceProtectionEndDate());
		sb.append(", recordLockStatus=");
		sb.append(getRecordLockStatus());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", rebateProgramType=");
		sb.append(getRebateProgramType());
		sb.append(", sessionId=");
		sb.append(getSessionId());
		sb.append(", itemName=");
		sb.append(getItemName());
		sb.append(", priceRevision=");
		sb.append(getPriceRevision());
		sb.append(", rsModelSid=");
		sb.append(getRsModelSid());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", rsAttachedStatus=");
		sb.append(getRsAttachedStatus());
		sb.append(", itemMasterSid=");
		sb.append(getItemMasterSid());
		sb.append(", totalDollarCommitment=");
		sb.append(getTotalDollarCommitment());
		sb.append(", itemType=");
		sb.append(getItemType());
		sb.append(", totalMarketShareCommitmnet=");
		sb.append(getTotalMarketShareCommitmnet());
		sb.append(", itemId=");
		sb.append(getItemId());
		sb.append(", basePrice=");
		sb.append(getBasePrice());
		sb.append(", bundleNo=");
		sb.append(getBundleNo());
		sb.append(", formulaName=");
		sb.append(getFormulaName());
		sb.append(", psStatus=");
		sb.append(getPsStatus());
		sb.append(", priceTolerance=");
		sb.append(getPriceTolerance());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", usersSid=");
		sb.append(getUsersSid());
		sb.append(", psDetailsSid=");
		sb.append(getPsDetailsSid());
		sb.append(", suggestedPrice=");
		sb.append(getSuggestedPrice());
		sb.append(", psModelSid=");
		sb.append(getPsModelSid());
		sb.append(", formulaId=");
		sb.append(getFormulaId());
		sb.append(", commitmentPeriod=");
		sb.append(getCommitmentPeriod());
		sb.append(", itemNo=");
		sb.append(getItemNo());
		sb.append(", contractPrice=");
		sb.append(getContractPrice());
		sb.append(", ifpDetailsSid=");
		sb.append(getIfpDetailsSid());
		sb.append(", ifpModelSid=");
		sb.append(getIfpModelSid());
		sb.append(", priceToleranceType=");
		sb.append(getPriceToleranceType());
		sb.append(", rebateAmount=");
		sb.append(getRebateAmount());
		sb.append(", contractPriceStartDate=");
		sb.append(getContractPriceStartDate());
		sb.append(", rebateScheduleType=");
		sb.append(getRebateScheduleType());
		sb.append(", priceToleranceFrequency=");
		sb.append(getPriceToleranceFrequency());
		sb.append(", imtdItemPriceRebateSid=");
		sb.append(getImtdItemPriceRebateSid());
		sb.append(", rebatePlanSystemId=");
		sb.append(getRebatePlanSystemId());
		sb.append(", attachedDate=");
		sb.append(getAttachedDate());
		sb.append(", pricePlanId=");
		sb.append(getPricePlanId());
		sb.append(", itemRebateEndDate=");
		sb.append(getItemRebateEndDate());
		sb.append(", priceType=");
		sb.append(getPriceType());
		sb.append(", priceToleranceInterval=");
		sb.append(getPriceToleranceInterval());
		sb.append(", rsAttachedDate=");
		sb.append(getRsAttachedDate());
		sb.append(", itemRebateStartDate=");
		sb.append(getItemRebateStartDate());
		sb.append(", operation=");
		sb.append(getOperation());
		sb.append(", cfpModelSid=");
		sb.append(getCfpModelSid());
		sb.append(", rsDetailsSid=");
		sb.append(getRsDetailsSid());
		sb.append(", attachedStatus=");
		sb.append(getAttachedStatus());
		sb.append(", primaryUom=");
		sb.append(getPrimaryUom());
		sb.append(", packageSize=");
		sb.append(getPackageSize());
		sb.append(", deductionCalendarMasterSid=");
		sb.append(getDeductionCalendarMasterSid());
		sb.append(", rsContractDetailsDeductionCalendarNo=");
		sb.append(getRsContractDetailsDeductionCalendarNo());
		sb.append(", rsContractDetailsDeductionCalendarName=");
		sb.append(getRsContractDetailsDeductionCalendarName());
		sb.append(", netSalesFormulaMasterSid=");
		sb.append(getNetSalesFormulaMasterSid());
		sb.append(", rsContractDetailsNetSalesFormulaNo=");
		sb.append(getRsContractDetailsNetSalesFormulaNo());
		sb.append(", rsContractDetailsNetSalesFormulaName=");
		sb.append(getRsContractDetailsNetSalesFormulaName());
		sb.append(", formulaType=");
		sb.append(getFormulaType());
		sb.append(", netSalesRule=");
		sb.append(getNetSalesRule());
		sb.append(", evaluationRule=");
		sb.append(getEvaluationRule());
		sb.append(", evaluationRuleBundle=");
		sb.append(getEvaluationRuleBundle());
		sb.append(", calculationRule=");
		sb.append(getCalculationRule());
		sb.append(", calculationRuleBundle=");
		sb.append(getCalculationRuleBundle());
		sb.append(", maxIncrementalChange=");
		sb.append(getMaxIncrementalChange());
		sb.append(", resetEligible=");
		sb.append(getResetEligible());
		sb.append(", resetType=");
		sb.append(getResetType());
		sb.append(", resetDate=");
		sb.append(getResetDate());
		sb.append(", resetInterval=");
		sb.append(getResetInterval());
		sb.append(", resetFrequency=");
		sb.append(getResetFrequency());
		sb.append(", netPriceType=");
		sb.append(getNetPriceType());
		sb.append(", netPriceTypeFormula=");
		sb.append(getNetPriceTypeFormula());
		sb.append(", priceProtectionPriceType=");
		sb.append(getPriceProtectionPriceType());
		sb.append(", nep=");
		sb.append(getNep());
		sb.append(", nepFormula=");
		sb.append(getNepFormula());
		sb.append(", brandMasterSid=");
		sb.append(getBrandMasterSid());
		sb.append(", priceProtectionStatus=");
		sb.append(getPriceProtectionStatus());
		sb.append(", basePriceType=");
		sb.append(getBasePriceType());
		sb.append(", basePriceEntry=");
		sb.append(getBasePriceEntry());
		sb.append(", basePriceDate=");
		sb.append(getBasePriceDate());
		sb.append(", basePriceDdlb=");
		sb.append(getBasePriceDdlb());
		sb.append(", netBasePrice=");
		sb.append(getNetBasePrice());
		sb.append(", subsequentPeriodPriceType=");
		sb.append(getSubsequentPeriodPriceType());
		sb.append(", resetPriceType=");
		sb.append(getResetPriceType());
		sb.append(", netResetPriceType=");
		sb.append(getNetResetPriceType());
		sb.append(", netResetPriceFormulaId=");
		sb.append(getNetResetPriceFormulaId());
		sb.append(", netBasePriceFormulaId=");
		sb.append(getNetBasePriceFormulaId());
		sb.append(", netSubsequentPriceFormulaId=");
		sb.append(getNetSubsequentPriceFormulaId());
		sb.append(", netSubsequentPeriodPrice=");
		sb.append(getNetSubsequentPeriodPrice());
		sb.append(", rsContractDetailsRebatePlanName=");
		sb.append(getRsContractDetailsRebatePlanName());
		sb.append(", rsContractDetailsFormulaNo=");
		sb.append(getRsContractDetailsFormulaNo());
		sb.append(", source=");
		sb.append(getSource());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(337);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.ImtdItemPriceRebateDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>formulaMethodId</column-name><column-value><![CDATA[");
		sb.append(getFormulaMethodId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceProtectionStartDate</column-name><column-value><![CDATA[");
		sb.append(getPriceProtectionStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemPriceRevisionDate</column-name><column-value><![CDATA[");
		sb.append(getItemPriceRevisionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsCheckRecord</column-name><column-value><![CDATA[");
		sb.append(getRsCheckRecord());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rebateRevisionDate</column-name><column-value><![CDATA[");
		sb.append(getRebateRevisionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractMasterSid</column-name><column-value><![CDATA[");
		sb.append(getContractMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imtdCreatedDate</column-name><column-value><![CDATA[");
		sb.append(getImtdCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc6</column-name><column-value><![CDATA[");
		sb.append(getUdc6());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc5</column-name><column-value><![CDATA[");
		sb.append(getUdc5());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc4</column-name><column-value><![CDATA[");
		sb.append(getUdc4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkRecord</column-name><column-value><![CDATA[");
		sb.append(getCheckRecord());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc1</column-name><column-value><![CDATA[");
		sb.append(getUdc1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc2</column-name><column-value><![CDATA[");
		sb.append(getUdc2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udc3</column-name><column-value><![CDATA[");
		sb.append(getUdc3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractPriceEndDate</column-name><column-value><![CDATA[");
		sb.append(getContractPriceEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalVolumeCommitment</column-name><column-value><![CDATA[");
		sb.append(getTotalVolumeCommitment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceProtectionEndDate</column-name><column-value><![CDATA[");
		sb.append(getPriceProtectionEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
		sb.append(getRecordLockStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rebateProgramType</column-name><column-value><![CDATA[");
		sb.append(getRebateProgramType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sessionId</column-name><column-value><![CDATA[");
		sb.append(getSessionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemName</column-name><column-value><![CDATA[");
		sb.append(getItemName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceRevision</column-name><column-value><![CDATA[");
		sb.append(getPriceRevision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsModelSid</column-name><column-value><![CDATA[");
		sb.append(getRsModelSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsAttachedStatus</column-name><column-value><![CDATA[");
		sb.append(getRsAttachedStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
		sb.append(getItemMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalDollarCommitment</column-name><column-value><![CDATA[");
		sb.append(getTotalDollarCommitment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemType</column-name><column-value><![CDATA[");
		sb.append(getItemType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalMarketShareCommitmnet</column-name><column-value><![CDATA[");
		sb.append(getTotalMarketShareCommitmnet());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePrice</column-name><column-value><![CDATA[");
		sb.append(getBasePrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bundleNo</column-name><column-value><![CDATA[");
		sb.append(getBundleNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formulaName</column-name><column-value><![CDATA[");
		sb.append(getFormulaName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>psStatus</column-name><column-value><![CDATA[");
		sb.append(getPsStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceTolerance</column-name><column-value><![CDATA[");
		sb.append(getPriceTolerance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>usersSid</column-name><column-value><![CDATA[");
		sb.append(getUsersSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>psDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getPsDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>suggestedPrice</column-name><column-value><![CDATA[");
		sb.append(getSuggestedPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>psModelSid</column-name><column-value><![CDATA[");
		sb.append(getPsModelSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formulaId</column-name><column-value><![CDATA[");
		sb.append(getFormulaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commitmentPeriod</column-name><column-value><![CDATA[");
		sb.append(getCommitmentPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemNo</column-name><column-value><![CDATA[");
		sb.append(getItemNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractPrice</column-name><column-value><![CDATA[");
		sb.append(getContractPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ifpDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getIfpDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ifpModelSid</column-name><column-value><![CDATA[");
		sb.append(getIfpModelSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceToleranceType</column-name><column-value><![CDATA[");
		sb.append(getPriceToleranceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rebateAmount</column-name><column-value><![CDATA[");
		sb.append(getRebateAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractPriceStartDate</column-name><column-value><![CDATA[");
		sb.append(getContractPriceStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rebateScheduleType</column-name><column-value><![CDATA[");
		sb.append(getRebateScheduleType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceToleranceFrequency</column-name><column-value><![CDATA[");
		sb.append(getPriceToleranceFrequency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imtdItemPriceRebateSid</column-name><column-value><![CDATA[");
		sb.append(getImtdItemPriceRebateSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rebatePlanSystemId</column-name><column-value><![CDATA[");
		sb.append(getRebatePlanSystemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedDate</column-name><column-value><![CDATA[");
		sb.append(getAttachedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pricePlanId</column-name><column-value><![CDATA[");
		sb.append(getPricePlanId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemRebateEndDate</column-name><column-value><![CDATA[");
		sb.append(getItemRebateEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceType</column-name><column-value><![CDATA[");
		sb.append(getPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceToleranceInterval</column-name><column-value><![CDATA[");
		sb.append(getPriceToleranceInterval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsAttachedDate</column-name><column-value><![CDATA[");
		sb.append(getRsAttachedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemRebateStartDate</column-name><column-value><![CDATA[");
		sb.append(getItemRebateStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>operation</column-name><column-value><![CDATA[");
		sb.append(getOperation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cfpModelSid</column-name><column-value><![CDATA[");
		sb.append(getCfpModelSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getRsDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedStatus</column-name><column-value><![CDATA[");
		sb.append(getAttachedStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>primaryUom</column-name><column-value><![CDATA[");
		sb.append(getPrimaryUom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>packageSize</column-name><column-value><![CDATA[");
		sb.append(getPackageSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionCalendarMasterSid</column-name><column-value><![CDATA[");
		sb.append(getDeductionCalendarMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsContractDetailsDeductionCalendarNo</column-name><column-value><![CDATA[");
		sb.append(getRsContractDetailsDeductionCalendarNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsContractDetailsDeductionCalendarName</column-name><column-value><![CDATA[");
		sb.append(getRsContractDetailsDeductionCalendarName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSalesFormulaMasterSid</column-name><column-value><![CDATA[");
		sb.append(getNetSalesFormulaMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsContractDetailsNetSalesFormulaNo</column-name><column-value><![CDATA[");
		sb.append(getRsContractDetailsNetSalesFormulaNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsContractDetailsNetSalesFormulaName</column-name><column-value><![CDATA[");
		sb.append(getRsContractDetailsNetSalesFormulaName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formulaType</column-name><column-value><![CDATA[");
		sb.append(getFormulaType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSalesRule</column-name><column-value><![CDATA[");
		sb.append(getNetSalesRule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evaluationRule</column-name><column-value><![CDATA[");
		sb.append(getEvaluationRule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evaluationRuleBundle</column-name><column-value><![CDATA[");
		sb.append(getEvaluationRuleBundle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calculationRule</column-name><column-value><![CDATA[");
		sb.append(getCalculationRule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calculationRuleBundle</column-name><column-value><![CDATA[");
		sb.append(getCalculationRuleBundle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxIncrementalChange</column-name><column-value><![CDATA[");
		sb.append(getMaxIncrementalChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetEligible</column-name><column-value><![CDATA[");
		sb.append(getResetEligible());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetType</column-name><column-value><![CDATA[");
		sb.append(getResetType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetDate</column-name><column-value><![CDATA[");
		sb.append(getResetDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetInterval</column-name><column-value><![CDATA[");
		sb.append(getResetInterval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetFrequency</column-name><column-value><![CDATA[");
		sb.append(getResetFrequency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netPriceType</column-name><column-value><![CDATA[");
		sb.append(getNetPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netPriceTypeFormula</column-name><column-value><![CDATA[");
		sb.append(getNetPriceTypeFormula());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceProtectionPriceType</column-name><column-value><![CDATA[");
		sb.append(getPriceProtectionPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nep</column-name><column-value><![CDATA[");
		sb.append(getNep());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nepFormula</column-name><column-value><![CDATA[");
		sb.append(getNepFormula());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brandMasterSid</column-name><column-value><![CDATA[");
		sb.append(getBrandMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceProtectionStatus</column-name><column-value><![CDATA[");
		sb.append(getPriceProtectionStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePriceType</column-name><column-value><![CDATA[");
		sb.append(getBasePriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePriceEntry</column-name><column-value><![CDATA[");
		sb.append(getBasePriceEntry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePriceDate</column-name><column-value><![CDATA[");
		sb.append(getBasePriceDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePriceDdlb</column-name><column-value><![CDATA[");
		sb.append(getBasePriceDdlb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netBasePrice</column-name><column-value><![CDATA[");
		sb.append(getNetBasePrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subsequentPeriodPriceType</column-name><column-value><![CDATA[");
		sb.append(getSubsequentPeriodPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resetPriceType</column-name><column-value><![CDATA[");
		sb.append(getResetPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netResetPriceType</column-name><column-value><![CDATA[");
		sb.append(getNetResetPriceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netResetPriceFormulaId</column-name><column-value><![CDATA[");
		sb.append(getNetResetPriceFormulaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netBasePriceFormulaId</column-name><column-value><![CDATA[");
		sb.append(getNetBasePriceFormulaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSubsequentPriceFormulaId</column-name><column-value><![CDATA[");
		sb.append(getNetSubsequentPriceFormulaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSubsequentPeriodPrice</column-name><column-value><![CDATA[");
		sb.append(getNetSubsequentPeriodPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsContractDetailsRebatePlanName</column-name><column-value><![CDATA[");
		sb.append(getRsContractDetailsRebatePlanName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsContractDetailsFormulaNo</column-name><column-value><![CDATA[");
		sb.append(getRsContractDetailsFormulaNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ImtdItemPriceRebateDetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ImtdItemPriceRebateDetails.class
		};
	private String _formulaMethodId;
	private Date _endDate;
	private Date _priceProtectionStartDate;
	private Date _itemPriceRevisionDate;
	private Date _modifiedDate;
	private boolean _rsCheckRecord;
	private Date _rebateRevisionDate;
	private int _contractMasterSid;
	private Date _imtdCreatedDate;
	private int _modifiedBy;
	private int _udc6;
	private int _udc5;
	private int _udc4;
	private boolean _checkRecord;
	private int _udc1;
	private int _udc2;
	private int _udc3;
	private Date _contractPriceEndDate;
	private double _totalVolumeCommitment;
	private Date _priceProtectionEndDate;
	private String _recordLockStatus;
	private Date _startDate;
	private int _rebateProgramType;
	private String _sessionId;
	private String _itemName;
	private double _priceRevision;
	private int _rsModelSid;
	private double _price;
	private int _rsAttachedStatus;
	private int _itemMasterSid;
	private double _totalDollarCommitment;
	private int _itemType;
	private double _totalMarketShareCommitmnet;
	private String _itemId;
	private double _basePrice;
	private String _bundleNo;
	private String _formulaName;
	private int _psStatus;
	private double _priceTolerance;
	private Date _createdDate;
	private int _createdBy;
	private int _usersSid;
	private int _psDetailsSid;
	private double _suggestedPrice;
	private int _psModelSid;
	private String _formulaId;
	private String _commitmentPeriod;
	private String _itemNo;
	private double _contractPrice;
	private int _ifpDetailsSid;
	private int _ifpModelSid;
	private String _priceToleranceType;
	private double _rebateAmount;
	private Date _contractPriceStartDate;
	private String _rebateScheduleType;
	private String _priceToleranceFrequency;
	private int _imtdItemPriceRebateSid;
	private String _rebatePlanSystemId;
	private Date _attachedDate;
	private String _pricePlanId;
	private Date _itemRebateEndDate;
	private int _priceType;
	private int _priceToleranceInterval;
	private Date _rsAttachedDate;
	private Date _itemRebateStartDate;
	private String _operation;
	private int _cfpModelSid;
	private int _rsDetailsSid;
	private int _attachedStatus;
	private int _primaryUom;
	private String _packageSize;
	private String _deductionCalendarMasterSid;
	private String _rsContractDetailsDeductionCalendarNo;
	private String _rsContractDetailsDeductionCalendarName;
	private String _netSalesFormulaMasterSid;
	private String _rsContractDetailsNetSalesFormulaNo;
	private String _rsContractDetailsNetSalesFormulaName;
	private int _formulaType;
	private int _netSalesRule;
	private int _evaluationRule;
	private String _evaluationRuleBundle;
	private int _calculationRule;
	private String _calculationRuleBundle;
	private double _maxIncrementalChange;
	private int _resetEligible;
	private int _resetType;
	private Date _resetDate;
	private int _resetInterval;
	private int _resetFrequency;
	private int _netPriceType;
	private String _netPriceTypeFormula;
	private int _priceProtectionPriceType;
	private double _nep;
	private int _nepFormula;
	private String _brandMasterSid;
	private int _priceProtectionStatus;
	private int _basePriceType;
	private double _basePriceEntry;
	private Date _basePriceDate;
	private int _basePriceDdlb;
	private int _netBasePrice;
	private int _subsequentPeriodPriceType;
	private int _resetPriceType;
	private int _netResetPriceType;
	private int _netResetPriceFormulaId;
	private int _netBasePriceFormulaId;
	private int _netSubsequentPriceFormulaId;
	private int _netSubsequentPeriodPrice;
	private String _rsContractDetailsRebatePlanName;
	private String _rsContractDetailsFormulaNo;
	private String _source;
	private ImtdItemPriceRebateDetails _escapedModel;
}