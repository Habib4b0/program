/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.LotMaster;
import com.stpl.app.model.LotMasterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LotMaster service. Represents a row in the &quot;LOT_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LotMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LotMasterImpl}.
 * </p>
 *
 * @author
 * @see LotMasterImpl
 * @see LotMaster
 * @see LotMasterModel
 * @generated
 */
@ProviderType
public class LotMasterModelImpl extends BaseModelImpl<LotMaster>
	implements LotMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lot master model instance should use the {@link LotMaster} interface instead.
	 */
	public static final String TABLE_NAME = "LOT_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CREATED_BY", Types.INTEGER },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "ITEM_ID", Types.VARCHAR },
			{ "BATCH_ID", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "RECORD_LOCK_STATUS", Types.BOOLEAN },
			{ "LAST_LOT_SOLD_DATE", Types.TIMESTAMP },
			{ "LOT_EXPIRATION_DATE", Types.TIMESTAMP },
			{ "SOURCE", Types.VARCHAR },
			{ "LOT_MASTER_SID", Types.INTEGER },
			{ "LOT_NO", Types.VARCHAR },
			{ "INBOUND_STATUS", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ITEM_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BATCH_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("RECORD_LOCK_STATUS", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("LAST_LOT_SOLD_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("LOT_EXPIRATION_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LOT_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("LOT_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table LOT_MASTER (CREATED_BY INTEGER,MODIFIED_BY INTEGER,CREATED_DATE DATE null,ITEM_ID VARCHAR(75) null,BATCH_ID VARCHAR(75) null,MODIFIED_DATE DATE null,RECORD_LOCK_STATUS BOOLEAN,LAST_LOT_SOLD_DATE DATE null,LOT_EXPIRATION_DATE DATE null,SOURCE VARCHAR(75) null,LOT_MASTER_SID INTEGER not null primary key IDENTITY,LOT_NO VARCHAR(75) null,INBOUND_STATUS VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LOT_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY lotMaster.lotMasterSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LOT_MASTER.LOT_MASTER_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.LotMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.LotMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.stpl.app.model.LotMaster"),
			true);
	public static final long ITEMID_COLUMN_BITMASK = 1L;
	public static final long LASTLOTSOLDDATE_COLUMN_BITMASK = 2L;
	public static final long LOTEXPIRATIONDATE_COLUMN_BITMASK = 4L;
	public static final long LOTNO_COLUMN_BITMASK = 8L;
	public static final long LOTMASTERSID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.LotMaster"));

	public LotMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _lotMasterSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setLotMasterSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lotMasterSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LotMaster.class;
	}

	@Override
	public String getModelClassName() {
		return LotMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("itemId", getItemId());
		attributes.put("batchId", getBatchId());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("recordLockStatus", getRecordLockStatus());
		attributes.put("lastLotSoldDate", getLastLotSoldDate());
		attributes.put("lotExpirationDate", getLotExpirationDate());
		attributes.put("source", getSource());
		attributes.put("lotMasterSid", getLotMasterSid());
		attributes.put("lotNo", getLotNo());
		attributes.put("inboundStatus", getInboundStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String itemId = (String)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		String batchId = (String)attributes.get("batchId");

		if (batchId != null) {
			setBatchId(batchId);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Boolean recordLockStatus = (Boolean)attributes.get("recordLockStatus");

		if (recordLockStatus != null) {
			setRecordLockStatus(recordLockStatus);
		}

		Date lastLotSoldDate = (Date)attributes.get("lastLotSoldDate");

		if (lastLotSoldDate != null) {
			setLastLotSoldDate(lastLotSoldDate);
		}

		Date lotExpirationDate = (Date)attributes.get("lotExpirationDate");

		if (lotExpirationDate != null) {
			setLotExpirationDate(lotExpirationDate);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		Integer lotMasterSid = (Integer)attributes.get("lotMasterSid");

		if (lotMasterSid != null) {
			setLotMasterSid(lotMasterSid);
		}

		String lotNo = (String)attributes.get("lotNo");

		if (lotNo != null) {
			setLotNo(lotNo);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getItemId() {
		if (_itemId == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemId;
		}
	}

	@Override
	public void setItemId(String itemId) {
		_columnBitmask |= ITEMID_COLUMN_BITMASK;

		if (_originalItemId == null) {
			_originalItemId = _itemId;
		}

		_itemId = itemId;
	}

	public String getOriginalItemId() {
		return GetterUtil.getString(_originalItemId);
	}

	@Override
	public String getBatchId() {
		if (_batchId == null) {
			return StringPool.BLANK;
		}
		else {
			return _batchId;
		}
	}

	@Override
	public void setBatchId(String batchId) {
		_batchId = batchId;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public boolean getRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public boolean isRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public void setRecordLockStatus(boolean recordLockStatus) {
		_recordLockStatus = recordLockStatus;
	}

	@Override
	public Date getLastLotSoldDate() {
		return _lastLotSoldDate;
	}

	@Override
	public void setLastLotSoldDate(Date lastLotSoldDate) {
		_columnBitmask |= LASTLOTSOLDDATE_COLUMN_BITMASK;

		if (_originalLastLotSoldDate == null) {
			_originalLastLotSoldDate = _lastLotSoldDate;
		}

		_lastLotSoldDate = lastLotSoldDate;
	}

	public Date getOriginalLastLotSoldDate() {
		return _originalLastLotSoldDate;
	}

	@Override
	public Date getLotExpirationDate() {
		return _lotExpirationDate;
	}

	@Override
	public void setLotExpirationDate(Date lotExpirationDate) {
		_columnBitmask |= LOTEXPIRATIONDATE_COLUMN_BITMASK;

		if (_originalLotExpirationDate == null) {
			_originalLotExpirationDate = _lotExpirationDate;
		}

		_lotExpirationDate = lotExpirationDate;
	}

	public Date getOriginalLotExpirationDate() {
		return _originalLotExpirationDate;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public int getLotMasterSid() {
		return _lotMasterSid;
	}

	@Override
	public void setLotMasterSid(int lotMasterSid) {
		_lotMasterSid = lotMasterSid;
	}

	@Override
	public String getLotNo() {
		if (_lotNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _lotNo;
		}
	}

	@Override
	public void setLotNo(String lotNo) {
		_columnBitmask |= LOTNO_COLUMN_BITMASK;

		if (_originalLotNo == null) {
			_originalLotNo = _lotNo;
		}

		_lotNo = lotNo;
	}

	public String getOriginalLotNo() {
		return GetterUtil.getString(_originalLotNo);
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public LotMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LotMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LotMasterImpl lotMasterImpl = new LotMasterImpl();

		lotMasterImpl.setCreatedBy(getCreatedBy());
		lotMasterImpl.setModifiedBy(getModifiedBy());
		lotMasterImpl.setCreatedDate(getCreatedDate());
		lotMasterImpl.setItemId(getItemId());
		lotMasterImpl.setBatchId(getBatchId());
		lotMasterImpl.setModifiedDate(getModifiedDate());
		lotMasterImpl.setRecordLockStatus(getRecordLockStatus());
		lotMasterImpl.setLastLotSoldDate(getLastLotSoldDate());
		lotMasterImpl.setLotExpirationDate(getLotExpirationDate());
		lotMasterImpl.setSource(getSource());
		lotMasterImpl.setLotMasterSid(getLotMasterSid());
		lotMasterImpl.setLotNo(getLotNo());
		lotMasterImpl.setInboundStatus(getInboundStatus());

		lotMasterImpl.resetOriginalValues();

		return lotMasterImpl;
	}

	@Override
	public int compareTo(LotMaster lotMaster) {
		int primaryKey = lotMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LotMaster)) {
			return false;
		}

		LotMaster lotMaster = (LotMaster)obj;

		int primaryKey = lotMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LotMasterModelImpl lotMasterModelImpl = this;

		lotMasterModelImpl._originalItemId = lotMasterModelImpl._itemId;

		lotMasterModelImpl._originalLastLotSoldDate = lotMasterModelImpl._lastLotSoldDate;

		lotMasterModelImpl._originalLotExpirationDate = lotMasterModelImpl._lotExpirationDate;

		lotMasterModelImpl._originalLotNo = lotMasterModelImpl._lotNo;

		lotMasterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LotMaster> toCacheModel() {
		LotMasterCacheModel lotMasterCacheModel = new LotMasterCacheModel();

		lotMasterCacheModel.createdBy = getCreatedBy();

		lotMasterCacheModel.modifiedBy = getModifiedBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			lotMasterCacheModel.createdDate = createdDate.getTime();
		}
		else {
			lotMasterCacheModel.createdDate = Long.MIN_VALUE;
		}

		lotMasterCacheModel.itemId = getItemId();

		String itemId = lotMasterCacheModel.itemId;

		if ((itemId != null) && (itemId.length() == 0)) {
			lotMasterCacheModel.itemId = null;
		}

		lotMasterCacheModel.batchId = getBatchId();

		String batchId = lotMasterCacheModel.batchId;

		if ((batchId != null) && (batchId.length() == 0)) {
			lotMasterCacheModel.batchId = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			lotMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			lotMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		lotMasterCacheModel.recordLockStatus = getRecordLockStatus();

		Date lastLotSoldDate = getLastLotSoldDate();

		if (lastLotSoldDate != null) {
			lotMasterCacheModel.lastLotSoldDate = lastLotSoldDate.getTime();
		}
		else {
			lotMasterCacheModel.lastLotSoldDate = Long.MIN_VALUE;
		}

		Date lotExpirationDate = getLotExpirationDate();

		if (lotExpirationDate != null) {
			lotMasterCacheModel.lotExpirationDate = lotExpirationDate.getTime();
		}
		else {
			lotMasterCacheModel.lotExpirationDate = Long.MIN_VALUE;
		}

		lotMasterCacheModel.source = getSource();

		String source = lotMasterCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			lotMasterCacheModel.source = null;
		}

		lotMasterCacheModel.lotMasterSid = getLotMasterSid();

		lotMasterCacheModel.lotNo = getLotNo();

		String lotNo = lotMasterCacheModel.lotNo;

		if ((lotNo != null) && (lotNo.length() == 0)) {
			lotMasterCacheModel.lotNo = null;
		}

		lotMasterCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = lotMasterCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			lotMasterCacheModel.inboundStatus = null;
		}

		return lotMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", itemId=");
		sb.append(getItemId());
		sb.append(", batchId=");
		sb.append(getBatchId());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", recordLockStatus=");
		sb.append(getRecordLockStatus());
		sb.append(", lastLotSoldDate=");
		sb.append(getLastLotSoldDate());
		sb.append(", lotExpirationDate=");
		sb.append(getLotExpirationDate());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", lotMasterSid=");
		sb.append(getLotMasterSid());
		sb.append(", lotNo=");
		sb.append(getLotNo());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.LotMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchId</column-name><column-value><![CDATA[");
		sb.append(getBatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
		sb.append(getRecordLockStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastLotSoldDate</column-name><column-value><![CDATA[");
		sb.append(getLastLotSoldDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lotExpirationDate</column-name><column-value><![CDATA[");
		sb.append(getLotExpirationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lotMasterSid</column-name><column-value><![CDATA[");
		sb.append(getLotMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lotNo</column-name><column-value><![CDATA[");
		sb.append(getLotNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LotMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LotMaster.class
		};
	private int _createdBy;
	private int _modifiedBy;
	private Date _createdDate;
	private String _itemId;
	private String _originalItemId;
	private String _batchId;
	private Date _modifiedDate;
	private boolean _recordLockStatus;
	private Date _lastLotSoldDate;
	private Date _originalLastLotSoldDate;
	private Date _lotExpirationDate;
	private Date _originalLotExpirationDate;
	private String _source;
	private int _lotMasterSid;
	private String _lotNo;
	private String _originalLotNo;
	private String _inboundStatus;
	private long _columnBitmask;
	private LotMaster _escapedModel;
}