IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_ACTUAL_MASTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_ACTUAL_MASTER]
        (
           [ACTUAL_INTFID]                  [NUMERIC](38, 0) NOT NULL,
           [ACTUAL_ID]                      [VARCHAR](200) NULL,
           [CONTRACT_ID]                    [VARCHAR](200) NULL,
           [UPLOAD_DATE]                    [VARCHAR](200) NULL,
           [PROVISION_ID]                   [VARCHAR](200) NULL,
           [ACCRUAL_ACTUAL_START_DATE]      [VARCHAR](200) NULL,
           [ACCRUAL_ACTUAL_END_DATE]        [VARCHAR](200) NULL,
           [ITEM_ID]                        [VARCHAR](200) NULL,
           [ITEM_IDENTIFIER_CODE_QUALIFIER] [VARCHAR](200) NULL,
           [ITEM_NO]                        [VARCHAR](200) NULL,
           [SETTLEMENT_METHOD]              [VARCHAR](200) NULL,
           [CASH_PAID_DATE]                 [VARCHAR](200) NULL,
           [AMOUNT]                         [VARCHAR](200) NULL,
           [QUANTITY]                       [VARCHAR](200) NULL,
           [QUANTITY_INCLUSION]             [VARCHAR](200) NULL,
           [SETTLEMENT_NO]                  [VARCHAR](200) NULL,
           [INVOICE_LINE_NUMBER]            [VARCHAR](200) NULL,
           [ACCOUNT_ID]                     [VARCHAR](200) NULL,
           [ACCT_IDENTIFIER_CODE_QUALIFIER] [VARCHAR](200) NULL,
           [ACCOUNT_NO]                     [VARCHAR](200) NULL,
           [ACCOUNT_NAME]                   [VARCHAR](200) NULL,
           [ANALYSIS_CODE]                  [VARCHAR](200) NULL,
           [IS_ACTIVE]                      [VARCHAR](200) NULL,
           [COM_DIV_MKT_BRAND_PROD_KEY]     [VARCHAR](200) NULL,
           [PARENTCOM_DIVMKT_BRAND_PRODKEY] [VARCHAR](200) NULL,
           [PRICE_ADJUSTMENT_NAME]          [VARCHAR](200) NULL,
           [PRICE]                          [VARCHAR](200) NULL,
           [RECORD_SEQUENCE]                [VARCHAR](200) NULL,
           [SENT_OUT]                       [VARCHAR](200) NULL,
           [ACCRUAL_PROCESSED]              [VARCHAR](200) NULL,
           [DIVISION_ID]                    [VARCHAR](200) NULL,
           [MARKET_ID]                      [VARCHAR](200) NULL,
           [BRAND_ID]                       [VARCHAR](200) NULL,
           [SALES_AMOUNT]                   [VARCHAR](200) NULL,
           [ORGANIZATION_KEY]               [VARCHAR](200) NULL,
           [MANDATED_DISCOUNT_AMOUNT]       [VARCHAR](200) NULL,
           [PROVISION_CLAIM_INDICATOR]      [VARCHAR](200) NULL,
           [PROGRAM_STATE_CODE]             [VARCHAR](200) NULL,
           [DISPENSED_DATE]                 [VARCHAR](200) NULL,
           [CLAIM_INDICATOR]                [VARCHAR](200) NULL,
           [CREATED_BY]                     [VARCHAR](200) NULL,
           [CREATED_DATE]                   [DATETIME] NULL,
           [MODIFIED_BY]                    [VARCHAR](200) NULL,
           [MODIFIED_DATE]                  [DATETIME] NULL,
           [BATCH_ID]                       [VARCHAR](200) NULL,
           [SOURCE]                         [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]          [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]             [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]             [DATETIME] NULL,
           [ERROR_CODE]                     [VARCHAR](200) NULL,
           [ERROR_FIELD]                    [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ACTUAL_MASTER'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ACTUAL_MASTER
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ACTUAL_MASTER'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ACTUAL_MASTER
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ACTUAL_MASTER'
                      AND COLUMN_NAME = 'IVLD_ACTUAL_MASTER_SID')
  BEGIN
      ALTER TABLE IVLD_ACTUAL_MASTER
        ADD IVLD_ACTUAL_MASTER_SID INT IDENTITY(1, 1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ACTUAL_MASTER'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ACTUAL_MASTER
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO
IF EXISTS (SELECT 1
           FROM   SYS.STATS
           WHERE  OBJECT_NAME(OBJECT_ID) = 'IVLD_ACTUAL_MASTER'
                  AND NAME = 'SETTLEMENT_METHOD')
  BEGIN
      DROP STATISTICS IVLD_ACTUAL_MASTER.SETTLEMENT_METHOD
  END

GO

IF EXISTS (SELECT 1
           FROM   INFORMATION_SCHEMA.COLUMNS
           WHERE  TABLE_NAME = 'IVLD_ACTUAL_MASTER'
                  AND COLUMN_NAME = 'SETTLEMENT_METHOD')
  BEGIN
      EXEC SP_RENAME
        'IVLD_ACTUAL_MASTER.SETTLEMENT_METHOD',
        'SETTLEMENT_METHOD_NO'
  END

GO

IF EXISTS (SELECT 1
           FROM   SYS.STATS
           WHERE  OBJECT_NAME(OBJECT_ID) = 'IVLD_ACTUAL_MASTER'
                  AND NAME = 'INVOICE_LINE_NUMBER')
  BEGIN
      DROP STATISTICS IVLD_ACTUAL_MASTER.INVOICE_LINE_NUMBER
  END

GO


IF EXISTS (SELECT 1
           FROM   INFORMATION_SCHEMA.COLUMNS
           WHERE  TABLE_NAME = 'IVLD_ACTUAL_MASTER'
                  AND COLUMN_NAME = 'INVOICE_LINE_NUMBER')
  BEGIN
      EXEC SP_RENAME
        'IVLD_ACTUAL_MASTER.INVOICE_LINE_NUMBER',
        'INVOICE_LINE_NO'
  END

GO 

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_ACTUAL_MASTER')
                      AND NAME = 'DF_IVLD_ACTUAL_MASTER_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_ACTUAL_MASTER
        ADD CONSTRAINT DF_IVLD_ACTUAL_MASTER_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_ACTUAL_MASTER'
                     AND NAME = 'PK_IVLD_ACTUAL_MASTER_IVLD_ACTUAL_MASTER_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_ACTUAL_MASTER
        ADD CONSTRAINT PK_IVLD_ACTUAL_MASTER_IVLD_ACTUAL_MASTER_SID PRIMARY KEY(IVLD_ACTUAL_MASTER_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_ACTUAL_MASTER')
                      AND NAME = 'DF_IVLD_ACTUAL_MASTER_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ACTUAL_MASTER]
        ADD CONSTRAINT [DF_IVLD_ACTUAL_MASTER_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
-------------------------cel-633--------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ACTUAL_MASTER'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ACTUAL_MASTER
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ACTUAL_MASTER')
                      AND NAME = 'DF_IVLD_ACTUAL_MASTER_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ACTUAL_MASTER]
        ADD CONSTRAINT [DF_IVLD_ACTUAL_MASTER_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
----------------------------------------------------------

-------------------------cel-633--------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ACTUAL_MASTER'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ACTUAL_MASTER
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ACTUAL_MASTER')
                      AND NAME = 'DF_IVLD_ACTUAL_MASTER_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ACTUAL_MASTER]
        ADD CONSTRAINT [DF_IVLD_ACTUAL_MASTER_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
----------------------------------------------------------

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_ACTUAL_MASTER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_AVERAGE_SHELF_LIFE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_AVERAGE_SHELF_LIFE]
        (
           [AVERAGE_SHELF_LIFE_INTFID] [NUMERIC](38, 0) NOT NULL,
           [ITEM_ID_TYPE]              [VARCHAR](200) NULL,
           [ITEM_ID]                   [VARCHAR](200) NULL,
           [AVG_SHELF_LIFE]            [VARCHAR](200) NULL,
           [CREATED_BY]                [VARCHAR](200) NULL,
           [CREATED_DATE]              [DATETIME] NULL,
           [MODIFIED_BY]               [VARCHAR](200) NULL,
           [MODIFIED_DATE]             [DATETIME] NULL,
           [BATCH_ID]                  [VARCHAR](200) NULL,
           [SOURCE]                    [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]     [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]        [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]        [DATETIME] NULL,
           [ERROR_CODE]                [VARCHAR](200) NULL,
           [ERROR_FIELD]               [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_AVERAGE_SHELF_LIFE'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_AVERAGE_SHELF_LIFE
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_AVERAGE_SHELF_LIFE'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_AVERAGE_SHELF_LIFE
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_AVERAGE_SHELF_LIFE'
                      AND COLUMN_NAME = 'IVLD_AVERAGE_SHELF_LIFE_SID')
  BEGIN
      ALTER TABLE IVLD_AVERAGE_SHELF_LIFE
        ADD IVLD_AVERAGE_SHELF_LIFE_SID INT IDENTITY(1, 1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_AVERAGE_SHELF_LIFE'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_AVERAGE_SHELF_LIFE
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_AVERAGE_SHELF_LIFE')
                      AND NAME = 'DF_IVLD_AVERAGE_SHELF_LIFE_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_AVERAGE_SHELF_LIFE
        ADD CONSTRAINT DF_IVLD_AVERAGE_SHELF_LIFE_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_AVERAGE_SHELF_LIFE'
                     AND NAME = 'PK_IVLD_AVERAGE_SHELF_LIFE_IVLD_AVERAGE_SHELF_LIFE_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_AVERAGE_SHELF_LIFE
        ADD CONSTRAINT PK_IVLD_AVERAGE_SHELF_LIFE_IVLD_AVERAGE_SHELF_LIFE_SID PRIMARY KEY(IVLD_AVERAGE_SHELF_LIFE_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_AVERAGE_SHELF_LIFE')
                      AND NAME = 'DF_IVLD_AVERAGE_SHELF_LIFE_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_AVERAGE_SHELF_LIFE]
        ADD CONSTRAINT [DF_IVLD_AVERAGE_SHELF_LIFE_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
-----------------------------------cel-633--------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_AVERAGE_SHELF_LIFE'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_AVERAGE_SHELF_LIFE
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_AVERAGE_SHELF_LIFE')
                      AND NAME = 'DF_IVLD_AVERAGE_SHELF_LIFE_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_AVERAGE_SHELF_LIFE]
        ADD CONSTRAINT [DF_IVLD_AVERAGE_SHELF_LIFE_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

----------------------------------------------------------------------

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_AVERAGE_SHELF_LIFE'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_BEST_PRICE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_BEST_PRICE]
        (
           [BEST_PRICE_INTFID]     [NUMERIC](38, 0) NOT NULL,
           [ITEM_ID]               [VARCHAR](200) NULL,
           [ITEM_NO]               [VARCHAR](200) NULL,
           [ITEM_DESC]             [VARCHAR](250) NULL,
           [BEGINNING_WAC_PACKAGE] [VARCHAR](200) NULL,
           [SELLING_PRICE]         [VARCHAR](200) NULL,
           [INITIAL_BEST_PRICE]    [VARCHAR](200) NULL,
           [INITIAL_DISCOUNT]      [VARCHAR](200) NULL,
           [CONTRACT_NO]           [VARCHAR](200) NULL,
           [CONTRACT_ID]           [VARCHAR](200) NULL,
           [ACCOUNT_ID]            [VARCHAR](200) NULL,
           [CONTRACT_START_DATE]   [VARCHAR](200) NULL,
           [CONTRACT_END_DATE]     [VARCHAR](200) NULL,
           [PERIOD]                [VARCHAR](200) NULL,
           [CREATED_BY]            [VARCHAR](200) NULL,
           [CREATED_DATE]          [DATETIME] NULL,
           [MODIFIED_BY]           [VARCHAR](200) NULL,
           [MODIFIED_DATE]         [DATETIME] NULL,
           [BATCH_ID]              [VARCHAR](200) NULL,
           [SOURCE]                [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR] [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]    [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]    [DATETIME] NULL,
           [ERROR_CODE]            [VARCHAR](200) NULL,
           [ERROR_FIELD]           [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_BEST_PRICE'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_BEST_PRICE
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_BEST_PRICE'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_BEST_PRICE
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_BEST_PRICE'
                      AND COLUMN_NAME = 'IVLD_BEST_PRICE_SID')
  BEGIN
      ALTER TABLE IVLD_BEST_PRICE
        ADD IVLD_BEST_PRICE_SID INT IDENTITY(1, 1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_BEST_PRICE'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_BEST_PRICE
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_BEST_PRICE')
                      AND NAME = 'DF_IVLD_BEST_PRICE_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_BEST_PRICE
        ADD CONSTRAINT DF_IVLD_BEST_PRICE_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO
---------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_BEST_PRICE'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_BEST_PRICE
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_BEST_PRICE')
                      AND NAME = 'DF_IVLD_BEST_PRICE_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_BEST_PRICE]
        ADD CONSTRAINT [DF_IVLD_BEST_PRICE_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
-----------------------------------------------------------
IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_BEST_PRICE'
                     AND NAME = 'PK_IVLD_BEST_PRICE_IVLD_BEST_PRICE_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_BEST_PRICE
        ADD CONSTRAINT PK_IVLD_BEST_PRICE_IVLD_BEST_PRICE_SID PRIMARY KEY(IVLD_BEST_PRICE_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_BEST_PRICE')
                      AND NAME = 'DF_IVLD_BEST_PRICE_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_BEST_PRICE]
        ADD CONSTRAINT [DF_IVLD_BEST_PRICE_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_BEST_PRICE'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_CFP'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_CFP]
        (
           [CFP_INTFID]                  [NUMERIC](38, 0) NOT NULL,
           [CFP_ID]                      [VARCHAR](200) NULL,
           [CFP_NO]                      [VARCHAR](200) NULL,
           [CFP_NAME]                    [VARCHAR](200) NULL,
           [CFP_TYPE]                    [VARCHAR](200) NULL,
           [CFP_CATEGORY]                [VARCHAR](200) NULL,
           [CFP_DESIGNATION]             [VARCHAR](200) NULL,
           [PARENT_CFP_ID]               [VARCHAR](200) NULL,
           [PARENT_CFP_NAME]             [VARCHAR](200) NULL,
           [CFP_STATUS]                  [VARCHAR](200) NULL,
           [CFP_TRADE_CLASS]             [VARCHAR](200) NULL,
           [CFP_START_DATE]              [VARCHAR](200) NULL,
           [CFP_END_DATE]                [VARCHAR](200) NULL,
           [TRADING_PARTNER_ID]          [VARCHAR](200) NULL,
           [IDENTIFIER_CODE_QUALIFIER]   [VARCHAR](200) NULL,
           [TRADING_PARTNER_NO]          [VARCHAR](200) NULL,
           [TRADING_PARTNER_NAME]        [VARCHAR](200) NULL,
           [TRADING_PARTNER_CONTRACT_NO] [VARCHAR](200) NULL,
           [START_DATE]                  [VARCHAR](200) NULL,
           [END_DATE]                    [VARCHAR](200) NULL,
           [CONTRACT_ID]                 [VARCHAR](200) NULL,
           [ATTACHED_STATUS]             [VARCHAR](200) NULL,
           [ATTACHED_DATE]               [VARCHAR](200) NULL,
           [TRADE_CLASS]                 [VARCHAR](200) NULL,
           [TRADE_CLASS_START_DATE]      [VARCHAR](200) NULL,
           [TRADE_CLASS_END_DATE]        [VARCHAR](200) NULL,
           [INTERNAL_NOTES]              [VARCHAR](1000) NULL,
           [CREATED_BY]                  [VARCHAR](200) NULL,
           [CREATED_DATE]                [DATETIME] NULL,
           [MODIFIED_BY]                 [VARCHAR](200) NULL,
           [MODIFIED_DATE]               [DATETIME] NULL,
           [BATCH_ID]                    [VARCHAR](200) NULL,
           [SOURCE]                      [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]       [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]          [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]          [DATETIME] NULL,
           [ERROR_CODE]                  [VARCHAR](200) NULL,
           [ERROR_FIELD]                 [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CFP'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CFP
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CFP'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CFP
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_CFP')
                      AND NAME = 'DF_IVLD_CFP_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_CFP]
        ADD CONSTRAINT [DF_IVLD_CFP_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CFP'
                      AND COLUMN_NAME = 'IVLD_CFP_SID'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_CFP
        ADD IVLD_CFP_SID INT IDENTITY(1,1) NOT NULL
  END
GO
--P.K for IVLD_CFP
IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_CFP'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'PK_IVLD_CFP_IVLD_CFP_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE [DBO].IVLD_CFP
        ADD CONSTRAINT PK_IVLD_CFP_IVLD_CFP_SID PRIMARY KEY (IVLD_CFP_SID)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CFP'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CFP
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_CFP')
                      AND NAME = 'DF_IVLD_CFP_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].IVLD_CFP
        ADD CONSTRAINT DF_IVLD_CFP_CHECK_RECORD DEFAULT (0) FOR CHECK_RECORD
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CFP'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CFP
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF EXISTS (SELECT 1
               FROM  IVLD_CFP
               WHERE REPROCESSED_FLAG IS NULL)
			   
 BEGIN
     Update IVLD_CFP SET REPROCESSED_FLAG='N' 
	 WHERE REPROCESSED_FLAG IS NULL     
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_CFP')
                      AND NAME = 'DF_IVLD_CFP_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_CFP
        ADD CONSTRAINT DF_IVLD_CFP_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO
-----------------------------------AGN-428----------------------------
 IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_CFP' AND COLUMN_NAME  = 'SALES_INCLUSION' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
     ALTER TABLE IVLD_CFP
        ADD SALES_INCLUSION VARCHAR(200)  NULL
 END
 GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_CFP'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_COMPANY_IDENTIFIER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_COMPANY_IDENTIFIER]
        (
           [COMPANY_IDENTIFIER_INTFID]      [NUMERIC](38, 0) NOT NULL,
           [COMPANY_ID]                     [VARCHAR](200) NULL,
           [COMPANY_NO]                     [VARCHAR](200) NULL,
           [COMPANY_NAME]                   [VARCHAR](200) NULL,
           [IDENTIFIER_CODE_QUALIFIER]      [VARCHAR](200) NULL,
           [IDENTIFIER_CODE_QUALIFIER_NAME] [VARCHAR](200) NULL,
           [COMPANY_IDENTIFIER]             [VARCHAR](200) NULL,
           [IDENTIFIER_STATUS]              [VARCHAR](200) NULL,
           [START_DATE]                     [VARCHAR](200) NULL,
           [END_DATE]                       [VARCHAR](200) NULL,
           [ENTITY_CODE]                    [VARCHAR](200) NULL,
           [CREATED_BY]                     [VARCHAR](200) NULL,
           [CREATED_DATE]                   [DATETIME] NULL,
           [MODIFIED_BY]                    [VARCHAR](200) NULL,
           [MODIFIED_DATE]                  [DATETIME] NULL,
           [BATCH_ID]                       [VARCHAR](200) NULL,
           [SOURCE]                         [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]          [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]             [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]             [DATETIME] NULL,
           [ERROR_CODE]                     [VARCHAR](200) NULL,
           [ERROR_FIELD]                    [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_IDENTIFIER'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_IDENTIFIER
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_IDENTIFIER'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_IDENTIFIER
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_COMPANY_IDENTIFIER')
                      AND NAME = 'DF_IVLD_COMPANY_IDENTIFIER_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_COMPANY_IDENTIFIER]
        ADD CONSTRAINT [DF_IVLD_COMPANY_IDENTIFIER_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
--
--IVLD_COMPANY_IDENTIFIER
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_IDENTIFIER'
                      AND COLUMN_NAME = 'IVLD_COMPANY_IDENTIFIER_SID'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_IDENTIFIER
        ADD IVLD_COMPANY_IDENTIFIER_SID INT IDENTITY(1,1) NOT NULL
  END
GO
--IVLD_COMPANY_IDENTIFIER

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_COMPANY_IDENTIFIER'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'PK_IVLD_COMPANY_IDENTIFIER_IVLD_COMPANY_IDENTIFIER_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE [DBO].IVLD_COMPANY_IDENTIFIER
        ADD CONSTRAINT PK_IVLD_COMPANY_IDENTIFIER_IVLD_COMPANY_IDENTIFIER_SID PRIMARY KEY (IVLD_COMPANY_IDENTIFIER_SID)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_IDENTIFIER'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_IDENTIFIER
        ADD REPROCESSED_FLAG CHAR(1) NULL
  END
GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.DEFAULT_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_COMPANY_IDENTIFIER'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'DF_IVLD_COMPANY_IDENTIFIER_REPROCESSED_FLAG'
                     AND TYPE = 'D')
  BEGIN
      ALTER TABLE [DBO].IVLD_COMPANY_IDENTIFIER
        ADD CONSTRAINT DF_IVLD_COMPANY_IDENTIFIER_REPROCESSED_FLAG DEFAULT 'N' FOR REPROCESSED_FLAG
  END

GO
-------------------------------cel-633--------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_IDENTIFIER'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_IDENTIFIER
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_COMPANY_IDENTIFIER')
                      AND NAME = 'DF_IVLD_COMPANY_IDENTIFIER_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_COMPANY_IDENTIFIER]
        ADD CONSTRAINT [DF_IVLD_COMPANY_IDENTIFIER_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END
GO

-------------------------------cel-633--------------------------

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_COMPANY_IDENTIFIER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_COMPANY_MASTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_COMPANY_MASTER]
        (
           [COMPANY_MASTER_INTFID] [NUMERIC](38, 0) NOT NULL,
           [ORGANIZATION_KEY]      [VARCHAR](200) NULL,
           [COMPANY_ID]            [VARCHAR](200) NULL,
           [COMPANY_NO]            [VARCHAR](200) NULL,
           [COMPANY_NAME]          [VARCHAR](200) NULL,
           [COMPANY_TYPE]          [VARCHAR](200) NULL,
           [COMPANY_STATUS]        [VARCHAR](200) NULL,
           [LIVES]                 [VARCHAR](200) NULL,
           [COMPANY_END_DATE]      [VARCHAR](200) NULL,
           [UDC1]                  [VARCHAR](200) NULL,
           [UDC2]                  [VARCHAR](200) NULL,
           [UDC3]                  [VARCHAR](200) NULL,
           [UDC4]                  [VARCHAR](200) NULL,
           [UDC5]                  [VARCHAR](200) NULL,
           [UDC6]                  [VARCHAR](200) NULL,
           [COMPANY_GROUP]         [VARCHAR](200) NULL,
           [FINANCIAL_SYSTEM]      [VARCHAR](200) NULL,
           [ADDRESS_1]             [VARCHAR](200) NULL,
           [ADDRESS_2]             [VARCHAR](200) NULL,
           [CITY]                  [VARCHAR](200) NULL,
           [STATE]                 [VARCHAR](200) NULL,
           [ZIP_CODE]              [VARCHAR](200) NULL,
           [COUNTRY]               [VARCHAR](200) NULL,
           [REGION_CODE]           [VARCHAR](200) NULL,
           [LAST_UPDATED_DATE]     [VARCHAR](200) NULL,
           [COMPANY_START_DATE]    [VARCHAR](200) NULL,
           [STATUS]                [VARCHAR](200) NULL,
           [COMPANY_CATEGORY]      [VARCHAR](200) NULL,
           [CREATED_BY]            [VARCHAR](200) NULL,
           [CREATED_DATE]          [DATETIME] NULL,
           [MODIFIED_BY]           [VARCHAR](200) NULL,
           [MODIFIED_DATE]         [DATETIME] NULL,
           [BATCH_ID]              [VARCHAR](200) NULL,
           [SOURCE]                [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR] [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]    [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]    [DATETIME] NULL,
           [ERROR_CODE]            [VARCHAR](200) NULL,
           [ERROR_FIELD]           [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_MASTER'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_MASTER
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_MASTER'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_MASTER
        ADD ERROR_FIELD VARCHAR(500)
  END

GO
--IVLD_COMPANY_MASTER_SID
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_MASTER'
                      AND COLUMN_NAME = 'IVLD_COMPANY_MASTER_SID'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_MASTER
        ADD IVLD_COMPANY_MASTER_SID INT IDENTITY(1,1) NOT NULL
  END
GO
--REPROCESSED_FLAG
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_MASTER'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_MASTER
        ADD REPROCESSED_FLAG CHAR(1)
  END
GO 
-----PK
IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_COMPANY_MASTER'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'PK_IVLD_COMPANY_MASTER_IVLD_COMPANY_MASTER_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE [DBO].IVLD_COMPANY_MASTER
        ADD CONSTRAINT PK_IVLD_COMPANY_MASTER_IVLD_COMPANY_MASTER_SID PRIMARY KEY (IVLD_COMPANY_MASTER_SID)
  END

GO

--DF
IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_COMPANY_MASTER')
                      AND NAME = 'DF_IVLD_COMPANY_MASTER_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_COMPANY_MASTER]
        ADD CONSTRAINT [DF_IVLD_COMPANY_MASTER_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
--DF
IF NOT EXISTS(SELECT 1
              FROM   SYS.DEFAULT_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_COMPANY_MASTER'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'DF_IVLD_COMPANY_MASTER_REPROCESSED_FLAG'
                     AND TYPE = 'D')
  BEGIN
      ALTER TABLE [DBO].IVLD_COMPANY_MASTER
        ADD CONSTRAINT DF_IVLD_COMPANY_MASTER_REPROCESSED_FLAG DEFAULT 'N' FOR REPROCESSED_FLAG
  END

GO
------------------------------------cel-633---------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_MASTER'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_MASTER
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_COMPANY_MASTER')
                      AND NAME = 'DF_IVLD_COMPANY_MASTER_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_COMPANY_MASTER]
        ADD CONSTRAINT [DF_IVLD_COMPANY_MASTER_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
----------------------------------------------------------------

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_COMPANY_MASTER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_COMPANY_PARENT'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_COMPANY_PARENT]
        (
           [PARENT_DETAILS_INTFID]   [NUMERIC](38, 0) NOT NULL,
           [COMPANY_ID]              [VARCHAR](200) NULL,
           [PARENT_COMPANY_ID]       [VARCHAR](200) NULL,
           [PARENT_START_DATE]       [VARCHAR](200) NULL,
           [PARENT_END_DATE]         [VARCHAR](200) NULL,
           [PRIOR_PARENT_COMPANY_ID] [VARCHAR](200) NULL,
           [PRIOR_PARENT_START_DATE] [VARCHAR](200) NULL,
           [LAST_UPDATED_DATE]       [VARCHAR](200) NULL,
           [CREATED_BY]              [VARCHAR](200) NULL,
           [CREATED_DATE]            [DATETIME] NULL,
           [MODIFIED_BY]             [VARCHAR](200) NULL,
           [MODIFIED_DATE]           [DATETIME] NULL,
           [BATCH_ID]                [VARCHAR](200) NULL,
           [SOURCE]                  [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]   [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]      [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]      [DATETIME] NULL,
           [ERROR_CODE]              [VARCHAR](200) NULL,
           [ERROR_FIELD]             [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_PARENT'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_PARENT
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_PARENT'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_PARENT
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_COMPANY_PARENT')
                      AND NAME = 'DF_IVLD_COMPANY_PARENT_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_COMPANY_PARENT]
        ADD CONSTRAINT [DF_IVLD_COMPANY_PARENT_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
--IVLD_COMPANY_PARENT
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_PARENT'
                      AND COLUMN_NAME = 'IVLD_COMPANY_PARENT_SID'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_PARENT
        ADD IVLD_COMPANY_PARENT_SID INT IDENTITY(1,1) NOT NULL
  END
GO

--IVLD_COMPANY_PARENT

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_COMPANY_PARENT'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'PK_IVLD_COMPANY_PARENT_IVLD_COMPANY_PARENT_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE [DBO].IVLD_COMPANY_PARENT
        ADD CONSTRAINT PK_IVLD_COMPANY_PARENT_IVLD_COMPANY_PARENT_SID PRIMARY KEY (IVLD_COMPANY_PARENT_SID)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_PARENT'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_PARENT
        ADD REPROCESSED_FLAG CHAR(1) NULL
  END
GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.DEFAULT_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_COMPANY_PARENT'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'DF_IVLD_COMPANY_PARENT_REPROCESSED_FLAG'
                     AND TYPE = 'D')
  BEGIN
      ALTER TABLE [DBO].IVLD_COMPANY_PARENT
        ADD CONSTRAINT DF_IVLD_COMPANY_PARENT_REPROCESSED_FLAG DEFAULT 'N' FOR REPROCESSED_FLAG
  END

GO
-----------------------------------------cel-633---------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_PARENT'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_PARENT
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_COMPANY_PARENT')
                      AND NAME = 'DF_IVLD_COMPANY_PARENT_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_COMPANY_PARENT]
        ADD CONSTRAINT [DF_IVLD_COMPANY_PARENT_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_COMPANY_PARENT'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_COMPANY_TRADE_CLASS'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_COMPANY_TRADE_CLASS]
        (
           [TRADE_CLASS_INTFID]           [NUMERIC](38, 0) NOT NULL,
           [COMPANY_ID]                   [VARCHAR](200) NULL,
           [TRADE_CLASS_START_DATE]       [VARCHAR](200) NULL,
           [TRADE_CLASS_END_DATE]         [VARCHAR](200) NULL,
           [TRADE_CLASS]                  [VARCHAR](200) NULL,
           [PRIOR_TRADE_CLASS]            [VARCHAR](200) NULL,
           [PRIOR_TRADE_CLASS_START_DATE] [VARCHAR](200) NULL,
           [LAST_UPDATED_DATE]            [VARCHAR](200) NULL,
           [CREATED_BY]                   [VARCHAR](200) NULL,
           [CREATED_DATE]                 [DATETIME] NULL,
           [MODIFIED_BY]                  [VARCHAR](200) NULL,
           [MODIFIED_DATE]                [DATETIME] NULL,
           [BATCH_ID]                     [VARCHAR](200) NULL,
           [SOURCE]                       [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]        [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]           [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]           [DATETIME] NULL,
           [ERROR_CODE]                   [VARCHAR](200) NULL,
           [ERROR_FIELD]                  [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_TRADE_CLASS'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_TRADE_CLASS
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_TRADE_CLASS'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_TRADE_CLASS
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_COMPANY_TRADE_CLASS')
                      AND NAME = 'DF_IVLD_COMPANY_TRADE_CLASS_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_COMPANY_TRADE_CLASS]
        ADD CONSTRAINT [DF_IVLD_COMPANY_TRADE_CLASS_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_TRADE_CLASS'
                      AND COLUMN_NAME = 'IVLD_COMPANY_TRADE_CLASS_SID'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_TRADE_CLASS
        ADD IVLD_COMPANY_TRADE_CLASS_SID INT IDENTITY(1,1) NOT NULL
  END
GO

--IVLD_COMPANY_TRADE_CLASS

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_COMPANY_TRADE_CLASS'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'PK_IVLD_COMPANY_TRADE_CLASS_IVLD_COMPANY_TRADE_CLASS_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE [DBO].IVLD_COMPANY_TRADE_CLASS
        ADD CONSTRAINT PK_IVLD_COMPANY_TRADE_CLASS_IVLD_COMPANY_TRADE_CLASS_SID PRIMARY KEY (IVLD_COMPANY_TRADE_CLASS_SID)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_TRADE_CLASS'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_TRADE_CLASS
        ADD REPROCESSED_FLAG CHAR(1) NULL
  END
GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.DEFAULT_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_COMPANY_TRADE_CLASS'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'DF_IVLD_COMPANY_TRADE_CLASS_REPROCESSED_FLAG'
                     AND TYPE = 'D')
  BEGIN
      ALTER TABLE [DBO].IVLD_COMPANY_TRADE_CLASS
        ADD CONSTRAINT DF_IVLD_COMPANY_TRADE_CLASS_REPROCESSED_FLAG DEFAULT 'N' FOR REPROCESSED_FLAG
  END

GO
--------------------------------------------cel-633---------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_COMPANY_TRADE_CLASS'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_COMPANY_TRADE_CLASS
        ADD CHECK_RECORD BIT NULL
  END


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_COMPANY_TRADE_CLASS')
                      AND NAME = 'DF_IVLD_COMPANY_TRADE_CLASS_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_COMPANY_TRADE_CLASS]
        ADD CONSTRAINT [DF_IVLD_COMPANY_TRADE_CLASS_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_COMPANY_TRADE_CLASS'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_CONTRACT_HEADER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_CONTRACT_HEADER]
        (
           [CONTRACT_HEADER_INTFID]       [NUMERIC](38, 0) NOT NULL,
           [ORGANIZATION_KEY]             [VARCHAR](200) NULL,
           [CONTRACT_ID]                  [VARCHAR](200) NULL,
           [CONTRACT_NO]                  [VARCHAR](200) NULL,
           [CONTRACT_NAME]                [VARCHAR](200) NULL,
           [CONTRACT_TYPE]                [VARCHAR](200) NULL,
           [CONTRACT_STATUS]              [VARCHAR](200) NULL,
           [DOC_TYPE]                     [VARCHAR](200) NULL,
           [DOC_CLASS]                    [VARCHAR](200) NULL,
           [COMPANY_IDENT_CODE_QUALIFIER] [VARCHAR](200) NULL,
           [COMPANY_NO]                   [VARCHAR](200) NULL,
           [COMPANY_NAME]                 [VARCHAR](200) NULL,
           [TP_IDENTIFIER_CODE_QUALIFIER] [VARCHAR](200) NULL,
           [TRADING_PARTNER_NO]           [VARCHAR](200) NULL,
           [TRADING_PARTNER_NAME]         [VARCHAR](200) NULL,
           [TP_CONTRACT_ID]               [VARCHAR](200) NULL,
           [TP_CONTRACT_NAME]             [VARCHAR](200) NULL,
           [TRADE_CLASS]                  [VARCHAR](200) NULL,
           [START_DATE]                   [VARCHAR](200) NULL,
           [END_DATE]                     [VARCHAR](200) NULL,
           [TERM]                         [VARCHAR](200) NULL,
           [RENEGOTIATION_START_DATE]     [VARCHAR](200) NULL,
           [RENEGOTIATION_END_DATE]       [VARCHAR](200) NULL,
           [PRICEPROTECTION_START_DATE]   [VARCHAR](200) NULL,
           [PRICEPROTECTION_END_DATE]     [VARCHAR](200) NULL,
           [ADVANCE_NOTICE_DAYS]          [VARCHAR](200) NULL,
           [INSIDE_OWNER]                 [VARCHAR](200) NULL,
           [INSIDE_PHONE]                 [VARCHAR](200) NULL,
           [INSIDE_AUTHOR]                [VARCHAR](200) NULL,
           [INSIDE_ADDITIONAL]            [VARCHAR](200) NULL,
           [INSIDE_ADDITIONAL_NAME]       [VARCHAR](200) NULL,
           [INSIDE_ADDITIONAL_PHONE]      [VARCHAR](200) NULL,
           [OUTSIDE_OWNER]                [VARCHAR](200) NULL,
           [OUTSIDE_PHONE]                [VARCHAR](200) NULL,
           [OUTSIDE_AUTHOR]               [VARCHAR](200) NULL,
           [OUTSIDE_ADDITIONAL]           [VARCHAR](200) NULL,
           [OUTSIDE_ADDITIONAL_NAME]      [VARCHAR](200) NULL,
           [OUTSIDE_ADDITIONAL_PHONE]     [VARCHAR](200) NULL,
           [AFFILIATED_CONTRACT_INFO]     [VARCHAR](200) NULL,
           [SHIPPING_TERMS]               [VARCHAR](200) NULL,
           [PROPOSAL_START_DATE]          [VARCHAR](200) NULL,
           [PROPOSAL_END_DATE]            [VARCHAR](200) NULL,
           [ORIGINAL_START_DATE]          [VARCHAR](200) NULL,
           [ORIGINAL_END_DATE]            [VARCHAR](200) NULL,
           [AWARD_STATUS]                 [VARCHAR](200) NULL,
           [LAST_UPDATED_DATE]            [VARCHAR](200) NULL,
           [PRICE_ESCALATION_CLAUSE]      [VARCHAR](200) NULL,
           [EXEMPT_FROM_LOW_PRICE]        [VARCHAR](200) NULL,
           [PRICE_RESET_INDICATOR]        [VARCHAR](200) NULL,
           [CANCELLATION_CLAUSE]          [VARCHAR](200) NULL,
           [MOST_FAVORED_NATION]          [VARCHAR](200) NULL,
           [CATEGORY]                     [VARCHAR](200) NULL,
           [CURRENCY]                     [VARCHAR](200) NULL,
           [MINIMUM_ORDER]                [VARCHAR](200) NULL,
           [PAYMENT_TERMS]                [VARCHAR](200) NULL,
           [CONTRACT_ALIAS_NO]            [VARCHAR](200) NULL,
           [CONTRACT_ALIAS_NAME]          [VARCHAR](200) NULL,
           [CREATED_BY]                   [VARCHAR](200) NULL,
           [CREATED_DATE]                 [DATETIME] NULL,
           [MODIFIED_BY]                  [VARCHAR](200) NULL,
           [MODIFIED_DATE]                [DATETIME] NULL,
           [BATCH_ID]                     [VARCHAR](200) NULL,
           [SOURCE]                       [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]        [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]           [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]           [DATETIME] NULL,
           [ERROR_CODE]                   [VARCHAR](200) NULL,
           [ERROR_FIELD]                  [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CONTRACT_HEADER'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CONTRACT_HEADER
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CONTRACT_HEADER'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CONTRACT_HEADER
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_CONTRACT_HEADER')
                      AND NAME = 'DF_IVLD_CONTRACT_HEADER_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_CONTRACT_HEADER]
        ADD CONSTRAINT [DF_IVLD_CONTRACT_HEADER_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CONTRACT_HEADER'
                      AND COLUMN_NAME = 'IVLD_CONTRACT_HEADER_SID'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_CONTRACT_HEADER
        ADD IVLD_CONTRACT_HEADER_SID INT IDENTITY(1,1) NOT NULL
  END
GO
--P.K for IVLD_CONTRACT_HEADER
IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_CONTRACT_HEADER'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'PK_IVLD_CONTRACT_HEADER_IVLD_CONTRACT_HEADER_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE [DBO].IVLD_CONTRACT_HEADER
        ADD CONSTRAINT PK_IVLD_CONTRACT_HEADER_IVLD_CONTRACT_HEADER_SID PRIMARY KEY (IVLD_CONTRACT_HEADER_SID)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CONTRACT_HEADER'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CONTRACT_HEADER
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_CONTRACT_HEADER')
                      AND NAME = 'DF_IVLD_CONTRACT_HEADER_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].IVLD_CONTRACT_HEADER
        ADD CONSTRAINT DF_IVLD_CONTRACT_HEADER_CHECK_RECORD DEFAULT (0) FOR CHECK_RECORD
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CONTRACT_HEADER'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CONTRACT_HEADER
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF EXISTS (SELECT 1
               FROM  IVLD_CONTRACT_HEADER
               WHERE REPROCESSED_FLAG IS NULL)
			   
 BEGIN
     Update IVLD_CONTRACT_HEADER SET REPROCESSED_FLAG='N' 
	 WHERE REPROCESSED_FLAG IS NULL     
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_CONTRACT_HEADER')
                      AND NAME = 'DF_IVLD_CONTRACT_HEADER_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_CONTRACT_HEADER
        ADD CONSTRAINT DF_IVLD_CONTRACT_HEADER_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_CONTRACT_HEADER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_CPI'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_CPI]
        (
           [CPI_INTFID]            [NUMERIC](38, 0) NOT NULL,
           [INDEX_ID]              [VARCHAR](200) NULL,
           [STATUS]                [VARCHAR](200) NULL,
           [INDEX_TYPE]            [VARCHAR](200) NULL,
           [EFFECTIVE_DATE]        [VARCHAR](200) NULL,
           [INDEX_VALUE]           [VARCHAR](200) NULL,
           [CREATED_BY]            [VARCHAR](200) NULL,
           [CREATED_DATE]          [DATETIME] NULL,
           [MODIFIED_BY]           [VARCHAR](200) NULL,
           [MODIFIED_DATE]         [DATETIME] NULL,
           [BATCH_ID]              [VARCHAR](200) NULL,
           [SOURCE]                [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR] [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]    [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]    [DATETIME] NULL,
           [ERROR_CODE]            [VARCHAR](200) NULL,
           [ERROR_FIELD]           [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CPI'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CPI
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CPI'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CPI
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CPI'
                      AND COLUMN_NAME = 'IVLD_CPI_SID')
  BEGIN
      ALTER TABLE IVLD_CPI
        ADD IVLD_CPI_SID INT IDENTITY(1, 1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CPI'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CPI
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_CPI')
                      AND NAME = 'DF_IVLD_CPI_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_CPI
        ADD CONSTRAINT DF_IVLD_CPI_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_CPI'
                     AND NAME = 'PK_IVLD_CPI_IVLD_CPI_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_CPI
        ADD CONSTRAINT PK_IVLD_CPI_IVLD_CPI_SID PRIMARY KEY(IVLD_CPI_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_CPI')
                      AND NAME = 'DF_IVLD_CPI_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_CPI]
        ADD CONSTRAINT [DF_IVLD_CPI_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
-------------------cel-633---------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CPI'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CPI
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_CPI')
                      AND NAME = 'DF_IVLD_CPI_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_CPI]
        ADD CONSTRAINT [DF_IVLD_CPI_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
------------------------------------------------

-------------------cel-633---------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CPI'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CPI
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_CPI')
                      AND NAME = 'DF_IVLD_CPI_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_CPI]
        ADD CONSTRAINT [DF_IVLD_CPI_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_CPI'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_FORECAST_SALES'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_FORECAST_SALES]
        (
           [FORECAST_INTFID]                [NUMERIC](38, 0) NOT NULL,
           [FORECAST_YEAR]                  [VARCHAR](200) NULL,
           [FORECAST_MONTH]                 [VARCHAR](200) NULL,
           [NDC]                            [VARCHAR](200) NULL,
           [FORECAST_START_DATE]            [VARCHAR](200) NULL,
           [UNITS]                          [VARCHAR](200) NULL,
           [DOLLARS]                        [VARCHAR](200) NULL,
           [FORECAST_VALUE_TYPE]            [VARCHAR](200) NULL,
           [FORECAST_VALUE]                 [VARCHAR](200) NULL,
           [PRODUCT]                        [VARCHAR](200) NULL,
           [BRAND]                          [VARCHAR](200) NULL,
           [SEGMENT]                        [VARCHAR](200) NULL,
           [PERCENTAGE_ESTIMATE]            [VARCHAR](200) NULL,
           [PERCENTAGE_ESTIMATE_YEAR]       [VARCHAR](200) NULL,
           [ACTUAL_SALES_PERCENTAGE]        [VARCHAR](200) NULL,
           [ACTUAL_SALES_PERCENTAGE_MONTH]  [VARCHAR](200) NULL,
           [FORECASTED_SALES_PERCENTAGE]    [VARCHAR](200) NULL,
           [FORECASTED_SALES_PERCENT_MONTH] [VARCHAR](200) NULL,
           [FORECAST_VER]                   [VARCHAR](200) NULL,
           [PRICE]                          [VARCHAR](200) NULL,
           [COUNTRY]                        [VARCHAR](200) NULL,
           [FORECAST_NAME]                  [VARCHAR](200) NULL,
           [FORECAST_DATE]                  [VARCHAR](200) NULL,
           [CREATED_BY]                     [VARCHAR](200) NULL,
           [CREATED_DATE]                   [DATETIME] NULL,
           [MODIFIED_BY]                    [VARCHAR](200) NULL,
           [MODIFIED_DATE]                  [DATETIME] NULL,
           [BATCH_ID]                       [VARCHAR](200) NULL,
           [SOURCE]                         [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]          [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]             [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]             [DATETIME] NULL,
           [ERROR_CODE]                     [VARCHAR](200) NULL,
           [ERROR_FIELD]                    [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_FORECAST_SALES'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_FORECAST_SALES
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_FORECAST_SALES'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_FORECAST_SALES
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_FORECAST_SALES'
                      AND COLUMN_NAME = 'IVLD_FORECAST_SALES_SID')
  BEGIN
      ALTER TABLE IVLD_FORECAST_SALES
        ADD IVLD_FORECAST_SALES_SID INT IDENTITY(1, 1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_FORECAST_SALES'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_FORECAST_SALES
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_FORECAST_SALES')
                      AND NAME = 'DF_IVLD_FORECAST_SALES_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_FORECAST_SALES
        ADD CONSTRAINT DF_IVLD_FORECAST_SALES_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_FORECAST_SALES'
                     AND NAME = 'PK_IVLD_FORECAST_SALES_IVLD_FORECAST_SALES_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_FORECAST_SALES
        ADD CONSTRAINT PK_IVLD_FORECAST_SALES_IVLD_FORECAST_SALES_SID PRIMARY KEY(IVLD_FORECAST_SALES_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_FORECAST_SALES')
                      AND NAME = 'DF_IVLD_FORECAST_SALES_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_FORECAST_SALES]
        ADD CONSTRAINT [DF_IVLD_FORECAST_SALES_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
---------------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_FORECAST_SALES'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_FORECAST_SALES
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_FORECAST_SALES')
                      AND NAME = 'DF_IVLD_FORECAST_SALES_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_FORECAST_SALES]
        ADD CONSTRAINT [DF_IVLD_FORECAST_SALES_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
------------------------------------------------------------------------------

---------------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_FORECAST_SALES'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_FORECAST_SALES
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_FORECAST_SALES')
                      AND NAME = 'DF_IVLD_FORECAST_SALES_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_FORECAST_SALES]
        ADD CONSTRAINT [DF_IVLD_FORECAST_SALES_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_FORECAST_SALES'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_FORMULA_DETAILS'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_FORMULA_DETAILS]
        (
           [FORMULA_DETAILS_INTFID] [NUMERIC](38, 0) NOT NULL,
           [FORMULA_ID]             [VARCHAR](200) NULL,
           [FORMULA_NO]             [VARCHAR](200) NULL,
           [FORMULA_DESC]           [VARCHAR](200) NULL,
           [COMPANY_ID]             [VARCHAR](200) NULL,
           [ITEM_ID]                [VARCHAR](200) NULL,
           [START_DATE]             [VARCHAR](200) NULL,
           [END_DATE]               [VARCHAR](200) NULL,
           [REBATE_PERCENT_1]       [VARCHAR](200) NULL,
           [REBATE_PERCENT_2]       [VARCHAR](200) NULL,
           [REBATE_PERCENT_3]       [VARCHAR](200) NULL,
           [CONTRACT_PRICE_1]       [VARCHAR](200) NULL,
           [CONTRACT_PRICE_2]       [VARCHAR](200) NULL,
           [CONTRACT_PRICE_3]       [VARCHAR](200) NULL,
           [CREATED_BY]             [VARCHAR](200) NULL,
           [CREATED_DATE]           [DATETIME] NULL,
           [MODIFIED_BY]            [VARCHAR](200) NULL,
           [MODIFIED_DATE]          [DATETIME] NULL,
           [BATCH_ID]               [VARCHAR](200) NULL,
           [SOURCE]                 [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]  [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]     [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]     [DATETIME] NULL,
           [ERROR_CODE]             [VARCHAR](200) NULL,
           [ERROR_FIELD]            [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_FORMULA_DETAILS'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_FORMULA_DETAILS
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_FORMULA_DETAILS'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_FORMULA_DETAILS
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_FORMULA_DETAILS'
                      AND COLUMN_NAME = 'IVLD_FORMULA_DETAILS_SID')
  BEGIN
      ALTER TABLE IVLD_FORMULA_DETAILS
        ADD IVLD_FORMULA_DETAILS_SID INT IDENTITY(1, 1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_FORMULA_DETAILS'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_FORMULA_DETAILS
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_FORMULA_DETAILS')
                      AND NAME = 'DF_IVLD_FORMULA_DETAILS_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_FORMULA_DETAILS
        ADD CONSTRAINT DF_IVLD_FORMULA_DETAILS_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_FORMULA_DETAILS'
                     AND NAME = 'PK_IVLD_FORMULA_DETAILS_IVLD_FORMULA_DETAILS_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_FORMULA_DETAILS
        ADD CONSTRAINT PK_IVLD_FORMULA_DETAILS_IVLD_FORMULA_DETAILS_SID PRIMARY KEY(IVLD_FORMULA_DETAILS_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_FORMULA_DETAILS')
                      AND NAME = 'DF_IVLD_FORMULA_DETAILS_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_FORMULA_DETAILS]
        ADD CONSTRAINT [DF_IVLD_FORMULA_DETAILS_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO

----------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_FORMULA_DETAILS'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_FORMULA_DETAILS
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_FORMULA_DETAILS')
                      AND NAME = 'DF_IVLD_FORMULA_DETAILS_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_FORMULA_DETAILS]
        ADD CONSTRAINT [DF_IVLD_FORMULA_DETAILS_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
-------------------------------------------------------------------

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_FORMULA_DETAILS'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_GL_BALANCE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_GL_BALANCE]
        (
           [GL_BALANCE_INTFID]     [NUMERIC](38, 0) NOT NULL,
           [ACCOUNT_ID]            [VARCHAR](200) NULL,
           [ACCOUNT_NO]            [VARCHAR](200) NULL,
           [BALANCE]               [VARCHAR](200) NULL,
           [UPLOAD_DATE]           [VARCHAR](200) NULL,
           [IS_ACTIVE]             [VARCHAR](200) NULL,
           [INSERTED_DATE]         [VARCHAR](200) NULL,
           [YEAR]                  [VARCHAR](200) NULL,
           [PERIOD]                [VARCHAR](200) NULL,
           [CLOSE_INDICATOR]       [VARCHAR](200) NULL,
           [CREATED_BY]            [VARCHAR](200) NULL,
           [CREATED_DATE]          [DATETIME] NULL,
           [MODIFIED_BY]           [VARCHAR](200) NULL,
           [MODIFIED_DATE]         [DATETIME] NULL,
           [BATCH_ID]              [VARCHAR](200) NULL,
           [SOURCE]                [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR] [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]    [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]    [DATETIME] NULL,
           [ERROR_CODE]            [VARCHAR](200) NULL,
           [ERROR_FIELD]           [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_GL_BALANCE'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_GL_BALANCE
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_GL_BALANCE'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_GL_BALANCE
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_GL_BALANCE'
                      AND COLUMN_NAME = 'IVLD_GL_BALANCE_SID')
  BEGIN
      ALTER TABLE IVLD_GL_BALANCE
        ADD IVLD_GL_BALANCE_SID INT IDENTITY(1, 1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_GL_BALANCE'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_GL_BALANCE
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_GL_BALANCE')
                      AND NAME = 'DF_IVLD_GL_BALANCE_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_GL_BALANCE
        ADD CONSTRAINT DF_IVLD_GL_BALANCE_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_GL_BALANCE'
                     AND NAME = 'PK_IVLD_GL_BALANCE_IVLD_GL_BALANCE_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_GL_BALANCE
        ADD CONSTRAINT PK_IVLD_GL_BALANCE_IVLD_GL_BALANCE_SID PRIMARY KEY(IVLD_GL_BALANCE_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_GL_BALANCE')
                      AND NAME = 'DF_IVLD_GL_BALANCE_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_GL_BALANCE]
        ADD CONSTRAINT [DF_IVLD_GL_BALANCE_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
-----------------------------------cel-633--------------------------------------

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_GL_BALANCE'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_GL_BALANCE
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_GL_BALANCE')
                      AND NAME = 'DF_IVLD_GL_BALANCE_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_GL_BALANCE]
        ADD CONSTRAINT [DF_IVLD_GL_BALANCE_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

--------------------------------------------------------------------------

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_GL_BALANCE'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_GL_COST_CENTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_GL_COST_CENTER]
        (
           [GL_COST_CENTER_INTFID] [NUMERIC](38, 0) NOT NULL,
           [COMPANY_COST_CENTER]   [VARCHAR](200) NULL,
           [COMPANY_CODE]          [VARCHAR](200) NULL,
           [NDC8]                  [VARCHAR](200) NULL,
           [UPLOAD_DATE]           [VARCHAR](200) NULL,
           [CREATED_BY]            [VARCHAR](200) NULL,
           [CREATED_DATE]          [DATETIME] NULL,
           [MODIFIED_BY]           [VARCHAR](200) NULL,
           [MODIFIED_DATE]         [DATETIME] NULL,
           [BATCH_ID]              [VARCHAR](200) NULL,
           [SOURCE]                [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR] [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]    [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]    [DATETIME] NULL,
           [ERROR_CODE]            [VARCHAR](200) NULL,
           [ERROR_FIELD]           [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_GL_COST_CENTER'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_GL_COST_CENTER
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_GL_COST_CENTER'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_GL_COST_CENTER
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_GL_COST_CENTER'
                      AND COLUMN_NAME = 'IVLD_GL_COST_CENTER_SID')
  BEGIN
      ALTER TABLE IVLD_GL_COST_CENTER
        ADD IVLD_GL_COST_CENTER_SID INT IDENTITY(1, 1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_GL_COST_CENTER'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_GL_COST_CENTER
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_GL_COST_CENTER')
                      AND NAME = 'DF_IVLD_GL_COST_CENTER_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_GL_COST_CENTER
        ADD CONSTRAINT DF_IVLD_GL_COST_CENTER_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_GL_COST_CENTER'
                     AND NAME = 'PK_IVLD_GL_COST_CENTER_IVLD_GL_COST_CENTER_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_GL_COST_CENTER
        ADD CONSTRAINT PK_IVLD_GL_COST_CENTER_IVLD_GL_COST_CENTER_SID PRIMARY KEY(IVLD_GL_COST_CENTER_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_GL_COST_CENTER')
                      AND NAME = 'DF_IVLD_GL_COST_CENTER_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_GL_COST_CENTER]
        ADD CONSTRAINT [DF_IVLD_GL_COST_CENTER_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
------------------------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_GL_COST_CENTER'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_GL_COST_CENTER
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_GL_COST_CENTER')
                      AND NAME = 'DF_IVLD_GL_COST_CENTER_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_GL_COST_CENTER]
        ADD CONSTRAINT [DF_IVLD_GL_COST_CENTER_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
-------------------------------------------------------------------------------------------

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_GL_COST_CENTER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_IFP'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_IFP]
        (
           [IFP_INTFID]                   [NUMERIC](38, 0) NOT NULL,
           [IFP_ID]                       [VARCHAR](200) NULL,
           [IFP_NO]                       [VARCHAR](200) NULL,
           [IFP_NAME]                     [VARCHAR](200) NULL,
           [IFP_TYPE]                     [VARCHAR](200) NULL,
           [IFP_CATEGORY]                 [VARCHAR](200) NULL,
           [IFP_DESIGNATION]              [VARCHAR](200) NULL,
           [PARENT_IFP_ID]                [VARCHAR](200) NULL,
           [PARENT_IFP_NAME]              [VARCHAR](200) NULL,
           [IFP_STATUS]                   [VARCHAR](200) NULL,
           [IFP_START_DATE]               [VARCHAR](200) NULL,
           [IFP_END_DATE]                 [VARCHAR](200) NULL,
           [ITEM_ID]                      [VARCHAR](200) NULL,
           [IDENTIFIER_CODE_QUALIFIER]    [VARCHAR](200) NULL,
           [ITEM_NO]                      [VARCHAR](200) NULL,
           [ITEM_NAME]                    [VARCHAR](200) NULL,
           [ATTACHED_STATUS]              [VARCHAR](200) NULL,
           [ATTACHED_DATE]                [VARCHAR](200) NULL,
           [START_DATE]                   [VARCHAR](200) NULL,
           [END_DATE]                     [VARCHAR](200) NULL,
           [TOTAL_VOLUME_COMMITMENT]      [VARCHAR](200) NULL,
           [TOTAL_DOLLAR_COMMITMENT]      [VARCHAR](200) NULL,
           [TOTAL_MARKETSHARE_COMMITMENT] [VARCHAR](200) NULL,
           [COMMITMENT_PERIOD]            [VARCHAR](200) NULL,
           [CONTRACT_ID]                  [VARCHAR](200) NULL,
           [CFP_ID]                       [VARCHAR](200) NULL,
           [MFP_ID]                       [VARCHAR](200) NULL,
           [CREATED_BY]                   [VARCHAR](200) NULL,
           [CREATED_DATE]                 [DATETIME] NULL,
           [MODIFIED_BY]                  [VARCHAR](200) NULL,
           [MODIFIED_DATE]                [DATETIME] NULL,
           [BATCH_ID]                     [VARCHAR](200) NULL,
           [SOURCE]                       [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]        [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]           [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]           [DATETIME] NULL,
           [ERROR_CODE]                   [VARCHAR](200) NULL,
           [ERROR_FIELD]                  [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_IFP'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_IFP
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_IFP'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_IFP
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_IFP')
                      AND NAME = 'DF_IVLD_IFP_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_IFP]
        ADD CONSTRAINT [DF_IVLD_IFP_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_IFP'
                      AND COLUMN_NAME = 'IVLD_IFP_SID'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_IFP
        ADD IVLD_IFP_SID INT IDENTITY(1,1) NOT NULL
  END
GO
--P.K for IVLD_IFP
IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_IFP'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'PK_IVLD_IFP_IVLD_IFP_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE [DBO].IVLD_IFP
        ADD CONSTRAINT PK_IVLD_IFP_IVLD_IFP_SID PRIMARY KEY (IVLD_IFP_SID)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_IFP'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_IFP
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_IFP')
                      AND NAME = 'DF_IVLD_IFP_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].IVLD_IFP
        ADD CONSTRAINT DF_IVLD_IFP_CHECK_RECORD DEFAULT (0) FOR CHECK_RECORD
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_IFP'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_IFP
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO


IF EXISTS (SELECT 1
               FROM  IVLD_IFP
               WHERE REPROCESSED_FLAG IS NULL)
			   
 BEGIN
     Update IVLD_IFP SET REPROCESSED_FLAG='N' 
	 WHERE REPROCESSED_FLAG IS NULL     
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_IFP')
                      AND NAME = 'DF_IVLD_IFP_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_IFP
        ADD CONSTRAINT DF_IVLD_IFP_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_IFP'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_ITEM_HIERARCHY'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_ITEM_HIERARCHY]
        (
           [ITEM_HIERARCHY_INTFID] [NUMERIC](38, 0) NOT NULL,
           [LEVEL0_TAG]            [VARCHAR](200) NULL,
           [LEVEL0]                [VARCHAR](200) NULL,
           [LEVEL0_ALIAS]          [VARCHAR](200) NULL,
           [LEVEL1]                [VARCHAR](200) NULL,
           [LEVEL1_ALIAS]          [VARCHAR](200) NULL,
           [LEVEL2]                [VARCHAR](200) NULL,
           [LEVEL2_ALIAS]          [VARCHAR](200) NULL,
           [LEVEL3]                [VARCHAR](200) NULL,
           [LEVEL3_ALIAS]          [VARCHAR](200) NULL,
           [LEVEL4]                [VARCHAR](200) NULL,
           [LEVEL4_ALIAS]          [VARCHAR](200) NULL,
           [LEVEL5]                [VARCHAR](200) NULL,
           [LEVEL5_ALIAS]          [VARCHAR](200) NULL,
           [LEVEL6]                [VARCHAR](200) NULL,
           [LEVEL6_ALIAS]          [VARCHAR](200) NULL,
           [LEVEL7]                [VARCHAR](200) NULL,
           [LEVEL7_ALIAS]          [VARCHAR](200) NULL,
           [LEVEL8]                [VARCHAR](200) NULL,
           [LEVEL8_ALIAS]          [VARCHAR](200) NULL,
           [LEVEL9]                [VARCHAR](200) NULL,
           [LEVEL9_ALIAS]          [VARCHAR](200) NULL,
           [LEVEL10]               [VARCHAR](200) NULL,
           [LEVEL10_ALIAS]         [VARCHAR](200) NULL,
           [LEVEL11]               [VARCHAR](200) NULL,
           [LEVEL11_ALIAS]         [VARCHAR](200) NULL,
           [LEVEL12]               [VARCHAR](200) NULL,
           [LEVEL12_ALIAS]         [VARCHAR](200) NULL,
           [LEVEL13]               [VARCHAR](200) NULL,
           [LEVEL13_ALIAS]         [VARCHAR](200) NULL,
           [LEVEL14]               [VARCHAR](200) NULL,
           [LEVEL14_ALIAS]         [VARCHAR](200) NULL,
           [LEVEL15]               [VARCHAR](200) NULL,
           [LEVEL15_ALIAS]         [VARCHAR](200) NULL,
           [LEVEL16]               [VARCHAR](200) NULL,
           [LEVEL16_ALIAS]         [VARCHAR](200) NULL,
           [LEVEL17]               [VARCHAR](200) NULL,
           [LEVEL17_ALIAS]         [VARCHAR](200) NULL,
           [LEVEL18]               [VARCHAR](200) NULL,
           [LEVEL18_ALIAS]         [VARCHAR](200) NULL,
           [LEVEL19]               [VARCHAR](200) NULL,
           [LEVEL19_ALIAS]         [VARCHAR](200) NULL,
           [LEVEL20]               [VARCHAR](200) NULL,
           [LEVEL20_ALIAS]         [VARCHAR](200) NULL,
           [GTN_BRAND]             [VARCHAR](200) NULL,
           [GTN_THERAPEUTIC_CLASS] [VARCHAR](200) NULL,
           [GTN_COMPANY]           [VARCHAR](200) NULL,
           [CREATED_BY]            [VARCHAR](200) NULL,
           [CREATED_DATE]          [DATETIME] NULL,
           [MODIFIED_BY]           [VARCHAR](200) NULL,
           [MODIFIED_DATE]         [DATETIME] NULL,
           [BATCH_ID]              [VARCHAR](200) NULL,
           [SOURCE]                [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR] [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]    [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]    [DATETIME] NULL,
           [ERROR_CODE]            [VARCHAR](200) NULL,
           [ERROR_FIELD]           [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_HIERARCHY'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_HIERARCHY
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_HIERARCHY'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_HIERARCHY
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_HIERARCHY'
                      AND COLUMN_NAME = 'IVLD_ITEM_HIERARCHY_SID')
  BEGIN
      ALTER TABLE IVLD_ITEM_HIERARCHY
        ADD IVLD_ITEM_HIERARCHY_SID INT IDENTITY(1, 1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_HIERARCHY'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_HIERARCHY
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_ITEM_HIERARCHY')
                      AND NAME = 'DF_IVLD_ITEM_HIERARCHY_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_ITEM_HIERARCHY
        ADD CONSTRAINT DF_IVLD_ITEM_HIERARCHY_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_ITEM_HIERARCHY'
                     AND NAME = 'PK_IVLD_ITEM_HIERARCHY_IVLD_ITEM_HIERARCHY_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_ITEM_HIERARCHY
        ADD CONSTRAINT PK_IVLD_ITEM_HIERARCHY_IVLD_ITEM_HIERARCHY_SID PRIMARY KEY(IVLD_ITEM_HIERARCHY_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_ITEM_HIERARCHY')
                      AND NAME = 'DF_IVLD_ITEM_HIERARCHY_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ITEM_HIERARCHY]
        ADD CONSTRAINT [DF_IVLD_ITEM_HIERARCHY_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
------------------------------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_HIERARCHY'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_HIERARCHY
        ADD CHECK_RECORD BIT NULL
  END

GO


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ITEM_HIERARCHY')
                      AND NAME = 'DF_IVLD_ITEM_HIERARCHY_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ITEM_HIERARCHY]
        ADD CONSTRAINT [DF_IVLD_ITEM_HIERARCHY_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
------------------------------------------------------------------------------------------------

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_ITEM_HIERARCHY'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_ITEM_HIERARCHY_DEFINITION'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_ITEM_HIERARCHY_DEFINITION]
        (
           [ITEM_HIERARCHY_DEFN_INTFID] [NUMERIC](38, 0) NOT NULL,
           [MEMBER]                     [VARCHAR](200) NULL,
           [ALIAS]                      [VARCHAR](200) NULL,
           [BPI_LVL]                    [VARCHAR](200) NULL,
           [CREATED_BY]                 [VARCHAR](200) NULL,
           [CREATED_DATE]               [DATETIME] NULL,
           [MODIFIED_BY]                [VARCHAR](200) NULL,
           [MODIFIED_DATE]              [DATETIME] NULL,
           [BATCH_ID]                   [VARCHAR](200) NULL,
           [SOURCE]                     [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]      [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]         [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]         [DATETIME] NULL,
           [ERROR_CODE]                 [VARCHAR](200) NULL,
           [ERROR_FIELD]                [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_HIERARCHY_DEFINITION'
                      AND COLUMN_NAME = 'IVLD_ITEM_HIERARCHY_DEFINITION_SID'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_HIERARCHY_DEFINITION
        ADD IVLD_ITEM_HIERARCHY_DEFINITION_SID INT IDENTITY(1, 1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_HIERARCHY_DEFINITION'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_HIERARCHY_DEFINITION
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_HIERARCHY_DEFINITION'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_HIERARCHY_DEFINITION
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_HIERARCHY_DEFINITION'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_HIERARCHY_DEFINITION
        ADD ERROR_FIELD VARCHAR(500)
  END

GO
----------------------------cel-633--------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_HIERARCHY_DEFINITION'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_HIERARCHY_DEFINITION
        ADD CHECK_RECORD BIT NULL
  END

GO


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ITEM_HIERARCHY_DEFINITION')
                      AND NAME = 'DF_IVLD_ITEM_HIERARCHY_DEFINITION_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ITEM_HIERARCHY_DEFINITION]
        ADD CONSTRAINT [DF_IVLD_ITEM_HIERARCHY_DEFINITION_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

----------------------------- primary key ------------------------------------------
IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_ITEM_HIERARCHY_DEFINITION'
                     AND NAME = 'PK_IVLD_ITEM_HIERARCHY_DEFINITION_IVLD_ITEM_HIERARCHY_DEFINITION_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_ITEM_HIERARCHY_DEFINITION
        ADD CONSTRAINT PK_IVLD_ITEM_HIERARCHY_DEFINITION_IVLD_ITEM_HIERARCHY_DEFINITION_SID PRIMARY KEY(IVLD_ITEM_HIERARCHY_DEFINITION_SID)
  END

GO 

---------------------------- default constraint ---------------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_ITEM_HIERARCHY_DEFINITION')
                      AND NAME = 'DF_IVLD_ITEM_HIERARCHY_DEFINITION_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ITEM_HIERARCHY_DEFINITION]
        ADD CONSTRAINT [DF_IVLD_ITEM_HIERARCHY_DEFINITION_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO


IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ITEM_HIERARCHY_DEFINITION')
                      AND NAME = 'DF_IVLD_ITEM_HIERARCHY_DEFINITION_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_ITEM_HIERARCHY_DEFINITION
        ADD CONSTRAINT DF_IVLD_ITEM_HIERARCHY_DEFINITION_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO



DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_ITEM_HIERARCHY_DEFINITION'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_ITEM_IDENTIFIER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_ITEM_IDENTIFIER]
        (
           [ITEM_IDENTIFIER_INTFID]         [NUMERIC](38, 0) NOT NULL,
           [ITEM_ID]                        [VARCHAR](200) NULL,
           [ITEM_NO]                        [VARCHAR](200) NULL,
           [ITEM_NAME]                      [VARCHAR](200) NULL,
           [IDENTIFIER_CODE_QUALIFIER]      [VARCHAR](200) NULL,
           [IDENTIFIER_CODE_QUALIFIER_NAME] [VARCHAR](200) NULL,
           [ITEM_IDENTIFIER]                [VARCHAR](200) NULL,
           [ITEM_STATUS]                    [VARCHAR](200) NULL,
           [START_DATE]                     [VARCHAR](200) NULL,
           [END_DATE]                       [VARCHAR](200) NULL,
           [ENTITY_CODE]                    [VARCHAR](200) NULL,
           [CREATED_BY]                     [VARCHAR](200) NULL,
           [CREATED_DATE]                   [DATETIME] NULL,
           [MODIFIED_BY]                    [VARCHAR](200) NULL,
           [MODIFIED_DATE]                  [DATETIME] NULL,
           [BATCH_ID]                       [VARCHAR](200) NULL,
           [SOURCE]                         [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]          [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]             [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]             [DATETIME] NULL,
           [ERROR_CODE]                     [VARCHAR](200) NULL,
           [ERROR_FIELD]                    [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_IDENTIFIER'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_IDENTIFIER
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_IDENTIFIER'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_IDENTIFIER
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 1 
               FROM   INFORMATION_SCHEMA.COLUMNS 
               WHERE  TABLE_NAME = 'IVLD_ITEM_IDENTIFIER' 
                      AND COLUMN_NAME = 'IVLD_ITEM_IDENTIFIER_SID' 
                      AND TABLE_SCHEMA = 'DBO') 
  BEGIN 
      ALTER TABLE IVLD_ITEM_IDENTIFIER 
        ADD IVLD_ITEM_IDENTIFIER_SID INT IDENTITY ( 1, 1 ) 
  END 

GO 

IF NOT EXISTS (SELECT 1 
               FROM   INFORMATION_SCHEMA.COLUMNS 
               WHERE  TABLE_NAME = 'IVLD_ITEM_IDENTIFIER' 
                      AND COLUMN_NAME = 'REPROCESSED_FLAG' 
                      AND TABLE_SCHEMA = 'DBO') 
  BEGIN 
      ALTER TABLE IVLD_ITEM_IDENTIFIER 
        ADD REPROCESSED_FLAG CHAR(1) 
  END 

GO 

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_ITEM_IDENTIFIER'
                     AND NAME = 'PK_IVLD_ITEM_IDENTIFIER_IVLD_ITEM_IDENTIFIER_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_ITEM_IDENTIFIER
        ADD CONSTRAINT PK_IVLD_ITEM_IDENTIFIER_IVLD_ITEM_IDENTIFIER_SID PRIMARY KEY(IVLD_ITEM_IDENTIFIER_SID)
  END

GO


IF NOT EXISTS (SELECT 'X' 
               FROM   SYS.DEFAULT_CONSTRAINTS 
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_ITEM_IDENTIFIER') 
                      AND NAME = 'DF_IVLD_ITEM_IDENTIFIER_REPROCESSED_FLAG') 
  BEGIN 
      ALTER TABLE [DBO].[IVLD_ITEM_IDENTIFIER] 
        ADD CONSTRAINT [DF_IVLD_ITEM_IDENTIFIER_REPROCESSED_FLAG] DEFAULT('N') FOR REPROCESSED_FLAG
  END 

GO 


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_ITEM_IDENTIFIER')
                      AND NAME = 'DF_IVLD_ITEM_IDENTIFIER_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ITEM_IDENTIFIER]
        ADD CONSTRAINT [DF_IVLD_ITEM_IDENTIFIER_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
-------------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_IDENTIFIER'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_IDENTIFIER
        ADD CHECK_RECORD BIT NULL
  END

GO


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ITEM_IDENTIFIER')
                      AND NAME = 'DF_IVLD_ITEM_IDENTIFIER_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ITEM_IDENTIFIER]
        ADD CONSTRAINT [DF_IVLD_ITEM_IDENTIFIER_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
----------------------------

-------------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_IDENTIFIER'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_IDENTIFIER
        ADD CHECK_RECORD BIT NULL
  END

GO


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ITEM_IDENTIFIER')
                      AND NAME = 'DF_IVLD_ITEM_IDENTIFIER_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ITEM_IDENTIFIER]
        ADD CONSTRAINT [DF_IVLD_ITEM_IDENTIFIER_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_ITEM_IDENTIFIER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_ITEM_MASTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_ITEM_MASTER]
        (
           [ITEM_MASTER_INTFID]             [NUMERIC](38, 0) NOT NULL,
           [ITEM_ID]                        [VARCHAR](200) NULL,
           [ITEM_NO]                        [VARCHAR](200) NULL,
           [ITEM_CODE]                      [VARCHAR](200) NULL,
           [ITEM_NAME]                      [VARCHAR](200) NULL,
           [ITEM_DESC]                      [VARCHAR](250) NULL,
           [PACKAGE_SIZE]                   [VARCHAR](200) NULL,
           [PACKAGE_SIZE_CODE]              [VARCHAR](200) NULL,
           [PACKAGE_SIZE_INTRO_DATE]        [VARCHAR](200) NULL,
           [UPPS]                           [VARCHAR](200) NULL,
           [ITEM_START_DATE]                [VARCHAR](200) NULL,
           [ITEM_END_DATE]                  [VARCHAR](200) NULL,
           [ITEM_STATUS]                    [VARCHAR](200) NULL,
           [MANUFACTURER_ID]                [VARCHAR](200) NULL,
           [MANUFACTURER_NO]                [VARCHAR](200) NULL,
           [MANUFACTURER_NAME]              [VARCHAR](200) NULL,
           [LABELER_CODE]                   [VARCHAR](200) NULL,
           [ORGANIZATION_KEY]               [VARCHAR](200) NULL,
           [ACQUISITION_DATE]               [VARCHAR](200) NULL,
           [AUTHORIZED_GENERIC]             [VARCHAR](200) NULL,
           [AUTHORIZED_GENERIC_START_DATE]  [VARCHAR](200) NULL,
           [AUTHORIZED_GENERIC_END_DATE]    [VARCHAR](200) NULL,
           [BRAND]                          [VARCHAR](200) NULL,
           [FORM]                           [VARCHAR](200) NULL,
           [STRENGTH]                       [VARCHAR](200) NULL,
           [THERAPEUTIC_CLASS]              [VARCHAR](200) NULL,
           [FIRST_SALE_DATE]                [VARCHAR](200) NULL,
           [ITEM_TYPE_INDICATION]           [VARCHAR](200) NULL,
           [ITEM_CLASS]                     [VARCHAR](200) NULL,
           [ITEM_TYPE]                      [VARCHAR](200) NULL,
           [MARKET_TERMINATION_DATE]        [VARCHAR](200) NULL,
           [NEW_FORMULATION_INDICATOR]      [VARCHAR](200) NULL,
           [NEW_FORMULATION]                [VARCHAR](200) NULL,
           [NEW_FORMULATION_START_DATE]     [VARCHAR](200) NULL,
           [NEW_FORMULATION_END_DATE]       [VARCHAR](200) NULL,
           [PEDIATRIC_EXCLUSIVE_INDICATOR]  [VARCHAR](200) NULL,
           [PEDIATRIC_EXCLUSIVE_START_DATE] [VARCHAR](200) NULL,
           [PEDIATRIC_EXCLUSIVE_END_DATE]   [VARCHAR](200) NULL,
           [CLOTTING_FACTOR_INDICATOR]      [VARCHAR](200) NULL,
           [CLOTTING_FACTOR_START_DATE]     [VARCHAR](200) NULL,
           [CLOTTING_FACTOR_END_DATE]       [VARCHAR](200) NULL,
           [PRIMARY_UOM]                    [VARCHAR](200) NULL,
           [SECONDARY_UOM]                  [VARCHAR](200) NULL,
           [SHELF_LIFE]                     [VARCHAR](200) NULL,
           [SHELF_LIFE_TYPE]                [VARCHAR](200) NULL,
           [DUAL_PRICING_INDICATOR]         [VARCHAR](200) NULL,
           [ITEM_FAMILY_ID]                 [VARCHAR](200) NULL,
           [UDC1]                           [VARCHAR](200) NULL,
           [UDC2]                           [VARCHAR](200) NULL,
           [UDC3]                           [VARCHAR](200) NULL,
           [UDC4]                           [VARCHAR](200) NULL,
           [UDC5]                           [VARCHAR](200) NULL,
           [UDC6]                           [VARCHAR](200) NULL,
           [ACQUIRED_AMP]                   [VARCHAR](200) NULL,
           [ACQUIRED_BAMP]                  [VARCHAR](200) NULL,
           [OBRA_BAMP]                      [VARCHAR](200) NULL,
           [DRA]                            [VARCHAR](200) NULL,
           [DOSES_PER_UNIT]                 [VARCHAR](200) NULL,
           [STATUS]                         [VARCHAR](200) NULL,
           [DISCONTINUATION_DATE]           [VARCHAR](200) NULL,
           [LAST_LOT_EXPIRATION_DATE]       [VARCHAR](200) NULL,
           [DIVESTITURE_DATE]               [VARCHAR](200) NULL,
           [NON_FEDERAL_EXPIRATION_DATE]    [VARCHAR](200) NULL,
           [NDC9]                           [VARCHAR](200) NULL,
           [NDC8]                           [VARCHAR](200) NULL,
           [DISPLAY_BRAND]                  [VARCHAR](200) NULL,
           [BRAND_ID]                       [VARCHAR](200) NULL,
           [ITEM_CATEGORY]                  [VARCHAR](200) NULL,
           [BASELINE_AMP]                   [VARCHAR](200) NULL,
           [BASE_CPI_PERIOD]                [VARCHAR](200) NULL,
           [BASE_CPI]                       [VARCHAR](200) NULL,
           [CREATED_BY]                     [VARCHAR](200) NULL,
           [CREATED_DATE]                   [DATETIME] NULL,
           [MODIFIED_BY]                    [VARCHAR](200) NULL,
           [MODIFIED_DATE]                  [DATETIME] NULL,
           [BATCH_ID]                       [VARCHAR](200) NULL,
           [SOURCE]                         [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]          [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]             [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]             [DATETIME] NULL,
           [ERROR_CODE]                     [VARCHAR](200) NULL,
           [ERROR_FIELD]                    [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_MASTER'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_MASTER
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_MASTER'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_MASTER
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_ITEM_MASTER')
                      AND NAME = 'DF_IVLD_ITEM_MASTER_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ITEM_MASTER]
        ADD CONSTRAINT [DF_IVLD_ITEM_MASTER_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
--
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_MASTER'
                      AND COLUMN_NAME = 'IVLD_ITEM_MASTER_SID'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_MASTER
        ADD IVLD_ITEM_MASTER_SID INT IDENTITY(1,1) NOT NULL
  END
GO
--IVLD_ITEM_MASTER

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_ITEM_MASTER'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'PK_IVLD_ITEM_MASTER_IVLD_ITEM_MASTER_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE [DBO].IVLD_ITEM_MASTER
        ADD CONSTRAINT PK_IVLD_ITEM_MASTER_IVLD_ITEM_MASTER_SID PRIMARY KEY (IVLD_ITEM_MASTER_SID)
  END

GO


IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_MASTER'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_MASTER
        ADD REPROCESSED_FLAG CHAR(1) NULL
  END
GO


-----------------DEFAULT CONSTRAINTS---------------------------------
IF NOT EXISTS(SELECT 1
              FROM   SYS.DEFAULT_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_ITEM_MASTER'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'DF_IVLD_ITEM_MASTER_REPROCESSED_FLAG'
                     AND TYPE = 'D')
  BEGIN
      ALTER TABLE [DBO].IVLD_ITEM_MASTER
        ADD CONSTRAINT DF_IVLD_ITEM_MASTER_REPROCESSED_FLAG DEFAULT 'N' FOR REPROCESSED_FLAG
  END

GO

--------------------------------cel-633--------------------------------------


IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_MASTER'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_MASTER
        ADD CHECK_RECORD BIT NULL
  END

GO



IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ITEM_MASTER')
                      AND NAME = 'DF_IVLD_ITEM_MASTER_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ITEM_MASTER]
        ADD CONSTRAINT [DF_IVLD_ITEM_MASTER_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

-------------------------------------------------------------------------------

------cel-1445-----------

IF NOT EXISTS (
		SELECT 1
		FROM information_schema.columns
		WHERE table_name = 'IVLD_ITEM_MASTER'
			AND column_name = 'BASE_CPI_PRECISION'
			AND table_schema = 'DBO'
		)
BEGIN
	ALTER TABLE IVLD_ITEM_MASTER ADD BASE_CPI_PRECISION VARCHAR(50)
END
GO

IF NOT EXISTS (
		SELECT 1
		FROM information_schema.columns
		WHERE table_name = 'IVLD_ITEM_MASTER'
			AND column_name = 'BASELINE_AMP_PRECISION'
			AND table_schema = 'DBO'
		)
BEGIN
	ALTER TABLE IVLD_ITEM_MASTER ADD BASELINE_AMP_PRECISION VARCHAR(50)
END
GO
------cel-1445-----------

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_ITEM_MASTER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_ITEM_PRICING'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_ITEM_PRICING]
        (
           [ITEM_PRICING_INTFID]         [NUMERIC](38, 0) NOT NULL,
           [ITEM_ID]                     [VARCHAR](200) NULL,
           [ITEM_NO]                     [VARCHAR](200) NULL,
           [ITEM_NAME]                   [VARCHAR](200) NULL,
           [ITEM_UOM]                    [VARCHAR](200) NULL,
           [PRICING_CODE_QUALIFIER]      [VARCHAR](200) NULL,
           [PRICING_CODE_QUALIFIER_NAME] [VARCHAR](200) NULL,
           [ITEM_PRICE]                  [VARCHAR](200) NULL,
           [PRICING_CODE_STATUS]         [VARCHAR](200) NULL,
           [START_DATE]                  [VARCHAR](200) NULL,
           [END_DATE]                    [VARCHAR](200) NULL,
           [ENTITY_CODE]                 [VARCHAR](200) NULL,
           [CREATED_BY]                  [VARCHAR](200) NULL,
           [CREATED_DATE]                [DATETIME] NULL,
           [MODIFIED_BY]                 [VARCHAR](200) NULL,
           [MODIFIED_DATE]               [DATETIME] NULL,
           [BATCH_ID]                    [VARCHAR](200) NULL,
           [SOURCE]                      [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]       [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]          [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]          [DATETIME] NULL,
           [ERROR_CODE]                  [VARCHAR](200) NULL,
           [ERROR_FIELD]                 [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_PRICING'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_PRICING
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_PRICING'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_PRICING
        ADD ERROR_FIELD VARCHAR(500)
  END

GO
IF NOT EXISTS (SELECT 1 
               FROM   INFORMATION_SCHEMA.COLUMNS 
               WHERE  TABLE_NAME = 'IVLD_ITEM_PRICING' 
                      AND COLUMN_NAME = 'IVLD_ITEM_PRICING_SID' 
                      AND TABLE_SCHEMA = 'DBO') 
  BEGIN 
      ALTER TABLE IVLD_ITEM_PRICING 
        ADD IVLD_ITEM_PRICING_SID INT IDENTITY (1, 1) NOT NULL 
  END 

GO 

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_ITEM_PRICING'
                     AND NAME = 'PK_IVLD_ITEM_PRICING_IVLD_ITEM_PRICING_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_ITEM_PRICING
        ADD CONSTRAINT PK_IVLD_ITEM_PRICING_IVLD_ITEM_PRICING_SID PRIMARY KEY(IVLD_ITEM_PRICING_SID)
  END

GO


IF NOT EXISTS (SELECT 1 
               FROM   INFORMATION_SCHEMA.COLUMNS 
               WHERE  TABLE_NAME = 'IVLD_ITEM_PRICING' 
                      AND COLUMN_NAME = 'REPROCESSED_FLAG' 
                      AND TABLE_SCHEMA = 'DBO') 
  BEGIN 
      ALTER TABLE IVLD_ITEM_PRICING 
        ADD REPROCESSED_FLAG CHAR (1) NULL 
  END 

GO 

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_ITEM_PRICING'
                     AND NAME = 'PK_IVLD_ITEM_PRICING_IVLD_ITEM_PRICING_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_ITEM_PRICING
        ADD CONSTRAINT PK_IVLD_ITEM_PRICING_IVLD_ITEM_PRICING_SID PRIMARY KEY(IVLD_ITEM_PRICING_SID)
  END

GO

IF NOT EXISTS (SELECT 'X' 
               FROM   sys.default_constraints 
               WHERE  parent_object_id = Object_id('DBO.IVLD_ITEM_PRICING') 
                      AND NAME = 'DF_IVLD_ITEM_PRICING_REPROCESSED_FLAG') 
  BEGIN 
      ALTER TABLE [DBO]. [IVLD_ITEM_PRICING] 
        ADD CONSTRAINT [DF_IVLD_ITEM_PRICING_REPROCESSED_FLAG] DEFAULT ('N') FOR REPROCESSED_FLAG
  END 

go 




IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
			   where object_name (PARENT_OBJECT_ID)='IVLD_ITEM_PRICING'
                         AND NAME = 'DF_IVLD_ITEM_PRICING_INTF_INSERTED_DATE'
					   AND TYPE = 'D')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ITEM_PRICING]
        ADD CONSTRAINT [DF_IVLD_ITEM_PRICING_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
-----------------------------------------cel-633---------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ITEM_PRICING'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ITEM_PRICING
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ITEM_PRICING')
                      AND NAME = 'DF_IVLD_ITEM_PRICING_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ITEM_PRICING]
        ADD CONSTRAINT [DF_IVLD_ITEM_PRICING_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

------cel-1445-----------

IF NOT EXISTS (
		SELECT 1
		FROM information_schema.columns
		WHERE table_name = 'IVLD_ITEM_PRICING'
			AND column_name = 'ITEM_PRICE_PRECISION'
			AND table_schema = 'DBO'
		)
BEGIN
	ALTER TABLE IVLD_ITEM_PRICING ADD ITEM_PRICE_PRECISION VARCHAR(50)
END
GO
------cel-1445-----------

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_ITEM_PRICING'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_LOT_MASTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_LOT_MASTER]
        (
           [LOT_MASTER_INTFID]     [NUMERIC](38, 0) NOT NULL,
           [ITEM_ID]               [VARCHAR](200) NULL,
           [LOT_NO]                [VARCHAR](200) NULL,
           [LAST_LOT_SOLD_DATE]    [VARCHAR](200) NULL,
           [LOT_EXPIRATION_DATE]   [VARCHAR](200) NULL,
           [CREATED_BY]            [VARCHAR](200) NULL,
           [CREATED_DATE]          [DATETIME] NULL,
           [MODIFIED_BY]           [VARCHAR](200) NULL,
           [MODIFIED_DATE]         [DATETIME] NULL,
           [BATCH_ID]              [VARCHAR](200) NULL,
           [SOURCE]                [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR] [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]    [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]    [DATETIME] NULL,
           [ERROR_CODE]            [VARCHAR](200) NULL,
           [ERROR_FIELD]           [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_LOT_MASTER'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_LOT_MASTER
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_LOT_MASTER'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_LOT_MASTER
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_LOT_MASTER'
                      AND COLUMN_NAME = 'IVLD_LOT_MASTER_SID')
  BEGIN
      ALTER TABLE IVLD_LOT_MASTER
        ADD IVLD_LOT_MASTER_SID INT IDENTITY(1, 1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_LOT_MASTER'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_LOT_MASTER
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_LOT_MASTER')
                      AND NAME = 'DF_IVLD_LOT_MASTER_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_LOT_MASTER
        ADD CONSTRAINT DF_IVLD_LOT_MASTER_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_LOT_MASTER'
                     AND NAME = 'PK_IVLD_LOT_MASTER_IVLD_LOT_MASTER_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_LOT_MASTER
        ADD CONSTRAINT PK_IVLD_LOT_MASTER_IVLD_LOT_MASTER_SID PRIMARY KEY(IVLD_LOT_MASTER_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_LOT_MASTER')
                      AND NAME = 'DF_IVLD_LOT_MASTER_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_LOT_MASTER]
        ADD CONSTRAINT [DF_IVLD_LOT_MASTER_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
---------------------------------cel-633--------------------------------------

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_LOT_MASTER'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_LOT_MASTER
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_LOT_MASTER')
                      AND NAME = 'DF_IVLD_LOT_MASTER_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_LOT_MASTER]
        ADD CONSTRAINT [DF_IVLD_LOT_MASTER_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
------------------------------------------------------------------------------

---------------------------------cel-633--------------------------------------

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_LOT_MASTER'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_LOT_MASTER
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_LOT_MASTER')
                      AND NAME = 'DF_IVLD_LOT_MASTER_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_LOT_MASTER]
        ADD CONSTRAINT [DF_IVLD_LOT_MASTER_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_LOT_MASTER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_MASTER_DATA_ATTRIBUTE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_MASTER_DATA_ATTRIBUTE]
        (
           [DATA_ATTRIBUTE_INTFID] [NUMERIC](38, 0) NOT NULL,
           [MASTER_TYPE]           [VARCHAR](200) NULL,
           [MASTER_ID]             [VARCHAR](200) NULL,
           [MASTER_ATTRIBUTE]      [VARCHAR](200) NULL,
           [COLUMN_1]              [VARCHAR](200) NULL,
           [COLUMN_2]              [VARCHAR](200) NULL,
           [COLUMN_3]              [VARCHAR](200) NULL,
           [COLUMN_4]              [VARCHAR](200) NULL,
           [COLUMN_5]              [VARCHAR](200) NULL,
           [COLUMN_6]              [VARCHAR](200) NULL,
           [COLUMN_7]              [VARCHAR](200) NULL,
           [COLUMN_8]              [VARCHAR](200) NULL,
           [COLUMN_9]              [VARCHAR](200) NULL,
           [COLUMN_10]             [VARCHAR](200) NULL,
           [COLUMN_11]             [VARCHAR](200) NULL,
           [COLUMN_12]             [VARCHAR](200) NULL,
           [COLUMN_13]             [VARCHAR](200) NULL,
           [COLUMN_14]             [VARCHAR](200) NULL,
           [COLUMN_15]             [VARCHAR](200) NULL,
           [COLUMN_16]             [VARCHAR](200) NULL,
           [COLUMN_17]             [VARCHAR](200) NULL,
           [COLUMN_18]             [VARCHAR](200) NULL,
           [COLUMN_19]             [VARCHAR](200) NULL,
           [COLUMN_20]             [VARCHAR](200) NULL,
           [CREATED_BY]            [VARCHAR](200) NULL,
           [CREATED_DATE]          [DATETIME] NULL,
           [MODIFIED_BY]           [VARCHAR](200) NULL,
           [MODIFIED_DATE]         [DATETIME] NULL,
           [BATCH_ID]              [VARCHAR](200) NULL,
           [SOURCE]                [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR] [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]    [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]    [DATETIME] NULL,
           [ERROR_CODE]            [VARCHAR](200) NULL,
           [ERROR_FIELD]           [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_MASTER_DATA_ATTRIBUTE'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_MASTER_DATA_ATTRIBUTE
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_MASTER_DATA_ATTRIBUTE'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_MASTER_DATA_ATTRIBUTE
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_MASTER_DATA_ATTRIBUTE'
                      AND COLUMN_NAME = 'IVLD_MASTER_DATA_ATBTE_SID')
  BEGIN
      ALTER TABLE IVLD_MASTER_DATA_ATTRIBUTE
        ADD IVLD_MASTER_DATA_ATBTE_SID INT IDENTITY(1, 1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_MASTER_DATA_ATTRIBUTE'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_MASTER_DATA_ATTRIBUTE
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_MASTER_DATA_ATTRIBUTE')
                      AND NAME = 'DF_IVLD_MASTER_DATA_ATTRIBUTE_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_MASTER_DATA_ATTRIBUTE
        ADD CONSTRAINT DF_IVLD_MASTER_DATA_ATTRIBUTE_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_MASTER_DATA_ATTRIBUTE'
                     AND NAME = 'PK_IVLD_MASTER_DATA_ATTRIBUTE_IVLD_MASTER_DATA_ATBTE_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_MASTER_DATA_ATTRIBUTE
        ADD CONSTRAINT PK_IVLD_MASTER_DATA_ATTRIBUTE_IVLD_MASTER_DATA_ATBTE_SID PRIMARY KEY(IVLD_MASTER_DATA_ATBTE_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_MASTER_DATA_ATTRIBUTE')
                      AND NAME = 'DF_IVLD_MASTER_DATA_ATTRIBUTE_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_MASTER_DATA_ATTRIBUTE]
        ADD CONSTRAINT [DF_IVLD_MASTER_DATA_ATTRIBUTE_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
-------------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_MASTER_DATA_ATTRIBUTE'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_MASTER_DATA_ATTRIBUTE
        ADD CHECK_RECORD BIT NULL
  END

GO


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_MASTER_DATA_ATTRIBUTE')
                      AND NAME = 'DF_IVLD_MASTER_DATA_ATTRIBUTE_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_MASTER_DATA_ATTRIBUTE]
        ADD CONSTRAINT [DF_IVLD_MASTER_DATA_ATTRIBUTE_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
-----------------------------------------------------------------------------

-------------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_MASTER_DATA_ATTRIBUTE'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_MASTER_DATA_ATTRIBUTE
        ADD CHECK_RECORD BIT NULL
  END

GO


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_MASTER_DATA_ATTRIBUTE')
                      AND NAME = 'DF_IVLD_MASTER_DATA_ATTRIBUTE_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_MASTER_DATA_ATTRIBUTE]
        ADD CONSTRAINT [DF_IVLD_MASTER_DATA_ATTRIBUTE_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_MASTER_DATA_ATTRIBUTE'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_PRICE_SCHEDULE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_PRICE_SCHEDULE]
        (
           [PRICE_SCHEDULE_INTFID]       [NUMERIC](38, 0) NOT NULL,
           [PRICE_SCHEDULE_ID]           [VARCHAR](200) NULL,
           [PRICE_SCHEDULE_NO]           [VARCHAR](200) NULL,
           [PRICE_SCHEDULE_NAME]         [VARCHAR](200) NULL,
           [PRICE_SCHEDULE_TYPE]         [VARCHAR](200) NULL,
           [PRICE_SCHEDULE_CATEGORY]     [VARCHAR](200) NULL,
           [TRADE_CLASS]                 [VARCHAR](200) NULL,
           [PRICE_SCHEDULE_DESIGNATION]  [VARCHAR](200) NULL,
           [PARENT_PRICE_SCHEDULE_ID]    [VARCHAR](200) NULL,
           [PARENT_PRICE_SCHEDULE_NAME]  [VARCHAR](200) NULL,
           [PRICE_SCHEDULE_STATUS]       [VARCHAR](200) NULL,
           [PRICE_SCHEDULE_START_DATE]   [VARCHAR](200) NULL,
           [PRICE_SCHEDULE_END_DATE]     [VARCHAR](200) NULL,
           [ITEM_ID]                     [VARCHAR](200) NULL,
           [IDENTIFIER_CODE_QUALIFIER]   [VARCHAR](200) NULL,
           [ITEM_NO]                     [VARCHAR](200) NULL,
           [ITEM_NAME]                   [VARCHAR](200) NULL,
           [ATTACHED_STATUS]             [VARCHAR](200) NULL,
           [ATTACHED_DATE]               [VARCHAR](200) NULL,
           [CONTRACT_PRICE_START_DATE]   [VARCHAR](200) NULL,
           [CONTRACT_PRICE_END_DATE]     [VARCHAR](200) NULL,
           [PRICE_TYPE]                  [VARCHAR](200) NULL,
           [CONTRACT_PRICE]              [VARCHAR](200) NULL,
           [PRICE_REVISION]              [VARCHAR](200) NULL,
           [REVISION_DATE]               [VARCHAR](200) NULL,
           [PRICE_PROTECTION_START_DATE] [VARCHAR](200) NULL,
           [PRICE_PROTECTION_END_DATE]   [VARCHAR](200) NULL,
           [PRICE_TOLERANCE_TYPE]        [VARCHAR](200) NULL,
           [PRICE_TOLERANCE]             [VARCHAR](200) NULL,
           [BASE_PRICE]                  [VARCHAR](200) NULL,
           [PRICE_TOLERANCE_FREQUENCY]   [VARCHAR](200) NULL,
           [PRICE_TOLERANCE_INTERVAL]    [VARCHAR](200) NULL,
           [PRICE_PLAN_ID]               [VARCHAR](200) NULL,
           [PRICE_PLAN_NAME]             [VARCHAR](200) NULL,
           [SUGGESTED_PRICE]             [VARCHAR](200) NULL,
           [CONTRACT_ID]                 [VARCHAR](200) NULL,
           [CFP_ID]                      [VARCHAR](200) NULL,
           [MFP_ID]                      [VARCHAR](200) NULL,
           [IFP_ID]                      [VARCHAR](200) NULL,
           [PRICE]                       [VARCHAR](200) NULL,
           [CREATED_BY]                  [VARCHAR](200) NULL,
           [CREATED_DATE]                [DATETIME] NULL,
           [MODIFIED_BY]                 [VARCHAR](200) NULL,
           [MODIFIED_DATE]               [DATETIME] NULL,
           [BATCH_ID]                    [VARCHAR](200) NULL,
           [SOURCE]                      [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]       [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]          [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]          [DATETIME] NULL,
           [ERROR_CODE]                  [VARCHAR](200) NULL,
           [ERROR_FIELD]                 [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_PRICE_SCHEDULE'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_PRICE_SCHEDULE
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_PRICE_SCHEDULE'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_PRICE_SCHEDULE
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_PRICE_SCHEDULE')
                      AND NAME = 'DF_IVLD_PRICE_SCHEDULE_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_PRICE_SCHEDULE]
        ADD CONSTRAINT [DF_IVLD_PRICE_SCHEDULE_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_PRICE_SCHEDULE'
                      AND COLUMN_NAME = 'IVLD_PRICE_SCHEDULE_SID'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_PRICE_SCHEDULE
        ADD IVLD_PRICE_SCHEDULE_SID INT IDENTITY(1,1) NOT NULL
  END
GO
--P.K for IVLD_PRICE_SCHEDULE
IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_PRICE_SCHEDULE'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'PK_IVLD_PRICE_SCHEDULE_IVLD_PRICE_SCHEDULE_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE [DBO].IVLD_PRICE_SCHEDULE
        ADD CONSTRAINT PK_IVLD_PRICE_SCHEDULE_IVLD_PRICE_SCHEDULE_SID PRIMARY KEY (IVLD_PRICE_SCHEDULE_SID)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_PRICE_SCHEDULE'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_PRICE_SCHEDULE
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_PRICE_SCHEDULE')
                      AND NAME = 'DF_IVLD_PRICE_SCHEDULE_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].IVLD_PRICE_SCHEDULE
        ADD CONSTRAINT DF_IVLD_PRICE_SCHEDULE_CHECK_RECORD DEFAULT (0) FOR CHECK_RECORD
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_PRICE_SCHEDULE'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_PRICE_SCHEDULE
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF EXISTS (SELECT 1
               FROM  IVLD_PRICE_SCHEDULE
               WHERE REPROCESSED_FLAG IS NULL)
			   
 BEGIN
     Update IVLD_PRICE_SCHEDULE SET REPROCESSED_FLAG='N' 
	 WHERE REPROCESSED_FLAG IS NULL     
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_PRICE_SCHEDULE')
                      AND NAME = 'DF_IVLD_PRICE_SCHEDULE_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_PRICE_SCHEDULE
        ADD CONSTRAINT DF_IVLD_PRICE_SCHEDULE_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_PRICE_SCHEDULE'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_REBATE_PLAN'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_REBATE_PLAN]
        (
           [REBATE_PLAN_INTFID]         [NUMERIC](38, 0) NOT NULL,
           [REBATE_PLAN_ID]             [VARCHAR](200) NULL,
           [REBATE_PLAN_NO]             [VARCHAR](200) NULL,
           [REBATE_PLAN_NAME]           [VARCHAR](200) NULL,
           [REBATE_PLAN_STATUS]         [VARCHAR](200) NULL,
           [REBATE_PLAN_TYPE]           [VARCHAR](200) NULL,
           [INTERNAL_NOTES]             [VARCHAR](1000) NULL,
           [FORMULA_TYPE]               [VARCHAR](200) NULL,
           [BOGO_ELIGIBLE]              [VARCHAR](200) NULL,
           [SELF_GROWTH_INDICATOR]      [VARCHAR](200) NULL,
           [SELF_GROWTH_REFERENCE]      [VARCHAR](200) NULL,
           [SELF_GROWTH_FROM]           [VARCHAR](200) NULL,
           [SELF_GROWTH_TO]             [VARCHAR](200) NULL,
           [MARKET_SHARE_INDICATOR]     [VARCHAR](200) NULL,
           [MARKET_SHARE_REFERENCE]     [VARCHAR](200) NULL,
           [MARKET_SHARE_FROM]          [VARCHAR](200) NULL,
           [MARKET_SHARE_TO]            [VARCHAR](200) NULL,
           [TIER_FORMULA_ID]            [VARCHAR](200) NULL,
           [TIER_FORMULA_NO]            [VARCHAR](200) NULL,
           [TIER_FORMULA_NAME]          [VARCHAR](200) NULL,
           [REBATE_STRUCTURE]           [VARCHAR](200) NULL,
           [REBATE_RANGE_BASED_ON]      [VARCHAR](200) NULL,
           [REBATE_BASED_ON]            [VARCHAR](200) NULL,
           [REBATE_RULE]                [VARCHAR](200) NULL,
           [REBATE_PLAN_TIER_ID]        [VARCHAR](200) NULL,
           [TIER_FROM]                  [VARCHAR](200) NULL,
           [TIER_TO]                    [VARCHAR](200) NULL,
           [TIER_LEVEL]                 [VARCHAR](200) NULL,
           [TIER_OPERATOR]              [VARCHAR](200) NULL,
           [TIER_VALUE]                 [VARCHAR](200) NULL,
           [FREE_AMOUNT]                [VARCHAR](200) NULL,
           [TIER_TOLERANCE]             [VARCHAR](200) NULL,
           [SECONDARY_REBATE_PLAN_ID]   [VARCHAR](200) NULL,
           [SECONDARY_REBATE_PLAN_NO]   [VARCHAR](200) NULL,
           [SECONDARY_REBATE_PLAN_NAME] [VARCHAR](200) NULL,
           [CONTRACT_ID]                [VARCHAR](200) NULL,
           [CFP_ID]                     [VARCHAR](200) NULL,
           [MFP_ID]                     [VARCHAR](200) NULL,
           [IFP_ID]                     [VARCHAR](200) NULL,
           [PRICE_SCHEDULE_ID]          [VARCHAR](200) NULL,
           [REBATE_SCHEDULE_ID]         [VARCHAR](200) NULL,
           [CREATED_BY]                 [VARCHAR](200) NULL,
           [CREATED_DATE]               [DATETIME] NULL,
           [MODIFIED_BY]                [VARCHAR](200) NULL,
           [MODIFIED_DATE]              [DATETIME] NULL,
           [BATCH_ID]                   [VARCHAR](200) NULL,
           [SOURCE]                     [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]      [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]         [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]         [DATETIME] NULL,
           [ERROR_CODE]                 [VARCHAR](200) NULL,
           [ERROR_FIELD]                [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_REBATE_PLAN'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_REBATE_PLAN
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_REBATE_PLAN'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_REBATE_PLAN
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_REBATE_PLAN')
                      AND NAME = 'DF_IVLD_REBATE_PLAN_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_REBATE_PLAN]
        ADD CONSTRAINT [DF_IVLD_REBATE_PLAN_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_REBATE_PLAN'
                      AND COLUMN_NAME = 'IVLD_REBATE_PLAN_SID'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_REBATE_PLAN
        ADD IVLD_REBATE_PLAN_SID INT IDENTITY(1,1) NOT NULL
  END
GO
--P.K for IVLD_REBATE_PLAN
IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_REBATE_PLAN'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'PK_IVLD_REBATE_PLAN_IVLD_REBATE_PLAN_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE [DBO].IVLD_REBATE_PLAN
        ADD CONSTRAINT PK_IVLD_REBATE_PLAN_IVLD_REBATE_PLAN_SID PRIMARY KEY (IVLD_REBATE_PLAN_SID)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_REBATE_PLAN'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_REBATE_PLAN
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_REBATE_PLAN')
                      AND NAME = 'DF_IVLD_REBATE_PLAN_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].IVLD_REBATE_PLAN
        ADD CONSTRAINT DF_IVLD_REBATE_PLAN_CHECK_RECORD DEFAULT (0) FOR CHECK_RECORD
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_REBATE_PLAN'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_REBATE_PLAN
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF EXISTS (SELECT 1
               FROM  IVLD_REBATE_PLAN
               WHERE REPROCESSED_FLAG IS NULL)
			   
 BEGIN
     Update IVLD_REBATE_PLAN SET REPROCESSED_FLAG='N' 
	 WHERE REPROCESSED_FLAG IS NULL     
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_REBATE_PLAN')
                      AND NAME = 'DF_IVLD_REBATE_PLAN_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_REBATE_PLAN
        ADD CONSTRAINT DF_IVLD_REBATE_PLAN_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_REBATE_PLAN'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_REBATE_SCHEDULE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_REBATE_SCHEDULE]
        (
           [REBATE_SCHEDULE_INTFID]         [NUMERIC](38, 0) NOT NULL,
           [REBATE_SCHEDULE_ID]             [VARCHAR](200) NULL,
           [REBATE_SCHEDULE_NO]             [VARCHAR](200) NULL,
           [REBATE_SCHEDULE_NAME]           [VARCHAR](200) NULL,
           [REBATE_SCHEDULE_TYPE]           [VARCHAR](200) NULL,
           [REBATE_PROGRAM_TYPE]            [VARCHAR](200) NULL,
           [REBATE_SCHEDULE_CATEGORY]       [VARCHAR](200) NULL,
           [TRADE_CLASS]                    [VARCHAR](200) NULL,
           [REBATE_SCHEDULE_DESIGNATION]    [VARCHAR](200) NULL,
           [PARENT_REBATE_SCHEDULE_ID]      [VARCHAR](200) NULL,
           [PARENT_REBATE_SCHEDULE_NAME]    [VARCHAR](200) NULL,
           [REBATE_SCHEDULE_STATUS]         [VARCHAR](200) NULL,
           [REBATE_SCHEDULE_TRANS_REF_ID]   [VARCHAR](200) NULL,
           [REBATE_SCHEDULE_TRANS_REF_NO]   [VARCHAR](200) NULL,
           [REBATE_SCHEDULE_TRANS_REF_NAME] [VARCHAR](200) NULL,
           [PAYMENT_METHOD]                 [VARCHAR](200) NULL,
           [PAYMENT_FREQUENCY]              [VARCHAR](200) NULL,
           [PAYMENT_TERMS]                  [VARCHAR](200) NULL,
           [REBATE_FREQUENCY]               [VARCHAR](200) NULL,
           [CALENDAR]                       [VARCHAR](200) NULL,
           [REBATE_PROCESSING_TYPE]         [VARCHAR](200) NULL,
           [VALIDATION_PROFILE]             [VARCHAR](200) NULL,
           [REBATE_RULE_TYPE]               [VARCHAR](200) NULL,
           [REBATE_RULE_ASSOCIATION]        [VARCHAR](200) NULL,
           [REBATE_PLAN_LEVEL]              [VARCHAR](200) NULL,
           [INTEREST_BEARING_INDICATOR]     [VARCHAR](200) NULL,
           [INTEREST_BEARING_BASIS]         [VARCHAR](200) NULL,
           [PAYMENT_GRACE_PERIOD]           [VARCHAR](200) NULL,
           [MAKE_PAYABLE_TO]                [VARCHAR](200) NULL,
           [ADDRESS_1]                      [VARCHAR](200) NULL,
           [ADDRESS_2]                      [VARCHAR](200) NULL,
           [CITY]                           [VARCHAR](200) NULL,
           [STATE]                          [VARCHAR](200) NULL,
           [ZIP_CODE]                       [VARCHAR](200) NULL,
           [ITEM_ID]                        [VARCHAR](200) NULL,
           [IDENTIFIER_CODE_QUALIFIER]      [VARCHAR](200) NULL,
           [ITEM_NO]                        [VARCHAR](200) NULL,
           [ITEM_NAME]                      [VARCHAR](200) NULL,
           [ATTACHED_STATUS]                [VARCHAR](200) NULL,
           [ATTACHED_DATE]                  [VARCHAR](200) NULL,
           [ITEM_START_DATE]                [VARCHAR](200) NULL,
           [ITEM_END_DATE]                  [VARCHAR](200) NULL,
           [FORMULA_TYPE]                   [VARCHAR](200) NULL,
           [FORMULA_ID]                     [VARCHAR](200) NULL,
           [FORMULA_NO]                     [VARCHAR](200) NULL,
           [FORMULA_NAME]                   [VARCHAR](200) NULL,
           [REBATE_PLAN_ID]                 [VARCHAR](200) NULL,
           [REBATE_AMOUNT]                  [VARCHAR](200) NULL,
           [ITEM_REBATE_START_DATE]         [VARCHAR](200) NULL,
           [ITEM_REBATE_END_DATE]           [VARCHAR](200) NULL,
           [BUNDLE_NO]                      [VARCHAR](200) NULL,
           [INTERNAL_NOTES]                 [VARCHAR](1000) NULL,
           [CONTRACT_ID]                    [VARCHAR](200) NULL,
           [CFP_ID]                         [VARCHAR](200) NULL,
           [MFP_ID]                         [VARCHAR](200) NULL,
           [IFP_ID]                         [VARCHAR](200) NULL,
           [PRICE_SCHEDULE_ID]              [VARCHAR](200) NULL,
           [UDC1]                           [VARCHAR](200) NULL,
           [UDC2]                           [VARCHAR](200) NULL,
           [UDC3]                           [VARCHAR](200) NULL,
           [UDC4]                           [VARCHAR](200) NULL,
           [UDC5]                           [VARCHAR](200) NULL,
           [UDC6]                           [VARCHAR](200) NULL,
           [FORMULA_METHOD_ID]              [VARCHAR](200) NULL,
           [CREATED_BY]                     [VARCHAR](200) NULL,
           [CREATED_DATE]                   [DATETIME] NULL,
           [MODIFIED_BY]                    [VARCHAR](200) NULL,
           [MODIFIED_DATE]                  [DATETIME] NULL,
           [BATCH_ID]                       [VARCHAR](200) NULL,
           [SOURCE]                         [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]          [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]             [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]             [DATETIME] NULL,
           [ERROR_CODE]                     [VARCHAR](200) NULL,
           [ERROR_FIELD]                    [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_REBATE_SCHEDULE'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_REBATE_SCHEDULE
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_REBATE_SCHEDULE'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_REBATE_SCHEDULE
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_REBATE_SCHEDULE')
                      AND NAME = 'DF_IVLD_REBATE_SCHEDULE_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_REBATE_SCHEDULE]
        ADD CONSTRAINT [DF_IVLD_REBATE_SCHEDULE_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO

--IVLD_REBATE_SCHEDULE
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_REBATE_SCHEDULE'
                      AND COLUMN_NAME = 'IVLD_REBATE_SCHEDULE_SID'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_REBATE_SCHEDULE
        ADD IVLD_REBATE_SCHEDULE_SID INT IDENTITY(1,1) NOT NULL
  END
GO
--P.K for IVLD_REBATE_SCHEDULE
IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_REBATE_SCHEDULE'
                     AND Schema_name(SCHEMA_ID) = 'DBO'
                     AND NAME = 'PK_IVLD_REBATE_SCHEDULE_IVLD_REBATE_SCHEDULE_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE [DBO].IVLD_REBATE_SCHEDULE
        ADD CONSTRAINT PK_IVLD_REBATE_SCHEDULE_IVLD_REBATE_SCHEDULE_SID PRIMARY KEY (IVLD_REBATE_SCHEDULE_SID)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_REBATE_SCHEDULE'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_REBATE_SCHEDULE
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_REBATE_SCHEDULE')
                      AND NAME = 'DF_IVLD_REBATE_SCHEDULE_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].IVLD_REBATE_SCHEDULE
        ADD CONSTRAINT DF_IVLD_REBATE_SCHEDULE_CHECK_RECORD DEFAULT (0) FOR CHECK_RECORD
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_REBATE_SCHEDULE'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_REBATE_SCHEDULE
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO


IF EXISTS (SELECT 1
               FROM  IVLD_REBATE_SCHEDULE
               WHERE REPROCESSED_FLAG IS NULL)
			   
 BEGIN
     Update IVLD_REBATE_SCHEDULE SET REPROCESSED_FLAG='N' 
	 WHERE REPROCESSED_FLAG IS NULL     
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_REBATE_SCHEDULE')
                      AND NAME = 'DF_IVLD_REBATE_SCHEDULE_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_REBATE_SCHEDULE
        ADD CONSTRAINT DF_IVLD_REBATE_SCHEDULE_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_REBATE_SCHEDULE'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_SALES_MASTER'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_SALES_MASTER]
        (
           [SALES_INTFID]              [NUMERIC](38, 0) NOT NULL,
           [SALES_ID]                  [VARCHAR](200) NULL,
           [ORGANIZATION_KEY]          [VARCHAR](200) NULL,
           [ITEM_ID]                   [VARCHAR](200) NULL,
           [ITEM_NO]                   [VARCHAR](200) NULL,
           [ACCOUNT_CODE_QUALIFIER]    [VARCHAR](200) NULL,
           [PARENT_ITEM_ID]            [VARCHAR](200) NULL,
           [PARENT_ITEM_NO]            [VARCHAR](200) NULL,
           [ITEM_UOM]                  [VARCHAR](200) NULL,
           [DOC_TYPE]                  [VARCHAR](200) NULL,
           [ORDER_NUMBER]              [VARCHAR](200) NULL,
           [INVOICE_NUMBER]            [VARCHAR](200) NULL,
           [INVOICE_LINE_NUMBER]       [VARCHAR](200) NULL,
           [INVOICE_DATE]              [VARCHAR](200) NULL,
           [ORDER_TYPE]                [VARCHAR](200) NULL,
           [ORDER_SUBTYPE]             [VARCHAR](200) NULL,
           [ANALYSIS_CODE]             [VARCHAR](200) NULL,
           [PRICE_ADJUSTMENT_NAME]     [VARCHAR](200) NULL,
           [RECORD_SEQUENCE]           [VARCHAR](200) NULL,
           [PRICE]                     [VARCHAR](200) NULL,
           [QUANTITY]                  [VARCHAR](200) NULL,
           [LOT_NO]                    [VARCHAR](200) NULL,
           [AMOUNT]                    [VARCHAR](200) NULL,
           [CONTRACT_ID]               [VARCHAR](200) NULL,
           [CONTRACT_NO]               [VARCHAR](200) NULL,
           [ACCOUNT_TYPE]              [VARCHAR](200) NULL,
           [CUSTOMER_SUBTYPE]          [VARCHAR](200) NULL,
           [WHOLESALE_OWNER_ID]        [VARCHAR](200) NULL,
           [ACCOUNT_NO]                [VARCHAR](200) NULL,
           [ACCOUNT_NAME]              [VARCHAR](200) NULL,
           [IDENTIFIER_CODE_QUALIFIER] [VARCHAR](200) NULL,
           [CUSTOMER_COMPANY_CODE]     [VARCHAR](200) NULL,
           [IS_ACTIVE]                 [VARCHAR](200) NULL,
           [COMPANY_ID]                [VARCHAR](200) NULL,
           [DIVISION_ID]               [VARCHAR](200) NULL,
           [MARKET_ID]                 [VARCHAR](200) NULL,
           [BRAND_ID]                  [VARCHAR](200) NULL,
           [UPLOAD_DATE]               [VARCHAR](200) NULL,
           [ORDER_RECEIVED_DATE]       [VARCHAR](200) NULL,
           [PROVISION_ID]              [VARCHAR](200) NULL,
           [ACCOUNT_ID]                [VARCHAR](200) NULL,
           [CREATED_BY]                [VARCHAR](200) NULL,
           [CREATED_DATE]              [DATETIME] NULL,
           [MODIFIED_BY]               [VARCHAR](200) NULL,
           [MODIFIED_DATE]             [DATETIME] NULL,
           [BATCH_ID]                  [VARCHAR](200) NULL,
           [SOURCE]                    [VARCHAR](200) NULL,
           [ADD_CHG_DEL_INDICATOR]     [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]        [VARCHAR](2000) NULL,
           [INTF_INSERTED_DATE]        [DATETIME] NULL,
           [ERROR_CODE]                [VARCHAR](200) NULL,
           [ERROR_FIELD]               [VARCHAR](500) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_SALES_MASTER'
                      AND COLUMN_NAME = 'ERROR_CODE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_SALES_MASTER
        ADD ERROR_CODE [VARCHAR](200)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_SALES_MASTER'
                      AND COLUMN_NAME = 'ERROR_FIELD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_SALES_MASTER
        ADD ERROR_FIELD VARCHAR(500)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_SALES_MASTER'
                      AND COLUMN_NAME = 'IVLD_SALES_MASTER_SID')
  BEGIN
      ALTER TABLE IVLD_SALES_MASTER
        ADD IVLD_SALES_MASTER_SID INT IDENTITY(1, 1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_SALES_MASTER'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_SALES_MASTER
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_SALES_MASTER')
                      AND NAME = 'DF_IVLD_SALES_MASTER_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_SALES_MASTER
        ADD CONSTRAINT DF_IVLD_SALES_MASTER_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  OBJECT_NAME(PARENT_OBJECT_ID) = 'IVLD_SALES_MASTER'
                     AND NAME = 'PK_IVLD_SALES_MASTER_IVLD_SALES_MASTER_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_SALES_MASTER
        ADD CONSTRAINT PK_IVLD_SALES_MASTER_IVLD_SALES_MASTER_SID PRIMARY KEY(IVLD_SALES_MASTER_SID)
  END

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_SALES_MASTER')
                      AND NAME = 'DF_IVLD_SALES_MASTER_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_SALES_MASTER]
        ADD CONSTRAINT [DF_IVLD_SALES_MASTER_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO
----------------------------cel-633--------------------------------------

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_SALES_MASTER'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_SALES_MASTER
        ADD CHECK_RECORD BIT NULL
  END

GO


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_SALES_MASTER')
                      AND NAME = 'DF_IVLD_SALES_MASTER_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_SALES_MASTER]
        ADD CONSTRAINT [DF_IVLD_SALES_MASTER_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
-------------------------------------------------------------------------

----------------------------cel-633--------------------------------------

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_SALES_MASTER'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_SALES_MASTER
        ADD CHECK_RECORD BIT NULL
  END

GO


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_SALES_MASTER')
                      AND NAME = 'DF_IVLD_SALES_MASTER_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_SALES_MASTER]
        ADD CONSTRAINT [DF_IVLD_SALES_MASTER_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_SALES_MASTER'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

--------------------------------------------------IVLD_GL_POSTING-----------------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_GL_POSTING'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [dbo].[IVLD_GL_POSTING]
        (
           [IVLD_GL_POSTING_SID]   INT IDENTITY(1, 1) NOT NULL,
           [GL_POSTING_INTFID]     [NUMERIC](38, 0) NULL,
           [ACCRUAL_ID]            [VARCHAR](200) NULL,
           [STATUS]                [VARCHAR](200) NULL,
           [BATCH_ID]              [VARCHAR](200) NULL,
           [SOURCE]                [VARCHAR](200) NULL,
           [CREATED_BY]            [VARCHAR](200)  NULL,
           [CREATED_DATE]          [DATETIME]  NULL,
           [MODIFIED_BY]           [VARCHAR](200) NULL,
           [MODIFIED_DATE]         [DATETIME] NULL,
           [ADD_CHG_DEL_INDICATOR] [VARCHAR](200) NULL,
           [REASON_FOR_FAILURE]    [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]    [DATETIME] NULL,
           [ERROR_CODE]            [VARCHAR](200) NULL,
           [ERROR_FIELD]           [VARCHAR](500) NULL,
		   REPROCESSED_FLAG 		CHAR(1)
        )
  END

GO

IF NOT EXISTS(SELECT 'X'
              FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE  CONSTRAINT_NAME = 'PK_IVLD_GL_POSTING_IVLD_GL_POSTING_SID'
                     AND TABLE_NAME = 'IVLD_GL_POSTING')
  BEGIN
      ALTER TABLE [DBO].[IVLD_GL_POSTING]
        ADD CONSTRAINT PK_IVLD_GL_POSTING_IVLD_GL_POSTING_SID PRIMARY KEY(IVLD_GL_POSTING_SID)
  END

GO
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_GL_POSTING'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_GL_POSTING
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_GL_POSTING')
                      AND NAME = 'DF_IVLD_GL_POSTING_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_GL_POSTING
        ADD CONSTRAINT DF_IVLD_GL_POSTING_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('DBO.IVLD_GL_POSTING')
                      AND NAME = 'DF_IVLD_GL_POSTING_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_GL_POSTING]
        ADD CONSTRAINT DF_IVLD_GL_POSTING_INTF_INSERTED_DATE DEFAULT (Getdate()) FOR INTF_INSERTED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_GL_POSTING'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO 

--------------------------------------------------IVLD_ACCRUAL_INBOUND----------------------------------------------\
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [dbo].[IVLD_ACCRUAL_INBOUND]
        (
           [IVLD_ACCRUAL_INBOUND_SID]  INT IDENTITY(1, 1) NOT NULL,
           [ACCRUAL_INTFID]            [NUMERIC](38, 0) NOT NULL,
           [ACCRUAL_ID]                [VARCHAR](200) NULL,
           [SALES_MASTER_ID]           [VARCHAR](200) NULL,
           [GL_ACCOUNT]                [VARCHAR](200) NULL,
           [COMPANY_ID]                [VARCHAR](200) NULL,
           [COMPANY_NO]                [VARCHAR](200) NULL,
           [COMP_IDENT_CODE_QUALIFIER] [VARCHAR](200) NULL,
           [COMPANY_COST_CENTER]       [VARCHAR](200) NULL,
           [ACCOUNT_ID]                [VARCHAR](200) NULL,
           [ACCOUNT_NO]                [VARCHAR](200) NULL,
           [ACCOUNT_NAME]              [VARCHAR](100) NULL,
           [ACCT_IDENT_CODE_QUALIFIER] [VARCHAR](200) NULL,
           [ITEM_ID]                   [VARCHAR](200) NULL,
           [ITEM_NO]                   [VARCHAR](200) NULL,
           [ITEM_IDENT_CODE_QUALIFIER] [VARCHAR](200) NULL,
           [CONTRACT_ID]               [VARCHAR](200) NULL,
           [BRAND_ID]                  [VARCHAR](200) NULL,
           [CATEGORY_ID]               [VARCHAR](200) NULL,
           [PROVISION_ID]              [VARCHAR](200) NULL,
           [ACCRUAL_TYPE]              [VARCHAR](200) NULL,
           [ACCRUAL_PERIOD_START_DATE] [VARCHAR](200) NULL,
           [ACCRUAL_PERIOD_END_DATE]   [VARCHAR](200) NULL,
           [AMOUNT]                    [VARCHAR](200) NULL,
           [SUB_LEDGER]                [VARCHAR](200) NULL,
           [SUB_LEDGER_TYPE]           [VARCHAR](200) NULL,
           [DOCUMENT_TYPE]             [VARCHAR](200) NULL,
           [POSTING_DATE]              [VARCHAR](200) NULL,
           [GL_DATE]                   [VARCHAR](200) NULL,
           [RECORD_CREATED_DATE]       [VARCHAR](200) NULL,		   
           [BATCH_ID]                  [VARCHAR](200) NULL,
           [SOURCE]                    [VARCHAR](200) NULL,
           [CREATED_BY]                [VARCHAR](200)  NULL,
           [CREATED_DATE]              [DATETIME]  NULL,
           [MODIFIED_BY]               [VARCHAR](200)  NULL,
           [MODIFIED_DATE]             [DATETIME] NULL,
           [ADD_CHG_DEL_INDICATOR]     [VARCHAR](10) NULL,
           [REASON_FOR_FAILURE]        [VARCHAR](1000) NULL,
           [INTF_INSERTED_DATE]        [DATETIME] NOT NULL,
           [ERROR_CODE]                [VARCHAR](200) NULL,
           [ERROR_FIELD]               [VARCHAR](500) NULL,
		   REPROCESSED_FLAG 			CHAR(1),
		   [CHECK_RECORD]               [BIT] NOT NULL
        )
  END

GO

IF NOT EXISTS(SELECT 'X'
              FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE  CONSTRAINT_NAME = 'PK_IVLD_ACCRUAL_INBOUND_IVLD_ACCRUAL_INBOUND_SID'
                     AND TABLE_NAME = 'IVLD_ACCRUAL_INBOUND')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ACCRUAL_INBOUND]
        ADD CONSTRAINT PK_IVLD_ACCRUAL_INBOUND_IVLD_ACCRUAL_INBOUND_SID PRIMARY KEY(IVLD_ACCRUAL_INBOUND_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('DBO.IVLD_ACCRUAL_INBOUND')
                      AND NAME = 'DF_IVLD_ACCRUAL_INBOUND_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ACCRUAL_INBOUND]
        ADD CONSTRAINT DF_IVLD_ACCRUAL_INBOUND_INTF_INSERTED_DATE DEFAULT (Getdate()) FOR INTF_INSERTED_DATE
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
                      AND COLUMN_NAME = 'REPROCESSED_FLAG'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD REPROCESSED_FLAG CHAR(1)
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('IVLD_ACCRUAL_INBOUND')
                      AND NAME = 'DF_IVLD_ACCRUAL_INBOUND_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD CONSTRAINT DF_IVLD_ACCRUAL_INBOUND_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO
----------------cel-633---------------------
IF  EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO' AND IS_NULLABLE='NO')
  BEGIN
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ALTER COLUMN  CHECK_RECORD BIT NULL
  END


GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ACCRUAL_INBOUND')
                      AND NAME = 'DF_IVLD_ACCRUAL_INBOUND_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ACCRUAL_INBOUND]
        ADD CONSTRAINT [DF_IVLD_ACCRUAL_INBOUND_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
------------------------------------

----------------cel-633---------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD CHECK_RECORD BIT NULL
  END


GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ACCRUAL_INBOUND')
                      AND NAME = 'DF_IVLD_ACCRUAL_INBOUND_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ACCRUAL_INBOUND]
        ADD CONSTRAINT [DF_IVLD_ACCRUAL_INBOUND_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

IF  EXISTS (SELECT 1
FROM SYS.STATS
WHERE OBJECT_NAME(OBJECT_ID) = 'IVLD_ACCRUAL_INBOUND'
	AND AUTO_CREATED = 0
   AND NAME='CREATED_DATE')
  BEGIN
      DROP STATISTICS IVLD_ACCRUAL_INBOUND.CREATED_DATE
  END
GO


IF  EXISTS (SELECT 1
FROM SYS.STATS
WHERE OBJECT_NAME(OBJECT_ID) = 'IVLD_ACCRUAL_INBOUND'
	AND AUTO_CREATED = 0
   AND NAME='MODIFIED_DATE')
  BEGIN
      DROP STATISTICS IVLD_ACCRUAL_INBOUND.MODIFIED_DATE
  END
GO


IF  EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
                      AND COLUMN_NAME = 'CREATED_DATE'
                      AND TABLE_SCHEMA = 'DBO' )
  BEGIN
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ALTER COLUMN  CREATED_DATE VARCHAR(200) 
  END
GO

IF  EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
                      AND COLUMN_NAME = 'MODIFIED_DATE'
                      AND TABLE_SCHEMA = 'DBO' )
  BEGIN
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ALTER COLUMN  MODIFIED_DATE VARCHAR(200) 
  END
GO


DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_ACCRUAL_INBOUND'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO 
----------------------------------------------------------------

IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'COMPANY_NAME' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD COMPANY_NAME VARCHAR(100)
  END
GO


IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'BUSINESS_UNIT_ID' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD BUSINESS_UNIT_ID VARCHAR(50)  NULL
  END
GO
--------------NOT NULL QUERY------------------

IF EXISTS (
    SELECT 1 FROM IVLD_ACCRUAL_INBOUND
      WHERE BUSINESS_UNIT_ID IS NULL)
BEGIN

UPDATE IVLD_ACCRUAL_INBOUND
SET BUSINESS_UNIT_ID = 1
WHERE BUSINESS_UNIT_ID IS NULL

END
GO

IF EXISTS (SELECT 1
           FROM   SYS.STATS
           WHERE  OBJECT_NAME(OBJECT_ID) = 'IVLD_ACCRUAL_INBOUND'
                  AND NAME = 'BUSINESS_UNIT_ID')
  BEGIN
      DROP STATISTICS IVLD_ACCRUAL_INBOUND.BUSINESS_UNIT_ID
  END



GO


IF EXISTS (SELECT 1
           FROM   INFORMATION_SCHEMA.COLUMNS
           WHERE  TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
                  AND COLUMN_NAME = 'BUSINESS_UNIT_ID'
                  AND IS_NULLABLE = 'YES')
  BEGIN
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ALTER COLUMN BUSINESS_UNIT_ID VARCHAR(50) NOT NULL
  END

GO


------------------------------------------------------
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'BUSINESS_UNIT_NO' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD BUSINESS_UNIT_NO VARCHAR(50) 
  END
GO
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'BU_IDENT_CODE_QUALIFIER' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD BU_IDENT_CODE_QUALIFIER VARCHAR(50) 
  END
GO
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'BUSINESS_UNIT_NAME' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD BUSINESS_UNIT_NAME VARCHAR(100) 
  END
GO
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'ITEM_NAME' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD ITEM_NAME VARCHAR(100) 
  END
GO
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'BRAND_NAME' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD BRAND_NAME VARCHAR(30) 
  END
GO
IF EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'AMOUNT' AND TABLE_SCHEMA = 'DBO')
    BEGIN

     exec sp_RENAME 'IVLD_ACCRUAL_INBOUND.AMOUNT', 'DEDUCTION_AMOUNT' , 'COLUMN'
  END
GO

IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'ACCRUAL_CATEGORY' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD ACCRUAL_CATEGORY VARCHAR(25) 
  END
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'ACCRUAL_SCHEDULE_TYPE' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD ACCRUAL_SCHEDULE_TYPE VARCHAR(25) 
  END
GO
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'ACCRUAL_PROGRAM_TYPE' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND 
        ADD ACCRUAL_PROGRAM_TYPE VARCHAR(25) 
  END
GO
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'SALES_AMOUNT' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD SALES_AMOUNT NUMERIC(22,6) 
  END
GO
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'QUANTITY' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD QUANTITY NUMERIC(22,6) 
  END
GO
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'ACCRUAL_UDC1' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD ACCRUAL_UDC1 VARCHAR(100) 
  END
GO
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'ACCRUAL_UDC2' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD ACCRUAL_UDC2 VARCHAR(100) 
  END
GO
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'ACCRUAL_UDC3' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD ACCRUAL_UDC3 VARCHAR(100) 
  END
GO
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'ACCRUAL_UDC4' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD ACCRUAL_UDC4 VARCHAR(100) 
  END
GO
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'ACCRUAL_UDC5' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD ACCRUAL_UDC5 VARCHAR(100) 
  END
GO
IF NOT EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'ACCRUAL_UDC6' AND TABLE_SCHEMA = 'DBO')
    BEGIN
                
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD ACCRUAL_UDC6 VARCHAR(100) 
  END
GO
  -----------------ALTER COLUMNS FROM NOT NULL TO NULL COLUMN------------------
IF EXISTS (SELECT 1
           FROM   SYS.STATS
           WHERE  OBJECT_NAME(OBJECT_ID) = 'IVLD_ACCRUAL_INBOUND'
                  AND NAME = 'ACCRUAL_INTFID')
  BEGIN
      DROP STATISTICS IVLD_ACCRUAL_INBOUND.ACCRUAL_INTFID
  END
  GO

IF EXISTS (SELECT 1
           FROM   INFORMATION_SCHEMA.COLUMNS
           WHERE  TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
                  AND COLUMN_NAME = 'ACCRUAL_INTFID'
                  AND IS_NULLABLE = 'No')
  BEGIN
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ALTER COLUMN ACCRUAL_INTFID NUMERIC NULL
  END
GO

IF EXISTS (SELECT 1
           FROM   SYS.STATS
           WHERE  OBJECT_NAME(OBJECT_ID) = 'IVLD_ACCRUAL_INBOUND'
                  AND NAME = 'BUSINESS_UNIT_ID')
  BEGIN
      DROP STATISTICS IVLD_ACCRUAL_INBOUND.BUSINESS_UNIT_ID
  END
  GO

IF EXISTS (SELECT 1
           FROM   INFORMATION_SCHEMA.COLUMNS
           WHERE  TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
                  AND COLUMN_NAME = 'BUSINESS_UNIT_ID'
                  AND IS_NULLABLE = 'No')
  BEGIN
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ALTER COLUMN BUSINESS_UNIT_ID VARCHAR(50) NULL
  END

GO
IF EXISTS (SELECT 1
           FROM   SYS.STATS
           WHERE  OBJECT_NAME(OBJECT_ID) = 'IVLD_ACCRUAL_INBOUND'
                  AND NAME = 'SALES_AMOUNT')
  BEGIN
      DROP STATISTICS IVLD_ACCRUAL_INBOUND.SALES_AMOUNT
  END
  GO

IF EXISTS (SELECT 1
           FROM   INFORMATION_SCHEMA.COLUMNS
           WHERE  TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
                  AND COLUMN_NAME = 'SALES_AMOUNT'
                  )
  BEGIN
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ALTER COLUMN SALES_AMOUNT VARCHAR(50) NULL
  END

GO
IF EXISTS (SELECT 1
           FROM   SYS.STATS
           WHERE  OBJECT_NAME(OBJECT_ID) = 'IVLD_ACCRUAL_INBOUND'
                  AND NAME = 'QUANTITY')
  BEGIN
      DROP STATISTICS IVLD_ACCRUAL_INBOUND.QUANTITY
  END
  GO
  
IF EXISTS (SELECT 1
           FROM   INFORMATION_SCHEMA.COLUMNS
           WHERE  TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
                  AND COLUMN_NAME = 'QUANTITY'
                  )
  BEGIN
      ALTER TABLE IVLD_ACCRUAL_INBOUND
        ALTER COLUMN QUANTITY VARCHAR(50) NULL
  END

GO
------------ADDITIONAL COLUMN----IVLD_ACCRUAL_INBOUND--------

IF NOT EXISTS (
		SELECT 1
		FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
			AND COLUMN_NAME = 'CONTRACT_NO'
			AND TABLE_SCHEMA = 'DBO'
		)
BEGIN
 ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD   CONTRACT_NO VARCHAR(200) 
END
GO

IF NOT EXISTS (
		SELECT 1
		FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
			AND COLUMN_NAME = 'CONTRACT_NAME'
			AND TABLE_SCHEMA = 'DBO'
		)
BEGIN
 ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD   CONTRACT_NAME VARCHAR(200) 
END
GO

IF NOT EXISTS (
		SELECT 1
		FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
			AND COLUMN_NAME = 'GL_COMPANY_MASTER_SID'
			AND TABLE_SCHEMA = 'DBO'
		)
BEGIN
 ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD   GL_COMPANY_MASTER_SID int 
END
GO

IF NOT EXISTS (
		SELECT 1
		FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
			AND COLUMN_NAME = 'GL_COMPANY_NAME'
			AND TABLE_SCHEMA = 'DBO'
		)
BEGIN
 ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD   GL_COMPANY_NAME VARCHAR(200) 
END
GO

IF NOT EXISTS (
		SELECT 1
		FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
			AND COLUMN_NAME = 'PROGRAM_TYPE'
			AND TABLE_SCHEMA = 'DBO'
		)
BEGIN
 ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD   PROGRAM_TYPE VARCHAR(200) 
END
GO

IF NOT EXISTS (
		SELECT 1
		FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
			AND COLUMN_NAME = 'PROGRAM_NO'
			AND TABLE_SCHEMA = 'DBO'
		)
BEGIN
 ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD   PROGRAM_NO VARCHAR(200) 
END
GO

IF NOT EXISTS (
		SELECT 1
		FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND'
			AND COLUMN_NAME = 'POSTING_INDICATOR'
			AND TABLE_SCHEMA = 'DBO'
		)
BEGIN
 ALTER TABLE IVLD_ACCRUAL_INBOUND
        ADD   POSTING_INDICATOR VARCHAR(200) 
END
GO
------------alter the column datatype in IVLD_ACCRUAL_INBOUND --------------

IF EXISTS (SELECT 1
           FROM   SYS.STATS
           WHERE  OBJECT_NAME(OBJECT_ID) = 'IVLD_ACCRUAL_INBOUND'
                  AND NAME = 'MODIFIED_DATE')
  BEGIN
      DROP STATISTICS IVLD_ACCRUAL_INBOUND.MODIFIED_DATE
  END 


IF  EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'MODIFIED_DATE' AND DATA_TYPE='VARCHAR' AND TABLE_SCHEMA = 'DBO')
    BEGIN

               ALTER TABLE IVLD_ACCRUAL_INBOUND
               ALTER COLUMN MODIFIED_DATE datetime
 END
Go


IF EXISTS (SELECT 1
           FROM   SYS.STATS
           WHERE  OBJECT_NAME(OBJECT_ID) = 'IVLD_ACCRUAL_INBOUND'
                  AND NAME = 'CREATED_DATE')
  BEGIN
      DROP STATISTICS IVLD_ACCRUAL_INBOUND.CREATED_DATE
  END 


IF  EXISTS(
    SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'IVLD_ACCRUAL_INBOUND' AND COLUMN_NAME  = 'CREATED_DATE' AND DATA_TYPE='VARCHAR' AND TABLE_SCHEMA = 'DBO')
    BEGIN

               ALTER TABLE IVLD_ACCRUAL_INBOUND
               ALTER COLUMN CREATED_DATE datetime
 END
Go

------------------------------------IVLD_DEMAND_ACTUAL--------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_DEMAND_ACTUAL'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_DEMAND_ACTUAL]
        (
           DEMAND_ACTUAL_INTERFACE_ID     [NUMERIC](38, 0) NOT NULL,
           FORECAST_TYPE                  [VARCHAR](200) NULL,
           FORECAST_YEAR                  [VARCHAR](200) NULL,
           FORECAST_MONTH                 [VARCHAR](200) NULL,
           ITEM_ID                        [VARCHAR](200) NULL,
           ITEM_IDENTIFIER_CODE_QUALIFIER [VARCHAR](200) NULL,
           ITEM_IDENTIFIER                [VARCHAR](200) NULL,
           BRAND_ID                       [VARCHAR](200) NULL,
           SEGMENT                        [VARCHAR](200) NULL,
           MARKET_SIZE_UNITS             [VARCHAR](200) NULL,
           MARKET_SHARE_RATIO             [VARCHAR](200) NULL,
           MARKET_SHARE_UNITS             [VARCHAR](200) NULL,
           TOTAL_DEMAND_UNITS             [VARCHAR](200) NULL,
           TOTAL_DEMAND_AMOUNT            [VARCHAR](200) NULL,
           GROSS_UNITS                    [VARCHAR](200) NULL,
           GROSS_PRICE                    [VARCHAR](200) NULL,
           GROSS_AMOUNT                   [VARCHAR](200) NULL,
           NET_SALES_PRICE                [VARCHAR](200) NULL,
           NET_SALES_AMOUNT               [VARCHAR](200) NULL,
           CREATED_BY                     [VARCHAR](200) NULL,
           CREATED_DATE                   [DATETIME] NULL,
           MODIFIED_BY                    [VARCHAR](200) NULL,
           MODIFIED_DATE                  [DATETIME] NULL,
           ADD_CHG_DEL_INDICATOR          [VARCHAR](200) NULL,
           BATCH_ID                       [VARCHAR](200) NULL,
           SOURCE                         [VARCHAR](200) NULL,
           COUNTRY                        [VARCHAR](200) NULL,
           ORGANIZATION_KEY               [VARCHAR](200) NULL,
           INTF_INSERTED_DATE             [DATETIME] NULL,
           REASON_FOR_FAILURE             [VARCHAR](1000) NULL,
           ERROR_CODE                     [VARCHAR] (200) NULL,
           ERROR_FIELD                    [VARCHAR](500) NULL,
           IVLD_DEMAND_ACTUAL_SID         [INT] IDENTITY(1, 1) NOT NULL,
           REPROCESSED_FLAG               CHAR(1) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_DEMAND_ACTUAL')
                      AND NAME = 'DF_IVLD_DEMAND_ACTUAL_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_DEMAND_ACTUAL
        ADD CONSTRAINT DF_IVLD_DEMAND_ACTUAL_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_DEMAND_ACTUAL'
                     AND NAME = 'PK_IVLD_DEMAND_ACTUAL_IVLD_DEMAND_ACTUAL_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_DEMAND_ACTUAL
        ADD CONSTRAINT PK_IVLD_DEMAND_ACTUAL_IVLD_DEMAND_ACTUAL_SID PRIMARY KEY(IVLD_DEMAND_ACTUAL_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_DEMAND_ACTUAL'
                      AND NAME = 'DF_IVLD_DEMAND_ACTUAL_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_DEMAND_ACTUAL]
        ADD CONSTRAINT [DF_IVLD_DEMAND_ACTUAL_INTF_INSERTED_DATE] DEFAULT (Getdate()) FOR INTF_INSERTED_DATE
  END

GO

--------------------------------cel-633--------------------------------------

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_DEMAND_ACTUAL'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_DEMAND_ACTUAL
        ADD CHECK_RECORD BIT NULL
  END

GO


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_DEMAND_ACTUAL')
                      AND NAME = 'DF_IVLD_DEMAND_ACTUAL_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_DEMAND_ACTUAL]
        ADD CONSTRAINT [DF_IVLD_DEMAND_ACTUAL_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
----------------------------------------------------------------------------

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_DEMAND_ACTUAL'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND Schema_name(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT Object_name(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               Schema_name(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND Schema_name(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + Quotename(@SCHEMANAME)
                       + '.' + Quotename(@TABLENAME) + '.'
                       + Quotename(@STATSNAME)

            --PRINT @SQL
            EXEC Sp_executesql
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + Quotename(C.NAME)
         + ' ON ' + Quotename(Schema_name(SCHEMA_ID))
         + '.' + Quotename(T.NAME) + ' ('
         + Quotename(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = Schema_name(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND Schema_name(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC Sp_executesql
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO 


-----------------------------------------------IVLD_DEMAND_FORECAST--------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_DEMAND_FORECAST'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE  [DBO].[IVLD_DEMAND_FORECAST]
        (
           DEMAND_FORECAST_INTERFACE_ID   [NUMERIC](38, 0) NOT NULL,
           FORECAST_TYPE                  [VARCHAR](200) NULL,
           FORECAST_YEAR                  [VARCHAR](200) NULL,
           FORECAST_MONTH                 [VARCHAR](200) NULL,
           ITEM_ID                        [VARCHAR](200) NULL,
           ITEM_IDENTIFIER_CODE_QUALIFIER [VARCHAR](200) NULL,
           ITEM_IDENTIFIER                [VARCHAR](200) NULL,
           BRAND_ID                       [VARCHAR](200) NULL,
           SEGMENT                        [VARCHAR](200) NULL,
           MARKET_SIZE_UNITS              [VARCHAR](200) NULL,
           MARKET_SHARE_RATIO             [VARCHAR](200) NULL,
           MARKET_SHARE_UNITS             [VARCHAR](200) NULL,
           UNCAPTURED_UNITS               [VARCHAR](200) NULL,
           UNCAPTURED_UNITS_RATIO         [VARCHAR](200) NULL,
           TOTAL_DEMAND_UNITS             [VARCHAR](200) NULL,
           TOTAL_DEMAND_AMOUNT            [VARCHAR](200) NULL,
           INVENTORY_UNIT_CHANGE          [VARCHAR](200) NULL,
           GROSS_UNITS                    [VARCHAR](200) NULL,
		   GROSS_PRICE                    [VARCHAR](200) NULL,
           GROSS_AMOUNT                   [VARCHAR](200) NULL,
           NET_SALES_PRICE                [VARCHAR](200) NULL,
           NET_SALES_AMOUNT               [VARCHAR](200) NULL,
           CREATED_BY                     [VARCHAR](200) NULL,
           CREATED_DATE                   [DATETIME] NULL,
           MODIFIED_BY                    [VARCHAR](200) NULL,
           MODIFIED_DATE                  [DATETIME] NULL,
           ADD_CHG_DEL_INDICATOR          [VARCHAR](200) NULL,
           BATCH_ID                       [VARCHAR](200) NULL,
           SOURCE                         [VARCHAR](200) NULL,
           FORECAST_NAME                  [VARCHAR](200) NULL,
           FORECAST_VER                   [VARCHAR](200) NULL,
           COUNTRY                        [VARCHAR](200) NULL,
           ORGANIZATION_KEY               [VARCHAR](200) NULL,
           INTF_INSERTED_DATE             [VARCHAR](200) NULL,
           REASON_FOR_FAILURE             [VARCHAR](200) NULL,
           ERROR_CODE                     [VARCHAR](200) NULL,
           ERROR_FIELD                    [VARCHAR](200) NULL,
           IVLD_DEMAND_FORECAST_SID       [INT] IDENTITY(1, 1) NOT NULL,
           REPROCESSED_FLAG               CHAR(1) NULL
        )
  END

GO
------------------DROP STATS--------------------
IF  EXISTS (SELECT 1
FROM SYS.STATS
WHERE OBJECT_NAME(OBJECT_ID) = 'IVLD_DEMAND_FORECAST'
	AND AUTO_CREATED = 0
   AND NAME='INTF_INSERTED_DATE')
  BEGIN
      DROP STATISTICS IVLD_DEMAND_FORECAST.INTF_INSERTED_DATE
  END
GO
---------------------DROP DEFAULT CONSTARINT------------------
IF  EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('DBO.IVLD_DEMAND_FORECAST')
                      AND NAME = 'DF_IVLD_DEMAND_FORECAST_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].IVLD_DEMAND_FORECAST
        DROP CONSTRAINT DF_IVLD_DEMAND_FORECAST_INTF_INSERTED_DATE  
  END

GO

------------------ALTER_DATATYPE--------------------
 IF  EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_DEMAND_FORECAST'
                      AND COLUMN_NAME = 'INTF_INSERTED_DATE'
					  AND TABLE_SCHEMA='DBO'
					  AND DATA_TYPE='VARCHAR')
  BEGIN
      ALTER TABLE IVLD_DEMAND_FORECAST
ALTER COLUMN  INTF_INSERTED_DATE   DATETIME 
  END
GO
--------------------ADD DEFAULT CONSTARINT------------------

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('DBO.IVLD_DEMAND_FORECAST')
                      AND NAME = 'DF_IVLD_DEMAND_FORECAST_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].IVLD_DEMAND_FORECAST
        ADD CONSTRAINT DF_IVLD_DEMAND_FORECAST_INTF_INSERTED_DATE DEFAULT (Getdate()) FOR INTF_INSERTED_DATE
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_DEMAND_FORECAST')
                      AND NAME = 'DF_IVLD_DEMAND_FORECAST_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_DEMAND_FORECAST
        ADD CONSTRAINT DF_IVLD_DEMAND_FORECAST_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO
---------------------------------cel-633--------------------------------------

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_DEMAND_FORECAST'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_DEMAND_FORECAST
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_DEMAND_FORECAST')
                      AND NAME = 'DF_IVLD_DEMAND_FORECAST_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_DEMAND_FORECAST]
        ADD CONSTRAINT [DF_IVLD_DEMAND_FORECAST_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
-------------------------------------------------------------------
IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_DEMAND_FORECAST'
                     AND NAME = 'PK_IVLD_DEMAND_FORECAST_IVLD_DEMAND_FORECAST_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_DEMAND_FORECAST
        ADD CONSTRAINT PK_IVLD_DEMAND_FORECAST_IVLD_DEMAND_FORECAST_SID PRIMARY KEY(IVLD_DEMAND_FORECAST_SID)
  END

GO

---------------------------------cel-633--------------------------------------

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_DEMAND_FORECAST'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_DEMAND_FORECAST
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_DEMAND_FORECAST')
                      AND NAME = 'DF_IVLD_DEMAND_FORECAST_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_DEMAND_FORECAST]
        ADD CONSTRAINT [DF_IVLD_DEMAND_FORECAST_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO


DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_DEMAND_FORECAST'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND Schema_name(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT Object_name(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               Schema_name(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND Schema_name(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + Quotename(@SCHEMANAME)
                       + '.' + Quotename(@TABLENAME) + '.'
                       + Quotename(@STATSNAME)

            --PRINT @SQL
            EXEC Sp_executesql
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + Quotename(C.NAME)
         + ' ON ' + Quotename(Schema_name(SCHEMA_ID))
         + '.' + Quotename(T.NAME) + ' ('
         + Quotename(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = Schema_name(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND Schema_name(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC Sp_executesql
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO 



------------------------IVLD_INVENTORY_WD_ACTUAL_DT------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_INVENTORY_WD_ACTUAL_DT'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_INVENTORY_WD_ACTUAL_DT]
        (
           IVLD_INVENTORY_WD_ACTUAL_DT_SID   INT IDENTITY(1, 1) NOT NULL,
           INVENTORY_WD_ACTUAL_DT_INTF_ID NUMERIC(38, 0) NOT NULL,
           YEAR                               [VARCHAR](200) NULL,
           MONTH                              [VARCHAR](200) NULL,
           DAY                                [VARCHAR](200) NULL,
           WEEK                               [VARCHAR](200) NULL,
           COMPANY_ID                         [VARCHAR](200) NULL,
           IDENTIFIER_CODE_QUALIFIER          [VARCHAR](200) NULL,
           COMPANY_IDENTIFIER                 [VARCHAR](200) NULL,
           ITEM_ID                            [VARCHAR](200) NULL,
           ITEM_IDENTIFIER_CODE_QUALIFIER     [VARCHAR](200) NULL,
           ITEM_IDENTIFIER                    [VARCHAR](200) NULL,
           UNITS_WITHDRAWN                    [VARCHAR](200) NULL,
           AMOUNT_WITHDRAWN                   [VARCHAR](200) NULL,
           UNITS_ON_HAND                      [VARCHAR](200) NULL,
           AMOUNT_ON_HAND                     [VARCHAR](200) NULL,
           QUANTITY_ON_ORDER                  [VARCHAR](200) NULL,
           AMOUNT_ON_ORDER                    [VARCHAR](200) NULL,
           QUANTITY_RECEIVED                  [VARCHAR](200) NULL,
           AMOUNT_RECEIVED                    [VARCHAR](200) NULL,
           CREATED_BY                         [VARCHAR](200) NULL,
           CREATED_DATE                       DATETIME NULL,
           MODIFIED_BY                        [VARCHAR](200) NULL,
           MODIFIED_DATE                      DATETIME NULL,
           ADD_CHG_DEL_INDICATOR              VARCHAR(200) NULL,
           BATCH_ID                           VARCHAR(200) NULL,
           SOURCE                             VARCHAR(200) NULL,
           COUNTRY                            VARCHAR(200) NULL,
           ORGANIZATION_KEY                   VARCHAR(50) NULL,
           INTF_INSERTED_DATE                 [DATETIME] NULL,
           REASON_FOR_FAILURE                 [VARCHAR](200) NULL,
           ERROR_CODE                         [VARCHAR](200) NULL,
           ERROR_FIELD                        [VARCHAR](200) NULL,
           REPROCESSED_FLAG                   CHAR(1) NULL
        )
  END

GO

---------------------PRIMARY KEYS---------------
IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_INVENTORY_WD_ACTUAL_DT'
                     AND NAME = 'PK_IVLD_INVENTORY_WD_ACTUAL_DT_IVLD_INVENTORY_WD_ACTUAL_DT_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_ACTUAL_DT
        ADD CONSTRAINT PK_IVLD_INVENTORY_WD_ACTUAL_DT_IVLD_INVENTORY_WD_ACTUAL_DT_SID PRIMARY KEY(IVLD_INVENTORY_WD_ACTUAL_DT_SID)
  END

GO

-----------------------DEFAULT_CONSTRAINTS-----------------------
IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_INVENTORY_WD_ACTUAL_DT')
                      AND NAME = 'DF_IVLD_INVENTORY_WD_ACTUAL_DT_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_ACTUAL_DT
        ADD CONSTRAINT DF_IVLD_INVENTORY_WD_ACTUAL_DT_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_INVENTORY_WD_ACTUAL_DT'
                      AND NAME = 'DF_IVLD_INVENTORY_WD_ACTUAL_DT_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_INVENTORY_WD_ACTUAL_DT]
        ADD CONSTRAINT [DF_IVLD_INVENTORY_WD_ACTUAL_DT_INTF_INSERTED_DATE] DEFAULT (Getdate()) FOR INTF_INSERTED_DATE
  END

GO
------------------------------cel-633--------------------------------------

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_INVENTORY_WD_ACTUAL_DT'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_ACTUAL_DT
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_INVENTORY_WD_ACTUAL_DT')
                      AND NAME = 'DF_IVLD_INVENTORY_WD_ACTUAL_DT_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_INVENTORY_WD_ACTUAL_DT]
        ADD CONSTRAINT [DF_IVLD_INVENTORY_WD_ACTUAL_DT_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_INVENTORY_WD_ACTUAL_DT'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND Schema_name(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT Object_name(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               Schema_name(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND Schema_name(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + Quotename(@SCHEMANAME)
                       + '.' + Quotename(@TABLENAME) + '.'
                       + Quotename(@STATSNAME)

            --PRINT @SQL
            EXEC Sp_executesql
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + Quotename(C.NAME)
         + ' ON ' + Quotename(Schema_name(SCHEMA_ID))
         + '.' + Quotename(T.NAME) + ' ('
         + Quotename(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = Schema_name(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND Schema_name(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC Sp_executesql
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO 


--------------------------------------IVLD_INVENTORY_WD_ACTUAL_MAS--------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_INVENTORY_WD_ACTUAL_MAS'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_INVENTORY_WD_ACTUAL_MAS]
        (
           IVLD_INVENTORY_WD_ACTUAL_MAS_SID     INT IDENTITY(1, 1) NOT NULL,
           INVENTORY_WD_ACTUAL_MAS_INTF_ID NUMERIC(38, 0) NOT NULL,
           YEAR                               VARCHAR(200) NULL,
           MONTH                              VARCHAR(200) NULL,
           DAY                                VARCHAR(200) NULL,
           WEEK                               VARCHAR(200) NULL,
           ITEM_ID                            VARCHAR(200) NULL,
           ITEM_IDENTIFIER_CODE_QUALIFIER     VARCHAR(200) NULL,
           ITEM_IDENTIFIER                    VARCHAR(200) NULL,
           UNITS_WITHDRAWN                    VARCHAR(200) NULL,
           AMOUNT_WITHDRAWN                   VARCHAR(200) NULL,
           UNITS_ON_HAND                      VARCHAR(200) NULL,
           AMOUNT_ON_HAND                     VARCHAR(200) NULL,
           QUANTITY_ON_ORDER                  VARCHAR(200) NULL,
           AMOUNT_ON_ORDER                    VARCHAR(200) NULL,
           QUANTITY_RECEIVED                  VARCHAR(200) NULL,
           AMOUNT_RECEIVED                    VARCHAR(200) NULL,
           CREATED_BY                         VARCHAR(200) NULL,
           CREATED_DATE                       DATETIME NULL,
           MODIFIED_BY                        VARCHAR(200) NULL,
           MODIFIED_DATE                      DATETIME NULL,
           ADD_CHG_DEL_INDICATOR              VARCHAR(200) NULL,
           BATCH_ID                           VARCHAR(200) NULL,
           SOURCE                             VARCHAR(200) NULL,
           COUNTRY                            VARCHAR(200) NULL,
           ORGANIZATION_KEY                   VARCHAR(200) NULL,
           INTF_INSERTED_DATE                 DATETIME NULL,
           REASON_FOR_FAILURE                 VARCHAR(200) NULL,
           ERROR_CODE                         VARCHAR(200) NULL,
           ERROR_FIELD                        VARCHAR(200) NULL,
           REPROCESSED_FLAG                   CHAR(1) NULL
        )
  END

GO

---------------------PRIMARY KEYS---------------
IF NOT EXISTS (SELECT 1
               FROM   SYS.KEY_CONSTRAINTS
               WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_INVENTORY_WD_ACTUAL_MAS'
                      AND NAME = 'PK_IVLD_INVENTORY_WD_ACTUAL_MAS_IVLD_INVENTORY_WD_ACTUAL_MAS_SID'
                      AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_ACTUAL_MAS
        ADD CONSTRAINT PK_IVLD_INVENTORY_WD_ACTUAL_MAS_IVLD_INVENTORY_WD_ACTUAL_MAS_SID PRIMARY KEY (IVLD_INVENTORY_WD_ACTUAL_MAS_SID)
  END

GO

-----------------------DEFAULT_CONSTRAINTS-----------------------
IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_INVENTORY_WD_ACTUAL_MAS')
                      AND NAME = 'DF_IVLD_INVENTORY_WD_ACTUAL_MAS_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_ACTUAL_MAS
        ADD CONSTRAINT DF_IVLD_INVENTORY_WD_ACTUAL_MAS_REPROCESSED_FLAG DEFAULT('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_INVENTORY_WD_ACTUAL_MAS'
                      AND NAME = 'DF_IVLD_INVENTORY_WD_ACTUAL_MAS_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_INVENTORY_WD_ACTUAL_MAS]
        ADD CONSTRAINT [DF_IVLD_INVENTORY_WD_ACTUAL_MAS_INTF_INSERTED_DATE] DEFAULT(Getdate()) FOR INTF_INSERTED_DATE
  END

GO

--Re Name
IF  EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_INVENTORY_WD_ACTUAL_MAS'
                      AND COLUMN_NAME = 'INVENTORY_WD_ACTUAL_MAS_INTF_ID'
					  AND TABLE_SCHEMA='DBO')
begin
exec sp_RENAME 'IVLD_INVENTORY_WD_ACTUAL_MAS.INVENTORY_WD_ACTUAL_MAS_INTF_ID' , 'INVENTORY_WD_ACT_MAS_INTF_ID', 'COLUMN'
end
GO

----------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_INVENTORY_WD_ACTUAL_MAS'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_ACTUAL_MAS
        ADD CHECK_RECORD BIT NULL
  END

GO


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_INVENTORY_WD_ACTUAL_MAS')
                      AND NAME = 'DF_IVLD_INVENTORY_WD_ACTUAL_MAS_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_INVENTORY_WD_ACTUAL_MAS]
        ADD CONSTRAINT [DF_IVLD_INVENTORY_WD_ACTUAL_MAS_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

--------------------------------------------------------------------------

----------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_INVENTORY_WD_ACTUAL_MAS'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_ACTUAL_MAS
        ADD CHECK_RECORD BIT NULL
  END

GO


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_INVENTORY_WD_ACTUAL_MAS')
                      AND NAME = 'DF_IVLD_INVENTORY_WD_ACTUAL_MAS_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_INVENTORY_WD_ACTUAL_MAS]
        ADD CONSTRAINT [DF_IVLD_INVENTORY_WD_ACTUAL_MAS_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

--------------------------------------------------------------------------

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_INVENTORY_WD_ACTUAL_MAS' --TABLE NAME
SET @SCHEMANAME1 = 'DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND Schema_name(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT Object_name(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               Schema_name(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND Schema_name(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + Quotename(@SCHEMANAME)
                       + '.' + Quotename(@TABLENAME) + '.'
                       + Quotename(@STATSNAME)

            --PRINT @SQL
            EXEC Sp_executesql
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + Quotename(C.NAME)
         + ' ON ' + Quotename(Schema_name(SCHEMA_ID))
         + '.' + Quotename(T.NAME) + ' ('
         + Quotename(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = Schema_name(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND Schema_name(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC Sp_executesql
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO 


--------------------------------------IVLD_INVENTORY_WD_PROJ_DT--------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_INVENTORY_WD_PROJ_DT'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_INVENTORY_WD_PROJ_DT]
        (
           IVLD_INVENTORY_WD_PROJ_DT_SID   INT IDENTITY(1, 1) NOT NULL,
           INVENTORY_WD_PROJ_DT_INTF_ID NUMERIC(38, 0) NOT NULL,
           YEAR                             VARCHAR(200) NULL,
           MONTH                            VARCHAR(200) NULL,
           DAY                              VARCHAR(200) NULL,
           WEEK                             VARCHAR(200) NULL,
           COMPANY_ID                       VARCHAR(200) NULL,
           IDENTIFIER_CODE_QUALIFIER        VARCHAR(200) NULL,
           COMPANY_IDENTIFIER               VARCHAR(200) NULL,
           ITEM_ID                          VARCHAR(200) NULL,
           ITEM_IDENTIFIER_CODE_QUALIFIER   VARCHAR(200) NULL,
           ITEM_IDENTIFIER                  VARCHAR(200) NULL,
           UNITS_WITHDRAWN                  VARCHAR(200) NULL,
           AMOUNT_WITHDRAWN                 VARCHAR(200) NULL,
           PRICE                            VARCHAR(200) NULL,
           CREATED_BY                       VARCHAR(200) NULL,
           CREATED_DATE                     DATETIME NULL,
           MODIFIED_BY                      VARCHAR(200) NULL,
           MODIFIED_DATE                    DATETIME NULL,
           ADD_CHG_DEL_INDICATOR            VARCHAR(200) NULL,
           BATCH_ID                         VARCHAR(200) NULL,
           SOURCE                           VARCHAR(200) NULL,
           FORECAST_NAME                    VARCHAR(200) NULL,
           FORECAST_VER                     VARCHAR(200) NULL,
           COUNTRY                          VARCHAR(200) NULL,
           ORGANIZATION_KEY                 VARCHAR(200) NULL,
           INTF_INSERTED_DATE               DATETIME NULL,
           REASON_FOR_FAILURE               VARCHAR(200) NULL,
           ERROR_CODE                       VARCHAR(200) NULL,
           ERROR_FIELD                      VARCHAR(200) NULL,
           REPROCESSED_FLAG                 CHAR(1) NULL
        )
  END

GO
---------------------PRIMARY KEYS---------------
IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_INVENTORY_WD_PROJ_DT'
                     AND NAME = 'PK_IVLD_INVENTORY_WD_PROJ_DT_IVLD_INVENTORY_WD_PROJ_DT_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_PROJ_DT
        ADD CONSTRAINT PK_IVLD_INVENTORY_WD_PROJ_DT_IVLD_INVENTORY_WD_PROJ_DT_SID PRIMARY KEY(IVLD_INVENTORY_WD_PROJ_DT_SID)
  END

GO

-----------------------DEFAULT_CONSTRAINTS-----------------------
IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_INVENTORY_WD_PROJ_DT')
                      AND NAME = 'DF_IVLD_INVENTORY_WD_PROJ_DT_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_PROJ_DT
        ADD CONSTRAINT DF_IVLD_INVENTORY_WD_PROJ_DT_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_INVENTORY_WD_PROJ_DT'
                      AND NAME = 'DF_IVLD_INVENTORY_WD_PROJ_DT_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_INVENTORY_WD_PROJ_DT]
        ADD CONSTRAINT [DF_IVLD_INVENTORY_WD_PROJ_DT_INTF_INSERTED_DATE] DEFAULT (Getdate()) FOR INTF_INSERTED_DATE
  END

GO
-------------------------------------cel-633--------------------------------------

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_INVENTORY_WD_PROJ_DT'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_PROJ_DT
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_INVENTORY_WD_PROJ_DT')
                      AND NAME = 'DF_IVLD_INVENTORY_WD_PROJ_DT_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_INVENTORY_WD_PROJ_DT]
        ADD CONSTRAINT [DF_IVLD_INVENTORY_WD_PROJ_DT_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
---------------------------------------------------------------------------

-------------------------------------cel-633--------------------------------------

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_INVENTORY_WD_PROJ_DT'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_PROJ_DT
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_INVENTORY_WD_PROJ_DT')
                      AND NAME = 'DF_IVLD_INVENTORY_WD_PROJ_DT_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_INVENTORY_WD_PROJ_DT]
        ADD CONSTRAINT [DF_IVLD_INVENTORY_WD_PROJ_DT_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_INVENTORY_WD_PROJ_DT'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND Schema_name(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT Object_name(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               Schema_name(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND Schema_name(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + Quotename(@SCHEMANAME)
                       + '.' + Quotename(@TABLENAME) + '.'
                       + Quotename(@STATSNAME)

            --PRINT @SQL
            EXEC Sp_executesql
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + Quotename(C.NAME)
         + ' ON ' + Quotename(Schema_name(SCHEMA_ID))
         + '.' + Quotename(T.NAME) + ' ('
         + Quotename(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = Schema_name(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND Schema_name(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC Sp_executesql
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO 



--------------------------IVLD_INVENTORY_WD_PROJ_MAS--------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_INVENTORY_WD_PROJ_MAS'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_INVENTORY_WD_PROJ_MAS]
        (
           IVLD_INVENTORY_WD_PROJ_MAS_SID    INT IDENTITY(1, 1) NOT NULL,
           INVENTORY_WD_PROJ_MAS_INTF_ID NUMERIC(38, 0) NOT NULL,
           YEAR                               VARCHAR(200) NULL,
           MONTH                              VARCHAR(200) NULL,
           DAY                                VARCHAR(200) NULL,
           WEEK                               VARCHAR(200) NULL,
           ITEM_ID                            VARCHAR(200) NULL,
           ITEM_IDENTIFIER_CODE_QUALIFIER     VARCHAR(200) NULL,
           ITEM_IDENTIFIER                    VARCHAR(200) NULL,
           UNITS_WITHDRAWN                    VARCHAR(200) NULL,
           AMOUNT_WITHDRAWN                   VARCHAR(200) NULL,
		   PRICE							  NUMERIC(22,6) NULL,
           CREATED_BY                         VARCHAR(200) NULL,
           CREATED_DATE                       DATETIME NULL,
           MODIFIED_BY                        VARCHAR(200) NULL,
           MODIFIED_DATE                      DATETIME NULL,
           ADD_CHG_DEL_INDICATOR              VARCHAR(200) NULL,
           BATCH_ID                           VARCHAR(200) NULL,
           SOURCE                             VARCHAR(200) NULL,
           FORECAST_NAME                      VARCHAR(200) NULL,
           FORECAST_VER                       VARCHAR(200) NULL,
           COUNTRY                            VARCHAR(200) NULL,
           ORGANIZATION_KEY                   VARCHAR(200) NULL,
           INTF_INSERTED_DATE                 DATETIME NULL,
           REASON_FOR_FAILURE                 VARCHAR(200) NULL,
           ERROR_CODE                         VARCHAR(200) NULL,
           ERROR_FIELD                        VARCHAR(200) NULL,
           REPROCESSED_FLAG                   CHAR(1) NULL
        )
  END

GO

---------------------PRIMARY KEYS---------------
IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_INVENTORY_WD_PROJ_MAS'
                     AND NAME = 'PK_IVLD_INVENTORY_WD_PROJ_MAS_IVLD_INVENTORY_WD_PROJ_MAS_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_PROJ_MAS
        ADD CONSTRAINT PK_IVLD_INVENTORY_WD_PROJ_MAS_IVLD_INVENTORY_WD_PROJ_MAS_SID PRIMARY KEY(IVLD_INVENTORY_WD_PROJ_MAS_SID)
  END

GO

-----------------------DEFAULT_CONSTRAINTS-----------------------
IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_INVENTORY_WD_PROJ_MAS')
                      AND NAME = 'DF_IVLD_INVENTORY_WD_PROJ_MAS_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_PROJ_MAS
        ADD CONSTRAINT DF_IVLD_INVENTORY_WD_PROJ_MAS_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_INVENTORY_WD_PROJ_MAS'
                      AND NAME = 'DF_IVLD_INVENTORY_WD_PROJ_MAS_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_INVENTORY_WD_PROJ_MAS]
        ADD CONSTRAINT [DF_IVLD_INVENTORY_WD_PROJ_MAS_INTF_INSERTED_DATE] DEFAULT (Getdate()) FOR INTF_INSERTED_DATE
  END

GO
----------------------------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_INVENTORY_WD_PROJ_MAS'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_PROJ_MAS
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_INVENTORY_WD_PROJ_MAS')
                      AND NAME = 'DF_IVLD_INVENTORY_WD_PROJ_MAS_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_INVENTORY_WD_PROJ_MAS]
        ADD CONSTRAINT [DF_IVLD_INVENTORY_WD_PROJ_MAS_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
------------------------------------------------------------------------------------

----------------------------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_INVENTORY_WD_PROJ_MAS'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_INVENTORY_WD_PROJ_MAS
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_INVENTORY_WD_PROJ_MAS')
                      AND NAME = 'DF_IVLD_INVENTORY_WD_PROJ_MAS_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_INVENTORY_WD_PROJ_MAS]
        ADD CONSTRAINT [DF_IVLD_INVENTORY_WD_PROJ_MAS_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_INVENTORY_WD_PROJ_MAS'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND Schema_name(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT Object_name(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               Schema_name(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND Schema_name(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + Quotename(@SCHEMANAME)
                       + '.' + Quotename(@TABLENAME) + '.'
                       + Quotename(@STATSNAME)

            --PRINT @SQL
            EXEC Sp_executesql
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + Quotename(C.NAME)
         + ' ON ' + Quotename(Schema_name(SCHEMA_ID))
         + '.' + Quotename(T.NAME) + ' ('
         + Quotename(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = Schema_name(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND Schema_name(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC Sp_executesql
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO 
--------------------------[IVLD_RETURNS]--------------------------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_RETURNS'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_RETURNS]
        (
           RRESERVE_INTERFACE_ID       [NUMERIC](38, 0) NOT NULL,
           RRESERVE_ID                 [VARCHAR](200) NULL,
           VERSION                     [VARCHAR](200) NULL,
           SKU                         [VARCHAR](200) NULL,
           BRAND                       [VARCHAR](200) NULL,
           DESCRIPTION                 [VARCHAR](200) NULL,
           ORIG_SALE_MONTH             [VARCHAR](200) NULL,
           ORIG_SALE_UNITS             [VARCHAR](200) NULL,
           ORIG_SALE_DOLLARS           [VARCHAR](200) NULL,
           ASP                         [VARCHAR](200) NULL,
           CUM_RETURN_UNITS            [VARCHAR](200) NULL,
           ACTUAL_RETURN_RATE          [VARCHAR](200) NULL,
           WEIGHTED_AVG_MONTHS         [VARCHAR](200) NULL,
           FIRST_RETURN                [VARCHAR](200) NULL,
           LAST_RETURN                 [VARCHAR](200) NULL,
           MAX_EXPIRED_MONTH           [VARCHAR](200) NULL,
           MAX_EXPIRED_MONS_PLUSCUTOFF [VARCHAR](200) NULL,
           RETURN_COMPLETE             [VARCHAR](200) NULL,
           CALC_USED                   [VARCHAR](200) NULL,
           ORIG_SALE_MONTH_CUT_OFF     [VARCHAR](200) NULL,
           EXPECTED_RETURN_RATE        [VARCHAR](200) NULL,
           ESTIMATED_RETURN_UNITS      [VARCHAR](200) NULL,
           ADJ_ESTIMATED_RETURN_UNITS  [VARCHAR](200) NULL,
           ADJ_VALUE_AT_ORIG_ASP       [VARCHAR](200) NULL,
           POS_ESTIMATED_RETURN_UNITS  [VARCHAR](200) NULL,
           VALUE_AT_ORIG_ASP           [VARCHAR](200) NULL,
           LOAD_DATE                   [VARCHAR](200) NULL,
           PAST_EXPIRATION             [VARCHAR](200) NULL,
           WITHIN_50QRTILE             [VARCHAR](200) NULL,
           MAXIMUM                     [VARCHAR](200) NULL,
           PCT_75TH                    [VARCHAR](200) NULL,
           PCT_50TH                    [VARCHAR](200) NULL,
           PCT_25TH                    [VARCHAR](200) NULL,
           UPPER_LIMIT                 [VARCHAR](200) NULL,
           LOWER_LIMIT                 [VARCHAR](200) NULL,
           ADD_CHG_DEL_INDICATOR       [VARCHAR](200) NULL,
           BATCH_ID                    [VARCHAR](200) NULL,
           SOURCE                      [VARCHAR](200) NULL,
           INTF_INSERTED_DATE          [DATETIME] NULL,
           REASON_FOR_FAILURE          [VARCHAR](1000) NULL,
           ERROR_CODE                  [VARCHAR] (200) NULL,
           ERROR_FIELD                 [VARCHAR](500) NULL,
           IVLD_RETURNS_SID            [INT] IDENTITY(1, 1) NOT NULL,
           REPROCESSED_FLAG            CHAR(1) NULL
        )
  END

GO


IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_RETURNS')
                      AND NAME = 'DF_IVLD_RETURNS_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_RETURNS
        ADD CONSTRAINT DF_IVLD_RETURNS_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_RETURNS'
                     AND NAME = 'PK_IVLD_RETURNS_IVLD_RETURNS_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_RETURNS
        ADD CONSTRAINT PK_IVLD_RETURNS_IVLD_RETURNS_SID PRIMARY KEY(IVLD_RETURNS_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_RETURNS'
                      AND NAME = 'DF_IVLD_RETURNS_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].IVLD_RETURNS
        ADD CONSTRAINT DF_IVLD_RETURNS_INTF_INSERTED_DATE DEFAULT (Getdate()) FOR INTF_INSERTED_DATE
  END

GO
--------------------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_RETURNS'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_RETURNS
        ADD CHECK_RECORD BIT NULL
  END

GO


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_RETURNS')
                      AND NAME = 'DF_IVLD_RETURNS_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_RETURNS]
        ADD CONSTRAINT [DF_IVLD_RETURNS_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

-----------------------------------------------------------------------------------

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_RETURNS'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND Schema_name(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT Object_name(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               Schema_name(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND Schema_name(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + Quotename(@SCHEMANAME)
                       + '.' + Quotename(@TABLENAME) + '.'
                       + Quotename(@STATSNAME)

            --PRINT @SQL
            EXEC Sp_executesql
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + Quotename(C.NAME)
         + ' ON ' + Quotename(Schema_name(SCHEMA_ID))
         + '.' + Quotename(T.NAME) + ' ('
         + Quotename(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = Schema_name(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND Schema_name(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC Sp_executesql
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO 


----------------------------------------------------------ALTER SCRIPT----------------------------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_RETURNS'
                      AND COLUMN_NAME = 'CREATED_BY'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_RETURNS
        ADD CREATED_BY [VARCHAR](200)
  END
GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_RETURNS'
                      AND COLUMN_NAME = 'CREATED_DATE'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_RETURNS
        ADD CREATED_DATE DATETIME
  END
GO


IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_RETURNS'
                      AND COLUMN_NAME = 'MODIFIED_BY'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_RETURNS
        ADD MODIFIED_BY [VARCHAR](200)
  END
GO


IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_RETURNS'
                      AND COLUMN_NAME = 'MODIFIED_DATE'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_RETURNS
        ADD MODIFIED_DATE DATETIME
  END
GO
-----RETURNS
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_RETURNS'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_RETURNS]
        (
           RRESERVE_INTERFACE_ID       [NUMERIC](38, 0) NOT NULL,
           RRESERVE_ID                 [VARCHAR](200) NULL,
           VERSION                     [VARCHAR](200) NULL,
           SKU                         [VARCHAR](200) NULL,
           BRAND                       [VARCHAR](200) NULL,
           DESCRIPTION                 [VARCHAR](200) NULL,
           ORIG_SALE_MONTH             [VARCHAR](200) NULL,
           ORIG_SALE_UNITS             [VARCHAR](200) NULL,
           ORIG_SALE_DOLLARS           [VARCHAR](200) NULL,
           ASP                         [VARCHAR](200) NULL,
           CUM_RETURN_UNITS            [VARCHAR](200) NULL,
           ACTUAL_RETURN_RATE          [VARCHAR](200) NULL,
           WEIGHTED_AVG_MONTHS         [VARCHAR](200) NULL,
           FIRST_RETURN                [VARCHAR](200) NULL,
           LAST_RETURN                 [VARCHAR](200) NULL,
           MAX_EXPIRED_MONTH           [VARCHAR](200) NULL,
           MAX_EXPIRED_MONS_PLUSCUTOFF [VARCHAR](200) NULL,
           RETURN_COMPLETE             [VARCHAR](200) NULL,
           CALC_USED                   [VARCHAR](200) NULL,
           ORIG_SALE_MONTH_CUT_OFF     [VARCHAR](200) NULL,
           EXPECTED_RETURN_RATE        [VARCHAR](200) NULL,
           ESTIMATED_RETURN_UNITS      [VARCHAR](200) NULL,
           ADJ_ESTIMATED_RETURN_UNITS  [VARCHAR](200) NULL,
           ADJ_VALUE_AT_ORIG_ASP       [VARCHAR](200) NULL,
           POS_ESTIMATED_RETURN_UNITS  [VARCHAR](200) NULL,
           VALUE_AT_ORIG_ASP           [VARCHAR](200) NULL,
           LOAD_DATE                   [VARCHAR](200) NULL,
           PAST_EXPIRATION             [VARCHAR](200) NULL,
           WITHIN_50QRTILE             [VARCHAR](200) NULL,
           MAXIMUM                     [VARCHAR](200) NULL,
           PCT_75TH                    [VARCHAR](200) NULL,
           PCT_50TH                    [VARCHAR](200) NULL,
           PCT_25TH                    [VARCHAR](200) NULL,
           UPPER_LIMIT                 [VARCHAR](200) NULL,
           LOWER_LIMIT                 [VARCHAR](200) NULL,
           ADD_CHG_DEL_INDICATOR       [VARCHAR](200) NULL,
           BATCH_ID                    [VARCHAR](200) NULL,
           SOURCE                      [VARCHAR](200) NULL,
           INTF_INSERTED_DATE          [DATETIME] NULL,
           REASON_FOR_FAILURE          [VARCHAR](1000) NULL,
           ERROR_CODE                  [VARCHAR] (200) NULL,
           ERROR_FIELD                 [VARCHAR](500) NULL,
           IVLD_RETURNS_SID            [INT] IDENTITY(1, 1) NOT NULL,
           REPROCESSED_FLAG            CHAR(1) NULL
        )
  END

GO


IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_RETURNS')
                      AND NAME = 'DF_IVLD_RETURNS_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_RETURNS
        ADD CONSTRAINT DF_IVLD_RETURNS_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_RETURNS'
                     AND NAME = 'PK_IVLD_RETURNS_IVLD_RETURNS_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_RETURNS
        ADD CONSTRAINT PK_IVLD_RETURNS_IVLD_RETURNS_SID PRIMARY KEY(IVLD_RETURNS_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_RETURNS'
                      AND NAME = 'DF_IVLD_RETURNS_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].IVLD_RETURNS
        ADD CONSTRAINT DF_IVLD_RETURNS_INTF_INSERTED_DATE DEFAULT (Getdate()) FOR INTF_INSERTED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_RETURNS'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND Schema_name(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT Object_name(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               Schema_name(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND Schema_name(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + Quotename(@SCHEMANAME)
                       + '.' + Quotename(@TABLENAME) + '.'
                       + Quotename(@STATSNAME)

            --PRINT @SQL
            EXEC Sp_executesql
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + Quotename(C.NAME)
         + ' ON ' + Quotename(Schema_name(SCHEMA_ID))
         + '.' + Quotename(T.NAME) + ' ('
         + Quotename(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = Schema_name(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND Schema_name(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC Sp_executesql
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO 


----------------------------------------------------------ALTER SCRIPT----------------------------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_RETURNS'
                      AND COLUMN_NAME = 'CREATED_BY'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_RETURNS
        ADD CREATED_BY [VARCHAR](200)
  END
GO

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_RETURNS'
                      AND COLUMN_NAME = 'CREATED_DATE'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_RETURNS
        ADD CREATED_DATE DATETIME
  END
GO


IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_RETURNS'
                      AND COLUMN_NAME = 'MODIFIED_BY'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_RETURNS
        ADD MODIFIED_BY [VARCHAR](200)
  END
GO


IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_RETURNS'
                      AND COLUMN_NAME = 'MODIFIED_DATE'
					  AND TABLE_SCHEMA='DBO')
  BEGIN
      ALTER TABLE IVLD_RETURNS
        ADD MODIFIED_DATE DATETIME
  END
GO

--------------------------------IVLD_CUSTOMER_GTS_FORECAST-------------------------------------


IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_FORECAST'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN 
      CREATE TABLE [DBO].[IVLD_CUSTOMER_GTS_FORECAST]
        (
           IVLD_CUSTOMER_GTS_FORECAST_SID INT IDENTITY(1, 1) NOT NULL,
           CUSTOMER_GTS_FORECAST_INTF_ID  NUMERIC(38, 0) NOT NULL,
           FORECAST_YEAR                  VARCHAR(200) NULL,
           FORECAST_MONTH                 VARCHAR(200) NULL,
           ITEM_ID                        VARCHAR(200) NULL,
           COMPANY_ID                     VARCHAR(200) NULL,
           UNITS                          VARCHAR(200) NULL,
           PRICE_TYPE                     VARCHAR(200) NULL,
           PRICE                          VARCHAR(200) NULL,
           SALES_AMOUNT                  VARCHAR(200) NULL,
           SALES_INCLUSION                VARCHAR(10) NULL,
           DEDUCTION_ID                   VARCHAR(200) NULL,
           DEDUCTION_CATEGORY             VARCHAR(200) NULL,
           DEDUCTION_TYPE                 VARCHAR(200) NULL,
           DEDUCTION_PROGRAM_TYPE         VARCHAR(200) NULL,
           ADJUSTMENT_CODE                VARCHAR(200) NULL,
           DEDUCTION_RATE                 VARCHAR(200) NULL,
           DEDUCTION_AMOUNT               VARCHAR(200) NULL,
           DEDUCTION_INCLUSION            VARCHAR(10) NULL,
           FORECAST_VALUE_TYPE            VARCHAR(200) NULL,
           BRAND                          VARCHAR(200) NULL,
           SEGMENT                        VARCHAR(100) NULL,
           ADD_CHG_DEL_INDICATOR          VARCHAR(10) NULL,
           CREATED_BY                     VARCHAR(200) NULL,
           CREATED_DATE                   DATETIME NULL,
           MODIFIED_BY                    VARCHAR(200) NULL,
           MODIFIED_DATE                  DATETIME NULL,
           BATCH_ID                       VARCHAR(200) NULL,
           SOURCE                         VARCHAR(200) NULL,
           FORECAST_VER                  VARCHAR(200) NULL,
           COUNTRY                        VARCHAR(200) NULL,
           FORECAST_NAME                  VARCHAR(100) NULL,
           FORECAST_DATE                  DATETIME NULL,
           UDC1                           VARCHAR(100) NULL,
           UDC2                           VARCHAR(100) NULL,
           UDC3                           VARCHAR(100) NULL,
           UDC4                           VARCHAR(100) NULL,
           UDC5                           VARCHAR(100) NULL,
           UDC6                           VARCHAR(100) NULL,
           INTF_INSERTED_DATE             [DATETIME] NULL,
           REASON_FOR_FAILURE             [VARCHAR](200) NULL,
           ERROR_CODE                     [VARCHAR](200) NULL,
           ERROR_FIELD                    [VARCHAR](200) NULL,
           REPROCESSED_FLAG               CHAR(1) NULL
        )
  END

GO

---------------------PRIMARY KEYS---------------
IF NOT EXISTS(SELECT 1
          FROM   SYS.KEY_CONSTRAINTS
          WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_CUSTOMER_GTS_FORECAST'
                 AND NAME = 'PK_IVLD_CUSTOMER_GTS_FORECAST_IVLD_CUSTOMER_GTS_FORECAST_SID'
                 AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_CUSTOMER_GTS_FORECAST
        ADD CONSTRAINT PK_IVLD_CUSTOMER_GTS_FORECAST_IVLD_CUSTOMER_GTS_FORECAST_SID PRIMARY KEY(IVLD_CUSTOMER_GTS_FORECAST_SID)
  END

GO

-----------------------DEFAULT_CONSTRAINTS-----------------------
IF NOT  EXISTS (SELECT 1
           FROM   SYS.DEFAULT_CONSTRAINTS
           WHERE  PARENT_OBJECT_ID = Object_id('IVLD_CUSTOMER_GTS_FORECAST')
                  AND NAME = 'DF_IVLD_CUSTOMER_GTS_FORECAST_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_CUSTOMER_GTS_FORECAST
        ADD CONSTRAINT DF_IVLD_CUSTOMER_GTS_FORECAST_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS (SELECT 'X'
           FROM   SYS.DEFAULT_CONSTRAINTS
           WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_CUSTOMER_GTS_FORECAST'
                  AND NAME = 'DF_IVLD_CUSTOMER_GTS_FORECAST_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_CUSTOMER_GTS_FORECAST]
        ADD CONSTRAINT [DF_IVLD_CUSTOMER_GTS_FORECAST_INTF_INSERTED_DATE] DEFAULT (Getdate()) FOR INTF_INSERTED_DATE
  END

GO
-------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_FORECAST'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CUSTOMER_GTS_FORECAST
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_CUSTOMER_GTS_FORECAST')
                      AND NAME = 'DF_IVLD_CUSTOMER_GTS_FORECAST_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_CUSTOMER_GTS_FORECAST]
        ADD CONSTRAINT [DF_IVLD_CUSTOMER_GTS_FORECAST_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO
------------------------------------------------------------------

-------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_FORECAST'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CUSTOMER_GTS_FORECAST
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_CUSTOMER_GTS_FORECAST')
                      AND NAME = 'DF_IVLD_CUSTOMER_GTS_FORECAST_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_CUSTOMER_GTS_FORECAST]
        ADD CONSTRAINT [DF_IVLD_CUSTOMER_GTS_FORECAST_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_CUSTOMER_GTS_FORECAST'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
           JOIN   SYS.TABLES T ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND EXISTS (SELECT 1
                              FROM   SYS.INDEXES
                              WHERE  S.NAME = NAME)
                  AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT Object_name(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
        JOIN   SYS.TABLES T ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND EXISTS (SELECT 1
                           FROM   SYS.INDEXES
                           WHERE  S.NAME = NAME)
               AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + Quotename(@SCHEMANAME)
                       + '.' + Quotename(@TABLENAME) + '.'
                       + Quotename(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + Quotename(C.NAME)
         + ' ON ' + Quotename(SCHEMA_NAME(SCHEMA_ID))
         + '.' + Quotename(T.NAME) + ' ('
         + Quotename(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
  JOIN   SYS.COLUMNS C ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  EXISTS (SELECT     1
                 FROM       INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                 INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                 WHERE      CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND EXISTS (SELECT 1
                     FROM   SYS.STATS S
                     WHERE  S.OBJECT_ID = C.OBJECT_ID
                            AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO 


-----------------------------IVLD_CUSTOMER_GTS_ACTUAL--------------------------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_ACTUAL'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN 
      CREATE TABLE [DBO].IVLD_CUSTOMER_GTS_ACTUAL
        (
           IVLD_CUSTOMER_GTS_ACTUAL_SID INT IDENTITY(1, 1) NOT NULL,
           CUSTOMER_GTS_ACTUAL_INTF_ID  [NUMERIC](38, 0) NOT NULL,
           SALES_ID                     [VARCHAR](200) NULL,
           ORGANIZATION_KEY             [VARCHAR](200) NULL,
           ITEM_ID                      [VARCHAR](200) NULL,
           ITEM_UOM                     [VARCHAR](200) NULL,
           ORDER_NUMBER                 [VARCHAR](200) NULL,
           INVOICE_NUMBER               [VARCHAR](200) NULL,
           INVOICE_LINE_NUMBER          [VARCHAR](200) NULL,
           INVOICE_DATE                 DATETIME NULL,
           QUANTITY                     [VARCHAR](200) NOT NULL,
           LOT_NO                       [VARCHAR](200) NULL,
           AMOUNT                       [VARCHAR](200) NOT NULL,
           CONTRACT_ID                  [VARCHAR](200) NULL,
           ACCOUNT_ID                   [VARCHAR](200) NULL,
           ORDER_RECEIVED_DATE          DATETIME NULL,
           BATCH_ID                     [VARCHAR](200) NOT NULL,
           SOURCE                       [VARCHAR](200) NOT NULL,
           CREATED_BY                   [VARCHAR](200) NOT NULL,
           CREATED_DATE                 [VARCHAR](200) NOT NULL,
           MODIFIED_BY                  [VARCHAR](200) NOT NULL,
           MODIFIED_DATE                DATETIME NOT NULL,
           PARENT_ACCOUNT_ID            [VARCHAR](200) NULL,
           INTF_INSERTED_DATE            DATETIME NULL,
           REASON_FOR_FAILURE           [VARCHAR](200) NULL,
           ERROR_CODE                   [VARCHAR](200) NULL,
           ERROR_FIELD                  [VARCHAR](200) NULL,
           REPROCESSED_FLAG             CHAR(1) NULL,
        )
  END

GO

---------ADDING COLUMN
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_ACTUAL'
                      AND COLUMN_NAME = 'ADD_CHG_DEL_INDICATOR'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CUSTOMER_GTS_ACTUAL
        ADD ADD_CHG_DEL_INDICATOR VARCHAR(200) NULL
  END

GO
-------------------------------------------------------alter columns from not null to null--------------------------------
--QUANTITY
IF EXISTS (SELECT 1
              FROM   INFORMATION_SCHEMA.COLUMNS
              WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_ACTUAL'
                     AND COLUMN_NAME = 'QUANTITY'
                     AND TABLE_SCHEMA = 'DBO'
					 AND DATA_TYPE='VARCHAR'
					 AND IS_NULLABLE='NO')
  BEGIN
      ALTER TABLE [DBO].IVLD_CUSTOMER_GTS_ACTUAL
        ALTER COLUMN QUANTITY VARCHAR(200)  NULL
  END

GO 
--AMOUNT
IF EXISTS (SELECT 1
              FROM   INFORMATION_SCHEMA.COLUMNS
              WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_ACTUAL'
                     AND COLUMN_NAME = 'AMOUNT'
                     AND TABLE_SCHEMA = 'DBO'
					 AND DATA_TYPE='VARCHAR'
					 AND IS_NULLABLE='NO')
  BEGIN
      ALTER TABLE [DBO].IVLD_CUSTOMER_GTS_ACTUAL
        ALTER COLUMN AMOUNT VARCHAR(200)  NULL
  END

GO 
--BATCH_ID
IF EXISTS (SELECT 1
              FROM   INFORMATION_SCHEMA.COLUMNS
              WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_ACTUAL'
                     AND COLUMN_NAME = 'BATCH_ID'
                     AND TABLE_SCHEMA = 'DBO'
					 AND DATA_TYPE='VARCHAR'
					 AND IS_NULLABLE='NO')
  BEGIN
      ALTER TABLE [DBO].IVLD_CUSTOMER_GTS_ACTUAL
        ALTER COLUMN BATCH_ID VARCHAR(200)  NULL
  END

GO 
--SOURCE
IF EXISTS (SELECT 1
              FROM   INFORMATION_SCHEMA.COLUMNS
              WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_ACTUAL'
                     AND COLUMN_NAME = 'SOURCE'
                     AND TABLE_SCHEMA = 'DBO'
					 AND DATA_TYPE='VARCHAR'
					 AND IS_NULLABLE='NO')
  BEGIN
      ALTER TABLE [DBO].IVLD_CUSTOMER_GTS_ACTUAL
        ALTER COLUMN SOURCE VARCHAR(200)  NULL
  END

GO 
--CREATED_BY
IF EXISTS (SELECT 1
              FROM   INFORMATION_SCHEMA.COLUMNS
              WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_ACTUAL'
                     AND COLUMN_NAME = 'CREATED_BY'
                     AND TABLE_SCHEMA = 'DBO'
					 AND DATA_TYPE='VARCHAR'
					 AND IS_NULLABLE='NO')
  BEGIN
      ALTER TABLE [DBO].IVLD_CUSTOMER_GTS_ACTUAL
        ALTER COLUMN CREATED_BY VARCHAR(200)  NULL
  END

GO 
--CREATED_DATE
IF EXISTS (SELECT 1
              FROM   INFORMATION_SCHEMA.COLUMNS
              WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_ACTUAL'
                     AND COLUMN_NAME = 'CREATED_DATE'
                     AND TABLE_SCHEMA = 'DBO'
					 AND DATA_TYPE='VARCHAR'
					 AND IS_NULLABLE='NO')
  BEGIN
      ALTER TABLE [DBO].IVLD_CUSTOMER_GTS_ACTUAL
        ALTER COLUMN CREATED_DATE VARCHAR(200)  NULL
  END

GO 
--MODIFIED_BY
IF EXISTS (SELECT 1
              FROM   INFORMATION_SCHEMA.COLUMNS
              WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_ACTUAL'
                     AND COLUMN_NAME = 'MODIFIED_BY'
                     AND TABLE_SCHEMA = 'DBO'
					 AND DATA_TYPE='VARCHAR'
					 AND IS_NULLABLE='NO')
  BEGIN
      ALTER TABLE [DBO].IVLD_CUSTOMER_GTS_ACTUAL
        ALTER COLUMN MODIFIED_BY VARCHAR(200)  NULL
  END

GO
--MODIFIED_DATE
IF EXISTS (SELECT 1
              FROM   INFORMATION_SCHEMA.COLUMNS
              WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_ACTUAL'
                     AND COLUMN_NAME = 'MODIFIED_DATE'
                     AND TABLE_SCHEMA = 'DBO'
					 AND DATA_TYPE='DATETIME'
					 AND IS_NULLABLE='NO')
  BEGIN
      ALTER TABLE [DBO].IVLD_CUSTOMER_GTS_ACTUAL
        ALTER COLUMN MODIFIED_DATE DATETIME NULL
  END

GO


-------------DEFAULT CONSTRAINT
IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_CUSTOMER_GTS_ACTUAL')
                      AND NAME = 'DF_IVLD_CUSTOMER_GTS_ACTUAL_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_CUSTOMER_GTS_ACTUAL
        ADD CONSTRAINT DF_IVLD_CUSTOMER_GTS_ACTUAL_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

--INTF_INSERTED_DATE
IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('DBO.IVLD_CUSTOMER_GTS_ACTUAL')
                      AND NAME = 'DF_IVLD_CUSTOMER_GTS_ACTUAL_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].IVLD_CUSTOMER_GTS_ACTUAL
        ADD CONSTRAINT DF_IVLD_CUSTOMER_GTS_ACTUAL_INTF_INSERTED_DATE DEFAULT (Getdate()) FOR INTF_INSERTED_DATE
  END

GO
----------------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_ACTUAL'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CUSTOMER_GTS_ACTUAL
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_CUSTOMER_GTS_ACTUAL')
                      AND NAME = 'DF_IVLD_CUSTOMER_GTS_ACTUAL_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_CUSTOMER_GTS_ACTUAL]
        ADD CONSTRAINT [DF_IVLD_CUSTOMER_GTS_ACTUAL_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

--------------------------------------------------------------------------------
-------------------PRIMARY KEY
IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_CUSTOMER_GTS_ACTUAL'
                     AND NAME = 'PK_IVLD_CUSTOMER_GTS_ACTUAL_IVLD_CUSTOMER_GTS_ACTUAL_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_CUSTOMER_GTS_ACTUAL
        ADD CONSTRAINT PK_IVLD_CUSTOMER_GTS_ACTUAL_IVLD_CUSTOMER_GTS_ACTUAL_SID PRIMARY KEY(IVLD_CUSTOMER_GTS_ACTUAL_SID)
  END

GO

----------------------------------cel-633--------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_CUSTOMER_GTS_ACTUAL'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_CUSTOMER_GTS_ACTUAL
        ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_CUSTOMER_GTS_ACTUAL')
                      AND NAME = 'DF_IVLD_CUSTOMER_GTS_ACTUAL_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_CUSTOMER_GTS_ACTUAL]
        ADD CONSTRAINT [DF_IVLD_CUSTOMER_GTS_ACTUAL_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_CUSTOMER_GTS_ACTUAL'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND Schema_name(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT Object_name(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               Schema_name(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND Schema_name(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + Quotename(@SCHEMANAME)
                       + '.' + Quotename(@TABLENAME) + '.'
                       + Quotename(@STATSNAME)

            --PRINT @SQL
            EXEC Sp_executesql
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + Quotename(C.NAME)
         + ' ON ' + Quotename(Schema_name(SCHEMA_ID))
         + '.' + Quotename(T.NAME) + ' ('
         + Quotename(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = Schema_name(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND Schema_name(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC Sp_executesql
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO 

      
-----------------------IVLD_ADJUSTED_DEMAND_ACTUAL------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_ADJUSTED_DEMAND_ACTUAL'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_ADJUSTED_DEMAND_ACTUAL]
        (
           ADJUSTED_DEMAND_ACTUAL_INTF_ID     [NUMERIC](38, 0) NOT NULL,
           FORECAST_TYPE                  [VARCHAR](200) NULL,
           FORECAST_YEAR                  [VARCHAR](200) NULL,
           FORECAST_MONTH                 [VARCHAR](200) NULL,
           ITEM_ID                        [VARCHAR](200) NULL,
           ITEM_IDENTIFIER_CODE_QUALIFIER [VARCHAR](200) NULL,
           ITEM_IDENTIFIER                [VARCHAR](200) NULL,
           BRAND_ID                       [VARCHAR](200) NULL,
           SEGMENT                        [VARCHAR](200) NULL,
           MARKET_SIZE_UNITS             [VARCHAR](200) NULL,
           MARKET_SHARE_RATIO             [VARCHAR](200) NULL,
           MARKET_SHARE_UNITS             [VARCHAR](200) NULL,
           TOTAL_DEMAND_UNITS             [VARCHAR](200) NULL,
           TOTAL_DEMAND_AMOUNT            [VARCHAR](200) NULL,
           GROSS_UNITS                    [VARCHAR](200) NULL,
           GROSS_PRICE                    [VARCHAR](200) NULL,
           GROSS_AMOUNT                   [VARCHAR](200) NULL,
           NET_SALES_PRICE                [VARCHAR](200) NULL,
           NET_SALES_AMOUNT               [VARCHAR](200) NULL,
           CREATED_BY                     [VARCHAR](200) NULL,
           CREATED_DATE                   [DATETIME] NULL,
           MODIFIED_BY                    [VARCHAR](200) NULL,
           MODIFIED_DATE                  [DATETIME] NULL,
           ADD_CHG_DEL_INDICATOR          [VARCHAR](200) NULL,
           BATCH_ID                       [VARCHAR](200) NULL,
           SOURCE                         [VARCHAR](200) NULL,
           COUNTRY                        [VARCHAR](200) NULL,
           ORGANIZATION_KEY               [VARCHAR](200) NULL,
           INTF_INSERTED_DATE             [DATETIME] NULL,
           REASON_FOR_FAILURE             [VARCHAR](1000) NULL,
           ERROR_CODE                     [VARCHAR] (200) NULL,
           ERROR_FIELD                    [VARCHAR](500) NULL,
           IVLD_ADJUSTED_DEMAND_ACTUAL_SID         [INT] IDENTITY(1, 1) NOT NULL,
           REPROCESSED_FLAG               CHAR(1) NULL
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ADJUSTED_DEMAND_ACTUAL')
                      AND NAME = 'DF_IVLD_ADJUSTED_DEMAND_ACTUAL_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_ADJUSTED_DEMAND_ACTUAL
        ADD CONSTRAINT DF_IVLD_ADJUSTED_DEMAND_ACTUAL_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_ADJUSTED_DEMAND_ACTUAL'
                     AND NAME = 'PK_IVLD_ADJUSTED_DEMAND_ACTUAL_IVLD_ADJUSTED_DEMAND_ACTUAL_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_ADJUSTED_DEMAND_ACTUAL
        ADD CONSTRAINT PK_IVLD_ADJUSTED_DEMAND_ACTUAL_IVLD_ADJUSTED_DEMAND_ACTUAL_SID PRIMARY KEY(IVLD_ADJUSTED_DEMAND_ACTUAL_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_ADJUSTED_DEMAND_ACTUAL'
                      AND NAME = 'DF_IVLD_ADJUSTED_DEMAND_ACTUAL_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ADJUSTED_DEMAND_ACTUAL]
        ADD CONSTRAINT [DF_IVLD_ADJUSTED_DEMAND_ACTUAL_INTF_INSERTED_DATE] DEFAULT (Getdate()) FOR INTF_INSERTED_DATE
  END

GO
--------------------------------cel-703--------------------------------------

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ADJUSTED_DEMAND_ACTUAL'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ADJUSTED_DEMAND_ACTUAL
        ADD CHECK_RECORD BIT NULL
  END

GO


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ADJUSTED_DEMAND_ACTUAL')
                      AND NAME = 'DF_IVLD_ADJUSTED_DEMAND_ACTUAL_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].IVLD_ADJUSTED_DEMAND_ACTUAL
        ADD CONSTRAINT [DF_IVLD_ADJUSTED_DEMAND_ACTUAL_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO

IF EXISTS(SELECT 1 
          FROM   IVLD_ADJUSTED_DEMAND_ACTUAL 
          WHERE  CHECK_RECORD IS NULL) 
  BEGIN 
      UPDATE IVLD_ADJUSTED_DEMAND_ACTUAL 
      SET    CHECK_RECORD = 0 
      WHERE  CHECK_RECORD IS NULL 
  END 

GO 

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_ADJUSTED_DEMAND_ACTUAL'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND Schema_name(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT Object_name(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               Schema_name(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND Schema_name(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + Quotename(@SCHEMANAME)
                       + '.' + Quotename(@TABLENAME) + '.'
                       + Quotename(@STATSNAME)

            --PRINT @SQL
            EXEC Sp_executesql
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + Quotename(C.NAME)
         + ' ON ' + Quotename(Schema_name(SCHEMA_ID))
         + '.' + Quotename(T.NAME) + ' ('
         + Quotename(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = Schema_name(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND Schema_name(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC Sp_executesql
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO 



  ------------------------IVLD_ADJUSTED_DEMAND_FORECAST---------------------------------
  IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_ADJUSTED_DEMAND_FORECAST'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE  [DBO].[IVLD_ADJUSTED_DEMAND_FORECAST]
        (
           ADJUSTED_DEMAND_FORECAST_INTF_ID   [NUMERIC](38, 0) NOT NULL,
           FORECAST_TYPE                  [VARCHAR](200) NULL,
           YEAR                  [VARCHAR](200) NULL,
           MONTH                 [VARCHAR](200) NULL,
           ITEM_ID                        [VARCHAR](200) NULL,
           ITEM_IDENTIFIER_CODE_QUALIFIER [VARCHAR](200) NULL,
           ITEM_IDENTIFIER                [VARCHAR](200) NULL,
           BRAND_ID                       [VARCHAR](200) NULL,
           SEGMENT                        [VARCHAR](200) NULL,
           MARKET_SIZE_UNITS              [VARCHAR](200) NULL,
           MARKET_SHARE_RATIO             [VARCHAR](200) NULL,
           MARKET_SHARE_UNITS             [VARCHAR](200) NULL,
           UNCAPTURED_UNITS               [VARCHAR](200) NULL,
           UNCAPTURED_UNITS_RATIO         [VARCHAR](200) NULL,
           TOTAL_DEMAND_UNITS             [VARCHAR](200) NULL,
           TOTAL_DEMAND_AMOUNT            [VARCHAR](200) NULL,
           INVENTORY_UNIT_CHANGE          [VARCHAR](200) NULL,
           GROSS_UNITS                    [VARCHAR](200) NULL,
		   GROSS_PRICE                    [VARCHAR](200) NULL,
           GROSS_AMOUNT                   [VARCHAR](200) NULL,
           NET_SALES_PRICE                [VARCHAR](200) NULL,
           NET_SALES_AMOUNT               [VARCHAR](200) NULL,
           CREATED_BY                     [VARCHAR](200) NULL,
           CREATED_DATE                   [DATETIME] NULL,
           MODIFIED_BY                    [VARCHAR](200) NULL,
           MODIFIED_DATE                  [DATETIME] NULL,
           ADD_CHG_DEL_INDICATOR          [VARCHAR](200) NULL,
           BATCH_ID                       [VARCHAR](200) NULL,
           SOURCE                         [VARCHAR](200) NULL,
           FORECAST_NAME                  [VARCHAR](200) NULL,
           FORECAST_VER                   [VARCHAR](200) NULL,
           COUNTRY                        [VARCHAR](200) NULL,
           ORGANIZATION_KEY               [VARCHAR](200) NULL,
           INTF_INSERTED_DATE             [VARCHAR](200) NULL,
           REASON_FOR_FAILURE             [VARCHAR](200) NULL,
           ERROR_CODE                     [VARCHAR](200) NULL,
           ERROR_FIELD                    [VARCHAR](200) NULL,
           IVLD_ADJUSTED_DEMAND_FORECAST_SID       [INT] IDENTITY(1, 1) NOT NULL,
           REPROCESSED_FLAG               CHAR(1) NULL
        )
  END

GO


IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ADJUSTED_DEMAND_FORECAST')
                      AND NAME = 'DF_IVLD_ADJUSTED_DEMAND_FORECAST_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_ADJUSTED_DEMAND_FORECAST
        ADD CONSTRAINT DF_IVLD_ADJUSTED_DEMAND_FORECAST_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_ADJUSTED_DEMAND_FORECAST'
                     AND NAME = 'PK_IVLD_ADJUSTED_DEMAND_FORECAST_IVLD_ADJUSTED_DEMAND_FORECAST_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_ADJUSTED_DEMAND_FORECAST
        ADD CONSTRAINT PK_IVLD_ADJUSTED_DEMAND_FORECAST_IVLD_ADJUSTED_DEMAND_FORECAST_SID PRIMARY KEY(IVLD_ADJUSTED_DEMAND_FORECAST_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('DBO.IVLD_ADJUSTED_DEMAND_FORECAST')
                      AND NAME = 'DF_IVLD_ADJUSTED_DEMAND_FORECAST_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].IVLD_ADJUSTED_DEMAND_FORECAST
        ADD CONSTRAINT DF_IVLD_ADJUSTED_DEMAND_FORECAST_INTF_INSERTED_DATE DEFAULT (Getdate()) FOR INTF_INSERTED_DATE
  END

GO
--DROP STATISTICS  FOR INTF_INSERTED_DATE 
IF EXISTS (SELECT 1
           FROM   SYS.STATS
           WHERE  Object_name(OBJECT_ID) = 'IVLD_ADJUSTED_DEMAND_FORECAST'
                  AND AUTO_CREATED = 0
                  AND NAME = 'INTF_INSERTED_DATE')
  BEGIN
      DROP STATISTICS IVLD_ADJUSTED_DEMAND_FORECAST.INTF_INSERTED_DATE
  END

GO

-- DROP DEFAULT CONSTRAINT FOR INTF_INSERTED_DATE 
IF EXISTS(SELECT 1
          FROM   SYS.DEFAULT_CONSTRAINTS
          WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_ADJUSTED_DEMAND_FORECAST'
                 AND SCHEMA_NAME(SCHEMA_ID) = 'DBO'
                 AND NAME = 'DF_IVLD_ADJUSTED_DEMAND_FORECAST_INTF_INSERTED_DATE'
                 AND TYPE = 'D')
  BEGIN
      ALTER TABLE IVLD_ADJUSTED_DEMAND_FORECAST
        DROP CONSTRAINT DF_IVLD_ADJUSTED_DEMAND_FORECAST_INTF_INSERTED_DATE
  END

  GO
-- Changing Data Type from Varchar to DATETIME FOR  INTF_INSERTED_DATE 
IF EXISTS (SELECT 1
           FROM   INFORMATION_SCHEMA.COLUMNS
           WHERE  TABLE_NAME = 'IVLD_ADJUSTED_DEMAND_FORECAST'
                  AND COLUMN_NAME = 'INTF_INSERTED_DATE'
                  AND TABLE_SCHEMA = 'DBO'
                  AND DATA_TYPE = 'varchar')
  BEGIN
      ALTER TABLE IVLD_ADJUSTED_DEMAND_FORECAST
        ALTER COLUMN INTF_INSERTED_DATE DATETIME
  END

GO

--Adding Constraint FOR INTF_INSERTED_DATE 
IF NOT EXISTS(SELECT 1
              FROM   SYS.DEFAULT_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_ADJUSTED_DEMAND_FORECAST'
                     AND SCHEMA_NAME(SCHEMA_ID) = 'DBO'
                     AND NAME = 'DF_IVLD_ADJUSTED_DEMAND_FORECAST_INTF_INSERTED_DATE'
                     AND TYPE = 'D')
  BEGIN
      ALTER TABLE [DBO].IVLD_ADJUSTED_DEMAND_FORECAST
        ADD CONSTRAINT DF_IVLD_ADJUSTED_DEMAND_FORECAST_INTF_INSERTED_DATE DEFAULT Getdate() FOR INTF_INSERTED_DATE
  END

GO 
--------------------------------cel-703--------------------------------------

IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_ADJUSTED_DEMAND_FORECAST'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_ADJUSTED_DEMAND_FORECAST
        ADD CHECK_RECORD BIT NULL
  END

GO


IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_ADJUSTED_DEMAND_FORECAST')
                      AND NAME = 'DF_IVLD_ADJUSTED_DEMAND_FORECAST_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].IVLD_ADJUSTED_DEMAND_FORECAST
        ADD CONSTRAINT [DF_IVLD_ADJUSTED_DEMAND_FORECAST_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END


GO

IF EXISTS(SELECT 1 
          FROM   IVLD_ADJUSTED_DEMAND_FORECAST 
          WHERE  CHECK_RECORD IS NULL) 
  BEGIN 
      UPDATE IVLD_ADJUSTED_DEMAND_FORECAST 
      SET    CHECK_RECORD = 0 
      WHERE  CHECK_RECORD IS NULL 
  END 

GO 


DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_ADJUSTED_DEMAND_FORECAST'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME

IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND Schema_name(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT Object_name(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               Schema_name(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND Schema_name(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + Quotename(@SCHEMANAME)
                       + '.' + Quotename(@TABLENAME) + '.'
                       + Quotename(@STATSNAME)

            --PRINT @SQL
            EXEC Sp_executesql
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + Quotename(C.NAME)
         + ' ON ' + Quotename(Schema_name(SCHEMA_ID))
         + '.' + Quotename(T.NAME) + ' ('
         + Quotename(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = Schema_name(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND Schema_name(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC Sp_executesql
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO 

------------------------------IVLD_RETURN_RESERVE-----------------------------------
IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_RETURN_RESERVE'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].IVLD_RETURN_RESERVE
        (
           IVLD_RETURN_RESERVE_SID INT IDENTITY(1, 1),
           RETURN_RESERVE_INTF_ID  NUMERIC(38, 0) NOT NULL,
           [YEAR]                  VARCHAR(200) NULL,
           [MONTH]                 VARCHAR(200) NULL,
           BRAND_ID                VARCHAR(200) NULL,
           BRAND_NAME              VARCHAR(200) NULL,
           ITEM_ID                 VARCHAR(200) NULL,
           ITEM_NO                 VARCHAR(200) NULL,
           ITEM_NAME               VARCHAR(200) NULL,
           UNITS                   VARCHAR(200) NULL,
           AMOUNT                  VARCHAR(200) NULL,
           COUNTRY                 VARCHAR(200) NULL,
           BUSINESS_UNIT           VARCHAR(200) NULL,
           GL_COMPANY              VARCHAR(200) NULL,
           COMPANY_NO              VARCHAR(200) NULL,
           DIVISION                VARCHAR(200) NULL,
           COST_CENTER             VARCHAR(200) NULL,
           ACCOUNT                 VARCHAR(200) NULL,
           PROJECT                 VARCHAR(200) NULL,
           FUTURE1                 VARCHAR(200) NULL,
           FUTURE2                 VARCHAR(200) NULL,
           UDC1                    VARCHAR(200) NULL,
           UDC2                    VARCHAR(200) NULL,
           UDC3                    VARCHAR(200) NULL,
           UDC4                    VARCHAR(200) NULL,
           UDC5                    VARCHAR(200) NULL,
           UDC6                    VARCHAR(200) NULL,
           ADD_CHG_DEL_INDICATOR   VARCHAR(200) NULL,
           CREATED_BY              VARCHAR(200) NULL,
           CREATED_DATE            DATETIME NULL,
           MODIFIED_BY             VARCHAR(200) NULL,
           MODIFIED_DATE           DATETIME NULL,
           BATCH_ID                VARCHAR(200) NULL,
           SOURCE                  VARCHAR(200) NULL,
           [INTF_INSERTED_DATE]    [DATETIME] NULL,
           [REASON_FOR_FAILURE]    [VARCHAR](1000) NULL,
           [ERROR_CODE]            [VARCHAR](200) NULL,
           [ERROR_FIELD]           [VARCHAR](500) NULL,
           REPROCESSED_FLAG        CHAR(1)
        )
  END

GO

IF NOT EXISTS (SELECT 1
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_RETURN_RESERVE')
                      AND NAME = 'DF_IVLD_RETURN_RESERVE_REPROCESSED_FLAG')
  BEGIN
      ALTER TABLE IVLD_RETURN_RESERVE
        ADD CONSTRAINT DF_IVLD_RETURN_RESERVE_REPROCESSED_FLAG DEFAULT ('N') FOR REPROCESSED_FLAG
  END

GO

IF NOT EXISTS(SELECT 1
              FROM   SYS.KEY_CONSTRAINTS
              WHERE  Object_name(PARENT_OBJECT_ID) = 'IVLD_RETURN_RESERVE'
                     AND NAME = 'PK_IVLD_RETURN_RESERVE_IVLD_RETURN_RESERVE_SID'
                     AND TYPE = 'PK')
  BEGIN
      ALTER TABLE IVLD_RETURN_RESERVE
        ADD CONSTRAINT PK_IVLD_RETURN_RESERVE_IVLD_RETURN_RESERVE_SID PRIMARY KEY(IVLD_RETURN_RESERVE_SID)
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('DBO.IVLD_RETURN_RESERVE')
                      AND NAME = 'DF_IVLD_RETURN_RESERVE_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].IVLD_RETURN_RESERVE
        ADD CONSTRAINT [DF_IVLD_RETURN_RESERVE_INTF_INSERTED_DATE] DEFAULT (Getdate()) FOR INTF_INSERTED_DATE
  END

GO

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_RETURN_RESERVE'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND Schema_name(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT Object_name(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               Schema_name(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND Schema_name(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + Quotename(@SCHEMANAME)
                       + '.' + Quotename(@TABLENAME) + '.'
                       + Quotename(@STATSNAME)

            --PRINT @SQL
            EXEC Sp_executesql
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + Quotename(C.NAME)
         + ' ON ' + Quotename(Schema_name(SCHEMA_ID))
         + '.' + Quotename(T.NAME) + ' ('
         + Quotename(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = Schema_name(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND Schema_name(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC Sp_executesql
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

------------------------------IVLD_ITEM_UOM-----------------------------------
 
 IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_ITEM_UOM'
                      AND TABLE_SCHEMA = 'DBO')---5
  BEGIN
      CREATE TABLE [DBO].[IVLD_ITEM_UOM]
        (          
		   [IVLD_ITEM_UOM_SID]                 int NOT NULL IDENTITY(1,1),
           [ITEM_UOM_CONVERSION_ID]            NUMERIC(38, 0) NOT NULL,
           [ITEM_ID]                           VARCHAR(200)  NULL,
           [ITEM_NO]                           VARCHAR(200) NULL,
           [ITEM_NAME]                         VARCHAR(200) NULL,
           [PRIMARY_UOM_BASELINE_FACTOR]       VARCHAR(200)  NULL,
           [PRIMARY_UOM_CODE]                  VARCHAR(200)  NULL,
           [PRIMARY_UOM_NAME]                  VARCHAR(200)  NULL,
           [SECONDARY_UOM_CONVERSION_FACTOR]   VARCHAR(200)  NULL,
           [SECONDARY_UOM_CODE]                VARCHAR(200)  NULL,
           [SECONDARY_UOM_NAME]                VARCHAR(200)  NULL,
           [STATUS]                            VARCHAR(200) NULL,
           [UPLOAD_DATE]                       DATETIME  NULL,
           [MODIFIED_BY]                       VARCHAR(200) NULL,
           [MODIFIED_DATE]                     DATETIME  NULL,
           [CREATED_BY]                        VARCHAR(200)  NULL,
           [CREATED_DATE]                      DATETIME  NULL,
           [ADD_CHG_DEL_INDICATOR]             VARCHAR(200)  NULL,
           [BATCH_ID]					       VARCHAR(200)  NULL,
           [SOURCE]                      	   VARCHAR(200) NULL,
           [REASON_FOR_FAILURE] 			   VARCHAR(1000) NULL,
		   [INTF_INSERTED_DATE] 			   DATETIME  NULL,
	   	   [ERROR_CODE] 					   VARCHAR(200) NULL,
		   [ERROR_FIELD]					   VARCHAR(500) NULL,
		   [REPROCESSED_FLAG]				   CHAR(1),
		   [CHECK_RECORD]					   BIT DEFAULT ((0))
           
     )
  END

 GO
 
 ---DEFAULT CONSTARINT-------
 IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_ITEM_UOM')
                      AND NAME = 'DF_IVLD_ITEM_UOM_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ITEM_UOM]
        ADD CONSTRAINT [DF_IVLD_ITEM_UOM_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END

GO


DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_ITEM_UOM'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND Schema_name(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT Object_name(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               Schema_name(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND Object_name(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND Schema_name(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + Quotename(@SCHEMANAME)
                       + '.' + Quotename(@TABLENAME) + '.'
                       + Quotename(@STATSNAME)

            --PRINT @SQL
            EXEC Sp_executesql
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + Quotename(C.NAME)
         + ' ON ' + Quotename(Schema_name(SCHEMA_ID))
         + '.' + Quotename(T.NAME) + ' ('
         + Quotename(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = Schema_name(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND Schema_name(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC Sp_executesql
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO

-------------Update statement for IVLD_ITEM_UOM-------------------

IF EXISTS(SELECT * from IVLD_ITEM_UOM  WHERE REPROCESSED_FLAG IS NULL) 
BEGIN
   UPDATE IVLD_ITEM_UOM
   SET REPROCESSED_FLAG='N'
   WHERE REPROCESSED_FLAG IS NULL
END


-------------Add a primary Key For IVLD_ITEM_UOM-------------------



IF NOT EXISTS(SELECT 'X'
              FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE  CONSTRAINT_NAME = 'PK_IVLD_ITEM_UOM_IVLD_ITEM_UOM_SID'
                     AND TABLE_NAME = 'IVLD_ITEM_UOM')
  BEGIN
      ALTER TABLE [DBO].[IVLD_ITEM_UOM]
        ADD CONSTRAINT PK_IVLD_ITEM_UOM_IVLD_ITEM_UOM_SID PRIMARY KEY(IVLD_ITEM_UOM_SID)
  END

GO
 -----------------------------------IVLD_RETURN_RATE_FORECAST-----------------------------------------
 
 IF NOT EXISTS (SELECT 'X'
               FROM   INFORMATION_SCHEMA.TABLES
               WHERE  TABLE_NAME = 'IVLD_RETURN_RATE_FORECAST'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      CREATE TABLE [DBO].[IVLD_RETURN_RATE_FORECAST]
        (          
	   [RETURN_RATE_FORECAST_SID]   INT NOT NULL IDENTITY(1, 1), 
	   [RETURN_RATE_FORECAST_INTERFACE_ID]   VARCHAR(200)  NULL,             
           [ITEM_ID]                     VARCHAR(200)  NULL,
           [ITEM_NO]                     VARCHAR(200) NULL,
           [ITEM_NAME]                   VARCHAR(200) NULL,
           [FORECAST_YEAR]               VARCHAR(200) NULL,
           [FORECAST_MONTH]              VARCHAR(200) NULL,
           [RATE]                        VARCHAR(200) NULL,
           [FORECAST_NAME]               VARCHAR(200) NULL,
           [FORECAST_VER]                VARCHAR(200) NULL,
           [CREATED_BY]                  VARCHAR(200) NULL,
           [CREATED_DATE]                DATETIME NULL,
           [MODIFIED_BY]                 VARCHAR(200) NULL,
           [MODIFIED_DATE]               DATETIME NULL,
           [ADD_CHG_DEL_INDICATOR]       VARCHAR(200)  NULL,
           [BATCH_ID]                    VARCHAR(200)  NULL,
           [SOURCE]                      VARCHAR(200) NULL,
           [REASON_FOR_FAILURE]          VARCHAR(1000) NULL,
           [INTF_INSERTED_DATE]          DATETIME NULL,
           [ERROR_CODE]                  VARCHAR(200) NULL,
           [ERROR_FIELD]                 VARCHAR(200) NULL
     )
  END
  GO
  
  ------------------------DEFAULT CONSTRAINT--------------------

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = OBJECT_ID('DBO.IVLD_RETURN_RATE_FORECAST')
                      AND NAME = 'DF_IVLD_RETURN_RATE_FORECAST_INTF_INSERTED_DATE')
  BEGIN
      ALTER TABLE [DBO].[IVLD_RETURN_RATE_FORECAST]
        ADD CONSTRAINT [DF_IVLD_RETURN_RATE_FORECAST_INTF_INSERTED_DATE] DEFAULT (GETDATE()) FOR INTF_INSERTED_DATE
  END
  
 GO
  
-----------------------------add column in IVLD_RETURN_RATE_FORECAST--------------------------------------------
IF NOT EXISTS (SELECT 1
               FROM   INFORMATION_SCHEMA.COLUMNS
               WHERE  TABLE_NAME = 'IVLD_RETURN_RATE_FORECAST'
                      AND COLUMN_NAME = 'CHECK_RECORD'
                      AND TABLE_SCHEMA = 'DBO')
  BEGIN
      ALTER TABLE IVLD_RETURN_RATE_FORECAST
      ADD CHECK_RECORD BIT NULL
  END

GO

IF NOT EXISTS (SELECT 'X'
               FROM   SYS.DEFAULT_CONSTRAINTS
               WHERE  PARENT_OBJECT_ID = Object_id('IVLD_RETURN_RATE_FORECAST')
                      AND NAME = 'DF_IVLD_RETURN_RATE_FORECAST_CHECK_RECORD')
  BEGIN
      ALTER TABLE [DBO].[IVLD_RETURN_RATE_FORECAST]
      ADD CONSTRAINT [DF_IVLD_RETURN_RATE_FORECAST_CHECK_RECORD] DEFAULT (0) FOR CHECK_RECORD
  END

GO 
------------------IVLD_STATISTICS---------------------

DECLARE @SQL NVARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(100)
DECLARE @STATSNAME VARCHAR(200)
DECLARE @TABLENAME1 VARCHAR(100)
DECLARE @SCHEMANAME VARCHAR(30)
DECLARE @SCHEMANAME1 VARCHAR(30)

SET @TABLENAME1 = 'IVLD_RETURN_RATE_FORECAST'--TABLE NAME
SET @SCHEMANAME1 ='DBO' -- SCHEMA NAME
IF EXISTS (SELECT 'X'
           FROM   SYS.STATS S
                  JOIN SYS.TABLES T
                    ON S.OBJECT_ID = T.OBJECT_ID
           WHERE  AUTO_CREATED = 1
                  AND NOT EXISTS (SELECT 1
                                  FROM   SYS.INDEXES
                                  WHERE  S.NAME = NAME)
                  AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
                  AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1)
  BEGIN
      DECLARE CUR CURSOR STATIC FOR
        SELECT OBJECT_NAME(S.OBJECT_ID) AS 'TABLENAME',
               S.NAME                   AS 'STATSNAME',
               SCHEMA_NAME(T.SCHEMA_ID) AS 'SCHEMA_NAME'
        FROM   SYS.STATS S
               JOIN SYS.TABLES T
                 ON S.OBJECT_ID = T.OBJECT_ID
        WHERE  AUTO_CREATED = 1
               AND NOT EXISTS (SELECT 1
                               FROM   SYS.INDEXES
                               WHERE  S.NAME = NAME)
               AND OBJECT_NAME(S.OBJECT_ID) = @TABLENAME1 -- TABLE NAME
               AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1

      OPEN CUR

      FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = 'DROP STATISTICS ' + QUOTENAME(@SCHEMANAME)
                       + '.' + QUOTENAME(@TABLENAME) + '.'
                       + QUOTENAME(@STATSNAME)

            --PRINT @SQL
            EXEC SP_EXECUTESQL
              @SQL

            FETCH NEXT FROM CUR INTO @TABLENAME, @STATSNAME, @SCHEMANAME
        END

      CLOSE CUR

      DEALLOCATE CUR
  END

DECLARE @STATS NVARCHAR(MAX)
DECLARE CUR1 CURSOR STATIC FOR
  SELECT 'CREATE STATISTICS ' + QUOTENAME(C.NAME)
         + ' ON ' + QUOTENAME(SCHEMA_NAME(SCHEMA_ID))
         + '.' + QUOTENAME(T.NAME) + ' ('
         + QUOTENAME(C.NAME) + ') WITH FULLSCAN'
  FROM   SYS.TABLES T
         JOIN SYS.COLUMNS C
           ON T.OBJECT_ID = C.OBJECT_ID
  WHERE  NOT EXISTS (SELECT 1
                     FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                            INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CC
                                    ON TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
                     WHERE  CC.TABLE_NAME = T.NAME
                            AND CC.TABLE_SCHEMA = SCHEMA_NAME(SCHEMA_ID)
                            AND C.NAME = COLUMN_NAME)
         AND NOT EXISTS (SELECT 1
                         FROM   SYS.STATS S
                         WHERE  S.OBJECT_ID = C.OBJECT_ID
                                AND S.NAME = C.NAME)
         AND T.NAME = @TABLENAME1 -- TABLE NAME
         AND SCHEMA_NAME(SCHEMA_ID) = @SCHEMANAME1
  ORDER  BY T.NAME

OPEN CUR1

FETCH NEXT FROM CUR1 INTO @STATS

WHILE @@FETCH_STATUS = 0
  BEGIN
      --PRINT @STATS
      EXEC SP_EXECUTESQL
        @STATS

      FETCH NEXT FROM CUR1 INTO @STATS
  END

CLOSE CUR1

DEALLOCATE CUR1

GO


