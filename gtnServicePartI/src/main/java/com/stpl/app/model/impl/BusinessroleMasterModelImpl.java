package com.stpl.app.model.impl;

import com.stpl.app.model.BusinessroleMaster;
import com.stpl.app.model.BusinessroleMasterModel;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BusinessroleMaster service. Represents a row in the &quot;BUSINESSROLE_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.BusinessroleMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BusinessroleMasterImpl}.
 * </p>
 *
 * @author
 * @see BusinessroleMasterImpl
 * @see com.stpl.app.model.BusinessroleMaster
 * @see com.stpl.app.model.BusinessroleMasterModel
 * @generated
 */
public class BusinessroleMasterModelImpl extends BaseModelImpl<BusinessroleMaster>
    implements BusinessroleMasterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a businessrole master model instance should use the {@link com.stpl.app.model.BusinessroleMaster} interface instead.
     */
    public static final String TABLE_NAME = "BUSINESSROLE_MASTER";
    public static final Object[][] TABLE_COLUMNS = {
            { "BUSINESSROLE_MASTER_SID", Types.INTEGER },
            { "CREATED_DATE", Types.TIMESTAMP },
            { "CREATED_BY", Types.INTEGER },
            { "USERS_SID", Types.INTEGER },
            { "HIERARCHY_LEVEL", Types.INTEGER },
            { "PROCESSED", Types.VARCHAR },
            { "BUSINESSROLE_NAME", Types.VARCHAR },
            { "VERSION_NO", Types.INTEGER },
            { "MODIFIED_BY", Types.INTEGER },
            { "MODIFIED_DATE", Types.TIMESTAMP },
            { "BUSINESSROLE_DESC", Types.VARCHAR },
            { "IS_ACTIVE", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table BUSINESSROLE_MASTER (BUSINESSROLE_MASTER_SID INTEGER not null primary key IDENTITY,CREATED_DATE DATE null,CREATED_BY INTEGER,USERS_SID INTEGER,HIERARCHY_LEVEL INTEGER,PROCESSED VARCHAR(75) null,BUSINESSROLE_NAME VARCHAR(75) null,VERSION_NO INTEGER,MODIFIED_BY INTEGER,MODIFIED_DATE DATE null,BUSINESSROLE_DESC VARCHAR(75) null,IS_ACTIVE VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table BUSINESSROLE_MASTER";
    public static final String ORDER_BY_JPQL = " ORDER BY businessroleMaster.businessroleName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY BUSINESSROLE_MASTER.BUSINESSROLE_NAME ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.BusinessroleMaster"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.BusinessroleMaster"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stpl.app.model.BusinessroleMaster"),
            true);
    public static long BUSINESSROLENAME_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.BusinessroleMaster"));
    private static ClassLoader _classLoader = BusinessroleMaster.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            BusinessroleMaster.class
        };
    private int _businessroleMasterSid;
    private Date _createdDate;
    private int _createdBy;
    private int _usersSid;
    private int _hierarchyLevel;
    private String _processed;
    private String _businessroleName;
    private String _originalBusinessroleName;
    private int _versionNo;
    private int _modifiedBy;
    private Date _modifiedDate;
    private String _businessroleDesc;
    private String _isActive;
    private long _columnBitmask;
    private BusinessroleMaster _escapedModel;

    public BusinessroleMasterModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _businessroleMasterSid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setBusinessroleMasterSid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _businessroleMasterSid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return BusinessroleMaster.class;
    }

    @Override
    public String getModelClassName() {
        return BusinessroleMaster.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("businessroleMasterSid", getBusinessroleMasterSid());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("usersSid", getUsersSid());
        attributes.put("hierarchyLevel", getHierarchyLevel());
        attributes.put("processed", getProcessed());
        attributes.put("businessroleName", getBusinessroleName());
        attributes.put("versionNo", getVersionNo());
        attributes.put("modifiedBy", getModifiedBy());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("businessroleDesc", getBusinessroleDesc());
        attributes.put("isActive", getIsActive());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer businessroleMasterSid = (Integer) attributes.get(
                "businessroleMasterSid");

        if (businessroleMasterSid != null) {
            setBusinessroleMasterSid(businessroleMasterSid);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Integer createdBy = (Integer) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Integer usersSid = (Integer) attributes.get("usersSid");

        if (usersSid != null) {
            setUsersSid(usersSid);
        }

        Integer hierarchyLevel = (Integer) attributes.get("hierarchyLevel");

        if (hierarchyLevel != null) {
            setHierarchyLevel(hierarchyLevel);
        }

        String processed = (String) attributes.get("processed");

        if (processed != null) {
            setProcessed(processed);
        }

        String businessroleName = (String) attributes.get("businessroleName");

        if (businessroleName != null) {
            setBusinessroleName(businessroleName);
        }

        Integer versionNo = (Integer) attributes.get("versionNo");

        if (versionNo != null) {
            setVersionNo(versionNo);
        }

        Integer modifiedBy = (Integer) attributes.get("modifiedBy");

        if (modifiedBy != null) {
            setModifiedBy(modifiedBy);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String businessroleDesc = (String) attributes.get("businessroleDesc");

        if (businessroleDesc != null) {
            setBusinessroleDesc(businessroleDesc);
        }

        String isActive = (String) attributes.get("isActive");

        if (isActive != null) {
            setIsActive(isActive);
        }
    }

    @Override
    public int getBusinessroleMasterSid() {
        return _businessroleMasterSid;
    }

    @Override
    public void setBusinessroleMasterSid(int businessroleMasterSid) {
        _businessroleMasterSid = businessroleMasterSid;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public int getCreatedBy() {
        return _createdBy;
    }

    @Override
    public void setCreatedBy(int createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public int getUsersSid() {
        return _usersSid;
    }

    @Override
    public void setUsersSid(int usersSid) {
        _usersSid = usersSid;
    }

    @Override
    public int getHierarchyLevel() {
        return _hierarchyLevel;
    }

    @Override
    public void setHierarchyLevel(int hierarchyLevel) {
        _hierarchyLevel = hierarchyLevel;
    }

    @Override
    public String getProcessed() {
        if (_processed == null) {
            return StringPool.BLANK;
        } else {
            return _processed;
        }
    }

    @Override
    public void setProcessed(String processed) {
        _processed = processed;
    }

    @Override
    public String getBusinessroleName() {
        if (_businessroleName == null) {
            return StringPool.BLANK;
        } else {
            return _businessroleName;
        }
    }

    @Override
    public void setBusinessroleName(String businessroleName) {
        _columnBitmask = -1L;

        if (_originalBusinessroleName == null) {
            _originalBusinessroleName = _businessroleName;
        }

        _businessroleName = businessroleName;
    }

    public String getOriginalBusinessroleName() {
        return GetterUtil.getString(_originalBusinessroleName);
    }

    @Override
    public int getVersionNo() {
        return _versionNo;
    }

    @Override
    public void setVersionNo(int versionNo) {
        _versionNo = versionNo;
    }

    @Override
    public int getModifiedBy() {
        return _modifiedBy;
    }

    @Override
    public void setModifiedBy(int modifiedBy) {
        _modifiedBy = modifiedBy;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getBusinessroleDesc() {
        if (_businessroleDesc == null) {
            return StringPool.BLANK;
        } else {
            return _businessroleDesc;
        }
    }

    @Override
    public void setBusinessroleDesc(String businessroleDesc) {
        _businessroleDesc = businessroleDesc;
    }

    @Override
    public String getIsActive() {
        if (_isActive == null) {
            return StringPool.BLANK;
        } else {
            return _isActive;
        }
    }

    @Override
    public void setIsActive(String isActive) {
        _isActive = isActive;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public BusinessroleMaster toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (BusinessroleMaster) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        BusinessroleMasterImpl businessroleMasterImpl = new BusinessroleMasterImpl();

        businessroleMasterImpl.setBusinessroleMasterSid(getBusinessroleMasterSid());
        businessroleMasterImpl.setCreatedDate(getCreatedDate());
        businessroleMasterImpl.setCreatedBy(getCreatedBy());
        businessroleMasterImpl.setUsersSid(getUsersSid());
        businessroleMasterImpl.setHierarchyLevel(getHierarchyLevel());
        businessroleMasterImpl.setProcessed(getProcessed());
        businessroleMasterImpl.setBusinessroleName(getBusinessroleName());
        businessroleMasterImpl.setVersionNo(getVersionNo());
        businessroleMasterImpl.setModifiedBy(getModifiedBy());
        businessroleMasterImpl.setModifiedDate(getModifiedDate());
        businessroleMasterImpl.setBusinessroleDesc(getBusinessroleDesc());
        businessroleMasterImpl.setIsActive(getIsActive());

        businessroleMasterImpl.resetOriginalValues();

        return businessroleMasterImpl;
    }

    @Override
    public int compareTo(BusinessroleMaster businessroleMaster) {
        int value = 0;

        value = getBusinessroleName()
                    .compareToIgnoreCase(businessroleMaster.getBusinessroleName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof BusinessroleMaster)) {
            return false;
        }

        BusinessroleMaster businessroleMaster = (BusinessroleMaster) obj;

        int primaryKey = businessroleMaster.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        BusinessroleMasterModelImpl businessroleMasterModelImpl = this;

        businessroleMasterModelImpl._originalBusinessroleName = businessroleMasterModelImpl._businessroleName;

        businessroleMasterModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<BusinessroleMaster> toCacheModel() {
        BusinessroleMasterCacheModel businessroleMasterCacheModel = new BusinessroleMasterCacheModel();

        businessroleMasterCacheModel.businessroleMasterSid = getBusinessroleMasterSid();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            businessroleMasterCacheModel.createdDate = createdDate.getTime();
        } else {
            businessroleMasterCacheModel.createdDate = Long.MIN_VALUE;
        }

        businessroleMasterCacheModel.createdBy = getCreatedBy();

        businessroleMasterCacheModel.usersSid = getUsersSid();

        businessroleMasterCacheModel.hierarchyLevel = getHierarchyLevel();

        businessroleMasterCacheModel.processed = getProcessed();

        String processed = businessroleMasterCacheModel.processed;

        if ((processed != null) && (processed.length() == 0)) {
            businessroleMasterCacheModel.processed = null;
        }

        businessroleMasterCacheModel.businessroleName = getBusinessroleName();

        String businessroleName = businessroleMasterCacheModel.businessroleName;

        if ((businessroleName != null) && (businessroleName.length() == 0)) {
            businessroleMasterCacheModel.businessroleName = null;
        }

        businessroleMasterCacheModel.versionNo = getVersionNo();

        businessroleMasterCacheModel.modifiedBy = getModifiedBy();

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            businessroleMasterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            businessroleMasterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        businessroleMasterCacheModel.businessroleDesc = getBusinessroleDesc();

        String businessroleDesc = businessroleMasterCacheModel.businessroleDesc;

        if ((businessroleDesc != null) && (businessroleDesc.length() == 0)) {
            businessroleMasterCacheModel.businessroleDesc = null;
        }

        businessroleMasterCacheModel.isActive = getIsActive();

        String isActive = businessroleMasterCacheModel.isActive;

        if ((isActive != null) && (isActive.length() == 0)) {
            businessroleMasterCacheModel.isActive = null;
        }

        return businessroleMasterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{businessroleMasterSid=");
        sb.append(getBusinessroleMasterSid());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", usersSid=");
        sb.append(getUsersSid());
        sb.append(", hierarchyLevel=");
        sb.append(getHierarchyLevel());
        sb.append(", processed=");
        sb.append(getProcessed());
        sb.append(", businessroleName=");
        sb.append(getBusinessroleName());
        sb.append(", versionNo=");
        sb.append(getVersionNo());
        sb.append(", modifiedBy=");
        sb.append(getModifiedBy());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", businessroleDesc=");
        sb.append(getBusinessroleDesc());
        sb.append(", isActive=");
        sb.append(getIsActive());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.BusinessroleMaster");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>businessroleMasterSid</column-name><column-value><![CDATA[");
        sb.append(getBusinessroleMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>usersSid</column-name><column-value><![CDATA[");
        sb.append(getUsersSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hierarchyLevel</column-name><column-value><![CDATA[");
        sb.append(getHierarchyLevel());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>processed</column-name><column-value><![CDATA[");
        sb.append(getProcessed());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>businessroleName</column-name><column-value><![CDATA[");
        sb.append(getBusinessroleName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>versionNo</column-name><column-value><![CDATA[");
        sb.append(getVersionNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
        sb.append(getModifiedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>businessroleDesc</column-name><column-value><![CDATA[");
        sb.append(getBusinessroleDesc());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isActive</column-name><column-value><![CDATA[");
        sb.append(getIsActive());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
