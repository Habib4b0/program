/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stpl.app.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.stpl.app.model.DeductionDetails;
import com.stpl.app.model.DeductionDetailsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DeductionDetails service. Represents a row in the &quot;DEDUCTION_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DeductionDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DeductionDetailsImpl}.
 * </p>
 *
 * @author
 * @see DeductionDetailsImpl
 * @see DeductionDetails
 * @see DeductionDetailsModel
 * @generated
 */
@ProviderType
public class DeductionDetailsModelImpl extends BaseModelImpl<DeductionDetails>
	implements DeductionDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a deduction details model instance should use the {@link DeductionDetails} interface instead.
	 */
	public static final String TABLE_NAME = "DEDUCTION_DETAILS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CREATED_BY", Types.INTEGER },
			{ "NET_SALES_FORMULA_MASTER_SID", Types.INTEGER },
			{ "MODIFIED_BY", Types.INTEGER },
			{ "RS_CONTRACT_SID", Types.INTEGER },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "CONTRACT_MASTER_SID", Types.INTEGER },
			{ "DEDUCTION_DETAILS_SID", Types.INTEGER },
			{ "INDICATOR", Types.VARCHAR },
			{ "MODIFIED_DATE", Types.TIMESTAMP },
			{ "RECORD_LOCK_STATUS", Types.BOOLEAN },
			{ "SOURCE", Types.VARCHAR },
			{ "CDR_MODEL_SID", Types.INTEGER },
			{ "INBOUND_STATUS", Types.VARCHAR },
			{ "DEDUCTION_SUB_TYPE", Types.VARCHAR },
			{ "DEDUCTION_TYPE", Types.VARCHAR },
			{ "DEDUCTION_CATEGORY", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NET_SALES_FORMULA_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RS_CONTRACT_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CREATED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CONTRACT_MASTER_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("DEDUCTION_DETAILS_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("INDICATOR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("RECORD_LOCK_STATUS", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CDR_MODEL_SID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("INBOUND_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_SUB_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTION_CATEGORY", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table DEDUCTION_DETAILS (CREATED_BY INTEGER,NET_SALES_FORMULA_MASTER_SID INTEGER,MODIFIED_BY INTEGER,RS_CONTRACT_SID INTEGER,CREATED_DATE DATE null,CONTRACT_MASTER_SID INTEGER,DEDUCTION_DETAILS_SID INTEGER not null primary key IDENTITY,INDICATOR VARCHAR(75) null,MODIFIED_DATE DATE null,RECORD_LOCK_STATUS BOOLEAN,SOURCE VARCHAR(75) null,CDR_MODEL_SID INTEGER,INBOUND_STATUS VARCHAR(75) null,DEDUCTION_SUB_TYPE VARCHAR(75) null,DEDUCTION_TYPE VARCHAR(75) null,DEDUCTION_CATEGORY VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DEDUCTION_DETAILS";
	public static final String ORDER_BY_JPQL = " ORDER BY deductionDetails.deductionDetailsSid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DEDUCTION_DETAILS.DEDUCTION_DETAILS_SID ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.stpl.app.model.DeductionDetails"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.app.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.stpl.app.model.DeductionDetails"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.app.service.util.PropsUtil.get(
				"lock.expiration.time.com.stpl.app.model.DeductionDetails"));

	public DeductionDetailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _deductionDetailsSid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setDeductionDetailsSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _deductionDetailsSid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DeductionDetails.class;
	}

	@Override
	public String getModelClassName() {
		return DeductionDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("createdBy", getCreatedBy());
		attributes.put("netSalesFormulaMasterSid", getNetSalesFormulaMasterSid());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("rsContractSid", getRsContractSid());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("contractMasterSid", getContractMasterSid());
		attributes.put("deductionDetailsSid", getDeductionDetailsSid());
		attributes.put("indicator", getIndicator());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("recordLockStatus", getRecordLockStatus());
		attributes.put("source", getSource());
		attributes.put("cdrModelSid", getCdrModelSid());
		attributes.put("inboundStatus", getInboundStatus());
		attributes.put("deductionSubType", getDeductionSubType());
		attributes.put("deductionType", getDeductionType());
		attributes.put("deductionCategory", getDeductionCategory());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer createdBy = (Integer)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Integer netSalesFormulaMasterSid = (Integer)attributes.get(
				"netSalesFormulaMasterSid");

		if (netSalesFormulaMasterSid != null) {
			setNetSalesFormulaMasterSid(netSalesFormulaMasterSid);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Integer rsContractSid = (Integer)attributes.get("rsContractSid");

		if (rsContractSid != null) {
			setRsContractSid(rsContractSid);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Integer contractMasterSid = (Integer)attributes.get("contractMasterSid");

		if (contractMasterSid != null) {
			setContractMasterSid(contractMasterSid);
		}

		Integer deductionDetailsSid = (Integer)attributes.get(
				"deductionDetailsSid");

		if (deductionDetailsSid != null) {
			setDeductionDetailsSid(deductionDetailsSid);
		}

		String indicator = (String)attributes.get("indicator");

		if (indicator != null) {
			setIndicator(indicator);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Boolean recordLockStatus = (Boolean)attributes.get("recordLockStatus");

		if (recordLockStatus != null) {
			setRecordLockStatus(recordLockStatus);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		Integer cdrModelSid = (Integer)attributes.get("cdrModelSid");

		if (cdrModelSid != null) {
			setCdrModelSid(cdrModelSid);
		}

		String inboundStatus = (String)attributes.get("inboundStatus");

		if (inboundStatus != null) {
			setInboundStatus(inboundStatus);
		}

		String deductionSubType = (String)attributes.get("deductionSubType");

		if (deductionSubType != null) {
			setDeductionSubType(deductionSubType);
		}

		String deductionType = (String)attributes.get("deductionType");

		if (deductionType != null) {
			setDeductionType(deductionType);
		}

		String deductionCategory = (String)attributes.get("deductionCategory");

		if (deductionCategory != null) {
			setDeductionCategory(deductionCategory);
		}
	}

	@Override
	public int getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(int createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public int getNetSalesFormulaMasterSid() {
		return _netSalesFormulaMasterSid;
	}

	@Override
	public void setNetSalesFormulaMasterSid(int netSalesFormulaMasterSid) {
		_netSalesFormulaMasterSid = netSalesFormulaMasterSid;
	}

	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public int getRsContractSid() {
		return _rsContractSid;
	}

	@Override
	public void setRsContractSid(int rsContractSid) {
		_rsContractSid = rsContractSid;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public int getContractMasterSid() {
		return _contractMasterSid;
	}

	@Override
	public void setContractMasterSid(int contractMasterSid) {
		_contractMasterSid = contractMasterSid;
	}

	@Override
	public int getDeductionDetailsSid() {
		return _deductionDetailsSid;
	}

	@Override
	public void setDeductionDetailsSid(int deductionDetailsSid) {
		_deductionDetailsSid = deductionDetailsSid;
	}

	@Override
	public String getIndicator() {
		if (_indicator == null) {
			return StringPool.BLANK;
		}
		else {
			return _indicator;
		}
	}

	@Override
	public void setIndicator(String indicator) {
		_indicator = indicator;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public boolean getRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public boolean isRecordLockStatus() {
		return _recordLockStatus;
	}

	@Override
	public void setRecordLockStatus(boolean recordLockStatus) {
		_recordLockStatus = recordLockStatus;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public int getCdrModelSid() {
		return _cdrModelSid;
	}

	@Override
	public void setCdrModelSid(int cdrModelSid) {
		_cdrModelSid = cdrModelSid;
	}

	@Override
	public String getInboundStatus() {
		if (_inboundStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _inboundStatus;
		}
	}

	@Override
	public void setInboundStatus(String inboundStatus) {
		_inboundStatus = inboundStatus;
	}

	@Override
	public String getDeductionSubType() {
		return _deductionSubType;
	}

	@Override
	public void setDeductionSubType(String deductionSubType) {
		_deductionSubType = deductionSubType;
	}

	@Override
	public String getDeductionType() {
		return _deductionType;
	}

	@Override
	public void setDeductionType(String deductionType) {
		_deductionType = deductionType;
	}

	@Override
	public String getDeductionCategory() {
		return _deductionCategory;
	}

	@Override
	public void setDeductionCategory(String deductionCategory) {
		_deductionCategory = deductionCategory;
	}

	@Override
	public DeductionDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DeductionDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DeductionDetailsImpl deductionDetailsImpl = new DeductionDetailsImpl();

		deductionDetailsImpl.setCreatedBy(getCreatedBy());
		deductionDetailsImpl.setNetSalesFormulaMasterSid(getNetSalesFormulaMasterSid());
		deductionDetailsImpl.setModifiedBy(getModifiedBy());
		deductionDetailsImpl.setRsContractSid(getRsContractSid());
		deductionDetailsImpl.setCreatedDate(getCreatedDate());
		deductionDetailsImpl.setContractMasterSid(getContractMasterSid());
		deductionDetailsImpl.setDeductionDetailsSid(getDeductionDetailsSid());
		deductionDetailsImpl.setIndicator(getIndicator());
		deductionDetailsImpl.setModifiedDate(getModifiedDate());
		deductionDetailsImpl.setRecordLockStatus(getRecordLockStatus());
		deductionDetailsImpl.setSource(getSource());
		deductionDetailsImpl.setCdrModelSid(getCdrModelSid());
		deductionDetailsImpl.setInboundStatus(getInboundStatus());
		deductionDetailsImpl.setDeductionSubType(getDeductionSubType());
		deductionDetailsImpl.setDeductionType(getDeductionType());
		deductionDetailsImpl.setDeductionCategory(getDeductionCategory());

		deductionDetailsImpl.resetOriginalValues();

		return deductionDetailsImpl;
	}

	@Override
	public int compareTo(DeductionDetails deductionDetails) {
		int primaryKey = deductionDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DeductionDetails)) {
			return false;
		}

		DeductionDetails deductionDetails = (DeductionDetails)obj;

		int primaryKey = deductionDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DeductionDetails> toCacheModel() {
		DeductionDetailsCacheModel deductionDetailsCacheModel = new DeductionDetailsCacheModel();

		deductionDetailsCacheModel.createdBy = getCreatedBy();

		deductionDetailsCacheModel.netSalesFormulaMasterSid = getNetSalesFormulaMasterSid();

		deductionDetailsCacheModel.modifiedBy = getModifiedBy();

		deductionDetailsCacheModel.rsContractSid = getRsContractSid();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			deductionDetailsCacheModel.createdDate = createdDate.getTime();
		}
		else {
			deductionDetailsCacheModel.createdDate = Long.MIN_VALUE;
		}

		deductionDetailsCacheModel.contractMasterSid = getContractMasterSid();

		deductionDetailsCacheModel.deductionDetailsSid = getDeductionDetailsSid();

		deductionDetailsCacheModel.indicator = getIndicator();

		String indicator = deductionDetailsCacheModel.indicator;

		if ((indicator != null) && (indicator.length() == 0)) {
			deductionDetailsCacheModel.indicator = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			deductionDetailsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			deductionDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		deductionDetailsCacheModel.recordLockStatus = getRecordLockStatus();

		deductionDetailsCacheModel.source = getSource();

		String source = deductionDetailsCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			deductionDetailsCacheModel.source = null;
		}

		deductionDetailsCacheModel.cdrModelSid = getCdrModelSid();

		deductionDetailsCacheModel.inboundStatus = getInboundStatus();

		String inboundStatus = deductionDetailsCacheModel.inboundStatus;

		if ((inboundStatus != null) && (inboundStatus.length() == 0)) {
			deductionDetailsCacheModel.inboundStatus = null;
		}

		deductionDetailsCacheModel.deductionSubType = getDeductionSubType();

		String deductionSubType = deductionDetailsCacheModel.deductionSubType;

		if ((deductionSubType != null) && (deductionSubType.length() == 0)) {
			deductionDetailsCacheModel.deductionSubType = null;
		}

		deductionDetailsCacheModel.deductionType = getDeductionType();

		String deductionType = deductionDetailsCacheModel.deductionType;

		if ((deductionType != null) && (deductionType.length() == 0)) {
			deductionDetailsCacheModel.deductionType = null;
		}

		deductionDetailsCacheModel.deductionCategory = getDeductionCategory();

		String deductionCategory = deductionDetailsCacheModel.deductionCategory;

		if ((deductionCategory != null) && (deductionCategory.length() == 0)) {
			deductionDetailsCacheModel.deductionCategory = null;
		}

		return deductionDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{createdBy=");
		sb.append(getCreatedBy());
		sb.append(", netSalesFormulaMasterSid=");
		sb.append(getNetSalesFormulaMasterSid());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", rsContractSid=");
		sb.append(getRsContractSid());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", contractMasterSid=");
		sb.append(getContractMasterSid());
		sb.append(", deductionDetailsSid=");
		sb.append(getDeductionDetailsSid());
		sb.append(", indicator=");
		sb.append(getIndicator());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", recordLockStatus=");
		sb.append(getRecordLockStatus());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", cdrModelSid=");
		sb.append(getCdrModelSid());
		sb.append(", inboundStatus=");
		sb.append(getInboundStatus());
		sb.append(", deductionSubType=");
		sb.append(getDeductionSubType());
		sb.append(", deductionType=");
		sb.append(getDeductionType());
		sb.append(", deductionCategory=");
		sb.append(getDeductionCategory());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.stpl.app.model.DeductionDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSalesFormulaMasterSid</column-name><column-value><![CDATA[");
		sb.append(getNetSalesFormulaMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsContractSid</column-name><column-value><![CDATA[");
		sb.append(getRsContractSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractMasterSid</column-name><column-value><![CDATA[");
		sb.append(getContractMasterSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionDetailsSid</column-name><column-value><![CDATA[");
		sb.append(getDeductionDetailsSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indicator</column-name><column-value><![CDATA[");
		sb.append(getIndicator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordLockStatus</column-name><column-value><![CDATA[");
		sb.append(getRecordLockStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cdrModelSid</column-name><column-value><![CDATA[");
		sb.append(getCdrModelSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inboundStatus</column-name><column-value><![CDATA[");
		sb.append(getInboundStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionSubType</column-name><column-value><![CDATA[");
		sb.append(getDeductionSubType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionType</column-name><column-value><![CDATA[");
		sb.append(getDeductionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deductionCategory</column-name><column-value><![CDATA[");
		sb.append(getDeductionCategory());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DeductionDetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DeductionDetails.class
		};
	private int _createdBy;
	private int _netSalesFormulaMasterSid;
	private int _modifiedBy;
	private int _rsContractSid;
	private Date _createdDate;
	private int _contractMasterSid;
	private int _deductionDetailsSid;
	private String _indicator;
	private Date _modifiedDate;
	private boolean _recordLockStatus;
	private String _source;
	private int _cdrModelSid;
	private String _inboundStatus;
	private String _deductionSubType;
	private String _deductionType;
	private String _deductionCategory;
	private DeductionDetails _escapedModel;
}