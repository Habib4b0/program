package com.stpl.app.model.impl;

import com.stpl.app.model.NationalAssumptionsProj;
import com.stpl.app.model.NationalAssumptionsProjModel;
import com.stpl.app.service.persistence.NationalAssumptionsProjPK;

import com.stpl.portal.kernel.bean.AutoEscapeBeanHandler;
import com.stpl.portal.kernel.util.GetterUtil;
import com.stpl.portal.kernel.util.ProxyUtil;
import com.stpl.portal.kernel.util.StringBundler;
import com.stpl.portal.kernel.util.StringPool;
import com.stpl.portal.model.CacheModel;
import com.stpl.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NationalAssumptionsProj service. Represents a row in the &quot;NATIONAL_ASSUMPTIONS_PROJ&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stpl.app.model.NationalAssumptionsProjModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NationalAssumptionsProjImpl}.
 * </p>
 *
 * @author
 * @see NationalAssumptionsProjImpl
 * @see com.stpl.app.model.NationalAssumptionsProj
 * @see com.stpl.app.model.NationalAssumptionsProjModel
 * @generated
 */
public class NationalAssumptionsProjModelImpl extends BaseModelImpl<NationalAssumptionsProj>
    implements NationalAssumptionsProjModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a national assumptions proj model instance should use the {@link com.stpl.app.model.NationalAssumptionsProj} interface instead.
     */
    public static final String TABLE_NAME = "NATIONAL_ASSUMPTIONS_PROJ";
    public static final Object[][] TABLE_COLUMNS = {
            { "PERIOD_SID", Types.INTEGER },
            { "ITEM_MASTER_SID", Types.INTEGER },
            { "PRICE_TYPE", Types.VARCHAR },
            { "PROJECTION_PRICE", Types.DOUBLE }
        };
    public static final String TABLE_SQL_CREATE = "create table NATIONAL_ASSUMPTIONS_PROJ (PERIOD_SID INTEGER not null IDENTITY,ITEM_MASTER_SID INTEGER not null IDENTITY,PRICE_TYPE VARCHAR(75) not null IDENTITY,PROJECTION_PRICE DOUBLE,primary key (PERIOD_SID, ITEM_MASTER_SID, PRICE_TYPE))";
    public static final String TABLE_SQL_DROP = "drop table NATIONAL_ASSUMPTIONS_PROJ";
    public static final String ORDER_BY_JPQL = " ORDER BY nationalAssumptionsProj.id.periodSid ASC, nationalAssumptionsProj.id.itemMasterSid ASC, nationalAssumptionsProj.id.priceType ASC";
    public static final String ORDER_BY_SQL = " ORDER BY NATIONAL_ASSUMPTIONS_PROJ.PERIOD_SID ASC, NATIONAL_ASSUMPTIONS_PROJ.ITEM_MASTER_SID ASC, NATIONAL_ASSUMPTIONS_PROJ.PRICE_TYPE ASC";
    public static final String DATA_SOURCE = "appDataSource";
    public static final String SESSION_FACTORY = "appSessionFactory";
    public static final String TX_MANAGER = "appTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stpl.app.model.NationalAssumptionsProj"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.stpl.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stpl.app.model.NationalAssumptionsProj"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.stpl.util.service.ServiceProps.get(
                "lock.expiration.time.com.stpl.app.model.NationalAssumptionsProj"));
    private static ClassLoader _classLoader = NationalAssumptionsProj.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            NationalAssumptionsProj.class
        };
    private int _periodSid;
    private int _itemMasterSid;
    private String _priceType;
    private double _projectionPrice;
    private NationalAssumptionsProj _escapedModel;

    public NationalAssumptionsProjModelImpl() {
    }

    @Override
    public NationalAssumptionsProjPK getPrimaryKey() {
        return new NationalAssumptionsProjPK(_periodSid, _itemMasterSid,
            _priceType);
    }

    @Override
    public void setPrimaryKey(NationalAssumptionsProjPK primaryKey) {
        setPeriodSid(primaryKey.periodSid);
        setItemMasterSid(primaryKey.itemMasterSid);
        setPriceType(primaryKey.priceType);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new NationalAssumptionsProjPK(_periodSid, _itemMasterSid,
            _priceType);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((NationalAssumptionsProjPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return NationalAssumptionsProj.class;
    }

    @Override
    public String getModelClassName() {
        return NationalAssumptionsProj.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("periodSid", getPeriodSid());
        attributes.put("itemMasterSid", getItemMasterSid());
        attributes.put("priceType", getPriceType());
        attributes.put("projectionPrice", getProjectionPrice());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer periodSid = (Integer) attributes.get("periodSid");

        if (periodSid != null) {
            setPeriodSid(periodSid);
        }

        Integer itemMasterSid = (Integer) attributes.get("itemMasterSid");

        if (itemMasterSid != null) {
            setItemMasterSid(itemMasterSid);
        }

        String priceType = (String) attributes.get("priceType");

        if (priceType != null) {
            setPriceType(priceType);
        }

        Double projectionPrice = (Double) attributes.get("projectionPrice");

        if (projectionPrice != null) {
            setProjectionPrice(projectionPrice);
        }
    }

    @Override
    public int getPeriodSid() {
        return _periodSid;
    }

    @Override
    public void setPeriodSid(int periodSid) {
        _periodSid = periodSid;
    }

    @Override
    public int getItemMasterSid() {
        return _itemMasterSid;
    }

    @Override
    public void setItemMasterSid(int itemMasterSid) {
        _itemMasterSid = itemMasterSid;
    }

    @Override
    public String getPriceType() {
        if (_priceType == null) {
            return StringPool.BLANK;
        } else {
            return _priceType;
        }
    }

    @Override
    public void setPriceType(String priceType) {
        _priceType = priceType;
    }

    @Override
    public double getProjectionPrice() {
        return _projectionPrice;
    }

    @Override
    public void setProjectionPrice(double projectionPrice) {
        _projectionPrice = projectionPrice;
    }

    @Override
    public NationalAssumptionsProj toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (NationalAssumptionsProj) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NationalAssumptionsProjImpl nationalAssumptionsProjImpl = new NationalAssumptionsProjImpl();

        nationalAssumptionsProjImpl.setPeriodSid(getPeriodSid());
        nationalAssumptionsProjImpl.setItemMasterSid(getItemMasterSid());
        nationalAssumptionsProjImpl.setPriceType(getPriceType());
        nationalAssumptionsProjImpl.setProjectionPrice(getProjectionPrice());

        nationalAssumptionsProjImpl.resetOriginalValues();

        return nationalAssumptionsProjImpl;
    }

    @Override
    public int compareTo(NationalAssumptionsProj nationalAssumptionsProj) {
        NationalAssumptionsProjPK primaryKey = nationalAssumptionsProj.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof NationalAssumptionsProj)) {
            return false;
        }

        NationalAssumptionsProj nationalAssumptionsProj = (NationalAssumptionsProj) obj;

        NationalAssumptionsProjPK primaryKey = nationalAssumptionsProj.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<NationalAssumptionsProj> toCacheModel() {
        NationalAssumptionsProjCacheModel nationalAssumptionsProjCacheModel = new NationalAssumptionsProjCacheModel();

        nationalAssumptionsProjCacheModel.periodSid = getPeriodSid();

        nationalAssumptionsProjCacheModel.itemMasterSid = getItemMasterSid();

        nationalAssumptionsProjCacheModel.priceType = getPriceType();

        String priceType = nationalAssumptionsProjCacheModel.priceType;

        if ((priceType != null) && (priceType.length() == 0)) {
            nationalAssumptionsProjCacheModel.priceType = null;
        }

        nationalAssumptionsProjCacheModel.projectionPrice = getProjectionPrice();

        return nationalAssumptionsProjCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{periodSid=");
        sb.append(getPeriodSid());
        sb.append(", itemMasterSid=");
        sb.append(getItemMasterSid());
        sb.append(", priceType=");
        sb.append(getPriceType());
        sb.append(", projectionPrice=");
        sb.append(getProjectionPrice());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.stpl.app.model.NationalAssumptionsProj");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>periodSid</column-name><column-value><![CDATA[");
        sb.append(getPeriodSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemMasterSid</column-name><column-value><![CDATA[");
        sb.append(getItemMasterSid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceType</column-name><column-value><![CDATA[");
        sb.append(getPriceType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectionPrice</column-name><column-value><![CDATA[");
        sb.append(getProjectionPrice());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
