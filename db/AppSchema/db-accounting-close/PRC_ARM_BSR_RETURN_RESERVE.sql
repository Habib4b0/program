IF EXISTS (SELECT 'X' 
           FROM   INFORMATION_SCHEMA.ROUTINES 
           WHERE  ROUTINE_NAME = 'PRC_ARM_BSR_RETURN_RESERVE' 
                  AND ROUTINE_SCHEMA = 'DBO') 
  BEGIN 
      DROP PROCEDURE [DBO].PRC_ARM_BSR_RETURN_RESERVE 
  END 

GO 
CREATE PROCEDURE [dbo].PRC_ARM_BSR_RETURN_RESERVE (@PROJECTION_MASTER_SID INT, 
                                         @USER_ID               INT, 
                                         @SESSION_ID            INT) 
AS 

/**********************************************************************************************************
** File Name  	:	PRC_ARM_BSR_RETURN_RESERVE.sql
** Procedure Name	:	PRC_ARM_BSR_RETURN_RESERVE
** Description		:	To generate BSR Return Reserve Adjustment Summary tab.
** Input Parameters	:	@PROJECTION_MASTER_SID  - Respective Projection ID Creted for BSR Return Reserve report
				        @USER_ID                - it is the identification of the User Performing particular projection
						@SESSION_ID             - it is the identification of session for particular projection
											
** Output Parameters:	NA
** Author Name		:	@AjayNaidu
** Creation Date	:	23/10/2017 - MM/DD/YYYY
** Called By		:   Called by Application for BSR Return Reserve report 
**********************************************************************************************************
** Change History
**********************************************************************************************************
** VER   Date        Ticket No                        Author           Description 
** ---  --------     ---------                     -------------     -----------------------------
**  01  06/11/2017    GAL-12683                     @AjayNaidu      Chngaed the logic of ccp+d insertion in temp table
**  02  16/11/2017    GAL-12753                     @AjayNaidu      Approved Projection Concept Changed
**  03  21/11/2017    GAL-12781                     @AjayNaidu      Optimized the procedure of recursive cte
**  04  28-12-2017    GAL-12267                     @AjayNaidu      BP014 - [NOT] NULL option
**  05  02-01-2018    GAL-12271                     @AjayNaidu      PE003 Select into option removal
**  06  08-01-2018    GAL-12270                     @AjayNaidu      EI025 PE001 PE010 ST008 MI005 MI002 Error codes  
*********************************************************************************************************/

BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		-- Variables Initialization starts here
		DECLARE @START_PERIOD_SID INT
			,@BU_COMPANY INT
			,@GL_COMPANY INT
			,@TO_PERIOD_SID INT
			,@TO_DATE DATETIME
			,@FROM_DATE DATETIME,
			 @SUMMARY_TYPE INT
		DECLARE @SQL NVARCHAR(max)
		DECLARE @ARM_BSR_RETURN_RESERVE VARCHAR(200) = CONCAT ('ST_ARM_BSR_RETURN_RESERVE_',@USER_ID,'_',@SESSION_ID,'_',REPLACE(CONVERT(VARCHAR(50), GETDATE(), 2), '.', ''))
		-- Variables Initialization Ends here
----------------Creating all necessray temp tables(all ddl statements) for the logic Starts here (PE010 CodeGuarderror)
		IF OBJECT_ID('TEMPDB..#TEMP_ARM_PROJ_MASTER') IS NOT NULL 
        DROP TABLE #TEMP_ARM_PROJ_MASTER 

      CREATE TABLE #TEMP_ARM_PROJ_MASTER 
        ( 
           ARM_ADJUSTMENT_DETAILS_SID INT NOT NULL, 
           CCP_DETAILS_SID            INT NOT NULL, 
           RS_MODEL_SID               INT NOT NULL, 
           CONTRACT_MASTER_SID        INT NOT NULL, 
           COMPANY_MASTER_SID         INT NOT NULL, 
           ITEM_MASTER_SID            INT NOT NULL
           PRIMARY KEY (ARM_ADJUSTMENT_DETAILS_SID) 
        ) 

		IF OBJECT_ID('TEMPDB..#ARM_BSR_CCP') IS NOT NULL 
  DROP TABLE #ARM_BSR_CCP 

CREATE TABLE #ARM_BSR_CCP 
  ( 
     ARM_ADJUSTMENT_DETAILS_SID INT NOT NULL, 
     ACCOUNT VARCHAR(100) NOT NULL,
	 RETURN_RESERVE INT NULL,
	 CCP_DETAILS_SID INT NULL, 
     RS_MODEL_SID               INT NULL, 
  ) 

  IF OBJECT_ID('TEMPDB..#TEMP_ARM_APPRVD_PROJ_START') IS NOT NULL
			DROP TABLE #TEMP_ARM_APPRVD_PROJ_START
    CREATE TABLE #TEMP_ARM_APPRVD_PROJ_START
	  (
	  ARM_ADJUSTMENT_DETAILS_SID INT NOT NULL,
	  PROJECTION_MASTER_SID INT NOT NULL,
	  CCP_DETAILS_SID INT NOT NULL,
	  RS_MODEL_SID INT NOT NULL,
	  ADJUSTMENT_TYPE INT  NULL,
	  GL_PERIOD_SID   INT NULL
	  )

IF OBJECT_ID('TEMPDB..#TEMP_ACTIVE_PERIOD_BALANCE') IS NOT NULL 
  DROP TABLE #TEMP_ACTIVE_PERIOD_BALANCE 

CREATE TABLE #TEMP_ACTIVE_PERIOD_BALANCE 
  ( 
     CCP_DETAILS_SID INT NOT NULL, 
	 RS_MODEL_SID INT NOT NULL,
     PERIOD_SID                 INT NOT NULL, 
     RETURN_RESERVE           NUMERIC(22, 6) NULL, 
     PRIMARY KEY(CCP_DETAILS_SID,RS_MODEL_SID,PERIOD_SID) 
  ) 

IF OBJECT_ID('TEMPDB..#TEMP_HIST_PERIOD_BALANCE') IS NOT NULL 
  DROP TABLE #TEMP_HIST_PERIOD_BALANCE 

CREATE TABLE #TEMP_HIST_PERIOD_BALANCE 
  ( 
     CCP_DETAILS_SID INT NOT NULL, 
	 RS_MODEL_SID INT NOT NULL,
     PERIOD_SID                 INT NOT NULL, 
     RETURN_RESERVE           NUMERIC(22, 6) NULL
     PRIMARY KEY(CCP_DETAILS_SID,RS_MODEL_SID,PERIOD_SID) 
  ) 

IF OBJECT_ID('TEMPDB..#TEMP_PERIOD_BALANCE') IS NOT NULL 
  DROP TABLE #TEMP_PERIOD_BALANCE 

CREATE TABLE #TEMP_PERIOD_BALANCE 
  ( 
     ARM_ADJUSTMENT_DETAILS_SID INT NOT NULL, 
     PERIOD_SID                 INT NOT NULL, 
     CCP_DETAILS_SID            INT NOT NULL, 
     RS_MODEL_SID               INT NOT NULL, 
     RETURN_RESERVE           NUMERIC(22, 6) NULL, 
     PRIMARY KEY(ARM_ADJUSTMENT_DETAILS_SID, PERIOD_SID) 
  ) 

IF OBJECT_ID('TEMPDB..#ARM_STARTING_BALANCE') IS NOT NULL 
  DROP TABLE #ARM_STARTING_BALANCE 

CREATE TABLE #ARM_STARTING_BALANCE 
  ( 
     CCP_DETAILS_SID  INT NOT NULL, 
     RS_MODEL_SID     INT NOT NULL, 
     PERIOD_SID       INT NOT NULL, 
     STARTING_BALANCE NUMERIC(22, 6) NULL
	 PRIMARY KEY(CCP_DETAILS_SID,RS_MODEL_SID,PERIOD_SID)
  )

IF OBJECT_ID('TEMPDB..#CTE') IS NOT NULL 
  DROP TABLE #CTE 

CREATE TABLE #CTE 
  ( 
     ARM_ADJUSTMENT_DETAILS_SID INT NOT NULL, 
     PERIOD_SID                 INT NOT NULL, 
     STARTING_BALANCE           NUMERIC(22, 6) NULL, 
     RETURN_RESERVE             NUMERIC(22, 6) NULL,
	 ENDING_BALANCE             NUMERIC(22, 6) NULL,
	 ROWNUM                     INT NOT NULL
     PRIMARY KEY(ARM_ADJUSTMENT_DETAILS_SID, PERIOD_SID) 
  ); 

IF OBJECT_ID('TEMPDB..#END_CALCULATION') IS NOT NULL 
  DROP TABLE #END_CALCULATION 

CREATE TABLE #END_CALCULATION 
  ( 
     ARM_ADJUSTMENT_DETAILS_SID INT NOT NULL, 
     PERIOD_SID                 INT NOT NULL, 
     STARTING_BALANCE           NUMERIC(22, 6) NULL, 
     ENDING_BALANCE             NUMERIC(22, 6) NULL 
     PRIMARY KEY(ARM_ADJUSTMENT_DETAILS_SID, PERIOD_SID) 
  )
----------------Creating all necessray temp tables(all ddl statements) for the logic Ends here (PE010 CodeGuarderror)
-----------taking price related period selected in data selection and assigning GL and BU to variable starts here 
		SELECT @TO_DATE = DATEADD(DD, 1, Eomonth(TO_DATE, - 1))
			,@FROM_DATE = DATEADD(DD, 1, Eomonth(FROM_DATE, - 1))
			,@GL_COMPANY = COMPANY_MASTER_SID
		FROM PROJECTION_MASTER
		WHERE PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID

		SET @START_PERIOD_SID = (
				SELECT PERIOD_SID
				FROM PERIOD
				WHERE PERIOD_DATE = @FROM_DATE
				)
		SET @TO_PERIOD_SID = (
				SELECT PERIOD_SID
				FROM PERIOD
				WHERE PERIOD_DATE = @TO_DATE
				)

		SELECT @BU_COMPANY = BU_COMPANY_MASTER_SID,@SUMMARY_TYPE=TRANSACTION_TYPE
		FROM ARM_ADJUSTMENT_MASTER
		WHERE PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID

		--taking price related period selected in data selection and assigning GL and BU to variable Ends here 
		--PULLING CCP+D COMBINATION FOR CURRENT PROJECTION(BALNCE REPORT) Starts here
      INSERT INTO #TEMP_ARM_PROJ_MASTER 
                  (ARM_ADJUSTMENT_DETAILS_SID, 
                   CCP_DETAILS_SID, 
                   RS_MODEL_SID, 
                   CONTRACT_MASTER_SID, 
                   COMPANY_MASTER_SID, 
                   ITEM_MASTER_SID) 
      SELECT A.ARM_ADJUSTMENT_DETAILS_SID,
             A.CCP_DETAILS_SID, 
             A.RS_MODEL_SID, 
             B.CONTRACT_MASTER_SID, 
             B.COMPANY_MASTER_SID, 
             B.ITEM_MASTER_SID
      FROM   ARM_ADJUSTMENT_DETAILS A 
             JOIN CCP_DETAILS B 
               ON A.CCP_DETAILS_SID = B.CCP_DETAILS_SID 
             JOIN ARM_ADJUSTMENT_MASTER AM 
               ON AM.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID 
          WHERE  A.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID 
--PULLING CCP+D COMBINATION FOR CURRENT PROJECTION(BALNCE REPORT) Ends here

--identifying Balance summary Configuration accounts and adjustment types w.r.t to CCP+D 

INSERT INTO #ARM_BSR_CCP 
            (ARM_ADJUSTMENT_DETAILS_SID, 
             ACCOUNT, 
			 RETURN_RESERVE,
             CCP_DETAILS_SID, 
             RS_MODEL_SID
            ) 
SELECT AAS.ARM_ADJUSTMENT_DETAILS_SID, 
       AAS.ACCOUNT,
       AAS.RETURN_RESERVE,
       TA.CCP_DETAILS_SID, 
       TA.RS_MODEL_SID
FROM   ARM_BSR_CCP AAS 
       JOIN #TEMP_ARM_PROJ_MASTER TA 
         ON AAS.ARM_ADJUSTMENT_DETAILS_SID = TA.ARM_ADJUSTMENT_DETAILS_SID 
            AND AAS.SUMMARY_TYPE = @SUMMARY_TYPE 


-----------Approved CCP+D+ADJUSTMENT_TYPE+ACCOUNT'S for the Particular Adjustment type starts here 
	  INSERT INTO #TEMP_ARM_APPRVD_PROJ_START(ARM_ADJUSTMENT_DETAILS_SID,PROJECTION_MASTER_SID,CCP_DETAILS_SID,RS_MODEL_SID,
	  ADJUSTMENT_TYPE,GL_PERIOD_SID)
		SELECT DISTINCT AD.ARM_ADJUSTMENT_DETAILS_SID
			,AAM.PROJECTION_MASTER_SID
			,TAM.CCP_DETAILS_SID
			,TAM.RS_MODEL_SID
			,AAM.TRANSACTION_TYPE AS ADJUSTMENT_TYPE
			,P.PERIOD_SID AS GL_PERIOD_SID
		FROM  ARM_ADJUSTMENT_DETAILS AD 
		INNER JOIN #TEMP_ARM_PROJ_MASTER TAM ON TAM.CCP_DETAILS_SID = AD.CCP_DETAILS_SID
			AND TAM.RS_MODEL_SID = AD.RS_MODEL_SID
		INNER JOIN ARM_ADJUSTMENT_MASTER AAM ON AAM.PROJECTION_MASTER_SID = AD.PROJECTION_MASTER_SID
			AND AAM.BU_COMPANY_MASTER_SID = @BU_COMPANY
	    INNER JOIN PERIOD P ON P.PERIOD_DATE=CONVERT(datetime, DATEADD(MM, -1, DATEADD(DD, 1, EOMONTH(AAM.GL_IMPACT_DATE, 0))))
		INNER JOIN PROJECTION_MASTER PM ON AAM.PROJECTION_MASTER_SID = PM.PROJECTION_MASTER_SID
			AND PM.COMPANY_MASTER_SID = @GL_COMPANY
		INNER JOIN WORKFLOW_MASTER WM ON WM.PROJECTION_MASTER_SID = AAM.PROJECTION_MASTER_SID
			AND WM.WORKFLOW_ID LIKE 'ARM%'
			AND EXISTS (
				SELECT H1.HELPER_TABLE_SID
				FROM HELPER_TABLE H1
				WHERE H1.LIST_NAME = 'WORKFLOWSTATUS'
					AND H1.DESCRIPTION = 'APPROVED'
					AND H1.HELPER_TABLE_SID = WM.WORKFLOW_STATUS_ID
				);


--------------Active Period Balances(based on balance summary configuration) calucltraion Starts here

INSERT INTO #TEMP_ACTIVE_PERIOD_BALANCE 
            (CCP_DETAILS_SID,
			 RS_MODEL_SID,
             PERIOD_SID, 
             RETURN_RESERVE
			 ) 
SELECT TAM.CCP_DETAILS_SID,
       TAM.RS_MODEL_SID,
       P.PERIOD_SID, 
       ISNULL(SUM(AA_P.CREDIT), 0) - ISNULL(SUM(AA_P.DEBIT), 0)                                                                                                                                                                                                    AS RETURN_RESERVE                                                                                                                                                                      
FROM   #TEMP_ARM_PROJ_MASTER TAM 
       INNER JOIN #ARM_BSR_CCP BSC 
               ON TAM.ARM_ADJUSTMENT_DETAILS_SID = BSC.ARM_ADJUSTMENT_DETAILS_SID 
       INNER JOIN PERIOD P 
               ON P.PERIOD_SID BETWEEN @START_PERIOD_SID AND @TO_PERIOD_SID 
       INNER JOIN #TEMP_ARM_APPRVD_PROJ_START TAP_P 
              ON TAP_P.CCP_DETAILS_SID = TAM.CCP_DETAILS_SID 
                 AND TAP_P.RS_MODEL_SID = TAM.RS_MODEL_SID 
                 AND BSC.RETURN_RESERVE = TAP_P.ADJUSTMENT_TYPE
				 AND TAP_P.GL_PERIOD_SID = P.PERIOD_SID 
       LEFT JOIN ARM_ADJUSTMENTS AA_P 
              ON AA_P.ARM_ADJUSTMENT_DETAILS_SID = TAP_P.ARM_ADJUSTMENT_DETAILS_SID 
                 AND AA_P.ADJUSTMENT_TYPE = BSC.RETURN_RESERVE 
                 AND AA_P.ACCOUNT = BSC.ACCOUNT 
GROUP  BY TAM.CCP_DETAILS_SID, 
          TAM.RS_MODEL_SID,
          P.PERIOD_SID

--------------------taking  History Records FOR Period Balance starts here
INSERT INTO #TEMP_HIST_PERIOD_BALANCE(CCP_DETAILS_SID,RS_MODEL_SID,PERIOD_SID,RETURN_RESERVE)
SELECT TAM.CCP_DETAILS_SID,TAM.RS_MODEL_SID,P.PERIOD_SID,
ISNULL(SUM(AH_P.CREDIT), 0) - ISNULL(SUM(AH_P.DEBIT), 0) AS RETURN_RESERVE
  FROM #TEMP_ARM_PROJ_MASTER TAM 
       INNER JOIN #ARM_BSR_CCP BSC 
               ON TAM.ARM_ADJUSTMENT_DETAILS_SID = BSC.ARM_ADJUSTMENT_DETAILS_SID 
       INNER JOIN PERIOD P 
               ON P.PERIOD_SID BETWEEN @START_PERIOD_SID AND @TO_PERIOD_SID 
		INNER JOIN RS_CONTRACT R 
         ON R.RS_MODEL_SID = TAM.RS_MODEL_SID 
            AND R.CONTRACT_MASTER_SID = TAM.CONTRACT_MASTER_SID 
       INNER JOIN ARM_DEDUCTION_SELECTION ADS 
         ON ADS.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID
            AND ADS.RS_CONTRACT_SID = R.RS_CONTRACT_SID 
		INNER JOIN ARM_HIST_ADJ_RES_CON_MASTER AHM
	     ON AHM.RS_CATEGORY = R.RS_CATEGORY 
            AND AHM.RS_TYPE = R.RS_TYPE 
            AND AHM.REBATE_PROGRAM_TYPE = R.REBATE_PROGRAM_TYPE 
	        AND AHM.GL_COMPANY_MASTER_SID=@GL_COMPANY
	   AND AHM.BU_COMPANY_MASTER_SID=@BU_COMPANY
	   AND AHM.CONFIGURATION_TYPE=0
	   LEFT JOIN ARM_HIST_ADJUSTMENTS AH_P
	   ON AH_P.ARM_HIST_ADJ_RES_CON_MASTER_SID=AHM.ARM_HIST_ADJ_RES_CON_MASTER_SID
	   AND AH_P.CCP_DETAILS_SID=TAM.CCP_DETAILS_SID AND AH_P.RS_MODEL_SID=TAM.RS_MODEL_SID
	   AND AH_P.GL_PERIOD_SID=P.PERIOD_SID AND AH_P.ADJUSTMENT_TYPE=BSC.RETURN_RESERVE
	   AND AH_P.ACCOUNT=BSC.ACCOUNT
GROUP  BY TAM.CCP_DETAILS_SID, 
          TAM.RS_MODEL_SID,
          P.PERIOD_SID
---------------------Period balance Calculation including history Debits and Credits Calculation starts here 
INSERT INTO #TEMP_PERIOD_BALANCE 
            (ARM_ADJUSTMENT_DETAILS_SID, 
             PERIOD_SID, 
             CCP_DETAILS_SID, 
             RS_MODEL_SID, 
             RETURN_RESERVE 
            ) 
SELECT TAM.ARM_ADJUSTMENT_DETAILS_SID, 
       P.PERIOD_SID, 
       TAM.CCP_DETAILS_SID, 
       TAM.RS_MODEL_SID, 
       ISNULL(TAP.RETURN_RESERVE,0) + ISNULL(THB.RETURN_RESERVE,0)     AS RETURN_RESERVE
FROM   #TEMP_ARM_PROJ_MASTER TAM 
       JOIN ARM_ADJUSTMENT_DETAILS AD 
         ON TAM.ARM_ADJUSTMENT_DETAILS_SID = AD.ARM_ADJUSTMENT_DETAILS_SID 
       INNER JOIN PERIOD P 
               ON P.PERIOD_SID BETWEEN @START_PERIOD_SID AND @TO_PERIOD_SID 
       LEFT JOIN #TEMP_ACTIVE_PERIOD_BALANCE TAP 
              ON TAM.CCP_DETAILS_SID = TAP.CCP_DETAILS_SID 
                 AND TAM.RS_MODEL_SID = TAP.RS_MODEL_SID 
                 AND P.PERIOD_SID = TAP.PERIOD_SID 
       LEFT JOIN #TEMP_HIST_PERIOD_BALANCE THB 
              ON TAM.CCP_DETAILS_SID = THB.CCP_DETAILS_SID 
                 AND TAM.RS_MODEL_SID = THB.RS_MODEL_SID 
                 AND P.PERIOD_SID = THB.PERIOD_SID 

-------------------------------------Starting Balance Calculation Starts here Inclusion of History Calculation
  ; WITH CTE 
     AS (SELECT TAM.CCP_DETAILS_SID, 
                TAM.RS_MODEL_SID, 
                @START_PERIOD_SID                                    AS PERIOD_SID, 
                ISNULL(SUM(AA.CREDIT), 0) - ISNULL(SUM(AA.DEBIT), 0) AS STARTING_BALANCE 
         FROM   #TEMP_ARM_PROJ_MASTER TAM 
                INNER JOIN #ARM_BSR_CCP BSC 
                        ON TAM.ARM_ADJUSTMENT_DETAILS_SID = BSC.ARM_ADJUSTMENT_DETAILS_SID 
                INNER JOIN #TEMP_ARM_APPRVD_PROJ_START TAP 
                        ON TAP.CCP_DETAILS_SID = TAM.CCP_DETAILS_SID 
                           AND TAP.RS_MODEL_SID = TAM.RS_MODEL_SID 
                LEFT JOIN ARM_ADJUSTMENTS AA 
                  ON AA.ARM_ADJUSTMENT_DETAILS_SID = TAP.ARM_ADJUSTMENT_DETAILS_SID 
                     AND TAP.GL_PERIOD_SID < @START_PERIOD_SID 
                     AND AA.ACCOUNT = BSC.ACCOUNT 
         GROUP  BY TAM.CCP_DETAILS_SID, 
                   TAM.RS_MODEL_SID 
         UNION ALL 
         SELECT TAM.CCP_DETAILS_SID, 
                TAM.RS_MODEL_SID, 
                @START_PERIOD_SID                                    AS PERIOD_SID, 
                ISNULL(SUM(AH.CREDIT), 0) - ISNULL(SUM(AH.DEBIT), 0) AS STARTING_BALANCE 
         FROM   #TEMP_ARM_PROJ_MASTER TAM 
                INNER JOIN #ARM_BSR_CCP BSC 
                        ON TAM.ARM_ADJUSTMENT_DETAILS_SID = BSC.ARM_ADJUSTMENT_DETAILS_SID 
                INNER JOIN RS_CONTRACT R 
                        ON R.RS_MODEL_SID = TAM.RS_MODEL_SID 
                           AND R.CONTRACT_MASTER_SID = TAM.CONTRACT_MASTER_SID 
                INNER JOIN ARM_DEDUCTION_SELECTION ADS 
                        ON ADS.PROJECTION_MASTER_SID = @PROJECTION_MASTER_SID 
                           AND ADS.RS_CONTRACT_SID = R.RS_CONTRACT_SID 
                INNER JOIN ARM_HIST_ADJ_RES_CON_MASTER AHM 
                        ON AHM.RS_CATEGORY = R.RS_CATEGORY 
                           AND AHM.RS_TYPE = R.RS_TYPE 
                           AND AHM.REBATE_PROGRAM_TYPE = R.REBATE_PROGRAM_TYPE 
                           AND AHM.GL_COMPANY_MASTER_SID = @GL_COMPANY 
                           AND AHM.BU_COMPANY_MASTER_SID = @BU_COMPANY 
                           AND AHM.CONFIGURATION_TYPE = 0 
                LEFT JOIN ARM_HIST_ADJUSTMENTS AH 
                       ON AH.ARM_HIST_ADJ_RES_CON_MASTER_SID = AHM.ARM_HIST_ADJ_RES_CON_MASTER_SID
                          AND TAM.CCP_DETAILS_SID = AH.CCP_DETAILS_SID 
                          AND TAM.RS_MODEL_SID = AH.RS_MODEL_SID 
                          AND AH.GL_PERIOD_SID < @START_PERIOD_SID 
                          AND AH.ACCOUNT = BSC.ACCOUNT 
         GROUP  BY TAM.CCP_DETAILS_SID, 
                   TAM.RS_MODEL_SID)

INSERT INTO #ARM_STARTING_BALANCE 
            (CCP_DETAILS_SID, 
             RS_MODEL_SID, 
             PERIOD_SID, 
             STARTING_BALANCE) 
SELECT C.CCP_DETAILS_SID, 
       C.RS_MODEL_SID, 
       C.PERIOD_SID, 
       SUM(STARTING_BALANCE) 
FROM   CTE C 
GROUP  BY C.CCP_DETAILS_SID, 
          C.RS_MODEL_SID, 
          C.PERIOD_SID 

------------Calculating Starting and Ending and Period Balnce Calculation Logic Starts here

INSERT INTO #CTE(ARM_ADJUSTMENT_DETAILS_SID,PERIOD_SID,STARTING_BALANCE,RETURN_RESERVE,ENDING_BALANCE,ROWNUM)
SELECT   
                TAM.ARM_ADJUSTMENT_DETAILS_SID, 
                P.PERIOD_SID, 
                SB.STARTING_BALANCE, 
                PB.RETURN_RESERVE, 
                ISNULL(SB.STARTING_BALANCE, 0) 
                + ISNULL(PB.RETURN_RESERVE, 0) AS ENDING_BALANCE,
				ROW_NUMBER() 
                           OVER ( 
                             PARTITION BY TAM.ARM_ADJUSTMENT_DETAILS_SID 
                             ORDER BY TAM.ARM_ADJUSTMENT_DETAILS_SID, P.PERIOD_SID) AS ROWNUM 
         FROM   #TEMP_ARM_PROJ_MASTER TAM 
                INNER JOIN PERIOD P 
                        ON PERIOD_SID BETWEEN @START_PERIOD_SID AND @TO_PERIOD_SID 
                LEFT JOIN #TEMP_PERIOD_BALANCE PB 
                       ON PB.ARM_ADJUSTMENT_DETAILS_SID = TAM.ARM_ADJUSTMENT_DETAILS_SID 
                          AND PB.PERIOD_SID = P.PERIOD_SID 
                LEFT JOIN #ARM_STARTING_BALANCE SB 
                       ON SB.CCP_DETAILS_SID = TAM.CCP_DETAILS_SID 
                          AND SB.RS_MODEL_SID = TAM.RS_MODEL_SID 
                          AND PB.PERIOD_SID = P.PERIOD_SID

  ; WITH CTE2 
     AS (SELECT *, 
                CAST(STARTING_BALANCE AS NUMERIC(22, 6)) AS NEW_SB, 
                CAST(ENDING_BALANCE AS NUMERIC(22, 6))   AS NEW_EB 
         FROM   #CTE 
         WHERE  ROWNUM = 1 
         UNION ALL 
         SELECT A.*, 
                CAST(CTE2.NEW_EB AS NUMERIC(22, 6))                       AS NEW_SB, 
                CAST(CTE2.NEW_EB 
                     + ISNULL(A.RETURN_RESERVE, 0) AS NUMERIC(22, 6)) AS NEW_EB 
         FROM   #CTE A 
                JOIN CTE2 
                  ON A.ROWNUM = CTE2.ROWNUM + 1 
                     AND A.ARM_ADJUSTMENT_DETAILS_SID = CTE2.ARM_ADJUSTMENT_DETAILS_SID) 
INSERT INTO #END_CALCULATION 
            (ARM_ADJUSTMENT_DETAILS_SID, 
             PERIOD_SID, 
             STARTING_BALANCE, 
             ENDING_BALANCE) 
SELECT ARM_ADJUSTMENT_DETAILS_SID, 
       PERIOD_SID, 
       ISNULL(NEW_SB,0) AS STARTING_BALANCE, 
       ISNULL(NEW_EB,0) AS ENDING_BALANCE 
FROM   CTE2 
ORDER  BY ARM_ADJUSTMENT_DETAILS_SID, 
          PERIOD_SID 

--Truncating Previous records and re Insertion Into Main table starts here

SET @SQL=CONCAT('IF EXISTS (SELECT 1 FROM ', @ARM_BSR_RETURN_RESERVE, ' R INNER JOIN ARM_ADJUSTMENT_DETAILS A 
                                          ON R.ARM_ADJUSTMENT_DETAILS_SID = A.ARM_ADJUSTMENT_DETAILS_SID )  
					                   BEGIN 
												TRUNCATE TABLE ', @ARM_BSR_RETURN_RESERVE, '  
									   END

INSERT INTO ', @ARM_BSR_RETURN_RESERVE , '(ARM_ADJUSTMENT_DETAILS_SID,
PERIOD_SID          ,
STARTING_BALANCE	,
RETURN_RESERVE	,
ENDING_BALANCE) SELECT TP.ARM_ADJUSTMENT_DETAILS_SID,
TP.PERIOD_SID          ,
EC.STARTING_BALANCE	,
TP.RETURN_RESERVE	,
EC.ENDING_BALANCE FROM #TEMP_PERIOD_BALANCE TP JOIN #END_CALCULATION EC
ON TP.ARM_ADJUSTMENT_DETAILS_SID=EC.ARM_ADJUSTMENT_DETAILS_SID AND TP.PERIOD_SID=EC.PERIOD_SID')

		EXEC sp_executesql @SQL
			----------------------------------------------Actual Payment Calculation starts here--------------------------------------------
	END TRY

	BEGIN CATCH
		DECLARE @ERRORMESSAGE NVARCHAR(4000);
		DECLARE @ERRORSEVERITY INT;
		DECLARE @ERRORSTATE INT;
		DECLARE @ERRORNUMBER INT;
		DECLARE @ERRORPROCEDURE VARCHAR(200);
		DECLARE @ERRORLINE INT;

		EXEC [dbo].Usperrorcollector

		SELECT @ERRORMESSAGE = ERROR_MESSAGE()
			,@ERRORSEVERITY = ERROR_SEVERITY()
			,@ERRORSTATE = ERROR_STATE()
			,@ERRORPROCEDURE = ERROR_PROCEDURE()
			,@ERRORLINE = ERROR_LINE()
			,@ERRORNUMBER = ERROR_NUMBER()

		RAISERROR (
				@ERRORMESSAGE
				,-- MESSAGE TEXT.
				@ERRORSEVERITY
				,-- SEVERITY.
				@ERRORSTATE
				,-- STATE.
				@ERRORPROCEDURE
				,-- PROCEDURE_NAME.
				@ERRORNUMBER
				,-- ERRORNUMBER
				@ERRORLINE -- ERRORLINE
				);
	END CATCH
END
GO